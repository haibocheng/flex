<?xml version="1.0" encoding="utf-8" ?> 
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" xmlns:mx="library://ns.adobe.com/flex/halo" 
               xmlns:layouts="layouts.*"
               width="100%"
               height="100%" applicationComplete="generateElements(16, g);">

    <fx:Script>
        <![CDATA[
            import spark.effects.animation.MotionPath;
            import spark.effects.animation.SimpleMotionPath;
            import mx.core.IVisualElement;
            import spark.components.Button;
            import mx.collections.ArrayList;
            public var gen:int = 0;
            import spark.primitives.Rect;
            import mx.graphics.SolidColorStroke;
            import flash.events.MouseEvent;
            import layouts.NumberInterpolatorWrapping;
            
            public function generateButton():spark.components.Button
            {
                var b:spark.components.Button = new spark.components.Button();
                var rows:int = 1 + Math.random() * 8;
                var columns:int = 1 + Math.random() * 40;
                var text:String = new String();
                for (var j:int = 0; j <rows; j++)
                {
                    for (var k:int = 0; k<columns; k++)
                    {
                        var character:int = Math.random() * 10;
                        text +=  character > 8 ? int(Math.random()*10).toString() : " ";
                    }
                    text += "\n";
                }
                b.label = text;
                b.addEventListener("click" /*MouseEvent.ROLL_OVER*/, eventHandler);
                return b;
            }
            
            public function generateRect():Rect
            {
                var r:Rect = new Rect();
                r.stroke = new SolidColorStroke();
                
                r.width = 50 + Math.random() * 200;
                r.height = 50 + Math.random() * 200; 
                
                return r;
            }
            
            public function generateElements(number:int, g:Group):void
            {
                if (gen == 0)
                {
                    gen = 1;
                    return;
                }

                while(g.numElements > 0)
                   g.removeElementAt( g.numElements - 1);
                    
                for (var i:int = 0; i<number; i++)
                {
                    g.addElement(generateButton());
                }    
            }
            
           import flash.geom.Point;
           import spark.effects.Animate;
           import spark.effects.animation.SimpleMotionPath;
           
           public function eventHandler(event:Event):void
           {
               var index:int = g.getElementIndex(event.target as IVisualElement);
               if (index != -1)
                   testGroup(g, index);
           }
           
           public function testGroup(g:Group, n:int):void
           {
               var p:Point = g.layout.getScrollPositionDeltaToElement(n);
               if (p)
               {
                   //g.horizontalScrollPosition += p.x; 
                   //g.verticalScrollPosition += p.y;

                   var startX:Number = g.horizontalScrollPosition;
                   var startY:Number = g.verticalScrollPosition;
                   var anim:Animate = new Animate();
                   //anim.duration = 500;//Math.max(550, Math.min(2500, Math.abs(p.x) * 2));
                   anim.motionPaths = new <MotionPath>[
                       new SimpleMotionPath("horizontalScrollPosition", startX, startX + p.x, 500),
                       new SimpleMotionPath("verticalScrollPosition", startY, startY + p.y, 500)
                   ];
                   
                   var interpolator:NumberInterpolatorWrapping = new NumberInterpolatorWrapping(0, g.contentWidth - g.measuredWidth);
                   var scrollLength:Number = interpolator.getLength(startX, startX + p.x);
                   anim.interpolator = interpolator;
                   anim.duration = Math.max(550, Math.min(2500, scrollLength * 2));
                   
                   anim.play([g]);
               }
           }
        ]]>
    </fx:Script>

    <s:states>
        <s:State name="_3d"/>
        <s:State name="vertical"/>
    </s:states>

    <s:layout>
        <s:BasicLayout/>
    </s:layout>

    <s:Group width="100%" height="100%">
        <s:layout>
            <s:VerticalLayout/>
        </s:layout>

        <s:HSlider id="itemGenerator" minimum="0" maximum="50" width="200"
            liveDragging="true" value="16" valueCommit="generateElements(itemGenerator.value, g);"/>
             
        <s:HSlider minimum="0" maximum="100" value="44" width="200" id="gapSlider" liveDragging="true"/> 
        <s:HSlider minimum="-90" maximum="+90" value="-10" width="200" id="axisSlider" liveDragging="true"
             stepSize="0.01" snapInterval="0.01"/> 

        <s:Button label="change layout" click.vertical="currentState='_3d'" click._3d="currentState='vertical'"/>

<!--
        <s:HSlider minimum="10" maximum="1000" value="400" width="200" id="widthSlider" liveDragging="true"/> 
        <s:HSlider minimum="10" maximum="1000" value="400" width="200" id="heightSlider" liveDragging="true"/>
-->        

<!--    
    <s:List itemRenderer="TileItemRenderer" 
        dataProvider="{new ArrayList('the quick brown fox jumped over lazy dog'.split(' '))}" height="100%" width="100%">
            <s:layout.vertical>
               <s:VerticalLayout gap="6"/> 
            </s:layout.vertical>
            <s:layout._3d>
                <ugh:WheelLayout gap="{gapSlider.value}" axisAngle="{axisSlider.value}"/>  
            </s:layout._3d>
    </s:List>
-->

    <s:Group width="100%" height="100%">

        <s:Group horizontalCenter="0" verticalCenter="0" clipAndEnableScrolling="true">
            <s:Scroller tabChildren="true">
                <s:Group id="g" tabChildren="true" clipAndEnableScrolling="false">
                    <s:layout.vertical>
                       <s:VerticalLayout gap="6"/> 
                    </s:layout.vertical>
                    <s:layout._3d>
                        <layouts:WheelLayout gap="{gapSlider.value}" axisAngle="{axisSlider.value}"/>  
                    </s:layout._3d>


                    <s:Rect right="0" left="0" top="0" bottom="0" width="300" height="300">
                        <s:stroke>
                            <mx:SolidColorStroke color="0xFF0000"/>
                        </s:stroke>
                    </s:Rect>
                    <mx:Button width="300" height="300"/>
                </s:Group>
            </s:Scroller>
    
            <s:Rect right="0" left="0" top="0" bottom="0">
                <s:stroke>
                    <mx:SolidColorStroke color="0xFF0000"/>
                </s:stroke>
            </s:Rect>
        </s:Group>
    </s:Group>
    </s:Group>

</s:Application>