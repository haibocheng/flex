<?xml version="1.0"?>
<apiPackage id="mx.controls"><apiName>mx.controls</apiName><apiDetail/><apiClassifier id="mx.controls:FileSystemDataGrid"><apiName>FileSystemDataGrid</apiName><shortdesc>
  Mithilfe des FileSystemDataGrid-Steuerelements können Sie die Inhalte eines einzelnen Dateisystemordners im Datenrasterformat anzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="EmbeddedFile" inherit="no" name="fileIcon" owner="mx.controls:FileSystemDataGrid" playerVersion="AIR1.1" type="Class">
<description>
  Legt das Symbol fest, durch das eine Datei dargestellt wird. Das Standardsymbol liegt in der Datei „Assets.swf“ In MXML können Sie die folgende Syntax verwenden, um diese Eigenschaft festzulegen: <codeph>fileIcon="@Embed(source='fileIcon.jpg');"</codeph>
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="directoryIcon" owner="mx.controls:FileSystemDataGrid" playerVersion="AIR1.1" type="Class">
<description>
  Legt das Symbol fest, das den Ordner anzeigt. Das Standardsymbol liegt in der Datei „Assets.swf“ In MXML können Sie die folgende Syntax verwenden, um diese Eigenschaft festzulegen: <codeph>directoryIcon="@Embed(source='directoryIcon.jpg');"</codeph>
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemDataGrid&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemDataGrid
    <strong>Properties</strong>
    dateFormatString=""
    directory="<i>null</i>"
    enumerationMode="directoriesFirst"
    extensions="<i>null</i>"
    filterFunction="<i>null</i>"
    nameCompareFunction="<i>null</i>"
    selectedPath="<i>null</i>"
    selectedPaths="<i>null</i>"
    showExtensions="true"
    showHidden="false"
    showIcons="true"
 
    <strong>Styles</strong>
    directoryIcon="<i>TreeNodeIcon</i>"
    fileIcon="<i>TreeNodeIcon</i>"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
    directoryChanging="<i>No default</i>"
    fileChoose="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:DataGrid</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mithilfe des FileSystemDataGrid-Steuerelements können Sie die Inhalte eines einzelnen Dateisystemordners im Datenrasterformat anzeigen.
 
  <p>Die für jedes Element angezeigten Informationen umfassen Name (mit einem optionalen generischen Symbol), Typ, Größe, Erstellungsdatum und Änderungsdatum. Dafür erstellt FileSystemDataGrid automatisch fünf Spalten (DataGridColumn-Instanzen) - <codeph>nameColumn</codeph>, <codeph>typeColumn</codeph>, <codeph>sizeColumn</codeph>, <codeph>creationDateColumn</codeph> und <codeph>modificationDateColumn</codeph> - und setzt die <codeph>columns</codeph>-Eigenschaft auf ein Array dieser fünf Instanzen. Jede Spalteninstanz wird so konfiguriert, dass sie automatisch eine passende <codeph>labelFunction</codeph>, <codeph>sortCompareFunction</codeph> usw. erhält. Wenn Sie nicht alle fünf Spalten verwenden oder die Reihenfolge ändern möchten, ändern Sie die <codeph>columns</codeph>-Eigenschaft. Wenn Sie eine Spalte anpassen möchten, z. B. durch das Ändern der <codeph>labelFunction</codeph>, weisen Sie diese Eigenschaft einfach dem entsprechenden Spaltenobjekt erneut zu.</p>
 
  <p>Um die angezeigten Daten zu ändern, anstatt die <codeph>dataProvider</codeph>-Eigenschaft zu verwenden, legen Sie die <codeph>directory</codeph>-Eigenschaft fest. Das Steuerelement füllt dann die <codeph>dataProvider</codeph>-Eigenschaft automatisch durch das Aufzählen der Ordnerinhalte. Sie sollten die <codeph>dataProvider</codeph>-Eigenschaft nicht selbst festlegen.</p>
 
  <p>Legen Sie die<codeph>directory</codeph>-Eigenschaft wie im folgenden Beispiel beschrieben auf eine Dateiinstanz fest:</p>
  <pre>&lt;mx:FileSystemDataGrid directory="{File.desktopDirectory}"/></pre>
 
  <p>Legen Sie die<codeph>enumerationMode</codeph>-Eigenschaft fest, um anzugeben, ob Dateien, Unterordner oder beide angezeigt werden sollen. Es gibt drei Arten, um beide anzuzeigen: Ordner zuerst, Dateien zuerst oder gemischt.</p>
 
  <p>Sie können die <codeph>extensions</codeph>-Eigenschaft festlegen, damit nur Dateien mit den festgelegten Erweiterungen angezeigt werden. Die <codeph>showHidden</codeph>-Eigenschaft legt fest, ob das Steuerelement Dateien und Unterordner anzeigt, die das Betriebssystem normalerweise ausblendet. Sie können eine zusätzliche <codeph>filterFunction</codeph> für die Ausführung benutzerdefinierter Filter und eine <codeph>nameCompareFunction</codeph> für die benutzerdefinierte Sortierung festlegen.</p>
 
  <p>Da AIR Dateisystemmeldungen nicht unterstützt, wird dieses Steuerelement nicht automatisch aktualisiert, wenn Dateien oder Unterordner erstellt, gelöscht, verschoben oder umbenannt werden; anders ausgedrückt kann es eine veraltete Ansicht des Dateisystems anzeigen. Sie können jedoch<codeph>refresh()</codeph> aufrufen, um die Inhalte des aktuellen <codeph>directory</codeph> erneut aufzulisten. Das können Sie beispielsweise dann tun, wenn Sie einen Dateivorgang ausgeführt haben, der zu einer veralteten Anzeige des Steuerelements führt oder wenn ein Benutzer die Anwendung deaktiviert und erneut aktiviert hat.</p>
 
  <p>Die <codeph>showIcons</codeph>-Eigenschaft wird für das Ein- bzw. Ausblenden von Symbolen und die <codeph>showExtensions</codeph>-Eigenschaft für das Ein- bzw. Ausblenden von Erweiterungen verwendet.</p>
 
  <p>Das Steuerelement stellt zwei Methoden bereit, <codeph>findItem()</codeph> und <codeph>findIndex()</codeph>, die Sie zum Durchsuchen der angezeigten Dateien und Unterordner verwenden können, um die/den durch einen <codeph>nativePath</codeph> bezeichnete/n Datei/Unterordner zu finden.</p>
 
  <p>Zwei Eigenschaften, <codeph>selectedPath</codeph> und <codeph>selectedPaths</codeph>, funktionieren ähnlich wie <codeph>selectedItem</codeph> und <codeph>selectedItems</codeph> oder <codeph>selectedIndex</codeph> und <codeph>selectedIndices</codeph>, erlauben Ihnen aber, die Auswahl über <codeph>nativePath</codeph>-Zeichenfolgen festzulegen. Sie sind hilfreich, wenn Sie einen Ordner mit bestimmten vorausgewählten Elementen anzeigen möchten, weil Sie in diesem Fall noch nicht über die Dateielemente verfügen, die das Steuerelement beim Auflisten des Ordners erstellt, und noch nicht wissen, wie deren Indizes lauten werden.</p>
 
  <p>Das Steuerelement erlaubt es dem Benutzer, mithilfe der Maus oder Tastatur zu anderen Ordnern zu navigieren. Der Benutzer kann versuchen, den Ordner zu ändern, indem er auf einen Unterordner doppelklickt, die Eingabetaste oder die Tastenkombination „Strg+Nach unten“ drückt, wenn ein Unterordner ausgewählt ist, die Tastenkombination „Strg+Nach oben“ drückt, wenn das Steuerelement den Ordner „COMPUTER“ nicht anzeigt, die Tastenkombination „Strg+Nach links“ drückt, wenn es einen „vorherigen“ Ordner gibt, zu dem man zurücknavigieren kann, oder die Tastenkombination „Strg+Nach rechts“ drückt, wenn es einen „nächsten“ Ordner gibt, zu dem man navigieren kann. Wenn der Benutzer versucht, den angezeigten Ordner zu ändern, löst das Steuerelement ein <codeph>directoryChanging</codeph>-Ereignis aus, das abgebrochen werden kann. Wenn dieses Ereignis nicht durch Aufrufen von <codeph>event.preventDefault()</codeph> abgebrochen wird, zeigt das Steuerelement die Inhalte des neuen Ordners und die Änderungen der <codeph>directory</codeph>-Eigenschaften an. Immer, wenn die <codeph>directory</codeph>-Eigenschaften, aus welchen Gründen auch immer, geändert werden, löst das Steuerelement ein <codeph>directoryChange</codeph>-Ereignis aus, das Sie davon informiert.</p>
 
  <p>Zur Unterstützung der Steuerelemente „Nach oben“ und „Nach unten“ verfügt die FileSystemList-Liste über die <codeph>canNavigateUp</codeph>- und <codeph>canNavigateDown</codeph>-Eigenschaften und die <codeph>navigateUp()</codeph>- und <codeph>navigateDown()</codeph>-Methoden. Für das Navigieren zu einem beliebigen Ordner steht <codeph>navigateTo()</codeph> zur Verfügung.</p>
 
  <p>Das Steuerelement merkt sich, zu welchen Ordnern navigiert wurde, damit Sie die Steuerelemente „Zurück“ und „Weiter“ einfach unterstützen können. Weitere Informationen finden Sie unter den Eigenschaften <codeph>backHistory</codeph>, <codeph>forwardHistory</codeph>, <codeph>canNavigateBack</codeph> und <codeph>canNavigateForward</codeph> und den Methoden <codeph>navigateBack()</codeph> und <codeph>navigateForward()</codeph>.</p>
 
  <p>Hinweis: Die für jedes Element angezeigten Symbole sind generische Datei- und Ordnersymbole, die mithilfe der Stile <codeph>fileIcon</codeph> und <codeph>directoryIcon</codeph> festgelegt werden. Die listenbasierten Steuerelemente von Flex unterstützen derzeit nur die Anzeige eingebetteter Symbole, keine zur Laufzeit gelesenen Symbole. Deshalb werden die eigentlichen im Betriebssystem angezeigten Dateisystemsymbole nicht in einem FileSystemDataGrid angezeigt, auch wenn sie in AIR über die <codeph>icon</codeph>-Eigenschaft einer Datei zugänglich sind.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemDataGrid_mx.events.FileEvent.FILE_CHOOSE_fileChoose"><apiName>fileChoose</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer eine Datei entweder durch Doppelklicken oder durch Auswählen und Drücken der Eingabetaste wählt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.FILE_CHOOSE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer eine Datei entweder durch Doppelklicken oder durch Auswählen und Drücken der Eingabetaste wählt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemDataGrid_mx.events.FileEvent.DIRECTORY_OPENING_directoryChanging"><apiName>directoryChanging</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer versucht, den von diesem Steuerelement angezeigten Ordner zu ändern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_OPENING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer versucht, den von diesem Steuerelement angezeigten Ordner zu ändern.
 
  <p>Der Benutzer kann versuchen, den Ordner zu ändern, indem er auf einen Unterordner doppelklickt, die Eingabetaste oder die Tastenkombination „Strg+Nach unten“ drückt, wenn ein Unterordner ausgewählt ist, die Tastenkombination „Strg+Nach oben“ drückt, wenn das Steuerelement den Ordner „COMPUTER“ nicht anzeigt, die Tastenkombination „Strg+Nach links“ drückt, wenn es in der Verlaufsliste einen „vorherigen“ Ordner gibt, zu dem man zurücknavigieren kann, oder die Tastenkombination „Strg+Nach rechts“ drückt, wenn es in der Verlaufsliste einen „nächsten“ Ordner gibt, zu dem man navigieren kann.</p>
 
  <p>Dieses Ereignis kann abgebrochen werden. Beim Aufrufen von <codeph>event.preventDefault()</codeph> wird der Ordner nicht geändert.</p>
 
  <p>Nachdem die <codeph>directory</codeph>-Eigenschaft geändert wurde und <codeph>dataProvider</codeph> File-Instanzen für die Elemente im neuen Ordner enthält, wird das <codeph>directoryChange</codeph>-Ereignis ausgelöst.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemDataGrid_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  Wird ausgelöst, wenn sich der ausgewählte Ordner, der von diesem Steuerelement angezeigt wird, aus irgendeinem Grund ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich der ausgewählte Ordner, der von diesem Steuerelement angezeigt wird, aus irgendeinem Grund ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemDataGrid:FileSystemDataGrid"><apiName>FileSystemDataGrid</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FileSystemDataGrid:clear"><apiName>clear</apiName><shortdesc conref="mx.controls.FileSystemList#clear()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#clear()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:findIndex"><apiName>findIndex</apiName><shortdesc conref="mx.controls.FileSystemList#findIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>Eine auf null basierende Indexposition oder <codeph>-1</codeph>, wenn keine Datei mit dem angegebenen Pfad gefunden wurde.
     
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Ein String, der den <codeph>nativePath</codeph> eines Dateielements angibt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:findItem"><apiName>findItem</apiName><shortdesc conref="mx.controls.FileSystemList#findItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.filesystem:File"/><apiDesc>Eine Dateiinstanz mit dem angegebenen <codeph>nativePath</codeph> oder <codeph>null</codeph>, wenn keine Dateiinstanz gefunden wurde.
      
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Ein String, der den <codeph>nativePath</codeph> eines Dateielements angibt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateBack"><apiName>navigateBack</apiName><shortdesc>
      Ändert dieses Steuerelement, sodass es die Inhalte eines früher besuchten Ordners aus dem backHistory-Array anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Die Indexposition im <codeph>backHistory</codeph>-Array, zu der navigiert werden soll. Der Standardwert ist 0; er gibt den Ordner an, der am wenigsten weit zurückliegt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ändert dieses Steuerelement, sodass es die Inhalte eines früher besuchten Ordners aus dem <codeph>backHistory</codeph>-Array anzeigt.
     
      <p>Wenn das <codeph>backHistory</codeph>-Array leer ist oder eine Indexposition angegeben wurde, die nicht im Array ist, bleibt diese Methode ergebnislos.</p>
     
      <p>Wenn diese Methode erfolgreich ausgeführt wird, enthält die <codeph>directory</codeph>-Eigenschaft die Dateiinstanz für den neuen Ordner. Die <codeph>dataProvider</codeph>-Eigenschaft ist temporär <codeph>null</codeph>, bis der neue Ordner aufgelistet wurde. Nach der Auflistung enthält die <codeph>dataProvider</codeph>-Eigenschaft eine ArrayCollection von Dateiinstanzen für die Inhalte des neuen Ordners.</p>
     
      <p>Die Verlaufsliste bleibt unverändert. Die aktuelle Indexposition verändert sich jedoch, was Auswirkungen auf die <codeph>backHistory</codeph>- sowie die <codeph>forwardHistory</codeph>-Eigenschaften hat. Diese verfügen über neue Werte, sobald die Methode erfolgreich ausgeführt wurde.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Methode gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Erstellung einer „Zurück“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/canNavigateBack"><linktext>canNavigateBack</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateDown"><apiName>navigateDown</apiName><shortdesc>
      Ändert dieses Steuerelement, sodass es die Inhalte des ausgewählten Unterordners anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ändert dieses Steuerelement, sodass es die Inhalte des ausgewählten Unterordners anzeigt.
     
      <p>Wenn kein Unterordner ausgewählt ist, bleibt diese Methode ergebnislos.</p>
     
      <p>Wenn diese Methode erfolgreich ausgeführt wird, enthält die <codeph>directory</codeph>-Eigenschaft die Dateiinstanz für den neuen Ordner. Die <codeph>dataProvider</codeph>-Eigenschaft ist temporär <codeph>null</codeph>, bis der neue Ordner aufgelistet wurde. Nach der Auflistung enthält die <codeph>dataProvider</codeph>-Eigenschaft eine ArrayCollection von Dateiinstanzen für die Inhalte des neuen Ordners.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Methode gemeinsam mit dem Button-Steuerelement zur Erstellung einer „Öffnen“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateDown"><linktext>canNavigateDown</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateForward"><apiName>navigateForward</apiName><shortdesc>
      Ändert dieses Steuerelement, sodass es die Inhalte eines früher besuchten Ordners aus dem forwardHistory-Array anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Die Indexposition im <codeph>forwardHistory</codeph>-Array, zu der navigiert werden soll. Der Standardwert ist 0; er gibt den Ordner an, der als Nächstes folgt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ändert dieses Steuerelement, sodass es die Inhalte eines früher besuchten Ordners aus dem <codeph>forwardHistroy</codeph>-Array anzeigt.
     
      <p>Wenn das <codeph>forwardHistory</codeph>-Array leer ist oder eine Indexposition angegeben wurde, die nicht im Array ist, bleibt diese Methode ergebnislos.</p>
     
      <p>Wenn diese Methode erfolgreich ausgeführt wird, enthält die <codeph>directory</codeph>-Eigenschaft die Dateiinstanz für den neuen Ordner. Die <codeph>dataProvider</codeph>-Eigenschaft ist temporär <codeph>null</codeph>, bis der neue Ordner aufgelistet wurde. Nach der Auflistung enthält die <codeph>dataProvider</codeph>-Eigenschaft eine ArrayCollection von Dateiinstanzen für die Inhalte des neuen Ordners.</p>
     
      <p>Die Verlaufsliste bleibt unverändert. Die aktuelle Indexposition verändert sich jedoch, was Auswirkungen auf die <codeph>backHistory</codeph>- sowie die <codeph>forwardHistory</codeph>-Eigenschaften hat. Diese verfügen über neue Werte, sobald die Methode erfolgreich ausgeführt wurde.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Methode gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Erstellung einer „Weiter“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateForward"><linktext>canNavigateForward</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/forwardHistory"><linktext>forwardHistory</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateTo"><apiName>navigateTo</apiName><shortdesc conref="mx.controls.FileSystemList#navigateTo()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>directory</apiItemName><apiType value="flash.filesystem:File"/><apiDesc>Ein Dateiobjekt, das eine Datei oder einen Ordner darstellt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#navigateTo()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateUp"><apiName>navigateUp</apiName><shortdesc>
      Ändert dieses Steuerelement, sodass es die Inhalte des nächsten Ordners eine Ebene höher in der Hierarchie anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ändert dieses Steuerelement, sodass es die Inhalte des nächsten Ordners eine Ebene höher in der Hierarchie anzeigt.
     
      <p>Wenn dieses Steuerelement derzeit einen Stammordner (wie z. B. C: oder D: in Microsoft Windows) anzeigt, bleibt diese Methode wirkungslos.</p>
     
      <p>Wenn diese Methode erfolgreich ausgeführt wird, enthält die <codeph>directory</codeph>-Eigenschaft die Dateiinstanz für den neuen Ordner. Die <codeph>dataProvider</codeph>-Eigenschaft ist temporär <codeph>null</codeph>, bis der neue Ordner aufgelistet wurde. Nach der Auflistung enthält die <codeph>dataProvider</codeph>-Eigenschaft eine ArrayCollection von File-Instanzen für die Inhalte des neuen Ordners.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem Button-Steuerelement zur Erstellung einer „Nach oben“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateUp"><linktext>canNavigateUp</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:refresh"><apiName>refresh</apiName><shortdesc conref="mx.controls.FileSystemList#refresh()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#refresh()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FileSystemDataGrid:COMPUTER"><apiName>COMPUTER</apiName><shortdesc conref="mx.controls.FileSystemList#COMPUTER">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#COMPUTER">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:creationDateColumn"><apiName>creationDateColumn</apiName><shortdesc>
      Die DataGridColumn-Spalte, welche die Created-Spalte darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      Die DataGridColumn-Spalte, welche die Created-Spalte darstellt. Das FileSystemDataGrid-Steuerelement erstellt diese Spalte automatisch.
     
      <p>Zur Anpassung dieser Spalte können Eigenschaften wie <codeph>creationDateColumn.width</codeph> festgelegt werden. Zum Entfernen dieser Spalte oder zum Verändern der Reihenfolge setzen Sie die <codeph>columns</codeph>-Eigenschaft auf ein Array wie z. B. <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:modificationDateColumn"><apiName>modificationDateColumn</apiName><shortdesc>
      Die DataGridColumn-Spalte, welche die Modified-Spalte darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      Die DataGridColumn-Spalte, welche die Modified-Spalte darstellt. Das FileSystemDataGrid-Steuerelement erstellt diese Spalte automatisch.
     
      <p>Zur Anpassung dieser Spalte können Eigenschaften wie <codeph>modificationDateColumn.width</codeph> festgelegt werden. Zum Entfernen dieser Spalte oder zum Verändern der Reihenfolge setzen Sie die <codeph>columns</codeph>-Eigenschaft auf ein Array wie z. B. <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:nameColumn"><apiName>nameColumn</apiName><shortdesc>
      Die DataGridColumn-Spalte, welche die Name-Spalte darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      Die DataGridColumn-Spalte, welche die Name-Spalte darstellt. Das FileSystemDataGrid-Steuerelement erstellt diese Spalte automatisch.
     
      <p>Zur Anpassung dieser Spalte können Eigenschaften wie <codeph>nameColumn.width</codeph> festgelegt werden. Zum Entfernen dieser Spalte oder zum Verändern der Reihenfolge setzen Sie die <codeph>columns</codeph>-Eigenschaft auf ein Array wie z. B. <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:sizeColumn"><apiName>sizeColumn</apiName><shortdesc>
      Die DataGridColumn-Spalte, welche die Size-Spalte darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      Die DataGridColumn-Spalte, welche die Size-Spalte darstellt. Das FileSystemDataGrid-Steuerelement erstellt diese Spalte automatisch.
     
      <p>Zur Anpassung dieser Spalte können Eigenschaften wie <codeph>sizeColumn.width</codeph> festgelegt werden. Zum Entfernen dieser Spalte oder zum Verändern der Reihenfolge setzen Sie die <codeph>columns</codeph>-Eigenschaft auf ein Array wie z. B. <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:typeColumn"><apiName>typeColumn</apiName><shortdesc>
      Die DataGridColumn-Spalte, welche die Type-Spalte darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      Die DataGridColumn-Spalte, welche die Type-Spalte darstellt. Das FileSystemDataGrid-Steuerelement erstellt diese Spalte automatisch.
     
      <p>Zur Anpassung dieser Spalte können Eigenschaften wie <codeph>typeColumn.width</codeph> festgeslegt werden. Zum Entfernen dieser Spalte oder zum Verändern der Reihenfolge setzen Sie die <codeph>columns</codeph>-Eigenschaft auf ein Array wie z. B. <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:backHistory:get"><apiName>backHistory</apiName><shortdesc>
      Ein Array von File-Objekten, welche die Ordner darstellen, zu denen der Benutzer zurücknavigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Array von File-Objekten, das die Ordner darstellt, zu denen der Benutzer zurücknavigieren kann.
     
      <p>Das erste Element in diesem Array ist der in der Verlaufsliste am nächsten zurückliegende Ordner. Das letzte Element ist der in der Verlaufsliste am weitesten zurückliegende Ordner.</p>
     
      <p>Dieses Array kann ein <codeph>null</codeph>-Element enthalten, das einen nicht vorhandenen Ordner darstellt, dessen Inhalte Stammordner wie z. B. C:\ oder D:\ auf Microsoft Windows sind.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Implementierung einer „Zurück“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
         enabled="{fileSystemViewer.canNavigateBack}"
         dataProvider="{fileSystemViewer.backHistory}"
         click="fileSystemViewer.navigateBack();"
         itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateBack"><linktext>canNavigateBack</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/navigateBack()"><linktext>navigateBack()</linktext></link><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateBack:get"><apiName>canNavigateBack</apiName><shortdesc>
      Ein Flag, welches „true“ ist, wenn mindestens ein Ordner in der Verlaufsliste vorhanden ist, zu dem der Benutzer zurücknavigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches <codeph>true</codeph> ist, wenn mindestens ein Ordner in der Verlaufsliste vorhanden ist, zu dem der Benutzer zurücknavigieren kann.
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Implementierung einer „Zurück“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/navigateBack()"><linktext>navigateBack()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateDown:get"><apiName>canNavigateDown</apiName><shortdesc>
      Ein Flag, welches „true“ ist, wenn der Benutzer nach unten in den ausgewählten Ordner navigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches <codeph>true</codeph> ist, wenn der Benutzer nach unten in einen ausgewählten Ordner navigieren kann. Ein Flag, welches <codeph>false</codeph> ist, wenn kein Element ausgewählt wurde oder das ausgewählte Element eine Datei und kein Ordner ist.
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem Button-Steuerelement eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/navigateDown()"><linktext>navigateDown()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateForward:get"><apiName>canNavigateForward</apiName><shortdesc>
      Ein Flag, welches „true“ ist, wenn mindestens ein Ordner in der Verlaufsliste vorhanden ist, zu dem der Benutzer weiternavigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches <codeph>true</codeph> ist, wenn mindestens ein Ordner in der Verlaufsliste vorhanden ist, zu dem der Benutzer weiternavigieren kann.
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Implementierung einer „Weiter“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/forwardHistory"><linktext>forwardHistory</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/navigateForward()"><linktext>navigateForward()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateUp:get"><apiName>canNavigateUp</apiName><shortdesc>
      Ein Flag, welches „true“ ist, wenn der Benutzer zu einem übergeordneten Ordner navigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches <codeph>true</codeph> ist, wenn der Benutzer zu einem übergeordneten Ordner navigieren kann. Ein Flag, welches nur dann <codeph>false</codeph> ist, wenn dieses Steuerelement Stammordner wie C:\ und D:\ in Microsoft Windows anzeigt. (Das ist der Fall, in dem die <codeph>directory</codeph>-Eigenschaft <codeph>COMPUTER</codeph> ist.)
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem Button-Steuerelement eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/navigateUp()"><linktext>navigateUp()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:dateFormatString:get"><apiName>dateFormatString</apiName><shortdesc>
      Ein String, welcher festlegt, wie Daten in den Created- und Modified-Spalten formatiert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Ein String, welcher festlegt, wie Daten in den Created- und Modified-Spalten formatiert werden. Das Einstellen dieser Eigenschaft legt den <codeph>formatString</codeph> eines internen DateFormatter fest, der durch dieses Steuerelement erstellt wird.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.formatters.xml#DateFormatter/formatString"><linktext>mx.formatters.DateFormatter.formatString</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:directory:get"><apiName>directory</apiName><shortdesc conref="mx.controls.FileSystemList#directory">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#directory">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:enumerationMode:get"><apiName>enumerationMode</apiName><shortdesc conref="mx.controls.FileSystemList#enumerationMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FileSystemEnumerationMode.DIRECTORIES_FIRST
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#enumerationMode">
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemEnumerationMode"><linktext>mx.controls.FileSystemEnumerationMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:extensions:get"><apiName>extensions</apiName><shortdesc conref="mx.controls.FileSystemList#extensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#extensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:filterFunction:get"><apiName>filterFunction</apiName><shortdesc conref="mx.controls.FileSystemList#filterFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#filterFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:forwardHistory:get"><apiName>forwardHistory</apiName><shortdesc>
      Ein Array von File-Objekten, welche die Ordner darstellen, zu denen der Benutzer weiternavigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
     </apiDefaultValue></apiValueDef><apiDesc>
      Ein Array von File-Objekten, welches die Ordner darstellt, zu denen der Benutzer weiternavigieren kann.
     
      <p>Das erste Element in diesem Array ist der in der Verlaufsliste als Nächstes folgende Ordner. Das letzte Element ist der in der Verlaufsliste am weitesten vorne liegende Ordner.</p>
     
      <p>Dieses Array kann ein <codeph>null</codeph>-Element enthalten, das einen nicht vorhandenen Ordner darstellt, dessen Inhalte Stammordner wie z. B. C:\ oder D:\ auf Windows sind.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Implementierung einer „Weiter“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:nameCompareFunction:get"><apiName>nameCompareFunction</apiName><shortdesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:selectedPath:get"><apiName>selectedPath</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPath">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPath">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:selectedPaths:get"><apiName>selectedPaths</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPaths">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPaths">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:showExtensions:get"><apiName>showExtensions</apiName><shortdesc conref="mx.controls.FileSystemList#showExtensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showExtensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:showHidden:get"><apiName>showHidden</apiName><shortdesc conref="mx.controls.FileSystemList#showHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:showIcons:get"><apiName>showIcons</apiName><shortdesc conref="mx.controls.FileSystemList#showIcons">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showIcons">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:sizeDisplayMode:get"><apiName>sizeDisplayMode</apiName><shortdesc>
      Ein String, welcher festlegt, ob die Size-Spalte die Dateigröße in Byte oder auf das nächste Kilobyte gerundet anzeigt, wobei ein Kilobyte 1024 Byte entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Ein String, welcher festlegt, ob die Size-Spalte die Dateigröße in Byte oder auf das nächste Kilobyte gerundet anzeigt, wobei ein Kilobyte 1024 Byte entspricht. Die möglichen Werte sind in der FileSystemSizeDisplayMode-Klasse definiert.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemSizeDisplayMode"><linktext>mx.controls.FileSystemSizeDisplayMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemTree"><apiName>FileSystemTree</apiName><shortdesc>
  Das FileSystemTree-Steuerelement zeigt die Inhalte eines Dateisystemordners als Baumstruktur an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemTree&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemTree
    <strong>Properties</strong>
    directory="<i>null</i>"
    enumerationMode="directoriesFirst"
    extensions="<i>null</i>"
    filterFunction="<i>null</i>"
    nameCompareFunction="<i>null</i>"
    openPaths="<i>null</i>"
    selectedPath="<i>null</i>"
    selectedPaths="<i>null</i>"
    showExtensions="true"
    showHidden="false"
    showIcons="true"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
    directoryClosing="<i>No default</i>"
    directoryOpening="<i>No default</i>"
    fileChoose="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Tree</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das FileSystemTree-Steuerelement zeigt die Inhalte eines Dateisystemordners als Baumstruktur an.
 
  <p>Der Ordner, dessen Inhalt angezeigt werden soll, wird festgelegt, indem die <codeph>directory</codeph>-Eigenschaft auf eine Instanz der flash.filesystem.File-Klasse gesetzt wird. (Dateiinstanzen können sowohl Ordner als auch Dateien repräsentieren.) Wenn sich diese Eigenschaft, aus welchen Gründen auch immer, ändert, versendet das Steuerelement ein <codeph>directoryChange</codeph>-Ereignis.</p>
 
  <p>Legen Sie die<codeph>enumerationMode</codeph>-Eigenschaft fest, um anzugeben, ob Dateien, Unterordner oder beide angezeigt werden sollen. Es gibt drei Möglichkeiten, um sowohl Dateien als auch Unterordner innerhalb von Baum-Knoten anzuzeigen: Ordner zuerst, Dateien zuerst oder gemischt.</p>
 
  <p>Sie können die <codeph>extensions</codeph>-Eigenschaft festlegen, um die Liste so zu filtern, dass nur Dateien mit den festgelegten Erweiterungen angezeigt werden. (Erweiterungen von Ordnern werden nicht berücksichtigt.) Durch Setzen der <codeph>filterFunction</codeph>-Eigenschaft können Sie auch eine eigene, zusätzliche Filterfunktion festlegen.</p>
 
  <p>Die <codeph>showExtensions</codeph>-Eigenschaft wird für das Ein- bzw. Ausblenden von Dateierweiterungen und die <codeph>showIcons</codeph>-Eigenschaft für das Ein- bzw. Ausblenden von Symbolen verwendet.</p>
 
  <p>Innerhalb jedes Baumknotens kann benutzerdefiniert sortiert werden, indem die <codeph>nameCompareFunction</codeph>-Eigenschaft auf eine Funktion gesetzt wird, welche zwei Datei- oder Ordnernamen vergleicht.</p>
 
  <p>Klickt der Benutzer auf einen geschlossenen Ordnerknoten oder auf das Anzeigesymbol, versendet das Steuerelement ein <codeph>directoryOpening</codeph>-Ereignis. Klickt der Benutzer auf einen geöffneten Ordnerknoten oder auf das Anzeigesymbol, versendet das Steuerelement ein <codeph>directoryClosing</codeph>-Ereignis. Eine Prozedur kann beide Ereignisse durch Aufrufen von <codeph>event.preventdefault()</codeph> abbrechen. Der Knoten wird dann nicht geöffnet.</p>
 
  <p>Doppelklickt ein Benutzer auf einen Dateiknoten, versendet das Steuerelement ein <codeph>select</codeph>-Ereignis.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.FILE_CHOOSE_fileChoose"><apiName>fileChoose</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer eine Datei entweder durch Doppelklicken oder durch Auswählen und Drücken der Eingabetaste wählt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.FILE_CHOOSE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer eine Datei entweder durch Doppelklicken oder durch Auswählen und Drücken der Eingabetaste wählt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.DIRECTORY_OPENING_directoryOpening"><apiName>directoryOpening</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer einen Ordnerknoten mithilfe der Maus oder der Tastatur öffnet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_OPENING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer einen Ordnerknoten mithilfe der Maus oder Tastatur öffnet.
 
  <p>Dieses Ereignis kann abgebrochen werden. Wird <codeph>event.preventDefault()</codeph> aufgerufen, zeigt das Steuerelement weiterhin den aktuellen Ordner an anstatt den Unterordner, der doppelgeklickt wurde.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.DIRECTORY_CLOSING_directoryClosing"><apiName>directoryClosing</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer einen geöffneten Ordner mithilfe der Maus oder Tastatur schließt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CLOSING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer einen geöffneten Ordner mithilfe der Maus oder Tastatur schließt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  Wird ausgelöst, wenn sich die directory-Eigenschaft aus irgendeinem Grund ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die <codeph>directory</codeph>-Eigenschaft aus irgendeinem Grund ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemTree:FileSystemTree"><apiName>FileSystemTree</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FileSystemTree:clear"><apiName>clear</apiName><shortdesc>
      Löscht die Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Löscht die Liste.
     
      <p>Diese Methode setzt den <codeph>dataProvider</codeph> auf <codeph>null</codeph>, ändert die <codeph>directory</codeph>-Eigenschaft jedoch nicht. Durch Aufrufen von <codeph>refresh</codeph> wird die Liste wieder gefüllt.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:closeSubdirectory"><apiName>closeSubdirectory</apiName><shortdesc>
      Schließt einen Unterordner, der durch einen nativen Dateisystempfad festgelegt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Ein String, der den <codeph>nativePath</codeph> eines Dateielements angibt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Schließt einen Unterordner, der durch einen nativen Dateisystempfad festgelegt ist.
     
      <p>Wird durch den <codeph>nativePath</codeph> kein Ordner angegeben, der innerhalb des Steuerelements angezeigt wird, bleibt diese Methode wirkungslos.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:findIndex"><apiName>findIndex</apiName><shortdesc conref="mx.controls.FileSystemList#findIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>Eine auf null basierende Indexposition oder <codeph>-1</codeph>, wenn keine Datei mit dem angegebenen Pfad gefunden wurde.
     
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Ein String, der den <codeph>nativePath</codeph> eines Dateielements angibt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:findItem"><apiName>findItem</apiName><shortdesc conref="mx.controls.FileSystemList#findItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.filesystem:File"/><apiDesc>Eine Dateiinstanz mit dem angegebenen <codeph>nativePath</codeph> oder <codeph>null</codeph>, wenn keine Dateiinstanz gefunden wurde.
      
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Ein String, der den <codeph>nativePath</codeph> eines Dateielements angibt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:openSubdirectory"><apiName>openSubdirectory</apiName><shortdesc>
      Öffnet einen Unterordner, der durch einen nativen Dateisystempfad festgelegt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Ein String, der den <codeph>nativePath</codeph> eines Dateielements angibt.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Öffnet einen Unterordner, der durch einen nativen Dateisystempfad festgelegt ist.
     
      <p>Diese Methode öffnet automatisch alle Ordner, die zum Erreichen des festgelegten Ordners geöffnet werden müssen.</p>
     
      <p>Wenn der <codeph>nativePath</codeph> keinen bestehenden Dateisystemordner festlegt oder der Ordner sich nicht innerhalb jenes Ordners befindet, der vom Steuerelement angezeigt wird, bleibt diese Methode wirkungslos.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:refresh"><apiName>refresh</apiName><shortdesc>
      Listet den von diesem Steuerelement angezeigten Ordner erneut auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Listet den von diesem Steuerelement angezeigten Ordner erneut auf.
     
      <p>Wenn diese Methode erfolgreich ausgeführt wird, enthält die <codeph>directory</codeph>-Eigenschaft die Dateiinstanz für denselben Ordner wie zuvor. Die <codeph>dataProvider</codeph>-Eigenschaft ist temporär <codeph>null</codeph>, bis der Ordner erneut aufgelistet wurde. Nach der Auflistung enthält die <codeph>dataProvider</codeph>-Eigenschaft eine ArrayCollection von Dateiinstanzen für die Inhalte des Ordners.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FileSystemTree:COMPUTER"><apiName>COMPUTER</apiName><shortdesc conref="mx.controls.FileSystemList#COMPUTER">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#COMPUTER">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:directory:get"><apiName>directory</apiName><shortdesc>
      Der Ordner, dessen Inhalte von diesem Steuerelement angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/><apiDefaultValue>COMPUTER
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Ordner, dessen Inhalte von diesem Steuerelement angezeigt werden.
     
      <p>Wenn Sie diese Eigenschaft auf ein File-Objekt setzen, welches einen bestehenden Ordner repräsentiert, wird der <codeph>dataProvider</codeph> sofort auf <codeph>null</codeph> gesetzt. Wenn dieses Steuerelement später vom LayoutManager erneut geprüft wird, zählt es die Ordnerinhalte gleichzeitig auf und befüllt die <codeph>dataProvider</codeph>-Eigenschaft mit einer ArrayCollection der entsprechenden File-Objekte der Dateien und Unterordner des Ordners.</p>
     
      <p>Wird diese Eigenschaft auf eine Datei gesetzt, die keinen vorhandenen Ordner darstellt, ist das ein Fehler. Wird diese Eigenschaft auf <codeph>COMPUTER</codeph> gesetzt, werden die Stammordner wie C: und D: gleichzeitig angezeigt.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:enumerationMode:get"><apiName>enumerationMode</apiName><shortdesc conref="mx.controls.FileSystemList#enumerationMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FileSystemEnumerationMode.DIRECTORIES_FIRST
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#enumerationMode">
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemEnumerationMode"><linktext>mx.controls.FileSystemEnumerationMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemTree:extensions:get"><apiName>extensions</apiName><shortdesc conref="mx.controls.FileSystemList#extensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#extensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:filterFunction:get"><apiName>filterFunction</apiName><shortdesc conref="mx.controls.FileSystemList#filterFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#filterFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:nameCompareFunction:get"><apiName>nameCompareFunction</apiName><shortdesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:openPaths:get"><apiName>openPaths</apiName><shortdesc>
      Ein Array von nativePath-Strings für die Dateielemente, die geöffnete Unterordner darstellen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Array von <codeph>nativePath</codeph>-Strings für die Dateielemente, die geöffnete Unterordner darstellen. Dieses Array ist leer, wenn keine Unterordner geöffnet sind.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:selectedPath:get"><apiName>selectedPath</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPath">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPath">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemTree:selectedPaths:get"><apiName>selectedPaths</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPaths">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPaths">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemTree:showExtensions:get"><apiName>showExtensions</apiName><shortdesc conref="mx.controls.FileSystemList#showExtensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showExtensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:showHidden:get"><apiName>showHidden</apiName><shortdesc conref="mx.controls.FileSystemList#showHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:showIcons:get"><apiName>showIcons</apiName><shortdesc conref="mx.controls.FileSystemList#showIcons">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showIcons">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemList"><apiName>FileSystemList</apiName><shortdesc>
  Mithilfe des FileSystemList-Steuerelements können Sie die Inhalte eines einzelnen Dateisystemordners im Listenformat anzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="EmbeddedFile" inherit="no" name="fileIcon" owner="mx.controls:FileSystemList" playerVersion="AIR1.1" type="Class">
<description>
  Legt das Symbol fest, durch das eine Datei angezeigt wird. Das Standardsymbol liegt in der Datei „Assets.swf“ In MXML können Sie die folgende Syntax verwenden, um diese Eigenschaft festzulegen: <codeph>fileIcon="@Embed(source='fileIcon.jpg');"</codeph>
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="directoryIcon" owner="mx.controls:FileSystemList" playerVersion="AIR1.1" type="Class">
<description>
  Legt das Symbol fest, das den Ordner anzeigt. Das Standardsymbol liegt in der Datei „Assets.swf“ In MXML können Sie die folgende Syntax verwenden, um diese Eigenschaft festzulegen: <codeph>directoryIcon="@Embed(source='directoryIcon.jpg');"</codeph>
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemList&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemList
    <strong>Properties</strong>
    directory="<i>null</i>"
    enumerationMode="directoriesFirst"
    extensions="<i>null</i>"
    filterFunction="<i>null</i>"
    nameCompareFunction="<i>null</i>"
    selectedPath="<i>null</i>"
    selectedPaths="<i>null</i>"
    showExtensions="true"
    showHidden="false"
    showIcons="true"
 
    <strong>Styles</strong>
    directoryIcon="<i>TreeNodeIcon</i>"
    fileIcon="<i>TreeNodeIcon</i>"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
    directoryChanging="<i>No default</i>"
    fileChoose="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mithilfe des FileSystemList-Steuerelements können Sie die Inhalte eines einzelnen Dateisystemordners im Listenformat anzeigen.
 
  <p>Um die angezeigten Daten zu ändern, anstatt die <codeph>dataProvider</codeph>-Eigenschaft zu verwenden, legen Sie die <codeph>directory</codeph>-Eigenschaft fest. Das Steuerelement füllt dann die <codeph>dataProvider</codeph>-Eigenschaft automatisch durch das Aufzählen der Ordnerinhalte. Sie sollten die <codeph>dataProvider</codeph>-Eigenschaft nicht selbst festlegen.</p>
 
  <p>Legen Sie die<codeph>directory</codeph>-Eigenschaft wie im folgenden Beispiel beschrieben auf eine Dateiinstanz fest: </p>
  <pre>
    &lt;mx:FileSystemList directory="{File.desktopDirectory}"/></pre>
 
  <p>Legen Sie die<codeph>enumerationMode</codeph>-Eigenschaft fest, um anzugeben, ob Dateien, Unterordner oder beide angezeigt werden sollen. Es gibt drei Arten, um beide anzuzeigen: Ordner zuerst, Dateien zuerst oder gemischt.</p>
 
  <p>Sie können die <codeph>extensions</codeph>-Eigenschaft festlegen, damit nur Dateien mit den festgelegten Erweiterungen angezeigt werden. <codeph>showHidden</codeph> bestimmt, ob das Steuerelement Dateien und Unterordner anzeigt, die vom Betriebssystem normalerweise ausgeblendet werden. Sie können eine zusätzliche<codeph>filterFunction</codeph>-Funktion für die Ausführung benutzerdefinierter Filter und eine <codeph>nameCompareFunction</codeph>-Funktion für benutzerdefinierte Sortierung festlegen.</p>
 
  <p>Da AIR Dateisystemmeldungen nicht unterstützt, wird dieses Steuerelement nicht automatisch aktualisiert, wenn Dateien oder Unterordner erstellt, gelöscht, verschoben oder umbenannt werden; anders ausgedrückt kann es eine veraltete Ansicht des Dateisystems anzeigen. Sie können jedoch<codeph>refresh()</codeph> aufrufen, um die Inhalte des aktuellen <codeph>directory</codeph> erneut aufzulisten. Das können Sie beispielsweise dann tun, wenn Sie einen Dateivorgang ausgeführt haben, der zu einer veralteten Anzeige des Steuerelements führt oder wenn ein Benutzer die Anwendung deaktiviert und erneut aktiviert hat.</p>
 
  <p>Die <codeph>showIcons</codeph>-Eigenschaft wird für das Ein- bzw. Ausblenden von Symbolen und die <codeph>showExtensions</codeph>-Eigenschaft für das Ein- bzw. Ausblenden von Erweiterungen verwendet.</p>
 
  <p>Das Steuerelement stellt zwei Methoden bereit, <codeph>findItem()</codeph> und <codeph>findIndex()</codeph>, die Sie zum Durchsuchen der angezeigten Dateien und Unterordner verwenden können, um die/den durch einen <codeph>nativePath</codeph> bezeichnete/n Datei/Unterordner zu finden.</p>
 
  <p>Zwei Eigenschaften, <codeph>selectedPath</codeph> und <codeph>selectedPaths</codeph>, funktionieren ähnlich wie <codeph>selectedItem</codeph> und <codeph>selectedItems</codeph> oder <codeph>selectedIndex</codeph> und <codeph>selectedIndices</codeph>, erlauben Ihnen aber, die Auswahl über <codeph>nativePath</codeph>-Zeichenfolgen festzulegen. Sie sind hilfreich, wenn Sie einen Ordner mit bestimmten vorausgewählten Elementen anzeigen möchten, weil Sie in diesem Fall noch nicht über die Dateielemente verfügen, die das Steuerelement beim Auflisten des Ordners erstellt, und noch nicht wissen, wie deren Indizes lauten werden.</p>
 
  <p>Das Steuerelement erlaubt es dem Benutzer, mithilfe der Maus oder Tastatur zu anderen Ordnern zu navigieren. Der Benutzer kann versuchen, den Ordner zu ändern, indem er auf einen Unterordner doppelklickt, die Eingabetaste oder die Tastenkombination „Strg+Nach unten“ drückt, wenn ein Unterordner ausgewählt ist, die Tastenkombination „Strg+Nach oben“ drückt, wenn das Steuerelement den Ordner „COMPUTER“ nicht anzeigt, die Tastenkombination „Strg+Nach links“ drückt, wenn es einen „vorherigen“ Ordner gibt, zu dem man zurücknavigieren kann, oder die Tastenkombination „Strg+Nach rechts“ drückt, wenn es einen „nächsten“ Ordner gibt, zu dem man navigieren kann. Wenn der Benutzer versucht, den angezeigten Ordner zu ändern, löst das Steuerelement ein <codeph>directoryChanging</codeph>-Ereignis aus, das abgebrochen werden kann. Wenn dieses Ereignis nicht durch Aufrufen von <codeph>event.preventDefault()</codeph> abgebrochen wird, zeigt das Steuerelement die Inhalte des neuen Ordners und die Änderungen der <codeph>directory</codeph>-Eigenschaften an. Immer, wenn die <codeph>directory</codeph>-Eigenschaften, aus welchen Gründen auch immer, geändert werden, löst das Steuerelement ein <codeph>directoryChange</codeph>-Ereignis aus, das Sie davon informiert.</p>
 
  <p>Zur Unterstützung der Steuerelemente „Nach oben“ und „Nach unten“ verfügt die FileSystemList-Liste über die <codeph>canNavigateUp</codeph>- und <codeph>canNavigateDown</codeph>-Eigenschaften und die <codeph>navigateUp()</codeph>- und <codeph>navigateDown()</codeph>-Methoden. Für das Navigieren zu einem beliebigen Ordner steht <codeph>navigateTo()</codeph> zur Verfügung.</p>
 
  <p>Das Steuerelement merkt sich, zu welchen Ordnern navigiert wurde, damit Sie die Steuerelemente „Zurück“ und „Weiter“ einfach unterstützen können. Weitere Informationen finden Sie unter den Eigenschaften <codeph>backHistory</codeph>, <codeph>forwardHistory</codeph>, <codeph>canNavigateBack</codeph> und <codeph>canNavigateForward</codeph> und den Methoden <codeph>navigateBack()</codeph> und <codeph>navigateForward()</codeph>.</p>
 
  <p>Hinweis: Die für jedes Element angezeigten Symbole sind generische Datei- und Ordnersymbole, die mithilfe der Stile <codeph>fileIcon</codeph> und <codeph>directoryIcon</codeph> festgelegt werden. Die listenbasierten Steuerelemente von Flex unterstützen derzeit nur die Anzeige eingebetteter Symbole, keine zur Laufzeit gelesenen Symbole. Deshalb werden die eigentlichen im Betriebssystem angezeigten Dateisystemsymbole nicht in einer FileSystemList angezeigt, auch wenn sie in AIR über die <codeph>icon</codeph>-Eigenschaft einer Datei zugänglich sind.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemList_mx.events.FileEvent.FILE_CHOOSE_fileChoose"><apiName>fileChoose</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer eine Datei entweder durch Doppelklicken oder durch Auswählen und Drücken der Eingabetaste wählt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.FILE_CHOOSE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer eine Datei entweder durch Doppelklicken oder durch Auswählen und Drücken der Eingabetaste wählt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemList_mx.events.FileEvent.DIRECTORY_OPENING_directoryChanging"><apiName>directoryChanging</apiName><shortdesc>
  Wird ausgelöst, wenn der Benutzer versucht, den von diesem Steuerelement angezeigten Ordner zu ändern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_OPENING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der Benutzer versucht, den von diesem Steuerelement angezeigten Ordner zu ändern.
 
  <p>Der Benutzer kann versuchen, den Ordner zu ändern, indem er auf einen Unterordner doppelklickt, die Eingabetaste oder die Tastenkombination „Strg+Nach unten“ drückt, wenn ein Unterordner ausgewählt ist, die Tastenkombination „Strg+Nach oben“ drückt, wenn das Steuerelement den Ordner „COMPUTER“ nicht anzeigt, die Tastenkombination „Strg+Nach links“ drückt, wenn es in der Verlaufsliste einen „vorherigen“ Ordner gibt, zu dem man zurücknavigieren kann, oder die Tastenkombination „Strg+Nach rechts“ drückt, wenn es in der Verlaufsliste einen „nächsten“ Ordner gibt, zu dem man navigieren kann.</p>
 
  <p>Dieses Ereignis kann abgebrochen werden. Beim Aufrufen von <codeph>event.preventDefault()</codeph> wird der Ordner nicht geändert.</p>
 
  <p>Nachdem die <codeph>directory</codeph>-Eigenschaft geändert wurde und <codeph>dataProvider</codeph> Dateiinstanzen für die Elemente im neuen Ordner enthält, wird das <codeph>directoryChange</codeph>-Ereignis ausgelöst.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemList_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  Wird ausgelöst, wenn der von diesem Steuerelement angezeigte Ordner sich aus irgendeinem Grund ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der von diesem Steuerelement angezeigte Ordner sich aus irgendeinem Grund ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemList:FileSystemList"><apiName>FileSystemList</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FileSystemList:clear"><apiName>clear</apiName><shortdesc>
      Setzt dieses Steuerelement zurück, sodass es keine Elemente anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Setzt dieses Steuerelement zurück, sodass es keine Elemente anzeigt.
     
      <p>Diese Methode setzt den <codeph>dataProvider</codeph> auf <codeph>null</codeph>, ändert die <codeph>directory</codeph>-Eigenschaft jedoch nicht. Durch Aufrufen von <codeph>refresh</codeph> wird die Liste wieder gefüllt.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemList:findIndex"><apiName>findIndex</apiName><shortdesc>
      Gibt die Indexposition des File-Elements mit dem angegebenen nativen Dateisystempfad zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine auf null basierende Indexposition oder <codeph>-1</codeph>, wenn keine Datei mit dem angegebenen Pfad gefunden wurde.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Ein String, der den <codeph>nativePath</codeph> eines Dateielements angibt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Indexposition des File-Elements mit dem angegebenen nativen Dateisystempfad zurück.
     
      <p>Elemente, die in der Sammlung des Steuerelements vorhanden sind aber nicht angezeigt werden, weil sie beim Filtern nicht gesucht werden.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.filesystem.xml#File/nativePath"><linktext>flash.filesystem.File.nativePath</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:findItem"><apiName>findItem</apiName><shortdesc>
      Durchsucht die in diesem Steuerelement derzeit angezeigten Dateiinstanzen und gibt jene mit der angegebenen nativePathproperty zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Dateiinstanz mit dem angegebenen <codeph>nativePath</codeph> oder <codeph>null</codeph>, wenn keine Dateiinstanz gefunden wurde.
      
      </apiDesc><apiType value="flash.filesystem:File"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Ein String, der den <codeph>nativePath</codeph> eines Dateielements angibt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Durchsucht die in diesem Steuerelement derzeit angezeigten Dateiinstanzen und gibt jene mit der angegebenen <codeph>nativePathproperty</codeph> zurück.
     
      <p>Elemente, die in der Sammlung des Steuerelements vorhanden sind aber nicht angezeigt werden, weil sie beim Filtern nicht gesucht werden.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateBack"><apiName>navigateBack</apiName><shortdesc>
      Ändert dieses Steuerelement, sodass es die Inhalte eines früher besuchten Ordners aus dem backHistory-Array anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Die Indexposition im <codeph>backHistory</codeph>-Array, zu der navigiert werden soll. Der Standardwert ist 0; er gibt den Ordner an, der am wenigsten weit zurückliegt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ändert dieses Steuerelement, sodass es die Inhalte eines früher besuchten Ordners aus dem <codeph>backHistory</codeph>-Array anzeigt.
     
      <p>Wenn das <codeph>backHistory</codeph>-Array leer ist oder eine Indexposition angegeben wurde, die nicht im Array ist, bleibt diese Methode ergebnislos.</p>
     
      <p>Wenn diese Methode erfolgreich ausgeführt wird, enthält die <codeph>directory</codeph>-Eigenschaft die Dateiinstanz für den neuen Ordner. Die <codeph>dataProvider</codeph>-Eigenschaft ist temporär <codeph>null</codeph>, bis der neue Ordner aufgelistet wurde. Nach der Auflistung enthält die <codeph>dataProvider</codeph>-Eigenschaft eine ArrayCollection von Dateiinstanzen für die Inhalte des neuen Ordners.</p>
     
      <p>Die Verlaufsliste bleibt unverändert. Die aktuelle Indexposition verändert sich jedoch, was Auswirkungen auf die <codeph>backHistory</codeph>- sowie die <codeph>forwardHistory</codeph>-Eigenschaften hat. Diese verfügen über neue Werte, sobald die Methode erfolgreich ausgeführt wurde.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Methode gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Erstellung einer „Zurück“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemList/canNavigateBack"><linktext>canNavigateBack</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateDown"><apiName>navigateDown</apiName><shortdesc>
      Ändert dieses Steuerelement, sodass es die Inhalte des ausgewählten Unterordners anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ändert dieses Steuerelement, sodass es die Inhalte des ausgewählten Unterordners anzeigt.
     
      <p>Wenn kein Unterordner ausgewählt ist, bleibt diese Methode ergebnislos.</p>
     
      <p>Wenn diese Methode erfolgreich ausgeführt wird, enthält die <codeph>directory</codeph>-Eigenschaft die Dateiinstanz für den neuen Ordner. Die <codeph>dataProvider</codeph>-Eigenschaft ist temporär <codeph>null</codeph>, bis der neue Ordner aufgelistet wurde. Nach der Auflistung enthält die <codeph>dataProvider</codeph>-Eigenschaft eine ArrayCollection von Dateiinstanzen für die Inhalte des neuen Ordners.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Methode gemeinsam mit dem Button-Steuerelement zur Erstellung einer „Öffnen“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateDown"><linktext>canNavigateDown</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateForward"><apiName>navigateForward</apiName><shortdesc>
      Ändert dieses Steuerelement, sodass es die Inhalte eines früher besuchten Ordners aus dem forwardHistory-Array anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Die Indexposition im <codeph>forwardHistory</codeph>-Array, zu der navigiert werden soll. Der Standardwert ist 0; er gibt den Ordner an, der als Nächstes folgt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ändert dieses Steuerelement, sodass es die Inhalte eines früher besuchten Ordners aus dem <codeph>forwardHistroy</codeph>-Array anzeigt.
     
      <p>Wenn das <codeph>forwardHistory</codeph>-Array leer ist oder eine Indexposition angegeben wurde, die nicht im Array ist, bleibt diese Methode ergebnislos.</p>
     
      <p>Wenn diese Methode erfolgreich ausgeführt wird, enthält die <codeph>directory</codeph>-Eigenschaft die Dateiinstanz für den neuen Ordner. Die <codeph>dataProvider</codeph>-Eigenschaft ist temporär <codeph>null</codeph>, bis der neue Ordner aufgelistet wurde. Nach der Auflistung enthält die <codeph>dataProvider</codeph>-Eigenschaft eine ArrayCollection von Dateiinstanzen für die Inhalte des neuen Ordners.</p>
     
      <p>Die Verlaufsliste bleibt unverändert. Die aktuelle Indexposition verändert sich jedoch, was Auswirkungen auf die <codeph>backHistory</codeph>- sowie die <codeph>forwardHistory</codeph>-Eigenschaften hat. Diese verfügen über neue Werte, sobald die Methode erfolgreich ausgeführt wurde.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Methode gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Erstellung einer „Weiter“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateForward"><linktext>canNavigateForward</linktext></link><link href="mx.controls.xml#FileSystemList/forwardHistory"><linktext>forwardHistory</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateTo"><apiName>navigateTo</apiName><shortdesc>
      Ändert dieses Steuerelement, sodass es die Inhalte des angegebenen Ordners anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>directory</apiItemName><apiType value="flash.filesystem:File"/><apiDesc>Ein Dateiobjekt, das eine Datei oder einen Ordner repräsentiert.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ändert dieses Steuerelement, sodass es die Inhalte des angegebenen Ordners anzeigt.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateUp"><apiName>navigateUp</apiName><shortdesc>
      Ändert dieses Steuerelement, sodass es die Inhalte des nächsten Ordners eine Ebene höher in der Hierarchie anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ändert dieses Steuerelement, sodass es die Inhalte des nächsten Ordners eine Ebene höher in der Hierarchie anzeigt.
     
      <p>Wenn dieses Steuerelement derzeit einen Stammordner (wie z. B. C: oder D: in Microsoft Windows) anzeigt, bleibt diese Methode wirkungslos.</p>
     
      <p>Wenn diese Methode erfolgreich ausgeführt wird, enthält die <codeph>directory</codeph>-Eigenschaft die Dateiinstanz für den neuen Ordner. Die <codeph>dataProvider</codeph>-Eigenschaft ist temporär <codeph>null</codeph>, bis der neue Ordner aufgelistet wurde. Nach der Auflistung enthält die <codeph>dataProvider</codeph>-Eigenschaft eine ArrayCollection von Dateiinstanzen für die Inhalte des neuen Ordners.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Methode gemeinsam mit dem Button-Steuerelement zur Erstellung einer „Nach oben“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateUp"><linktext>canNavigateUp</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:refresh"><apiName>refresh</apiName><shortdesc>
      Listet den von diesem Steuerelement angezeigten Ordner erneut auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Listet den von diesem Steuerelement angezeigten Ordner erneut auf.
     
      <p>Da AIR Dateisystemmeldungen nicht unterstützt, wird dieses Steuerelement nicht automatisch aktualisiert, wenn Dateien oder Unterordner erstellt, gelöscht, verschoben oder umbenannt werden; anders ausgedrückt kann es eine veraltete Ansicht des Dateisystems anzeigen. Sie können jedoch<codeph>refresh()</codeph> aufrufen, um die Inhalte des aktuellen <codeph>directory</codeph> erneut aufzulisten, sodass es aktuell ist. Das können Sie beispielsweise dann tun, wenn Sie einen Dateivorgang ausgeführt haben, der zu einer veralteten Anzeige des Steuerelements führt oder wenn ein Benutzer die Anwendung deaktiviert und erneut aktiviert hat.</p>
     
      <p>Diese Methode bewahrt markierte Elemente (sofern sie noch vorhanden sind) sowie die Bildlaufposition (sofern das erste sichtbare Element noch vorhanden ist).</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FileSystemList:COMPUTER"><apiName>COMPUTER</apiName><shortdesc>
      Eine Konstante, die als Wert für die Ordner-Eigenschaft verwendet werden kann, die einen Pseudo-Top-Level-Ordner namens „Computer“ repräsentiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc>
      Eine Konstante, die als Wert für die <codeph>directory</codeph>-Eigenschaft verwendet werden kann, die einen Pseudo-Top-Level-Ordner namens „Computer“ repräsentiert. Dieser Pseudoordner enthält die Stammordner (beispielsweise C:\ und D:\ auf Windows oder / auf Macintosh).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:backHistory:get"><apiName>backHistory</apiName><shortdesc>
      Ein Array von File-Objekten, das die Ordner darstellt, zu denen der Benutzer zurücknavigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Array von File-Objekten, das die Ordner darstellt, zu denen der Benutzer zurücknavigieren kann.
     
      <p>Das erste Element in diesem Array ist der in der Verlaufsliste am nächsten zurückliegende Ordner. Das letzte Element ist der in der Verlaufsliste am weitesten zurückliegende Ordner.</p>
     
      <p>Dieses Array kann ein <codeph>null</codeph>-Element enthalten, das einen nicht vorhandenen Ordner darstellt, dessen Inhalte Stammordner wie z. B. C:\ oder D:\ auf Microsoft Windows sind.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Implementierung einer „Zurück“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateBack"><linktext>canNavigateBack</linktext></link><link href="mx.controls.xml#FileSystemList/navigateBack()"><linktext>navigateBack()</linktext></link><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateBack:get"><apiName>canNavigateBack</apiName><shortdesc>
      Ein Flag, welches „true“ ist, wenn mindestens ein Ordner in der Verlaufsliste vorhanden ist, zu dem der Benutzer zurücknavigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches <codeph>true</codeph> ist, wenn mindestens ein Ordner in der Verlaufsliste vorhanden ist, zu dem der Benutzer zurücknavigieren kann.
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Implementierung einer „Zurück“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemList/navigateBack()"><linktext>navigateBack()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateDown:get"><apiName>canNavigateDown</apiName><shortdesc>
      Ein Flag, welches „true“ ist, wenn der Benutzer nach unten in den ausgewählten Ordner navigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches <codeph>true</codeph> ist, wenn der Benutzer nach unten in einen ausgewählten Ordner navigieren kann. Ein Flag, welches <codeph>false</codeph> ist, wenn kein Element ausgewählt wurde oder das ausgewählte Element eine Datei und kein Ordner ist.
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem Button-Steuerelement eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/navigateDown()"><linktext>navigateDown()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateForward:get"><apiName>canNavigateForward</apiName><shortdesc>
      Ein Flag, welches „true“ ist, wenn mindestens ein Ordner in der Verlaufsliste vorhanden ist, zu dem der Benutzer weiternavigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches <codeph>true</codeph> ist, wenn mindestens ein Ordner in der Verlaufsliste vorhanden ist, zu dem der Benutzer weiternavigieren kann.
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Implementierung einer „Weiter“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/forwardHistory"><linktext>forwardHistory</linktext></link><link href="mx.controls.xml#FileSystemList/navigateForward()"><linktext>navigateForward()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateUp:get"><apiName>canNavigateUp</apiName><shortdesc>
      Ein Flag, welches „true“ ist, wenn der Benutzer zu einem übergeordneten Ordner navigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches <codeph>true</codeph> ist, wenn der Benutzer zu einem übergeordneten Ordner navigieren kann. Ein Flag, welches nur dann <codeph>false</codeph> ist, wenn dieses Steuerelement Stammordner wie C:\ und D:\ in Microsoft Windows anzeigt. (Das ist der Fall, in dem die <codeph>directory</codeph>-Eigenschaft <codeph>COMPUTER</codeph> ist.)
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem Button-Steuerelement eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/navigateUp()"><linktext>navigateUp()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:directory:get"><apiName>directory</apiName><shortdesc>
      Der Ordner, dessen Inhalte von diesem Steuerelement angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/><apiDefaultValue>COMPUTER
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Ordner, dessen Inhalte von diesem Steuerelement angezeigt werden.
     
      <p>Wenn Sie diese Eigenschaft auf ein File-Objekt setzen, welches einen bestehenden Ordner repräsentiert, wird der <codeph>dataProvider</codeph> sofort auf <codeph>null</codeph> gesetzt. Wenn dieses Steuerelement später vom LayoutManager erneut geprüft wird, zählt es die Ordnerinhalte gleichzeitig auf und befüllt die <codeph>dataProvider</codeph>-Eigenschaft mit einer ArrayCollection der entsprechenden File-Objekte der Dateien und Unterordner des Ordners.</p>
     
      <p>Wird diese Eigenschaft auf eine Datei gesetzt, die keinen vorhandenen Ordner darstellt, ist das ein Fehler. Wird diese Eigenschaft auf <codeph>COMPUTER</codeph> gesetzt, werden die Stammordner wie C: und D: gleichzeitig angezeigt.</p>
     
      <p>Durch das Setzen dieser Eigenschaft werden früher ausgewählte Elemente deaktiviert und das Steuerelement setzt seine Bildlaufposition auf die obere linke Ecke zurück.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:enumerationMode:get"><apiName>enumerationMode</apiName><shortdesc>
      Ein String, der festlegt, ob das Steuerelement nur Dateien, nur Unterordner oder beides anzeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FileSystemEnumerationMode.DIRECTORIES_FIRST
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein String, der festlegt, ob das Steuerelement nur Dateien, nur Unterordner oder beides anzeigt. Sollten beide angezeigt werden, so legt es auch fest, ob die Unterordner vor, nach oder gemischt mit den Dateien angezeigt werden. Die möglichen Werte sind in der FileSystemEnumerationMode-Klasse definiert.
     
      <p>Diese Eigenschaft hat Auswirkungen darauf, welche Unterordner und Dateien im Steuerelement angezeigt werden und in welcher Reihenfolge sie erscheinen. Sie hat jedoch keine Auswirkungen darauf, welche Dateiinstanzen in der <codeph>dataProvider</codeph>-Eigenschaft vorhanden sind; sie ändert lediglich das Verhalten der Filterfunktion, die auf den <codeph>dataProvider</codeph> angewendet wird. Durch das Setzen der Eigenschaft wird das aktuelle <codeph>directory</codeph> nicht neu aufgelistet.</p>
     
      <p>Durch das Setzen dieser Eigenschaft werden ausgewählte Elemente deaktiviert und das Steuerelement setzt seine Bildlaufposition auf die obere linke Ecke zurück.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemEnumerationMode"><linktext>mx.controls.FileSystemEnumerationMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:extensions:get"><apiName>extensions</apiName><shortdesc>
      Ein Array von Erweiterungen, welches festlegt, welche Dateien von diesem Steuerelement angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Array von Erweiterungen, welches festlegt, welche Dateien von diesem Steuerelement angezeigt werden. Wenn diese Eigenschaft gesetzt ist, beispielsweise auf <codeph>[ ".htm", ".html" ]</codeph>, werden nur Dateien mit diesen Erweiterungen angezeigt.
     
      <p>Bei Erweiterungen ist die Groß- und Kleinschreibung zu beachten, der vorangestellte Punkt ist optional. Beispiel: Wird <codeph>".HTML"</codeph> festgelegt, entspricht dies <codeph>"html"</codeph>.</p>
     
      <p>Ordner werden nicht auf Erweiterungen gefiltert, selbst, wenn ihre Namen Punkte enthalten.</p>
     
      <p>Die <codeph>enumerationMode</codeph>- und <codeph>filterFunction</codeph>-Eigenschaften bestimmen ebenfalls, welche Dateien im Steuerelement angezeigt werden. Beispiel: Wenn diese Eigenschaft <codeph>[ ".htm", ".html" ]</codeph> ist, wird eine HTML-Datei nicht angezeigt, wenn die <codeph>enumerationMode</codeph>-Eigenschaft <codeph>FileSystemEnumerationMode.DIRECTORIES_ONLY</codeph> ist oder die <codeph>filterFunction</codeph> den Wert <codeph>false</codeph> für die Datei zurückgibt.</p>
     
      <p>Wenn diese Eigenschaft <codeph>null</codeph> ist, wird nicht nach Erweiterungen gefiltert und alle Dateien werden angezeigt. Wenn diese Eigenschaft ein leeres Array ist, werden alle Erweiterungen herausgefiltert und Dateien mit Erweiterungen werden nicht angezeigt.</p>
     
      <p>Diese Eigenschaft hat Auswirkungen darauf, welche Dateien im Steuerelement angezeigt werden. Sie hat jedoch keine Auswirkungen darauf, welche Dateiinstanzen in der <codeph>dataProvider</codeph>-Eigenschaft vorhanden sind; sie ändert lediglich das Verhalten der Filterfunktion, die auf den <codeph>dataProvider</codeph> angewendet wird. Durch das Setzen der Eigenschaft wird das aktuelle <codeph>directory</codeph> nicht neu aufgelistet.</p>
     
      <p>Durch das Setzen dieser Eigenschaft werden ausgewählte Elemente deaktiviert und das Steuerelement setzt seine Bildlaufposition auf die obere linke Ecke zurück.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      Eine Rückruffunktion, die für weiteres Filtern verwendet werden kann, um festzustellen, welche Unterordner angezeigt und ausgeblendet sind, nachdem die enumerationMode- und Extensions-Eigenschaften angewendet wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Rückruffunktion, die für weiteres Filtern verwendet werden kann, um festzustellen, welche Unterordner angezeigt und ausgeblendet sind, nachdem die <codeph>enumerationMode</codeph>- und <codeph>extensions</codeph>-Eigenschaften angewendet wurden.
     
      <p>Diese Funktion muss über die folgende Signatur verfügen:</p>
     
      <pre>function myFilterFunction(file:File):Boolean</pre>
     
      Diese Funktion sollte <codeph>true</codeph> zurückgeben, um die/den festgelegte/n Datei oder Unterordner anzuzeigen und <codeph>false</codeph>, um sie auszublenden.
     
      <p>Um sicher zu sein, dass alle aufgelisteten Dateien und Unterordner an diese Funktion übergeben werden, darf die <codeph>enumerationMode</codeph>-Eigenschaft nicht <codeph>FileSystemEnumerationMode.FILES_ONLY</codeph> oder <codeph>FileSystemEnumerationMode.DIRECTORIES_ONLY</codeph> sein, und die <codeph>extensions</codeph>-Eigenschaft muss <codeph>null</codeph> sein. Andernfalls wird durch diese beiden Eigenschaften gefiltert, bevor diese Filterfunktion aufgerufen wird.</p>
     
      <p>Diese Eigenschaft hat Auswirkungen darauf, welche Unterordner und Dateien im Steuerelement angezeigt werden. Sie hat jedoch keine Auswirkungen darauf, welche Dateiinstanzen in der <codeph>dataProvider</codeph>-Eigenschaft vorhanden sind; sie ändert lediglich das Verhalten der Filterfunktion, die auf den <codeph>dataProvider</codeph> angewendet wird. Durch das Setzen der Eigenschaft wird das aktuelle <codeph>directory</codeph> nicht neu aufgelistet.</p>
     
      <p>Durch das Setzen dieser Eigenschaft werden ausgewählte Elemente deaktiviert und das Steuerelement setzt seine Bildlaufposition auf die obere linke Ecke zurück.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:forwardHistory:get"><apiName>forwardHistory</apiName><shortdesc>
      Ein Array von File-Objekten, welches die Ordner darstellt, zu denen der Benutzer weiternavigieren kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Array von File-Objekten, welches die Ordner darstellt, zu denen der Benutzer weiternavigieren kann.
     
      <p>Das erste Element in diesem Array ist der in der Verlaufsliste als Nächstes folgende Ordner. Das letzte Element ist der in der Verlaufsliste am weitesten vorne liegende Ordner.</p>
     
      <p>Dieses Array kann ein besonderes <codeph>COMPUTER</codeph>-File-Objekt enthalten, das einen nicht vorhandenen Ordner darstellt, dessen Inhalte Stammordner wie z. B. C:\ oder D:\ auf Windows sind.</p>
     
      <p>Das nachstehende Beispiel zeigt, wie diese Eigenschaft gemeinsam mit dem FileSystemHistoryButton-Steuerelement zur Implementierung einer „Weiter“-Schaltfläche eingesetzt wird:</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateForward"><linktext>canNavigateForward</linktext></link><link href="mx.controls.xml#FileSystemList/navigateForward()"><linktext>navigateForward()</linktext></link><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:nameCompareFunction:get"><apiName>nameCompareFunction</apiName><shortdesc>
      Eine Rückruffunktion, mit der Sie den Vergleich der Datei- und Unterordnernamen für die Erstellung der Sortierreihenfolge ändern können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine Rückruffunktion, mit der Sie den Vergleich der Datei- und Unterordnernamen für die Erstellung der Sortierreihenfolge ändern können.
     
      <p>Diese Funktion muss über die folgende Signatur verfügen:</p>
     
      <pre>function myNameCompareFunction(name1:String, name2:String):int</pre>
     
      <p>Sie gibt<codeph>-1</codeph> zurück, wenn in der Sortierreihenfolge <codeph>name1</codeph> vor <codeph>name2</codeph> aufgeführt werden soll, <codeph>1</codeph>, wenn <codeph>name1</codeph> nach <codeph>name2</codeph> erscheinen soll und <codeph>0</codeph>, wenn die Namen gleich sind.</p>
     
      <p>Wenn Sie diese Eigenschaft nicht festlegen, führt das Steuerelement einen vom Gebietsschema abhängigen Vergleich der beiden Namen unter Berücksichtigung der Groß- und Kleinschreibung durch, indem zuerst die String-Methode <codeph>toLocaleLowerCase()</codeph> für jeden Namen aufgerufen und die Namen dann mithilfe der Operatoren <codeph>&lt;</codeph> und <codeph>></codeph> verglichen werden.</p>
     
      <p>Wenn <codeph>enumerationMode</codeph> entweder auf <codeph>FileSystemEnumerationMode.FILES_FIRST</codeph> oder auf <codeph>FileSystemEnumerationMode.DIRECTORIES_FIRST</codeph> gesetzt ist, wird diese Methode verwendet, um nur Namen innerhalb der separaten Gruppen von Dateien und Ordnern zu vergleichen.</p>
     
      <p>Diese Eigenschaft hat Auswirkungen darauf, in welcher Reihenfolge Unterordner und Dateien im Steuerelement angezeigt werden. Sie hat jedoch keine Auswirkungen darauf, welche Dateiinstanzen in der <codeph>dataProvider</codeph>-Eigenschaft vorhanden sind; sie ändert lediglich das Verhalten der Sortierung, die auf den <codeph>dataProvider</codeph> angewendet wird. Durch das Setzen der Eigenschaft wird das aktuelle <codeph>directory</codeph> nicht neu aufgelistet.</p>
     
      <p>Durch das Setzen dieser Eigenschaft werden ausgewählte Elemente deaktiviert und das Steuerelement setzt seine Bildlaufposition auf die obere linke Ecke zurück.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:selectedPath:get"><apiName>selectedPath</apiName><shortdesc>
      Der nativePath des Datei-Elements, welches den/die untergeordnete/n Unterordner bzw. Datei darstellt, oder null, wenn kein Element ausgewählt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Der <codeph>nativePath</codeph> des Datei-Elements, welches den/die untergeordnete/n Unterordner bzw. Datei darstellt, oder <codeph>null</codeph>, wenn kein Element ausgewählt ist.
     
      <p>Wenn mehrere Elemente ausgewählt sind, wird durch Abrufen dieser Eigenschaft der erste Pfad im <codeph>selectedPaths</codeph>-Array zurückgegeben.</p>
     
      <p>Durch das Setzen dieser Eigenschaft werden die Eigenschaften <codeph>selectedPaths</codeph>, <codeph>selectedItem</codeph>, <codeph>selectedItems</codeph>, <codeph>selectedIndex</codeph> und <codeph>selectedIndices</codeph> beeinflusst.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:selectedPaths:get"><apiName>selectedPaths</apiName><shortdesc>
      Ein Array von nativePath-Strings für die File-Elemente, welche die ausgewählten Unterordner und Dateien repräsentieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Array von <codeph>nativePath</codeph>-Strings für die File-Elemente, welche die ausgewählten Unterordner und Dateien repräsentieren. Dieses Array ist leer, wenn keine Elemente ausgewählt wurden.
     
      <p>Durch das Setzen dieser Eigenschaft werden die Eigenschaften <codeph>selectedPaths</codeph>, <codeph>selectedItem</codeph>, <codeph>selectedItems</codeph>, <codeph>selectedIndex</codeph> und <codeph>selectedIndices</codeph> beeinflusst.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:showExtensions:get"><apiName>showExtensions</apiName><shortdesc>
      Ein Flag, welches festlegt, ob in Dateinamen Erweiterungen angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches festlegt, ob in Dateinamen Erweiterungen angezeigt werden. Setzen Sie diese Eigenschaft auf <codeph>true</codeph>, um Dateierweiterungen anzuzeigen, und auf <codeph>false</codeph>, um sie auszublenden. Erweiterungen in Ordnernamen werden immer angezeigt.
     
      <p>Das Setzen dieser Eigenschaft hat keine Auswirkung darauf, welche Elemente angezeigt werden, oder auf die Anzeigereihenfolge. Sie beeinflusst auch nicht, welche Elemente ausgewählt werden, oder die Bildlaufposition.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:showHidden:get"><apiName>showHidden</apiName><shortdesc>
      Ein Flag, welches festlegt, ob Dateien und Ordner, die vom Betriebssystem als ausgeblendet betrachtet werden, angezeigt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches festlegt, ob Dateien und Ordner, die vom Betriebssystem als ausgeblendet betrachtet werden, angezeigt werden sollen. Setzen Sie diese Eigenschaft auf <codeph>true</codeph>, um ausgeblendete Dateien und Ordner anzuzeigen und auf <codeph>false</codeph>, um sie auszublenden.
     
      <p>Durch das Setzen dieser Eigenschaft werden ausgewählte Elemente deaktiviert und das Steuerelement setzt seine Bildlaufposition auf die obere linke Ecke zurück.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:showIcons:get"><apiName>showIcons</apiName><shortdesc>
      Ein Flag, welches festlegt, dass Symbole vor dem Dateinamen angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches festlegt, dass Symbole vor dem Dateinamen angezeigt werden. Setzen Sie diese Eigenschaft auf <codeph>true</codeph>, um Symbole anzuzeigen und auf <codeph>false</codeph>, um sie auszublenden.
     
      <p>Sie können die <codeph>directoryIcon</codeph>- und <codeph>fileIcon</codeph>-Stile setzen, um die Standardsymbole zu ändern. Dieses Steuerelement kann das eigentliche Symbol, das vom Betriebssystem für eine Datei angezeigt wird, nicht anzeigen, weil Apollo M2 diese Funktion nicht unterstützt.</p>
     
      <p>Das Setzen dieser Eigenschaft hat keine Auswirkung darauf, welche Elemente angezeigt werden, oder auf die Anzeigereihenfolge. Sie beeinflusst auch nicht, welche Elemente ausgewählt werden, oder die Bildlaufposition.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemSizeDisplayMode"><apiName>FileSystemSizeDisplayMode</apiName><shortdesc>
  Die FileSystemSizeDisplayMode-Klasse definiert die Konstantenwerte für die sizeDisplayMode-Eigenschaft der FileSystemDataGrid-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FileSystemSizeDisplayMode-Klasse definiert die Konstantenwerte für die <codeph>sizeDisplayMode</codeph>-Eigenschaft der FileSystemDataGrid-Klasse.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/enumerationMode"><linktext>mx.controls.FileSystemDataGrid.enumerationMode.</linktext></link></related-links><apiValue id="mx.controls:FileSystemSizeDisplayMode:BYTES"><apiName>BYTES</apiName><shortdesc>
      Legt das Anzeigen der Dateigröße in Byte fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bytes</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt das Anzeigen der Dateigröße in Byte fest.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemSizeDisplayMode:KILOBYTES"><apiName>KILOBYTES</apiName><shortdesc>
      Legt das Anzeigen der Dateigröße in Kilobyte fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>kilobytes</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt das Anzeigen der Dateigröße in Kilobyte fest.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:HTML"><apiName>HTML</apiName><shortdesc>
  Mithilfe des HTML-Steuerelements können HTML-Inhalte in der Anwendung angezeigt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  Die Pixelanzahl zwischen der oberen Kante dieses Steuerelements und der oberen Kante des HTML-Inhaltsbereichs.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  Die Pixelanzahl zwischen der rechten Kante dieses Steuerelements und der rechten Kante des HTML-Inhaltsbereichs.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  Die Pixelanzahl zwischen der linken Kante dieses Steuerelements und der linken Kante des HTML-Inhaltsbereichs.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  Die Pixelanzahl zwischen der unteren Kante dieses Steuerelements und der unteren Kante des HTML-Inhaltsbereichs.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:HTML&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:HTML
    <strong>Properties</strong>
    data="<i>null</i>"
    historyPosition="0"
    htmlHost="<i>null</i>"
    htmlLoaderFactory="mx.core.ClassFactory"
    htmlText=""
    listData="<i>null</i>"
    location=""
    paintsDefaultBackground="false"
    runtimeApplicationDomain="<i>null</i>"
    userAgent="<i>null</i>"
 
    <strong>Styles</strong>
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
 
    <strong>Events</strong>
    complete="<i>No default</i>"
    htmlDOMInitialize="<i>No default</i>"
    htmlRender="<i>No default</i>"
    locationChange="<i>No default</i>"
    uncaughtScriptException="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:ScrollControlBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Mithilfe des HTML-Steuerelements können HTML-Inhalte in der Anwendung angezeigt werden.
 
  <p>Die <codeph>location</codeph>-Eigenschaft wird zur Festlegung der URL der HTML-Seite, deren Inhalt im Steuerelement angezeigt wird, verwendet; es kann auch die <codeph>htmlText</codeph>-Eigenschaft gesetzt werden, um einen String festzulegen, der HTML-formatierten Text enthält, welcher im Steuerelement dargestellt wird.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="../../flash/html/HTMLLoader.html"><linktext>HTMLLoader</linktext></link></related-links><adobeApiEvent id="mx.controls:HTML_flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException"><apiName>uncaughtScriptException</apiName><shortdesc>
  Wird ausgelöst, wenn eine nicht erfasste JavaScript-Ausnahme auftritt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier>flash.events.HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn eine nicht erfasste JavaScript-Ausnahme auftritt.
 
  <p>Das Ereignis wird immer asynchron ausgelöst. Eine Ereignisprozedur für dieses Ereignis kann jede Methode dieses Steuerelements aufrufen oder auf jede ihrer Eigenschaften oder ihren <codeph>htmlLoader</codeph> zugreifen.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.LOCATION_CHANGE_locationChange"><apiName>locationChange</apiName><shortdesc>
  Wird ausgelöst, wenn die location-Eigenschaft geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.LOCATION_CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die <codeph>location</codeph>-Eigenschaft geändert wird.
 
  <p>Das Ereignis wird immer asynchron ausgelöst. Eine Ereignisprozedur für dieses Ereignis kann jede Methode dieses Steuerelements aufrufen oder auf jede ihrer Eigenschaften oder ihren <codeph>htmlLoader</codeph> zugreifen.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.HTML_RENDER_htmlRender"><apiName>htmlRender</apiName><shortdesc>
  Wird ausgelöst, wenn der HTML-Inhalt dieses Steuerelements zum ersten Mal dargestellt wird, sowie bei jedem folgenden Mal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.HTML_RENDER</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn der HTML-Inhalt dieses Steuerelements zum ersten Mal dargestellt wird, sowie bei jedem folgenden Mal.
 
  <p>Da ein HTML-Steuerelement zahlreiche solche Ereignisse auslösen kann, sollten Sie die umfangreiche Verarbeitung in einer <codeph>render</codeph>-Prozedur vermeiden, da sie die Leistung negativ beeinflussen könnte.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.HTML_DOM_INITIALIZE_htmlDOMInitialize"><apiName>htmlDOMInitialize</apiName><shortdesc>
  Wird ausgelöst, nachdem das HTML-DOM als Antwort auf einen Ladevorgang initialisiert wurde, der durch das Festlegen der location- oder htmlText-Eigenschaft verursacht wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem das HTML-DOM als Antwort auf einen Ladevorgang initialisiert wurde, der durch das Festlegen der <codeph>location</codeph>- oder <codeph>htmlText</codeph>-Eigenschaft verursacht wurde.
 
  <p>Beim Auslösen dieses Ereignisses wurde noch keine JavaScript-Methode ausgeführt. Die <codeph>domWindow</codeph>- und <codeph>domWindow.document</codeph>-Objekte sind vorhanden; andere DOM-Objekte sind möglicherweise nicht vorhanden. Sie können dieses Ereignis verwenden, um Eigenschaften für das <codeph>domWindow</codeph>- und <codeph>domWindow.document</codeph>-Objekt für JavaScript-Methoden oder den späteren Zugriff zu setzen.</p>
 
  <p>Eine Prozedur für dieses Ereignis sollte keine Eigenschaften setzen oder Methoden abrufen, die einen anderen Ladevorgang starten oder die URL des aktuellen Ladevorgangs beeinflussen; andernfalls kann eine ActionScript- oder JavaScript-Ausnahme verursacht werden.</p>
 
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="mx.controls.location.xml"><linktext>location</linktext></link><link href="" invalidHref="mx.controls.htmlText.xml"><linktext>htmlText</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Wird ausgelöst, nachdem der letzte Ladevorgang, der durch das Festlegen der location- oder htmlText-Eigenschaft verursacht wurde, abgeschlossen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, nachdem der letzte Ladevorgang, der durch das Festlegen der <codeph>location</codeph>- oder <codeph>htmlText</codeph>-Eigenschaft verursacht wurde, abgeschlossen ist.
 
  <p>Dieses Ereignis wird immer asynchron ausgelöst, nachdem das JavaScript <codeph>load</codeph>-Ereignis im HTML-DOM ausgelöst wurde.</p>
 
  <p>Eine Ereignisprozedur für dieses Ereignis kann jede Methode dieses Steuerelements aufrufen oder auf jede ihrer Eigenschaften oder ihren <codeph>htmlLoader</codeph> zugreifen.</p>
 
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="mx.controls.location.xml"><linktext>location</linktext></link><link href="" invalidHref="mx.controls.htmlText.xml"><linktext>htmlText</linktext></link></related-links></adobeApiEvent><apiConstructor id="mx.controls:HTML:HTML"><apiName>HTML</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:HTML:cancelLoad"><apiName>cancelLoad</apiName><shortdesc>
      Bricht alle zurzeit stattfindenden Ladevorgänge ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Bricht alle zurzeit stattfindenden Ladevorgänge ab.
     
      <p>Diese Methode wird nicht ausgeführt, wenn sie aufgerufen wird, bevor der interne HTMLLoader (die <codeph>htmlLoader</codeph>-Eigenschaft) dieser Komponente erstellt wurde.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:HTML:getHistoryAt"><apiName>getHistoryAt</apiName><shortdesc>
      Gibt das HTMLHistoryItem-Element an der festgelegten Position in der Verlaufsliste des Steuerelements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein HTMLHistoryItem-Objekt für den Verlaufseintrag an der angegebenen Position.
     
      </apiDesc><apiType value="flash.html:HTMLHistoryItem"/></apiReturn><apiParam><apiItemName>position</apiItemName><apiType value="int"/><apiDesc>Die Position in der Verlaufsliste.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt das HTMLHistoryItem-Element an der festgelegten Position in der Verlaufsliste des Steuerelements zurück.
     
      <p>Diese Methode gibt <codeph>null</codeph> zurück, wenn sie aufgerufen wird, bevor der interne HTMLLoader (die <codeph>htmlLoader</codeph>-Eigenschaft) dieser Komponente erstellt wurde.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.controls.historyPosition.xml"><linktext>historyPosition</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:HTML:historyBack"><apiName>historyBack</apiName><shortdesc>
      Navigiert in der Verlaufsliste des Steuerelements zurück, wenn das möglich ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Navigiert in der Verlaufsliste des Steuerelements zurück, wenn das möglich ist.
     
      <p>Der Aufruf dieser Methode des HTMLLoader-Objekts hat denselben Effekt, als würde die <codeph>back()</codeph>-Methode der <codeph>window.history</codeph>-Eigenschaft in JavaScript im HTML-Inhalt aufgerufen.</p>
     
      <p>Diese Methode wird nicht ausgeführt, wenn sie aufgerufen wird, bevor der interne HTMLLoader (die <codeph>htmlLoader</codeph>-Eigenschaft) dieser Komponente erstellt wurde.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#HTML/historyPosition"><linktext>historyPosition</linktext></link><link href="mx.controls.xml#HTML/historyForward()"><linktext>historyForward()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:HTML:historyForward"><apiName>historyForward</apiName><shortdesc>
      Navigiert in der Verlaufsliste des Steuerelements weiter, wenn das möglich ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Navigiert in der Verlaufsliste des Steuerelements weiter, wenn das möglich ist.
     
      <p>Der Aufruf dieser Methode des HTMLLoader-Objekts hat denselben Effekt, als würde die <codeph>back()</codeph>-Methode der <codeph>window.history</codeph>-Eigenschaft in JavaScript im HTML-Inhalt aufgerufen.</p>
     
      <p>Diese Funktion löst keine Fehler aus.</p>
     
      <p>Diese Methode wird nicht ausgeführt, wenn sie aufgerufen wird, bevor der interne HTMLLoader (die <codeph>htmlLoader</codeph>-Eigenschaft) dieser Komponente erstellt wurde.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#HTML/historyPosition"><linktext>historyPosition</linktext></link><link href="mx.controls.xml#HTML/historyBack()"><linktext>historyBack()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:HTML:historyGo"><apiName>historyGo</apiName><shortdesc>
      Navigiert die festgelegte Schrittzahl in der Verlaufsliste des Steuerelements zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>steps</apiItemName><apiType value="int"/><apiDesc>Die Anzahl an Schritten, die in der Verlaufsliste weiter (positiv) oder zurück (negativ) navigiert werden soll.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Navigiert die festgelegte Schrittzahl in der Verlaufsliste des Steuerelements zurück.
     
      <p>Diese Methode navigiert weiter, wenn die Anzahl der Schritte positiv ist und rückwärts, wenn die Anzahl der Schritte negativ ist. Eine Navigation um null Schritte entspricht dem Aufrufen von <codeph>reload()</codeph>.</p>
     
      <p>Diese Methode entspricht dem Aufruf der <codeph>go()</codeph>-Methode der <codeph>window.history</codeph>-Eigenschaft in JavaScript im HTML-Inhalt.</p>
     
      <p>Diese Methode wird nicht ausgeführt, wenn sie aufgerufen wird, bevor der interne HTMLLoader (die <codeph>htmlLoader</codeph>-Eigenschaft) dieser Komponente erstellt wurde.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:HTML:reload"><apiName>reload</apiName><shortdesc>
      Lädt den HTML-Inhalt vom aktuellen Speicherort neu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Lädt den HTML-Inhalt von der aktuellen<codeph>location</codeph> neu.
     
      <p>Diese Methode wird nicht ausgeführt, wenn sie aufgerufen wird, bevor der interne HTMLLoader (die <codeph>htmlLoader</codeph>Eigenschaft) dieser Komponente erstellt wurde.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:HTML:htmlLoader"><apiName>htmlLoader</apiName><shortdesc>
      Das interne HTMLLoader-Objekt, das den HTML-Inhalt für dieses Steuerelement darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.html:HTMLLoader"/></apiValueDef><apiDesc>
      Das interne HTMLLoader-Objekt, das den HTML-Inhalt für dieses Steuerelement darstellt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      Die Höhe des HTML-Inhalts in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Höhe des HTML-Inhalts in Pixeln.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      Die Breite des HTML-Inhalts in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Die Breite des HTML-Inhalts in Pixeln.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:data:get"><apiName>data</apiName><shortdesc>
      Erlaubt es Ihnen, einen Wert an die Komponente zu übergeben, wenn Sie diese in einem Elementrenderer oder -editor verwenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Erlaubt es Ihnen, einen Wert an die Komponente zu übergeben, wenn Sie diese in einem Elementrenderer oder -editor verwenden. Normalerweise verwenden Sie Datenbindung, um ein Feld der <codeph>data</codeph>-Eigenschaft an eine Eigenschaft dieser Komponente zu binden.
     
      <p>Wenn Sie das Steuerelement als Elementrenderer oder -editor, in dem Elemente abgelegt werden können, verwenden, schreibt Flex automatisch den aktuellen Wert des Elements in die <codeph>text</codeph>-Eigenschaft dieses Steuerelements.</p>
     
      <p>Diese Eigenschaft kann nicht in MXML eingestellt werden</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer.</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:domWindow:get"><apiName>domWindow</apiName><shortdesc>
      Das JavaScript-Fensterobjekt für das Stammbild des HTML-DOMs im Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das JavaScript-<codeph>window</codeph>-Objekt für das Stammbild des HTML-DOMs im Steuerelement.
     
      <p>Diese Eigenschaft ist <codeph>null</codeph>, bis das <codeph>htmlDOMInitialize</codeph>-Ereignis ausgelöst wurde.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:historyLength:get"><apiName>historyLength</apiName><shortdesc>
      Die Gesamtlänge der Verlaufsliste, einschließlich der Zurück- und Weiter-Einträge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Gesamtlänge der Verlaufsliste, einschließlich der Zurück- und Weiter-Einträge. Diese Eigenschaft hat denselben Wert wie die JavaScript-Eigenschaft <codeph>window.history.length</codeph> des HTML-Inhalts.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#HTML/historyPosition"><linktext>historyPosition</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:historyPosition:get"><apiName>historyPosition</apiName><shortdesc>
      Die aktuelle Position in der Verlaufsliste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die aktuelle Position in der Verlaufsliste.
     
      <p>Die Verlaufsliste entspricht dem <codeph>window.history</codeph>-Objekt des HTML-Inhalts. Einträge, die geringer sind als die aktuelle Position, sind die „Zurück“-Liste, größere Einträge sind die „Weiter“-Liste. Wird versucht, eine Position einzustellen, die größer als das Ende ist, wird der Wert auf das Ende festgelegt.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:htmlHost:get"><apiName>htmlHost</apiName><shortdesc>
      Das HTMLHost-Objekt wird zur Verarbeitung von Änderungen bestimmter Benutzeroberflächenelemente im HTML-Inhalt, wie der window.document.title-Eigenschaft, verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.html:HTMLHost"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Das HTMLHost-Objekt wird zur Verarbeitung von Änderungen bestimmter Benutzeroberflächenelemente im HTML-Inhalt, wie der <codeph>window.document.title</codeph>-Eigenschaft, verwendet.
     
      <p>Um das Standardverhalten von HTMLLoader außer Kraft zu setzen, erstellen Sie eine Unterklasse der HTMLHost-Klasse, setzen die Member-Funktionen zum Verarbeiten verschiedener Benutzeroberflächenänderungen im HTML-Inhalt außer Kraft und setzen die Eigenschaft auf eine Instanz der Unterklasse.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:htmlLoaderFactory:get"><apiName>htmlLoaderFactory</apiName><shortdesc>
      Die IFactory, die eine vom HTMLLoader abgeleitete Instanz erstellt, die als htmlLoader verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc>
      Die IFactory, die eine vom HTMLLoader abgeleitete Instanz erstellt, die als htmlLoader verwendet wird.
     
      <p>Der Standardwert ist eine IFactory für den HTMLLoader.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:htmlText:get"><apiName>htmlText</apiName><shortdesc>
      Legt einen HTML-formatierten String zur Anzeige durch das Steuerelement fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Legt einen HTML-formatierten String zur Anzeige durch das Steuerelement fest.
     
      <p>Durch das Setzen dieser Eigenschaft wird die <codeph>location</codeph>-Eigenschaft auf <codeph>null</codeph> gesetzt und umgekehrt.</p>
     
      <p>Inhalt, der über die <codeph>htmlText</codeph>-Eigenschaft hinzugefügt wird, wird in der Sicherheits-Sandbox der Anwendung abgelegt. Enthält eine AIR-Anwendung eine HTML-Steuerelement in der Sicherheits-Sandbox einer Anwendung und wird der Remote-HTML-Code direkt durch Setzen der <codeph>htmlText</codeph>-Eigenschaft in das Steuerelement eingefügt, so wird jedes im HTML-Text enthaltene Skript in der Sandbox der Anwendung ausgeführt.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#HTML/location"><linktext>location</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:listData:get"><apiName>listData</apiName><shortdesc>
      Wenn eine Komponente als Elementrenderer oder -editor, in dem Elemente abgelegt werden können, verwendet wird, initialisiert Flex die listData-Eigenschaft der Komponente mit den passenden Daten aus dem List-Steuerelement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.controls.listClasses:BaseListData"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Wenn eine Komponente als Elementrenderer oder Elementeditor, in dem Elemente abgelegt werden können, verwendet wird, initialisiert Flex die <codeph>listData</codeph>-Eigenschaft der Komponente mit den passenden Daten aus dem List-Steuerelement. Die Komponente kann die <codeph>listData</codeph>-Eigenschaft verwenden, um die <codeph>data</codeph>-Eigenschaft des Elementrenderers oder des Elementeditors, in dem Elemente abgelegt werden können, zu initialisieren.
     
      <p>Diese Eigenschaft wird nicht in MXML oder ActionScript eingestellt. Flex erledigt dies, wenn die Komponente als Elementrenderer oder Elementeditor, in dem Elemente abgelegt werden können, verwendet wird.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.IDropInListItemRenderer.xml"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:loaded:get"><apiName>loaded</apiName><shortdesc>
      Ein Flag, das anzeigt, ob das JavaScript-Ladeereignis, das dem vorigen Ladevorgang entspricht, an das HTML-DOM im Steuerelement übergeben wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Flag, das anzeigt, ob das JavaScript-<codeph>load</codeph>-Ereignis, das dem vorigen Ladevorgang entspricht, an das HTML-DOM im Steuerelement übergeben wurde.
     
      <p>Diese Eigenschaft hat den Wert <codeph>true</codeph>, bevor das <codeph>complete</codeph>-Ereignis ausgelöst wird.</p>
     
      <p>Es ist möglich, dass diese Eigenschaft nie mit dem Wert <codeph>true</codeph> belegt wird. Dies passiert in den gleichen Fällen, in denen auch das <codeph>complete</codeph>-Ereignis nie ausgelöst wird.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:location:get"><apiName>location</apiName><shortdesc>
      Die URL der HTML-Seite, die durch das Steuerelement angezeigt werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Die URL der HTML-Seite, die durch das Steuerelement angezeigt werden soll.
     
      <p>Durch das Setzen dieser Eigenschaft wird die <codeph>htmlText</codeph>-Eigenschaft auf <codeph>null</codeph> gesetzt und umgekehrt.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#HTML/htmlText"><linktext>htmlText</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:paintsDefaultBackground:get"><apiName>paintsDefaultBackground</apiName><shortdesc>
      Ob der HTML-Inhalt dieses Steuerelements einen undurchsichtig weißen Hintergrund hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ob der HTML-Inhalt dieses Steuerelements einen undurchsichtig weißen Hintergrund hat.
     
      <p>Hat diese Eigenschaft den Wert <codeph>false</codeph>, wird der für dieses Flex-Steuerelement festgelegte Hintergrund hinter dem HTML-Inhalt angezeigt.</p>
     
      <p>Hat ein HTML-Element jedoch seinen eigenen undurchsichtig weißen Hintergrund (festgelegt beispielsweise durch style="background-color:gray"), dann erscheint dieser Hintergrund hinter dem Element.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:pdfCapability:get"><apiName>pdfCapability</apiName><shortdesc>
      Die Art der PDF-Unterstützung auf dem System des Benutzers, definiert als Ganzzahlencodewert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Art der PDF-Unterstützung auf dem System des Benutzers, definiert als Ganzzahlencodewert.
     
      <p>Ein HTML-Objekt kann PDF-Inhalte nur dann anzeigen, wenn diese Eigenschaft <codeph>PDFCapability.STATUS_OK</codeph> entspricht. Die PDFCapability-Klasse definiert Konstanten für mögliche Werte der <codeph>pdfCapability</codeph>-Eigenschaft wie folgt:</p>
     
      <adobetable class="innertable">
        
        
        
        
        
      <tgroup cols="2"><thead><row><entry>PDFCapability-Konstante</entry><entry>Bedeutung</entry></row></thead><tbody><row>
         <entry><codeph>STATUS_OK</codeph></entry>
         <entry>Eine ausreichende Version (8.1 oder höher) von Acrobat Reader wurde erkannt. PDF-Inhalt kann in einem HTML-Objekt geladen werden.
           <p><i>Hinweis:</i> Wenn unter Windows Acrobat oder Acrobat Reader Version 7.x oder höher installiert ist und auf dem System des Benutzers ausgeführt wird, wird diese Version verwendet, auch wenn eine höhere Version installiert ist, welche das Laden von PDF in einem HTML-Objekt unterstützt. In diesem Fall, falls der Wert der <codeph>pdfCapability</codeph>-Eigenschaft den Wert <codeph>PDFCapability.STATUS_OK</codeph> aufweist, zeigt die ältere Version von Acrobat oder Reader eine Warnung an, wenn eine AIR-Anwendung versucht, PDF-Inhalt in einem HTML-Objekt zu laden, ohne dass eine Fehlermeldung in der Apollo-Laufzeit angezeigt wird. Falls diese Situation für die Endbenutzer möglich ist, empfiehlt es sich eventuell, Anweisungen zum Schließen von Acrobat anzuzeigen, während die Anwendung ausgeführt wird. Sie könnten diese Anweisungen anzeigen, wenn der PDF-Inhalt nicht innerhalb eines akzeptablen Zeitrahmens geladen wird.</p></entry>
        </row><row>
         <entry><codeph>ERROR_INSTALLED_READER_NOT_FOUND</codeph></entry>
         <entry>Es wurde keine Version von Acrobat Reader erkannt. Ein HTML-Objekt kann PDF-Inhalte nicht anzeigen.</entry>
        </row><row>
         <entry><codeph>ERROR_INSTALLED_READER_TOO_OLD</codeph></entry>
         <entry>Acrobat wurde erkannt, die Version ist jedoch zu alt. Ein HTML-Objekt kann PDF-Inhalte nicht anzeigen.</entry>
        </row><row>
         <entry><codeph>ERROR_PREFERED_READER_TOO_OLD</codeph></entry>
         <entry>Eine ausreichende Version (8.1 oder höher) von Acrobat Reader wurde erkannt; die Version von Acrobat Reader, die zum Verarbeiten von PDF-Inhalten eingerichtet wurde, ist jedoch älter als Reader 8.1. Ein HTML-Objekt kann PDF-Inhalte nicht anzeigen.</entry>
        </row></tbody></tgroup></adobetable>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:runtimeApplicationDomain:get"><apiName>runtimeApplicationDomain</apiName><shortdesc>
      Die ApplicationDomain zum Verwenden für window.runtime-Scripting in HTML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.system:ApplicationDomain"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die ApplicationDomain zum Verwenden für die <codeph>window.runtime</codeph>-Scripting in HTML.
     
      <p>Wenn diese Eigenschaft <codeph>null</codeph> ist oder wenn sie eine ApplicationDomain einer anderen Sicherheitsdomäne als jener des HTML-Inhalts festlegt, verwendet die HTML-Seite die standardmäßige <codeph>ApplicationDomain</codeph> als Domäne für die Seite.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:userAgent:get"><apiName>userAgent</apiName><shortdesc>
      Der Benutzer-Agent-String, der in Inhaltsanforderungen von diesem Steuerelement verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Benutzer-Agent-String, der in Inhaltsanforderungen von diesem Steuerelement verwendet wird.
     
      <p>Sie können den Benutzer-Agent-Standardstring festlegen, der von allen HTML-Steuerelementen in einer Anwendungsdomäne verwendet wird, indem Sie die <codeph>URLRequestDefaults.userAgent</codeph>-Eigenschaft einstellen. Wenn kein Wert für die <codeph>userAgent</codeph>-Eigenschaft festgelegt (oder der Wert auf <codeph>null</codeph> gesetzt) wurde, wird der Wert für den Benutzer-Agent-String auf den Wert der <codeph>URLRequestDefaults.userAgent</codeph>-Eigenschaft eingestellt.</p>
     
      <p>Wenn weder für die <codeph>userAgent</codeph>-Eigenschaft noch für <codeph>URLRequestDefaults.userAgent</codeph> ein Wert gesetzt wurde, wird ein Standardwert als Benutzer-Agent-String verwendet. Dieser Standardwert variiert je nach Laufzeit-Betriebssystem (z. B. Mac OS oder Windows), der Laufzeitsprache und der Laufzeitversion wie in den folgenden beiden Beispielen zu sehen ist:</p>
     
      <pre>
      "Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) AdobeAIR/1.0"
      "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) AdobeAIR/1.0"
      </pre>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.net.xml#URLRequest/userAgent"><linktext>flash.net.URLRequest.userAgent</linktext></link><link href="" invalidHref="flash.net.xml#URLRequestDefaults/userAgent"><linktext>flash.net.URLRequestDefaults.userAgent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:FlexNativeMenu"><apiName>FlexNativeMenu</apiName><shortdesc>
  Die FlexNativeMenu-Komponente stellt einen Wrapper für die NativeMenu-Klasse von AIR bereit.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;mx:FlexNativeMenu&gt</code> tag supports the following tag attributes:</p>
 
  <pre>
  &lt;mx:FlexNativeMenu
    <b>Properties</b>
    dataDescriptor="<i>mx.controls.treeClasses.DefaultDataDescriptor</i>"
    dataProvider="<i>undefined</i>"
    keyEquivalentField="keyEquivalent"
    keyEquivalentFunction="<i>undefined</i>"
    keyEquivalentModifiersFunction="<i>undefined</i>"
    labelField="label"
    labelFunction="<i>undefined</i>"
    mnemonicIndexField="mnemonicIndex"
    mnemonicIndexFunction="<i>undefined</i>"
    showRoot="true"
 
    <b>Events</b>
    itemClick="<i>No default</i>"
    menuShow="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:ILayoutManagerClient</apiBaseInterface><apiBaseInterface>mx.controls:IFlexContextMenu</apiBaseInterface><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FlexNativeMenu-Komponente stellt einen Wrapper für die NativeMenu-Klasse von AIR bereit. Das FlexNativeMenu stellt eine Möglichkeit bereit, Menüs für native Betriebssysteme zu definieren, wie z. B. Fenster, Anwendung und Kontextmenüs. Dabei werden Verfahren verwendet, die Flex-Entwicklern bereits bekannt und mit anderen Flex-Menükomponenten kompatibel sind, wie z. B. MXML und Datenprovidern zur Festlegung der Menüstruktur. Anders als die Flex-Menükomponenten werden die FlexNativeMenu-Komponenten vom Host-Betriebssystem als Teil einer AIR-Anwendung wiedergegeben und nicht von Flex als visuelle Komponenten erzeugt.
 
  <p>Wie bei anderen Flex Menükomponenten auch müssen Sie einen Datenprovider, wie z. B. eine XML-Hierarchie oder ein Array von Objekten, die Daten für die Menüdefinition enthalten, erzeugen, um die Struktur eines Menüs festzulegen, welches von einer FlexNativeMenu-Komponente dargestellt wird. Verschiedene Eigenschaften können festgelegt werden, um zu definieren, wie der Datenprovider interpretiert wird, wie z. B. die <codeph>labelField</codeph>-Eigenschaft, die das Datenfeld festlegt, das für die Menüelementbeschriftung verwendet wird; die <codeph>keyEquivalentField</codeph>-Eigenschaft, die ein Feld festlegt, das eine Zugriffstastenkombination für das Menüelement definiert, und die <codeph>mnemonicIndexField</codeph>-Eigenschaft, die das Feld festlegt, das die Indexposition des Zeichens in der Beschriftung definiert, das als Zugriffszeichen des Menüelements verwendet wird.</p>
 
  <p>Der Datenprovider für FlexNativeMenu-Elemente kann verschiedene Attribute festlegen, die bestimmen, wie das Element angezeigt wird und wie es sich verhält. Das folgende Beispiel des XML-Datenproviders zeigt dies:</p>
  <pre>
   &lt;mx:XML format="e4x" id="myMenuData">
     &lt;root>
        &lt;menuitem label="MenuItem A">
            &lt;menuitem label="SubMenuItem A-1" enabled="False"/>
            &lt;menuitem label="SubMenuItem A-2"/>
        &lt;/menuitem>
        &lt;menuitem label="MenuItem B" type="check" toggled="true"/>
        &lt;menuitem label="MenuItem C" type="check" toggled="false"/>
        &lt;menuitem type="separator"/>
        &lt;menuitem label="MenuItem D">
            &lt;menuitem label="SubMenuItem D-1"/>
            &lt;menuitem label="SubMenuItem D-2"/>
            &lt;menuitem label="SubMenuItem D-3"/>
        &lt;/menuitem>
    &lt;/root>
 &lt;/mx:XML></pre>
 
  <p>Die folgende Tabelle enthält die Attribute, die Sie festlegen können, ihren Datentyp, ihren Zweck und wie der Datenprovider sie darstellen muss, wenn das Menü die DefaultDataDescriptor-Klasse zur Analyse verwendet.</p>
 
  <adobetable class="innertable">
  
  
  
  
  
  
  
  
  
  
  
  
  
 <tgroup cols="3"><thead><row><entry>Attribut</entry><entry>Typ</entry><entry>Beschreibung</entry></row></thead><tbody><row>
    <entry><codeph>altKey</codeph></entry>
    <entry>Boolescher Ausdruck</entry>
    <entry>Legt fest, ob die Alt-Taste als Teil des Tastaturbefehls für das Element benötigt wird.</entry>
  </row><row>
    <entry><codeph>cmdKey</codeph></entry>
    <entry>Boolescher Ausdruck</entry>
    <entry><b>Hinweis:</b> Dieses Attribut ist seit Flex 3.2 veraltet, verwenden Sie stattdessen <codeph>commandKey</codeph>. Legt fest, ob die Befehlstaste als Teil des Tastaturbefehls für das Element benötigt wird.</entry>
  </row><row>
    <entry><codeph>commandKey</codeph></entry>
    <entry>Boolescher Ausdruck</entry>
    <entry>Legt fest, ob die Befehlstaste als Teil des Tastaturbefehls für das Element benötigt wird.</entry>
  </row><row>
    <entry><codeph>controlKey</codeph></entry>
    <entry>Boolescher Ausdruck</entry>
    <entry>Legt fest, ob die Strg-Taste als Teil des Tastaturbefehls für das Element benötigt wird.</entry>
  </row><row>
    <entry><codeph>ctrlKey</codeph></entry>
    <entry>Boolescher Ausdruck</entry>
    <entry><b>Hinweis:</b> Dieses Attribut ist seit Flex 3.2 veraltet, verwenden Sie stattdessen <codeph>controlKey</codeph>. Legt fest, ob die Strg-Taste als Teil des Tastaturbefehls für das Element benötigt wird.</entry>
  </row><row>
    <entry><codeph>enabled</codeph></entry>
    <entry>Boolescher Ausdruck</entry>
    <entry>Legt fest, ob der Benutzer das Menüelement wählen kann (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>). Wird kein Wert angegeben, behandelt Flex das Element, als ob <codeph>true</codeph> festgelegt wäre. Wenn Sie den Standarddatendeskriptor verwenden, müssen Datenprovider diese Eigenschaft mithilfe eines <codeph>enabled</codeph>-XML-Attributs oder Objektfelds festlegen.</entry>
  </row><row>
    <entry><codeph>keyEquivalent</codeph></entry>
    <entry>String</entry>
    <entry>Legt ein Tastaturzeichen fest, das dasselbe Ereignis auslöst wie die Auswahl des Menüelements. Die <codeph>keyEquivalentField</codeph>- oder <codeph>keyEquivalentFunction</codeph>-Eigenschaft legt den Namen des Feldes in den Daten fest, welches den Tastaturbefehl oder eine Funktion zur Bestimmung des Tastaturbefehls definiert. (Wenn der Datenprovider das E4X XML-Format besitzt, müssen Sie eine dieser Eigenschaften festlegen, um einen Tastaturbefehl zuzuweisen.)</entry>
  </row><row>
    <entry><codeph>label</codeph></entry>
    <entry>String</entry>
    <entry>Gibt den innerhalb des Steuerelements angezeigten Text an. Dieses Element wird für alle Menüelementtypen außer <codeph>separator</codeph> verwendet. Die <codeph>labelField</codeph>- oder <codeph>labelFunction</codeph>-Eigenschaft des Menüs legt den Namen des Feldes in den Daten fest, welches die Beschriftung oder eine Funktion zur Bestimmung der Beschriftung definiert. (Wenn der Datenprovider das E4X XML-Format besitzt, müssen Sie eine dieser Eigenschaften festlegen, um eine Beschriftung anzuzeigen.) Wenn der Datenprovider ein Array von Strings ist, verwendet Flex den Stringwert als Beschriftung.</entry>
  </row><row>
    <entry><codeph>mnemonicIndex</codeph></entry>
    <entry>Integer</entry>
    <entry>Legt die Indexposition des Zeichens innerhalb der Beschriftung fest, welches als Zugriffszeichen für das Menüelement verwendet werden soll. Die <codeph>mnemonicIndexField</codeph>- oder <codeph>mnemonicIndexFunction</codeph>-Eigenschaft des Menüs legt den Namen des Felds in den Daten fest, welches die Indexposition des Zugriffszeichens oder eine Funktion zur Bestimmung der Indexposition des Zugriffszeichens definiert. (Wenn der Datenprovider das E4X XML-Format besitzt, müssen Sie eine dieser Eigenschaften festlegen, um eine Indexposition für das Zugriffszeichen in den Daten festzulegen.) Alternativ können Sie anzeigen, dass ein Zeichen der Beschriftung das Zugriffszeichen des Menüelements ist, indem Sie einen Unterstrich direkt links neben dem Zeichen einfügen.</entry>
  </row><row>
    <entry><codeph>shiftKey</codeph></entry>
    <entry>Boolescher Ausdruck</entry>
    <entry>Legt fest, ob die Umschalttaste als Teil des Tastaturbefehls für das Element benötigt wird.</entry>
  </row><row>
    <entry><codeph>toggled</codeph></entry>
    <entry>Boolescher Ausdruck</entry>
    <entry>Legt fest, ob ein Kontrollkästchen ausgewählt ist. Wird kein Wert angegeben, behandelt Flex das Element so, als ob <codeph>false</codeph> angegeben wäre, und das Element wird nicht ausgewählt. Wenn Sie den Standarddatendeskriptor verwenden, müssen Datenprovider diese Eigenschaft mithilfe des XML-Attributs oder -Objektfelds <codeph>toggled</codeph> festlegen.</entry>
  </row><row>
    <entry><codeph>type</codeph></entry>
    <entry>String</entry>
    <entry>Gibt den Typ des Menüelements an. Gültige Werte sind <codeph>separator</codeph> und <codeph>check</codeph>. Flex behandelt alle anderen Werte oder Knoten ohne Typenangabe als normale Menüeinträge. Wenn Sie den Standarddatendeskriptor verwenden, müssen Datenprovider diese Eigenschaft mithilfe des XML-Attributs oder -Objektfelds <codeph>type</codeph> festlegen.</entry>
  </row></tbody></tgroup></adobetable>
 
  <p>Um ein Fenstermenü zu erzeugen, legen Sie FlexNativeMenu als <codeph>menu</codeph>-Eigenschaft des Fensters oder der WindowedApplication-Instanz fest, bei der das Menü erscheinen soll. Um ein Anwendungsmenü zu erzeugen, weisen Sie das FlexNativeMenu als die <codeph>menu</codeph>-Eigenschaft der WindowedApplication der Anwendung zu. Um ein FlexNativeMenu als Kontextmenü für einen Teil der Benutzeroberfläche zuzuweisen, rufen Sie die <codeph>setContextMenu()</codeph>-Methode der FlexNativeMenu-Instanz auf und übergeben Sie das UI-Objekt als Argument. Rufen Sie die <codeph>display()</codeph>-Methode der FlexNativeMenu-Komponente auf, um das Menü als Popupmenü an einer beliebigen Stelle des Anwendungsfensters einzublenden.</p>
 
  <p>Um zu ermitteln, wann Befehle des Menüelements ausgelöst werden, registrieren Sie einen Listener für das <codeph>itemClick</codeph>-Ereignis. Sie können ebenfalls einen Listener für das <codeph>menuShow</codeph>-Ereignis registrieren, um zu bestimmen, wann ein Menü oder Untermenü geöffnet wird.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.display.NativeMenu.xml"><linktext>flash.display.NativeMenu</linktext></link><link href="mx.events.xml#FlexNativeMenuEvent"><linktext>mx.events.FlexNativeMenuEvent</linktext></link></related-links><adobeApiEvent id="mx.controls:FlexNativeMenu_mx.events.FlexNativeMenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Wird ausgelöst, wenn ein Menüelement ausgewählt wird.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexNativeMenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.FlexNativeMenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Menüelement ausgewählt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FlexNativeMenu_mx.events.FlexNativeMenuEvent.MENU_SHOW_menuShow"><apiName>menuShow</apiName><shortdesc>
  Wird ausgelöst, bevor ein Menü oder Untermenü angezeigt wird.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexNativeMenuEvent.MENU_SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexNativeMenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, bevor ein Menü oder Untermenü angezeigt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FlexNativeMenu:FlexNativeMenu"><apiName>FlexNativeMenu</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FlexNativeMenu:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      Verarbeitet die Eigenschaften der Komponente.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Verarbeitet die Eigenschaften der Komponente.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.xml#UIComponent/commitProperties()"><linktext>mx.core.UIComponent.commitProperties()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:createAutomationIDPart"><apiName>createAutomationIDPart</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="mx.automation:IAutomationObject"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:createAutomationIDPartWithRequiredProperties"><apiName>createAutomationIDPartWithRequiredProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="mx.automation:IAutomationObject"/></apiParam><apiParam><apiItemName>properties</apiItemName><apiType value="Array"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:display"><apiName>display</apiName><shortdesc>
      Blendet dieses Menü an der angegebenen Position ein.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stage</apiItemName><apiType value="flash.display:Stage"/><apiDesc>Das Stage-Objekt, für das dieses Menü angezeigt werden soll. 
     
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="int"/><apiDesc>Die Anzahl horizontaler Pixel in Bezug auf den Ursprungspunkt der Bühne, auf der dieses Menü angezeigt werden soll. 
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="int"/><apiDesc>Die Anzahl vertikaler Pixel in Bezug auf den Ursprungspunkt der Bühne, auf der dieses Menü angezeigt werden soll. 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
      Blendet dieses Menü an der angegebenen Position ein. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:getAutomationChildAt"><apiName>getAutomationChildAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.automation:IAutomationObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:getAutomationChildren"><apiName>getAutomationChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc conref="mx.core.UIComponent#invalidateProperties()">
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToKeyEquivalent"><apiName>itemToKeyEquivalent</apiName><shortdesc>
      Gibt den Tastaturbefehl für das betreffende Datenobjekt, basierend auf der keyEquivalentField- und keyEquivalentFunction-Eigenschaft, zurück.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Der Tastaturbefehl, basierend auf den Daten.
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Das anzuzeigende Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt den Tastaturbefehl für das betreffende Datenobjekt, basierend auf der <codeph>keyEquivalentField</codeph>- und <codeph>keyEquivalentFunction</codeph>-Eigenschaft, zurück. Falls die Methode den Parameter nicht in einen String konvertieren kann, wird ein leerer String zurückgegeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToKeyEquivalentModifiers"><apiName>itemToKeyEquivalentModifiers</apiName><shortdesc>
      Gibt die Tastaturbefehlsmodifizierer für das betreffende Datenobjekt, basierend auf der keyEquivalentModifiersFunction-Eigenschaft, zurück.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Das Array von Tastaturbefehlsmodifizierern, basierend auf den Daten.
     </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Das anzuzeigende Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Tastaturbefehlsmodifizierer für das betreffende Datenobjekt, basierend auf der <codeph>keyEquivalentModifiersFunction</codeph>-Eigenschaft, zurück. Wenn die Methode die Parameter nicht in ein Array von Modifizierern konvertieren kann, gibt sie ein leeres Array zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      Gibt den als Menüelementbeschriftung zu verwendenden String für das betreffende Datenobjekt zurück, der auf der labelField und der labelFunction-Eigenschaft basiert.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Der auf der Grundlage der Daten anzuzeigende String.
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Das anzuzeigende Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt den als Menüelementbeschriftung zu verwendenden String für das betreffende Datenobjekt zurück, der auf der <codeph>labelField</codeph> und der <codeph>labelFunction-Eigenschaft</codeph> basiert. Falls die Methode den Parameter nicht in einen String konvertieren kann, wird ein einzelnes Leerzeichen zurückgegeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToMnemonicIndex"><apiName>itemToMnemonicIndex</apiName><shortdesc>
      Gibt die Indexposition des Zugriffszeichens für das betreffende Datenobjekt, basierend auf der mnemonicIndexField- und mnemonicIndexFunction-Eigenschaft, zurück.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Die auf den Daten basierende Indexposition des Zugriffszeichens.
     </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Das anzuzeigende Objekt.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Indexposition des Zugriffszeichens für das betreffende Datenobjekt, basierend auf der <codeph>mnemonicIndexField</codeph>- und <codeph>mnemonicIndexFunction</codeph>-Eigenschaft, zurück. Wenn die Methode den Parameter nicht in eine Ganzzahl konvertieren kann, gibt sie -1 zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:parseLabelToMnemonicIndex"><apiName>parseLabelToMnemonicIndex</apiName><shortdesc>
      Extrahiert die Indexposition des Zugriffszeichens aus einer Beschriftung anhand des Unterstrichs.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      Extrahiert die Indexposition des Zugriffszeichens aus einer Beschriftung anhand des Unterstrichs. Findet den ersten Unterstrich, wenn einer vorhanden ist, und verwendet ihn als Indexposition.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:parseLabelToString"><apiName>parseLabelToString</apiName><shortdesc>
      Bestimmt die für das NativeMenuItem zu verwendende Beschriftung, indem ggf. vorhandene Unterstriche entfernt und auskommentierte Unterstriche konvertiert werden.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      Bestimmt die für das NativeMenuItem zu verwendende Beschriftung, indem ggf. vorhandene Unterstriche entfernt und auskommentierte Unterstriche konvertiert werden.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:resolveAutomationIDPart"><apiName>resolveAutomationIDPart</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>criteria</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:setContextMenu"><apiName>setContextMenu</apiName><shortdesc>
      Setzt das Kontextmenü des InteractiveObject auf das zugrunde liegende native Menü.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>component</apiItemName><apiType value="flash.display:InteractiveObject"/></apiParam></apiOperationDef><apiDesc>
      Setzt das Kontextmenü des InteractiveObject auf das zugrunde liegende native Menü.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:unsetContextMenu"><apiName>unsetContextMenu</apiName><shortdesc>
      Macht das Setzen des Kontextmenüs des InteractiveObject auf das zugrunde liegende native Menü rückgängig.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>component</apiItemName><apiType value="flash.display:InteractiveObject"/></apiParam></apiOperationDef><apiDesc>
      Macht das Setzen des Kontextmenüs des InteractiveObject auf das zugrunde liegende native Menü rückgängig.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateNow"><apiName>validateNow</apiName><shortdesc>
      Die Eigenschaften und das Layout des Objekts werden geprüft und aktualisiert. Das Objekt wird ggf. neu erstellt.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Die Eigenschaften und das Layout des Objekts werden geprüft und aktualisiert. Das Objekt wird ggf. neu erstellt.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateSize"><apiName>validateSize</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FlexNativeMenu:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      Das Delegatenobjekt, welches die automatisierungsbezogene Funktionalität verarbeitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Das Delegatenobjekt, welches die automatisierungsbezogene Funktionalität verarbeitet.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationName:get"><apiName>automationName</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationTabularData:get"><apiName>automationTabularData</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationValue:get"><apiName>automationValue</apiName><shortdesc conref="mx.automation.IAutomationObject#automationValue">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.automation.IAutomationObject#automationValue">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      Das Objekt, das auf die Daten im Datenprovider zugreift und diese bearbeitet.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.controls.menuClasses:IMenuDataDescriptor"/></apiValueDef><apiDesc>
      Das Objekt, das auf die Daten im Datenprovider zugreift und diese bearbeitet. Das FlexNativeMenu-Steuerelement fragt den Datendeskriptor ab, um Informationen zu seinen Daten zu erhalten Diese Daten werden dann für die Analyse und das Verschieben der Datenquelle verwendet. Der für die FlexNativeMenu festgelegte Datendeskriptor wird für alle untergeordneten Menüs und Untermenüs verwendet.
     
      <p>Wenn diese Eigenschaft in MXML als Attribut festgelegt wird, müssen Sie einen Verweis auf den Datendeskriptor verwenden, nicht den Stringnamen des Deskriptors. Verwenden Sie zum Festlegen der Eigenschaft das folgende Format:</p>
     
     <pre>&lt;mx:FlexNativeMenu id="flexNativeMenu" dataDescriptor="{new MyCustomDataDescriptor()}"/></pre>
     
      <p>Alternativ dazu können Sie die Eigenschaft in MXML als verschachteltes Unter-Tag festlegen, wie im folgenden Beispiel gezeigt wird:</p>
     
      <pre>&lt;mx:FlexNativeMenu>
      &lt;mx:dataDescriptor>
         &lt;myCustomDataDescriptor>
      &lt;/mx:dataDescriptor>
      ...</pre>
     
      <p>Der Standardwert ist eine interne Instanz der DefaultDataDescriptor-Klasse.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Die Hierarchie der Objekte, die verwendet werden, um die Struktur der Menüelemente in NativeMenu festzulegen.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      Die Hierarchie der Objekte, die verwendet werden, um die Struktur der Menüelemente in NativeMenu festzulegen. Individuelle Datenobjekte legen Menüelemente fest und Elemente mit untergeordneten Elementen werden zu Menüs und Untermenüs
     
      <p>Das FlexNativeMenu-Steuerelement verwendet das Quelldatenobjekt wie folgt:</p>
     
      <ul>
        <li>Ein String, der gültigen XML-Text enthält, wird in ein XML-Objekt konvertiert.</li>
        <li>Ein XMLNode wird in ein XML-Objekt konvertiert.</li>
        <li>Eine XMLList wird in eine XMLListCollection konvertiert.</li>
        <li>Alle Objekte, die die ICollectionView-Schnittstelle implementieren, werden in ICollectionView umgewandelt.</li>
        <li>Ein Array wird in eine ArrayCollection konvertiert.</li>
        <li>Andere Objekttypen werden in ein Array eingefügt, wobei das Objekt den einzigen Eintrag darstellt.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:hasRoot:get"><apiName>hasRoot</apiName><shortdesc conref="mx.controls.Menu#hasRoot">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.Menu#hasRoot">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:initialized:get"><apiName>initialized</apiName><shortdesc conref="mx.core.UIComponent#initialized">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#initialized">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:keyEquivalentField:get"><apiName>keyEquivalentField</apiName><shortdesc>
      Der Name des Felds im Datenprovider, das den Tastaturbefehl für jedes Menüelement ermittelt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"keyEquivalent"
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Name des Felds im Datenprovider, das den Tastaturbefehl für jedes Menüelement ermittelt. Der Wertsatz wird in der Keyboard-Klasse definiert, in den <codeph>KEYNAME_XXXX</codeph>-Konstanten. Beispiel: Suchen Sie in der Liste den Wert für Steuerungszeichen wie Home, Insert usw.
     
      <p>Das Festlegen der <codeph>keyEquivalentFunction</codeph>-Eigenschaft führt dazu, dass diese Eigenschaft ignoriert wird.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.ui.Keyboard.xml"><linktext>flash.ui.Keyboard</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:keyEquivalentFunction:get"><apiName>keyEquivalentFunction</apiName><shortdesc>
      Die Funktion, die den Tastaturbefehl für jedes Menüelement ermittelt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Funktion, die den Tastaturbefehl für jedes Menüelement ermittelt. Wenn diese Eigenschaft fehlt, verwendet Flex den durch die <codeph>keyEquivalentField</codeph>-Eigenschaft festgelegten Inhalt des Felds oder des Attributs. Wenn Sie diese Eigenschaft festlegen, ignoriert Flex Werte der <codeph>keyEquivalentField</codeph>-Eigenschaft.
     
      <p>Die <codeph>keyEquivalentFunction</codeph>-Eigenschaft eignet sich gut für Formatierung, Lokalisierung und Plattformunabhängigkeit.</p>
     
      <p>Die Tastaturbefehlsfunktion muss ein einzelnes Argument aufnehmen, welches das Element im Datenprovider ist, und muss einen String zurückgeben.</p>
     
      <pre><codeph>myKeyEquivalentFunction(item:Object):String</codeph></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.ui.Keyboard.xml"><linktext>flash.ui.Keyboard</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:keyEquivalentModifiersFunction:get"><apiName>keyEquivalentModifiersFunction</apiName><shortdesc>
      Die Funktion, die den Tastaturbefehlsmodifizierer für jedes Menüelement ermittelt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      Die Funktion, die den Tastaturbefehlsmodifizierer für jedes Menüelement ermittelt. Wenn diese Eigenschaft fehlt, legt Flex seine eigene Standardfunktion zum Ermitteln des Arrays an Modifizierern fest, indem in den Datenprovider-Daten nach folgenden (Booleschen) Feldern gesucht wird: <codeph>altKey</codeph>, <codeph>commandKey</codeph>, <codeph>controlKey</codeph> und <codeph>shiftKey</codeph>.
     
      <p>Die <codeph>keyEquivalentModifiersFunction</codeph>-Eigenschaft eignet sich zur Verarbeitung der Formatierungs-, Lokalisierungs- und Plattformunabhängigkeit.</p>
     
      <p>Die Tastaturbefehlsmodifiziererfunktion muss ein einzelnes Argument aufnehmen, welches das Element im Datenprovider ist, und muss einen Array von Modifiziertastennamen zurückgeben.</p>
     
      <pre><codeph>myKeyEquivalentModifiersFunction(item:Object):Array</codeph></pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:labelField:get"><apiName>labelField</apiName><shortdesc>
      Der Name des Felds im Datenprovider, der den für die Menüelemente anzuzeigenden Text bestimmt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
     </apiDefaultValue></apiValueDef><apiDesc>
      Der Name des Felds im Datenprovider, der den für die Menüelemente anzuzeigenden Text bestimmt. Wenn der Datenprovider ein Array von Strings ist, verwendet Flex die Stringwerte als Beschriftung. Wenn der Datenprovider ein E4X-XML-Objekt ist, muss diese Eigenschaft ausdrücklich gesetzt werden. Beispiel: Wenn jedes XML-Element in einem E4X-XML-Objekt ein „label“-Attribut beinhaltet, das den anzuzeigenden Text für jedes Menüelement enthält, legen Sie das labelField als <codeph>"@label"</codeph> fest.
     
      <p>Bei einer Beschriftung können Sie das als Indexposition des Zugriffszeichens zu verwendende Zeichen durch Voranstellen eines Unterstrichs festlegen. Beispiel: Ein Beschriftungswert <codeph>"C_ut"</codeph> setzt die Indexposition des Zugriffszeichens auf „1“. Nur der erste vorhandene Unterstrich wird für diesen Zweck verwendet. Um ein tatsächliches Unterstrichzeichen in der Beschriftung anzuzeigen, können Sie zwei Unterstriche verwenden. Beispiel: Der Beschriftungswert <codeph>"C__u_t"</codeph> würde zu einem Menüelement mit der Beschriftung „C_ut“ und der Indexposition „3“ des Zugriffszeichens „t“ führen. Wenn das von der <codeph>mnemonicIndexField</codeph>-Eigenschaft definierte Feld vorhanden ist und auf einen Wert größer 0 gesetzt wurde, hat dieser Wert Vorrang vor allen für den Unterstrich angegebenen Indexpositionen des Zugriffszeichens.</p>
     
      <p>Das Festlegen der <codeph>labelFunction</codeph>-Eigenschaft führt dazu, dass diese Eigenschaft ignoriert wird.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Die Funktion, die den für die Menüelemente anzuzeigenden Text bestimmt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      Die Funktion, die den für die Menüelemente anzuzeigenden Text bestimmt. Die Beschriftungsfunktion muss das passende Feld bzw. die passenden Felder im Datenprovider finden und einen anzuzeigenden String zurückgeben.
     
      <p>Wenn diese Eigenschaft fehlt, verwendet Flex die Inhalte des durch die <codeph>labelField</codeph>-Eigenschaft festgelegten Felds oder Attributs. Wenn diese Eigenschaft festgelegt wird, ignoriert Flex die <codeph>labelField</codeph>-Eigenschaftswerte.</p>
     
      <p>Die <codeph>labelFunction</codeph>-Eigenschaft kann bei der Verarbeitung der Formatierungs-, Lokalisierungs- und Plattformunabhängigkeit hilfreich sein.</p>
     
      <p>Die Beschriftungsfunktion muss ein einziges Argument, nämlich das Element im Datenprovider, verwenden und muss einen String zurückgeben.</p>
     
      <pre><codeph>myLabelFunction(item:Object):String</codeph></pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:mnemonicIndexField:get"><apiName>mnemonicIndexField</apiName><shortdesc>
      Der Name des Felds im Datenprovider, der die Indexposition des Zugriffszeichens für jedes Menüelement ermittelt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"mnemonicIndex"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Name des Felds im Datenprovider, der die Indexposition des Zugriffszeichens für die Menüelemente ermittelt.
     
      <p>Wenn das durch diese Eigenschaft festgelegte Feld eine Zahl größer Null enthält, hat diese Indexposition des Zugriffszeichens Vorrang vor derjenigen, die durch einen Unterstrich in der Beschriftung festgelegt wurde.</p>
     
      <p>Das Festlegen der <codeph>mnemonicIndexFunction</codeph>-Eigenschaft führt dazu, dass die Eigenschaft ignoriert wird.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FlexNativeMenu/labelField"><linktext>labelField</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:mnemonicIndexFunction:get"><apiName>mnemonicIndexFunction</apiName><shortdesc>
      Die Funktion, die die Indexposition des Zugriffszeichens für die Menüelemente ermittelt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      Die Funktion, die die Indexposition des Zugriffszeichens für die Menüelemente ermittelt.
     
      <p>Wenn diese Eigenschaft fehlt, verwendet Flex den von der <codeph>mnemonicIndexField</codeph>-Eigenschaft festgelegten Inhalt des Felds oder des Attributs. Wenn diese Eigenschaft festgelegt wird, ignoriert Flex die <codeph>mnemonicIndexField</codeph>-Eigenschaftswerte.</p>
     
      <p>Wenn diese Eigenschaft definiert ist und die Funktion für ein Datenelement eine Zahl größer null zurückgibt, hat die zurückgegebene Indexposition des Zugriffszeichens Vorrang vor derjenigen, die durch einen Unterstrich in der Beschriftung festgelegt wurde</p>
     
      <p>Die <codeph>mnemonicIndexFunction</codeph>-Eigenschaft eignet sich zur Verarbeitung der Formatierungs-, Lokalisierungs- und Plattformunabhängigkeit.</p>
     
      <p>Die Indexposition des Zugriffszeichens muss ein einzelnes Argument, nämlich das Element im Datenprovider, verwenden und ein int-Objekt zurückgeben.</p>
     
      <pre><codeph>myMnemonicIndexFunction(item:Object):int</codeph></pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:nativeMenu:get"><apiName>nativeMenu</apiName><shortdesc>
       Gibt das von diesem Objekt verwaltete flash.display.NativeMenu oder null zurück, wenn kein Objekt vorhanden ist.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:NativeMenu"/></apiValueDef><apiDesc>
       Gibt das von diesem Objekt verwaltete flash.display.NativeMenu oder null zurück, wenn kein Objekt vorhanden ist. Änderungen, die direkt an der zugrunde liegenden NativeMenu-Instanz vorgenommen wurden, gehen möglicherweise verloren, wenn Änderungen am Menü oder dem zugrunde liegenden Datenprovider vorgenommen werden.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UIComponent#nestLevel">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UIComponent#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:numAutomationChildren:get"><apiName>numAutomationChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc conref="mx.core.UIComponent#processedDescriptors">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#processedDescriptors">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:showInAutomationHierarchy:get"><apiName>showInAutomationHierarchy</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      Ein Boolesches Flag, das festlegt, ob der Stammknoten des Datenproviders angezeigt wird.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Boolesches Flag, das festlegt, ob der Stammknoten des Datenproviders angezeigt wird.
     
      <p>Wenn der Datenprovider über einen Stammknoten verfügt und die <codeph>showRoot</codeph>-Eigenschaft auf <codeph>false</codeph> gesetzt ist, entsprechen die vom FlexNativeMenu-Steuerelement angezeigten Top-Level-Menüelemente den dem Stammknoten unmittelbar untergeordneten Elementen.</p>
     
      <p>Dieses Flag hat keinen Effekt, wenn ein Datenprovider ohne Stammknoten verwendet wird, z. B. List oder Array.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FlexNativeMenu/hasRoot"><linktext>hasRoot</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Flag, das ermittelt, ob ein Objekt alle drei Phasen der Layoutüberprüfung (vorausgesetzt, dass sie erforderlich waren) passiert hat.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Flag, das ermittelt, ob ein Objekt alle drei Phasen der Layoutvalidierung (vorausgesetzt, dass sie erforderlich waren) passiert hat.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemHistoryButton"><apiName>FileSystemHistoryButton</apiName><shortdesc>
  Das FileSystemHistoryButton-Steuerelement legt ein einzelnes Steuerelement mit zwei Schaltflächen fest: eine Hauptschaltfläche links und eine sekundäre Schaltfläche rechts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemHistoryButton&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemHistoryButton
    <strong>Properties</strong>
    dataProvider="<i>undefined</i>"
 
    <strong>Events</strong>
    itemClick="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:PopUpButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das FileSystemHistoryButton-Steuerelement legt ein einzelnes Steuerelement mit zwei Schaltflächen fest: eine Hauptschaltfläche links und eine sekundäre Schaltfläche rechts.
 
  <p>Die Hauptschaltfläche kann mit einem Beschriftungstext, einem Symbol oder beidem versehen sein. Durch Klicken auf die Hauptschaltfläche wird ein <codeph>click</codeph>-Ereignis ausgelöst.</p>
 
  <p>Durch Klicken auf den sekundäre (rechte) Schaltfläche klappt ein Dropdownmenü auf, das durch die <codeph>dataProvider</codeph>-Eigenschaft gefüllt wird. Wenn der Benutzer ein Element aus dem Dropdownmenü wählt, löst das Steuerelement ein <codeph>itemClick</codeph>-Ereignis aus.</p>
 
  <p>Üblicherweise werden zwei FileSystemHistoryButtons mit einer FileSystemList oder einem FileSystemDataGrid zur Implementierung der „Zurück“- oder „Weiter“-Steuerelemente verwendet, mit deren Hilfe Benutzer im Navigationsverlauf der FileSystemList oder des FileSystemDataGrid weiter oder zurück navigieren können. Um die <codeph>dataProvider</codeph>-Eigenschaft eines FileSystemHistoryButton-Steuerelements zu füllen, verwenden Sie Datenbindung, um die <codeph>dataProvider</codeph>-Eigenschaft des Steuerelements entweder auf die <codeph>backHistory</codeph> oder <codeph>forwardHistory</codeph>-Eigenschaft der FileSystemList oder des FileSystemDataGrid festzulegen. Zum Aktivieren oder Deaktivieren binden sie seine <codeph>enabled</codeph>-Eigenschaft entweder an die <codeph>canNavigateBack</codeph>- oder die <codeph>canNavigateForward</codeph>-Eigenschaft des FileSystemList- oder FileSystemDataGrid-Steuerelements. Wenn Sie zum Festlegen dieser Eigenschaften Datenbindung verwenden, aktualisiert sie Flex automatisch, wenn der Benutzer innerhalb des FileSystemList- oder FileSystemDataGrid-Steuerelements navigiert.</p>
 
  <p>Die Schaltfläche löst keine Navigation ohne Benutzerinteraktion aus. Damit die Schaltflächen funktionieren, müssen <codeph>click</codeph>- und <codeph>itemClick</codeph>-Eigenschaften geschrieben werden. Zur Navigation des Steuerelements ruft der Code üblicherweise die <codeph>NavigateBack()</codeph>- oder die <codeph>navigateForward()</codeph>-Methode des FileSystemList- oder FileSystemDataGrid-Steuerelements auf. Bei <codeph>click</codeph>-Ereignissen muss kein Argument an diese Methoden übergeben werden. Bei <codeph>itemClick</codeph>-Ereignissen ist <codeph>event.index</codeph> zu übergeben.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#FileSystemList"><linktext>mx.controls.FileSystemList</linktext></link><link href="mx.controls.xml#FileSystemDataGrid"><linktext>mx.controls.FileSystemDataGrid</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemHistoryButton_mx.events.MenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Wird ausgelöst, wenn ein Benutzer ein Element in einem Popupmenü auswählt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ein Benutzer ein Element in einem Popupmenü auswählt.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemHistoryButton:FileSystemHistoryButton"><apiName>FileSystemHistoryButton</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:FileSystemHistoryButton:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Der Datenprovider des FileSystemHistoryButton-Steuerelements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Der Datenprovider des FileSystemHistoryButton-Steuerelements. Dies sollte eine Sammlung von File-Objekten sein, die Ordnerspeicherorte enthält, üblicherweise die <codeph>backHistory</codeph>- oder <codeph>forwardHistory</codeph>-Eigenschaft eines FileSystemList- oder FileSystemDataGrid-Steuerelements.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemComboBox"><apiName>FileSystemComboBox</apiName><shortdesc>
  Das FileSystemComboBox-Steuerelement legt ein Kombinationsfeldsteuerelement für die Navigation nach oben in die übergeordneten Ordner, ausgehend von einem festgelegten Ordner im Dateisystem, fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="editableUpSkin"/><Exclude kind="style" name="editableOverSkin"/><Exclude kind="style" name="editableDownSkin"/><Exclude kind="style" name="editableDisabledSkin"/><Exclude kind="property" name="editable"/><styles><style format="EmbeddedFile" inherit="no" name="directoryIcon" owner="mx.controls:FileSystemComboBox" playerVersion="AIR1.1" type="Class">
<description>
  Legt das Symbol fest, das den Ordner anzeigt. Das Standardsymbol liegt in der Datei „Assets.swf“ In MXML können Sie die folgende Syntax verwenden, um diese Eigenschaft festzulegen: <codeph>directoryIcon="@Embed(source='directoryIcon.jpg');"</codeph>
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="computerIcon" owner="mx.controls:FileSystemComboBox" playerVersion="AIR1.1" type="Class">
<description>
  Legt das Symbol fest, das den Stammordner des Computers anzeigt. Es gibt kein Standardsymbol. In MXML können Sie die folgende Syntax verwenden, um diese Eigenschaft festzulegen: <codeph>computerIcon="@Embed(source='computerIcon.jpg');"</codeph>
 
  </description>
<default>null
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemComboBox&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemComboBox
    <strong>Properties</strong>
    directory="<i>null</i>"
    indent="8"
    showIcons="true"
 
    <strong>Styles</strong>
    computerIcon="<i>null</i>"
    directoryIcon="<i>TreeNodeIcon</i>"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:ComboBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  Das FileSystemComboBox-Steuerelement legt ein Kombinationsfeldsteuerelement für die Navigation nach oben in die übergeordneten Ordner, ausgehend von einem festgelegten Ordner im Dateisystem, fest. Dieses Steuerelement wird häufig mit den FileSystemList- und FileSystemTree-Steuerelementen verwendet, um den durch diese angezeigten Ordner zu ändern.
 
  <p>Anders als beim Standard-ComboBox-Steuerelement setzen Sie zum Füllen der <codeph>dataProvider</codeph>-Eigenschaft des FileSystemComboBox-Steuerelements die <codeph>directory</codeph>-Eigenschaft. Dieses Steuerelement setzt dann automatisch die <codeph>dataProvider</codeph>-Eigenschaft auf eine ArrayCollection von File-Objekten, welche alle übergeordneten Ordner des festgelegten Ordners enthält, beginnend mit der <codeph>COMPUTER</codeph>-Datei und endend mit dem festgelegten Ordner.</p>
 
  <p>Bei Auswahl eines Eintrags aus der Dropdownliste löst dieses Steuerelement ein <codeph>change</codeph>-Ereignis aus. Nach dem Auslösen des Ereignisses enthalten der Datenprovider und folglich auch die Dropdownliste die übergeordneten Elemente des festgelegten Ordners.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link><link href="mx.controls.xml#FileSystemList"><linktext>mx.controls.FileSystemList</linktext></link><link href="mx.controls.xml#FileSystemTree"><linktext>mx.controls.FileSystemTree</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemComboBox_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  Wird ausgelöst, wenn sich der ausgewählte Ordner, der von diesem Steuerelement angezeigt wird, aus irgendeinem Grund ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich der ausgewählte Ordner, der von diesem Steuerelement angezeigt wird, aus irgendeinem Grund ändert.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemComboBox:FileSystemComboBox"><apiName>FileSystemComboBox</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:FileSystemComboBox:COMPUTER"><apiName>COMPUTER</apiName><shortdesc>
      Eine Konstante, die als Wert für die directory-Eigenschaft verwendet werden kann, die einen Pseudo-Top-Level-Ordner namens „Computer“ repräsentiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc>
      Eine Konstante, die als Wert für die <codeph>directory</codeph>-Eigenschaft verwendet werden kann, die einen Pseudo-Top-Level-Ordner namens „Computer“ repräsentiert. Dieser Pseudoordner enthält die Stammordner (beispielsweise C:\ und D:\ auf Windows oder / auf Macintosh).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemComboBox:directory:get"><apiName>directory</apiName><shortdesc>
      Ein File-Objekt, welches den Ordner repräsentiert, dessen übergeordnete Ordner von diesem Steuerelement angezeigt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein File-Objekt, welches den Ordner repräsentiert, dessen übergeordnete Ordner von diesem Steuerelement angezeigt werden sollen. Das Steuerelement zeigt jeden übergeordneten Ordner als eigenen Eintrag in der Dropdownliste an.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemComboBox:indent:get"><apiName>indent</apiName><shortdesc>
      Die Anzahl Pixel, um welche die Einträge der Dropdownliste eingerückt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>8
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die Anzahl Pixel, um welche die Einträge der Dropdownliste eingerückt werden sollen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemComboBox:showIcons:get"><apiName>showIcons</apiName><shortdesc>
      Ein Flag, welches festlegt, ob in der Dropdownliste Symbole vor den Ordnernamen angezeigt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Flag, welches festlegt, ob in der Dropdownliste Symbole vor den Ordnernamen angezeigt werden sollen.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemEnumerationMode"><apiName>FileSystemEnumerationMode</apiName><shortdesc>
  Die FileSystemEnumerationMode-Klasse definiert die Werte der Konstanten für die enumerationMode-Eigenschaft der Klassen FileSystemList, FileSystemDataGrid und FileSystemTree.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die FileSystemEnumerationMode-Klasse definiert die Werte der Konstanten für die <codeph>enumerationMode</codeph>-Eigenschaft der Klassen FileSystemList, FileSystemDataGrid und FileSystemTree.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#FileSystemList/enumerationMode"><linktext>mx.controls.FileSystemList.enumerationMode</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/enumerationMode"><linktext>mx.controls.FileSystemDataGrid.enumerationMode.</linktext></link><link href="mx.controls.xml#FileSystemTree/enumerationMode"><linktext>mx.controls.FileSystemTree.enumerationMode</linktext></link></related-links><apiValue id="mx.controls:FileSystemEnumerationMode:DIRECTORIES_FIRST"><apiName>DIRECTORIES_FIRST</apiName><shortdesc>
      Legt fest, dass zuerst Ordner und dann Dateien angezeigt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoriesFirst</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt fest, dass zuerst Ordner und dann Dateien angezeigt werden sollen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:DIRECTORIES_ONLY"><apiName>DIRECTORIES_ONLY</apiName><shortdesc>
      Legt fest, dass Ordner, aber keine Dateien angezeigt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoriesOnly</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt fest, dass Ordner, aber keine Dateien angezeigt werden sollen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:FILES_AND_DIRECTORIES"><apiName>FILES_AND_DIRECTORIES</apiName><shortdesc>
      Legt fest, dass sowohl Dateien als auch Ordner in beliebiger Reihenfolge angezeigt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>filesAndDirectories</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt fest, dass sowohl Dateien als auch Ordner in beliebiger Reihenfolge angezeigt werden sollen.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:FILES_FIRST"><apiName>FILES_FIRST</apiName><shortdesc>
      Legt fest, dass zuerst Dateien und dann Ordner angezeigt werden sollen</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>filesFirst</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt fest, dass zuerst Dateien und dann Ordner angezeigt werden sollen
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:FILES_ONLY"><apiName>FILES_ONLY</apiName><shortdesc>
      Legt fest, dass Dateien, aber keine Ordner angezeigt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>filesOnly</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Legt fest, dass Dateien, aber keine Ordner angezeigt werden sollen.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>