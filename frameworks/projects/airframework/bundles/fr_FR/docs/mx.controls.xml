<?xml version="1.0"?>
<apiPackage id="mx.controls"><apiName>mx.controls</apiName><apiDetail/><apiClassifier id="mx.controls:FileSystemDataGrid"><apiName>FileSystemDataGrid</apiName><shortdesc>
  Le contrôle FileSystemDataGrid permet d’afficher le contenu du répertoire d’un système de fichiers unique sous forme de grille de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="EmbeddedFile" inherit="no" name="fileIcon" owner="mx.controls:FileSystemDataGrid" playerVersion="AIR1.1" type="Class">
<description>
  Spécifie l’icône indiquant un fichier. L’icône par défaut se trouve dans le fichier Assets.swf. Dans MXML, vous pouvez utiliser la syntaxe suivante pour définir cette propriété : <codeph>fileIcon="@Embed(source=’fileIcon.jpg’);"</codeph>
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="directoryIcon" owner="mx.controls:FileSystemDataGrid" playerVersion="AIR1.1" type="Class">
<description>
  Spécifie l’icône indiquant un répertoire. L’icône par défaut se trouve dans le fichier Assets.swf. Dans MXML, vous pouvez utiliser la syntaxe suivante pour définir cette propriété : <codeph>directoryIcon="@Embed(source=’directoryIcon.jpg’);"</codeph>
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemDataGrid&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemDataGrid
    <strong>Properties</strong>
    dateFormatString=""
    directory="<i>null</i>"
    enumerationMode="directoriesFirst"
    extensions="<i>null</i>"
    filterFunction="<i>null</i>"
    nameCompareFunction="<i>null</i>"
    selectedPath="<i>null</i>"
    selectedPaths="<i>null</i>"
    showExtensions="true"
    showHidden="false"
    showIcons="true"
 
    <strong>Styles</strong>
    directoryIcon="<i>TreeNodeIcon</i>"
    fileIcon="<i>TreeNodeIcon</i>"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
    directoryChanging="<i>No default</i>"
    fileChoose="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:DataGrid</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle FileSystemDataGrid permet d’afficher le contenu du répertoire d’un système de fichiers unique sous forme de grille de données.
 
  <p>Les informations affichées pour chaque élément consistent en son nom (avec une icône générique facultative), son type, sa taille, sa date de création et sa date de modification. Pour cela, le contrôle FileSystemDataGrid crée automatiquement cinq colonnes (occurrences DataGridColumn) -- <codeph>nameColumn</codeph>, <codeph>typeColumn</codeph>, <codeph>sizeColumn</codeph>, <codeph>creationDateColumn</codeph> et <codeph>modificationDateColumn</codeph> -- et définit la propriété <codeph>columns</codeph> sur un tableau de cinq occurrences. Chaque occurrence de colonne est automatiquement configurée pour être dotée d’une fonction <codeph>labelFunction</codeph>, <codeph>sortCompareFunction</codeph>, etc. appropriée. Si vous ne voulez pas des cinq colonnes ou si vous souhaitez en changer l’ordre, redéfinissez la propriété <codeph>columns</codeph>. Pour personnaliser une colonne, par exemple pour changer sa fonction <codeph>labelFunction</codeph>, il vous suffit de réassigner cette propriété sur l’objet de colonne qui convient.</p>
 
  <p>Pour modifier les données affichées, définissez la propriété <codeph>directory</codeph> au lieu d’utiliser la propriété <codeph>dataProvider</codeph>. Le contrôle renseigne ensuite automatiquement la propriété <codeph>dataProvider</codeph> en énumérant le contenu de ce répertoire. Il est déconseillé de définir la propriété <codeph>dataProvider</codeph> soi-même.</p>
 
  <p>Définissez la propriété <codeph>directory</codeph> sur une occurrence File, comme le montre l’exemple suivant :</p>
  <pre>&lt;mx:FileSystemDataGrid directory="{File.desktopDirectory}"/></pre>
 
  <p>Vous pouvez définir la propriété <codeph>enumerationMode</codeph> pour spécifier si les fichiers, les sous-répertoires ou les deux doivent être affichés. Trois méthodes permettent d’afficher les deux: les répertoires en premier, les fichiers en premier ou mélangés.</p>
 
  <p>Vous pouvez définir la propriété <codeph>extensions</codeph> de façon à filtrer les éléments affichés de sorte que seuls les fichiers dotés d’extensions précises apparaissent. La propriété <codeph>showHidden</codeph> détermine si le contrôle doit afficher les fichiers et sous-répertoires que le système d’exploitation masque généralement. Vous pouvez spécifier une propriété <codeph>filterFunction</codeph> supplémentaire pour appliquer un filtrage supplémentaire et une propriété <codeph>nameCompareFunction</codeph> pour effectuer un tri personnalisé.</p>
 
  <p>Comme AIR ne prend pas en charge les notifications du système de fichiers, ce contrôle n’est pas automatiquement actualisé si un fichier ou un sous-répertoire est créé, supprimé, déplacé ou renommé. En d’autres termes, il est possible qu’il affiche une vue obsolète du système de fichiers. Vous pouvez toutefois appeler la méthode <codeph>refresh()</codeph> pour réénumérer la propriété <codeph>directory</codeph> actuelle. Vous pouvez, par exemple, choisir d’effectuer cette opération lorsque vous avez réalisé une opération de fichiers dont vous savez qu’elle entraîne une vue obsolète du contrôle ou lorsque l’utilisateur désactive et réactive votre application.</p>
 
  <p>Vous pouvez utiliser la propriété <codeph>showIcons</codeph> pour afficher ou masquer les icônes et la propriété <codeph>showExtensions</codeph> pour afficher ou masquer les extensions de fichiers.</p>
 
  <p>Le contrôle propose deux méthodes, <codeph>findItem()</codeph> et <codeph>findIndex()</codeph>, qui permettent de rechercher les fichiers et sous-répertoires affichés afin de trouver celui doté d’une chaîne <codeph>nativePath</codeph> donnée.</p>
 
  <p>Deux propriétés, <codeph>selectedPath</codeph> et <codeph>selectedPaths</codeph>, fonctionnent de la même façon que <codeph>selectedItem</codeph> et <codeph>selectedItems</codeph> ou <codeph>selectedIndex</codeph> et <codeph>selectedIndices</codeph>, mais permettent de spécifier la sélection via les chaînes <codeph>nativePath</codeph>. Elles sont très utiles si vous devez afficher un répertoire dont certains éléments sont présélectionnés, car dans ce cas, vous ne possédez pas encore les éléments File qui seront créés par le contrôle lorsqu’il énumérera le répertoire et vous ne connaissez pas leurs futurs index.</p>
 
  <p>Le contrôle permet d’accéder à d’autres répertoires à l’aide de la souris ou du clavier. L’utilisateur peut essayer de modifier le répertoire en double-cliquant dessus, en appuyant sur la touche Entrée ou sur la touche Ctrl et la flèche vers le bas lorsqu’un sous-répertoire est sélectionné, en appuyant sur la touche Ctrl et la flèche vers le haut lorsque le contrôle n’affiche pas le répertoire de l’ordinateur (COMPUTER), en appuyant sur la touche Ctrl et la flèche gauche lorsqu’il existe un répertoire précédent vers lequel revenir ou en appuyant sur la touche Ctrl et la flèche droite lorsqu’il existe un répertoire suivant auquel accéder. Si l’utilisateur essaie de modifier le répertoire en cours d’affichage, le contrôle distribue un événement <codeph>directoryChanging</codeph> pouvant être annulé. Si vous n’annulez pas cet événement en appelant la méthode <codeph>event.preventDefault()</codeph>, le contrôle affiche le contenu du nouveau répertoire et la propriété <codeph>directory</codeph> change. Dès que la propriété <codeph>directory</codeph> change, quelle qu’en soit la raison, les contrôles distribuent un événement <codeph>directoryChange</codeph> pour vous avertir.</p>
 
  <p>Afin de prendre en charge les contrôles « Up » et « Down », la liste FileSystemList est dotée des propriétés <codeph>canNavigateUp</codeph> et <codeph>canNavigateDown</codeph> et des méthodes <codeph>navigateUp()</codeph> et <codeph>navigateDown()</codeph>. La méthode <codeph>navigateTo()</codeph> permet également d’accéder à un répertoire arbitraire.</p>
 
  <p>Le contrôle effectue le suivi des répertoires auxquels l’utilisateur a accédé afin de faciliter la prise en charge des contrôles « Back » et « Forward ». Pour plus d’informations, voir les propriétés <codeph>backHistory</codeph>, <codeph>forwardHistory</codeph>, <codeph>canNavigateBack</codeph> et <codeph>canNavigateForward</codeph>, ainsi que les méthodes <codeph>navigateBack()</codeph> et <codeph>navigateForward()</codeph>.</p>
 
  <p>Remarque : les icônes affichées par chaque élément sont des icônes de fichier et répertoire génériques que vous pouvez définir à l’aide des styles <codeph>fileIcon</codeph> et <codeph>directoryIcon</codeph>. Les contrôles basés sur les listes de Flex prennent actuellement en charge l’affichage des icônes imbriquées uniquement et non des icônes lues au moment de l’exécution. Par conséquent, les icônes du système de fichiers qui sont affichées dans le système d’exploitation n’apparaissent pas dans un contrôle FileSystemDataGrid, même si elles sont accessibles dans AIR via la propriété <codeph>icon</codeph> d’une occurrence File.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemDataGrid_mx.events.FileEvent.FILE_CHOOSE_fileChoose"><apiName>fileChoose</apiName><shortdesc>
  Distribué lorsque l’utilisateur choisit un fichier en double-cliquant dessus ou en le sélectionnant et en appuyant sur la touche Entrée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.FILE_CHOOSE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur choisit un fichier en double-cliquant dessus ou en le sélectionnant et en appuyant sur la touche Entrée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemDataGrid_mx.events.FileEvent.DIRECTORY_OPENING_directoryChanging"><apiName>directoryChanging</apiName><shortdesc>
  Distribué lorsque l’utilisateur essaie de changer le répertoire affiché par ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_OPENING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur essaie de changer le répertoire affiché par ce contrôle.
 
  <p>L’utilisateur peut essayer de modifier le répertoire en double-cliquant dessus, en appuyant sur la touche Entrée ou sur la touche Ctrl et la flèche vers le bas lorsqu’un sous-répertoire est sélectionné, en appuyant sur la touche Ctrl et la flèche vers le haut lorsque le contrôle n’affiche pas le répertoire de l’ordinateur (COMPUTER), en appuyant sur la touche Ctrl et la flèche gauche lorsqu’il existe un répertoire précédent dans la liste de l’historique vers lequel revenir ou en appuyant sur la touche Ctrl et la flèche droite lorsqu’il existe un répertoire suivant dans la liste de l’historique auquel accéder.</p>
 
  <p>Cet événement peut être annulé. Si vous appelez la méthode <codeph>event.preventDefault()</codeph>, le répertoire n’est pas modifié.</p>
 
  <p>Une fois la propriété <codeph>directory</codeph> modifiée et une fois que la propriété <codeph>dataProvider</codeph> contient des occurrences File des éléments du nouveau répertoire, l’événement <codeph>directoryChange</codeph> est distribué.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemDataGrid_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  Distribué lorsque le répertoire sélectionné affiché par ce contrôle change, pour une raison ou pour une autre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le répertoire sélectionné affiché par ce contrôle change, pour une raison ou pour une autre.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemDataGrid:FileSystemDataGrid"><apiName>FileSystemDataGrid</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FileSystemDataGrid:clear"><apiName>clear</apiName><shortdesc conref="mx.controls.FileSystemList#clear()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#clear()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:findIndex"><apiName>findIndex</apiName><shortdesc conref="mx.controls.FileSystemList#findIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>Index de base zéro ou valeur <codeph>-1</codeph> si aucun élément File n’a été trouvé avec le chemin spécifié.
     
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant la chaîne <codeph>nativePath</codeph> d’un élément File.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:findItem"><apiName>findItem</apiName><shortdesc conref="mx.controls.FileSystemList#findItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.filesystem:File"/><apiDesc>Occurrence File si une occurrence a été trouvée avec la chaîne <codeph>nativePath</codeph> spécifiée ou valeur <codeph>null</codeph> si aucune n’a été trouvée.
      
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant la chaîne <codeph>nativePath</codeph> d’un élément File.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateBack"><apiName>navigateBack</apiName><shortdesc>
      Change ce contrôle pour afficher le contenu d’un répertoire précédemment visité dans le tableau backHistory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Index du tableau <codeph>backHistory</codeph> auquel accéder. La valeur par défaut est 0, ce qui désigne le répertoire le plus proche en arrière.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Change ce contrôle pour afficher le contenu d’un répertoire précédemment visité dans le tableau <codeph>backHistory</codeph>.
     
      <p>Si le tableau <codeph>backHistory</codeph> est vide ou si vous spécifiez un index qui ne se trouve pas dans le tableau, cette méthode n’a aucun effet.</p>
     
      <p>Au retour de cette méthode, la propriété <codeph>directory</codeph> contient l’occurrence File du nouveau répertoire. La propriété <codeph>dataProvider</codeph> prend temporairement la valeur <codeph>null</codeph> jusqu’à ce que le nouveau répertoire soit énuméré. Après l’énumération, la propriété <codeph>dataProvider</codeph> contient un objet ArrayCollection d’occurrences File pour le contenu du nouveau répertoire.</p>
     
      <p>La liste de l’historique reste inchangée. Toutefois, l’index actuel qui se trouve à l’intérieur change, ce qui affecte les propriétés <codeph>backHistory</codeph> et <codeph>forwardHistory</codeph>. De nouvelles valeurs leur sont affectées au retour de cette méthode.</p>
     
      <p>L’exemple suivant montre comment utiliser cette méthode avec le contrôle FileSystemHistoryButton pour créer un bouton vers l’arrière :</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/canNavigateBack"><linktext>canNavigateBack</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateDown"><apiName>navigateDown</apiName><shortdesc>
      Change ce contrôle pour afficher le contenu du sous-répertoire sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Change ce contrôle pour afficher le contenu du sous-répertoire sélectionné.
     
      <p>Si aucun sous-répertoire n’est sélectionné, cette méthode n’a aucun effet.</p>
     
      <p>Au retour de cette méthode, la propriété <codeph>directory</codeph> contient l’occurrence File du nouveau répertoire. La propriété <codeph>dataProvider</codeph> prend temporairement la valeur <codeph>null</codeph> jusqu’à ce que le nouveau répertoire soit énuméré. Après l’énumération, la propriété <codeph>dataProvider</codeph> contient un objet ArrayCollection d’occurrences File pour le contenu du nouveau répertoire.</p>
     
      <p>L’exemple suivant montre comment utiliser cette méthode avec le contrôle Button pour créer un bouton d’ouverture :</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateDown"><linktext>canNavigateDown</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateForward"><apiName>navigateForward</apiName><shortdesc>
      Change ce contrôle pour afficher le contenu d’un répertoire précédemment visité dans le tableau forwardHistory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Index du tableau <codeph>forwardHistory</codeph> auquel accéder. La valeur par défaut est 0, ce qui désigne le répertoire le plus proche en avant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Change ce contrôle pour afficher le contenu d’un répertoire précédemment visité dans le tableau <codeph>forwardHistory</codeph>.
     
      <p>Si le tableau <codeph>forwardHistory</codeph> est vide ou si vous spécifiez un index qui ne se trouve pas dans le tableau, cette méthode n’a aucun effet.</p>
     
      <p>Au retour de cette méthode, la propriété <codeph>directory</codeph> contient l’occurrence File du nouveau répertoire. La propriété <codeph>dataProvider</codeph> prend temporairement la valeur <codeph>null</codeph> jusqu’à ce que le nouveau répertoire soit énuméré. Après l’énumération, la propriété <codeph>dataProvider</codeph> contient un objet ArrayCollection d’occurrences File pour le contenu du nouveau répertoire.</p>
     
      <p>La liste de l’historique reste inchangée. Toutefois, l’index actuel qui se trouve à l’intérieur change, ce qui affecte les propriétés <codeph>backHistory</codeph> et <codeph>forwardHistory</codeph>. De nouvelles valeurs leur sont affectées au retour de cette méthode.</p>
     
      <p>L’exemple suivant montre comment utiliser cette méthode avec le contrôle FileSystemHistoryButton pour créer un bouton vers l’avant :</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateForward"><linktext>canNavigateForward</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/forwardHistory"><linktext>forwardHistory</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateTo"><apiName>navigateTo</apiName><shortdesc conref="mx.controls.FileSystemList#navigateTo()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>directory</apiItemName><apiType value="flash.filesystem:File"/><apiDesc>Objet File représentant un fichier ou un répertoire.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#navigateTo()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateUp"><apiName>navigateUp</apiName><shortdesc>
      Change ce contrôle pour afficher le contenu du prochain répertoire en haut de la hiérarchie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Change ce contrôle pour afficher le contenu du prochain répertoire en haut de la hiérarchie.
     
      <p>Si ce contrôle affiche actuellement les répertoires racine (par exemple C: et D: sur Microsoft Windows), cette méthode n’a aucun effet.</p>
     
      <p>Au retour de cette méthode, la propriété <codeph>directory</codeph> contient l’occurrence File du nouveau répertoire. La propriété <codeph>dataProvider</codeph> prend temporairement la valeur <codeph>null</codeph> jusqu’à ce que le nouveau répertoire soit énuméré. Après l’énumération, la propriété <codeph>dataProvider</codeph> contient un objet ArrayCollection d’occurrences File pour le contenu du nouveau répertoire.</p>
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle Button pour créer un bouton vers le haut :</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateUp"><linktext>canNavigateUp</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:refresh"><apiName>refresh</apiName><shortdesc conref="mx.controls.FileSystemList#refresh()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#refresh()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FileSystemDataGrid:COMPUTER"><apiName>COMPUTER</apiName><shortdesc conref="mx.controls.FileSystemList#COMPUTER">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#COMPUTER">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:creationDateColumn"><apiName>creationDateColumn</apiName><shortdesc>
      Contrôle DataGridColumn représentant la colonne de création.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      Contrôle DataGridColumn représentant la colonne de création. Le contrôle FileSystemDataGrid crée automatiquement cette colonne.
     
      <p>Vous pouvez définir des propriétés comme <codeph>creationDateColumn.width</codeph> pour personnaliser cette colonne. Pour supprimer entièrement cette colonne ou pour changer l’ordre des colonnes, définissez la propriété <codeph>columns</codeph> sur un tableau comme <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:modificationDateColumn"><apiName>modificationDateColumn</apiName><shortdesc>
      Contrôle DataGridColumn représentant la colonne de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      Contrôle DataGridColumn représentant la colonne de modification. Le contrôle FileSystemDataGrid crée automatiquement cette colonne.
     
      <p>Vous pouvez définir des propriétés comme <codeph>modificationDateColumn.width</codeph> pour personnaliser cette colonne. Pour supprimer entièrement cette colonne ou pour changer l’ordre des colonnes, définissez la propriété <codeph>columns</codeph> sur un tableau comme <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:nameColumn"><apiName>nameColumn</apiName><shortdesc>
      Contrôle DataGridColumn représentant la colonne de nom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      Contrôle DataGridColumn représentant la colonne de nom. Le contrôle FileSystemDataGrid crée automatiquement cette colonne.
     
      <p>Vous pouvez définir des propriétés comme <codeph>nameColumn.width</codeph> pour personnaliser cette colonne. Pour supprimer entièrement cette colonne ou pour changer l’ordre des colonnes, définissez la propriété <codeph>columns</codeph> sur un tableau comme <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:sizeColumn"><apiName>sizeColumn</apiName><shortdesc>
      Contrôle DataGridColumn représentant la colonne de taille.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      Contrôle DataGridColumn représentant la colonne de taille. Le contrôle FileSystemDataGrid crée automatiquement cette colonne.
     
      <p>Vous pouvez définir des propriétés comme <codeph>sizeColumn.width</codeph> pour personnaliser cette colonne. Pour supprimer entièrement cette colonne ou pour changer l’ordre des colonnes, définissez la propriété <codeph>columns</codeph> sur un tableau comme <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:typeColumn"><apiName>typeColumn</apiName><shortdesc>
      Contrôle DataGridColumn représentant la colonne de type.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      Contrôle DataGridColumn représentant la colonne de type. Le contrôle FileSystemDataGrid crée automatiquement cette colonne.
     
      <p>Vous pouvez définir des propriétés comme <codeph>typeColumn.width</codeph> pour personnaliser cette colonne. Pour supprimer entièrement cette colonne ou pour changer l’ordre des colonnes, définissez la propriété <codeph>columns</codeph> sur un tableau comme <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:backHistory:get"><apiName>backHistory</apiName><shortdesc>
      Tableau d’objets File représentant les répertoires vers lesquels l’utilisateur peut revenir.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Tableau d’objets File représentant les répertoires vers lesquels l’utilisateur peut revenir.
     
      <p>Le premier élément du tableau est le prochain répertoire en arrière de la liste de l’historique. Le dernier élément est le répertoire le plus en arrière de la liste de l’historique.</p>
     
      <p>Ce tableau peut contenir un élément <codeph>null</codeph>, qui représente le répertoire non existant dont le contenu sont des répertoires racine comme C:\ et D:\ sur Microsoft Windows.</p>
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle FileSystemHistoryButton pour implémenter un bouton vers l’arrière :</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
         enabled="{fileSystemViewer.canNavigateBack}"
         dataProvider="{fileSystemViewer.backHistory}"
         click="fileSystemViewer.navigateBack();"
         itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateBack"><linktext>canNavigateBack</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/navigateBack()"><linktext>navigateBack()</linktext></link><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateBack:get"><apiName>canNavigateBack</apiName><shortdesc>
      Indicateur portant la valeur true si la liste de l’historique comporte au moins un répertoire vers lequel l’utilisateur peut revenir.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur portant la valeur <codeph>true</codeph> si la liste de l’historique comporte au moins un répertoire vers lequel l’utilisateur peut revenir.
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle FileSystemHistoryButton pour implémenter un bouton vers l’arrière :</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/navigateBack()"><linktext>navigateBack()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateDown:get"><apiName>canNavigateDown</apiName><shortdesc>
      Indicateur portant la valeur true si l’utilisateur peut accéder au bas d’un répertoire sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur portant la valeur <codeph>true</codeph> si l’utilisateur peut accéder au bas d’un répertoire sélectionné. Cet indicateur a la valeur <codeph>false</codeph> lorsqu’aucun élément n’est sélectionné ou lorsque l’élément sélectionné est un fichier au lieu d’un répertoire.
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle Button :</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/navigateDown()"><linktext>navigateDown()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateForward:get"><apiName>canNavigateForward</apiName><shortdesc>
      Indicateur portant la valeur true si la liste de l’historique comporte au moins un répertoire auquel l’utilisateur peut accéder vers l’avant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur portant la valeur <codeph>true</codeph> si la liste de l’historique comporte au moins un répertoire auquel l’utilisateur peut accéder vers l’avant.
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle FileSystemHistoryButton pour implémenter un bouton vers l’avant :</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/forwardHistory"><linktext>forwardHistory</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/navigateForward()"><linktext>navigateForward()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateUp:get"><apiName>canNavigateUp</apiName><shortdesc>
      Indicateur portant la valeur true si l’utilisateur peut remonter vers le répertoire parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur portant la valeur <codeph>true</codeph> si l’utilisateur peut remonter vers le répertoire parent. Cet indicateur a la valeur <codeph>false</codeph> uniquement lorsque ce contrôle affiche les répertoires racine comme C:\ and D:\ sur Microsoft Windows (dans ce cas, la propriété <codeph>directory</codeph> a la valeur <codeph>COMPUTER</codeph>).
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle Button :</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/navigateUp()"><linktext>navigateUp()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:dateFormatString:get"><apiName>dateFormatString</apiName><shortdesc>
      Chaîne indiquant la mise en forme des dates dans les colonnes de création et de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne indiquant la mise en forme des dates dans les colonnes de création et de modification. Définir cette propriété a pour effet de définir la propriété <codeph>formatString</codeph> d’un contrôle DateFormatter interne créé par ce contrôle.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.formatters.xml#DateFormatter/formatString"><linktext>mx.formatters.DateFormatter.formatString</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:directory:get"><apiName>directory</apiName><shortdesc conref="mx.controls.FileSystemList#directory">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#directory">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:enumerationMode:get"><apiName>enumerationMode</apiName><shortdesc conref="mx.controls.FileSystemList#enumerationMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FileSystemEnumerationMode.DIRECTORIES_FIRST
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#enumerationMode">
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemEnumerationMode"><linktext>mx.controls.FileSystemEnumerationMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:extensions:get"><apiName>extensions</apiName><shortdesc conref="mx.controls.FileSystemList#extensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#extensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:filterFunction:get"><apiName>filterFunction</apiName><shortdesc conref="mx.controls.FileSystemList#filterFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#filterFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:forwardHistory:get"><apiName>forwardHistory</apiName><shortdesc>
      Tableau d’objets File représentant les répertoires auxquels l’utilisateur peut accéder vers l’avant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
     </apiDefaultValue></apiValueDef><apiDesc>
      Tableau d’objets File représentant les répertoires auxquels l’utilisateur peut accéder vers l’avant.
     
      <p>Le premier élément du tableau est le prochain répertoire en avant de la liste de l’historique. Le dernier élément est le répertoire le plus en avant de la liste de l’historique.</p>
     
      <p>Ce tableau peut contenir un élément <codeph>null</codeph>, qui représente le répertoire non existant dont le contenu sont des répertoires racine comme C:\ et D:\ sur Microsoft Windows.</p>
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle FileSystemHistoryButton pour implémenter un bouton vers l’avant :</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:nameCompareFunction:get"><apiName>nameCompareFunction</apiName><shortdesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:selectedPath:get"><apiName>selectedPath</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPath">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPath">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:selectedPaths:get"><apiName>selectedPaths</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPaths">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPaths">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:showExtensions:get"><apiName>showExtensions</apiName><shortdesc conref="mx.controls.FileSystemList#showExtensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showExtensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:showHidden:get"><apiName>showHidden</apiName><shortdesc conref="mx.controls.FileSystemList#showHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:showIcons:get"><apiName>showIcons</apiName><shortdesc conref="mx.controls.FileSystemList#showIcons">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showIcons">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:sizeDisplayMode:get"><apiName>sizeDisplayMode</apiName><shortdesc>
      Chaîne spécifiant si la colonne de taille affiche la taille des fichiers en octets ou arrondis au kilo-octet supérieur le plus proche (un kilo-octet correspond à 1 024 octets).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne spécifiant si la colonne de taille affiche la taille des fichiers en octets ou arrondis au kilo-octet supérieur le plus proche (un kilo-octet correspond à 1 024 octets). Les valeurs possibles sont indiquées par la classe FileSystemSizeDisplayMode.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemSizeDisplayMode"><linktext>mx.controls.FileSystemSizeDisplayMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemTree"><apiName>FileSystemTree</apiName><shortdesc>
  Le contrôle FileSystemTree affiche le contenu du répertoire d’un système de fichiers sous forme d’arborescence.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemTree&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemTree
    <strong>Properties</strong>
    directory="<i>null</i>"
    enumerationMode="directoriesFirst"
    extensions="<i>null</i>"
    filterFunction="<i>null</i>"
    nameCompareFunction="<i>null</i>"
    openPaths="<i>null</i>"
    selectedPath="<i>null</i>"
    selectedPaths="<i>null</i>"
    showExtensions="true"
    showHidden="false"
    showIcons="true"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
    directoryClosing="<i>No default</i>"
    directoryOpening="<i>No default</i>"
    fileChoose="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Tree</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle FileSystemTree affiche le contenu du répertoire d’un système de fichiers sous forme d’arborescence.
 
  <p>Spécifiez le répertoire dont le contenu s’affiche en définissant la propriété <codeph>directory</codeph> sur une occurrence de la classe flash.filesystem.File (les occurrences de fichiers peuvent représenter des répertoires comme des fichiers). Dès que cette propriété change, quelle qu’en soit la raison, le contrôle distribue un événement <codeph>directoryChange</codeph>.</p>
 
  <p>Vous pouvez définir la propriété <codeph>enumerationMode</codeph> pour spécifier si les fichiers de ce répertoire, ses sous-répertoires, ou les deux doivent être affichés. Trois méthodes permettent d’afficher les fichiers et les sous-répertoires au sein de chaque nœud d’arborescence : les répertoires en premier, les fichiers en premier ou mélangés.</p>
 
  <p>Vous pouvez définir la propriété <codeph>extensions</codeph> de façon à filtrer la liste de sorte que seuls les fichiers dotés d’extensions précises apparaissent (les extensions des répertoires sont ignorées). Vous pouvez également spécifier une fonction de filtre supplémentaire en définissant la propriété <codeph>filterFunction</codeph>.</p>
 
  <p>Vous pouvez utiliser la propriété <codeph>showExtensions</codeph> pour afficher ou masquer les extensions de fichiers et la propriété <codeph>showIcons</codeph> pour afficher ou masquer les icônes.</p>
 
  <p>Vous pouvez personnaliser le tri au sein de chaque nœud de l’arborescence en définissant la propriété <codeph>nameCompareFunction</codeph> sur une fonction qui compare deux noms de fichiers ou de répertoires.</p>
 
  <p>Si l’utilisateur double-clique sur un nœud de répertoire fermé ou clique sur son icône de développement/réduction, ce contrôle distribue un événement <codeph>directoryOpening</codeph>. Si l’utilisateur double-clique sur un nœud de répertoire ouvert ou clique sur son icône de développement/réduction, ce contrôle distribue un événement <codeph>directoryClosing</codeph>. Un gestionnaire peut annuler ces événements en appelant la méthode <codeph>event.preventDefault()</codeph>. Dans ce cas, le nœud ne s’ouvre pas.</p>
 
  <p>Si l’utilisateur double-clique sur un nœud de fichier, ce contrôle distribue un événement <codeph>select</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.FILE_CHOOSE_fileChoose"><apiName>fileChoose</apiName><shortdesc>
  Distribué lorsque l’utilisateur choisit un fichier en double-cliquant dessus ou en le sélectionnant et en appuyant sur la touche Entrée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.FILE_CHOOSE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur choisit un fichier en double-cliquant dessus ou en le sélectionnant et en appuyant sur la touche Entrée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.DIRECTORY_OPENING_directoryOpening"><apiName>directoryOpening</apiName><shortdesc>
  Distribué lorsque l’utilisateur ouvre un nœud de répertoire à l’aide de la souris ou du clavier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_OPENING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur ouvre un nœud de répertoire à l’aide de la souris ou du clavier.
 
  <p>Cet événement peut être annulé. Si vous appelez la méthode <codeph>event.preventDefault()</codeph>, ce contrôle continue à afficher le répertoire actuel au lieu de changer pour afficher le sous-répertoire sur lequel l’utilisateur a double-cliqué.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.DIRECTORY_CLOSING_directoryClosing"><apiName>directoryClosing</apiName><shortdesc>
  Distribué lorsque l’utilisateur ferme un nœud de répertoire ouvert à l’aide de la souris ou du clavier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CLOSING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur ferme un nœud de répertoire ouvert à l’aide de la souris ou du clavier.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  Distribué lorsque la propriété directory change, pour une raison ou pour une autre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>directory</codeph> change, pour une raison ou pour une autre.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemTree:FileSystemTree"><apiName>FileSystemTree</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FileSystemTree:clear"><apiName>clear</apiName><shortdesc>
      Efface la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Efface la liste.
     
      <p>Cette méthode définit la propriété <codeph>dataProvider</codeph> sur <codeph>null</codeph>, mais laisse intacte la propriété <codeph>directory</codeph>. Vous pouvez appeler la méthode <codeph>refresh</codeph> pour renseigner la liste à nouveau.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:closeSubdirectory"><apiName>closeSubdirectory</apiName><shortdesc>
      Ferme un sous-répertoire spécifié par un chemin d’accès à un système de fichiers natif.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant la chaîne <codeph>nativePath</codeph> d’un élément File.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ferme un sous-répertoire spécifié par un chemin d’accès à un système de fichiers natif.
     
      <p>Si la chaîne <codeph>nativePath</codeph> n’indique pas de répertoire en cours d’affichage au sein de ce contrôle, cette méthode n’a aucun effet.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:findIndex"><apiName>findIndex</apiName><shortdesc conref="mx.controls.FileSystemList#findIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>Index de base zéro ou valeur <codeph>-1</codeph> si aucun élément File n’a été trouvé avec le chemin spécifié.
     
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant la chaîne <codeph>nativePath</codeph> d’un élément File.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:findItem"><apiName>findItem</apiName><shortdesc conref="mx.controls.FileSystemList#findItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.filesystem:File"/><apiDesc>Occurrence File si une occurrence a été trouvée avec la chaîne <codeph>nativePath</codeph> spécifiée ou valeur <codeph>null</codeph> si aucune n’a été trouvée.
      
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant la chaîne <codeph>nativePath</codeph> d’un élément File.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:openSubdirectory"><apiName>openSubdirectory</apiName><shortdesc>
      Ouvre un sous-répertoire spécifié par un chemin d’accès à un système de fichiers natif.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant la chaîne <codeph>nativePath</codeph> d’un élément File.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ouvre un sous-répertoire spécifié par un chemin d’accès à un système de fichiers natif.
     
      <p>Cette méthode ouvre automatiquement tous les répertoires qui interviennent et qui sont nécessaires pour atteindre le répertoire spécifié.</p>
     
      <p>Si la chaîne <codeph>nativePath</codeph> n’indique pas de répertoire de système de fichiers existant ou si ce répertoire ne se trouve pas dans le répertoire affiché par ce contrôle, cette méthode n’a aucun effet.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:refresh"><apiName>refresh</apiName><shortdesc>
      Réénumère le répertoire actuellement affiché par ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Réénumère le répertoire actuellement affiché par ce contrôle.
     
      <p>Au retour de cette méthode, la propriété <codeph>directory</codeph> contient l’occurrence File du même répertoire qu’auparavant. La propriété <codeph>dataProvider</codeph> prend temporairement la valeur <codeph>null</codeph> jusqu’à ce que le répertoire soit réénuméré. Après l’énumération, la propriété <codeph>dataProvider</codeph> contient un objet ArrayCollection d’occurrences File pour le contenu du répertoire.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FileSystemTree:COMPUTER"><apiName>COMPUTER</apiName><shortdesc conref="mx.controls.FileSystemList#COMPUTER">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#COMPUTER">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:directory:get"><apiName>directory</apiName><shortdesc>
      Répertoire dont ce contrôle affiche le contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/><apiDefaultValue>COMPUTER
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Répertoire dont ce contrôle affiche le contenu.
     
      <p>Si vous définissez cette propriété sur un objet File représentant un répertoire existant, la propriété <codeph>dataProvider</codeph> prend immédiatement la valeur <codeph>null</codeph>. Ensuite, lorsque ce contrôle est revalidé par l’objet LayoutManager, il effectue une énumération synchronisée du contenu de ce répertoire et renseigne la propriété <codeph>dataProvider</codeph> avec un contrôle ArrayCollection des objets File obtenus pour les fichiers et sous-répertoires du répertoire.</p>
     
      <p>Définir cette propriété sur un objet File qui ne représente pas un répertoire existant est une erreur. Définir cette propriété sur <codeph>COMPUTER</codeph> affiche de façon synchronisée les répertoires racine comme C: et D: sous Windows.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:enumerationMode:get"><apiName>enumerationMode</apiName><shortdesc conref="mx.controls.FileSystemList#enumerationMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FileSystemEnumerationMode.DIRECTORIES_FIRST
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#enumerationMode">
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemEnumerationMode"><linktext>mx.controls.FileSystemEnumerationMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemTree:extensions:get"><apiName>extensions</apiName><shortdesc conref="mx.controls.FileSystemList#extensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#extensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:filterFunction:get"><apiName>filterFunction</apiName><shortdesc conref="mx.controls.FileSystemList#filterFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#filterFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:nameCompareFunction:get"><apiName>nameCompareFunction</apiName><shortdesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:openPaths:get"><apiName>openPaths</apiName><shortdesc>
      Tableau de chaînes nativePath pour les éléments File représentant les sous-répertoires ouverts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Tableau de chaînes <codeph>nativePath</codeph> pour les éléments File représentant les sous-répertoires ouverts. Ce tableau est vide si aucun sous-répertoire n’est ouvert.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:selectedPath:get"><apiName>selectedPath</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPath">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPath">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemTree:selectedPaths:get"><apiName>selectedPaths</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPaths">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPaths">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemTree:showExtensions:get"><apiName>showExtensions</apiName><shortdesc conref="mx.controls.FileSystemList#showExtensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showExtensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:showHidden:get"><apiName>showHidden</apiName><shortdesc conref="mx.controls.FileSystemList#showHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:showIcons:get"><apiName>showIcons</apiName><shortdesc conref="mx.controls.FileSystemList#showIcons">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showIcons">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemList"><apiName>FileSystemList</apiName><shortdesc>
  Le contrôle FileSystemList permet d’afficher le contenu du répertoire d’un système de fichiers unique sous forme de liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="EmbeddedFile" inherit="no" name="fileIcon" owner="mx.controls:FileSystemList" playerVersion="AIR1.1" type="Class">
<description>
  Spécifie l’icône indiquant un fichier. L’icône par défaut se trouve dans le fichier Assets.swf. Dans MXML, vous pouvez utiliser la syntaxe suivante pour définir cette propriété : <codeph>fileIcon="@Embed(source=’fileIcon.jpg’);"</codeph>
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="directoryIcon" owner="mx.controls:FileSystemList" playerVersion="AIR1.1" type="Class">
<description>
  Spécifie l’icône indiquant un répertoire. L’icône par défaut se trouve dans le fichier Assets.swf. Dans MXML, vous pouvez utiliser la syntaxe suivante pour définir cette propriété : <codeph>directoryIcon="@Embed(source=’directoryIcon.jpg’);"</codeph>
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemList&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemList
    <strong>Properties</strong>
    directory="<i>null</i>"
    enumerationMode="directoriesFirst"
    extensions="<i>null</i>"
    filterFunction="<i>null</i>"
    nameCompareFunction="<i>null</i>"
    selectedPath="<i>null</i>"
    selectedPaths="<i>null</i>"
    showExtensions="true"
    showHidden="false"
    showIcons="true"
 
    <strong>Styles</strong>
    directoryIcon="<i>TreeNodeIcon</i>"
    fileIcon="<i>TreeNodeIcon</i>"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
    directoryChanging="<i>No default</i>"
    fileChoose="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle FileSystemList permet d’afficher le contenu du répertoire d’un système de fichiers unique sous forme de liste.
 
  <p>Pour modifier les données affichées, définissez la propriété <codeph>directory</codeph> au lieu d’utiliser la propriété <codeph>dataProvider</codeph>. Le contrôle renseigne ensuite automatiquement la propriété <codeph>dataProvider</codeph> en énumérant le contenu de ce répertoire. Il est déconseillé de définir la propriété <codeph>dataProvider</codeph> soi-même.</p>
 
  <p>Définissez la propriété <codeph>directory</codeph> sur une occurrence File, comme le montre l’exemple suivant : </p>
  <pre>
    &lt;mx:FileSystemList directory="{File.desktopDirectory}"/></pre>
 
  <p>Vous pouvez définir la propriété <codeph>enumerationMode</codeph> pour spécifier si les fichiers, les sous-répertoires ou les deux doivent être affichés. Trois méthodes permettent d’afficher les deux: les répertoires en premier, les fichiers en premier ou mélangés.</p>
 
  <p>Vous pouvez définir la propriété <codeph>extensions</codeph> de façon à filtrer les éléments affichés de sorte que seuls les fichiers dotés d’extensions précises apparaissent. La propriété <codeph>showHidden</codeph> détermine si le contrôle doit afficher les fichiers et sous-répertoires que le système d’exploitation masque généralement. Vous pouvez spécifier une propriété <codeph>filterFunction</codeph> supplémentaire pour appliquer un filtrage supplémentaire et une propriété <codeph>nameCompareFunction</codeph> pour effectuer un tri personnalisé.</p>
 
  <p>Comme AIR ne prend pas en charge les notifications du système de fichiers, ce contrôle n’est pas automatiquement actualisé si un fichier ou un sous-répertoire est créé, supprimé, déplacé ou renommé. En d’autres termes, il est possible qu’il affiche une vue obsolète du système de fichiers. Vous pouvez toutefois appeler la méthode <codeph>refresh()</codeph> pour réénumérer la propriété <codeph>directory</codeph> actuelle. Vous pouvez, par exemple, choisir d’effectuer cette opération lorsque vous avez réalisé une opération de fichiers dont vous savez qu’elle entraîne une vue obsolète du contrôle ou lorsque l’utilisateur désactive et réactive votre application.</p>
 
  <p>Vous pouvez utiliser la propriété <codeph>showIcons</codeph> pour afficher ou masquer les icônes et la propriété <codeph>showExtensions</codeph> pour afficher ou masquer les extensions de fichiers.</p>
 
  <p>Le contrôle propose deux méthodes, <codeph>findItem()</codeph> et <codeph>findIndex()</codeph>, qui permettent de rechercher les fichiers et sous-répertoires affichés afin de trouver celui doté d’une chaîne <codeph>nativePath</codeph> donnée.</p>
 
  <p>Deux propriétés, <codeph>selectedPath</codeph> et <codeph>selectedPaths</codeph>, fonctionnent de la même façon que <codeph>selectedItem</codeph> et <codeph>selectedItems</codeph> ou <codeph>selectedIndex</codeph> et <codeph>selectedIndices</codeph>, mais permettent de spécifier la sélection via les chaînes <codeph>nativePath</codeph>. Elles sont très utiles si vous devez afficher un répertoire dont certains éléments sont présélectionnés, car dans ce cas, vous ne possédez pas encore les éléments File qui seront créés par le contrôle lorsqu’il énumérera le répertoire et vous ne connaissez pas leurs futurs index.</p>
 
  <p>Le contrôle permet d’accéder à d’autres répertoires à l’aide de la souris ou du clavier. L’utilisateur peut essayer de modifier le répertoire en double-cliquant dessus, en appuyant sur la touche Entrée ou sur la touche Ctrl et la flèche vers le bas lorsqu’un sous-répertoire est sélectionné, en appuyant sur la touche Ctrl et la flèche vers le haut lorsque le contrôle n’affiche pas le répertoire de l’ordinateur (COMPUTER), en appuyant sur la touche Ctrl et la flèche gauche lorsqu’il existe un répertoire précédent vers lequel revenir ou en appuyant sur la touche Ctrl et la flèche droite lorsqu’il existe un répertoire suivant auquel accéder. Si l’utilisateur essaie de modifier le répertoire en cours d’affichage, le contrôle distribue un événement <codeph>directoryChanging</codeph> pouvant être annulé. Si vous n’annulez pas cet événement en appelant la méthode <codeph>event.preventDefault()</codeph>, le contrôle affiche le contenu du nouveau répertoire et la propriété <codeph>directory</codeph> change. Dès que la propriété <codeph>directory</codeph> change, quelle qu’en soit la raison, les contrôles distribuent un événement <codeph>directoryChange</codeph> pour vous avertir.</p>
 
  <p>Afin de prendre en charge les contrôles « Up » et « Down », la liste FileSystemList est dotée des propriétés <codeph>canNavigateUp</codeph> et <codeph>canNavigateDown</codeph> et des méthodes <codeph>navigateUp()</codeph> et <codeph>navigateDown()</codeph>. La méthode <codeph>navigateTo()</codeph> permet également d’accéder à un répertoire arbitraire.</p>
 
  <p>Le contrôle effectue le suivi des répertoires auxquels l’utilisateur a accédé afin de faciliter la prise en charge des contrôles « Back » et « Forward ». Pour plus d’informations, voir les propriétés <codeph>backHistory</codeph>, <codeph>forwardHistory</codeph>, <codeph>canNavigateBack</codeph> et <codeph>canNavigateForward</codeph>, ainsi que les méthodes <codeph>navigateBack()</codeph> et <codeph>navigateForward()</codeph>.</p>
 
  <p>Remarque : les icônes affichées par chaque élément sont des icônes de fichier et répertoire génériques que vous pouvez définir à l’aide des styles <codeph>fileIcon</codeph> et <codeph>directoryIcon</codeph>. Les contrôles basés sur les listes de Flex prennent actuellement en charge l’affichage des icônes imbriquées uniquement et non des icônes lues au moment de l’exécution. Par conséquent, les icônes du système de fichiers qui sont affichées dans le système d’exploitation n’apparaissent pas dans un contrôle FileSystemList, même si elles sont accessibles dans AIR via la propriété <codeph>icon</codeph> d’une occurrence File.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemList_mx.events.FileEvent.FILE_CHOOSE_fileChoose"><apiName>fileChoose</apiName><shortdesc>
  Distribué lorsque l’utilisateur choisit un fichier en double-cliquant dessus ou en le sélectionnant et en appuyant sur la touche Entrée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.FILE_CHOOSE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur choisit un fichier en double-cliquant dessus ou en le sélectionnant et en appuyant sur la touche Entrée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemList_mx.events.FileEvent.DIRECTORY_OPENING_directoryChanging"><apiName>directoryChanging</apiName><shortdesc>
  Distribué lorsque l’utilisateur essaie de changer le répertoire affiché par ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_OPENING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur essaie de changer le répertoire affiché par ce contrôle.
 
  <p>L’utilisateur peut essayer de modifier le répertoire en double-cliquant dessus, en appuyant sur la touche Entrée ou sur la touche Ctrl et la flèche vers le bas lorsqu’un sous-répertoire est sélectionné, en appuyant sur la touche Ctrl et la flèche vers le haut lorsque le contrôle n’affiche pas le répertoire de l’ordinateur (COMPUTER), en appuyant sur la touche Ctrl et la flèche gauche lorsqu’il existe un répertoire précédent dans la liste de l’historique vers lequel revenir ou en appuyant sur la touche Ctrl et la flèche droite lorsqu’il existe un répertoire suivant dans la liste de l’historique auquel accéder.</p>
 
  <p>Cet événement peut être annulé. Si vous appelez la méthode <codeph>event.preventDefault()</codeph>, le répertoire n’est pas modifié.</p>
 
  <p>Une fois la propriété <codeph>directory</codeph> modifiée et une fois que la propriété <codeph>dataProvider</codeph> contient des occurrences File des éléments du nouveau répertoire, l’événement <codeph>directoryChange</codeph> est distribué.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemList_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  Distribué lorsque le répertoire affiché par ce contrôle a changé, pour une raison ou pour une autre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le répertoire affiché par ce contrôle a changé, pour une raison ou pour une autre.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemList:FileSystemList"><apiName>FileSystemList</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FileSystemList:clear"><apiName>clear</apiName><shortdesc>
      Efface ce contrôle afin qu’il n’affiche aucun élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Efface ce contrôle afin qu’il n’affiche aucun élément.
     
      <p>Cette méthode définit la propriété <codeph>dataProvider</codeph> sur <codeph>null</codeph>, mais laisse intacte la propriété <codeph>directory</codeph>. Vous pouvez appeler la méthode <codeph>refresh</codeph> pour renseigner à nouveau ce contrôle.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemList:findIndex"><apiName>findIndex</apiName><shortdesc>
      Renvoie l’index de l’élément File avec le chemin d’accès au système de fichiers natif spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Index de base zéro ou valeur <codeph>-1</codeph> si aucun élément File n’a été trouvé avec le chemin spécifié.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant la chaîne <codeph>nativePath</codeph> d’un élément File.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l’index de l’élément File avec le chemin d’accès au système de fichiers natif spécifié.
     
      <p>Les éléments présents dans la collection du contrôle, mais qui ne sont pas affichés en raison du filtrage, ne font pas l’objet d’une recherche.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.filesystem.xml#File/nativePath"><linktext>flash.filesystem.File.nativePath</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:findItem"><apiName>findItem</apiName><shortdesc>
      Recherche les occurrences File actuellement affichées dans ce contrôle et retourne celle qui possède la propriété nativePathproperty spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Occurrence File si une occurrence a été trouvée avec la chaîne <codeph>nativePath</codeph> spécifiée ou valeur <codeph>null</codeph> si aucune n’a été trouvée.
      
      </apiDesc><apiType value="flash.filesystem:File"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>Chaîne spécifiant la chaîne <codeph>nativePath</codeph> d’un élément File.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Recherche les occurrences File actuellement affichées dans ce contrôle et retourne celle qui possède la propriété <codeph>nativePathproperty</codeph> spécifiée.
     
      <p>Les occurrences File présentes dans la collection du contrôle, mais qui ne sont pas affichées en raison du filtrage, ne font pas l’objet d’une recherche.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateBack"><apiName>navigateBack</apiName><shortdesc>
      Change ce contrôle pour afficher le contenu d’un répertoire précédemment visité dans le tableau backHistory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Index du tableau <codeph>backHistory</codeph> auquel accéder. La valeur par défaut est 0, ce qui désigne le répertoire le plus proche en arrière.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Change ce contrôle pour afficher le contenu d’un répertoire précédemment visité dans le tableau <codeph>backHistory</codeph>.
     
      <p>Si le tableau <codeph>backHistory</codeph> est vide ou si vous spécifiez un index qui ne se trouve pas dans le tableau, cette méthode n’a aucun effet.</p>
     
      <p>Au retour de cette méthode, la propriété <codeph>directory</codeph> contient l’occurrence File du nouveau répertoire. La propriété <codeph>dataProvider</codeph> prend temporairement la valeur <codeph>null</codeph> jusqu’à ce que le nouveau répertoire soit énuméré. Après l’énumération, la propriété <codeph>dataProvider</codeph> contient un objet ArrayCollection d’occurrences File pour le contenu du nouveau répertoire.</p>
     
      <p>La liste de l’historique reste inchangée. Toutefois, l’index actuel qui se trouve à l’intérieur change, ce qui affecte les propriétés <codeph>backHistory</codeph> et <codeph>forwardHistory</codeph>. De nouvelles valeurs leur sont affectées au retour de cette méthode.</p>
     
      <p>L’exemple suivant montre comment utiliser cette méthode avec le contrôle FileSystemHistoryButton pour créer un bouton vers l’arrière :</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemList/canNavigateBack"><linktext>canNavigateBack</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateDown"><apiName>navigateDown</apiName><shortdesc>
      Change ce contrôle pour afficher le contenu du sous-répertoire sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Change ce contrôle pour afficher le contenu du sous-répertoire sélectionné.
     
      <p>Si aucun sous-répertoire n’est sélectionné, cette méthode n’a aucun effet.</p>
     
      <p>Au retour de cette méthode, la propriété <codeph>directory</codeph> contient l’occurrence File du nouveau répertoire. La propriété <codeph>dataProvider</codeph> prend temporairement la valeur <codeph>null</codeph> jusqu’à ce que le nouveau répertoire soit énuméré. Après l’énumération, la propriété <codeph>dataProvider</codeph> contient un objet ArrayCollection d’occurrences File pour le contenu du nouveau répertoire.</p>
     
      <p>L’exemple suivant montre comment utiliser cette méthode avec le contrôle Button pour créer un bouton d’ouverture :</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateDown"><linktext>canNavigateDown</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateForward"><apiName>navigateForward</apiName><shortdesc>
      Change ce contrôle pour afficher le contenu d’un répertoire précédemment visité dans le tableau forwardHistory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Index du tableau <codeph>forwardHistory</codeph> auquel accéder. La valeur par défaut est 0, ce qui désigne le répertoire le plus proche en avant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Change ce contrôle pour afficher le contenu d’un répertoire précédemment visité dans le tableau <codeph>forwardHistory</codeph>.
     
      <p>Si le tableau <codeph>forwardHistory</codeph> est vide ou si vous spécifiez un index qui ne se trouve pas dans le tableau, cette méthode n’a aucun effet.</p>
     
      <p>Au retour de cette méthode, la propriété <codeph>directory</codeph> contient l’occurrence File du nouveau répertoire. La propriété <codeph>dataProvider</codeph> prend temporairement la valeur <codeph>null</codeph> jusqu’à ce que le nouveau répertoire soit énuméré. Après l’énumération, la propriété <codeph>dataProvider</codeph> contient un objet ArrayCollection d’occurrences File pour le contenu du nouveau répertoire.</p>
     
      <p>La liste de l’historique reste inchangée. Toutefois, l’index actuel qui se trouve à l’intérieur change, ce qui affecte les propriétés <codeph>backHistory</codeph> et <codeph>forwardHistory</codeph>. De nouvelles valeurs leur sont affectées au retour de cette méthode.</p>
     
      <p>L’exemple suivant montre comment utiliser cette méthode avec le contrôle FileSystemHistoryButton pour créer un bouton vers l’avant :</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateForward"><linktext>canNavigateForward</linktext></link><link href="mx.controls.xml#FileSystemList/forwardHistory"><linktext>forwardHistory</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateTo"><apiName>navigateTo</apiName><shortdesc>
      Change ce contrôle pour afficher le contenu du répertoire spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>directory</apiItemName><apiType value="flash.filesystem:File"/><apiDesc>Objet File représentant un fichier ou un répertoire.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Change ce contrôle pour afficher le contenu du répertoire spécifié.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateUp"><apiName>navigateUp</apiName><shortdesc>
      Change ce contrôle pour afficher le contenu du prochain répertoire en haut de la hiérarchie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Change ce contrôle pour afficher le contenu du prochain répertoire en haut de la hiérarchie.
     
      <p>Si ce contrôle affiche actuellement les répertoires racine (par exemple C: et D: sur Microsoft Windows), cette méthode n’a aucun effet.</p>
     
      <p>Au retour de cette méthode, la propriété <codeph>directory</codeph> contient l’occurrence File du nouveau répertoire. La propriété <codeph>dataProvider</codeph> prend temporairement la valeur <codeph>null</codeph> jusqu’à ce que le nouveau répertoire soit énuméré. Après l’énumération, la propriété <codeph>dataProvider</codeph> contient un objet ArrayCollection d’occurrences File pour le contenu du nouveau répertoire.</p>
     
      <p>L’exemple suivant montre comment utiliser cette méthode avec le contrôle Button pour créer un bouton vers le haut :</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateUp"><linktext>canNavigateUp</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:refresh"><apiName>refresh</apiName><shortdesc>
      Réénumère le répertoire actuellement affiché par ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Réénumère le répertoire actuellement affiché par ce contrôle.
     
      <p>Comme AIR ne prend pas en charge les notifications du système de fichiers, ce contrôle n’est pas automatiquement actualisé si un fichier ou un sous-répertoire est créé, supprimé, déplacé ou renommé. En d’autres termes, il est possible qu’il affiche une vue obsolète du système de fichiers. Vous pouvez toutefois appeler la méthode <codeph>refresh()</codeph> pour réénumérer la propriété <codeph>directory</codeph> actuelle et la mettre à jour. Vous pouvez, par exemple, choisir d’effectuer cette opération lorsque vous avez réalisé une opération de fichiers dont vous savez qu’elle entraîne une vue obsolète du contrôle ou lorsque l’utilisateur désactive et réactive votre application.</p>
     
      <p>Cette méthode préserve les éléments sélectionnés (s’ils existent toujours) et la position de défilement (si le premier élément visible existe toujours</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FileSystemList:COMPUTER"><apiName>COMPUTER</apiName><shortdesc>
      Constante pouvant être utilisée comme valeur pour la propriété directory, représentant un répertoire de niveau supérieur pseudo appelé « Computer ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc>
      Constante pouvant être utilisée comme valeur pour la propriété <codeph>directory</codeph>, représentant un répertoire pseudo de niveau supérieur appelé « Computer ». Ce répertoire pseudo contient les répertoires racine (C:\ et D:\ sur Windows ou / sur Macintosh).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:backHistory:get"><apiName>backHistory</apiName><shortdesc>
      Tableau d’objets File représentant les répertoires vers lesquels l’utilisateur peut revenir.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Tableau d’objets File représentant les répertoires vers lesquels l’utilisateur peut revenir.
     
      <p>Le premier élément du tableau est le prochain répertoire en arrière de la liste de l’historique. Le dernier élément est le répertoire le plus en arrière de la liste de l’historique.</p>
     
      <p>Ce tableau peut contenir un élément <codeph>null</codeph>, qui représente le répertoire non existant dont le contenu sont des répertoires racine comme C:\ et D:\ sur Microsoft Windows.</p>
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle FileSystemHistoryButton pour implémenter un bouton vers l’arrière :</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateBack"><linktext>canNavigateBack</linktext></link><link href="mx.controls.xml#FileSystemList/navigateBack()"><linktext>navigateBack()</linktext></link><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateBack:get"><apiName>canNavigateBack</apiName><shortdesc>
      Indicateur portant la valeur true si la liste de l’historique comporte au moins un répertoire vers lequel l’utilisateur peut revenir.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur portant la valeur <codeph>true</codeph> si la liste de l’historique comporte au moins un répertoire vers lequel l’utilisateur peut revenir.
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle FileSystemHistoryButton pour implémenter un bouton vers l’arrière :</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemList/navigateBack()"><linktext>navigateBack()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateDown:get"><apiName>canNavigateDown</apiName><shortdesc>
      Indicateur portant la valeur true si l’utilisateur peut accéder au bas d’un répertoire sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur portant la valeur <codeph>true</codeph> si l’utilisateur peut accéder au bas d’un répertoire sélectionné. Cet indicateur a la valeur <codeph>false</codeph> lorsqu’aucun élément n’est sélectionné ou lorsque l’élément sélectionné est un fichier au lieu d’un répertoire.
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle Button :</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/navigateDown()"><linktext>navigateDown()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateForward:get"><apiName>canNavigateForward</apiName><shortdesc>
      Indicateur portant la valeur true si la liste de l’historique comporte au moins un répertoire auquel l’utilisateur peut accéder vers l’avant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur portant la valeur <codeph>true</codeph> si la liste de l’historique comporte au moins un répertoire auquel l’utilisateur peut accéder vers l’avant.
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle FileSystemHistoryButton pour implémenter un bouton vers l’avant :</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/forwardHistory"><linktext>forwardHistory</linktext></link><link href="mx.controls.xml#FileSystemList/navigateForward()"><linktext>navigateForward()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateUp:get"><apiName>canNavigateUp</apiName><shortdesc>
      Indicateur portant la valeur true si l’utilisateur peut remonter vers le répertoire parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur portant la valeur <codeph>true</codeph> si l’utilisateur peut remonter vers le répertoire parent. Cet indicateur a la valeur <codeph>false</codeph> uniquement lorsque ce contrôle affiche les répertoires racine comme C:\ and D:\ sur Microsoft Windows (dans ce cas, la propriété <codeph>directory</codeph> a la valeur <codeph>COMPUTER</codeph>).
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle Button :</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/navigateUp()"><linktext>navigateUp()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:directory:get"><apiName>directory</apiName><shortdesc>
      Répertoire dont ce contrôle affiche le contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/><apiDefaultValue>COMPUTER
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Répertoire dont ce contrôle affiche le contenu.
     
      <p>Si vous définissez cette propriété sur un objet File représentant un répertoire existant, la propriété <codeph>dataProvider</codeph> prend immédiatement la valeur <codeph>null</codeph>. Ensuite, lorsque ce contrôle est revalidé par l’objet LayoutManager, il énumère le contenu de ce répertoire et renseigne la propriété <codeph>dataProvider</codeph> avec un contrôle ArrayCollection des objets File obtenus pour les fichiers et sous-répertoires du répertoire.</p>
     
      <p>Définir cette propriété sur un objet File qui ne représente pas un répertoire existant est une erreur. Définir cette propriété sur <codeph>COMPUTER</codeph> affiche de façon synchronisée les répertoires racine comme C: et D: sous Windows.</p>
     
      <p>Définir cette propriété a pour effet de désélectionner les éléments précédemment sélectionnés et le contrôle redéfinit sa position de défilement sur le coin supérieur gauche.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:enumerationMode:get"><apiName>enumerationMode</apiName><shortdesc>
      Chaîne indiquant si ce contrôle affiche uniquement des fichiers, uniquement des sous-répertoires, ou les deux.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FileSystemEnumerationMode.DIRECTORIES_FIRST
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Chaîne indiquant si ce contrôle affiche uniquement des fichiers, uniquement des sous-répertoires, ou les deux. Si les deux sont affichés, il indique également si les sous-répertoires sont affichés avant, après, ou s’ils sont mélangés avec les fichiers. Les valeurs possibles sont indiquées par la classe FileSystemEnumerationMode.
     
      <p>Cette propriété affecte les sous-répertoires et fichiers qui sont affichés dans le contrôle, ainsi que leur ordre d’apparition. Toutefois, elle n’affecte pas les occurrences File qui sont présentes dans la propriété <codeph>dataProvider</codeph> ; elle change le comportement de la fonction de filtre appliquée à la propriété <codeph>dataProvider</codeph>. Définir cette propriété ne provoque pas la réénumération du <codeph>directory</codeph> en cours.</p>
     
      <p>Définir cette propriété a pour effet de désélectionner les éléments sélectionnés et le contrôle redéfinit sa position de défilement sur le coin supérieur gauche.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemEnumerationMode"><linktext>mx.controls.FileSystemEnumerationMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:extensions:get"><apiName>extensions</apiName><shortdesc>
      Tableau d’extensions indiquant quels fichiers peuvent être affichés dans ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Tableau d’extensions indiquant quels fichiers peuvent être affichés dans ce contrôle. Si cette propriété est définie, par exemple, sur <codeph>[ ".htm", ".html" ]</codeph>, alors seuls les fichiers portant ces extensions peuvent être affichés.
     
      <p>Les extensions sont considérées comme n’étant pas sensibles à la casse et le point du début est facultatif. Par exemple, spécifier <codeph>".HTML"</codeph> revient à spécifier <codeph>"html"</codeph>.</p>
     
      <p>Les répertoires ne font pas l’objet d’un filtrage par extensions, même si leurs noms contiennent des points.</p>
     
      <p>Les propriétés <codeph>enumerationMode</codeph> et <codeph>filterFunction</codeph> ont également un rôle dans la définition des fichiers qui apparaîtront dans le contrôle. Par exemple, si cette propriété est <codeph>[ ".htm", ".html" ]</codeph>, un fichier .html ne s’affiche pas si la propriété <codeph>enumerationMode</codeph> est définie sur <codeph>FileSystemEnumerationMode.DIRECTORIES_ONLY</codeph> ou si la propriété <codeph>filterFunction</codeph> retourne la valeur <codeph>false</codeph> pour le fichier.</p>
     
      <p>Si cette propriété est définie sur <codeph>null</codeph>, aucun filtrage sur les extensions n’a lieu et tous les fichiers apparaissent. Si cette propriété est un tableau vide, toutes les extensions sont filtrées et aucun fichier portant une extension n’apparaît.</p>
     
      <p>Cette propriété affecte les fichiers qui sont affichés dans le contrôle. Toutefois, elle n’affecte pas les occurrences File qui sont présentes dans la propriété <codeph>dataProvider</codeph> ; elle change le comportement de la fonction de filtre appliquée à la propriété <codeph>dataProvider</codeph>. Définir cette propriété ne provoque pas la réénumération du <codeph>directory</codeph> en cours.</p>
     
      <p>Définir cette propriété a pour effet de désélectionner les éléments sélectionnés et le contrôle redéfinit sa position de défilement sur le coin supérieur gauche.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      Fonction de rappel qui permet d’effectuer un filtrage supplémentaire, après l’application des propriétés enumerationMode et extensions, pour déterminer les fichiers et sous-répertoires à afficher et à masquer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction de rappel qui permet d’effectuer un filtrage supplémentaire, après l’application des propriétés <codeph>enumerationMode</codeph> et <codeph>extensions</codeph>, pour déterminer les fichiers et sous-répertoires à afficher et à masquer.
     
      <p>Cette fonction doit porter la signature suivante :</p>
     
      <pre>function myFilterFunction(file:File):Boolean</pre>
     
      Cette fonction doit renvoyer la valeur <codeph>true</codeph> pour afficher le fichier ou sous-répertoire spécifié et la valeur <codeph>false</codeph> pour le masquer.
     
      <p>Pour s’assurer que chaque fichier et sous-répertoire énumérés sont transmis à cette fonction, la propriété <codeph>enumerationMode</codeph> ne doit pas être définie sur <codeph>FileSystemEnumerationMode.FILES_ONLY</codeph> ou <codeph>FileSystemEnumerationMode.DIRECTORIES_ONLY</codeph> et la propriété <codeph>extensions</codeph> doit avoir la valeur <codeph>null</codeph>. Sinon, ces propriétés déclenchent un filtrage préalable avant l’appel de cette fonction de filtre.</p>
     
      <p>Cette propriété affecte les sous-répertoires et fichiers qui sont affichés dans le contrôle. Toutefois, elle n’affecte pas les occurrences File qui sont présentes dans la propriété <codeph>dataProvider</codeph> ; elle change le comportement de la fonction de filtre appliquée à la propriété <codeph>dataProvider</codeph>. Définir cette propriété ne provoque pas la réénumération du <codeph>directory</codeph> en cours.</p>
     
      <p>Définir cette propriété a pour effet de désélectionner les éléments sélectionnés et le contrôle redéfinit sa position de défilement sur le coin supérieur gauche.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:forwardHistory:get"><apiName>forwardHistory</apiName><shortdesc>
      Tableau d’objets File représentant les répertoires auxquels l’utilisateur peut accéder vers l’avant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Tableau d’objets File représentant les répertoires auxquels l’utilisateur peut accéder vers l’avant.
     
      <p>Le premier élément du tableau est le prochain répertoire en avant de la liste de l’historique. Le dernier élément est le répertoire le plus en avant de la liste de l’historique.</p>
     
      <p>Ce tableau peut contenir l’objet File spécial <codeph>COMPUTER</codeph>, qui représente le répertoire non existant dont le contenu sont des répertoires racine comme C:\ et D:\ sur Microsoft Windows.</p>
     
      <p>L’exemple suivant montre comment utiliser cette propriété avec le contrôle FileSystemHistoryButton pour implémenter un bouton vers l’avant :</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateForward"><linktext>canNavigateForward</linktext></link><link href="mx.controls.xml#FileSystemList/navigateForward()"><linktext>navigateForward()</linktext></link><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:nameCompareFunction:get"><apiName>nameCompareFunction</apiName><shortdesc>
      Fonction de rappel que vous pouvez utiliser pour changer la façon dont les noms des fichiers et des sous-répertoires sont comparés, afin de produire l’ordre de tri.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction de rappel que vous pouvez utiliser pour changer la façon dont les noms des fichiers et des sous-répertoires sont comparés, afin de produire l’ordre de tri.
     
      <p>Cette fonction doit porter la signature suivante :</p>
     
      <pre>function myNameCompareFunction(name1:String, name2:String):int</pre>
     
      <p>Elle retourne <codeph>-1</codeph> si <codeph>name1</codeph> doit trier avant <codeph>name2</codeph>, <codeph>1</codeph> si <codeph>name1</codeph> doit trier après <codeph>name2</codeph> et <codeph>0</codeph> si les noms sont identiques.</p>
     
      <p>Si vous ne définissez pas cette propriété, le contrôle effectue une comparaison sans tenir compte de la casse et en fonction de la langue des deux noms, en appelant d’abord la méthode String <codeph>toLocaleLowerCase()</codeph> sur chaque nom, puis en les comparant avec les opérateurs <codeph>&lt;</codeph> et <codeph>></codeph>.</p>
     
      <p>Si vous définissez la propriété <codeph>enumerationMode</codeph> sur <codeph>FileSystemEnumerationMode.FILES_FIRST</codeph> ou <codeph>FileSystemEnumerationMode.DIRECTORIES_FIRST</codeph>, cette méthode est utilisée pour comparer les noms uniquement au sein des groupes séparés de fichiers et de répertoires.</p>
     
      <p>Cette propriété affecte l’ordre dans lequel les sous-répertoires et fichiers sont affichés dans le contrôle. Toutefois, elle n’affecte pas les occurrences File qui sont présentes dans la propriété <codeph>dataProvider</codeph> ; elle change le comportement du tri appliqué à la propriété <codeph>dataProvider</codeph>. Définir cette propriété ne provoque pas la réénumération du <codeph>directory</codeph> en cours.</p>
     
      <p>Définir cette propriété a pour effet de désélectionner les éléments sélectionnés et le contrôle redéfinit sa position de défilement sur le coin supérieur gauche.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:selectedPath:get"><apiName>selectedPath</apiName><shortdesc>
      Chaîne nativePath de l’élément File représentant le sous-répertoire ou fichier sélectionné, ou valeur null si aucun élément n’est sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Chaîne <codeph>nativePath</codeph> de l’élément File représentant le sous-répertoire ou fichier sélectionné, ou valeur <codeph>null</codeph> si aucun élément n’est sélectionné.
     
      <p>Si plusieurs éléments sont sélectionnés, l’obtention de cette propriété donne le premier chemin du tableau <codeph>selectedPaths</codeph>.</p>
     
      <p>La définition de cette propriété affecte les propriétés <codeph>selectedPaths</codeph>, <codeph>selectedItem</codeph>, <codeph>selectedItems</codeph>, <codeph>selectedIndex</codeph> et <codeph>selectedIndices</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:selectedPaths:get"><apiName>selectedPaths</apiName><shortdesc>
      Tableau de chaînes nativePath pour les éléments File représentant les sous-répertoires et fichiers sélectionnés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Tableau de chaînes <codeph>nativePath</codeph> pour les éléments File représentant les sous-répertoires et fichiers sélectionnés. Ce tableau est vide si aucun élément n’est sélectionné.
     
      <p>La définition de cette propriété affecte les propriétés <codeph>selectedPaths</codeph>, <codeph>selectedItem</codeph>, <codeph>selectedItems</codeph>, <codeph>selectedIndex</codeph> et <codeph>selectedIndices</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:showExtensions:get"><apiName>showExtensions</apiName><shortdesc>
      Indicateur précisant si les extensions sont affichées dans les noms de fichiers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si les extensions sont affichées dans les noms de fichiers. Définissez cette propriété sur <codeph>true</codeph> pour afficher les extensions de fichiers et sur <codeph>false</codeph> pour les masquer. Les extensions des noms de répertoires sont toujours affichées.
     
      <p>La définition de cette propriété n’affecte pas les éléments qui sont affichés, ni leur ordre d’apparition. Cette opération n’affecte pas non plus les éléments qui sont sélectionnés, ni la position de défilement.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:showHidden:get"><apiName>showHidden</apiName><shortdesc>
      Indicateur précisant si les fichiers et répertoires que le système d’exploitation considère comme masqués sont affichés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si les fichiers et répertoires que le système d’exploitation considère comme masqués sont affichés. Définissez cette propriété sur <codeph>true</codeph> pour afficher les fichiers et répertoires masqués et sur <codeph>false</codeph> pour les masquer.
     
      <p>Définir cette propriété a pour effet de désélectionner les éléments sélectionnés et le contrôle redéfinit sa position de défilement sur le coin supérieur gauche.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:showIcons:get"><apiName>showIcons</apiName><shortdesc>
      Indicateur précisant que les icônes s’affichent avant le nom des fichiers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant que les icônes s’affichent avant le nom des fichiers. Définissez cette propriété sur <codeph>true</codeph> pour afficher les icônes et sur <codeph>false</codeph> pour les masquer.
     
      <p>Vous pouvez définir les styles <codeph>directoryIcon</codeph> et <codeph>fileIcon</codeph> pour modifier les icônes par défaut. Ce contrôle ne peut pas afficher l’icône réelle que le système d’exploitation affiche pour un fichier, car Apollo M2 ne prend pas en charge cette fonctionnalité.</p>
     
      <p>La définition de cette propriété n’affecte pas les éléments qui sont affichés, ni leur ordre d’apparition. Cette opération n’affecte pas non plus les éléments qui sont sélectionnés, ni la position de défilement.</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemSizeDisplayMode"><apiName>FileSystemSizeDisplayMode</apiName><shortdesc>
  La classe FileSystemSizeDisplayMode définit les valeurs constantes de la propriété sizeDisplayMode de la classe FileSystemDataGrid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe FileSystemSizeDisplayMode définit les valeurs constantes de la propriété <codeph>sizeDisplayMode</codeph> de la classe FileSystemDataGrid.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/enumerationMode"><linktext>mx.controls.FileSystemDataGrid.enumerationMode</linktext></link></related-links><apiValue id="mx.controls:FileSystemSizeDisplayMode:BYTES"><apiName>BYTES</apiName><shortdesc>
      Indique que les tailles de fichiers doivent être affichées en octets.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bytes</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Indique que les tailles de fichier doivent être affichées en octets.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemSizeDisplayMode:KILOBYTES"><apiName>KILOBYTES</apiName><shortdesc>
      Indique que les tailles de fichier doivent être affichées en kilo-octets.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>kilobytes</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Indique que les tailles de fichier doivent être affichées en kilo-octets.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:HTML"><apiName>HTML</apiName><shortdesc>
  Le contrôle HTML permet d’afficher du contenu HTML dans votre application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  Nombre de pixels entre le bord supérieur de ce contrôle et le bord supérieur de sa zone de contenu HTML.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  Nombre de pixels entre le bord droit de ce contrôle et le bord droit de sa zone de contenu HTML.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  Nombre de pixels entre le bord gauche de ce contrôle et le bord gauche de sa zone de contenu HTML.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  Nombre de pixels entre le bord inférieur de ce contrôle et le bord inférieur de sa zone de contenu HTML.
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:HTML&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:HTML
    <strong>Properties</strong>
    data="<i>null</i>"
    historyPosition="0"
    htmlHost="<i>null</i>"
    htmlLoaderFactory="mx.core.ClassFactory"
    htmlText=""
    listData="<i>null</i>"
    location=""
    paintsDefaultBackground="false"
    runtimeApplicationDomain="<i>null</i>"
    userAgent="<i>null</i>"
 
    <strong>Styles</strong>
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
 
    <strong>Events</strong>
    complete="<i>No default</i>"
    htmlDOMInitialize="<i>No default</i>"
    htmlRender="<i>No default</i>"
    locationChange="<i>No default</i>"
    uncaughtScriptException="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:ScrollControlBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle HTML permet d’afficher du contenu HTML dans votre application.
 
  <p>La propriété <codeph>location</codeph> permet de spécifier l’URL d’une page HTML dont le contenu est affiché dans le contrôle. Vous pouvez également définir la propriété <codeph>htmlText</codeph> pour spécifier une chaîne contenant le texte au format HTML qui est rendu dans le contrôle.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="../../flash/html/HTMLLoader.html"><linktext>HTMLLoader</linktext></link></related-links><adobeApiEvent id="mx.controls:HTML_flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException"><apiName>uncaughtScriptException</apiName><shortdesc>
  Distribué lorsqu’une exceptionJavaScript non détectée a lieu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier>flash.events.HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une exceptionJavaScript non détectée a lieu.
 
  <p>Cet événement est toujours distribué de façon asynchrone. Un gestionnaire d’événement pour cet événement peut appeler une méthode ou accéder à une propriété de ce contrôle ou de son contrôle <codeph>htmlLoader</codeph> interne.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.LOCATION_CHANGE_locationChange"><apiName>locationChange</apiName><shortdesc>
  Distribué lorsque la propriété emplacement change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.LOCATION_CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>location</codeph> change.
 
  <p>Cet événement est toujours distribué de façon asynchrone. Un gestionnaire d’événement pour cet événement peut appeler une méthode ou accéder à une propriété de ce contrôle ou de son contrôle <codeph>htmlLoader</codeph> interne.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.HTML_RENDER_htmlRender"><apiName>htmlRender</apiName><shortdesc>
  Distribué lorsque le contenu HTML de ce contrôle est rendu pour la première fois, puis à chaque nouveau rendu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.HTML_RENDER</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le contenu HTML de ce contrôle est rendu pour la première fois, puis à chaque nouveau rendu.
 
  <p>Comme un contrôle HTML peut distribuer un grand nombre de ces événements, il est conseillé d’éviter les traitements conséquents dans un gestionnaire <codeph>render</codeph>, car cela pourrait avoir un impact négatif sur les performances.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.HTML_DOM_INITIALIZE_htmlDOMInitialize"><apiName>htmlDOMInitialize</apiName><shortdesc>
  Distribué après l’initialisation du DOM HTML en réponse à une opération de chargement provoquée par la définition de la propriété emplacement ou htmlText.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après l’initialisation de l’objet DOM HTML en réponse à une opération de chargement provoquée par la définition de la propriété <codeph>location</codeph> ou <codeph>htmlText</codeph>.
 
  <p>Lorsque cet événement est distribué, aucune méthode JavaScript n’a encore été exécutée. Les objets <codeph>domWindow</codeph> et <codeph>domWindow.document</codeph> existent, mais cela n’est peut-être pas le cas d’autres objets DOM. Vous pouvez utiliser cet événement pour définir des propriétés sur les objets <codeph>domWindow</codeph> et <codeph>domWindow.document</codeph> afin que les méthodes JavaScript puissent y accéder ultérieurement.</p>
 
  <p>Un gestionnaire de cet événement ne doit pas définir de propriétés ou appeler des méthodes qui lancent une autre opération de chargement ou qui affectent l’URL de l’opération de chargement en cours. Dans le cas contraire, une exception ActionScript ou JavaScript risque d’être générée.</p>
 
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="mx.controls.location.xml"><linktext>emplacement</linktext></link><link href="" invalidHref="mx.controls.htmlText.xml"><linktext>htmlText</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Distribué après la fin de la dernière opération de chargement provoquée par la définition de la propriété emplacement ou htmlText.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué après la fin de la dernière opération de chargement provoquée par la définition de la propriété <codeph>location</codeph> ou <codeph>htmlText</codeph>.
 
  <p>Cet événement est toujours distribué de façon asynchrone, après la distribution de l’événement <codeph>load</codeph> JavaScript dans l’objet DOM HTML.</p>
 
  <p>Un gestionnaire d’événement pour cet événement peut appeler une méthode ou accéder à une propriété de ce contrôle ou de son contrôle <codeph>htmlLoader</codeph> interne.</p>
 
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="mx.controls.location.xml"><linktext>emplacement</linktext></link><link href="" invalidHref="mx.controls.htmlText.xml"><linktext>htmlText</linktext></link></related-links></adobeApiEvent><apiConstructor id="mx.controls:HTML:HTML"><apiName>HTML</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:HTML:cancelLoad"><apiName>cancelLoad</apiName><shortdesc>
      Annule les opérations de chargement en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Annule les opérations de chargement en cours.
     
      <p>Cette méthode n’a aucun effet si elle est appelée avant la création de l’objet HTMLLoader interne (propriété <codeph>htmlLoader</codeph>) de ce composant.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:HTML:getHistoryAt"><apiName>getHistoryAt</apiName><shortdesc>
      Renvoie l’objet HTMLHistoryItem à la position spécifiée dans la liste de l’historique de ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet HTMLHistoryItem de l’entrée de l’historique à la position spécifiée.
     
      </apiDesc><apiType value="flash.html:HTMLHistoryItem"/></apiReturn><apiParam><apiItemName>position</apiItemName><apiType value="int"/><apiDesc>Position dans la liste de l’historique.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l’objet HTMLHistoryItem à la position spécifiée dans la liste de l’historique de ce contrôle.
     
      <p>Cette méthode retourne la valeur <codeph>null</codeph> si elle est appelée avant la création du contrôle HTMLLoader interne (propriété <codeph>htmlLoader</codeph>) de ce composant.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.controls.historyPosition.xml"><linktext>historyPosition</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:HTML:historyBack"><apiName>historyBack</apiName><shortdesc>
      Navigue en arrière dans la liste de l’historique du contrôle, si cela est possible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Navigue en arrière dans la liste de l’historique du contrôle, si cela est possible.
     
      <p>Appeler cette méthode de l’objet HTMLLoader revient à appeler la méthode <codeph>back()</codeph> de la propriété <codeph>window.history</codeph> dans le code JavaScript du contenu HTML.</p>
     
      <p>Cette méthode n’a aucun effet si elle est appelée avant la création de l’objet HTMLLoader interne (propriété <codeph>htmlLoader</codeph>) de ce composant.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#HTML/historyPosition"><linktext>historyPosition</linktext></link><link href="mx.controls.xml#HTML/historyForward()"><linktext>historyForward()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:HTML:historyForward"><apiName>historyForward</apiName><shortdesc>
      Navigue en avant dans la liste de l’historique du contrôle, si cela est possible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Navigue en avant dans la liste de l’historique du contrôle, si cela est possible.
     
      <p>Appeler cette méthode de l’objet HTMLLoader revient à appeler la méthode <codeph>forward()</codeph> de la propriété <codeph>window.history</codeph> dans le code JavaScript du contenu HTML.</p>
     
      <p>Cette fonction ne renvoie pas d’erreur.</p>
     
      <p>Cette méthode n’a aucun effet si elle est appelée avant la création de l’objet HTMLLoader interne (propriété <codeph>htmlLoader</codeph>) de ce composant.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#HTML/historyPosition"><linktext>historyPosition</linktext></link><link href="mx.controls.xml#HTML/historyBack()"><linktext>historyBack()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:HTML:historyGo"><apiName>historyGo</apiName><shortdesc>
      Parcourt le nombre d’étapes spécifié dans la liste de l’historique de ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>steps</apiItemName><apiType value="int"/><apiDesc>Nombre d’étapes dans la liste de l’historique à parcourir vers l’avant (positif) ou vers l’arrière (négatif).
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Parcourt le nombre d’étapes spécifié dans la liste de l’historique de ce contrôle.
     
      <p>Cette méthode parcourt la liste vers l’avant si le nombre d’étapes est positif et vers l’arrière s’il est négatif. Une navigation de zéro étape revient à appeler la méthode <codeph>reload()</codeph>.</p>
     
      <p>Cette méthode équivaut à appeler la méthode <codeph>go()</codeph> de la propriété <codeph>window.history</codeph> dans le code JavaScript du contenu HTML.</p>
     
      <p>Cette méthode n’a aucun effet si elle est appelée avant la création de l’objet HTMLLoader interne (propriété <codeph>htmlLoader</codeph>) de ce composant.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:HTML:reload"><apiName>reload</apiName><shortdesc>
      Recharge le contenu HTML à partir de la propriété location en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Recharge le contenu HTML à partir de la propriété <codeph>location</codeph> en cours.
     
      <p>Cette méthode n’a aucun effet si elle est appelée avant la création de l’objet HTMLLoader interne (propriété <codeph>htmlLoader</codeph>) de ce composant.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:HTML:htmlLoader"><apiName>htmlLoader</apiName><shortdesc>
      Objet HTMLLoader interne qui effectue le rendu du contenu HTML de ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.html:HTMLLoader"/></apiValueDef><apiDesc>
      Objet HTMLLoader interne qui effectue le rendu du contenu HTML de ce contrôle.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      Hauteur, en pixels, du contenu HTML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Hauteur, en pixels, du contenu HTML.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      Largeur, en pixels, du contenu HTML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur, en pixels, du contenu HTML.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:data:get"><apiName>data</apiName><shortdesc>
      Permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
     
      <p>Lorsque vous utilisez le contrôle comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex écrit automatiquement la valeur actuelle de l’élément dans la propriété <codeph>text</codeph> de ce contrôle.</p>
     
      <p>Vous ne pouvez pas définir cette propriété dans MXML.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:domWindow:get"><apiName>domWindow</apiName><shortdesc>
      Objet window JavaScript du cadre racine de l’objet DOM HTML situé à l’intérieur de ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet <codeph>window</codeph> JavaScript du cadre racine de l’objet DOM HTML situé à l’intérieur de ce contrôle.
     
      <p>Cette propriété a la valeur <codeph>null</codeph> jusqu’à la distribution de l’événement <codeph>htmlDOMInitialize</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:historyLength:get"><apiName>historyLength</apiName><shortdesc>
      Longueur totale de la liste de l’historique, avec les entrées précédentes et suivantes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Longueur totale de la liste de l’historique, avec les entrées précédentes et suivantes. Cette propriété a la même valeur que la propriété JavaScript <codeph>window.history.length</codeph> du contenu HTML.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#HTML/historyPosition"><linktext>historyPosition</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:historyPosition:get"><apiName>historyPosition</apiName><shortdesc>
      Position actuelle dans la liste de l’historique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Position actuelle dans la liste de l’historique.
     
      <p>La liste de l’historique correspond à l’objet <codeph>window.history</codeph> du contenu HTML. Les entrées inférieures à la position actuelle sont les entrées « précédentes » de la liste ; les entrées supérieures sont les entrées « suivantes ». Lorsque vous tentez de définir la position au-delà de la fin, elle est définie sur la fin.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:htmlHost:get"><apiName>htmlHost</apiName><shortdesc>
      L’objet HTMLHost permet de gérer les changements sur certains éléments de l’interface utilisateur dans le contenu HTML, comme la propriété window.document.title.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.html:HTMLHost"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      L’objet HTMLHost permet de gérer les changements sur certains éléments de l’interface utilisateur dans le contenu HTML, comme la propriété <codeph>window.document.title</codeph>.
     
      <p>Pour remplacer les comportements par défaut de l’objet HTMLLoader, créez une sous-classe de la classe HTMLHost, remplacez les fonctions de ses membres pour gérer différents changements de l’interface utilisateur dans le contenu HTML, puis définissez cette propriété sur une occurrence de votre sous-classe.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:htmlLoaderFactory:get"><apiName>htmlLoaderFactory</apiName><shortdesc>
      Objet IFactory qui crée une occurrence dérivée de l’objet HTMLLoader à utiliser comme propriété htmlLoader.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc>
      Objet IFactory qui crée une occurrence dérivée de l’objet HTMLLoader à utiliser comme propriété htmlLoader.
     
      <p>La valeur par défaut est un objet IFactory de l’objet HTMLLoader.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:htmlText:get"><apiName>htmlText</apiName><shortdesc>
      Indique une chaîne au format HTML que le contrôle doit afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique une chaîne au format HTML que le contrôle doit afficher.
     
      <p>La définition de cette propriété a pour effet de définir la propriété <codeph>location</codeph> sur <codeph>null</codeph> et vice versa.</p>
     
      <p>Le contenu ajouté via la propriété <codeph>loadString()</codeph> est placé dans le sandbox de sécurité de l’application. Si une application AIR inclut un contrôle HTML qui se trouve dans le sandbox de l’application et si le code HTML distant est ajouté directement dans le contrôle en définissant la propriété <codeph>htmlText</codeph>, tout script contenu dans le texte HTML est exécuté dans le sandbox de l’application.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#HTML/location"><linktext>location</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:listData:get"><apiName>listData</apiName><shortdesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété listData du composant avec les données appropriées du contrôle List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.controls.listClasses:BaseListData"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété <codeph>listData</codeph> du composant avec les données appropriées du contrôle List. Le composant peut ensuite utiliser la propriété <codeph>listData</codeph> pour initialiser la propriété <codeph>data</codeph> du rendu d’élément supplémentaire ou de l’éditeur d’élément supplémentaire.
     
      <p>Vous ne définissez pas cette propriété dans MXML ou ActionScript. Flex la définit lorsque le composant est utilisé comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.IDropInListItemRenderer.xml"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:loaded:get"><apiName>loaded</apiName><shortdesc>
      Indicateur précisant si l’événement load de JavaScript correspondant à l’opération de chargement précédente a été livré à l’objet DOM HTML de ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si l’événement <codeph>load</codeph> de JavaScript correspondant à l’opération de chargement précédente a été livré à l’objet DOM HTML de ce contrôle.
     
      <p>Cette propriété est <codeph>true</codeph> avant le déclenchement de l’événement <codeph>complete</codeph>.</p>
     
      <p>Il est possible que cette propriété ne prenne jamais la valeur <codeph>true</codeph>. Cela se produit comme lorsque l’événement <codeph>complete</codeph> n’est jamais distribué.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:location:get"><apiName>location</apiName><shortdesc>
      URL d’une page HTML devant être affichée par ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      URL d’une page HTML devant être affichée par ce contrôle.
     
      <p>La définition de cette propriété a pour effet de définir la propriété <codeph>htmlText</codeph> sur <codeph>null</codeph> et vice versa.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#HTML/htmlText"><linktext>htmlText</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:paintsDefaultBackground:get"><apiName>paintsDefaultBackground</apiName><shortdesc>
      Indique si le contenu HTML de ce contrôle a un arrière-plan blanc opaque par défaut ou non.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le contenu HTML de ce contrôle a un arrière-plan blanc opaque par défaut ou non.
     
      <p>Si cette propriété est définie sur <codeph>false</codeph>, l’arrière-plan spécifié pour ce contrôle Flex, le cas échéant, s’affiche derrière le contenu HTML.</p>
     
      <p>Toutefois, si un élément HTML possède sa propre couleur d’arrière-plan opaque (spécifiée par le style="background-color:gray", par exemple), cet arrière-plan s’affiche alors derrière cet élément.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:pdfCapability:get"><apiName>pdfCapability</apiName><shortdesc>
      Type de prise en charge PDF dans le système de l’utilisateur, définie sous forme de valeur de code d’entier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Type de prise en charge PDF dans le système de l’utilisateur, définie sous forme de valeur de code d’entier.
     
      <p>Un objet HTML ne peut afficher du contenu PDF que si la valeur de cette propriété est <codeph>PDFCapability.STATUS_OK</codeph>. La classe PDFCapability définit des constantes pour les valeurs possibles de la propriété <codeph>pdfCapability</codeph>, comme suit :</p>
     
      <adobetable class="innertable">
        
        
        
        
        
      <tgroup cols="2"><thead><row><entry>Constante PDFCapability</entry><entry>Signification</entry></row></thead><tbody><row>
         <entry><codeph>STATUS_OK</codeph></entry>
         <entry>Une version appropriée d’Acrobat Reader (8.1 ou ultérieure) est détectée et le contenu PDF peut être chargé dans un objet HTML.
           <p><i>Remarque :</i> sous Windows, si une version Acrobat Acrobat ou Acrobat Reader 7.x ou antérieure est en cours d’exécution sur le système de l’utilisateur, cette version est utilisée même lorsqu’une version ultérieure prenant en charge le chargement PDF dans un objet HTML est installée. Dans ce cas, si la valeur de la propriété <codeph>pdfCapability</codeph> est <codeph>PDFCapability.STATUS_OK</codeph> lorsqu’une application AIR tente de charger du contenu PDF dans un objet HTML, l’ancienne version d’Acrobat ou de Reader affiche une alerte, sans qu’un message d’erreur n’apparaisse dans l’exécution AIR. S’il s’agit d’une situation potentielle pour vos utilisateurs, vous pouvez envisager de leur demander de fermer Acrobat lorsque votre application s’exécute. Envisagez par exemple d’afficher ces instructions lorsque le contenu PDF ne se charge pas dans un délai acceptable.</p></entry>
        </row><row>
         <entry><codeph>ERROR_INSTALLED_READER_NOT_FOUND</codeph></entry>
         <entry>Aucune version d’Acrobat Reader n’est détectée. Un objet HTML ne peut pas afficher de contenu PDF.</entry>
        </row><row>
         <entry><codeph>ERROR_INSTALLED_READER_TOO_OLD</codeph></entry>
         <entry>Acrobat Reader a bien été détecté, mais la version est trop ancienne. Un objet HTML ne peut pas afficher de contenu PDF.</entry>
        </row><row>
         <entry><codeph>ERROR_PREFERED_READER_TOO_OLD</codeph></entry>
         <entry>Une version appropriée d’Acrobat Reader (8.1 ou ultérieure) a bien été détectée mais la version d’Acrobat Reader configurée pour gérer le contenu PDF est antérieure à Reader 8.1. Un objet HTML ne peut pas afficher du contenu PDF.</entry>
        </row></tbody></tgroup></adobetable>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:runtimeApplicationDomain:get"><apiName>runtimeApplicationDomain</apiName><shortdesc>
      Objet ApplicationDomain à utiliser pour les scripts window.runtime HTML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.system:ApplicationDomain"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet ApplicationDomain à utiliser pour les scripts <codeph>window.runtime</codeph> HTML.
     
      <p>Si cette propriété a la valeur <codeph>null</codeph> ou si elle spécifie un objet ApplicationDomain provenant d’un domaine de sécurité différent du contenu HTML, la page HTML utilise un objet <codeph>ApplicationDomain</codeph> par défaut comme domaine.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:userAgent:get"><apiName>userAgent</apiName><shortdesc>
      Chaîne d’agent utilisateur à utiliser dans les requêtes de contenu provenant de ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Chaîne d’agent utilisateur à utiliser dans les requêtes de contenu provenant de ce contrôle.
     
      <p>En définissant la propriété <codeph>URLRequestDefaults.userAgent</codeph> statique, vous pouvez définir la chaîne d’agent utilisateur par défaut employée par tous les contrôles HTML dans un domaine d’application. Lorsque aucune valeur n’est définie pour la propriété <codeph>userAgent</codeph> (ou si la valeur est définie sur <codeph>null</codeph>), la chaîne d’agent utilisateur est définie sur la valeur de la propriété statique <codeph>URLRequestDefaults.userAgent</codeph>.</p>
     
      <p>Si ni la propriété <codeph>userAgent</codeph> de ce contrôle, ni la propriété <codeph>URLRequestDefaults.userAgent</codeph> n’a de valeur définie, une valeur par défaut est utilisée comme chaîne d’agent utilisateur. Cette valeur par défaut varie selon le système d’exploitation du moteur d’exécution (par exemple, Mac OS ou Windows), ainsi que du langage et de la version du moteur d’exécution, comme le montrent les deux exemples suivants :</p>
     
      <pre>
      "Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) AdobeAIR/1.0"
      "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) AdobeAIR/1.0"
      </pre>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.net.xml#URLRequest/userAgent"><linktext>flash.net.URLRequest.userAgent</linktext></link><link href="" invalidHref="flash.net.xml#URLRequestDefaults/userAgent"><linktext>flash.net.URLRequestDefaults.userAgent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:FlexNativeMenu"><apiName>FlexNativeMenu</apiName><shortdesc>
  Le composant FlexNativeMenu fournit un wrapper pour la classe NativeMenu de l’application AIR.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;mx:FlexNativeMenu&gt</code> tag supports the following tag attributes:</p>
 
  <pre>
  &lt;mx:FlexNativeMenu
    <b>Properties</b>
    dataDescriptor="<i>mx.controls.treeClasses.DefaultDataDescriptor</i>"
    dataProvider="<i>undefined</i>"
    keyEquivalentField="keyEquivalent"
    keyEquivalentFunction="<i>undefined</i>"
    keyEquivalentModifiersFunction="<i>undefined</i>"
    labelField="label"
    labelFunction="<i>undefined</i>"
    mnemonicIndexField="mnemonicIndex"
    mnemonicIndexFunction="<i>undefined</i>"
    showRoot="true"
 
    <b>Events</b>
    itemClick="<i>No default</i>"
    menuShow="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:ILayoutManagerClient</apiBaseInterface><apiBaseInterface>mx.controls:IFlexContextMenu</apiBaseInterface><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le composant FlexNativeMenu fournit un wrapper pour la classe NativeMenu de l’application AIR. Le composant FlexNativeMenu permet de définir les menus du système d’exploitation natifs (comme une fenêtre, une application et des menus contextuels) à l’aide de techniques connues des développeurs Flex et semblables à d’autres composants de menus Flex, par exemple l’utilisation de MXML et des fournisseurs de données pour spécifier la structure des menus. Toutefois, contrairement aux composants de menus Flex, les menus qui sont définis par un composant FlexNativeMenu sont rendus par le système d’exploitation hôte dans le cadre d’une application AIR, au lieu d’être créés commme composants visuels par Flex.
 
  <p>Tout comme d’autres composants de menus Flex, pour définir la structure d’un menu représenté par un composant FlexNativeMenu, vous devez créer un fournisseur de données comme une hiérarchie XML ou un tableau d’objets contenant les données à utiliser pour définir le menu. Plusieurs propriétés peuvent être définies pour spécifier la façon dont le fournisseur de données est interprété, par exemple la propriété <codeph>labelField</codeph> pour spécifier le champ de données qui est utilisé pour l’étiquette de l’élément de menu, la propriété <codeph>keyEquivalentField</codeph> pour spécifier le champ qui définit un raccourci clavier pour l’élément de menu et la propriété <codeph>mnemonicIndexField</codeph> pour spécifier le champ qui définit la position d’index du caractère dans l’étiquette qui est utilisée comme mnémonique de l’élément de menu.</p>
 
  <p>Le fournisseur de données des éléments FlexNativeMenu peut spécifier différents attributs qui déterminent la façon dont l’élément est affiché et se comporte, comme le montre le fournisseur de données XML suivant :</p>
  <pre>
   &lt;mx:XML format="e4x" id="myMenuData">
     &lt;root>
        &lt;menuitem label="MenuItem A">
            &lt;menuitem label="SubMenuItem A-1" enabled="False"/>
            &lt;menuitem label="SubMenuItem A-2"/>
        &lt;/menuitem>
        &lt;menuitem label="MenuItem B" type="check" toggled="true"/>
        &lt;menuitem label="MenuItem C" type="check" toggled="false"/>
        &lt;menuitem type="separator"/>
        &lt;menuitem label="MenuItem D">
            &lt;menuitem label="SubMenuItem D-1"/>
            &lt;menuitem label="SubMenuItem D-2"/>
            &lt;menuitem label="SubMenuItem D-3"/>
        &lt;/menuitem>
    &lt;/root>
 &lt;/mx:XML></pre>
 
  <p>Le tableau suivant répertorie les attributs que vous pouvez spécifier, leurs types de données, leurs objectifs et la façon dont le fournisseur de données doit les représenter, si le menu utilise la classe DefaultDataDescriptor par défaut pour analyser le fournisseur de données :</p>
 
  <adobetable class="innertable">
  
  
  
  
  
  
  
  
  
  
  
  
  
 <tgroup cols="3"><thead><row><entry>Attribut</entry><entry>Type</entry><entry>Description</entry></row></thead><tbody><row>
    <entry><codeph>altKey</codeph></entry>
    <entry>Boolean</entry>
    <entry>Indique si la touche Alt est requise dans l’équivalence de touches de l’élément.</entry>
  </row><row>
    <entry><codeph>cmdKey</codeph></entry>
    <entry>Boolean</entry>
    <entry><b>Remarque :</b> cet attribut est déconseillé depuis Flex 3.2. Utilisez à la place <codeph>commandKey</codeph>. Indique si la touche Cmd est requise dans l’équivalence de touches de l’élément.</entry>
  </row><row>
    <entry><codeph>commandKey</codeph></entry>
    <entry>Boolean</entry>
    <entry>Indique si la touche Cmd est requise dans l’équivalence de touches de l’élément.</entry>
  </row><row>
    <entry><codeph>controlKey</codeph></entry>
    <entry>Boolean</entry>
    <entry>Indique si la touche Ctrl est requise dans l’équivalence de touches de l’élément.</entry>
  </row><row>
    <entry><codeph>ctrlKey</codeph></entry>
    <entry>Boolean</entry>
    <entry><b>Remarque :</b> cet attribut est déconseillé depuis Flex 3.2. Utilisez à la place <codeph>controlKey</codeph>. Indique si la touche Ctrl est requise dans l’équivalence de touches de l’élément.</entry>
  </row><row>
    <entry><codeph>enabled</codeph></entry>
    <entry>Boolean</entry>
    <entry>Indique si l’utilisateur peut sélectionner l’élément de menu (<codeph>true</codeph>) ou non (<codeph>false</codeph>). Si cela n’est pas spécifié, Flex traite l’élément comme si la valeur était <codeph>true</codeph>. Si vous utilisez le descripteur de données par défaut, les fournisseurs de données doivent utiliser un attribut XML <codeph>enabled</codeph> ou un champ d’objet pour spécifier cette caractéristique.</entry>
  </row><row>
    <entry><codeph>keyEquivalent</codeph></entry>
    <entry>String</entry>
    <entry>Spécifie un caractère clavier qui, lorsqu’il est activé, déclenche un événement comme si l’élément de menu était sélectionné. La propriété <codeph>keyEquivalentField</codeph> ou <codeph>keyEquivalentFunction</codeph> du menu détermine le nom du champ des données qui spécifie l’équivalence de touches, ou une fonction qui détermine les équivalences de touches (si le fournisseur de données est au format E4X XML, vous devez spécifier une de ces propriétés pour assigner une équivalence de touches).</entry>
  </row><row>
    <entry><codeph>label</codeph></entry>
    <entry>String</entry>
    <entry>Spécifie le texte qui s’affiche dans le contrôle. Cet élément est utilisé pour tous les types d’éléments de menu, à l’exception du <codeph>separator</codeph>. La propriété <codeph>labelField</codeph> ou <codeph>labelFunction</codeph> du menu détermine le nom du champ des données qui spécifie le libellé, ou une fonction qui détermine les libellés (si le fournisseur de données est au format E4X XML, vous devez spécifier une de ces propriétés pour afficher un libellé). Si le fournisseur de données est un tableau de chaînes, Flex utilise la valeur de chaîne comme étiquette.</entry>
  </row><row>
    <entry><codeph>mnemonicIndex</codeph></entry>
    <entry>Nombre entier</entry>
    <entry>Spécifie la position d’index des caractères de l’étiquette qui sert de mnémonique pour l’élément de menu. La propriété <codeph>mnemonicIndexField</codeph> ou <codeph>mnemonicIndexFunction</codeph> du menu détermine le nom du champ des données qui spécifie l’index mnémonique, ou une fonction qui détermine l’index mnémonique (si le fournisseur de données est au format E4X XML, vous devez spécifier une de ces propriétés pour spécifier un index mnémonique dans les données). Vous pouvez également indiquer qu’un caractère de l’étiquette est le mnémonique de l’élément de menu en incluant un caractère de soulignement sur la gauche immédiate de ce caractère.</entry>
  </row><row>
    <entry><codeph>shiftKey</codeph></entry>
    <entry>Boolean</entry>
    <entry>Indique si la touche Maj est requise dans l’équivalence de touches de l’élément.</entry>
  </row><row>
    <entry><codeph>toggled</codeph></entry>
    <entry>Boolean</entry>
    <entry>Indique si un élément de case à cocher est sélectionné. Si cela n’est pas spécifié, Flex traite l’élément comme si la valeur était <codeph>false</codeph> et l’élément n’est pas sélectionné. Si vous utilisez le descripteur de données par défaut, les fournisseurs de données doivent utiliser un attribut XML <codeph>toggled</codeph> ou un champ d’objet pour spécifier cette caractéristique.</entry>
  </row><row>
    <entry><codeph>type</codeph></entry>
    <entry>Chaîne</entry>
    <entry>Indique le type d’élément de menu. Les valeurs significatives sont <codeph>separator</codeph> et <codeph>check</codeph>. Flex traite toutes les autres valeurs, ou les nœuds sans entrée de type, comme des entrées de menu normales. Si vous utilisez le descripteur de données par défaut, les fournisseurs de données doivent utiliser un attribut XML <codeph>type</codeph> ou un champ d’objet pour spécifier cette caractéristique.</entry>
  </row></tbody></tgroup></adobetable>
 
  <p>Pour créer un menu de fenêtre, définissez le composant FlexNativeMenu comme propriété <codeph>menu</codeph> de l’occurrence Window ou WindowedApplication sur laquelle le menu doit apparaître. Pour créer un menu d’application, assignez le composant FlexNativeMenu comme propriété <codeph>menu</codeph> de l’occurrence WindowedApplication de l’application. Pour assigner un composant FlexNativeMenu comme menu contextuel d’une portion de l’interface utilisateur, appelez la méthode <codeph>setContextMenu()</codeph> de l’occurrence FlexNativeMenu en transmettant l’objet d’interface utilisateur comme argument. Appelez la méthode <codeph>display()</codeph> du composant FlexNativeMenu pour afficher le menu sous forme de menu contextuel à un endroit quelconque de l’une des fenêtres de l’application.</p>
 
  <p>Pour détecter le moment où les commandes des éléments sont déclenchées, enregistrez un écouteur pour l’événement <codeph>itemClick</codeph>. Vous pouvez également enregistrer un écouteur pour l’événement <codeph>menuShow</codeph> dans le but de déterminer à quel moment l’ouverture d’un menu ou d’un sous-menu a lieu.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.display.NativeMenu.xml"><linktext>flash.display.NativeMenu</linktext></link><link href="mx.events.xml#FlexNativeMenuEvent"><linktext>mx.events.FlexNativeMenuEvent</linktext></link></related-links><adobeApiEvent id="mx.controls:FlexNativeMenu_mx.events.FlexNativeMenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Distribué lorsqu’un élément de menu est sélectionné.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexNativeMenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.FlexNativeMenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un élément de menu est sélectionné.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FlexNativeMenu_mx.events.FlexNativeMenuEvent.MENU_SHOW_menuShow"><apiName>menuShow</apiName><shortdesc>
  Distribué avant l’affichage d’un menu ou sous-menu.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexNativeMenuEvent.MENU_SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexNativeMenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué avant l’affichage d’un menu ou sous-menu.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FlexNativeMenu:FlexNativeMenu"><apiName>FlexNativeMenu</apiName><shortdesc>
      Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FlexNativeMenu:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      Traite les propriétés définies sur le composant.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Traite les propriétés définies sur le composant.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.xml#UIComponent/commitProperties()"><linktext>mx.core.UIComponent.commitProperties()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:createAutomationIDPart"><apiName>createAutomationIDPart</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="mx.automation:IAutomationObject"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:createAutomationIDPartWithRequiredProperties"><apiName>createAutomationIDPartWithRequiredProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="mx.automation:IAutomationObject"/></apiParam><apiParam><apiItemName>properties</apiItemName><apiType value="Array"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:display"><apiName>display</apiName><shortdesc>
      Déroule ce menu à l’emplacement spécifié.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stage</apiItemName><apiType value="flash.display:Stage"/><apiDesc>L’objet Stage sur lequel afficher ce menu. 
     
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="int"/><apiDesc>Nombre de pixels horizontaux, par rapport à l’origine de la scène, sur laquelle afficher ce menu. 
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="int"/><apiDesc>Nombre de pixels verticaux, par rapport à l’origine de la scène, sur laquelle afficher ce menu. 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
      Déroule ce menu à l’emplacement spécifié. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:getAutomationChildAt"><apiName>getAutomationChildAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.automation:IAutomationObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:getAutomationChildren"><apiName>getAutomationChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc conref="mx.core.UIComponent#invalidateProperties()">
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToKeyEquivalent"><apiName>itemToKeyEquivalent</apiName><shortdesc>
      Renvoie l’équivalence de touches de l’objet de données fourni en fonction des propriétés keyEquivalentField et keyEquivalentFunction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Equivalence de touche en fonction des données.
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet à afficher.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l’équivalence de touches de l’objet de données fourni en fonction des propriétés <codeph>keyEquivalentField</codeph> et <codeph>keyEquivalentFunction</codeph>. Si la méthode ne peut pas convertir le paramètre en chaîne, elle retourne une chaîne vide.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToKeyEquivalentModifiers"><apiName>itemToKeyEquivalentModifiers</apiName><shortdesc>
      Renvoie les modificateurs d’équivalence de touches de l’objet de données fourni en fonction de la propriété keyEquivalentModifiersFunction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Tableau des modificateurs d’équivalence de touches en fonction des données
     </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet à afficher.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie les modificateurs d’équivalence de touches de l’objet de données fourni en fonction de la propriété <codeph>keyEquivalentModifiersFunction</codeph>. Si la méthode ne peut pas convertir le paramètre en tableau de modificateurs, elle retourne un tableau vide.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      Renvoie la chaîne à utiliser comme étiquette d’élément de menu pour l’objet de données fourni en fonction des propriétés labelField et labelFunction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Chaîne à afficher en fonction des données.
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet à afficher.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la chaîne à utiliser comme étiquette d’élément de menu pour l’objet de données fourni en fonction des propriétés <codeph>labelField</codeph> et <codeph>labelFunction</codeph>. Si la méthode ne peut pas convertir le paramètre en chaîne, elle retourne un espace unique.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToMnemonicIndex"><apiName>itemToMnemonicIndex</apiName><shortdesc>
      Renvoie l’index mnémonique de l’objet de données fourni en fonction des propriétés mnemonicIndexField et mnemonicIndexFunction.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Index mnémonique en fonction des données.
     </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet à afficher.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie l’index mnémonique de l’objet de données fourni en fonction des propriétés <codeph>mnemonicIndexField</codeph> et <codeph>mnemonicIndexFunction</codeph>. Si la méthode ne peut pas convertir le paramètre en nombre entier, elle retourne la valeur -1.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:parseLabelToMnemonicIndex"><apiName>parseLabelToMnemonicIndex</apiName><shortdesc>
      Extrait l’index mnémonique d’une étiquette en fonction de la présence d’un caractère de soulignement.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      Extrait l’index mnémonique d’une étiquette en fonction de la présence d’un caractère de soulignement. Elle trouve le caractère de soulignement de début s’il existe et l’utilise comme index.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:parseLabelToString"><apiName>parseLabelToString</apiName><shortdesc>
      Détermine l’étiquette réelle à utiliser pour le composant NativeMenuItem en supprimant les caractères de soulignement et en convertissant les caractères de soulignement ignorés, s’il en existe.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      Détermine l’étiquette réelle à utiliser pour le composant NativeMenuItem en supprimant les caractères de soulignement et en convertissant les caractères de soulignement ignorés, s’il en existe.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:resolveAutomationIDPart"><apiName>resolveAutomationIDPart</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>criteria</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:setContextMenu"><apiName>setContextMenu</apiName><shortdesc>
      Définit le menu contextuel du composant InteractiveObject sur le menu natif sous-jacent.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>component</apiItemName><apiType value="flash.display:InteractiveObject"/></apiParam></apiOperationDef><apiDesc>
      Définit le menu contextuel du composant InteractiveObject sur le menu natif sous-jacent.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:unsetContextMenu"><apiName>unsetContextMenu</apiName><shortdesc>
      Annule la définition du menu contextuel du composant InteractiveObject qui a été défini sur le menu natif sous-jacent.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>component</apiItemName><apiType value="flash.display:InteractiveObject"/></apiParam></apiOperationDef><apiDesc>
      Annule la définition du menu contextuel du composant InteractiveObject qui a été défini sur le menu natif sous-jacent.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateNow"><apiName>validateNow</apiName><shortdesc>
      Valide et actualise les propriétés et la mise en forme de cet objet, puis le retrace si nécessaire.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Valide et actualise les propriétés et la mise en forme de cet objet, puis le retrace si nécessaire.
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateSize"><apiName>validateSize</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FlexNativeMenu:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      Objet délégué qui traite la fonction d’automatisation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Objet délégué qui traite la fonction d’automatisation.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationName:get"><apiName>automationName</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationTabularData:get"><apiName>automationTabularData</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationValue:get"><apiName>automationValue</apiName><shortdesc conref="mx.automation.IAutomationObject#automationValue">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.automation.IAutomationObject#automationValue">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      Objet qui accède aux objets du fournisseur de données et les manipule.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.controls.menuClasses:IMenuDataDescriptor"/></apiValueDef><apiDesc>
      Objet qui accède aux objets du fournisseur de données et les manipule. Le contrôle FlexNativeMenu délègue au descripteur de données pour obtenir des informations sur ses données. Ces données sont ensuite utilisées pour analyser et déplacer la source de données. Le descripteur de données défini pour le contrôle FlexNativeMenu est utilisé pour tous les menus enfant et les sous-menus.
     
      <p>Lorsque vous spécifiez cette propriété comme attribut dans MXML, vous devez utiliser une référence au descripteur de données et pas le nom de chaîne du descripteur. Utilisez le format suivant pour définir la propriété :</p>
     
     <pre>&lt;mx:FlexNativeMenu id="flexNativeMenu" dataDescriptor="{new MyCustomDataDescriptor()}"/></pre>
     
      <p>Vous pouvez également spécifier la propriété dans MXML comme sous-balise imbriquée, comme le montre l’exemple suivant :</p>
     
      <pre>&lt;mx:FlexNativeMenu>
      &lt;mx:dataDescriptor>
         &lt;myCustomDataDescriptor>
      &lt;/mx:dataDescriptor>
      ...</pre>
     
      <p>Valeur par défaut d’une occurrence interne de la classe DefaultDataDescriptor.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Hiérarchie des objets qui sont utilisés pour définir la structure des éléments de menu dans le composant NativeMenu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      Hiérarchie des objets qui sont utilisés pour définir la structure des éléments de menu dans le composant NativeMenu. Les objets de données individuels définissent les éléments de menu et les éléments dotés d’éléments enfant deviennent des menus et sous-menus.
     
      <p>Le contrôle FlexNativeMenu gère l’objet de données source comme suit :</p>
     
      <ul>
        <li>Une chaîne contenant du texte XML valide est convertie en objet XML.</li>
        <li>Un objet XMLNode est converti en objet XML.</li>
        <li>Un objet XMLList est converti en objet XMLListCollection.</li>
        <li>N’importe quel objet qui implémente l’interface ICollectionView est distribué à un objet ICollectionView.</li>
        <li>Un objet Array est converti en objet ArrayCollection.</li>
        <li>Tout autre type d’objet est enroulé dans un objet Array (l’objet étant sa seule entrée).</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:hasRoot:get"><apiName>hasRoot</apiName><shortdesc conref="mx.controls.Menu#hasRoot">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.Menu#hasRoot">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:initialized:get"><apiName>initialized</apiName><shortdesc conref="mx.core.UIComponent#initialized">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#initialized">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:keyEquivalentField:get"><apiName>keyEquivalentField</apiName><shortdesc>
      Nom du champ dans le fournisseur de données qui détermine l’équivalence de touches de chaque élément de menu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"keyEquivalent"
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ dans le fournisseur de données qui détermine l’équivalence de touches de chaque élément de menu. Le jeu de valeurs est défini dans la classe Keyboard, dans les constantes <codeph>KEYNAME_XXXX</codeph>. Par exemple, consultez cette liste pour connaître la valeur d’un caractère de contrôle comme Début, Inser, etc.
     
      <p>Si vous définissez la propriété <codeph>keyEquivalentFunction</codeph>, elle est ignorée.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.ui.Keyboard.xml"><linktext>flash.ui.Keyboard</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:keyEquivalentFunction:get"><apiName>keyEquivalentFunction</apiName><shortdesc>
      Fonction qui détermine l’équivalence de touches de chaque élément de menu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction qui détermine l’équivalence de touches de chaque élément de menu. Si vous omettez cette propriété, Flex utilise le contenu du champ ou de l’attribut spécifié par la propriété <codeph>keyEquivalentField</codeph>. Si vous spécifiez cette propriété, Flex ignore toute valeur de la propriété <codeph>keyEquivalentField</codeph>.
     
      <p>La propriété <codeph>keyEquivalentFunction</codeph> permet de gérer la mise en forme, la localisation et l’indépendance des plates-formes.</p>
     
      <p>La fonction d’équivalence de touches doit prendre un seul argument, qui est l’élément dans le fournisseur de données et renvoyer une chaîne.</p>
     
      <pre><codeph>myKeyEquivalentFunction(item:Object):String</codeph></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.ui.Keyboard.xml"><linktext>flash.ui.Keyboard</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:keyEquivalentModifiersFunction:get"><apiName>keyEquivalentModifiersFunction</apiName><shortdesc>
      Fonction qui détermine les modificateurs d’équivalence de touches de chaque élément de menu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      Fonction qui détermine les modificateurs d’équivalence de touches de chaque élément de menu. Si vous omettez cette propriété, Flex utilise sa propre fonction pour déterminer le tableau de modificateurs en recherchant dans les données du fournisseur de données la présence des champs (booléens) suivants : <codeph>altKey</codeph>, <codeph>commandKey</codeph>, <codeph>controlKey</codeph> et <codeph>shiftKey</codeph>.
     
      <p>La propriété <codeph>keyEquivalentModifiersFunction</codeph> permet de gérer la mise en forme, la localisation et l’indépendance des plates-formes.</p>
     
      <p>Les modificateurs d’équivalence de touches doivent prendre un seul argument, qui est l’élément dans le fournisseur de données et renvoyer un tableau de noms de touches de modificateurs.</p>
     
      <pre><codeph>myKeyEquivalentModifiersFunction(item:Object):Array</codeph></pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:labelField:get"><apiName>labelField</apiName><shortdesc>
      Nom du champ dans le fournisseur de données qui détermine le texte à afficher pour chaque élément de menu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
     </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ dans le fournisseur de données qui détermine le texte à afficher pour chaque élément de menu. Si le fournisseur de données est un tableau de chaînes, Flex utilise chaque valeur de chaîne comme libellé. Si le fournisseur de données est un objet E4X XML, vous devez définir explicitement cette propriété. Par exemple, si chaque élément XML d’un objet E4X XML inclut un attribut « label » qui comporte le texte à afficher pour chaque élément de menu, définissez la propriété labelField sur <codeph>"@label"</codeph>.
     
      <p>Dans une étiquette, vous pouvez spécifier le caractère à utiliser comme index mnémonique en le faisant précéder d’un caractère de soulignement. Par exemple, la valeur d’étiquette <codeph>"C_ut"</codeph> définit l’index mnémonique sur 1. Seul le premier caractère de soulignement présent est utilisé dans ce but. Pour afficher un caractère de soulignement littéral dans l’étiquette, utilisez deux caractères de soulignement. Par exemple, la valeur d’étiquette <codeph>"C__u_t"</codeph> donnera un élément de menu portant l’étiquette « C_ut » et doté d’un index mnémonique de 3 (le caractère « t »). Si le champ défini dans la propriété <codeph>mnemonicIndexField</codeph> est présent et défini sur une valeur supérieure à zéro, cette valeur a priorité par rapport à toute valeur d’index mnémonique spécifiée par un caractère de soulignement.</p>
     
      <p>Si vous définissez la propriété <codeph>labelFunction</codeph>, elle est ignorée.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Fonction qui détermine le texte à afficher pour chaque élément de menu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      Fonction qui détermine le texte à afficher pour chaque élément de menu. La fonction d’étiquette doit trouver le ou les champs appropriés dans le fournisseur de données et renvoyer une chaîne à afficher.
     
      <p>Si vous omettez cette propriété, Flex utilise le contenu du champ ou de l’attribut spécifié par la propriété <codeph>labelField</codeph>. Si vous spécifiez cette propriété, Flex ignore toute valeur de la propriété <codeph>labelField</codeph>.</p>
     
      <p>La propriété <codeph>labelFunction</codeph> permet de gérer la mise en forme, la localisation et l’indépendance des plates-formes.</p>
     
      <p>La fonction d’étiquette doit prendre un seul argument, qui est l’élément dans le fournisseur de données et renvoyer une chaîne.</p>
     
      <pre><codeph>myLabelFunction(item:Object):String</codeph></pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:mnemonicIndexField:get"><apiName>mnemonicIndexField</apiName><shortdesc>
      Nom du champ dans le fournisseur de données qui détermine l’index mnémonique de chaque élément de menu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"mnemonicIndex"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ dans le fournisseur de données qui détermine l’index mnémonique de chaque élément de menu.
     
      <p>Si le champ spécifié par cette propriété contient un nombre supérieur à zéro, cet index mnémonique a priorité par rapport à un autre index spécifié par un caractère de soulignement dans l’étiquette.</p>
     
      <p>Si vous définissez la propriété <codeph>mnemonicIndexFunction</codeph>, elle est ignorée.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FlexNativeMenu/labelField"><linktext>labelField</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:mnemonicIndexFunction:get"><apiName>mnemonicIndexFunction</apiName><shortdesc>
      Fonction qui détermine l’index mnémonique de chaque élément de menu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      Fonction qui détermine l’index mnémonique de chaque élément de menu.
     
      <p>Si vous omettez cette propriété, Flex utilise le contenu du champ ou de l’attribut spécifié par la propriété <codeph>mnemonicIndexField</codeph>. Si vous spécifiez cette propriété, Flex ignore toute valeur de la propriété <codeph>mnemonicIndexField</codeph>.</p>
     
      <p>Si cette propriété est définie et que la fonction retourne un nombre supérieur à zéro pour l’élément de données, l’index mnémonique retourné a priorité par rapport à celui qui est spécifié par un caractère de soulignement dans l’étiquette.</p>
     
      <p>La propriété <codeph>mnemonicIndexFunction</codeph> permet de gérer la mise en forme, la localisation et l’indépendance des plates-formes.</p>
     
      <p>La fonction d’index mnémonique doit prendre un seul argument, qui est l’élément dans le fournisseur de données et renvoyer un nombre entier.</p>
     
      <pre><codeph>myMnemonicIndexFunction(item:Object):int</codeph></pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:nativeMenu:get"><apiName>nativeMenu</apiName><shortdesc>
       Renvoie l’occurrence flash.display.NativeMenu gérée par cet objet, ou la valeur null s’il n’en existe aucune.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:NativeMenu"/></apiValueDef><apiDesc>
       Renvoie l’occurrence flash.display.NativeMenu gérée par cet objet, ou la valeur null s’il n’en existe aucune. Toute modification apportée directement à l’occurrence NativeMenu sous-jacente risque d’être perdue lorsque des changements sont apportés au menu ou au fournisseur de données sous-jacent.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UIComponent#nestLevel">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UIComponent#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:numAutomationChildren:get"><apiName>numAutomationChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc conref="mx.core.UIComponent#processedDescriptors">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#processedDescriptors">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:showInAutomationHierarchy:get"><apiName>showInAutomationHierarchy</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      Indicateur booléen précisant si le nœud racine du fournisseur de données doit être affiché.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur booléen précisant si le nœud racine du fournisseur de données doit être affiché.
     
      <p>Si le fournisseur de données comporte un nœud racine et si la propriété <codeph>showRoot</codeph> est définie sur <codeph>false</codeph>, les éléments du menu de niveau supérieur affichés par le contrôle FlexNativeMenu correspondent aux descendants immédiats du nœud racine.</p>
     
      <p>Cet indicateur n’a aucun effet lorsque vous utilisez un fournisseur de données sans nœud racine, comme l’objet List ou Array.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FlexNativeMenu/hasRoot"><linktext>hasRoot</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Indicateur déterminant si un objet a traversé les trois phases de validation de mise en forme (si besoin était).</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indicateur déterminant si un objet a traversé les trois phases de validation de mise en forme (si besoin était).
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemHistoryButton"><apiName>FileSystemHistoryButton</apiName><shortdesc>
  Le contrôle FileSystemHistoryButton définit un contrôle unique à deux boutons : un bouton principal sur la gauche et un bouton secondaire sur la droite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemHistoryButton&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemHistoryButton
    <strong>Properties</strong>
    dataProvider="<i>undefined</i>"
 
    <strong>Events</strong>
    itemClick="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:PopUpButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle FileSystemHistoryButton définit un contrôle unique à deux boutons : un bouton principal sur la gauche et un bouton secondaire sur la droite.
 
  <p>Le bouton principal peut présenter une étiquette de texte, une icône, ou les deux, sur sa face. Lorsqu’un utilisateur clique sur le bouton principal, le contrôle distribue un événement <codeph>click</codeph>.</p>
 
  <p>Lorsque l’utilisateur clique sur le bouton secondaire (à droite), un menu déroulant qui est renseigné par la propriété <codeph>dataProvider</codeph> apparaît. Lorsqu’un utilisateur sélectionne un élément du menu déroulant, le contrôle distribue un événement <codeph>itemClick</codeph>.</p>
 
  <p>En général, vous utilisez deux boutons FileSystemHistoryButton avec un contrôle FileSystemList ou FileSystemDataGrid pour implémenter un contrôle « Back » ou « Forward » permettant à l’utilisateur de revenir en arrière ou d’avancer dans l’historique de navigation du contrôle FileSystemList ou FileSystemDataGrid. Pour renseigner la propriété <codeph>dataProvider</codeph> d’un contrôle FileSystemHistoryButton, utilisez la liaison des données pour définir sa propriété <codeph>dataProvider</codeph> sur la propriété <codeph>backHistory</codeph> ou <codeph>forwardHistory</codeph> du contrôle FileSystemList ou FileSystemDataGrid. Pour l’activer ou la désactiver, liez sa propriété <codeph>enabled</codeph> sur la propriété <codeph>canNavigateBack</codeph> ou <codeph>canNavigateForward</codeph> du contrôle FileSystemList ou FileSystemDataGrid. Si vous définissez ces propriétés à l’aide de la liaison des données, Flex les met automatiquement à jour lorsque l’utilisateur parcourt le contrôle FileSystemList ou FileSystemDataGrid.</p>
 
  <p>Le bouton ne permet pas de déclencher une navigation seule. Vous devez écrire les écouteurs d’événements qui répondent aux événements <codeph>click</codeph> et <codeph>itemClick</codeph> pour que le bouton soit fonctionnel. En général, votre code appelle la méthode <codeph>navigateBack()</codeph> ou <codeph>navigateForward()</codeph> du contrôle FileSystemList ou FileSystemDataGrid pour parcourir le contrôle. Pour un événement <codeph>click</codeph>, il n’est pas nécessaire de transmettre un argument à ces méthodes. Pour un événement <codeph>itemClick</codeph>, transmettez l’argument <codeph>event.index</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#FileSystemList"><linktext>mx.controls.FileSystemList</linktext></link><link href="mx.controls.xml#FileSystemDataGrid"><linktext>mx.controls.FileSystemDataGrid</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemHistoryButton_mx.events.MenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Distribué lorsqu’un utilisateur sélectionne un élément dans le menu contextuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un utilisateur sélectionne un élément dans le menu contextuel.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemHistoryButton:FileSystemHistoryButton"><apiName>FileSystemHistoryButton</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:FileSystemHistoryButton:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Fournisseur de données du contrôle FileSystemHistoryButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Fournisseur de données du contrôle FileSystemHistoryButton. Il doit s’agit d’une collection d’objets File contenant les emplacements des répertoires (généralement la propriété <codeph>backHistory</codeph> ou <codeph>forwardHistory</codeph> d’un contrôle FileSystemList ou FileSystemDataGrid.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemComboBox"><apiName>FileSystemComboBox</apiName><shortdesc>
  Le contrôle FileSystemComboBox définit un contrôle de liste déroulante pour remonter en haut de la chaîne des répertoires ancêtres à partir d’un répertoire spécifié d’un système de fichiers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="editableUpSkin"/><Exclude kind="style" name="editableOverSkin"/><Exclude kind="style" name="editableDownSkin"/><Exclude kind="style" name="editableDisabledSkin"/><Exclude kind="property" name="editable"/><styles><style format="EmbeddedFile" inherit="no" name="directoryIcon" owner="mx.controls:FileSystemComboBox" playerVersion="AIR1.1" type="Class">
<description>
  Spécifie l’icône indiquant un répertoire. L’icône par défaut se trouve dans le fichier Assets.swf. Dans MXML, vous pouvez utiliser la syntaxe suivante pour définir cette propriété : <codeph>directoryIcon="@Embed(source=’directoryIcon.jpg’);"</codeph>
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="computerIcon" owner="mx.controls:FileSystemComboBox" playerVersion="AIR1.1" type="Class">
<description>
  Spécifie l’icône qui indique les répertoires racine de l’ordinateur. Il n’existe aucune icône par défaut. Dans MXML, vous pouvez utiliser la syntaxe suivante pour définir cette propriété : <codeph>computerIcon="@Embed(source=’computerIcon.jpg’);"</codeph>
 
  </description>
<default>null
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemComboBox&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemComboBox
    <strong>Properties</strong>
    directory="<i>null</i>"
    indent="8"
    showIcons="true"
 
    <strong>Styles</strong>
    computerIcon="<i>null</i>"
    directoryIcon="<i>TreeNodeIcon</i>"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:ComboBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle FileSystemComboBox définit un contrôle de liste déroulante pour remonter en haut de la chaîne des répertoires ancêtres à partir d’un répertoire spécifié d’un système de fichiers. Ce contrôle s’utilise souvent avec les contrôles FileSystemList et FileSystemTree pour modifier le répertoire actuel affiché par ces contrôles.
 
  <p>Contrairement au contrôle ComboBox standard, pour renseigner la propriété <codeph>dataProvider</codeph> du contrôle FileSystemComboBox, vous devez définir la propriété <codeph>directory</codeph>. Ce contrôle définit ensuite automatiquement la propriété <codeph>dataProvider</codeph> sur un élément ArrayCollection d’objets File incluant tous les répertoires ancêtres du répertoire spécifié, à partir de l’objet File <codeph>COMPUTER</codeph> et jusqu’au répertoire spécifié.</p>
 
  <p>Lorsque vous sélectionnez une entrée dans la liste déroulante, ce contrôle distribue un événement <codeph>change</codeph>. Après la distribution de l’événement, le fournisseur de données (et par conséquent la liste déroulante) comporte les ancêtres des répertoires sélectionnés.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link><link href="mx.controls.xml#FileSystemList"><linktext>mx.controls.FileSystemList</linktext></link><link href="mx.controls.xml#FileSystemTree"><linktext>mx.controls.FileSystemTree</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemComboBox_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  Distribué lorsque le répertoire sélectionné affiché par ce contrôle change, pour une raison ou pour une autre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le répertoire sélectionné affiché par ce contrôle change, pour une raison ou pour une autre.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemComboBox:FileSystemComboBox"><apiName>FileSystemComboBox</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:FileSystemComboBox:COMPUTER"><apiName>COMPUTER</apiName><shortdesc>
      Constante pouvant être utilisée comme valeur pour la propriété directory, représentant un répertoire de niveau supérieur pseudo appelé « Computer ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc>
      Constante pouvant être utilisée comme valeur pour la propriété <codeph>directory</codeph>, représentant un répertoire pseudo de niveau supérieur appelé « Computer ». Ce répertoire pseudo contient les répertoires racine (C:\ et D:\ sur Windows ou / sur Macintosh).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemComboBox:directory:get"><apiName>directory</apiName><shortdesc>
      Objet File représentant le répertoire dont les ancêtres doivent s’afficher dans ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet File représentant le répertoire dont les ancêtres doivent s’afficher dans ce contrôle. Le contrôle affiche chaque répertoire ancêtre sous forme d’entrée séparée dans la liste déroulante.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemComboBox:indent:get"><apiName>indent</apiName><shortdesc>
      Nombre de pixels pour le retrait de chaque entrée dans la liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>8
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de pixels pour le retrait de chaque entrée dans la liste déroulante.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemComboBox:showIcons:get"><apiName>showIcons</apiName><shortdesc>
      Indicateur précisant si les icônes s’affichent avant le nom des répertoires dans la liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si les icônes s’affichent avant le nom des répertoires dans la liste déroulante.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemEnumerationMode"><apiName>FileSystemEnumerationMode</apiName><shortdesc>
  La classe FileSystemEnumerationMode définit les valeurs constantes de la propriété enumerationMode des méthodes FileSystemList, FileSystemDataGrid et FileSystemTree.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe FileSystemEnumerationMode définit les valeurs constantes de la propriété <codeph>enumerationMode</codeph> des méthodes FileSystemList, FileSystemDataGrid et FileSystemTree.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#FileSystemList/enumerationMode"><linktext>mx.controls.FileSystemList.enumerationMode</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/enumerationMode"><linktext>mx.controls.FileSystemDataGrid.enumerationMode</linktext></link><link href="mx.controls.xml#FileSystemTree/enumerationMode"><linktext>mx.controls.FileSystemTree.enumerationMode</linktext></link></related-links><apiValue id="mx.controls:FileSystemEnumerationMode:DIRECTORIES_FIRST"><apiName>DIRECTORIES_FIRST</apiName><shortdesc>
      Indique que les répertoires doivent être affichés, puis les fichiers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoriesFirst</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Indique que les répertoires doivent être affichés, puis les fichiers.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:DIRECTORIES_ONLY"><apiName>DIRECTORIES_ONLY</apiName><shortdesc>
      Indique que les répertoires doivent être affichés, mais pas les fichiers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoriesOnly</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Indique que les répertoires doivent être affichés, mais pas les fichiers.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:FILES_AND_DIRECTORIES"><apiName>FILES_AND_DIRECTORIES</apiName><shortdesc>
      Indique que les fichiers et les répertoires doivent être affichés ensemble.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>filesAndDirectories</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Indique que les fichiers et les répertoires doivent être affichés ensemble.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:FILES_FIRST"><apiName>FILES_FIRST</apiName><shortdesc>
      Indique que les fichiers doivent être affichés en premier, puis les répertoires.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>filesFirst</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Indique que les fichiers doivent être affichés en premier, puis les répertoires.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:FILES_ONLY"><apiName>FILES_ONLY</apiName><shortdesc>
      Indique que les fichiers doivent être affichés en premier, mais pas les répertoires.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>filesOnly</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Indique que les fichiers doivent être affichés en premier, mais pas les répertoires.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>