<?xml version="1.0"?>
<apiPackage id="mx.controls"><apiName>mx.controls</apiName><apiDetail/><apiClassifier id="mx.controls:FileSystemDataGrid"><apiName>FileSystemDataGrid</apiName><shortdesc>
  FileSystemDataGrid コントロールを使用すると、単独のファイルシステムディレクトリの内容をデータグリッドフォーマットで表示できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="EmbeddedFile" inherit="no" name="fileIcon" owner="mx.controls:FileSystemDataGrid" playerVersion="AIR1.1" type="Class">
<description>
  ファイルを示すアイコンを指定します。デフォルトのアイコンは、Assets.swf ファイルに置かれています。 MXML では、<codeph>fileIcon="@Embed(source='fileIcon.jpg');"</codeph> というシンタックスを使用して、このプロパティを設定できます。
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="directoryIcon" owner="mx.controls:FileSystemDataGrid" playerVersion="AIR1.1" type="Class">
<description>
  ディレクトリを示すアイコンを指定します。 デフォルトのアイコンは、Assets.swf ファイルに置かれています。 MXML では、構文 <codeph>directoryIcon="@Embed(source='directoryIcon.jpg');"</codeph> を使用してこのプロパティを設定できます。
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemDataGrid&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemDataGrid
    <strong>Properties</strong>
    dateFormatString=""
    directory="<i>null</i>"
    enumerationMode="directoriesFirst"
    extensions="<i>null</i>"
    filterFunction="<i>null</i>"
    nameCompareFunction="<i>null</i>"
    selectedPath="<i>null</i>"
    selectedPaths="<i>null</i>"
    showExtensions="true"
    showHidden="false"
    showIcons="true"
 
    <strong>Styles</strong>
    directoryIcon="<i>TreeNodeIcon</i>"
    fileIcon="<i>TreeNodeIcon</i>"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
    directoryChanging="<i>No default</i>"
    fileChoose="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:DataGrid</apiBaseClassifier></apiClassifierDef><apiDesc>
  FileSystemDataGrid コントロールを使用すると、単独のファイルシステムディレクトリの内容をデータグリッドフォーマットで表示できます。
 
  <p>各アイテムで表示される情報には、それぞれの名前（必要に応じて一般的なアイコンを表示）、タイプ、サイズ、作成日および変更日があります。 これを行うために、FileSystemDataGrid は、5 つの列（DataGridColumn インスタンス） -- <codeph>nameColumn</codeph>、<codeph>typeColumn</codeph>、<codeph>sizeColumn</codeph>、<codeph>creationDateColumn</codeph> および <codeph>modificationDateColumn</codeph> -- を自動的に作成し、<codeph>columns</codeph> プロパティをこれらの 5 つのインスタンスの配列に設定します。 それぞれの列のインスタンスは、適切な <codeph>labelFunction</codeph> や <codeph>sortCompareFunction</codeph> などを持つように自動的に設定されます。 これら 5 つの列の一部が不要な場合や列の順番を変更する場合は、<codeph>columns</codeph> プロパティを再設定します。 <codeph>labelFunction</codeph> の変更など、列をカスタマイズする場合は、単にそのプロパティを該当の列オブジェクトに再度割り当てます。</p>
 
  <p>表示データを変更するには、<codeph>dataProvider</codeph> プロパティを使用するのではなく、<codeph>directory</codeph> プロパティを設定します。 これにより、ディレクトリの内容が列挙され、自動的に <codeph>dataProvider</codeph> プロパティに値が設定されます。 <codeph>dataProvider</codeph> をユーザー自身が設定することは避けてください。</p>
 
  <p>次の例に示すように、File インスタンスへの <codeph>directory</codeph> プロパティを設定します。</p>
  <pre>&lt;mx:FileSystemDataGrid directory="{File.desktopDirectory}"/></pre>
 
  <p><codeph>enumerationMode</codeph> を設定することで、ファイルやサブディレクトリまたはその両方を表示するかどうか指定できます。 両方表示する場合は、ディレクトリを最初に表示、ファイルを最初に表示、両方を混在して表示の 3 種類の表示方法が用意されています。</p>
 
  <p><codeph>extensions</codeph> プロパティを設定して、指定の拡張子を持つファイルのみが表示されるように表示アイテムをフィルター処理できます。 <codeph>showHidden</codeph> プロパティによって、通常はオペレーティングシステムが非表示にしているファイルおよびサブディレクトリをコントロールに表示するかどうかを制御できます。 <codeph>filterFunction</codeph> を指定するとカスタムフィルター処理が可能です。また、<codeph>nameCompareFunction</codeph> を指定するとカスタムソートが可能です。</p>
 
  <p>AIR ではファイルシステムの変更通知をサポートしていないので、ファイルの作成、削除、移動または名前変更が行われても自動的に反映されません。つまり、ファイルシステムの古い情報が表示されている可能性があります。 ただし、<codeph>refresh()</codeph> を呼び出すことで、現在の <codeph>directory</codeph> を再列挙することができます。 例えば、コントロールの表示内容が最新でなくなるファイル操作を実行した場合や、ユーザーがアプリケーションを非アクティブにして再アクティブにした場合に、この方法を使用できます。</p>
 
  <p><codeph>showIcons</codeph> プロパティを使用して、アイコンを表示または非表示にできます。また、<codeph>showExtensions</codeph> を使用して、ファイル拡張子を表示または非表示にできます。</p>
 
  <p>このコントロールには <codeph>findItem()</codeph> および <codeph>findIndex()</codeph> という 2 つのメソッドが用意されており、表示ファイルおよび表示サブディレクトリから、指定された <codeph>nativePath</codeph> を持つものを検索できます。</p>
 
  <p><codeph>selectedPath</codeph> および <codeph>selectedPaths</codeph> の 2 種類のプロパティは、<codeph>selectedItem</codeph> および <codeph>selectedItems</codeph>、または <codeph>selectedIndex</codeph> および <codeph>selectedIndices</codeph> と同様に機能しますが、<codeph>nativePath</codeph> ストリングを使用して選択範囲を指定できます。 特定のアイテムがあらかじめ選択されているディレクトリを表示する必要がある場合、ディレクトリの列挙時にコントロールが作成する File アイテムがまだないので、これらのプロパティを使用すると便利です。</p>
 
  <p>このコントロールでは、ユーザーはマウスまたはキーボードを使用して他のディレクトリに移動できます。 ユーザーは、サブディレクトリをダブルクリックする、サブディレクトリが選択された状態で Enter キーまたは Ctrl キーを押しながら下矢印キーを押す、COMPUTER ディレクトリが表示されていない状態で Ctrl キーを押しながら上矢印キーを押すという方法でディレクトリの変更を試行できます。また、以前に移動したディレクトリが存在する場合は、Ctrl キーを押しながら左矢印キーを押して戻ったり、以前のディレクトリから戻ってきた場合は、Ctrl キーを押しながら右矢印キーを押してそのディレクトリに進んだりできます。 ユーザーが、現在表示されているディレクトリの変更を試行すると、キャンセル可能な <codeph>directoryChanging</codeph> イベントがコントロールから送出されます。 <codeph>event.preventDefault()</codeph> を呼び出すことによってこのイベントをキャンセルしない場合は、コントロールに新しいディレクトリの内容が表示され、<codeph>directory</codeph> プロパティが変更されます。 <codeph>directory</codeph> プロパティが変更されるたびに <codeph>directoryChange</codeph> イベントが送出され、変更が通知されます。</p>
 
  <p>「上へ」および「下へ」移動する操作をサポートするため、FileSystemList には <codeph>canNavigateUp</codeph> および <codeph>canNavigateDown</codeph> プロパティと、<codeph>navigateUp()</codeph> および <codeph>navigateDown()</codeph> メソッドが用意されています。 また、任意のディレクトリに移動する <codeph>navigateTo()</codeph> も用意されています。</p>
 
  <p>ユーザーが移動したディレクトリはコントロールによって管理されるので、「戻る」および「進む」の移動操作を容易にサポートできます。 詳細については、<codeph>backHistory</codeph>、<codeph>forwardHistory</codeph>、<codeph>canNavigateBack</codeph> および <codeph>canNavigateForward</codeph> プロパティと、<codeph>navigateBack()</codeph> および <codeph>navigateForward()</codeph> メソッドを参照してください。</p>
 
  <p>メモ：各アイテムに使用されるアイコンは、汎用のファイルアイコンおよびディレクトリアイコンです。これらは、<codeph>fileIcon</codeph> および <codeph>directoryIcon</codeph> スタイルを使用して設定できます。 Flex のリストベースのコントロールで表示できるアイコンは現時点では埋め込みアイコンのみで、実行時に読み込まれるアイコンは使用できません。 したがって、オペレーティングシステムで実際には表示されるファイルシステムアイコンは、File の <codeph>icon</codeph> プロパティを使用して AIR からアクセスできても、FileSystemDataGrid では表示できません。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemDataGrid_mx.events.FileEvent.FILE_CHOOSE_fileChoose"><apiName>fileChoose</apiName><shortdesc>
  ユーザーがファイルをダブルクリックして選択した場合か、ファイルを選択して Enter キーを押した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.FILE_CHOOSE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがファイルをダブルクリックして選択した場合か、ファイルを選択して Enter キーを押した場合に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemDataGrid_mx.events.FileEvent.DIRECTORY_OPENING_directoryChanging"><apiName>directoryChanging</apiName><shortdesc>
  ユーザーが、このコントロールで表示されているディレクトリを変更しようとしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_OPENING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが、このコントロールで表示されているディレクトリを変更しようとしたときに送出されます。
 
  <p>ユーザーは、サブディレクトリをダブルクリックする、サブディレクトリが選択された状態で Enter キーまたは Ctrl キーを押しながら下矢印キーを押す、COMPUTER ディレクトリが表示されていない状態で Ctrl キーを押しながら上矢印キーを押すという方法でディレクトリの変更を試行できます。また、以前に移動したディレクトリが履歴リストに存在する場合は、Ctrl キーを押しながら左矢印キーを押して戻ったり、以前のディレクトリから戻ってきた場合は、Ctrl キーを押しながら右矢印キーを押してそのディレクトリに進んだりできます。</p>
 
  <p>このイベントはキャンセル可能です。 <codeph>event.preventDefault()</codeph> を呼び出すと、ディレクトリは変更されません。</p>
 
  <p><codeph>directory</codeph> プロパティが変更され、その新しいディレクトリ内のアイテムの File インスタンスが <codeph>dataProvider</codeph> に含まれた後に、<codeph>directoryChange</codeph> イベントが送出されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemDataGrid_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  このコントロールで表示されている選択したディレクトリが変更された場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  このコントロールで表示されている選択したディレクトリが変更された場合に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemDataGrid:FileSystemDataGrid"><apiName>FileSystemDataGrid</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FileSystemDataGrid:clear"><apiName>clear</apiName><shortdesc conref="mx.controls.FileSystemList#clear()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#clear()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:findIndex"><apiName>findIndex</apiName><shortdesc conref="mx.controls.FileSystemList#findIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>ゼロで始まるインデックスまたは <codeph>-1</codeph>（指定されたパスを持つ File アイテムが見つからない場合）です。
     
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>File アイテムの <codeph>nativePath</codeph> を指定するストリングです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:findItem"><apiName>findItem</apiName><shortdesc conref="mx.controls.FileSystemList#findItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.filesystem:File"/><apiDesc>指定された <codeph>nativePath</codeph> を持つものが見つかった場合は File インスタンス、見つからなかった場合は <codeph>null</codeph> です。
      
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>File アイテムの <codeph>nativePath</codeph> を指定するストリングです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateBack"><apiName>navigateBack</apiName><shortdesc>
      このコントロールを変更して、backHistory 配列に格納されている、以前に移動したディレクトリの内容を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>移動先となる <codeph>backHistory</codeph> 配列のインデックスです。デフォルトは 0 で、「最も近い前の」ディレクトリを示します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコントロールを変更して、<codeph>backHistory</codeph> 配列に格納されている、以前に移動したディレクトリの内容を表示します。
     
      <p><codeph>backHistory</codeph> 配列が空の場合、または配列にないインデックスを指定した場合、このメソッドは何も実行しません。</p>
     
      <p>このメソッドが返ると、<codeph>directory</codeph> プロパティには新しいディレクトリの File インスタンスが格納されます。新しいディレクトリが列挙されるまで、<codeph>dataProvider</codeph> プロパティは一時的に <codeph>null</codeph> になります。列挙が完了すると、<codeph>dataProvider</codeph> プロパティには新しいディレクトリの内容を反映した File インスタンスの ArrayCollection が設定されます。</p>
     
      <p>履歴リストは変更されません。ただし、リストに対するインデックスは変更されるため、<codeph>backHistory</codeph> および <codeph>forwardHistory</codeph> プロパティに影響します。このメソッドが返ると、これらのプロパティに新しい値が設定されます。</p>
     
      <p>次の例は、このメソッドを FileSystemHistoryButton コントロールで使用して、前のディレクトリに戻るボタンを作成する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/canNavigateBack"><linktext>canNavigateBack</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateDown"><apiName>navigateDown</apiName><shortdesc>
      このコントロールを変更して、選択されたサブディレクトリの内容を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコントロールを変更して、選択されたサブディレクトリの内容を表示します。
     
      <p>サブディレクトリが選択されていない場合は、このメソッドを呼び出しても何も実行されません。</p>
     
      <p>このメソッドが返ると、<codeph>directory</codeph> プロパティには新しいディレクトリの File インスタンスが格納されます。新しいディレクトリが列挙されるまで、<codeph>dataProvider</codeph> プロパティは一時的に <codeph>null</codeph> になります。列挙が完了すると、<codeph>dataProvider</codeph> プロパティには新しいディレクトリの内容を反映した File インスタンスの ArrayCollection が設定されます。</p>
     
      <p>次の例は、Button コントロールと共にこのメソッドを使用して開くボタンを作成する方法を示しています。</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateDown"><linktext>canNavigateDown</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateForward"><apiName>navigateForward</apiName><shortdesc>
      このコントロールを変更して、forwardHistory 配列に格納されている、以前に移動したディレクトリの内容を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>移動先となる <codeph>forwardHistory</codeph> 配列のインデックスです。デフォルトは 0 で、「最も近い次の」ディレクトリを示します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコントロールを変更して、<codeph>forwardHistory</codeph> 配列に格納されている、以前に移動したディレクトリの内容を表示します。
     
      <p><codeph>forwardHistory</codeph> 配列が空の場合、または配列にないインデックスを指定した場合、このメソッドは何も実行しません。</p>
     
      <p>このメソッドが返ると、<codeph>directory</codeph> プロパティには新しいディレクトリの File インスタンスが格納されます。新しいディレクトリが列挙されるまで、<codeph>dataProvider</codeph> プロパティは一時的に <codeph>null</codeph> になります。列挙が完了すると、<codeph>dataProvider</codeph> プロパティには新しいディレクトリの内容を反映した File インスタンスの ArrayCollection が設定されます。</p>
     
      <p>履歴リストは変更されません。ただし、リストに対するインデックスは変更されるため、<codeph>backHistory</codeph> および <codeph>forwardHistory</codeph> プロパティに影響します。このメソッドが返ると、これらのプロパティに新しい値が設定されます。</p>
     
      <p>次の例は、このメソッドを FileSystemHistoryButton コントロールで使用して、次のディレクトリに進むボタンを作成する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateForward"><linktext>canNavigateForward</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/forwardHistory"><linktext>forwardHistory</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateTo"><apiName>navigateTo</apiName><shortdesc conref="mx.controls.FileSystemList#navigateTo()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>directory</apiItemName><apiType value="flash.filesystem:File"/><apiDesc>ファイルまたはディレクトリを表すファイルオブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#navigateTo()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:navigateUp"><apiName>navigateUp</apiName><shortdesc>
      このコントロールを変更して、階層の 1 つ上のディレクトリの内容を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコントロールを変更して、階層の 1 つ上のディレクトリの内容を表示します。
     
      <p>このコントロールにルートディレクトリ（Microsoft Windows の C: や D: など）が表示されている場合、このメソッドを呼び出しても何も実行されません。</p>
     
      <p>このメソッドが返ると、<codeph>directory</codeph> プロパティには新しいディレクトリの File インスタンスが格納されます。新しいディレクトリが列挙されるまで、<codeph>dataProvider</codeph> プロパティは一時的に <codeph>null</codeph> になります。列挙が完了すると、<codeph>dataProvider</codeph> プロパティには新しいディレクトリの内容を反映した File インスタンスの ArrayCollection が設定されます。</p>
     
      <p>次の例は、このプロパティを Button コントロールで使用して、上の階層に移動するボタンを作成する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateUp"><linktext>canNavigateUp</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemDataGrid:refresh"><apiName>refresh</apiName><shortdesc conref="mx.controls.FileSystemList#refresh()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#refresh()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FileSystemDataGrid:COMPUTER"><apiName>COMPUTER</apiName><shortdesc conref="mx.controls.FileSystemList#COMPUTER">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#COMPUTER">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:creationDateColumn"><apiName>creationDateColumn</apiName><shortdesc>
      作成日列を表す DataGridColumn です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      作成日列を表す DataGridColumn です。この列は FileSystemDataGrid コントロールによって自動的に作成されます。
     
      <p><codeph>creationDateColumn.width</codeph> などのプロパティを設定してこの列をカスタマイズできます。 この列全体を削除する場合や、列の順序を変更する場合は、<codeph>columns</codeph> プロパティを <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph> などの配列に設定します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:modificationDateColumn"><apiName>modificationDateColumn</apiName><shortdesc>
      更新日列を表す DataGridColumn です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      更新日列を表す DataGridColumn です。この列は FileSystemDataGrid コントロールによって自動的に作成されます。
     
      <p><codeph>modificationDateColumn.width</codeph> などのプロパティを設定してこの列をカスタマイズできます。 この列全体を削除する場合や、列の順序を変更する場合は、<codeph>columns</codeph> プロパティを <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph> などの配列に設定します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:nameColumn"><apiName>nameColumn</apiName><shortdesc>
      名前列を表す DataGridColumn です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      名前列を表す DataGridColumn です。この列は FileSystemDataGrid コントロールによって自動的に作成されます。
     
      <p><codeph>nameColumn.width</codeph> などのプロパティを設定してこの列をカスタマイズできます。 この列全体を削除する場合や、列の順序を変更する場合は、<codeph>columns</codeph> プロパティを <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph> などの配列に設定します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:sizeColumn"><apiName>sizeColumn</apiName><shortdesc>
      サイズ列を表す DataGridColumn です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      サイズ列を表す DataGridColumn です。この列は FileSystemDataGrid コントロールによって自動的に作成されます。
     
      <p><codeph>sizeColumn.width</codeph> などのプロパティを設定してこの列をカスタマイズできます。 この列全体を削除する場合や、列の順序を変更する場合は、<codeph>columns</codeph> プロパティを <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph> などの配列に設定します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:typeColumn"><apiName>typeColumn</apiName><shortdesc>
      種類列を表す DataGridColumn です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="mx.controls.dataGridClasses:DataGridColumn"/></apiValueDef><apiDesc>
      種類列を表す DataGridColumn です。この列は FileSystemDataGrid コントロールによって自動的に作成されます。
     
      <p><codeph>typeColumn.width</codeph> などのプロパティを設定してこの列をカスタマイズできます。 この列全体を削除する場合や、列の順序を変更する場合は、<codeph>columns</codeph> プロパティを <codeph>[ nameColumn, modificationDateColumn, sizeColumn ]</codeph> などの配列に設定します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:backHistory:get"><apiName>backHistory</apiName><shortdesc>
      戻る先として指定できるディレクトリを表す File オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      戻る先として指定できるディレクトリを表す File オブジェクトの配列です。
     
      <p>この配列の最初のアイテムは、履歴リストに格納されている 1 つ前のディレクトリになります。最後のアイテムは、履歴リストに格納されている最も古いディレクトリです。</p>
     
      <p>この配列には、<codeph>null</codeph> アイテムを格納することができます。この場合、戻ることができるディレクトリが存在せず、その内容がルートディレクトリ（Microsoft Windows では C:\ および D:\ など）であることを表します。</p>
     
      <p>次の例は、このプロパティを FileSystemHistoryButton コントロールで使用して、前のディレクトリに戻るボタンを実装する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
         enabled="{fileSystemViewer.canNavigateBack}"
         dataProvider="{fileSystemViewer.backHistory}"
         click="fileSystemViewer.navigateBack();"
         itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/canNavigateBack"><linktext>canNavigateBack</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/navigateBack()"><linktext>navigateBack()</linktext></link><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateBack:get"><apiName>canNavigateBack</apiName><shortdesc>
      ユーザーが戻ることのできるディレクトリが履歴リストに 1 つ以上存在する場合に true になるフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが戻ることのできるディレクトリが履歴リストに 1 つ以上存在する場合に <codeph>true</codeph> となるフラグです。
     
      <p>次の例は、このプロパティを FileSystemHistoryButton コントロールで使用して、前のディレクトリに戻るボタンを実装する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/navigateBack()"><linktext>navigateBack()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateDown:get"><apiName>canNavigateDown</apiName><shortdesc>
      ユーザーが、選択されているディレクトリに移動できる場合に true になるフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが、選択されているディレクトリに移動できる場合に <codeph>true</codeph> になるフラグです。 選択されているアイテムがない場合、または選択されているアイテムがディレクトリではなくファイルの場合、このフラグは <codeph>false</codeph> になります。
     
      <p>次の例は、このプロパティを Button コントロールで使用する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/navigateDown()"><linktext>navigateDown()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateForward:get"><apiName>canNavigateForward</apiName><shortdesc>
      ユーザーが進むことのできるディレクトリが履歴リストに 1 つ以上存在する場合に true になるフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが進むことのできるディレクトリが履歴リストに 1 つ以上存在する場合に <codeph>true</codeph> となるフラグです。
     
      <p>次の例は、このプロパティを FileSystemHistoryButton コントロールで使用して、次のディレクトリに進むボタンを実装する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/forwardHistory"><linktext>forwardHistory</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/navigateForward()"><linktext>navigateForward()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:canNavigateUp:get"><apiName>canNavigateUp</apiName><shortdesc>
      ユーザーが、親ディレクトリに移動できる場合に true になるフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが、親ディレクトリに移動できる場合に <codeph>true</codeph> になるフラグです。 このフラグは、このコントロールがルートディレクトリ（Microsoft Windows では C:\ および D:\ など）を表示している場合にのみ <codeph>false</codeph> になります （<codeph>directory</codeph> プロパティが <codeph>COMPUTER</codeph> の場合です）。
     
      <p>次の例は、このプロパティを Button コントロールで使用する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/navigateUp()"><linktext>navigateUp()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:dateFormatString:get"><apiName>dateFormatString</apiName><shortdesc>
      作成日列および変更日列の日付フォーマットを指定するストリング。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      作成日列および変更日列の日付フォーマットを指定するストリング。 このプロパティを設定すると、このコントロールで作成される内部 DateFormatter の <codeph>formatString</codeph> が設定されます。
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.formatters.xml#DateFormatter/formatString"><linktext>mx.formatters.DateFormatter.formatString</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:directory:get"><apiName>directory</apiName><shortdesc conref="mx.controls.FileSystemList#directory">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#directory">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:enumerationMode:get"><apiName>enumerationMode</apiName><shortdesc conref="mx.controls.FileSystemList#enumerationMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FileSystemEnumerationMode.DIRECTORIES_FIRST
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#enumerationMode">
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemEnumerationMode"><linktext>mx.controls.FileSystemEnumerationMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:extensions:get"><apiName>extensions</apiName><shortdesc conref="mx.controls.FileSystemList#extensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#extensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:filterFunction:get"><apiName>filterFunction</apiName><shortdesc conref="mx.controls.FileSystemList#filterFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#filterFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:forwardHistory:get"><apiName>forwardHistory</apiName><shortdesc>
      ユーザーが進むことのできるディレクトリを表す File オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
     </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが進むことのできるディレクトリを表す File オブジェクトの配列です。
     
      <p>この配列の最初のアイテムは、履歴リストに格納されている 1 つ先のディレクトリになります。最後のアイテムは、履歴リストの進む方向で最後の順番にあるディレクトリです。</p>
     
      <p>この配列の内容が <codeph>null</codeph> になっていることもあり、この場合は現在のディレクトリが Microsoft Windows の C:\ や D:\ などのルートディレクトリなので、配列にディレクトリが記述されていないことを表しています。</p>
     
      <p>次の例は、FileSystemHistoryButton コントロールと共にこのプロパティを使用して「Forward」ボタンを実装する方法を示しています。</p>
     
      <pre>
      &lt;mx:FileSystemDataGrid id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:nameCompareFunction:get"><apiName>nameCompareFunction</apiName><shortdesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:selectedPath:get"><apiName>selectedPath</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPath">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPath">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:selectedPaths:get"><apiName>selectedPaths</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPaths">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPaths">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemDataGrid:showExtensions:get"><apiName>showExtensions</apiName><shortdesc conref="mx.controls.FileSystemList#showExtensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showExtensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:showHidden:get"><apiName>showHidden</apiName><shortdesc conref="mx.controls.FileSystemList#showHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:showIcons:get"><apiName>showIcons</apiName><shortdesc conref="mx.controls.FileSystemList#showIcons">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showIcons">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemDataGrid:sizeDisplayMode:get"><apiName>sizeDisplayMode</apiName><shortdesc>
      サイズ列に表示するサイズをバイト単位とするか、直近値に丸めた KB（キロバイト）単位とするかを指定するストリング。1 KB は 1024 バイトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      サイズ列に表示するサイズをバイト単位とするか、直近値に丸めた KB（キロバイト）単位とするかを指定するストリング。1 KB は 1024 バイトです。有効な値は、FileSystemSizeDisplayMode クラスで指定します。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemSizeDisplayMode"><linktext>mx.controls.FileSystemSizeDisplayMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemTree"><apiName>FileSystemTree</apiName><shortdesc>
  FileSystemTree コントロールでは、ファイルシステムのディレクトリの内容がツリー形式で表示されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemTree&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemTree
    <strong>Properties</strong>
    directory="<i>null</i>"
    enumerationMode="directoriesFirst"
    extensions="<i>null</i>"
    filterFunction="<i>null</i>"
    nameCompareFunction="<i>null</i>"
    openPaths="<i>null</i>"
    selectedPath="<i>null</i>"
    selectedPaths="<i>null</i>"
    showExtensions="true"
    showHidden="false"
    showIcons="true"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
    directoryClosing="<i>No default</i>"
    directoryOpening="<i>No default</i>"
    fileChoose="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Tree</apiBaseClassifier></apiClassifierDef><apiDesc>
  FileSystemTree コントロールでは、ファイルシステムのディレクトリの内容がツリー形式で表示されます。
 
  <p>内容を表示するディレクトリは、<codeph>directory</codeph> プロパティを flash.filesystem.File クラスのインスタンスに設定して、指定します （File インスタンスによって、ファイルだけでなくディレクトリも表せます）。 このプロパティが変更されると、常に <codeph>directoryChange</codeph> イベントが送出されます。</p>
 
  <p><codeph>enumerationMode</codeph> を設定することで、このディレクトリのファイルやサブディレクトリまたはその両方を表示するかどうか指定できます。 各ツリーノード内にファイルとサブディレクトリの両方を表示する場合は、ディレクトリを最初に表示、ファイルを最初に表示、両方を混在して表示の 3 種類の表示方法が用意されています。</p>
 
  <p><codeph>extensions</codeph> プロパティを設定することで、指定した拡張子を持つファイルだけを表示するようにリストをフィルターできます （ディレクトリ名の拡張子は無視されます）。 また、<codeph>filterFunction</codeph> プロパティを設定することで、独自のフィルター機能を追加で指定することもできます。</p>
 
  <p><codeph>showExtensions</codeph> プロパティを使用して、拡張子を表示または非表示にできます。また、<codeph>showIcons</codeph> プロパティを使用して、アイコンを表示または非表示にできます。</p>
 
  <p>2 つのファイル名またはディレクトリ名を比較する関数に <codeph>nameCompareFunction</codeph> プロパティを設定することで、各ツリーノード内でカスタムソートを実行できます。</p>
 
  <p>ユーザーが、閉じられたディレクトリノードをダブルクリックした場合、または展開用アイコンをクリックしたりした場合は、<codeph>directoryOpening</codeph> イベントが送出されます。 ユーザーが、開かれたディレクトリノードをダブルクリックした場合や、展開用アイコンをクリックした場合は、<codeph>directoryClosing</codeph> イベントが送出されます。 ハンドラーは、<codeph>event.preventDefault()</codeph> を呼び出すことでいずれかのイベントをキャンセルできます。この場合、ノードは開きません。</p>
 
  <p>ユーザーがファイルノードをダブルクリックした場合は、<codeph>select</codeph> イベントが送出されます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.FILE_CHOOSE_fileChoose"><apiName>fileChoose</apiName><shortdesc>
  ユーザーがファイルをダブルクリックして選択した場合か、ファイルを選択して Enter キーを押した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.FILE_CHOOSE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがファイルをダブルクリックして選択した場合か、ファイルを選択して Enter キーを押した場合に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.DIRECTORY_OPENING_directoryOpening"><apiName>directoryOpening</apiName><shortdesc>
  ユーザーがマウスまたはキーボードを使用してディレクトリノードを開いた場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_OPENING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがマウスまたはキーボードを使用してディレクトリノードを開いた場合に送出されます。
 
  <p>これはキャンセル可能なイベントです。 <codeph>event.preventDefault()</codeph> を呼び出すと、現在のディレクトリの表示が継続され、ダブルクリックされたサブディレクトリの表示には切り替わりません。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.DIRECTORY_CLOSING_directoryClosing"><apiName>directoryClosing</apiName><shortdesc>
  ユーザーがマウスまたはキーボードを使用して開かれているディレクトリノードを閉じた場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CLOSING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがマウスまたはキーボードを使用して開かれているディレクトリノードを閉じた場合に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemTree_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  directory プロパティが変更されたびに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>directory</codeph> プロパティが変更されるたびに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemTree:FileSystemTree"><apiName>FileSystemTree</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FileSystemTree:clear"><apiName>clear</apiName><shortdesc>
      リストをクリアします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      リストをクリアします。
     
      <p>このメソッドでは、<codeph>dataProvider</codeph> が <codeph>null</codeph> に設定されますが、<codeph>directory</codeph> プロパティは変更されません。<codeph>refresh</codeph> を呼び出すと、リストにアイテムを再設定できます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:closeSubdirectory"><apiName>closeSubdirectory</apiName><shortdesc>
      ネイティブのファイルシステムパスで指定されたサブディレクトリを閉じます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>File アイテムの <codeph>nativePath</codeph> を指定するストリングです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ネイティブのファイルシステムパスで指定されたサブディレクトリを閉じます。
     
      <p><codeph>nativePath</codeph> で指定されているディレクトリがコントロールで表示されているディレクトリの範囲外の場合、このメソッドは何も実行しません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:findIndex"><apiName>findIndex</apiName><shortdesc conref="mx.controls.FileSystemList#findIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/><apiDesc>ゼロで始まるインデックスまたは <codeph>-1</codeph>（指定されたパスを持つ File アイテムが見つからない場合）です。
     
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>File アイテムの <codeph>nativePath</codeph> を指定するストリングです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:findItem"><apiName>findItem</apiName><shortdesc conref="mx.controls.FileSystemList#findItem()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.filesystem:File"/><apiDesc>指定された <codeph>nativePath</codeph> を持つものが見つかった場合は File インスタンス、見つからなかった場合は <codeph>null</codeph> です。
      
      </apiDesc></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>File アイテムの <codeph>nativePath</codeph> を指定するストリングです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.FileSystemList#findItem()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:openSubdirectory"><apiName>openSubdirectory</apiName><shortdesc>
      ネイティブのファイルシステムパスで指定されたサブディレクトリを開きます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>File アイテムの <codeph>nativePath</codeph> を指定するストリングです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ネイティブのファイルシステムパスで指定されたサブディレクトリを開きます。
     
      <p>このメソッドを実行すると、指定されたディレクトリに到達するまでに必要なすべての中間ディレクトリが開かれます。</p>
     
      <p><codeph>nativePath</codeph> で既存のファイルシステムディレクトリが指定されていない場合や、そのディレクトリがコントロールで表示されているディレクトリの範囲外の場合、このメソッドは何も実行しません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemTree:refresh"><apiName>refresh</apiName><shortdesc>
      このコントロールで表示されている現在のディレクトリを再列挙します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコントロールで表示されている現在のディレクトリを再列挙します。
     
      <p>このメソッドが返ると、<codeph>directory</codeph> プロパティには前と同じディレクトリの File インスタンスが設定されます。ディレクトリが再列挙されるまで、<codeph>dataProvider</codeph> プロパティは一時的に <codeph>null</codeph> になります。列挙が完了すると、<codeph>dataProvider</codeph> プロパティにはディレクトリの内容を反映した File インスタンスの ArrayCollection が設定されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FileSystemTree:COMPUTER"><apiName>COMPUTER</apiName><shortdesc conref="mx.controls.FileSystemList#COMPUTER">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc conref="mx.controls.FileSystemList#COMPUTER">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:directory:get"><apiName>directory</apiName><shortdesc>
      このコントロールが内容を表示しているディレクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/><apiDefaultValue>COMPUTER
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールが内容を表示しているディレクトリです。
     
      <p>このプロパティを既存のディレクトリを表す File オブジェクトに設定した場合、<codeph>dataProvider</codeph> は直ちに <codeph>null</codeph> になります。 その後、このコントロールが LayoutManager で再検証されると、そのディレクトリの内容が同期的に列挙され、ディレクトリ内のファイルとサブディレクトリを表す File オブジェクトの ArrayCollection が <codeph>dataProvider</codeph> プロパティに設定されます。</p>
     
      <p>このプロパティを既存のディレクトリを表していない File に設定するとエラーになります。 このプロパティを <codeph>COMPUTER</codeph> に設定すると、同期的にルートディレクトリ（Windows では C:\ および D:\ など）が表示されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:enumerationMode:get"><apiName>enumerationMode</apiName><shortdesc conref="mx.controls.FileSystemList#enumerationMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FileSystemEnumerationMode.DIRECTORIES_FIRST
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#enumerationMode">
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemEnumerationMode"><linktext>mx.controls.FileSystemEnumerationMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemTree:extensions:get"><apiName>extensions</apiName><shortdesc conref="mx.controls.FileSystemList#extensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#extensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:filterFunction:get"><apiName>filterFunction</apiName><shortdesc conref="mx.controls.FileSystemList#filterFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#filterFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:nameCompareFunction:get"><apiName>nameCompareFunction</apiName><shortdesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#nameCompareFunction">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:openPaths:get"><apiName>openPaths</apiName><shortdesc>
      開かれているサブディレクトリを表す File アイテムの nativePath ストリングの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      開かれているサブディレクトリを表す File アイテムの <codeph>nativePath</codeph> ストリングの配列です。 サブディレクトリが開かれていない場合、この配列は空になります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:selectedPath:get"><apiName>selectedPath</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPath">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPath">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemTree:selectedPaths:get"><apiName>selectedPaths</apiName><shortdesc conref="mx.controls.FileSystemList#selectedPaths">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#selectedPaths">
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemTree:showExtensions:get"><apiName>showExtensions</apiName><shortdesc conref="mx.controls.FileSystemList#showExtensions">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showExtensions">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:showHidden:get"><apiName>showHidden</apiName><shortdesc conref="mx.controls.FileSystemList#showHidden">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showHidden">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemTree:showIcons:get"><apiName>showIcons</apiName><shortdesc conref="mx.controls.FileSystemList#showIcons">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.FileSystemList#showIcons">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemList"><apiName>FileSystemList</apiName><shortdesc>
  FileSystemList コントロールを使用すると、単一のファイルシステムのディレクトリの内容をリスト形式で表示することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="EmbeddedFile" inherit="no" name="fileIcon" owner="mx.controls:FileSystemList" playerVersion="AIR1.1" type="Class">
<description>
  ファイルを示すアイコンを指定します。デフォルトのアイコンは、Assets.swf ファイルに置かれています。 MXML では、<codeph>fileIcon="@Embed(source='fileIcon.jpg');"</codeph> というシンタックスを使用して、このプロパティを設定できます。
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="directoryIcon" owner="mx.controls:FileSystemList" playerVersion="AIR1.1" type="Class">
<description>
  ディレクトリを示すアイコンを指定します。 デフォルトのアイコンは、Assets.swf ファイルに置かれています。 MXML では、<codeph>directoryIcon="@Embed(source='directoryIcon.jpg');"</codeph> というシンタックスを使用して、このプロパティを設定できます。
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemList&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemList
    <strong>Properties</strong>
    directory="<i>null</i>"
    enumerationMode="directoriesFirst"
    extensions="<i>null</i>"
    filterFunction="<i>null</i>"
    nameCompareFunction="<i>null</i>"
    selectedPath="<i>null</i>"
    selectedPaths="<i>null</i>"
    showExtensions="true"
    showHidden="false"
    showIcons="true"
 
    <strong>Styles</strong>
    directoryIcon="<i>TreeNodeIcon</i>"
    fileIcon="<i>TreeNodeIcon</i>"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
    directoryChanging="<i>No default</i>"
    fileChoose="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  FileSystemList コントロールを使用すると、単一のファイルシステムのディレクトリの内容をリスト形式で表示することができます。
 
  <p>表示データを変更するには、<codeph>dataProvider</codeph> プロパティを使用するのではなく、<codeph>directory</codeph> プロパティを設定します。 これにより、ディレクトリの内容が列挙され、自動的に <codeph>dataProvider</codeph> プロパティに値が設定されます。 <codeph>dataProvider</codeph> をユーザー自身が設定することは避けてください。</p>
 
  <p>次の例に示すように、File インスタンスへの <codeph>directory</codeph> プロパティを設定します。 </p>
  <pre>
    &lt;mx:FileSystemList directory="{File.desktopDirectory}"/></pre>
 
  <p><codeph>enumerationMode</codeph> を設定することで、ファイルやサブディレクトリまたはその両方を表示するかどうか指定できます。 両方表示する場合は、ディレクトリを最初に表示、ファイルを最初に表示、両方を混在して表示の 3 種類の表示方法が用意されています。</p>
 
  <p><codeph>extensions</codeph> プロパティを設定することで、指定した拡張子を持つファイルだけを表示するように表示アイテムをフィルターできます。 <codeph>showHidden</codeph> によって、通常はオペレーティングシステムが非表示にしているファイルおよびサブディレクトリをコントロールに表示するかどうかを制御できます。 <codeph>filterFunction</codeph> を追加で指定すると、カスタムフィルターを実行できます。また、<codeph>nameCompareFunction</codeph> を指定すると、カスタムソートを実行できます。</p>
 
  <p>AIR ではファイルシステムの変更通知をサポートしていないので、ファイルの作成、削除、移動または名前変更が行われても自動的に反映されません。つまり、ファイルシステムの古い情報が表示されている可能性があります。 ただし、<codeph>refresh()</codeph> を呼び出すことで、現在の <codeph>directory</codeph> を再列挙することができます。 例えば、コントロールの表示内容が最新でなくなるファイル操作を実行した場合や、ユーザーがアプリケーションを非アクティブにして再アクティブにした場合に、この方法を使用できます。</p>
 
  <p><codeph>showIcons</codeph> プロパティを使用して、アイコンを表示または非表示にできます。また、<codeph>showExtensions</codeph> を使用して、ファイル拡張子を表示または非表示にできます。</p>
 
  <p>このコントロールには <codeph>findItem()</codeph> および <codeph>findIndex()</codeph> という 2 つのメソッドが用意されており、表示ファイルおよび表示サブディレクトリから、指定された <codeph>nativePath</codeph> を持つものを検索できます。</p>
 
  <p><codeph>selectedPath</codeph> および <codeph>selectedPaths</codeph> の 2 種類のプロパティは、<codeph>selectedItem</codeph> および <codeph>selectedItems</codeph>、または <codeph>selectedIndex</codeph> および <codeph>selectedIndices</codeph> と同様に機能しますが、<codeph>nativePath</codeph> ストリングを使用して選択範囲を指定できます。 特定のアイテムがあらかじめ選択されているディレクトリを表示する必要がある場合、ディレクトリの列挙時にコントロールが作成する File アイテムがまだないので、これらのプロパティを使用すると便利です。</p>
 
  <p>このコントロールでは、ユーザーはマウスまたはキーボードを使用して他のディレクトリに移動できます。 ユーザーは、サブディレクトリをダブルクリックする、サブディレクトリが選択された状態で Enter キーまたは Ctrl キーを押しながら下矢印キーを押す、COMPUTER ディレクトリが表示されていない状態で Ctrl キーを押しながら上矢印キーを押すという方法でディレクトリの変更を試行できます。また、以前に移動したディレクトリが存在する場合は、Ctrl キーを押しながら左矢印キーを押して戻ったり、以前のディレクトリから戻ってきた場合は、Ctrl キーを押しながら右矢印キーを押してそのディレクトリに進んだりできます。 ユーザーが、現在表示されているディレクトリの変更を試行すると、キャンセル可能な <codeph>directoryChanging</codeph> イベントがコントロールから送出されます。 <codeph>event.preventDefault()</codeph> を呼び出すことによってこのイベントをキャンセルしない場合は、コントロールに新しいディレクトリの内容が表示され、<codeph>directory</codeph> プロパティが変更されます。 <codeph>directory</codeph> プロパティが変更されるたびに <codeph>directoryChange</codeph> イベントが送出され、変更が通知されます。</p>
 
  <p>「上へ」および「下へ」移動する操作をサポートするため、FileSystemList には <codeph>canNavigateUp</codeph> および <codeph>canNavigateDown</codeph> プロパティと、<codeph>navigateUp()</codeph> および <codeph>navigateDown()</codeph> メソッドが用意されています。 また、任意のディレクトリに移動する <codeph>navigateTo()</codeph> も用意されています。</p>
 
  <p>ユーザーが移動したディレクトリはコントロールによって管理されるので、「戻る」および「進む」の移動操作を容易にサポートできます。 詳細については、<codeph>backHistory</codeph>、<codeph>forwardHistory</codeph>、<codeph>canNavigateBack</codeph> および <codeph>canNavigateForward</codeph> プロパティと、<codeph>navigateBack()</codeph> および <codeph>navigateForward()</codeph> メソッドを参照してください。</p>
 
  <p>メモ：各アイテムに使用されるアイコンは、汎用のファイルアイコンおよびディレクトリアイコンです。これらは、<codeph>fileIcon</codeph> および <codeph>directoryIcon</codeph> スタイルを使用して設定できます。 Flex のリストコントロールでは、現在のところ埋め込みアイコンのみサポートされており、実行時に読み込むアイコンはサポートされていません。 そのため、オペレーティングシステムで表示される実際のファイルシステムのアイコンは、File の <codeph>icon</codeph> プロパティを使用して AIR でアクセスできる場合でも、FileSystemList には表示されません。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemList_mx.events.FileEvent.FILE_CHOOSE_fileChoose"><apiName>fileChoose</apiName><shortdesc>
  ユーザーがファイルをダブルクリックして選択した場合か、ファイルを選択して Enter キーを押した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.FILE_CHOOSE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがファイルをダブルクリックして選択した場合か、ファイルを選択して Enter キーを押した場合に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemList_mx.events.FileEvent.DIRECTORY_OPENING_directoryChanging"><apiName>directoryChanging</apiName><shortdesc>
  ユーザーが、このコントロールで表示されているディレクトリを変更しようとしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_OPENING</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが、このコントロールで表示されているディレクトリを変更しようとしたときに送出されます。
 
  <p>ユーザーは、サブディレクトリをダブルクリックする、サブディレクトリが選択された状態で Enter キーまたは Ctrl キーを押しながら下矢印キーを押す、COMPUTER ディレクトリが表示されていない状態で Ctrl キーを押しながら上矢印キーを押すという方法でディレクトリの変更を試行できます。また、以前に移動したディレクトリが履歴リストに存在する場合は、Ctrl キーを押しながら左矢印キーを押して戻ったり、以前のディレクトリから戻ってきた場合は、Ctrl キーを押しながら右矢印キーを押してそのディレクトリに進んだりできます。</p>
 
  <p>このイベントはキャンセル可能です。 <codeph>event.preventDefault()</codeph> を呼び出すと、ディレクトリは変更されません。</p>
 
  <p><codeph>directory</codeph> プロパティが変更され、その新しいディレクトリ内のアイテムの File インスタンスが <codeph>dataProvider</codeph> に含まれた後に、<codeph>directoryChange</codeph> イベントが送出されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FileSystemList_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  このコントロールで表示されているディレクトリが変更された場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  このコントロールで表示されているディレクトリが変更された場合に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemList:FileSystemList"><apiName>FileSystemList</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FileSystemList:clear"><apiName>clear</apiName><shortdesc>
      このコントロールをクリアして、アイテムが何も表示されないようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコントロールをクリアして、アイテムが何も表示されないようにします。
     
      <p>このメソッドでは、<codeph>dataProvider</codeph> が <codeph>null</codeph> に設定されますが、<codeph>directory</codeph> プロパティは変更されません。<codeph>refresh</codeph> を呼び出すと、このコントロールにアイテムを再設定できます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemList:findIndex"><apiName>findIndex</apiName><shortdesc>
      指定されたネイティブのファイルシステムパスを持つ File アイテムのインデックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ゼロで始まるインデックスまたは <codeph>-1</codeph>（指定されたパスを持つ File アイテムが見つからない場合）です。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>File アイテムの <codeph>nativePath</codeph> を指定するストリングです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたネイティブのファイルシステムパスを持つ File アイテムのインデックスを返します。
     
      <p>コントロールのコレクションに存在していてもフィルターで表示されないアイテムは、検索されません。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.filesystem.xml#File/nativePath"><linktext>flash.filesystem.File.nativePath</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:findItem"><apiName>findItem</apiName><shortdesc>
      このコントロールに現在表示されている File インスタンスを検索し、指定された nativePath プロパティを持つものを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された <codeph>nativePath</codeph> を持つものが見つかった場合は File インスタンス、見つからなかった場合は <codeph>null</codeph> です。
      
      </apiDesc><apiType value="flash.filesystem:File"/></apiReturn><apiParam><apiItemName>nativePath</apiItemName><apiType value="String"/><apiDesc>File アイテムの <codeph>nativePath</codeph> を指定するストリングです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコントロールに現在表示されている File インスタンスを検索し、指定された <codeph>nativePath</codeph> プロパティを持つものを返します。
     
      <p>コントロールのコレクションに存在しながら、フィルターによって検索対象から外れているので表示されていない File インスタンスです。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateBack"><apiName>navigateBack</apiName><shortdesc>
      このコントロールを変更して、backHistory 配列に格納されている、以前に移動したディレクトリの内容を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>移動先となる <codeph>backHistory</codeph> 配列のインデックスです。デフォルトは 0 で、「最も近い前の」ディレクトリを示します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコントロールを変更して、<codeph>backHistory</codeph> 配列に格納されている、以前に移動したディレクトリの内容を表示します。
     
      <p><codeph>backHistory</codeph> 配列が空の場合、または配列にないインデックスを指定した場合、このメソッドは何も実行しません。</p>
     
      <p>このメソッドが返ると、<codeph>directory</codeph> プロパティには新しいディレクトリの File インスタンスが格納されます。新しいディレクトリが列挙されるまで、<codeph>dataProvider</codeph> プロパティは一時的に <codeph>null</codeph> になります。列挙が完了すると、<codeph>dataProvider</codeph> プロパティには新しいディレクトリの内容を反映した File インスタンスの ArrayCollection が設定されます。</p>
     
      <p>履歴リストは変更されません。ただし、リストに対するインデックスは変更されるため、<codeph>backHistory</codeph> および <codeph>forwardHistory</codeph> プロパティに影響します。このメソッドが返ると、これらのプロパティに新しい値が設定されます。</p>
     
      <p>次の例は、このメソッドを FileSystemHistoryButton コントロールで使用して、前のディレクトリに戻るボタンを作成する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemList/canNavigateBack"><linktext>canNavigateBack</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateDown"><apiName>navigateDown</apiName><shortdesc>
      このコントロールを変更して、選択されたサブディレクトリの内容を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコントロールを変更して、選択されたサブディレクトリの内容を表示します。
     
      <p>サブディレクトリが選択されていない場合は、このメソッドを呼び出しても何も実行されません。</p>
     
      <p>このメソッドが返ると、<codeph>directory</codeph> プロパティには新しいディレクトリの File インスタンスが格納されます。新しいディレクトリが列挙されるまで、<codeph>dataProvider</codeph> プロパティは一時的に <codeph>null</codeph> になります。列挙が完了すると、<codeph>dataProvider</codeph> プロパティには新しいディレクトリの内容を反映した File インスタンスの ArrayCollection が設定されます。</p>
     
      <p>次の例は、Button コントロールと共にこのメソッドを使用して開くボタンを作成する方法を示しています。</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateDown"><linktext>canNavigateDown</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateForward"><apiName>navigateForward</apiName><shortdesc>
      このコントロールを変更して、forwardHistory 配列に格納されている、以前に移動したディレクトリの内容を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>移動先となる <codeph>forwardHistory</codeph> 配列のインデックスです。デフォルトは 0 で、「最も近い次の」ディレクトリを示します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコントロールを変更して、<codeph>forwardHistory</codeph> 配列に格納されている、以前に移動したディレクトリの内容を表示します。
     
      <p><codeph>forwardHistory</codeph> 配列が空の場合、または配列にないインデックスを指定した場合、このメソッドは何も実行しません。</p>
     
      <p>このメソッドが返ると、<codeph>directory</codeph> プロパティには新しいディレクトリの File インスタンスが格納されます。新しいディレクトリが列挙されるまで、<codeph>dataProvider</codeph> プロパティは一時的に <codeph>null</codeph> になります。列挙が完了すると、<codeph>dataProvider</codeph> プロパティには新しいディレクトリの内容を反映した File インスタンスの ArrayCollection が設定されます。</p>
     
      <p>履歴リストは変更されません。ただし、リストに対するインデックスは変更されるため、<codeph>backHistory</codeph> および <codeph>forwardHistory</codeph> プロパティに影響します。このメソッドが返ると、これらのプロパティに新しい値が設定されます。</p>
     
      <p>次の例は、このメソッドを FileSystemHistoryButton コントロールで使用して、次のディレクトリに進むボタンを作成する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateForward"><linktext>canNavigateForward</linktext></link><link href="mx.controls.xml#FileSystemList/forwardHistory"><linktext>forwardHistory</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateTo"><apiName>navigateTo</apiName><shortdesc>
      このコントロールを変更して、指定されたディレクトリの内容を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>directory</apiItemName><apiType value="flash.filesystem:File"/><apiDesc>ファイルまたはディレクトリを表すファイルオブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコントロールを変更して、指定されたディレクトリの内容を表示します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FileSystemList:navigateUp"><apiName>navigateUp</apiName><shortdesc>
      このコントロールを変更して、階層の 1 つ上のディレクトリの内容を表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコントロールを変更して、階層の 1 つ上のディレクトリの内容を表示します。
     
      <p>このコントロールにルートディレクトリ（Microsoft Windows の C: や D: など）が表示されている場合、このメソッドを呼び出しても何も実行されません。</p>
     
      <p>このメソッドが返ると、<codeph>directory</codeph> プロパティには新しいディレクトリの File インスタンスが格納されます。新しいディレクトリが列挙されるまで、<codeph>dataProvider</codeph> プロパティは一時的に <codeph>null</codeph> になります。列挙が完了すると、<codeph>dataProvider</codeph> プロパティには新しいディレクトリの内容を反映した File インスタンスの ArrayCollection が設定されます。</p>
     
      <p>次の例は、Button コントロールと共にこのメソッドを使用して上ボタンを作成する方法を示しています。</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateUp"><linktext>canNavigateUp</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FileSystemList:refresh"><apiName>refresh</apiName><shortdesc>
      このコントロールで表示されている現在のディレクトリを再列挙します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコントロールで表示されている現在のディレクトリを再列挙します。
     
      <p>AIR ではファイルシステムの変更通知をサポートしていないので、ファイルの作成、削除、移動または名前変更が行われても自動的に反映されません。つまり、ファイルシステムの古い情報が表示されている可能性があります。ただし、<codeph>refresh()</codeph> を呼び出すことで、現在の <codeph>directory</codeph> が最新の状態になるように再列挙することができます。例えば、コントロールの表示内容が最新でなくなる原因となるファイル操作を実行した場合や、ユーザーがアプリケーションを非アクティブにして再アクティブにした場合に、この方法を使用できます。</p>
     
      <p>このメソッドでは、選択されているアイテム（再列挙後も存在する場合）やスクロール位置（最初の可視アイテムが存在する場合）が保持されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FileSystemList:COMPUTER"><apiName>COMPUTER</apiName><shortdesc>
      "Computer" という名前の擬似最上位ディレクトリを表す、ディレクトリプロパティの値として使用できる定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc>
      "Computer" という名前の擬似最上位ディレクトリを表す、<codeph>directory</codeph> プロパティの値として使用できる定数です。 この擬似ディレクトリにはルートディレクトリ（Windows では C:\ および D:\、Macintosh では / など）があります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:backHistory:get"><apiName>backHistory</apiName><shortdesc>
      戻る先として指定できるディレクトリを表す File オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      戻る先として指定できるディレクトリを表す File オブジェクトの配列です。
     
      <p>この配列の最初のアイテムは、履歴リストに格納されている 1 つ前のディレクトリになります。最後のアイテムは、履歴リストに格納されている最も古いディレクトリです。</p>
     
      <p>この配列には、<codeph>null</codeph> アイテムを格納することができます。この場合、戻ることができるディレクトリが存在せず、その内容がルートディレクトリ（Microsoft Windows では C:\ および D:\ など）であることを表します。</p>
     
      <p>次の例は、このプロパティを FileSystemHistoryButton コントロールで使用して、前のディレクトリに戻るボタンを実装する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateBack"><linktext>canNavigateBack</linktext></link><link href="mx.controls.xml#FileSystemList/navigateBack()"><linktext>navigateBack()</linktext></link><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateBack:get"><apiName>canNavigateBack</apiName><shortdesc>
      ユーザーが戻ることのできるディレクトリが履歴リストに 1 つ以上存在する場合に true になるフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが戻ることのできるディレクトリが履歴リストに 1 つ以上存在する場合に <codeph>true</codeph> となるフラグです。
     
      <p>次の例は、このプロパティを FileSystemHistoryButton コントロールで使用して、前のディレクトリに戻るボタンを実装する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Back"
          enabled="{fileSystemViewer.canNavigateBack}"
          dataProvider="{fileSystemViewer.backHistory}"
          click="fileSystemViewer.navigateBack();"
          itemClick="fileSystemViewer.navigateBack(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/backHistory"><linktext>backHistory</linktext></link><link href="mx.controls.xml#FileSystemList/navigateBack()"><linktext>navigateBack()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateDown:get"><apiName>canNavigateDown</apiName><shortdesc>
      ユーザーが、選択されているディレクトリに移動できる場合に true になるフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが、選択されているディレクトリに移動できる場合に <codeph>true</codeph> になるフラグです。 選択されているアイテムがない場合、または選択されているアイテムがディレクトリではなくファイルの場合、このフラグは <codeph>false</codeph> になります。
     
      <p>次の例は、このプロパティを Button コントロールで使用する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Open"
          enabled="{fileSystemViewer.canNavigateDown}"
          click="fileSystemViewer.navigateDown();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/navigateDown()"><linktext>navigateDown()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateForward:get"><apiName>canNavigateForward</apiName><shortdesc>
      ユーザーが進むことのできるディレクトリが履歴リストに 1 つ以上存在する場合に true になるフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが進むことのできるディレクトリが履歴リストに 1 つ以上存在する場合に <codeph>true</codeph> となるフラグです。
     
      <p>次の例は、このプロパティを FileSystemHistoryButton コントロールで使用して、次のディレクトリに進むボタンを実装する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/forwardHistory"><linktext>forwardHistory</linktext></link><link href="mx.controls.xml#FileSystemList/navigateForward()"><linktext>navigateForward()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:canNavigateUp:get"><apiName>canNavigateUp</apiName><shortdesc>
      ユーザーが、親ディレクトリに移動できる場合に true になるフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが、親ディレクトリに移動できる場合に <codeph>true</codeph> になるフラグです。 このフラグは、このコントロールがルートディレクトリ（Microsoft Windows では C:\ および D:\ など）を表示している場合にのみ <codeph>false</codeph> になります （<codeph>directory</codeph> プロパティが <codeph>COMPUTER</codeph> の場合です）。
     
      <p>次の例は、このプロパティを Button コントロールで使用する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:Button label="Up"
          enabled="{fileSystemViewer.canNavigateUp}"
          click="fileSystemViewer.navigateUp();"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/navigateUp()"><linktext>navigateUp()</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:directory:get"><apiName>directory</apiName><shortdesc>
      このコントロールが内容を表示しているディレクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/><apiDefaultValue>COMPUTER
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールが内容を表示しているディレクトリです。
     
      <p>このプロパティを既存のディレクトリを表す File オブジェクトに設定した場合、<codeph>dataProvider</codeph> は直ちに <codeph>null</codeph> になります。 その後、このコントロールが LayoutManager で再検証されると、そのディレクトリの内容が列挙され、ディレクトリ内のファイルとサブディレクトリを表す File オブジェクトの ArrayCollection が <codeph>dataProvider</codeph> プロパティに設定されます。</p>
     
      <p>このプロパティを既存のディレクトリを表していない File に設定するとエラーになります。 このプロパティを <codeph>COMPUTER</codeph> に設定すると、同期的にルートディレクトリ（Windows では C:\ および D:\ など）が表示されます。</p>
     
      <p>このプロパティを設定すると、既に選択されていたアイテムが選択解除され、コントロールでのスクロール位置が左上隅にリセットされます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:enumerationMode:get"><apiName>enumerationMode</apiName><shortdesc>
      このコントロールに表示するアイテムを、ファイルのみ、サブディレクトリのみまたはその両方に指定するストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>FileSystemEnumerationMode.DIRECTORIES_FIRST
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールに表示するアイテムを、ファイルのみ、サブディレクトリのみまたはその両方に指定するストリングです。 両方表示する場合は、サブディレクトリをファイルの前、後または混在させて表示するのかも指定します。有効な値は、FileSystemEnumerationMode クラスで指定されています。
     
      <p>このプロパティは、コントロールに表示されるサブディレクトリとファイルに加え、表示される順序に影響します。 ただし、<codeph>dataProvider</codeph> プロパティに設定される File インスタンスには影響せず、<codeph>dataProvider</codeph> に適用されるフィルター機能の動作を変化させて機能します。 このプロパティを設定しても、現在の <codeph>directory</codeph> は再列挙されません。</p>
     
      <p>このプロパティを設定すると、選択されていたアイテムが選択解除され、コントロールでのスクロール位置が左上隅にリセットされます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemEnumerationMode"><linktext>mx.controls.FileSystemEnumerationMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:extensions:get"><apiName>extensions</apiName><shortdesc>
      このコントロールに表示するファイルを指定する拡張子の配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールに表示するファイルを指定する拡張子の配列です。 例えば、このプロパティを <codeph>[ ".htm", ".html" ]</codeph> に設定すると、これらの拡張子を持つファイルだけが表示されます。
     
      <p>拡張子の大文字小文字は区別されず、先頭のドットは省略可能です。 例えば、<codeph>".HTML"</codeph> と指定しても <codeph>"html"</codeph> と指定しても動作は同じです。</p>
     
      <p>名前にドットが含まれている場合でも、サブディレクトリは拡張子でフィルターされません。</p>
     
      <p><codeph>enumerationMode</codeph> プロパティと <codeph>filterFunction</codeph> プロパティも、コントロールに表示するファイルを決定する要素となります。 例えば、このプロパティが <codeph>[ ".htm", ".html" ]</codeph> の場合でも、<codeph>enumerationMode</codeph> プロパティが<codeph>FileSystemEnumerationMode.DIRECTORIES_ONLY</codeph> の場合や、<codeph>filterFunction</codeph> がファイルに対して <codeph>false</codeph> を返す場合、.html ファイルは表示されません。</p>
     
      <p>このプロパティが <codeph>null</codeph> の場合、拡張子によるフィルターは行われず、すべてのファイルが表示されます。 このプロパティが空の配列の場合、すべての拡張子がフィルター処理で除外され、拡張子を持つファイルは一切表示されません。</p>
     
      <p>このプロパティは、コントロールに表示されるファイルに影響します。 ただし、<codeph>dataProvider</codeph> プロパティに設定される File インスタンスには影響せず、<codeph>dataProvider</codeph> に適用されるフィルター機能の動作を変化させて機能します。 このプロパティを設定しても、現在の <codeph>directory</codeph> は再列挙されません。</p>
     
      <p>このプロパティを設定すると、選択されていたアイテムが選択解除され、コントロールでのスクロール位置が左上隅にリセットされます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      enumerationMode および extensions プロパティが適用された後に、追加のフィルター処理を実行するために使用するコールバック関数で、表示および非表示にするファイルとサブディレクトリを決定できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>enumerationMode</codeph> および <codeph>extensions</codeph> プロパティが適用された後に、追加のフィルター処理を実行するために使用するコールバック関数で、表示および非表示にするファイルとサブディレクトリを決定できます。
     
      <p>この関数には次のシグネチャが必要です。</p>
     
      <pre>function myFilterFunction(file:File):Boolean</pre>
     
      この関数は、指定されたファイルまたはサブディレクトリを表示する場合は <codeph>true</codeph> を、非表示にする場合は <codeph>false</codeph> を返します。
     
      <p>すべてのファイルおよびサブディレクトリがこの関数に渡されるようにするには、<codeph>enumerationMode</codeph> プロパティが <codeph>FileSystemEnumerationMode.FILES_ONLY</codeph> または <codeph>FileSystemEnumerationMode.DIRECTORIES_ONLY</codeph> に設定されていてはなりません。また、<codeph>extensions</codeph> プロパティは <codeph>null</codeph> でなければなりません。 そうでない場合は、この関数が呼び出される前に、これらのプロパティによって事前にフィルター処理が行われてしまいます。</p>
     
      <p>このプロパティは、コントロールに表示されるサブディレクトリおよびファイルに影響します。 ただし、<codeph>dataProvider</codeph> プロパティに設定される File インスタンスには影響せず、<codeph>dataProvider</codeph> に適用されるフィルター機能の動作を変化させて機能します。 このプロパティを設定しても、現在の <codeph>directory</codeph> は再列挙されません。</p>
     
      <p>このプロパティを設定すると、選択されていたアイテムが選択解除され、コントロールでのスクロール位置が左上隅にリセットされます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:forwardHistory:get"><apiName>forwardHistory</apiName><shortdesc>
      ユーザーが進むことのできるディレクトリを表す File オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      ユーザーが進むことのできるディレクトリを表す File オブジェクトの配列です。
     
      <p>この配列の最初のアイテムは、履歴リストに格納されている 1 つ先のディレクトリになります。最後のアイテムは、履歴リストに格納されている最も新しいディレクトリです。</p>
     
      <p>この配列には、<codeph>COMPUTER</codeph> という特別な File オブジェクトを格納することができます。この場合、進むことができるディレクトリが存在せず、その内容がルートディレクトリ（Windows では C:\ および D:\ など）であることを表します。</p>
     
      <p>次の例は、このプロパティを FileSystemHistoryButton コントロールで使用して、次のディレクトリに進むボタンを実装する方法を示したものです。</p>
     
      <pre>
      &lt;mx:FileSystemList id="fileSystemViewer" directory="{File.desktopDirectory}"/>
      &lt;mx:FileSystemHistoryButton label="Forward"
          enabled="{fileSystemViewer.canNavigateForward}"
          dataProvider="{fileSystemViewer.forwardHistory}"
          click="fileSystemViewer.navigateForward();"
          itemClick="fileSystemViewer.navigateForward(event.index);"/></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FileSystemList/canNavigateForward"><linktext>canNavigateForward</linktext></link><link href="mx.controls.xml#FileSystemList/navigateForward()"><linktext>navigateForward()</linktext></link><link href="mx.controls.xml#FileSystemHistoryButton"><linktext>mx.controls.FileSystemHistoryButton</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:nameCompareFunction:get"><apiName>nameCompareFunction</apiName><shortdesc>
      ソート順の決定を目的としてファイル名とサブディレクトリ名を比較する方法を変更するために使用できるコールバック関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ソート順の決定を目的としてファイル名とサブディレクトリ名を比較する方法を変更するために使用できるコールバック関数です。
     
      <p>この関数には次のシグネチャが必要です。</p>
     
      <pre>function myNameCompareFunction(name1:String, name2:String):int</pre>
     
      <p><codeph>-1</codeph> を返すのは、<codeph>name1</codeph> を <codeph>name2</codeph> の前にソートする場合で、<codeph>1</codeph> を返すのは、<codeph>name1</codeph> を <codeph>name2</codeph> の後にソートする場合です。名前が同じ場合は <codeph>0</codeph> を返します。</p>
     
      <p>このプロパティを設定していない場合、大文字と小文字を区別し、ロケールに依存した方法で 2 つの名前が比較されます。この比較処理では、まず各名前に対してストリングメソッド <codeph>toLocaleLowerCase()</codeph> が呼び出され、<codeph>&lt;</codeph> および <codeph>></codeph> 演算子を使用した比較が行われます。</p>
     
      <p><codeph>enumerationMode</codeph> を <codeph>FileSystemEnumerationMode.FILES_FIRST</codeph> または <codeph>FileSystemEnumerationMode.DIRECTORIES_FIRST</codeph> に設定した場合は、このメソッドを使ってファイルまたはディレクトリの個別のグループ内でのみ名前の比較が行われます。</p>
     
      <p>このプロパティは、コントロールに表示されるサブディレクトリおよびファイルの順序に影響します。 ただし、<codeph>dataProvider</codeph> プロパティに設定される File インスタンスには影響せず、<codeph>dataProvider</codeph> に適用されるソート処理の動作を変化させて機能します。 このプロパティを設定しても、現在の <codeph>directory</codeph> は再列挙されません。</p>
     
      <p>このプロパティを設定すると、選択されていたアイテムが選択解除され、コントロールでのスクロール位置が左上隅にリセットされます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:selectedPath:get"><apiName>selectedPath</apiName><shortdesc>
      選択されているサブディレクトリまたはファイルを表す File アイテムの nativePath です。アイテムが選択されていない場合は null になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      選択されているサブディレクトリまたはファイルを表す File アイテムの <codeph>nativePath</codeph> です。アイテムが選択されていない場合は <codeph>null</codeph> になります。
     
      <p>複数のファイルが選択されている場合にこのプロパティを取得すると、<codeph>selectedPaths</codeph> 配列の最初のパスになります。</p>
     
      <p>このプロパティを設定すると、<codeph>selectedPaths</codeph>、<codeph>selectedItem</codeph>、<codeph>selectedItems</codeph>、<codeph>selectedIndex</codeph> および <codeph>selectedIndices</codeph> の各プロパティに影響します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:selectedPaths:get"><apiName>selectedPaths</apiName><shortdesc>
      選択されているサブディレクトリおよびファイルを表す File アイテムの nativePath ストリングの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      選択されているサブディレクトリおよびファイルを表す File アイテムの <codeph>nativePath</codeph> ストリングの配列です。 アイテムが選択されていない場合、この配列は空になります。
     
      <p>このプロパティを設定すると、<codeph>selectedPaths</codeph>、<codeph>selectedItem</codeph>、<codeph>selectedItems</codeph>、<codeph>selectedIndex</codeph> および <codeph>selectedIndices</codeph> の各プロパティに影響します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedIndex"><linktext>mx.controls.listClasses.ListBase.selectedIndex</linktext></link><link href="" invalidHref="mx.controls.listClasses.xml#ListBase/selectedItem"><linktext>mx.controls.listClasses.ListBase.selectedItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:FileSystemList:showExtensions:get"><apiName>showExtensions</apiName><shortdesc>
      ファイル名の拡張子を表示するかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ファイル名の拡張子を表示するかどうかを指定するフラグです。 ファイル拡張子を表示する場合は <codeph>true</codeph> に、非表示にする場合は <codeph>false</codeph> に設定します。 ディレクトリ名の拡張子は、常に表示されます。
     
      <p>このプロパティを設定しても、表示されるアイテムや、表示される順序には影響しません。また、選択されるアイテムやスクロール位置にも影響しません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:showHidden:get"><apiName>showHidden</apiName><shortdesc>
      オペレーティングシステムで非表示になっているファイルおよびディレクトリを表示するかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      オペレーティングシステムで非表示になっている隠しファイルおよび隠しディレクトリを表示するかどうかを指定するフラグです。 隠しファイルおよび隠しディレクトリを表示する場合は <codeph>true</codeph> に、非表示にする場合は <codeph>false</codeph> に設定します。
     
      <p>このプロパティを設定すると、選択されていたアイテムが選択解除され、コントロールでのスクロール位置が左上隅にリセットされます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemList:showIcons:get"><apiName>showIcons</apiName><shortdesc>
      ファイル名の前にアイコンを表示するかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ファイル名の前にアイコンを表示するかどうかを指定するフラグです。 アイコンを表示する場合は <codeph>true</codeph> に、非表示にする場合は <codeph>false</codeph> に設定します。
     
      <p><codeph>directoryIcon</codeph> スタイルおよび <codeph>fileIcon</codeph> スタイルを設定して、デフォルトのアイコンを変更できます。 Apollo M2 でサポートされていないので、このコントロールでは、オペレーティングシステムでそのファイルに表示される実際のアイコンを表示できません。</p>
     
      <p>このプロパティを設定しても、表示されるアイテムや、表示される順序には影響しません。また、選択されるアイテムやスクロール位置にも影響しません。</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemSizeDisplayMode"><apiName>FileSystemSizeDisplayMode</apiName><shortdesc>
  FileSystemSizeDisplayMode クラスは、FileSystemDataGrid クラスの sizeDisplayMode プロパティの定数を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  FileSystemSizeDisplayMode クラスは、FileSystemDataGrid クラスの <codeph>sizeDisplayMode</codeph> プロパティの定数を定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#FileSystemDataGrid/enumerationMode"><linktext>mx.controls.FileSystemDataGrid.enumerationMode</linktext></link></related-links><apiValue id="mx.controls:FileSystemSizeDisplayMode:BYTES"><apiName>BYTES</apiName><shortdesc>
      ファイルサイズをバイト単位で表示するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bytes</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ファイルサイズをバイト単位で表示するように指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemSizeDisplayMode:KILOBYTES"><apiName>KILOBYTES</apiName><shortdesc>
      ファイルサイズをキロバイト（KB）単位で表示するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>kilobytes</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ファイルサイズをキロバイト（KB）単位で表示するように指定します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:HTML"><apiName>HTML</apiName><shortdesc>
  HTML コントロールを使用すると、アプリケーションで HTML コンテンツを表示できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  このコントロールの上端とその HTML コンテンツ領域の上端との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  このコントロールの右端とその HTML コンテンツ領域の右端との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  このコントロールの左端とその HTML コンテンツ領域の左端との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:HTML" playerVersion="AIR1.1" type="Number">
<description>
  このコントロールの下端とその HTML コンテンツ領域の下端との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:HTML&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:HTML
    <strong>Properties</strong>
    data="<i>null</i>"
    historyPosition="0"
    htmlHost="<i>null</i>"
    htmlLoaderFactory="mx.core.ClassFactory"
    htmlText=""
    listData="<i>null</i>"
    location=""
    paintsDefaultBackground="false"
    runtimeApplicationDomain="<i>null</i>"
    userAgent="<i>null</i>"
 
    <strong>Styles</strong>
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
 
    <strong>Events</strong>
    complete="<i>No default</i>"
    htmlDOMInitialize="<i>No default</i>"
    htmlRender="<i>No default</i>"
    locationChange="<i>No default</i>"
    uncaughtScriptException="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:ScrollControlBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  HTML コントロールを使用すると、アプリケーションで HTML コンテンツを表示できます。
 
  <p><codeph>location</codeph> プロパティを使用して、コントロールにコンテンツが表示される HTML ページの URL を指定するか、<codeph>htmlText</codeph> プロパティを設定して、コントロールにレンダリングされる HTML 形式のテキストを含むストリングを指定できます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="../../flash/html/HTMLLoader.html"><linktext>HTMLLoader</linktext></link></related-links><adobeApiEvent id="mx.controls:HTML_flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException"><apiName>uncaughtScriptException</apiName><shortdesc>
  不明な JavaScript 例外が送出されました。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier>flash.events.HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  不明な JavaScript 例外が送出されました。
 
  <p>このイベントは必ず非同期で送出されます。このイベントのイベントハンドラーは、このコントロールまたは内部 <codeph>htmlLoader</codeph> のあらゆるメソッドを呼び出すことができるか、またはあらゆるプロパティにアクセスできます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.LOCATION_CHANGE_locationChange"><apiName>locationChange</apiName><shortdesc>
  location プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.LOCATION_CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>location</codeph> プロパティが変更されたときに送出されます。
 
  <p>このイベントは必ず非同期で送出されます。このイベントのイベントハンドラーは、このコントロールまたは内部 <codeph>htmlLoader</codeph> のあらゆるメソッドを呼び出すことができるか、またはあらゆるプロパティにアクセスできます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.HTML_RENDER_htmlRender"><apiName>htmlRender</apiName><shortdesc>
  このコントロールの HTML コンテンツが初めてレンダリングされたとき、およびそれ以降再レンダリングされるたびに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.HTML_RENDER</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  このコントロールの HTML コンテンツが初めてレンダリングされたとき、およびそれ以降再レンダリングされるたびに送出されます。
 
  <p>HTML コントロールはこれらのイベントのうち複数のものを送出できるため、パフォーマンスにマイナスの影響を与える可能性がある <codeph>render</codeph> ハンドラー内での規模の大きい処理は回避する必要があります。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.HTML_DOM_INITIALIZE_htmlDOMInitialize"><apiName>htmlDOMInitialize</apiName><shortdesc>
  location プロパティまたは htmlText プロパティを設定することによって発生したロード操作に対する応答で、HTML DOM が初期化された後で送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>location</codeph> プロパティまたは <codeph>htmlText</codeph> プロパティを設定することによって発生したロード操作に対する応答で HTML DOM が初期化された後で送出されます。
 
  <p>このイベントの送出時には、まだどの JavaScript メソッドも実行されていません。 <codeph>domWindow</codeph> オブジェクトと <codeph>domWindow.document</codeph> オブジェクトは存在しますが、他の DOM オブジェクトは存在していない可能性があります。 このイベントを使用して、JavaScript メソッドから後でアクセスできるように、<codeph>domWindow</codeph> オブジェクトおよび <codeph>domWindow.document</codeph> オブジェクトにプロパティを設定できます。</p>
 
  <p>このイベントのハンドラーでは、どのようなプロパティも設定しないようにする必要があります。また、他のロード操作を開始するメソッドや、現在のロード操作で使用している URL に影響を及ぼすメソッドを呼び出さないようにする必要があります。これらの処理を実行すると、ActionScript または JavaScript の例外が発生します。</p>
 
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="mx.controls.location.xml"><linktext>location</linktext></link><link href="" invalidHref="mx.controls.htmlText.xml"><linktext>htmlText</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.controls:HTML_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  location プロパティまたは htmlText プロパティの設定が完了したことによって発生した最後のロード操作の後で送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>location</codeph> プロパティまたは <codeph>htmlText</codeph> プロパティの設定が完了したことによって発生した最後のロード操作の後で送出されます。
 
  <p>このイベントは、JavaScript の <codeph>load</codeph> イベントが HTML DOM で送出された後に、必ず非同期で送出されます。</p>
 
  <p>このイベントのイベントハンドラーは、このコントロールまたは内部 <codeph>htmlLoader</codeph> のあらゆるメソッドを呼び出すことができるか、またはあらゆるプロパティにアクセスできます。</p>
 
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="mx.controls.location.xml"><linktext>location</linktext></link><link href="" invalidHref="mx.controls.htmlText.xml"><linktext>htmlText</linktext></link></related-links></adobeApiEvent><apiConstructor id="mx.controls:HTML:HTML"><apiName>HTML</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:HTML:cancelLoad"><apiName>cancelLoad</apiName><shortdesc>
      進行中のロード操作をすべてキャンセルします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      進行中のロード操作をすべてキャンセルします。
     
      <p>このメソッドは、このコンポーネントの内部 HTMLLoader（<codeph>htmlLoader</codeph> プロパティ）が作成されていない段階で呼び出された場合は何も実行しません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:HTML:getHistoryAt"><apiName>getHistoryAt</apiName><shortdesc>
      このコントロールの履歴リストにある指定の位置で HTMLHistoryItem が返されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された位置にある履歴エントリの HTMLHistoryItem オブジェクトです。
     
      </apiDesc><apiType value="flash.html:HTMLHistoryItem"/></apiReturn><apiParam><apiItemName>position</apiItemName><apiType value="int"/><apiDesc>履歴リスト内の位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコントロールの履歴リストにある指定の位置で HTMLHistoryItem が返されます。
     
      <p>このメソッドが <codeph>null</codeph> を返すのは、このコンポーネントの内部 HTMLLoader（<codeph>htmlLoader</codeph> プロパティ）が作成されていない段階で呼び出された場合です。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.controls.historyPosition.xml"><linktext>historyPosition</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:HTML:historyBack"><apiName>historyBack</apiName><shortdesc>
      可能であれば、このコントロールの履歴リスト内を後方に戻ります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      可能であれば、このコントロールの履歴リスト内を後方に戻ります。
     
      <p>HTMLLoader オブジェクトのこのメソッドを呼び出すと、該当の HTML コンテンツの JavaScript で、<codeph>back()</codeph> メソッド（<codeph>window.history</codeph> プロパティのメソッド）を呼び出した場合と同じ結果が得られます。</p>
     
      <p>このメソッドは、このコンポーネントの内部 HTMLLoader（<codeph>htmlLoader</codeph> プロパティ）が作成されていない段階で呼び出された場合は何も実行しません。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#HTML/historyPosition"><linktext>historyPosition</linktext></link><link href="mx.controls.xml#HTML/historyForward()"><linktext>historyForward()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:HTML:historyForward"><apiName>historyForward</apiName><shortdesc>
      可能であれば、このコントロールの履歴リスト内を前方に進みます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      可能であれば、このコントロールの履歴リストの中を前方に進みます。
     
      <p>HTMLLoader オブジェクトのこのメソッドを呼び出すと、該当の HTML コンテンツの JavaScript で、<codeph>forward()</codeph> メソッド（<codeph>window.history</codeph> プロパティのメソッド）を呼び出した場合と同じ結果が得られます。</p>
     
      <p>この関数はエラーをスローしません。</p>
     
      <p>このメソッドは、このコンポーネントの内部 HTMLLoader（<codeph>htmlLoader</codeph> プロパティ）が作成されていない段階で呼び出された場合は何も実行しません。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#HTML/historyPosition"><linktext>historyPosition</linktext></link><link href="mx.controls.xml#HTML/historyBack()"><linktext>historyBack()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:HTML:historyGo"><apiName>historyGo</apiName><shortdesc>
      このコントロールの履歴リストの中を指定のステップ数だけ移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>steps</apiItemName><apiType value="int"/><apiDesc>履歴リストの中を前方（正数）または後方（負数）に移動するステップ数です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコントロールの履歴リストの中を指定のステップ数だけ移動します。
     
      <p>このメソッドでは、ステップ数が正数であれば前方に、負数であれば後方に移動します。 ステップ数が 0 の移動は、<codeph>reload()</codeph> を呼び出すことと同じです。</p>
     
      <p>このメソッドを実行すると、HTML コンテンツの JavaScript で <codeph>go()</codeph> メソッド（<codeph>window.history</codeph> プロパティのメソッド）を呼び出した場合と同じ結果が得られます。</p>
     
      <p>このメソッドは、このコンポーネントの内部 HTMLLoader（<codeph>htmlLoader</codeph> プロパティ）が作成されていない段階で呼び出された場合は何も実行しません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:HTML:reload"><apiName>reload</apiName><shortdesc>
      現在の Location から HTML コンテンツをリロードします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      現在の <codeph>location</codeph> から HTML コンテンツをリロードします。
     
      <p>このメソッドは、このコンポーネントの内部 HTMLLoader（<codeph>htmlLoader</codeph> プロパティ）が作成されていない段階で呼び出された場合は何も実行しません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:HTML:htmlLoader"><apiName>htmlLoader</apiName><shortdesc>
      このコントロールの HTML コンテンツをレンダリングする内部 HTMLLoader オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.html:HTMLLoader"/></apiValueDef><apiDesc>
      このコントロールの HTML コンテンツをレンダリングする内部 HTMLLoader オブジェクトです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      HTML コンテンツの高さです（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      HTML コンテンツの高さです（ピクセル単位）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      HTML コンテンツの幅です（ピクセル単位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      HTML コンテンツの幅です（ピクセル単位）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:data:get"><apiName>data</apiName><shortdesc>
      アイテムレンダラーまたはアイテムエディターでコンポーネントを使用するときに、そのコンポーネントに値を渡すことができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      アイテムレンダラーまたはアイテムエディターでコンポーネントを使用するときに、そのコンポーネントに値を渡すことができます。 通常、データバインディングを使用して、<codeph>data</codeph> プロパティのフィールドをこのコンポーネントのプロパティにバインドします。
     
      <p>ドロップインアイテムレンダラーまたはドロップインアイテムエディターとしてコントロールを使用すると、アイテムの現在の値が、このコントロールの <codeph>text</codeph> プロパティに自動的に書き込まれます。</p>
     
      <p>MXML でこのプロパティを設定することはできません。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.IDataRenderer.xml"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:domWindow:get"><apiName>domWindow</apiName><shortdesc>
      このコントロール内部にある HTML DOM のルートフレームを表す JavaScript window オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロール内部にある HTML DOM のルートフレームを表す JavaScript <codeph>window</codeph> オブジェクトです。
     
      <p>このプロパティが <codeph>null</codeph> でなくなるのは、<codeph>htmlDOMInitialize</codeph> イベントが送出されたときです。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:historyLength:get"><apiName>historyLength</apiName><shortdesc>
      後方と前方のエントリを含む、履歴リスト全体の長さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      後方と前方のエントリを含む、履歴リスト全体の長さです。このプロパティの値は、HTML コンテンツの <codeph>window.history.length</codeph> JavaScript プロパティの値と同じです。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#HTML/historyPosition"><linktext>historyPosition</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:historyPosition:get"><apiName>historyPosition</apiName><shortdesc>
      履歴リストでの現在の位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      履歴リストでの現在の位置です。
     
      <p>履歴リストは、HTML コンテンツの <codeph>window.history</codeph> オブジェクトに対応しています。 現在の位置未満のエントリは "後方" リスト、現在の位置を超えるエントリは "前方" リストです。最後の位置を超える位置を設定しようとすると、最後の位置に設定されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:htmlHost:get"><apiName>htmlHost</apiName><shortdesc>
      HTML コンテンツのユーザーインターフェイスにある、window.document.title プロパティなどの特定のエレメントの変更を扱うために使用される HTMLHost オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.html:HTMLHost"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      HTML コンテンツのユーザーインターフェイスにある、<codeph>window.document.title</codeph> プロパティなどの特定のエレメントの変更を扱うために使用される HTMLHost オブジェクトです。
     
      <p>HTMLLoader のデフォルトの動作をオーバーライドするには、HTMLHost クラスのサブクラスを作成し、HTML コンテンツで様々なユーザーインターフェイスの変更を処理できるようにそのメンバー関数をオーバーライドします。次に、このプロパティの値を、作成したサブクラスのインスタンスに設定します。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:htmlLoaderFactory:get"><apiName>htmlLoaderFactory</apiName><shortdesc>
      HTMLLoader から派生したインスタンスを生成して htmlLoader として使用する IFactory です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.core:IFactory"/></apiValueDef><apiDesc>
      HTMLLoader から派生したインスタンスを生成して htmlLoader として使用する IFactory です。
     
      <p>デフォルト値は、HTMLLoader の IFactory です。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:htmlText:get"><apiName>htmlText</apiName><shortdesc>
      コントロールで表示する、HTML フォーマットのストリングを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      コントロールで表示する、HTML フォーマットのストリングを指定します。
     
      <p>このプロパティを設定すると、<codeph>location</codeph> プロパティが <codeph>null</codeph> に設定される副作用が発生します。逆に、location プロパティを設定すると、このプロパティが null に設定されます。</p>
     
      <p><codeph>htmlText</codeph> プロパティ経由で追加されたコンテンツは、アプリケーションのセキュリティサンドボックス内に置かれます。AIR アプリケーションが、アプリケーションサンドボックスに配置された HTML コントロールを含んでいるときに、<codeph>htmlText</codeph> プロパティを設定することでリモート HTML コードが直接追加された場合、HTML テキストに含まれるすべてのスクリプトはアプリケーションサンドボックス内で実行されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#HTML/location"><linktext>location</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:listData:get"><apiName>listData</apiName><shortdesc>
      ドロップインアイテムレンダラーまたはドロップインアイテムエディターとして使用すると、このコンポーネントの listData プロパティが、List コントロールからの該当するデータで初期化されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.controls.listClasses:BaseListData"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      ドロップインアイテムレンダラーまたはドロップインアイテムエディターとしてこのコンポーネントを使用すると、その <codeph>listData</codeph> プロパティが、List コントロールの該当するデータで初期化されます。 その後、このコンポーネントでは、この <codeph>listData</codeph> プロパティを使用して、ドロップインアイテムレンダラーまたはドロップインアイテムエディターの <codeph>data</codeph> プロパティを初期化できます。
     
      <p>MXML および ActionScript でこのプロパティを設定することはありません。このコンポーネントがドロップインアイテムレンダラーまたはドロップインアイテムエディターとして使用されるときに、Flex でプロパティが設定されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.controls.listClasses.IDropInListItemRenderer.xml"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:loaded:get"><apiName>loaded</apiName><shortdesc>
      以前のロード操作に対応する JavaScript の load イベントが、このコントロールの HTML DOM に配信されたかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      以前のロード操作に対応する JavaScript の <codeph>load</codeph> イベントが、このコントロールの HTML DOM に配信されたかどうかを示すフラグです。
     
      <p>このプロパティが <codeph>true</codeph> であるのは、<codeph>complete</codeph> イベントが送出されていない場合です。</p>
     
      <p>このプロパティが <codeph>true</codeph> にならない場合もあります。 <codeph>complete</codeph> イベントが送出されない場合も、同様の結果になります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:location:get"><apiName>location</apiName><shortdesc>
      このコントロールで表示する HTML ページの URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールで表示する HTML ページの URL です。
     
      <p>このプロパティを設定すると、<codeph>htmlText</codeph> プロパティが <codeph>null</codeph> に設定される副作用が発生します。逆に、htmlText プロパティを設定すると、このプロパティが null に設定されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#HTML/htmlText"><linktext>htmlText</linktext></link></related-links></apiValue><apiValue id="mx.controls:HTML:paintsDefaultBackground:get"><apiName>paintsDefaultBackground</apiName><shortdesc>
      このコントロールの HTML コンテンツの背景が、デフォルトの不透明白色であるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールの HTML コンテンツの背景が、デフォルトの不透明白色であるかどうかを示します。
     
      <p>このプロパティが <codeph>false</codeph> である場合、この Flex コントロールに指定されている背景があれば、それが HTML コンテンツの背景に表示されます。</p>
     
      <p>ただし、style="background-color:gray" などで指定された独自の不透明背景色がある HTML エレメントでは、その背景が表示されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:pdfCapability:get"><apiName>pdfCapability</apiName><shortdesc>
      ユーザーのシステムに対する PDF サポートのタイプです。整数のコード値で定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      ユーザーのシステムに対する PDF サポートのタイプです。整数のコード値で定義します。
     
      <p>このプロパティが <codeph>PDFCapability.STATUS_OK</codeph> である場合にのみ、HTML オブジェクトで PDF のコンテンツを表示できます。 PDFCapability クラスでは、<codeph>pdfCapability</codeph> プロパティの値として使用できる次の定数を定義します。</p>
     
      <adobetable class="innertable">
        
        
        
        
        
      <tgroup cols="2"><thead><row><entry>PDFCapability の定数</entry><entry>説明</entry></row></thead><tbody><row>
         <entry><codeph>STATUS_OK</codeph></entry>
         <entry>適切なバージョン（8.1 以降）の Acrobat Reader が検出されたので、HTML オブジェクトに PDF のコンテンツをロードできます。
           <p><i>メモ：</i>バージョン 7.x 以降の Acrobat Reader が実行されている Windows システムでは、HTML オブジェクトへの PDF のロードをサポートしているさらに高いバージョンの Acrobat Reader がインストールされていても、実際に実行されているバージョンの Acrobat Reader が使用されます。 この場合、<codeph>pdfCampability</codeph> プロパティの値を <codeph>PDFCapability.STATUS_OK</codeph> として AIR アプリケーションで HTML オブジェクトに PDF のコンテンツをロードしようとすると、古いバージョンの Acrobat Reader では警告が表示されますが、AIR ランタイムではエラーメッセージが表示されません。 エンドユーザーがこの状況に遭遇する可能性がある場合は、該当アプリケーションの実行時に Acrobat Reader を閉じるように指示することを検討してください。 適切な時間内に PDF のコンテンツがロードされない場合に、これらの指示を表示することもできます。</p></entry>
        </row><row>
         <entry><codeph>ERROR_INSTALLED_READER_NOT_FOUND</codeph></entry>
         <entry>Acrobat Reader が検出されません。 HTML オブジェクトで PDF のコンテンツを表示することはできません。</entry>
        </row><row>
         <entry><codeph>ERROR_INSTALLED_READER_TOO_OLD</codeph></entry>
         <entry>Acrobat Reader が検出されましたが、バージョンが古すぎます。 HTML オブジェクトで PDF のコンテンツを表示することはできません。</entry>
        </row><row>
         <entry><codeph>ERROR_PREFERED_READER_TOO_OLD</codeph></entry>
         <entry>適切なバージョン（8.1 以降）の Acrobat Reader が検出されましたが、PDF のコンテンツを扱うように設定されている Acrobat Reader は 8.1 より古いバージョンです。 HTML オブジェクトで PDF のコンテンツを表示することはできません。</entry>
        </row></tbody></tgroup></adobetable>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:runtimeApplicationDomain:get"><apiName>runtimeApplicationDomain</apiName><shortdesc>
      HTML の window.runtime スクリプトで使用する ApplicationDomain です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.system:ApplicationDomain"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      HTML の <codeph>window.runtime</codeph> スクリプトで使用する ApplicationDomain です。
     
      <p>このプロパティが <codeph>null</codeph> である場合、または HTML コンテンツの場合とは異なるセキュリティドメインの ApplicationDomain を指定している場合、HTML ページではそのドメインとしてデフォルトの <codeph>ApplicationDomain</codeph> が使用されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:HTML:userAgent:get"><apiName>userAgent</apiName><shortdesc>
      このコントロールからのコンテンツ要求に使用するユーザーエージェントストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールからのコンテンツ要求に使用するユーザーエージェントストリングです。
     
      <p>アプリケーションドメインですべての HTML コントロールが使用するデフォルトのユーザーエージェントストリングを設定するには、静的な <codeph>URLRequestDefaults.userAgent</codeph> プロパティを設定します。 <codeph>userAgent</codeph> プロパティに値が設定されていない場合（値が <codeph>null</codeph> である場合）、ユーザーエージェントストリングは <codeph>URLRequestDefaults.userAgent</codeph> の値に設定されます。</p>
     
      <p>このコントロールの <codeph>userAgent</codeph> プロパティにも、<codeph>URLRequestDefaults.userAgent</codeph> にも値が設定されていない場合は、デフォルト値がユーザーエージェントストリングとして使用されます。  このデフォルト値は、次の 2 つの例に示すように、実行時のオペレーティングシステム（Mac OS、Windows など）、実行時の言語、および実行時のバージョンによって異なります。</p>
     
      <pre>
      "Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/420+ (KHTML, like Gecko) AdobeAIR/1.0"
      "Mozilla/5.0 (Windows; U; en) AppleWebKit/420+ (KHTML, like Gecko) AdobeAIR/1.0"
      </pre>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.net.xml#URLRequest/userAgent"><linktext>flash.net.URLRequest.userAgent</linktext></link><link href="" invalidHref="flash.net.xml#URLRequestDefaults/userAgent"><linktext>flash.net.URLRequestDefaults.userAgent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:FlexNativeMenu"><apiName>FlexNativeMenu</apiName><shortdesc>
  FlexNativeMenu コンポーネントでは、AIR の NativeMenu クラスのラッパーが提供されます。</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;mx:FlexNativeMenu&gt</code> tag supports the following tag attributes:</p>
 
  <pre>
  &lt;mx:FlexNativeMenu
    <b>Properties</b>
    dataDescriptor="<i>mx.controls.treeClasses.DefaultDataDescriptor</i>"
    dataProvider="<i>undefined</i>"
    keyEquivalentField="keyEquivalent"
    keyEquivalentFunction="<i>undefined</i>"
    keyEquivalentModifiersFunction="<i>undefined</i>"
    labelField="label"
    labelFunction="<i>undefined</i>"
    mnemonicIndexField="mnemonicIndex"
    mnemonicIndexFunction="<i>undefined</i>"
    showRoot="true"
 
    <b>Events</b>
    itemClick="<i>No default</i>"
    menuShow="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:ILayoutManagerClient</apiBaseInterface><apiBaseInterface>mx.controls:IFlexContextMenu</apiBaseInterface><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexNativeMenu コンポーネントでは、AIR の NativeMenu クラスのラッパーが提供されます。 FlexNativeMenu は、MXML とデータプロバイダーを使用してメニュー構造を指定するなど、Flex 開発者が使い慣れており、その他の Flex メニューコンポーネントと一貫している手法を使用して、ネイティブのオペレーティングシステムメニュー（ウィンドウ、アプリケーションおよびコンテキストメニューなど）を定義する方法を提供します。 ただし、Flex メニューコンポーネントとは異なり、FlexNativeMenu コンポーネントによって定義されているメニューは、Flex によるビジュアルコンポーネントとして作成されるのではなく、AIR アプリケーションの一部としてホストオペレーティングシステムによってレンダリングされます。
 
  <p>その他の Flex メニューコンポーネントと同様に、FlexNativeMenu コンポーネントによって表わされるメニューの構造を定義するには、メニューを定義するために使用されるデータを格納している XML 階層やオブジェクトの配列などのデータプロバイダーを作成します。 メニューアイテムラベルに使用されるデータフィールドを指定する <codeph>labelField</codeph> プロパティ、メニューアイテムに対するキーボードショートカットを定義するフィールドを指定する <codeph>keyEquivalentField</codeph> プロパティおよびメニューアイテムのニーモニックとして使用されるラベルの文字のインデックス位置を定義するフィールドを指定する <codeph>mnemonicIndexField</codeph> プロパティなど、いくつかのプロパティは、データプロバイダーのデータがどのように解釈されるかを定義するために設定できます。</p>
 
  <p>FlexNativeMenu アイテムに使用するデータプロバイダーによって、次の XML データプロバイダーが示すように、アイテムの表示方法と動き方を決定する属性をいくつか指定できます。</p>
  <pre>
   &lt;mx:XML format="e4x" id="myMenuData">
     &lt;root>
        &lt;menuitem label="MenuItem A">
            &lt;menuitem label="SubMenuItem A-1" enabled="False"/>
            &lt;menuitem label="SubMenuItem A-2"/>
        &lt;/menuitem>
        &lt;menuitem label="MenuItem B" type="check" toggled="true"/>
        &lt;menuitem label="MenuItem C" type="check" toggled="false"/>
        &lt;menuitem type="separator"/>
        &lt;menuitem label="MenuItem D">
            &lt;menuitem label="SubMenuItem D-1"/>
            &lt;menuitem label="SubMenuItem D-2"/>
            &lt;menuitem label="SubMenuItem D-3"/>
        &lt;/menuitem>
    &lt;/root>
 &lt;/mx:XML></pre>
 
  <p>次の表では、指定できる属性とそのデータ型、さらにその目的と、メニューで DefaultDataDescriptor クラスを使用してデータプロバイダーを解析する場合に、そのデータプロバイダーが属性をどのように表示するかを一覧で説明します。</p>
 
  <adobetable class="innertable">
  
  
  
  
  
  
  
  
  
  
  
  
  
 <tgroup cols="3"><thead><row><entry>属性</entry><entry>データ型</entry><entry>説明</entry></row></thead><tbody><row>
    <entry><codeph>altKey</codeph></entry>
    <entry>ブール</entry>
    <entry>Alt キーがアイテムのキー相当物の一部として必要かどうかを指定します。</entry>
  </row><row>
    <entry><codeph>cmdKey</codeph></entry>
    <entry>ブール</entry>
    <entry><b>メモ：</b>この属性は Flex 3.2 では使用されません。代わりに、<codeph>commandKey</codeph> を使用してください。Command キーがアイテムのキー相当物の一部として必要かどうかを指定します。</entry>
  </row><row>
    <entry><codeph>commandKey</codeph></entry>
    <entry>ブール</entry>
    <entry>Command キーがアイテムのキー相当物の一部として必要かどうかを指定します。</entry>
  </row><row>
    <entry><codeph>controlKey</codeph></entry>
    <entry>ブール</entry>
    <entry>Control キーがアイテムのキー相当物の一部として必要かどうかを指定します。</entry>
  </row><row>
    <entry><codeph>ctrlKey</codeph></entry>
    <entry>ブール</entry>
    <entry><b>メモ：</b>この属性は Flex 3.2 では使用されません。代わりに、<codeph>controlKey</codeph> を使用してください。Control キーがアイテムのキー相当物の一部として必要かどうかを指定します。</entry>
  </row><row>
    <entry><codeph>enabled</codeph></entry>
    <entry>ブール</entry>
    <entry>ユーザーがメニューアイテムを選択できる場合は <codeph>true</codeph>、選択できない場合は <codeph>false</codeph> を指定します。 このプロパティを指定しないと、アイテムはこの値が <codeph>true</codeph> の場合と同じように扱われます。 デフォルトのデータ記述子を使用する場合、データプロバイダーでは <codeph>enabled</codeph> XML 属性またはオブジェクトフィールドを使用して、この特定を指定する必要があります。</entry>
  </row><row>
    <entry><codeph>keyEquivalent</codeph></entry>
    <entry>ストリング</entry>
    <entry>押されると、メニューアイテムが選択されたようにイベントをトリガーするキーボード文字を指定します。 キー相当物を指定するデータ内のフィールド名や、キー相当物を決定する関数は、メニューの <codeph>keyEquivalentField</codeph> プロパティまたは <codeph>keyEquivalentFunction</codeph> プロパティで指定します。 データプロバイダーが E4X XML 形式の場合、キー相当物を割り当てるにはこれらのプロパティのいずれかを指定する必要があります。</entry>
  </row><row>
    <entry><codeph>label</codeph></entry>
    <entry>ストリング</entry>
    <entry>コントロールに表示されるテキストを指定します。 このアイテムは、<codeph>separator</codeph> 以外のすべてのタイプのメニューアイテムに使用します。 ラベルを指定するデータ内のフィールド名や、ラベルを決定する関数は、メニューの <codeph>labelField</codeph> プロパティまたは <codeph>labelFunction</codeph> プロパティで指定します。 データプロバイダーが E4X XML 形式の場合、ラベルを表示するにはこれらのプロパティのいずれかを指定する必要があります。 データプロバイダーがストリングの配列である場合、ストリング値がラベルとして使用されます。</entry>
  </row><row>
    <entry><codeph>mnemonicIndex</codeph></entry>
    <entry>整数</entry>
    <entry>メニューアイテムのニーモニックとして使用されるラベル内の文字のインデックス位置を指定します。 ニーモニックインデックスを指定するデータ内のフィールド名や、ニーモニックインデックスを決定する関数は、メニューの <codeph>mnemonicIndexField</codeph> プロパティまたは <codeph>mnemonicIndexFunction</codeph> プロパティで指定します。 データプロバイダーが E4X XML 形式の場合、データ内のニーモニックインデックスを指定するにはこれらのプロパティのいずれかを指定する必要があります。 また、ラベル内の文字の左に隣接する形でアンダースコアを含めることによって、その文字がメニューアイテムのニーモニックであることを示すことができます。</entry>
  </row><row>
    <entry><codeph>shiftKey</codeph></entry>
    <entry>ブール</entry>
    <entry>Shift キーがアイテムのキー相当物の一部として必要かどうかを指定します。</entry>
  </row><row>
    <entry><codeph>toggled</codeph></entry>
    <entry>ブール</entry>
    <entry>check アイテムが選択されているかどうかを指定します。 このプロパティを選択しないと、アイテムはこの値が <codeph>false</codeph> の場合と同じように扱われ、アイテムは選択されません。 デフォルトのデータ記述子を使用する場合、データプロバイダーでは <codeph>toggled</codeph> XML 属性またはオブジェクトフィールドを使用して、この特性を指定する必要があります。</entry>
  </row><row>
    <entry><codeph>type</codeph></entry>
    <entry>ストリング</entry>
    <entry>メニューアイテムのタイプを指定します。 有効な値は、<codeph>separator</codeph> と <codeph>check</codeph> です。 他の値や、タイプ項目のないノードは、normal のメニュー項目として扱われます。 デフォルトのデータ記述子を使用する場合、データプロバイダーでは <codeph>type</codeph> XML 属性またはオブジェクトフィールドを使用して、この特性を指定する必要があります。</entry>
  </row></tbody></tgroup></adobetable>
 
  <p>ウィンドウメニューを作成するには、メニューが表示される Window または WindowedApplication インスタンスの <codeph>menu</codeph> プロパティとして FlexNativeMenu を設定します。 アプリケーションメニューを作成するには、アプリケーションの WindowedApplication の <codeph>menu</codeph> プロパティとして FlexNativeMenu を割り当てます。 ユーザーインターフェイスの一部に対するコンテキストメニューとして FlexNativeMenu を割り当てるには、FlexNativeMenu インスタンスの <codeph>setContextMenu()</codeph> メソッドを呼び出し、UI オブジェクトを引数として渡します。 FlexNativeMenu コンポーネントの <codeph>display()</codeph> メソッドを呼び出して、アプリケーションのウィンドウのいずれかの上の任意の場所にポップアップメニューとしてメニューを表示します。</p>
 
  <p>いつメニューアイテムコマンドがトリガーされるかを検出するには、<codeph>itemClick</codeph> イベントのリスナーを登録します。 メニューまたはサブメニューが開かれるときを決定するために、<codeph>menuShow</codeph> イベントに対するリスナーを登録することもできます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.display.NativeMenu.xml"><linktext>flash.display.NativeMenu</linktext></link><link href="mx.events.xml#FlexNativeMenuEvent"><linktext>mx.events.FlexNativeMenuEvent</linktext></link></related-links><adobeApiEvent id="mx.controls:FlexNativeMenu_mx.events.FlexNativeMenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  メニューアイテムが選択されたときに送出されます。</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexNativeMenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.FlexNativeMenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  メニューアイテムが選択されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:FlexNativeMenu_mx.events.FlexNativeMenuEvent.MENU_SHOW_menuShow"><apiName>menuShow</apiName><shortdesc>
  メニューまたはサブメニューが表示される前に送出されます。</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexNativeMenuEvent.MENU_SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexNativeMenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  メニューまたはサブメニューが表示される前に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FlexNativeMenu:FlexNativeMenu"><apiName>FlexNativeMenu</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:FlexNativeMenu:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      コンポーネントに設定されたプロパティを処理します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンポーネントに設定されたプロパティを処理します。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.xml#UIComponent/commitProperties()"><linktext>mx.core.UIComponent.commitProperties()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:createAutomationIDPart"><apiName>createAutomationIDPart</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="mx.automation:IAutomationObject"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:createAutomationIDPartWithRequiredProperties"><apiName>createAutomationIDPartWithRequiredProperties</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="mx.automation:IAutomationObject"/></apiParam><apiParam><apiItemName>properties</apiItemName><apiType value="Array"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:display"><apiName>display</apiName><shortdesc>
      このメニューを、指定された位置にポップアップ表示します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stage</apiItemName><apiType value="flash.display:Stage"/><apiDesc>このメニューが表示される Stage オブジェクトです。 
     
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="int"/><apiDesc>このメニューを表示するステージの起点を基準とした、水平方向のピクセル数です。 
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="int"/><apiDesc>このメニューが表示されるステージの起点を基準にした垂直方向のピクセル数です。 
     </apiDesc></apiParam></apiOperationDef><apiDesc>
      このメニューを、指定された位置にポップアップ表示します。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:getAutomationChildAt"><apiName>getAutomationChildAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="mx.automation:IAutomationObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:getAutomationChildren"><apiName>getAutomationChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc conref="mx.core.UIComponent#invalidateProperties()">
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToKeyEquivalent"><apiName>itemToKeyEquivalent</apiName><shortdesc>
      keyEquivalentField プロパティと keyEquivalentFunction プロパティに基づいて、指定されたデータオブジェクトのキー相当物を返します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>データに基づいたキー相当物です。
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>表示されるオブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>keyEquivalentField</codeph> プロパティと <codeph>keyEquivalentFunction</codeph> プロパティに基づいて、指定されたデータオブジェクトのキー相当物を返します。このメソッドは、パラメーターをストリングに変換できない場合、空のストリングを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToKeyEquivalentModifiers"><apiName>itemToKeyEquivalentModifiers</apiName><shortdesc>
      keyEquivalentModifiersFunction プロパティに基づいて、指定されたデータオブジェクトのキー相当物のモディファイアを返します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>データに基づいたキー相当物のモディファイアの配列です。
     </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>表示されるオブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>keyEquivalentModifiersFunction</codeph> プロパティに基づいて、指定されたデータオブジェクトのキー相当物のモディファイアを返します。このメソッドは、パラメーターをモディファイアの配列に変換できない場合、空の配列を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      labelField プロパティと labelFunction プロパティに基づいて、指定されたデータオブジェクトに対するメニューアイテムラベルとして使用するストリングを返します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>データに応じて表示されるストリングです。
     </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>表示されるオブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>labelField</codeph> プロパティと <codeph>labelFunction</codeph> プロパティに基づいて、指定されたデータオブジェクトに対するメニューアイテムラベルとして使用するストリングを返します。このメソッドがパラメーターをストリングに変換できない場合は、単一の空白文字が返されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:itemToMnemonicIndex"><apiName>itemToMnemonicIndex</apiName><shortdesc>
      mnemonicIndexField プロパティと mnemonicIndexFunction プロパティに基づいて、指定されたデータオブジェクトのニーモニックインデックスを返します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>データに基づいたニーモニックインデックスです。
     </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>表示されるオブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>mnemonicIndexField</codeph> プロパティと <codeph>mnemonicIndexFunction</codeph> プロパティに基づいて、指定されたデータオブジェクトのニーモニックインデックスを返します。このメソッドは、パラメーターを整数に変換できない場合、-1 を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:parseLabelToMnemonicIndex"><apiName>parseLabelToMnemonicIndex</apiName><shortdesc>
      アンダースコア文字が存在するかどうかに基づいてラベルからニーモニックインデックスを抽出します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      アンダースコア文字が存在するかどうかに基づいてラベルからニーモニックインデックスを抽出します。先頭のアンダースコア文字（ある場合）を探し、インデックスとして使用します。
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:protected:parseLabelToString"><apiName>parseLabelToString</apiName><shortdesc>
      アンダースコア文字がある場合は削除し、エスケープされているアンダースコア文字がある場合は変換して、NativeMenuItem に対して使用される実際のラベルを決定します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      アンダースコア文字がある場合は削除し、エスケープされているアンダースコア文字がある場合は変換して、NativeMenuItem に対して使用される実際のラベルを決定します。
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:resolveAutomationIDPart"><apiName>resolveAutomationIDPart</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>criteria</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:setContextMenu"><apiName>setContextMenu</apiName><shortdesc>
      InteractiveObject のコンテキストメニューを基になるネイティブメニューに設定します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>component</apiItemName><apiType value="flash.display:InteractiveObject"/></apiParam></apiOperationDef><apiDesc>
      InteractiveObject のコンテキストメニューを基になるネイティブメニューに設定します。
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:unsetContextMenu"><apiName>unsetContextMenu</apiName><shortdesc>
      基になるネイティブメニューに設定されていた InteractiveObject のコンテキストメニューの設定を解除します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>component</apiItemName><apiType value="flash.display:InteractiveObject"/></apiParam></apiOperationDef><apiDesc>
      基になるネイティブメニューに設定されていた InteractiveObject のコンテキストメニューの設定を解除します。
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateNow"><apiName>validateNow</apiName><shortdesc>
      必要に応じて、このオブジェクトのプロパティとレイアウトを検証および更新し、それを再描画します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      必要に応じて、このオブジェクトのプロパティとレイアウトを検証および更新し、それを再描画します。
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:FlexNativeMenu:validateSize"><apiName>validateSize</apiName><shortdesc>
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:FlexNativeMenu:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      オートメーション関連機能を処理する委譲オブジェクト。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      オートメーション関連機能を処理する委譲オブジェクト。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationName:get"><apiName>automationName</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationTabularData:get"><apiName>automationTabularData</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationValue:get"><apiName>automationValue</apiName><shortdesc conref="mx.automation.IAutomationObject#automationValue">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.automation.IAutomationObject#automationValue">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      データプロバイダー内のデータにアクセスして操作するオブジェクトです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="mx.controls.menuClasses:IMenuDataDescriptor"/></apiValueDef><apiDesc>
      データプロバイダー内のデータにアクセスして操作するオブジェクトです。 FlexNativeMenu コントロールは、データに関する情報について、データ記述子に委任します。次に、このデータはデータソースに関する解析と移動のために使用されます。FlexNativeMenu に対して定義されたデータ記述子は、すべての子メニューおよびサブメニューで使用されます。
     
      <p>このプロパティを MXML の属性として指定する場合、記述子のストリング名ではなく、データ記述子への参照を使用する必要があります。プロパティを設定するには次の形式を使用します。</p>
     
     <pre>&lt;mx:FlexNativeMenu id="flexNativeMenu" dataDescriptor="{new MyCustomDataDescriptor()}"/></pre>
     
      <p>また、次の例に示すように、ネストしたサブタグとして MXML のプロパティを指定できます。</p>
     
      <pre>&lt;mx:FlexNativeMenu>
      &lt;mx:dataDescriptor>
         &lt;myCustomDataDescriptor>
      &lt;/mx:dataDescriptor>
      ...</pre>
     
      <p>デフォルト値は、DefaultDataDescriptor クラスの内部インスタンスです。</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      NativeMenu のメニューアイテムの構造を定義するために使用されるオブジェクトの階層です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      NativeMenu のメニューアイテムの構造を定義するために使用されるオブジェクトの階層です。 個別のデータオブジェクトはメニューアイテムを定義し、子アイテムを持つアイテムはメニューとサブメニューになります。
     
      <p>FlexNativeMenu コントロールは、ソースデータオブジェクトを次のように処理します。</p>
     
      <ul>
        <li>有効な XML テキストを含むストリングが XML オブジェクトに変換されます。</li>
        <li>XMLNode は、XML オブジェクトに変換されます。</li>
        <li>また XMLList は、XMLListCollection に変換されます。</li>
        <li>ICollectionView インターフェイスを実装するすべてのオブジェクトが ICollectionView にキャストされます。</li>
        <li>Array は ArrayCollection に変換されます。</li>
        <li>他のタイプのオブジェクトは、Array 内でその単一エントリとしてラップされます。</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:hasRoot:get"><apiName>hasRoot</apiName><shortdesc conref="mx.controls.Menu#hasRoot">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.Menu#hasRoot">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:initialized:get"><apiName>initialized</apiName><shortdesc conref="mx.core.UIComponent#initialized">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#initialized">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:keyEquivalentField:get"><apiName>keyEquivalentField</apiName><shortdesc>
      各メニューアイテムのキー相当物を決定するデータプロバイダーのフィールド名です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"keyEquivalent"
      </apiDefaultValue></apiValueDef><apiDesc>
      各メニューアイテムのキー相当物を決定するデータプロバイダーのフィールド名です。 値のセットは、Keyboard クラスの <codeph>KEYNAME_XXXX</codeph> 定数で定義されます。 例えば、Home、Insert などの制御文字の値に対して一覧表示される定数です。
     
      <p><codeph>keyEquivalentFunction</codeph> プロパティを設定すると、このプロパティは無視されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.ui.Keyboard.xml"><linktext>flash.ui.Keyboard</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:keyEquivalentFunction:get"><apiName>keyEquivalentFunction</apiName><shortdesc>
      各メニューアイテムのキー相当物を判定する関数です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
      </apiDefaultValue></apiValueDef><apiDesc>
      各メニューアイテムのキー相当物を判定する関数です。 このプロパティを省略すると、<codeph>keyEquivalentField</codeph> プロパティで指定したフィールドまたは属性の値が使用されます。 このプロパティを指定した場合、<codeph>keyEquivalentField</codeph> プロパティの値は無視されます。 
     
      <p><codeph>keyEquivalentFunction</codeph> プロパティは、フォーマット処理やローカライズにも使用でき、プラットフォームに依存しません。</p>
     
      <p>このキー相当物関数は単一の引数を取得します。この引数は、データプロバイダー内のアイテムであり、ストリングを返します。</p>
     
      <pre><codeph>myKeyEquivalentFunction(item:Object):String</codeph></pre>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.ui.Keyboard.xml"><linktext>flash.ui.Keyboard</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:keyEquivalentModifiersFunction:get"><apiName>keyEquivalentModifiersFunction</apiName><shortdesc>
      各メニューアイテムのキー相当物のモディファイアを判定する関数です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      各メニューアイテムのキー相当物のモディファイアを判定する関数です。 このプロパティを省略した場合、Flex では独自のデフォルト関数が使用され、次の（ブール）フィールドが存在するかどうかについてデータプロバイダーのデータを確認することによって、モディファイアの配列が決定されます。<codeph>altKey</codeph>、<codeph>commandKey</codeph>、<codeph>controlKey</codeph> および <codeph>shiftKey</codeph> です。
     
      <p><codeph>keyEquivalentModifiersFunction</codeph> プロパティは、フォーマット処理やローカライズにも使用でき、プラットフォームに依存しません。</p>
     
      <p>このキー相当物のモディファイア関数は単一の引数を取得します。この引数は、データプロバイダー内のアイテムであり、モディファイアキー名の配列を返します。</p>
     
      <pre><codeph>myKeyEquivalentModifiersFunction(item:Object):Array</codeph></pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:labelField:get"><apiName>labelField</apiName><shortdesc>
      各メニューアイテムに表示されるテキストを決定するデータプロバイダーのフィールド名です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
     </apiDefaultValue></apiValueDef><apiDesc>
      各メニューアイテムに表示されるテキストを決定するデータプロバイダーのフィールド名です。 データプロバイダーがストリングの配列である場合、各ストリング値がラベルとして使用されます。 データプロバイダーが E4X XML オブジェクトの場合、このプロパティを明示的に設定する必要があります。 例えば、E4X XML オブジェクト内の各 XML エレメントに各メニューアイテムに対して表示するテキストを含む "label" 属性が含まれている場合は、labelField を <codeph>"@label"</codeph> に設定します。
     
      <p>ラベルでは、アンダースコアを前に付けることによって、ニーモニックインデックスとして使用される文字を指定できます。 例えば、<codeph>"C_ut"</codeph> というラベル値の場合、ニーモニックインデックスが 1 に設定されます。 この目的に使用されるのは、最初のアンダースコアだけです。 ラベル内にリテラルアンダースコア文字を表示するには、アンダースコアを 2 つ使用することによってエスケープできます。 例えば、<codeph>"C__u_t"</codeph> というラベル値は、"C_ut" というラベルを持ち、ニーモニックインデックスが 3 （"t" 文字）であるメニューアイテムになります。 <codeph>mnemonicIndexField</codeph> プロパティで定義されているフィールドが存在し、それが 0 より大きい値に設定されている場合は、アンダースコアで指定されているニーモニックインデックス値よりもその値が優先されます。</p>
     
      <p><codeph>labelFunction</codeph> プロパティを設定すると、このプロパティは無視されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      各メニューアイテムに表示するテキストを判定する関数です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      各メニューアイテムに表示するテキストを判定する関数です。 ラベル関数でデータプロバイダー内の適切なフィールドを検索し、表示可能なストリングを返す必要があります。 
     
      <p>このプロパティを省略すると、<codeph>labelField</codeph> プロパティで指定したフィールドまたは属性の値が使用されます。 このプロパティを指定した場合、<codeph>labelField</codeph> プロパティの値は無視されます。 </p>
     
      <p><codeph>labelFunction</codeph> プロパティは、フォーマット処理やローカライズに役立ち、プラットフォームに依存しません。</p>
     
      <p>このラベル関数は単一の引数を取得します。この引数は、データプロバイダー内のアイテムであり、ストリングを返します。</p>
     
      <pre><codeph>myLabelFunction(item:Object):String</codeph></pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:mnemonicIndexField:get"><apiName>mnemonicIndexField</apiName><shortdesc>
      各メニューアイテムに表示されるニーモニックインデックスを決定するデータプロバイダーのフィールド名です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"mnemonicIndex"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      各メニューアイテムに表示されるニーモニックインデックスを決定するデータプロバイダーのフィールド名です。
     
      <p>このプロパティに指定されているフィールドに 0 より大きい数が含まれている場合は、そのニーモニックインデックスは、ラベル内のアンダースコアによって指定された数よりも優先されます。</p>
     
      <p><codeph>mnemonicIndexFunction</codeph> プロパティを設定すると、このプロパティは無視されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FlexNativeMenu/labelField"><linktext>labelField</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:mnemonicIndexFunction:get"><apiName>mnemonicIndexFunction</apiName><shortdesc>
      各メニューアイテムのニーモニックインデックスを判定する関数です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>"undefined"
     </apiDefaultValue></apiValueDef><apiDesc>
      各メニューアイテムのニーモニックインデックスを判定する関数です。
     
      <p>このプロパティを省略すると、<codeph>mnemonicIndexField</codeph> プロパティで指定したフィールドまたは属性の値が使用されます。 このプロパティを指定した場合、<codeph>mnemonicIndexField</codeph> プロパティの値は無視されます。 </p>
     
      <p>このプロパティが定義されており、関数がデータアイテムに対して 0 より大きい数を返す場合は、ラベル内のアンダースコアによって指定された数よりも返されたニーモニックインデックスが優先されます。</p>
     
      <p><codeph>mnemonicIndexFunction</codeph> プロパティは、フォーマット処理やローカライズにも使用でき、プラットフォームに依存しません。</p>
     
      <p>このニーモニックインデックス関数は単一のパラメーターを取得します。このパラメーターは、データプロバイダー内のアイテムであり、int を返します。</p>
     
      <pre><codeph>myMnemonicIndexFunction(item:Object):int</codeph></pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:nativeMenu:get"><apiName>nativeMenu</apiName><shortdesc>
       このオブジェクトで管理される flash.display.NativeMenu を返します。存在しない場合は null を返します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:NativeMenu"/></apiValueDef><apiDesc>
       このオブジェクトで管理される flash.display.NativeMenu を返します。存在しない場合は null を返します。基になる NativeMenu インスタンスに対して直接加えられた変更は、メニューまたは基になるデータプロバイダーが変更されるときに失われることがあります。
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UIComponent#nestLevel">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UIComponent#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:numAutomationChildren:get"><apiName>numAutomationChildren</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc conref="mx.core.UIComponent#processedDescriptors">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#processedDescriptors">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:showInAutomationHierarchy:get"><apiName>showInAutomationHierarchy</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FlexNativeMenu:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      データプロバイダーのルートノードを表示するかどうかを指定するブール値のフラグです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      データプロバイダーのルートノードを表示するかどうかを指定するブール値のフラグです。 
     
      <p>データプロバイダーにルートノードがあり、<codeph>showRoot</codeph> プロパティが <codeph>false</codeph> に設定されている場合、FlexNativeMenu コントロールによって表示される最上位のメニューアイテムは、ルートノードの直下の子孫に対応します。</p>
     
      <p>このフラグは、リストや配列などのルートノードがないデータプロバイダーを使用する場合には、影響しません。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#FlexNativeMenu/hasRoot"><linktext>hasRoot</linktext></link></related-links></apiValue><apiValue id="mx.controls:FlexNativeMenu:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      オブジェクトが 3 段階のレイアウト検証を完了したものであるかどうかを示すフラグです（いずれかの検証が必須であった場合）。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      オブジェクトが 3 段階のレイアウト検証を完了したものであるかどうかを示すフラグです（いずれかの検証が必須であった場合）。
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemHistoryButton"><apiName>FileSystemHistoryButton</apiName><shortdesc>
  FileSystemHistoryButton コントロールは、左側のメインボタンと右側の小さなボタンで構成される単一のコントロールを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemHistoryButton&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemHistoryButton
    <strong>Properties</strong>
    dataProvider="<i>undefined</i>"
 
    <strong>Events</strong>
    itemClick="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:PopUpButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  FileSystemHistoryButton コントロールは、左側のメインボタンと右側の小さなボタンで構成される単一のコントロールを定義します。
 
  <p>メインボタンの表面には、テキストラベルとアイコンのいずれか、または両方を表示できます。 コントロール左側のメインボタンをユーザーがクリックすると、<codeph>click</codeph> イベントが送出されます。</p>
 
  <p>右側の小さなボタンをクリックすると、<codeph>dataProvider</codeph> プロパティで設定されたメニューがドロップダウン表示されます。 ユーザーがドロップダウンメニューからアイテムを選択すると、<codeph>itemClick</codeph> イベントが送出されます。</p>
 
  <p>通常は、2 つの FileSystemHistoryButtons を FileSystemList または FileSystemDataGrid と組み合わせて、「戻る」または「進む」コントロールを実装します。これにより、ユーザーは FileSystemList または FileSystemDataGrid の移動履歴をたどることができます。 FileSystemHistoryButton コントロールの <codeph>dataProvider</codeph> プロパティに値を設定するには、データバインディングを使用して、コントロールの <codeph>dataProvider</codeph> プロパティを FileSystemList または FileSystemDataGrid コントロールの <codeph>backHistory</codeph> または <codeph>forwardHistory</codeph> プロパティに設定します。 コントロールを有効または無効にするには、コントロールの <codeph>enabled</codeph> プロパティを、FileSystemList コントロールまたは FileSystemDataGrid コントロールの <codeph>canNavigateBack</codeph> プロパティまたは <codeph>canNavigateForward</codeph> プロパティにバインドします。 データバインディングを使用してこれらのプロパティを設定した場合、ユーザーが FileSystemList または FileSystemDataGrid コントロール内で移動すると、これらのプロパティも自動的に更新されます。</p>
 
  <p>ボタン自体によってナビゲーションが行われることはありません。 ボタンを機能させるためには、<codeph>click</codeph> イベントおよび <codeph>itemClick</codeph> イベントに応答するイベントリスナーを記述する必要があります。 通常は、FileSystemList コントロールまたは FileSystemDataGrid コントロールの <codeph>navigateBack()</codeph> メソッドまたは <codeph>navigateForward()</codeph> メソッドをコードで呼び出して、コントロールを移動します。 <codeph>click</codeph> イベントでは、これらのメソッドに引数を渡す必要はありません。 <codeph>itemClick</codeph> イベントの場合は、<codeph>event.index</codeph> を渡します。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#FileSystemList"><linktext>mx.controls.FileSystemList</linktext></link><link href="mx.controls.xml#FileSystemDataGrid"><linktext>mx.controls.FileSystemDataGrid</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemHistoryButton_mx.events.MenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  ユーザーがポップアップメニューからアイテムを選択したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがポップアップメニューからアイテムを選択したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemHistoryButton:FileSystemHistoryButton"><apiName>FileSystemHistoryButton</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:FileSystemHistoryButton:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      FileSystemHistoryButton コントロールのデータプロバイダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      FileSystemHistoryButton コントロールのデータプロバイダーです。 これは、ディレクトリの場所を含む File オブジェクトのコレクションである必要があります。通常は FileSystemList コントロールまたは FileSystemDataGrid コントロールの <codeph>backHistory</codeph> プロパティまたは <codeph>forwardHistory</codeph> プロパティです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemComboBox"><apiName>FileSystemComboBox</apiName><shortdesc>
  FileSystemComboBox コントロールは、ファイルシステムにある指定のディレクトリから親ディレクトリのチェーンを上位に移動するためのコンボボックスコントロールを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="editableUpSkin"/><Exclude kind="style" name="editableOverSkin"/><Exclude kind="style" name="editableDownSkin"/><Exclude kind="style" name="editableDisabledSkin"/><Exclude kind="property" name="editable"/><styles><style format="EmbeddedFile" inherit="no" name="directoryIcon" owner="mx.controls:FileSystemComboBox" playerVersion="AIR1.1" type="Class">
<description>
  ディレクトリを示すアイコンを指定します。デフォルトのアイコンは、Assets.swf ファイルに置かれています。 MXML では、構文 <codeph>directoryIcon="@Embed(source='directoryIcon.jpg');"</codeph> を使用してこのプロパティを設定できます。
 
  </description>
<default>TreeNodeIcon
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="computerIcon" owner="mx.controls:FileSystemComboBox" playerVersion="AIR1.1" type="Class">
<description>
  コンピューターのルートディレクトリを示すアイコンを指定します。 デフォルトのアイコンはありません。 MXML では、構文 <codeph>computerIcon="@Embed(source='computerIcon.jpg');"</codeph> を使用してこのプロパティを設定できます。
 
  </description>
<default>null
  
  </default>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:FileSystemComboBox&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:FileSystemComboBox
    <strong>Properties</strong>
    directory="<i>null</i>"
    indent="8"
    showIcons="true"
 
    <strong>Styles</strong>
    computerIcon="<i>null</i>"
    directoryIcon="<i>TreeNodeIcon</i>"
 
    <strong>Events</strong>
    directoryChange="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:ComboBox</apiBaseClassifier></apiClassifierDef><apiDesc>
  FileSystemComboBox コントロールは、ファイルシステムにある指定のディレクトリから親ディレクトリのチェーンを上位に移動するためのコンボボックスコントロールを定義します。 このコントロールは、FileSystemList コントロールおよび FileSystemTree コントロールに表示される現在のディレクトリを変更するために、これらのコントロールと組み合わせて使用することが普通です。
 
  <p>標準の ComboBox コントロールとは異なり、FileSystemComboBox コントロールの <codeph>dataProvider</codeph> プロパティに値を設定するには、<codeph>directory</codeph> プロパティを設定します。 これにより、このコントロールでは <codeph>dataProvider</codeph> プロパティが、指定ディレクトリのすべての親ディレクトリ、つまり <codeph>COMPUTER</codeph> File から指定のディレクトリに至る範囲を含む File オブジェクトの ArrayCollection に自動的に設定されます。</p>
 
  <p>ドロップダウンリストのエントリを選択すると、このコントロールによって <codeph>change</codeph> イベントが送出されます。 イベントがデータプロバイダーに送信された後は、結果として、ドロップダウンリストに選択したディレクトリの親が含まれます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.filesystem.File.xml"><linktext>flash.filesystem.File</linktext></link><link href="mx.controls.xml#FileSystemList"><linktext>mx.controls.FileSystemList</linktext></link><link href="mx.controls.xml#FileSystemTree"><linktext>mx.controls.FileSystemTree</linktext></link></related-links><adobeApiEvent id="mx.controls:FileSystemComboBox_mx.events.FileEvent.DIRECTORY_CHANGE_directoryChange"><apiName>directoryChange</apiName><shortdesc>
  このコントロールで表示されている選択したディレクトリが変更された場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FileEvent.DIRECTORY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FileEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  このコントロールで表示されている選択したディレクトリが変更された場合に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:FileSystemComboBox:FileSystemComboBox"><apiName>FileSystemComboBox</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:FileSystemComboBox:COMPUTER"><apiName>COMPUTER</apiName><shortdesc>
      "Computer" という名前の擬似最上位ディレクトリを表す、ディレクトリプロパティの値として使用できる定数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="flash.filesystem:File"/></apiValueDef><apiDesc>
      "Computer" という名前の擬似最上位ディレクトリを表す、<codeph>directory</codeph> プロパティの値として使用できる定数です。 この擬似ディレクトリにはルートディレクトリ（Windows では C:\ および D:\、Macintosh では / など）があります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemComboBox:directory:get"><apiName>directory</apiName><shortdesc>
      このコントロールに表示するディレクトリの子ディレクトリを表す File オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.filesystem:File"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコントロールに表示するディレクトリの子ディレクトリを表す File オブジェクトです。 コントロールには、ドロップダウンリストの個別エントリとして、各親ディレクトリが表示されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemComboBox:indent:get"><apiName>indent</apiName><shortdesc>
      ドロップダウンリストでの各エントリのインデント量を示すピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>8
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ドロップダウンリストでの各エントリのインデント量を示すピクセル数です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemComboBox:showIcons:get"><apiName>showIcons</apiName><shortdesc>
      ドロップダウンリストでディレクトリ名の前にアイコンを表示するかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ドロップダウンリストでディレクトリ名の前にアイコンを表示するかどうかを指定するフラグです。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:FileSystemEnumerationMode"><apiName>FileSystemEnumerationMode</apiName><shortdesc>
  FileSystemEnumerationMode クラスは、FileSystemList クラス、 クラス、FileSystemDataGrid クラスおよび FileSystemTree クラスの enumerationMode プロパティの定数を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  FileSystemEnumerationMode クラスは、FileSystemList クラス、 クラス、FileSystemDataGrid クラスおよび FileSystemTree クラスの <codeph>enumerationMode</codeph> プロパティの定数を定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#FileSystemList/enumerationMode"><linktext>mx.controls.FileSystemList.enumerationMode</linktext></link><link href="mx.controls.xml#FileSystemDataGrid/enumerationMode"><linktext>mx.controls.FileSystemDataGrid.enumerationMode</linktext></link><link href="mx.controls.xml#FileSystemTree/enumerationMode"><linktext>mx.controls.FileSystemTree.enumerationMode</linktext></link></related-links><apiValue id="mx.controls:FileSystemEnumerationMode:DIRECTORIES_FIRST"><apiName>DIRECTORIES_FIRST</apiName><shortdesc>
      ディレクトリを最初に表示し、その後にファイルを表示するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoriesFirst</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ディレクトリを最初に表示し、その後にファイルを表示するように指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:DIRECTORIES_ONLY"><apiName>DIRECTORIES_ONLY</apiName><shortdesc>
      ディレクトリを表示し、ファイルを非表示にするように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoriesOnly</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ディレクトリを表示し、ファイルを非表示にするように指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:FILES_AND_DIRECTORIES"><apiName>FILES_AND_DIRECTORIES</apiName><shortdesc>
      ファイルとディレクトリの両方を混在させて表示するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>filesAndDirectories</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ファイルとディレクトリの両方を混在させて表示するように指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:FILES_FIRST"><apiName>FILES_FIRST</apiName><shortdesc>
      ファイルを最初に表示し、その後にディレクトリを表示するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>filesFirst</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ファイルを最初に表示し、その後にディレクトリを表示するように指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:FileSystemEnumerationMode:FILES_ONLY"><apiName>FILES_ONLY</apiName><shortdesc>
      ファイルを表示し、ディレクトリを非表示にするように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>filesOnly</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ファイルを表示し、ディレクトリを非表示にするように指定します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>