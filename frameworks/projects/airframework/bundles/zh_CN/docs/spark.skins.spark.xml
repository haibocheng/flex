<?xml version="1.0"?>
<apiPackage id="spark.skins.spark"><apiName>spark.skins.spark</apiName><apiDetail/><apiClassifier id="spark.skins.spark:SparkChromeWindowedApplicationSkin"><apiName>SparkChromeWindowedApplicationSkin</apiName><shortdesc>Spark WindowedApplication 组件的外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark WindowedApplication 组件的外观类。此类定义 Flex 镶边，它包括边框、状态栏、控制手柄按钮、标题栏和标题栏按钮。
      
      <p>您可以使用系统镶边、FlexChromSkin 类或 WindowedApplicationSkin 类来定义 WindowedApplication 和 Window 容器的外观。要将 FlexChromSkin 类与 WindowedApplication 容器一起使用，请在应用程序的 .xml 文件中将 <codeph>systemChrome</codeph> 设置为“none”，然后将 <codeph>skinClass</codeph> 样式设置为 spark.skins.spark.FlexChromSkin。要将 FlexChromSkin 类与 Window 容器一起使用，请将 <codeph>Window.systemChrome</codeph> 属性设置为“none”，然后将 <codeph>skinClass</codeph> 样式设置为 spark.skins.spark.FlexChromSkin。</p>
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#WindowedApplication"><linktext>spark.components.WindowedApplication</linktext></link></related-links><apiConstructor id="spark.skins.spark:SparkChromeWindowedApplicationSkin:SparkChromeWindowedApplicationSkin"><apiName>SparkChromeWindowedApplicationSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:SparkChromeWindowedApplicationSkin:backgroundRect"><apiName>backgroundRect</apiName><shortdesc>定义外观的背景色。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.primitives:Rect"/></apiValueDef><apiDesc>定义外观的背景色。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SparkChromeWindowedApplicationSkin:borderBgFill"><apiName>borderBgFill</apiName><shortdesc>定义边框的背景色。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc>定义边框的背景色。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SparkChromeWindowedApplicationSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc>定义内容子代被推入并进行布置的 Group 容器。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc>定义内容子代被推入并进行布置的 Group 容器。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SparkChromeWindowedApplicationSkin:gripper"><apiName>gripper</apiName><shortdesc>为控制手柄按钮定义 Button 控件。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Button"/></apiValueDef><apiDesc>为控制手柄按钮定义 Button 控件。默认情况下，该按钮使用 spark.skins.spark.windowChrome.GripperSkin 类定义控制手柄按钮的外观。
            
        </apiDesc></apiValueDetail><related-links><link href="spark.skins.spark.windowChrome.xml#GripperSkin"><linktext>spark.skins.spark.windowChrome.GripperSkin</linktext></link></related-links></apiValue><apiValue id="spark.skins.spark:SparkChromeWindowedApplicationSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc>
        此外观的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
        此外观的主机组件。
       
       </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SparkChromeWindowedApplicationSkin:statusBar"><apiName>statusBar</apiName><shortdesc>为状态栏定义 Group 容器。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc>为状态栏定义 Group 容器。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SparkChromeWindowedApplicationSkin:statusText"><apiName>statusText</apiName><shortdesc>为状态栏中的文本定义 Label 控件。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc>为状态栏中的文本定义 Label 控件。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SparkChromeWindowedApplicationSkin:titleBar"><apiName>titleBar</apiName><shortdesc>为标题栏、按钮和图标定义 TitleBar 容器。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>spark.components.windowClasses:TitleBar</apiValueClassifier></apiValueDef><apiDesc>为标题栏、按钮和图标定义 TitleBar 容器。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SparkChromeWindowedApplicationSkin:titleBarBackgroundRect"><apiName>titleBarBackgroundRect</apiName><shortdesc>定义标题栏的背景色。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.primitives:Rect"/></apiValueDef><apiDesc>定义标题栏的背景色。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:SparkChromeWindowedApplicationSkin:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="spark.skins.spark:WindowedApplicationSkin"><apiName>WindowedApplicationSkin</apiName><shortdesc>Spark WindowedApplication 和 Window 容器的外观类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="mxmlContent"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IStateClient2</apiBaseInterface><apiBaseClassifier>spark.skins:SparkSkin</apiBaseClassifier></apiClassifierDef><apiDesc>Spark WindowedApplication 和 Window 容器的外观类。此类只定义边框和状态栏，而不定义控制手柄按钮、标题栏或标题栏按钮。
      
      <p>您可以使用系统镶边、FlexChromSkin 类或 WindowedApplicationSkin 类来定义 WindowedApplication 和 Window 容器的外观。要将 WindowedApplicationSkin 类与 WindowedApplication 容器一起使用，请在应用程序的 .xml 文件中将 <codeph>systemChrome</codeph> 设置为“none”，然后将 <codeph>skinClass</codeph> 样式设置为 spark.skins.spark.WindowedApplicationSkin。要将 WindowedApplicationSkin 类与 Window 容器一起使用，请将 <codeph>Window.systemChrome</codeph> 属性设置为“none”，然后将 <codeph>skinClass</codeph> 样式设置为 spark.skins.spark.WindowedApplicationSkin。</p>
      </apiDesc></apiClassifierDetail><related-links><link href="spark.components.xml#WindowedApplication"><linktext>spark.components.WindowedApplication</linktext></link></related-links><apiConstructor id="spark.skins.spark:WindowedApplicationSkin:WindowedApplicationSkin"><apiName>WindowedApplicationSkin</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="spark.skins.spark:WindowedApplicationSkin:backgroundRect"><apiName>backgroundRect</apiName><shortdesc>定义外观的背景色。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.primitives:Rect"/></apiValueDef><apiDesc>定义外观的背景色。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:WindowedApplicationSkin:contentGroup"><apiName>contentGroup</apiName><shortdesc>定义内容子代被推入并进行布置的 Group 容器。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc>定义内容子代被推入并进行布置的 Group 容器。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:WindowedApplicationSkin:hostComponent"><apiName>hostComponent</apiName><shortdesc>
        此外观的主机组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
        此外观的主机组件。
       
       </apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:WindowedApplicationSkin:statusBar"><apiName>statusBar</apiName><shortdesc>为状态栏定义 Group 容器。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Group"/></apiValueDef><apiDesc>为状态栏定义 Group 容器。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:WindowedApplicationSkin:statusText"><apiName>statusText</apiName><shortdesc>为状态栏中的文本定义 Label 控件。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="spark.components:Label"/></apiValueDef><apiDesc>为状态栏中的文本定义 Label 控件。</apiDesc></apiValueDetail></apiValue><apiValue id="spark.skins.spark:WindowedApplicationSkin:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="mx.core:IFlexModuleFactory"/></apiValueDef></apiValueDetail></apiValue></apiClassifier></apiPackage>