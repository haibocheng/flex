<?xml version="1.0"?>
<apiPackage id="mx.collections"><apiName>mx.collections</apiName><apiDetail/><apiClassifier id="mx.collections:ArrayCollection"><apiName>ArrayCollection</apiName><shortdesc>
  Die ArrayCollection-Klasse ist eine Wrapper-Klasse, die ein Array als Sammlung anzeigt, auf die mit den Methoden und Eigenschaften der Schnittstellen ICollectionView und IList zugegriffen und mit diesen auch verändert werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ArrayCollection&gt;</code> tag inherits all the attributes of its
  superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:ArrayCollection
  <b>Properties</b>
  source="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.utils:IExternalizable</apiBaseInterface><apiBaseClassifier>mx.collections:ListCollectionView</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ArrayCollection-Klasse ist ein Wrapper-Klasse, die ein Array als Sammlung anzeigt, auf die mit den Methoden und Eigenschaften der Schnittstellen <codeph>ICollectionView</codeph> und <codeph>IList</codeph> zugegriffen und mit diesen auch verändert werden kann. Vorgänge an einer ArrayCollection-Instanz modifizieren die Datenquelle. Wenn Sie z. B. die <codeph>removeItemAt()</codeph>-Methode auf eine ArrayCollection anwenden, entfernen Sie das Element aus dem zugrunde liegenden Array.
 
  </apiDesc><example>Der folgende Code erstellt ein einfaches ArrayCollection-Objekt, das auf ein Array mit einem einzelnen Object-Element zugreift und dieses ändert. Es ruft das Element mithilfe der <codeph>getItemAt</codeph>-Methode der IList-Schnittstelle ab und ein IViewCursor-Objekt mithilfe der <codeph>createCursor</codeph>-Methode der ICollectionView-Schnittstelle.
  <pre>
  var myCollection:ArrayCollection = new ArrayCollection([ { first: 'Matt', last: 'Matthews' } ]);
  var myCursor:IViewCursor = myCollection.createCursor();
  var firstItem:Object = myCollection.getItemAt(0);
  var firstItemFromCursor:Object = myCursor.current;
  if (firstItem == firstItemFromCursor)
        doCelebration();
  </pre>
  
  </example></apiClassifierDetail><apiConstructor id="mx.collections:ArrayCollection:ArrayCollection"><apiName>ArrayCollection</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      <p>Erstellt mithilfe des angegebenen Quellarrays ein neues ArrayCollection-Objekt. Wenn kein Array angegeben wird, wird ein leeres Array verwendet.</p>
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.collections:ArrayCollection:source:get"><apiName>source</apiName><shortdesc>
      Die Quelle der Daten im ArrayCollection-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Die Quelle der Daten im ArrayCollection-Objekt. Das ArrayCollection-Objekt stellt keine Änderungen dar, die Sie direkt am Quellarray vornehmen. Verwenden Sie zum Modifizieren der Sammlung immer die Methoden ICollectionView oder IList.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:AsyncListView"><apiName>AsyncListView</apiName><shortdesc>
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseClassifier>mx.utils:OnDemandEventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph/><codeph/><codeph/>
 
  <p>Die getItemAt()-Methode verarbeitet ItemPendingErrors, indem sie ein vorläufiges „ausstehendes“ Objekt zurückgibt, bis die zugrunde liegende Anforderung erfolgreich ausgeführt wurde oder fehlschlägt. Das vorläufige Objekt wird durch den Aufruf von <codeph>createPendingItemFunction</codeph> erstellt. Ist die Anforderung erfolgreich, ersetzt das tatsächliche Objekt das vorläufige. Schlägt sie dagegen fehl, wird das vorläufige Objekt durch das Objekt ersetzt, das auf den Aufruf von <codeph>createFailedItemFunction</codeph> hin zurückgegeben wird.</p>
 
  <p>Diese Klasse delegiert die IList-Methoden und -Eigenschaften an ihre <codeph>list</codeph>. Wenn keine Liste angegeben ist, sind Methoden, die die Sammlung ändern, Leerbefehle, und Methoden, die die Sammlung abfragen, geben einen „leeren“ Wert wie z. B. null zurück.</p>
 
  <p>Diese Klasse ist für die Verwendung mit auf DataGroup basierenden Spark-Komponenten wie List und ComboBox vorgesehen, die keine eigene Unterstützung für die ItemPendingError-Verarbeitung bieten.</p>
 
  <p>  </p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:AsyncListView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Wird ausgelöst, wenn sich die Länge der Liste geändert hat oder wenn ein Listenelement ersetzt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn sich die Länge der Liste geändert hat oder wenn ein Listenelement ersetzt wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:AsyncListView:AsyncListView"><apiName>AsyncListView</apiName><shortdesc>
      AsyncListView-Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>list</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Anfangswert der Listeneigenschaft, die IList, and die delegiert wird.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      AsyncListView-Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:AsyncListView:addItem"><apiName>addItem</apiName><shortdesc>
      
      Fügt das angegebene Element am Ende der Liste hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das hinzuzufügende Element.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Fügt das angegebene Element am Ende der Liste hinzu. Entspricht <codeph>addItemAt(item, length)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      
      Fügt das Element an der angegebenen Indexposition hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Element, das an die Indexposition platziert werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index, an den das Element platziert werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Fügt das Element an der angegebenen Indexposition hinzu. Der Index eines Elements, der größer als der Index des hinzugefügten Element ist, wird um 1 erhöht. Wenn der angegebene Index kleiner als 0 oder größer als die Länge der Liste ist, wird ein RangeError ausgegeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Gibt den Wert von list.getItemAt(index) zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn <codeph>index &lt; 0</codeph> oder <codeph>index >= length</codeph>.
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das Listenelement an der angegebenen Indexposition.
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Listenindex, von dem das Objekt abgerufen werden soll.
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Ein <codeph>int</codeph>-Wert, der sowohl die Richtung als auch die Anzahl von Elementen angibt, die während der Anforderung abgerufen werden sollen, wenn das Element nicht lokal ist.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt den Wert von <codeph>list.getItemAt(index)</codeph> zurück.
     
      <p>Diese Methode erfasst als Folge des Aufrufs von getItemAt() generierte ItemPendingErrors (IPEs). Wenn ein IPE ausgegeben wird, wird dem IPE ein <codeph>IResponder</codeph> hinzugefügt und es wird ein mit <codeph>createPendingItemFunction</codeph> erstelltes vorläufiges „ausstehendes“ Objekt zurückgegeben. Wenn die zugrunde liegende Anforderung schließlich erfüllt wird, wird das „ausstehende“ Objekt durch das tatsächliche Objekt ersetzt. Schlägt sie fehl, wird das „ausstehende“ Objekt durch einen von der <codeph>createFailedItemFunction</codeph> erzeugten Wert ersetzt.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.createPendingItemFunction.xml"><linktext>createPendingItemFunction</linktext></link><link href="" invalidHref="mx.collections.createFailedItemFunction.xml"><linktext>createFailedItemFunction</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.rpc.xml#IResponder"><linktext>mx.rpc.IResponder</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:AsyncListView:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      
      Gibt den Index des Elements zurück, wenn es in der Liste enthalten ist, sodass gilt: getItemAt(Index) == Element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Index des Elements oder -1, wenn das Element nicht in der Liste enthalten ist.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das zu suchende Element.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt den Index des Elements zurück, wenn es in der Liste enthalten ist, sodass gilt: getItemAt(Index) == Element.
     
      <p>Hinweis: Im Unterschied zu <codeph>IViewCursor.find<i>xxx</i>()</codeph>-Methoden kann die <codeph>getItemIndex()</codeph>-Methode keine Parameter mit einer Untergruppe der Felder im gesuchten Element verwenden. Diese Methode sucht immer nach einem Element, das genau dem Eingabeparameter entspricht.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      
      Informiert die Ansicht darüber, dass ein Element aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Element in der Ansicht, die aktualisiert wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der Name der Eigenschaft, die aktualisiert wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der alte Wert dieser Eigenschaft. (Wenn die Eigenschaft „null“ war, kann dies der alte Wert des Elements sein.)
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der neue Wert dieser Eigenschaft. (Wenn die Eigenschaft „null“ war, muss der Wert nicht angegeben werden, da davon ausgegangen wird, dass das Element den neuen Wert hat.)
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Informiert die Ansicht darüber, dass ein Element aktualisiert wurde. Dies ist nützlich, wenn der Inhalt der Ansicht <codeph>IEventDispatcher</codeph> nicht implementiert und ein <codeph>PropertyChangeEvent</codeph> auslöst. Wenn eine Eigenschaft angegeben wird, kann die Ansicht möglicherweise ihre Benachrichtigungsfunktion optimieren. Andernfalls wird möglicherweise einfach die gesamte Ansicht aktualisiert.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:removeAll"><apiName>removeAll</apiName><shortdesc>
       
      Entfernt alle Elemente aus der Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
       
      Entfernt alle Elemente aus der Liste.
     
      <p>Wenn ein Element nicht lokal ist und ein asynchroner Vorgang ausgeführt werden muss, wird ein <codeph>ItemPendingError</codeph> ausgegeben.</p>
     
      <p>Weitere Informationen zur Verwendung von <codeph>ItemPendingError</codeph> finden Sie in der ItemPendingError-Dokumentation und der Dokumentation zu den Sammlungen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn <codeph>index &lt; 0</codeph> oder <codeph>index >= length</codeph>.
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Listenindex, von dem das Objekt abgerufen werden soll.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
     
      <p><codeph/> </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      
      Platziert das Element am angegebenen Index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das Element, das ersetzt wurde, oder <codeph>null</codeph>, wenn keines ersetzt wurde.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das neue Element, das am angegebenen Index platziert werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index, an den das Element platziert werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Platziert das Element am angegebenen Index. Wenn sich bereits ein Element an diesem Index befand, wird es vom neuen Element ersetzt und zurückgegeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:toArray"><apiName>toArray</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
        
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:AsyncListView:toString"><apiName>toString</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
       
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:AsyncListView:createFailedItemFunction:get"><apiName>createFailedItemFunction</apiName><shortdesc>
      Eine für das Erstellen eines Ersetzungsobjekts verwendete Funktion, wenn eine Anforderung, die zur Ausgabe eines ItemPendingError geführt hat, im Anschluss fehlschlägt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>A function that unconditionally returns null. 
      </apiDefaultValue></apiValueDef><apiDesc>
      Eine für das Erstellen eines Ersetzungsobjekts verwendete Funktion, wenn eine Anforderung, die zur Ausgabe eines <codeph>ItemPendingError</codeph> geführt hat, im Anschluss fehlschlägt. Das vorhandene Objekt, normalerweise ein mit dem <codeph>createPendingItemFunction()</codeph>-Wert erstelltes „ausstehendes“ Objekt, wird durch das fehlgeschlagene Objekt ersetzt.
      
      <p>Der Wert dieser Eigenschaft muss eine Funktion mit zwei Parametern sein, dem Index des angeforderten Objekts sowie dem Informationsobjekt zum Fehler, das von der IResponder fault()-Methode übergeben wird. In den meisten Fällen kann der zweite Parameter ignoriert werden, z. B.:</p> 
      <pre>
     function createFailedItem(index:int, info:Object):Object
     {
         return "[" + index + "request failed]";        
     }
       </pre>
      
     
      <p>Das Festlegen dieser Eigenschaft wirkt sich nicht auf fehlgeschlagene Objekte aus, die bereits erstellt waren. Das Setzen der Eigenschaft auf null verhindert das Erstellen von fehlgeschlagenen Objekten.
      </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#AsyncListView/getItemAt"><linktext>getItemAt</linktext></link><link href="" invalidHref="mx.collections.createPendingItemFunction.xml"><linktext>createPendingItemFunction</linktext></link><link href="mx.rpc.xml#IResponder/fault"><linktext>mx.rpc.IResponder.fault</linktext></link></related-links></apiValue><apiValue id="mx.collections:AsyncListView:createPendingItemFunction:get"><apiName>createPendingItemFunction</apiName><shortdesc>
       Eine für das Erstellen eines vorläufigen Objekts verwendete Funktion, wenn die Erstanforderung zur Ausgabe eines ItemPendingError führt.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>A function that unconditionally returns null. 
      </apiDefaultValue></apiValueDef><apiDesc>
       Eine für das Erstellen eines vorläufigen Objekts verwendete Funktion, wenn die Erstanforderung zur Ausgabe eines <codeph>ItemPendingError</codeph> führt. Wenn die Anforderung schließlich erfüllt wird, wird das vorläufige Objekt automatisch durch das tatsächliche Objekt ersetzt. Schlägt die Anforderung fehl, wird das Objekt durch ein mit der <codeph>createFailedItemFunction</codeph> erstelltes Objekt ersetzt.
      
       <p>Der Wert dieser Eigenschaft muss eine Funktion mit zwei Parametern sein, dem Index des angeforderten dataProvider-Objekts sowie dem ItemPendingError selbst. In den meisten Fällen kann der zweite Parameter ignoriert werden, z. B.: 
       <pre>
     function createPendingItem(index:int, ipe:ItemPendingError):Object
     {
         return "[" + index + "request is pending...]";        
     }
       </pre>
       </p>
     
      <p>Das Festlegen dieser Eigenschaft wirkt sich nicht auf vorläufige „ausstehende“ Objekte aus, die bereits erstellt waren. Das Setzen der Eigenschaft auf null verhindert das Erstellen von vorläufigen „ausstehenden“ Objekten.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#AsyncListView/getItemAt"><linktext>getItemAt</linktext></link><link href="" invalidHref="mx.collections.createFailedItemFunction.xml"><linktext>createFailedItemFunction</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiValue><apiValue id="mx.collections:AsyncListView:length:get"><apiName>length</apiName><shortdesc>
      
      Die Anzahl der Elemente in dieser Sammlung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Die Anzahl der Elemente in dieser Sammlung. 0 bedeutet keine Elemente, -1 bedeutet, dass die Länge unbekannt ist. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:AsyncListView:list:get"><apiName>list</apiName><shortdesc>
      Die IList, die diese Sammlung einschließt, d. h.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:IList</apiValueClassifier><apiDefaultValue>null  
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Die IList, die diese Sammlung einschließt, d. h. das Objekt, an das alle IList-Methoden delegiert werden.
     
      <p>Ist diese Eigenschaft null, sind IList-Mutationsmethoden wie <codeph>setItemAt()</codeph> Leerbefehle und die IList-Abfragemethoden wie <codeph>getItemAt()</codeph> geben null zurück (-1 für <codeph>getItemIndex()</codeph>).</p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ItemResponder"><apiName>ItemResponder</apiName><shortdesc>
  Die ItemResponder-Klasse stellt eine Standardimplementierung der mx.rpc.IResponder-Schnittstelle bereit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.rpc:IResponder</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ItemResponder-Klasse stellt eine Standardimplementierung der <codeph>mx.rpc.IResponder</codeph>-Schnittstelle bereit. Sie stellt einen Responder dar, mit dem Sie Methoden festlegen können, die aufgerufen werden, wenn eine Anforderung ausgeführt wurde, sei es erfolgreich oder mit einem Fehler. Mit dem Klassenobjekt können Sie auch Daten bereitstellen (als Token), die von den Responder-Methoden verwendet werden sollen.
 
 <p>Sie können ein <codeph>ItemResponder</codeph>-Objekt in der <codeph>catch</codeph>-Anweisung eines Testblocks verwenden, dessen Ergebnis der Abruf von Remote-Daten sein kann, wie im folgenden Code dargestellt:</p>
 
  <pre><codeph>
     import mx.collections.ItemResponder;
     //...
 
     try
     {
        //...
        cursor.moveNext();
     }
    catch(e:ItemPendingError)
     {
        e.addResponder(new ItemResponder(myResultFunction, myFaultFunction, {info:"..."}));
     }
  </codeph></pre>
 
  <p>Die festgelegte Ergebnismethode muss folgende Signatur haben:</p>
 
  <codeph><pre>
     public function myResultFunction(result:Object, token:Object = null):void;
  </pre></codeph>
 
  <p>Die festgelegte Fehlermethode muss folgende Signatur haben:</p>
 
  <codeph><pre>
     public function myFaultFunction(error:Object, token:Object = null):void;
  </pre></codeph>
 
  <p>Jede andere Signatur führt zu einem Laufzeitfehler.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links><apiConstructor id="mx.collections:ItemResponder:ItemResponder"><apiName>ItemResponder</apiName><shortdesc>
	  Erstellt eine Instanz des Responders mit den angegebenen Daten und Prozeduren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>result</apiItemName><apiType value="Function"/><apiDesc>Funktion, die aufgerufen werden sollte, wenn die Anforderung erfolgreich ausgeführt wurde. Muss folgende Signatur haben: <codeph><pre>
	     		    public function (result:Object, token:Object = null):void;
	  		</pre></codeph>
	  </apiDesc></apiParam><apiParam><apiItemName>fault</apiItemName><apiType value="Function"/><apiDesc>Funktion, die aufgerufen werden sollte, wenn die Anforderung mit Fehlern ausgeführt wurde. Muss folgende Signatur haben: <codeph><pre>
	     		    public function (error:ErrorMessage, token:Object = null):void;
	  		</pre></codeph>
	  </apiDesc></apiParam><apiParam><apiItemName>token</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Zusätzliche Objektinformationen [optional], die dieser Anforderung zugeordnet sind. Dieses Objekt wird an die Ergebnis- und Fehlerfunktionen als zweiter Parameter übergeben.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Erstellt eine Instanz des Responders mit den angegebenen Daten und Prozeduren.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ItemResponder:fault"><apiName>fault</apiName><shortdesc>
	  Diese Methode wird von einem Dienst aufgerufen, wenn ein Fehler erhalten wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiDesc>Objekt, das die Informationen zum aufgetretenen Fehler enthält.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Diese Methode wird von einem Dienst aufgerufen, wenn ein Fehler erhalten wurde.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ItemResponder:result"><apiName>result</apiName><shortdesc>
	  Diese Methode wird von einem Dienst aufgerufen, wenn ein Rückgabewert erhalten wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objekt, das die von der Anforderung zurückgegebenen Informationen enthält.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Diese Methode wird von einem Dienst aufgerufen, wenn der Rückgabewert empfangen wurde.
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.collections:Sort"><apiName>Sort</apiName><shortdesc>
  Stellt die Sortierinformationen bereit, die erforderlich sind, um eine Sortierung für eine vorhandene Ansicht durchzuführen (ICollectionView-Schnittstelle oder Klasse, die die Schnittstelle implementiert).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="fields"/></asMetadata><asCustoms><See>SortField
  
  </See></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Stellt die Sortierinformationen bereit, die erforderlich sind, um eine Sortierung für eine vorhandene Ansicht durchzuführen (ICollectionView-Schnittstelle oder Klasse, die die Schnittstelle implementiert). Nachdem Sie der <codeph>sort</codeph>-Eigenschaft der Ansicht eine Sort-Instanz zugewiesen haben, müssen Sie die <codeph>refresh()</codeph>-Methode der Ansicht aufrufen, um die Sortierkriterien anzuwenden. Normalerweise wird die Sortierung für Sammlungen komplexer Elemente definiert, also für Sammlungen, in denen die Sortierung einer oder mehrerer Eigenschaften der Objekte in der Sammlung durchgeführt wird. Das folgende Beispiel veranschaulicht diese Verwendung:
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     // In the real world, the collection would have more than one item.
     col.addItem({first:"Anders", last:"Dickerson"});
     // Create the Sort instance.
     var sort:Sort = new Sort();
     // Set the sort field; sort on the last name first, first name second.
     // Both fields are case-insensitive.
     sort.fields = [new SortField("last",true), new SortField("first",true)];
       // Assign the Sort object to the view.
     col.sort = sort;
     // Apply the sort to the collection.
       col.refresh();
  </codeph></pre>
 
  <p>Es gibt Situationen, in denen die Sammlung einfache Elemente enthält, wie <codeph>String</codeph>, <codeph>Date</codeph>, <codeph>Boolean</codeph> usw. In diesem Fall wird die Sortierung direkt auf den einfachen Typ angewendet. Bei der Erstellung einer Sortierung für einfache Elemente verwenden Sie ein einzelnes Sortierfeld und geben im SortField-Objektkonstruktor einen (ersten) Parameter <codeph>null</codeph> <codeph>name</codeph> an. Beispiel:
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem("California");
     col.addItem("Arizona");
     var sort:Sort = new Sort();
     // There is only one sort field, so use a <codeph>null</codeph> first parameter.
     sort.fields = [new SortField(null, true)];
     col.sort = sort;
       col.refresh();
  </codeph></pre>
  </p>
 
  <p>Die Flex-Implementierungen der ICollectionView-Schnittstelle rufen alle Elemente von einer Remote-Position ab, bevor eine Sortierung durchgeführt wird. Wenn Sie bei einer sortierten Liste Paging verwenden, wenden Sie die Sortierung auf die Remote-Sammlung an, bevor Sie die Daten abrufen.
  </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link></related-links><apiConstructor id="mx.collections:Sort:Sort"><apiName>Sort</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Konstruktor.
     
      <p>Erstellt eine neue Sort-Instanz ohne eingerichtete Felder und benutzerdefinierten Komparator.</p>
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:Sort:findItem"><apiName>findItem</apiName><shortdesc>
     Sucht das angegebene Objekt im angegebenen Array (oder ggf. die Einfügemarke) und gibt die Indexposition zurück, falls sie gefunden wird, andernfalls -1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>int Die Indexposition im Array des gefundenen Elements. Wenn der Parameter <codeph>returnInsertionIndex</codeph> den Wert <codeph>false</codeph> hat und das Element nicht gefunden wird. Gibt -1 zurück. Wenn der Parameter <codeph>returnInsertionIndex</codeph> den Wert <codeph>true</codeph> hat und das Element nicht gefunden wird, wird der Index des Punkts im sortierten Array zurückgegeben, an dem die Werte eingefügt würden.
     
     </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>Das Array, in dem gesucht werden soll.
     </apiDesc></apiParam><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Objekt, das die zu suchenden Eigenschaften enthält (oder das zu suchende Objekt selbst). Das Objekt muss aus Feldnamen/Werte-Paaren bestehen, wobei die Feldnamen die Namen von Feldern sind, die von der <codeph>SortFields</codeph>-Eigenschaft festgelegt wurden, und dieselbe Reihenfolge haben, in der sie in dieser Eigenschaft verwendet werden. Sie müssen nicht alle Felder aus der <codeph>SortFields</codeph>-Eigenschaft angeben, doch es ist nicht möglich, Felder in der Reihenfolge zu überspringen. Wenn die <codeph>SortFields</codeph>-Eigenschaft drei Felder auflistet, können Sie daher das erste und das zweite Feld in diesem Parameter angeben, nicht jedoch das erste und das dritte Feld.
     </apiDesc></apiParam><apiParam><apiItemName>mode</apiItemName><apiType value="String"/><apiDesc>String, der den Typ des auszuführenden Suchvorgangs enthält. Die zulässigen Werte liegen zwischen und
                    <ul>
                      <li>ANY_INDEX_MODE</li> Gibt eine für die Werte zulässige Position zurück.
                      <li>FIRST_INDEX_MODE</li> Gibt die Position der ersten Fundstelle der Werte zurück.
                      <li>LAST_INDEX_MODE</li> Gibt die Position der letzten Fundstelle der angegebenen Werte zurück.
                    </ul>
     </apiDesc></apiParam><apiParam><apiItemName>returnInsertionIndex</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Wenn die Methode kein vom <codeph>values</codeph>-Parameter identifiziertes Element findet und dieser Parameter <codeph>true</codeph> ist, gibt die <codeph>findItem()</codeph>-Methode die Einfügemarke für die Werte zurück. Dies ist die Stelle in der sortierten Reihenfolge, an der das Element eingefügt werden soll.
     </apiDesc></apiParam><apiParam><apiItemName>compareFunction</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Eine Komparator-Funktion zum Suchen des Elements. Wenn Sie diesen Parameter nicht angeben, verwendet die Funktion die Funktion, die von der <codeph>compareFunction</codeph>-Eigenschaft der Sort-Instanz festgelegt wurde, die in dem vom Werteobjekt und den derzeitigen SortFields bestimmten Feldarray übergeben wurde.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Sucht das angegebene Objekt im angegebenen Array (oder ggf. die Einfügemarke) und gibt den Index zurück, falls er gefunden wird, andernfalls -1. Die <codeph>find<i>xxx</i>()</codeph>-Methoden der ListCollectionView-Klasse verwenden diese Methode, um das abgefragte Elemente zu suchen. Es ist im Allgemeinen einfacher, diese Funktionen anstelle von <codeph>findItem()</codeph> zu verwenden, um Daten in ListCollectionView-basierten Objekten zu suchen. Sie rufen die <codeph>findItem()</codeph>-Methode direkt auf, wenn Sie eine Klasse schreiben, die die Sortierung unterstützt, wie etwa eine neue ICollectionView-Implementierung.
    
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:propertyAffectsSort"><apiName>propertyAffectsSort</apiName><shortdesc>
      Gibt zurück, ob die angegebene Eigenschaft zur Steuerung der Sortierung verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ob der Eigenschaftswert Einfluss auf das Sortierergebnis haben kann. Wenn die Sortierung die compareFunction-Standardfunktion verwendet, wird <codeph>true</codeph> zurückgegeben, wenn der <codeph>property</codeph>-Parameter ein Sortierfeld angibt. Wenn die Sortierung oder ein beliebiges SortField einen benutzerdefinierten Komparator verwendet, ist es nicht möglich, dies zu ermitteln. Daher wird <codeph>true</codeph> zurückgegeben.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>property</apiItemName><apiType value="String"/><apiDesc>Der Name des zu testenden Felds.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt zurück, ob die angegebene Eigenschaft zur Steuerung der Sortierung verwendet wird. Die Funktion kann keine definitive Antwort ermitteln, wenn die Sortierung einen benutzerdefinierten Komparator verwendet. Sie gibt in diesem Fall immer <codeph>true</codeph> zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:reverse"><apiName>reverse</apiName><shortdesc>
     Durchläuft alle SortFields und ruft reverse() für sie auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Durchläuft alle SortFields und ruft reverse() für sie auf. Wenn das Feld absteigend sortiert war, ist es nun aufsteigend sortiert und umgekehrt.
     
     <p>Hinweis: Eine ICollectionView wird nicht automatisch aktualisiert, wenn die SortFields geändert werden. Rufen Sie zur Aktualisierung der Ansicht ihre <codeph>refresh()</codeph>-Methode auf.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:Sort:sort"><apiName>sort</apiName><shortdesc>
      Die aktuelle Sortierung auf das angegebene Array anwenden (keine Kopie davon).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiDesc>Array von zu sortierenden Elementen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Die aktuelle Sortierung auf das angegebene Array anwenden (keine Kopie davon). Um zu verhindern, dass das Array geändert wird, erstellen Sie eine Kopie und verwenden die Kopie im <codeph>items</codeph>-Parameter.
     
      <p>ICollectionView-Implementierungen von Flex rufen die <codeph>sort</codeph>-Methode automatisch auf und stellen sicher, dass die Sortierung an einer Kopie der zugrunde liegenden Daten ausgeführt wird.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:Sort:ANY_INDEX_MODE"><apiName>ANY_INDEX_MODE</apiName><shortdesc>
      Bei der Ausführung einer Suche den Index für alle übereinstimmenden Elemente zurückgeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Bei der Ausführung einer Suche den Index für alle übereinstimmenden Elemente zurückgeben.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:FIRST_INDEX_MODE"><apiName>FIRST_INDEX_MODE</apiName><shortdesc>
      Bei der Ausführung einer Suche den Index für das erste übereinstimmende Element zurückgeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>first</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Bei der Ausführung einer Suche den Index für das erste übereinstimmende Element zurückgeben.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:LAST_INDEX_MODE"><apiName>LAST_INDEX_MODE</apiName><shortdesc>
      Bei der Ausführung eines Suche den Index für das letzte übereinstimmende Element zurückgeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>last</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Bei der Ausführung eines Suche den Index für das letzte übereinstimmende Element zurückgeben.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      Die Methode, die für den Vergleich von Elementen bei der Sortierung verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Die Methode, die für den Vergleich von Elementen bei der Sortierung verwendet wird. Wenn Sie diese Eigenschaft angeben, ignoriert Flex alle <codeph>compareFunction</codeph>-Eigenschaften, die Sie in den SortField-Objekten angeben, die Sie in dieser Klasse verwenden.
     
      <p>Die Vergleichsfunktion muss folgende Signatur haben:</p>
     
      <pre><codeph>
     
         function [name](a:Object, b:Object, fields:Array = null):int
     
      </codeph></pre>
     
      <p>Diese Funktion muss Folgendes zurückgeben
      <ul>
            <li>-1, wenn <codeph>a</codeph> in der sortierten Sequenz vor <codeph>b</codeph> erscheint.</li>
            <li>0, wenn <codeph>a</codeph> gleich <codeph>b</codeph> ist.</li>
            <li>-1, wenn <codeph>a</codeph> in der sortierten Sequenz nach <codeph>b</codeph> erscheint.</li>
      </ul></p>
      <p>Um zur internen Vergleichsfunktion zurückzukehren, setzen Sie diesen Wert auf <codeph>null</codeph>.</p>
     <p>
      Das angegebene <codeph>fields</codeph>-Array gibt die zu vergleichenden Objektfelder an. Normalerweise vergleicht der Algorithmus Eigenschaften, bis die Feldliste abgearbeitet wurde oder ein Wert ungleich Null zurückgegeben werden kann. Beispiel:</p>
     
      <pre><codeph>
        function myCompare(a:Object, b:Object, fields:Array = null):int
        {
            var result:int = 0;
            var i:int = 0;
            var propList:Array = fields ? fields : internalPropList;
            var len:int = propList.length;
            var propName:String;
            while (result == 0 &amp;&amp; (i &lt; len))
            {
                propName = propList[i];
                result = compareValues(a[propName], b[propName]);
                i++;
            }
            return result;
        }
     
        function compareValues(a:Object, b:Object):int
        {
            if (a == null &amp;&amp; b == null)
                return 0;
     
            if (a == null)
              return 1;
     
            if (b == null)
               return -1;
     
            if (a &lt; b)
                return -1;
     
            if (a > b)
                return 1;
     
            return 0;
        }
      </codeph></pre>
     
      <p>Der Standardwert ist eine interne Vergleichsfunktion, die einen Vergleich von Strings, numerischen Werten oder Datumsangaben in aufsteigender oder absteigender Reihenfolge durchführen kann, wobei die Stringvergleiche zwischen Groß- und Kleinschreibung unterscheiden können. Geben Sie Ihre eigene Funktion nur an, wenn ein benutzerdefinierter Vergleichsalgorithmus erforderlich ist. Dies ist normalerweise nur der Fall, wenn ein berechnetes Feld in einer Anzeige verwendet wird.</p>
     
      <p>Alternativ dazu können Sie für jedes Sortierfeld mithilfe der <codeph>compare</codeph>-Eigenschaft der SortField-Klasse eigene Vergleichsfunktionen festlegen. Auf diese Weise können Sie für bestimmte Felder den Standardvergleich und für andere Felder einen benutzerdefinierten Vergleich verwenden.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:Sort:fields:get"><apiName>fields</apiName><shortdesc>
      Ein Array von SortField-Objekten, das die zu vergleichenden Felder angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Ein Array von SortField-Objekten, das die zu vergleichenden Felder angibt. Die Reihenfolge der SortField-Objekte im Array bestimmt die Reihenfolge der Feldpriorität bei der Sortierung. Der Standardsortierkomparator prüft die Sortierfelder in der Arrayreihenfolge, bis eine Sortierreihenfolge für die beiden verglichenen Felder bestimmt werden kann.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#SortField"><linktext>SortField</linktext></link></related-links></apiValue><apiValue id="mx.collections:Sort:unique:get"><apiName>unique</apiName><shortdesc>
      Gibt an, ob die Sortierung eindeutig sein soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob die Sortierung eindeutig sein soll. Eindeutige Sortierungen schlagen fehl, wenn ein Wert oder kombinierter Wert, der von den Feldern, die im Feldeigenschaftenergebnis aufgeführt sind, angegeben wird, eine unbestimmte oder nicht-eindeutige Sortierreihenfolge ergibt, d. h. wenn zwei oder mehr Elemente identische Sortierfeldwerte haben.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:IList"><apiName>IList</apiName><shortdesc>
  Eine ordinal angelegte Sammlung von Elementen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Eine ordinal angelegte Sammlung von Elementen. Sie stellt Methoden für den Zugriff und die Änderung basierend auf dem Index bereit.  
  
  <p>Eine <codeph>IList</codeph> kann eine Ansicht von Daten sein, die von einer Remote-Position abgerufen wurden. Wenn eine Sammlung, die möglicherweise remote ist, bearbeitet wird, muss der Fall behandelt werden, dass Daten noch nicht verfügbar sind. Dies wird von <codeph>ItemPendingError</codeph> angezeigt.</p>
  
  <p>Die <codeph>ICollectionView</codeph>-Instanz ist eine Alternative zu <codeph>IList</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link><link href="mx.collections.xml#ListCollectionView"><linktext>mx.collections.ListCollectionView</linktext></link></related-links><adobeApiEvent id="mx.collections:IList_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Wird ausgelöst, wenn IList auf irgendeine Weise aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn IList auf irgendeine Weise aktualisiert wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:IList:mx.collections:IList:addItem"><apiName>addItem</apiName><shortdesc>
      Fügt das angegebene Element am Ende der Liste hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das hinzuzufügende Element.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt das angegebene Element am Ende der Liste hinzu. Entspricht <codeph>addItemAt(item, length)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      Fügt das Element an der angegebenen Indexposition hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn der Index kleiner als 0 oder größer als die Länge der Liste ist. 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Element, das an der Indexposition platziert werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index, an den das Element platziert werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt das Element an der angegebenen Indexposition hinzu. Der Index eines Elements, der größer als der Index des hinzugefügten Element ist, wird um 1 erhöht. Wenn der angegebene Index kleiner als 0 oder größer als die Länge der Liste ist, wird ein RangeError ausgegeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Ruft das Element am angegebenen Index ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Daten für diesen Index von einem Remote-Speicherort geladen werden müssen.
     
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>mx.collections.errors:ItemPendingError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn <codeph>index &lt; 0</codeph> oder <codeph>index >= length</codeph>.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das Element an diesem Index oder <codeph>null</codeph>, wenn keines vorhanden ist.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index in der Liste, aus der das Element abgerufen werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Ein <codeph>int</codeph>-Wert, der sowohl die Richtung als auch die Anzahl von Elementen angibt, die während der Anforderung abgerufen werden sollen, wenn das Element nicht lokal ist.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft das Element am angegebenen Index ab.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      Gibt den Index des Elements zurück, wenn es in der Liste enthalten ist, sodass gilt: getItemAt(Index) == Element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Index des Elements oder -1, wenn das Element nicht in der Liste enthalten ist.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das zu suchende Element.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt den Index des Elements zurück, wenn es in der Liste enthalten ist, sodass gilt: getItemAt(Index) == Element.
     
      <p>Hinweis: Im Unterschied zu <codeph>IViewCursor.find<i>xxx</i>()</codeph>-Methoden kann die <codeph>getItemIndex()</codeph>-Methode keine Parameter mit einer Untergruppe der Felder im gesuchten Element verwenden. Diese Methode sucht immer nach einem Element, das genau dem Eingabeparameter entspricht.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Informiert die Ansicht darüber, dass ein Element aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Element in der Ansicht, die aktualisiert wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der Name der Eigenschaft, die aktualisiert wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der alte Wert dieser Eigenschaft. (Wenn die Eigenschaft „null“ war, kann dies der alte Wert des Elements sein.)
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der neue Wert dieser Eigenschaft. (Wenn die Eigenschaft „null“ war, muss der Wert nicht angegeben werden, da davon ausgegangen wird, dass das Element den neuen Wert hat.)
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Informiert die Ansicht darüber, dass ein Element aktualisiert wurde. Dies ist nützlich, wenn der Inhalt der Ansicht <codeph>IEventDispatcher</codeph> nicht implementiert und ein <codeph>PropertyChangeEvent</codeph> auslöst. Wenn eine Eigenschaft angegeben wird, kann die Ansicht möglicherweise ihre Benachrichtigungsfunktion optimieren. Andernfalls wird möglicherweise einfach die gesamte Ansicht aktualisiert.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:removeAll"><apiName>removeAll</apiName><shortdesc> 
      Entfernt alle Elemente aus der Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      Entfernt alle Elemente aus der Liste.
     
      <p>Wenn ein Element nicht lokal ist und ein asynchroner Vorgang ausgeführt werden muss, wird ein <codeph>ItemPendingError</codeph> ausgegeben.</p>
     
      <p>Weitere Informationen zur Verwendung von <codeph>ItemPendingError</codeph> finden Sie in der ItemPendingError-Dokumentation und der Dokumentation zu den Sammlungen.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Entfernt das Element am angegebenen Index und gibt es zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn der Index kleiner als 0 oder größer als die Länge ist. 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das entfernte Element.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index, an dem das Element entfernt werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt das Element am angegebenen Index und gibt es zurück. Alle Elemente, die sich nach diesem Index befanden, sind nun um eine Indexposition weiter vorne.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      Platziert das Element am angegebenen Index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn der Index kleiner als 0 oder größer als die Länge ist.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das Element, das ersetzt wurde, oder <codeph>null</codeph>, wenn keines ersetzt wurde.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das neue Element, das am angegebenen Index platziert werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index, an den das Element platziert werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Platziert das Element am angegebenen Index. Wenn sich bereits ein Element an diesem Index befand, wird es vom neuen Element ersetzt und zurückgegeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IList:mx.collections:IList:toArray"><apiName>toArray</apiName><shortdesc>
      Gibt ein Array zurück, das in derselben Reihenfolge gefüllt wird wie die IList-Implementierung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Daten noch nicht vollständig von einem Remote-Speicherort geladen wurden.
      
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>mx.collections.errors:ItemPendingError</apiOperationClassifier></apiException><apiReturn><apiDesc>Anschließend wird das Array.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Gibt ein Array zurück, das in derselben Reihenfolge gefüllt wird wie die IList-Implementierung. Diese Methode kann einen ItemPendingError ausgeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:IList:mx.collections:IList:length:get"><apiName>length</apiName><shortdesc>
      Die Anzahl der Elemente in dieser Sammlung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Anzahl der Elemente in dieser Sammlung. 0 bedeutet keine Elemente, -1 bedeutet, dass die Länge unbekannt ist. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:XMLListCollection"><apiName>XMLListCollection</apiName><shortdesc>
  Die XMLListCollection-Klasse stellt Sammlungsfunktionen für ein XMLList-Objekt bereit und macht einige der Methoden der nativen XMLList-Klasse verfügbar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="source"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:XMLListCollection&gt;</code> tag inherits all
  the attributes of its superclass, and adds the following attributes:</p>
 
  <pre>
  &lt;mx:XMLListCollection
  <b>Properties</b>
  source="null"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.collections:ListCollectionView</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die XMLListCollection-Klasse stellt Sammlungsfunktionen für ein XMLList-Objekt bereit und macht einige der Methoden der nativen XMLList-Klasse verfügbar.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="mx.collections.XMLList.xml"><linktext>XMLList</linktext></link><link href="" invalidHref="mx.collections.XML.xml"><linktext>XML</linktext></link></related-links><apiConstructor id="mx.collections:XMLListCollection:XMLListCollection"><apiName>XMLListCollection</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="XMLList"/><apiData>null</apiData><apiDesc>Das XMLList-Objekt, das die Daten enthält, die vom XMLListCollection-Objekt dargestellt werden sollen.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      <p>Erstellt mithilfe des angegebenen XMLList-Objekts ein neues XMLListCollection-Objekt.</p>
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:XMLListCollection:attribute"><apiName>attribute</apiName><shortdesc>
      Ruft die attribute()-Methode jedes XML-Objekts in der XMLList auf und gibt eine XMLList der Ergebnisse zurück, die mit dem angegebenen attributeName übereinstimmen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die XMLList von übereinstimmenden XML-Objekten.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>attributeName</apiItemName><apiType value="Object"/><apiDesc>Das Attribut, das in den XML-Objekten der XMLList übereinstimmen soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft die <codeph>attribute()</codeph>-Methode jedes XML-Objekts in der XMLList auf und gibt eine XMLList der Ergebnisse zurück, die mit dem angegebenen <codeph>attributeName</codeph> übereinstimmen.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/attribute()"><linktext>XML.attribute()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:attributes"><apiName>attributes</apiName><shortdesc>
      Ruft die attributes()-Methode jedes XML-Objekts im XMLList-Objekt auf und gibt für jedes XML-Objekt eine XMLList der Attribute zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das XMLList-Objekt mit den resultierenden XML-Objekten, in dem die Attribute aufgelistet werden.
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      Ruft die <codeph>attributes()</codeph>-Methode jedes XML-Objekts im XMLList-Objekt auf und gibt für jedes XML-Objekt eine XMLList der Attribute zurück.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/attributes()"><linktext>XML.attributes()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:child"><apiName>child</apiName><shortdesc>
      Ruft die child()-Methode jedes XML-Objekts in der XMLList auf und gibt eine XMLList mit den sortierten untergeordneten Elementen und den angegebenen Eigenschaftsnamen zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine XMLList von übereinstimmenden untergeordneten Elementen der XML-Objekte in der Original-XMLList.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>propertyName</apiItemName><apiType value="Object"/><apiDesc>Die Eigenschaft, die gesucht wird.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft die <codeph>child()</codeph>-Methode jedes XML-Objekts in der XMLList auf und gibt eine XMLList mit den sortierten untergeordneten Elementen und den angegebenen Eigenschaftsnamen zurück.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/child()"><linktext>XML.child()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:children"><apiName>children</apiName><shortdesc>
      Ruft die children()-Methode jedes XML-Objekts in der XMLList auf und gibt eine XMLList mit den Ergebnissen zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine XMLList von untergeordneten Elementen der XML-Objekte in der Original-XMLList.
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      Ruft die children()-Methode jedes XML-Objekts in der XMLList auf und gibt eine XMLList mit den Ergebnissen zurück.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/children()"><linktext>XML.children()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:copy"><apiName>copy</apiName><shortdesc>
      Gibt eine tiefe Kopie des XMLList-Objekts zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Kopie des XMLList-Objekts.
      
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
      Gibt eine tiefe Kopie des XMLList-Objekts zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:XMLListCollection:descendants"><apiName>descendants</apiName><shortdesc>
      Ruft die descendants()-Methode jedes XML-Objekts in der XMLList auf und gibt eine XMLList mit den Ergebnissen zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList der übereinstimmenden untergeordneten Elemente (direkt untergeordnete Elemente, wiederum untergeordnete Elemente usw.) der XML-Objekte in der Original-XMLList.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="Object"/><apiData>*</apiData><apiDesc>Der Name des zu vergleichenden Elements.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft die <codeph>descendants()</codeph>-Methode jedes XML-Objekts in der XMLList auf und gibt eine XMLList mit den Ergebnissen zurück. Der <codeph>name</codeph>-Parameter wird an die <codeph>descendants()</codeph>-Methode des XML-Objekts übergeben. Wenn Sie keinen Parameter angeben, wird der String „~~“ „~~“ an die <codeph>descendants()</codeph>-Methode übergeben.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/descendants()"><linktext>XML.descendants()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:elements"><apiName>elements</apiName><shortdesc>
      Ruft die elements()-Methode jedes XML-Objekts in der XMLList auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>XMLList der übereinstimmenden untergeordneten Elemente der XML-Objekte in der Original-XMLList.
     
      </apiDesc><apiType value="XMLList"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>*</apiData><apiDesc>Der Name des zu vergleichenden Elements.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft die <codeph>elements()</codeph>-Methode jedes XML-Objekts in der XMLList auf. Der <codeph>name</codeph>-Parameter wird an die <codeph>elements()</codeph>-Methode des XML-Objekts übergeben. Wenn Sie keinen Parameter angeben, wird der String „~~“ an die <codeph>elements()</codeph>-Methode übergeben.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/elements()"><linktext>XML.elements()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:text"><apiName>text</apiName><shortdesc>
     Ruft die text()-Methode jedes XML-Objekts in der XMLList auf und gibt eine XMLList mit den Ergebnissen zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die XMLList, die das Ergebnis enthält.
     
      </apiDesc><apiType value="XMLList"/></apiReturn></apiOperationDef><apiDesc>
     Ruft die <codeph>text()</codeph>-Methode jedes XML-Objekts in der XMLList auf und gibt eine XMLList mit den Ergebnissen zurück.
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/text()"><linktext>XML.text()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:toString"><apiName>toString</apiName><shortdesc>
      Gibt eine Stringdarstellung der XMLList zurück, indem die toString()-Methode für jedes XML-Objekt in der XMLList aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Die Stringdarstellung des XMLList-Objekts.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt eine Stringdarstellung der XMLList zurück, indem die <codeph>toString()</codeph>-Methode für jedes XML-Objekt in der XMLList aufgerufen wird. Wenn die <codeph>prettyPrinting</codeph>-Eigenschaft der <codeph>XML</codeph>-Klasse auf <codeph>true</codeph> gesetzt ist, werden die Ergebnisse für jedes XML-Objekt in der XMLList durch das Wagenrücklaufzeichen getrennt. Andernfalls, wenn <codeph>prettyPrinting</codeph> auf <codeph>false</codeph> eingestellt ist, werden die Ergebnisse einfach aneinander angehängt, ohne trennendes Wagenrücklaufzeichen.
     
      <p>Die <codeph>toString()</codeph>-Methode entfernt Folgendes aus dem zurückgegebenen String für ein XML-Objekt mit einfachem Inhalt: Das Start-Tag, Attribute, Namespace-Deklarationen und das Ende-Tag. Verwenden Sie die <codeph>toXMLString()</codeph>-Methode, wenn Sie diese im zurückgegebenen String für XML-Objekte mit einfachem Inhalt beibehalten möchten.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/prettyPrinting"><linktext>XML.prettyPrinting</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:XMLListCollection:toXMLString"><apiName>toXMLString</apiName><shortdesc>
      Gibt eine Stringdarstellung der XMLList zurück, indem die toXMLString()-Methode für jedes XML-Objekt in der XMLList aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Stringdarstellung der XMLList.
     
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt eine Stringdarstellung der XMLList zurück, indem die <codeph>toXMLString()</codeph>-Methode für jedes XML-Objekt in der XMLList aufgerufen wird. Wenn die <codeph>prettyPrinting</codeph>-Eigenschaft der <codeph>XML</codeph>-Klasse auf <codeph>true</codeph> gesetzt ist, werden die Ergebnisse für jedes XML-Objekt in der XMLList durch das Wagenrücklaufzeichen getrennt. Andernfalls, wenn <codeph>prettyPrinting</codeph> auf <codeph>false</codeph> eingestellt ist, werden die Ergebnisse einfach aneinander angehängt, ohne trennendes Wagenrücklaufzeichen.
     
      <p>Die <codeph>toString()</codeph>-Methode behält Folgendes im zurückgegebenen String für ein XML-Objekt mit einfachem Inhalt bei: Das Start-Tag, Attribute, Namespace-Deklarationen und das Ende-Tag. Verwenden Sie die <codeph>toString()</codeph>-Methode, wenn Sie diese aus dem zurückgegebenen String für XML-Objekte mit einfachem Inhalt entfernen möchten.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.collections.xml#XML/prettyPrinting"><linktext>XML.prettyPrinting</linktext></link></related-links></apiOperation><apiValue id="mx.collections:XMLListCollection:source:get"><apiName>source</apiName><shortdesc>
      Die zugrunde liegende XMLList für diese Sammlung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="XMLList"/></apiValueDef><apiDesc>
      Die zugrunde liegende XMLList für diese Sammlung. Das XMLListCollection-Objekt stellt keine Änderungen dar, die Sie direkt am XMLList-Quellobjekt vornehmen. Verwenden Sie zum Modifizieren der Sammlung immer die XMLListCollection-Methode.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ArrayList"><apiName>ArrayList</apiName><shortdesc>
  Die ArrayList-Klasse ist eine einfache Implementierung der IList, die ein zugrunde liegendes Array als Datenquelle verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion><DefaultProperty name="source"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseInterface>flash.utils:IExternalizable</apiBaseInterface><apiBaseInterface>mx.core:IPropertyChangeNotifier</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Die ArrayList-Klasse ist eine einfache Implementierung der IList, die ein zugrunde liegendes Array als Datenquelle verwendet. Auf die Elemente im zugrunde liegenden Array kann zugegriffen werden und sie können bearbeitet werden, indem Sie die Methoden und Eigenschaften der <codeph>IList</codeph>-Schnittstelle verwenden. Vorgänge an einer ArrayList-Instanz ändern die Datenquelle. Wenn Sie z. B. die <codeph>removeItemAt()</codeph>-Methode auf eine ArrayList anwenden, entfernen Sie das Element aus dem zugrunde liegenden Array. Diese Basisklasse gibt keine ItemPendingErrors aus, eine Unterklasse kann jedoch welche ausgeben.
 
  <pre>
  &lt;mx:ArrayList
  <b>Properties</b>
  source="null"
  />
  </pre>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:ArrayList_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Wird ausgelöst, wenn IList auf irgendeine Weise aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn IList auf irgendeine Weise aktualisiert wurde.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:ArrayList:ArrayList"><apiName>ArrayList</apiName><shortdesc>
      Erstellt eine neue ArrayList, indem das angegebene Array als zugehörige Quelle verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiType value="Array"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
      Erstellt eine neue ArrayList, indem das angegebene Array als zugehörige Quelle verwendet wird. Wenn keine Quelle angegeben ist, wird ein leeres Array verwendet.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ArrayList:addAll"><apiName>addAll</apiName><shortdesc conref="mx.collections.ListCollectionView#addAll()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Die Liste von Elementen, die der aktuellen Liste hinzugefügt werden sollen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.collections.ListCollectionView#addAll()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addAllAt"><apiName>addAllAt</apiName><shortdesc conref="mx.collections.ListCollectionView#addAllAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Die Liste von Elementen, die der aktuellen Liste hinzugefügt werden sollen.
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Position der aktuellen Liste, an die die neuen Elemente platziert werden sollen.
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.collections.ListCollectionView#addAllAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addItem"><apiName>addItem</apiName><shortdesc>
      Fügt das angegebene Element am Ende der Liste hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>das hinzuzufügende Element
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt das angegebene Element am Ende der Liste hinzu. Entspricht addItemAt(item, length);
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:addItemAt"><apiName>addItemAt</apiName><shortdesc>
      Fügt das Element an der angegebenen Indexposition hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Indexposition kleiner als 0 oder größer als die Länge ist.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Element, das an die Indexposition platziert werden soll.
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition, an der das Element platziert werden soll.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt das Element an der angegebenen Indexposition hinzu. Alle nach dieser Indexposition platzierten Elemente werden um eine Stelle verschoben.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:getItemAt"><apiName>getItemAt</apiName><shortdesc>
      Ruft das Element an der angegebenen Indexposition ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Daten für diesen Index von einem Remote-Speicherort geladen werden müssen
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>ItemPendingError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn Indexposition &lt; 0 oder Indexposition >= Länge.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das Element an dieser Indexposition; null, wenn keines vorhanden ist.
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition in der Liste, aus der das Element abgerufen werden soll.
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Ein int-Wert, der sowohl die Richtung als auch die Anzahl von Elementen angibt, die während der Anforderung abgerufen werden sollen, wenn das Element nicht lokal ist.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ruft das Element an der angegebenen Indexposition ab.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
      Gibt die Indexposition des Elements zurück, wenn es in der Liste enthalten ist, sodass gilt: getItemAt(Index) == Element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die Indexposition des Elements; -1, wenn das Element nicht in der Liste enthalten ist.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>das zu suchende Element
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt die Indexposition des Elements zurück, wenn es in der Liste enthalten ist, sodass gilt: getItemAt(Index) == Element. Beachten Sie, dass in dieser Implementierung die Suche linear und daher O(n) ist.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:itemUpdateHandler"><apiName>itemUpdateHandler</apiName><shortdesc>
      Wird aufgerufen, wenn eines der in der Liste enthaltenen Elemente ein ObjectChange-Ereignis auslöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:PropertyChangeEvent</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
      Wird aufgerufen, wenn eines der in der Liste enthaltenen Elemente ein ObjectChange-Ereignis auslöst. Schließt es in eine CollectionEventKind.UPDATE ein.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Informiert die Ansicht darüber, dass ein Element aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Element in der Ansicht, die aktualisiert wurde.
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Ein String, QName oder int-Wert für die Angabe der aktualisierten Eigenschaft.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der alte Wert dieser Eigenschaft. (Wenn die Eigenschaft „null“ war, kann dies der alte Wert des Elements sein.)
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der neue Wert dieser Eigenschaft. (Wenn die Eigenschaft „null“ war, muss der Wert nicht angegeben werden, da davon ausgegangen wird, dass das Element den neuen Wert hat.)
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Informiert die Ansicht darüber, dass ein Element aktualisiert wurde. Dies ist hilfreich, wenn der Inhalt der Ansicht den <codeph>IEventDispatcher</codeph> nicht implementiert. Wenn eine Eigenschaft angegeben wird, kann die Ansicht möglicherweise ihre Benachrichtigungsfunktion optimieren. Andernfalls wird möglicherweise einfach die gesamte Ansicht aktualisiert.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ArrayList:removeAll"><apiName>removeAll</apiName><shortdesc> 
      Entfernt alle Elemente aus der Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
      Entfernt alle Elemente aus der Liste.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:removeItem"><apiName>removeItem</apiName><shortdesc>
      Entfernt das angegebene Element aus der Liste, falls vorhanden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Boolescher Wert, der angibt, ob das Element entfernt wurde.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Objektverweis auf das Element, das entfernt werden soll.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt das angegebene Element aus der Liste, falls vorhanden.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
      Entfernt das Element an der angegebenen Indexposition und gibt es zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn index &lt; 0 oder index >= length.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das entfernte Element.
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index, an dem das Element entfernt werden soll.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Entfernt das Element an der angegebenen Indexposition und gibt es zurück. Alle Elemente, die sich nach diesem Index befanden, sind nun um eine Indexposition weiter vorne.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:setItemAt"><apiName>setItemAt</apiName><shortdesc>
      Platziert das Element an der angegebenen Indexposition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Indexposition kleiner als 0 oder größer als oder gleich die Länge ist.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das Element, das ersetzt wurde; null, wenn keines ersetzt wurde.
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>der neue Wert der Indexposition
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Indexposition, an der das Element platziert werden soll.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Platziert das Element an der angegebenen Indexposition. Wenn sich bereits ein Element an diesem Index befand, wird es vom neuen Element ersetzt und zurückgegeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:startTrackUpdates"><apiName>startTrackUpdates</apiName><shortdesc> 
      Wenn das Element ein IEventDispatcher ist, überwachen Sie es auf Aktualisierungen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> 
      Wenn das Element ein IEventDispatcher ist, überwachen Sie es auf Aktualisierungen. Dies wird von addItemAt aufgerufen und wenn die Quelle anfänglich zugewiesen wird.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:protected:stopTrackUpdates"><apiName>stopTrackUpdates</apiName><shortdesc> 
      Wenn es sich bei dem Element um einen IEventDispatcher handelt, unterbrechen Sie das Überwachen auf Aktualisierungen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc> 
      Wenn es sich bei dem Element um einen IEventDispatcher handelt, unterbrechen Sie das Überwachen auf Aktualisierungen. Der Aufruf erfolgt durch removeItemAt, removeAll und vor dem Zuweisen einer neuen Quelle.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:toArray"><apiName>toArray</apiName><shortdesc>
      Gibt ein Array zurück, das in derselben Reihenfolge gefüllt wird wie die IList-Implementierung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Daten noch nicht vollständig von einem Remote-Speicherort geladen wurden.
      
      </apiDesc><apiItemName>ItemPendingError</apiItemName><apiOperationClassifier>ItemPendingError</apiOperationClassifier></apiException><apiReturn><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Gibt ein Array zurück, das in derselben Reihenfolge gefüllt wird wie die IList-Implementierung.  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ArrayList:toString"><apiName>toString</apiName><shortdesc>
      Gibt den Inhalt dieser ArrayList in einem String aus und gibt ihn zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt den Inhalt dieser ArrayList in einem String aus und gibt ihn zurück.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ArrayList:length:get"><apiName>length</apiName><shortdesc>
      Ruft die Anzahl der Elemente in der Liste ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Ruft die Anzahl der Elemente in der Liste ab. Für eine ArrayList sollte immer eine Länge angegeben sein, sodass nicht -1 zurückgegeben wird. Eine Unterklasse kann dieses Verhalten jedoch überschreiben.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ArrayList:source:get"><apiName>source</apiName><shortdesc>
      Das Quellarray für diese ArrayList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Das Quellarray für diese ArrayList. Alle Änderungen, die durch die IList-Schnittstelle vorgenommen wurden, werden im Quellarray übernommen. Wenn kein Quellarray angegeben ist, erstellt die ArrayList unmittelbar ein internes Quellarray. Änderungen, die direkt am zugrunde liegenden Array vorgenommen wurden (z. B. Aufrufen der <codeph>theList.source.pop()</codeph>-Methode) führen nicht zum Auslösen von <codeph>CollectionEvents</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ArrayList:uid:get"><apiName>uid</apiName><shortdesc>
      Bietet Zugriff auf die eindeutige ID für diese Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Bietet Zugriff auf die eindeutige ID für diese Liste.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:ListCollectionView"><apiName>ListCollectionView</apiName><shortdesc>
 Die ListCollectionView-Klasse fügt die Eigenschaften und Methoden der ICollectionView-Schnittstelle einem Objekt hinzu, das mit der IList-Schnittstelle kompatibel ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ListCollectionView&gt;</code> has the following attributes,
  which all of its subclasses inherit:</p>
 
  <pre>
  &lt;mx:ListCollectionView
  <b>Properties</b>
  filterFunction="null"
  list="null"
  sort="null"
  <b>Events</b>
  collectionChange="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:ICollectionView</apiBaseInterface><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.utils:Proxy</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die ListCollectionView-Klasse fügt die Eigenschaften und Methoden der <codeph>ICollectionView</codeph>-Schnittstelle einem Objekt hinzu, das mit der <codeph>IList</codeph>-Schnittstelle kompatibel ist. Als Ergebnis können Sie ein Objekt dieser Klasse an alle Objekte übergeben, die eine <codeph>IList</codeph>- oder <codeph>ICollectionView</codeph>-Schnittstelle erfordern.
 
 <p>Bei dieser Klasse können Sie auch die Arrayschreibweise [] verwenden, um auf die <codeph>getItemAt()</codeph>- und <codeph>setItemAt()</codeph>-Methode zuzugreifen. Wenn Sie Code wie <codeph>myListCollectionView[Index]</codeph> verwenden, ruft Flex die <codeph>setItemAt()</codeph>- oder <codeph>getItemAt()</codeph>-Methode des <codeph>myListCollectionView</codeph>-Objekts auf.</p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:ListCollectionView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Wird ausgelöst, wenn ICollectionView auf irgendeine Weise aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ICollectionView auf irgendeine Weise aktualisiert wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.collections:ListCollectionView:ListCollectionView"><apiName>ListCollectionView</apiName><shortdesc>
      Der ListCollectionView-Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>list</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiData>null</apiData><apiDesc>Die IList, die diese ListCollectionView einschließen soll.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Der ListCollectionView-Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:ListCollectionView:addAll"><apiName>addAll</apiName><shortdesc>
      Fügt am Ende der aktuellen Liste eine Liste von Elementen in der Reihenfolge hinzu, in der sie übergeben werden. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Die Liste von Elementen, die der aktuellen Liste hinzugefügt werden sollen.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt am Ende der aktuellen Liste eine Liste von Elementen in der Reihenfolge hinzu, in der sie übergeben werden. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addAllAt"><apiName>addAllAt</apiName><shortdesc>
      Fügt der aktuellen Liste eine Liste von Elementen hinzu. Sie werden an dem Positionsindex eingefügt, der an die Funktion übergeben wurde. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn der Index kleiner als 0 oder größer als die Länge der Liste ist. 
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>addList</apiItemName><apiOperationClassifier>mx.collections:IList</apiOperationClassifier><apiDesc>Die Liste von Elementen, die der aktuellen Liste hinzugefügt werden sollen.
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Die Position der aktuellen Liste, an die die neuen Elemente platziert werden sollen.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt der aktuellen Liste eine Liste von Elementen hinzu. Sie werden an dem Positionsindex eingefügt, der an die Funktion übergeben wurde. Die Elemente werden in der Reihenfolge an die Indexposition platziert, in der sie empfangen werden.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addEventListener"><apiName>addEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addItem"><apiName>addItem</apiName><shortdesc>
     
      Fügt das angegebene Element am Ende der Liste hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das hinzuzufügende Element.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Fügt das angegebene Element am Ende der Liste hinzu. Entspricht <codeph>addItemAt(item, length)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:addItemAt"><apiName>addItemAt</apiName><shortdesc>
     
      Fügt das Element an der angegebenen Indexposition hinzu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Element, das an die Indexposition platziert werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index, an den das Element platziert werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Fügt das Element an der angegebenen Indexposition hinzu. Der Index eines Elements, der größer als der Index des hinzugefügten Element ist, wird um 1 erhöht. Wenn der angegebene Index kleiner als 0 oder größer als die Länge der Liste ist, wird ein RangeError ausgegeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:contains"><apiName>contains</apiName><shortdesc>
      
      Gibt zurück, ob die Ansicht das angegebene Objekt enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ist „true“, wenn die ICollectionView nach dem Anwenden von Filtern das Element enthält, andernfalls „false“.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das zu suchende Objekt.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Gibt zurück, ob die Ansicht das angegebene Objekt enthält. Im Unterschied zu <codeph>IViewCursor.find<i>xxx</i></codeph>-Methoden ist diese Suche nur erfolgreich, wenn sie ein Element findet, das dem Parameter genau entspricht. Wenn ein Filter auf die Ansicht angewendet wird, kann diese Methode <codeph>false</codeph> zurückgeben, selbst wenn die zugrunde liegende Sammlung das Element enthält.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ListCollectionView/enableAutoUpdate()"><linktext>enableAutoUpdate()</linktext></link><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:createCursor"><apiName>createCursor</apiName><shortdesc>
      
      Erstellt einen neuen IViewCursor, der mit dieser Ansicht verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine neue IViewCursor-Implementierung.
     
      
      </apiDesc><apiOperationClassifier>mx.collections:IViewCursor</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      
      Erstellt einen neuen IViewCursor, der mit dieser Ansicht verwendet wird.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:disableAutoUpdate"><apiName>disableAutoUpdate</apiName><shortdesc>
      
      Verhindert, dass Änderungen der Sammlung selbst und Elemente aus der Sammlung von der Ansicht verteilt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Verhindert, dass Änderungen der Sammlung selbst und Elemente aus der Sammlung von der Ansicht verteilt werden. Die Methode verhindert auch, dass die Ansicht die Positionen der Elemente aktualisiert, wenn die Positionen in der Sammlung geändert werden. Die Änderungen werden in die Warteschlange geschrieben und nach dem Aufruf von <codeph>enableAutoUpdate</codeph> entsprechend verteilt. Wenn mehr Ereignisse als Aktualisierungen an einem einzelnen Element vorgenommen werden, wird die Ansicht möglicherweise zurückgesetzt. Die <codeph>disableAutoUpdate</codeph>-Methode agiert kumulativ. Es ist dieselbe Anzahl von <codeph>enableAutoUpdate</codeph>-Aufrufen für die Ansicht erforderlich, um Ereignisse zu verteilen und die Ansicht zu aktualisieren. Hinweis: <codeph>disableAutoUpdate</codeph> hat nur Auswirkungen auf die einzelne Ansicht. Änderungen können einzeln von anderen Ansichten festgestellt werden.
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/enableAutoUpdate()"><linktext>mx.collections.ICollectionView.enableAutoUpdate()</linktext></link><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:enableAutoUpdate"><apiName>enableAutoUpdate</apiName><shortdesc>
      
      Aktiviert die automatische Aktualisierung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Aktiviert die automatische Aktualisierung. Weitere Informationen finden Sie unter <codeph>disableAutoUpdate</codeph>.
	 
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/disableAutoUpdate()"><linktext>mx.collections.ICollectionView.disableAutoUpdate()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:getItemAt"><apiName>getItemAt</apiName><shortdesc>
     
      Ruft das Element am angegebenen Index ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das Element an diesem Index oder <codeph>null</codeph>, wenn keines vorhanden ist.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index in der Liste, aus der das Element abgerufen werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Ein <codeph>int</codeph>-Wert, der sowohl die Richtung als auch die Anzahl von Elementen angibt, die während der Anforderung abgerufen werden sollen, wenn das Element nicht lokal ist.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Ruft das Element am angegebenen Index ab.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:getItemIndex"><apiName>getItemIndex</apiName><shortdesc>
     
      Gibt den Index des Elements zurück, wenn es in der Liste enthalten ist, sodass gilt: getItemAt(Index) == Element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Index des Elements oder -1, wenn das Element nicht in der Liste enthalten ist.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das zu suchende Element.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Gibt den Index des Elements zurück, wenn es in der Liste enthalten ist, sodass gilt: getItemAt(Index) == Element.
     
      <p>Hinweis: Im Unterschied zu <codeph>IViewCursor.find<i>xxx</i>()</codeph>-Methoden kann die <codeph>getItemIndex()</codeph>-Methode keine Parameter mit einer Untergruppe der Felder im gesuchten Element verwenden. Diese Methode sucht immer nach einem Element, das genau dem Eingabeparameter entspricht.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:initialized"><apiName>initialized</apiName><shortdesc>
       Wird automatisch vom MXML-Compiler aufgerufen, wenn die ListCollectionView mithilfe eines MXML-Tags erstellt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Das MXML-Dokument, das dieses ListCollectionView-Objekt enthält.
      
       </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Ignoriert.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       Wird automatisch vom MXML-Compiler aufgerufen, wenn die ListCollectionView mithilfe eines MXML-Tags erstellt wird. Wenn Sie die ListCollectionView mit ActionScript erstellen, müssen Sie diese Methode aufrufen und das MXML-Dokument sowie <codeph>null</codeph> für die <codeph>id</codeph> übergeben.
      
       </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      
      Informiert die Ansicht darüber, dass ein Element aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Element in der Ansicht, die aktualisiert wurde.
	 
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der Name der Eigenschaft, die aktualisiert wurde.
	 
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der alte Wert dieser Eigenschaft. (Wenn die Eigenschaft „null“ war, kann dies der alte Wert des Elements sein.)
	 
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der neue Wert dieser Eigenschaft. (Wenn die Eigenschaft „null“ war, muss der Wert nicht angegeben werden, da davon ausgegangen wird, dass das Element den neuen Wert hat.)
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Informiert die Ansicht darüber, dass ein Element aktualisiert wurde. Diese Methode ist nützlich, wenn der Inhalt der Ansicht <codeph>IPropertyChangeNotifier</codeph> nicht implementiert. Wenn der Aufruf dieser Methode einen <codeph>property</codeph>-Parameter enthält, kann die Ansicht möglicherweise ihre Benachrichtigungsfunktion optimieren. Andernfalls wird möglicherweise einfach die gesamte Ansicht aktualisiert.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ListCollectionView:refresh"><apiName>refresh</apiName><shortdesc>
     
      Wendet die Sortierung und den Filter auf die Ansicht an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn refresh() abgeschlossen wurde, <codeph>false</codeph>, wenn refresh() nicht abgeschlossen wurde.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
     
      Wendet die Sortierung und den Filter auf die Ansicht an. Die ICollectionView erkennt Änderungen einer Gruppe nicht automatisch. Daher müssen Sie die <codeph>refresh()</codeph>-Methode aufrufen, um die Ansicht nach dem Einrichten der Eigenschaften <codeph>sort</codeph> oder <codeph>filterFunction</codeph> zu aktualisieren. Wenn Ihre ICollectionView-Implementierung auch die IMXMLObject-Schnittstelle implementiert, sollten Sie die <codeph>refresh()</codeph>-Methode von der <codeph>initialized()</codeph>-Methode aus aufrufen.
	 
      <p>Gibt <codeph>true</codeph> zurück, wenn die Aktualisierung erfolgreich war und <codeph>false</codeph>, wenn die Sortierung noch nicht abgeschlossen wurde (d. h. es stehen noch Elemente aus). Ein Client der Ansicht sollte auf ein CollectionEvent-Ereignis mit der Eigenschaft <codeph>CollectionEventKind.REFRESH</codeph> <codeph>kind</codeph> warten, um sicherzustellen, dass der <codeph>refresh()</codeph>-Vorgang abgeschlossen wurde.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeAll"><apiName>removeAll</apiName><shortdesc>
     Entfernt alle Elemente aus der Liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Entfernt alle Elemente aus der Liste.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:removeItemAt"><apiName>removeItemAt</apiName><shortdesc>
     
      Entfernt das Element am angegebenen Index und gibt es zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das entfernte Element.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index, an dem das Element entfernt werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Entfernt das Element am angegebenen Index und gibt es zurück. Alle Elemente, die sich nach diesem Index befanden, sind nun um eine Indexposition weiter vorne.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:setItemAt"><apiName>setItemAt</apiName><shortdesc>
     
      Platziert das Element am angegebenen Index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das Element, das ersetzt wurde, oder <codeph>null</codeph>, wenn keines ersetzt wurde.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das neue Element, das am angegebenen Index platziert werden soll.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Der Index, an den das Element platziert werden soll.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Platziert das Element am angegebenen Index. Wenn sich bereits ein Element an diesem Index befand, wird es vom neuen Element ersetzt und zurückgegeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:toArray"><apiName>toArray</apiName><shortdesc>
     
      Gibt ein Array zurück, das in derselben Reihenfolge gefüllt wird wie die IList-Implementierung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Anschließend wird das Array.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
     
      Gibt ein Array zurück, das in derselben Reihenfolge gefüllt wird wie die IList-Implementierung. Diese Methode kann einen ItemPendingError ausgeben.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:toString"><apiName>toString</apiName><shortdesc>
      Gibt den Inhalt dieser Ansicht als String aus und gibt ihn zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Inhalt dieser Ansicht in Stringform.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Gibt den Inhalt dieser Ansicht als String aus und gibt ihn zurück.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ListCollectionView:willTrigger"><apiName>willTrigger</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ListCollectionView:protected:localIndex"><apiName>localIndex</apiName><shortdesc>
      Wenn die Ansicht sortiert oder gefiltert wird, enthält die localIndex-Eigenschaft ein Array von Elementen in der sortierten bzw. gefilterten (angeordneten, reduzierten) Ansicht und in der sortierten Reihenfolge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Wenn die Ansicht sortiert oder gefiltert wird, enthält die <codeph>localIndex</codeph>-Eigenschaft ein Array von Elementen in der sortierten bzw. gefilterten (angeordneten, reduzierten) Ansicht und in der sortierten Reihenfolge. Die ListCollectionView-Klasse verwendet dann diese Eigenschaft, um auf die Elemente in der Ansicht zuzugreifen. Die <codeph>localIndex</codeph>-Eigenschaft sollte nie Elemente enthalten, die nicht in der Quelle enthalten sind. Sie kann jedoch in der Quelle vorhandene Elemente nicht enthalten. Diese Eigenschaft ist <codeph>null</codeph>, wenn keine Sortierung durchgeführt wird.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      
      Eine Funktion, die von der Ansicht verwendet wird, um Elemente zu entfernen, die die Funktionskriterien nicht erfüllen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      
      Eine Funktion, die von der Ansicht verwendet wird, um Elemente zu entfernen, die die Funktionskriterien nicht erfüllen. Eine filterFunction muss folgende Signatur haben:
	 
	  <pre>f(item:Object):Boolean</pre>
	 
	  Dabei ist der Rückgabewert <codeph>true</codeph>, wenn das angegebene Element in der Ansicht beibehalten werden soll.
	 
      <p>Wenn ein Filter nicht unterstützt wird, gibt Flex einen Fehler aus, wenn auf diese Eigenschaft zugegriffen wird. Sie müssen <codeph>refresh()</codeph> aufrufen, nachdem Sie die <codeph>filterFunction</codeph>-Eigenschaft zum Aktualisieren der Ansicht eingerichtet haben.</p>
	 
 	  <p>Hinweis: Die Flex-Implementierungen der ICollectionView rufen alle Elemente von einer Remote-Position ab, bevor die Filterfunktion ausgeführt wird. Wenn Sie Paging verwenden, wenden Sie den Filter auf die Remote-Sammlung an, bevor Sie die Daten abrufen.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ListCollectionView/refresh()"><linktext>aktualisieren()</linktext></link></related-links></apiValue><apiValue id="mx.collections:ListCollectionView:length:get"><apiName>length</apiName><shortdesc>
      
      Die Anzahl der Elemente in dieser Ansicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Die Anzahl der Elemente in dieser Ansicht. 0 bedeutet keine Elemente, -1 bedeutet, dass die Länge unbekannt ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:list:get"><apiName>list</apiName><shortdesc>
      Die IList, die diese Sammlung einschließt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:IList</apiValueClassifier></apiValueDef><apiDesc>
      Die IList, die diese Sammlung einschließt.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ListCollectionView:sort:get"><apiName>sort</apiName><shortdesc>
      
      Das Sort-Objekt, das auf die ICollectionView angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:Sort</apiValueClassifier></apiValueDef><apiDesc>
      
      Das Sort-Objekt, das auf die ICollectionView angewendet wird. Durch das Einrichten der Sortierung wird nicht automatisch die Ansicht aktualisiert. Sie müssen die <codeph>refresh()</codeph>-Methode nach dem Einrichten dieser Eigenschaft aufrufen. Wenn die Sortierung nicht unterstützt wird, gibt Flex einen Fehler aus, wenn auf diese Eigenschaft zugegriffen wird.
	 
	  <p>Hinweis: Die Flex-Implementierungen der ICollectionView-Schnittstelle rufen alle Elemente von einer Remote-Position ab, bevor eine Sortierung durchgeführt wird. Wenn Sie bei einer sortierten Liste Paging verwenden, wenden Sie die Sortierung auf die Remote-Sammlung an, bevor Sie die Daten abrufen.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ListCollectionView/refresh()"><linktext>aktualisieren()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:ICollectionView"><apiName>ICollectionView</apiName><shortdesc>
  Eine ICollectionView ist eine Ansicht auf eine Sammlung von Daten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Eine <codeph>ICollectionView </codeph> ist eine Ansicht einer Sammlung von Daten. Die Ansicht kann modifiziert werden, um die Daten nach verschiedenen Kriterien sortiert oder durch Filter verringert anzuzeigen, ohne die zugrunde liegenden Daten zu ändern. Ein IViewCursor bietet Zugriff auf Elemente in einer Sammlung. Sie können die Sammlung mithilfe der Methoden <codeph>insert()</codeph> und <codeph>remove()</codeph> der IViewCursor-Schnittstelle modifizieren.
 
  <p>Eine <codeph>ICollectionView</codeph> kann eine Ansicht von Daten sein, die von einer Remote-Position abgerufen wurden. Wenn diese Schnittstelle für Daten implementiert wird, die möglicherweise remote gespeichert sind, muss der Fall berücksichtigt werden, wo Daten ggf. noch nicht verfügbar sind. Dies wird durch <codeph>ItemPendingError</codeph> angezeigt.</p>
 
  <p>Die <codeph>IList</codeph>-Schnittstelle ist eine Alternative zur <codeph>ICollectionView</codeph>-Schnittstelle.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#IViewCursor"><linktext>mx.collections.IViewCursor</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.collections.xml#IList"><linktext>mx.collections.IList</linktext></link></related-links><adobeApiEvent id="mx.collections:ICollectionView_mx.events.CollectionEvent.COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><shortdesc>
  Wird ausgelöst, wenn ICollectionView auf irgendeine Weise aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CollectionEvent.COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CollectionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn ICollectionView auf irgendeine Weise aktualisiert wurde.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:contains"><apiName>contains</apiName><shortdesc>
      Gibt zurück, ob die Ansicht das angegebene Objekt enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ist „true“, wenn die ICollectionView nach dem Anwenden von Filtern das Element enthält, andernfalls „false“.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das zu suchende Objekt.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gibt zurück, ob die Ansicht das angegebene Objekt enthält. Im Unterschied zu <codeph>IViewCursor.find<i>xxx</i></codeph>-Methoden ist diese Suche nur erfolgreich, wenn sie ein Element findet, das dem Parameter genau entspricht. Wenn ein Filter auf die Ansicht angewendet wird, kann diese Methode <codeph>false</codeph> zurückgeben, selbst wenn die zugrunde liegende Sammlung das Element enthält.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:createCursor"><apiName>createCursor</apiName><shortdesc>
      Erstellt einen neuen IViewCursor, der mit dieser Ansicht verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine neue IViewCursor-Implementierung.
     
      
      </apiDesc><apiOperationClassifier>mx.collections:IViewCursor</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Erstellt einen neuen IViewCursor, der mit dieser Ansicht verwendet wird.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:disableAutoUpdate"><apiName>disableAutoUpdate</apiName><shortdesc>
      Verhindert, dass Änderungen der Sammlung selbst und Elemente aus der Sammlung von der Ansicht verteilt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Verhindert, dass Änderungen der Sammlung selbst und Elemente aus der Sammlung von der Ansicht verteilt werden. Die Methode verhindert auch, dass die Ansicht die Positionen der Elemente aktualisiert, wenn die Positionen in der Sammlung geändert werden. Die Änderungen werden in die Warteschlange geschrieben und nach dem Aufruf von <codeph>enableAutoUpdate</codeph> entsprechend verteilt. Wenn mehr Ereignisse als Aktualisierungen an einem einzelnen Element vorgenommen werden, wird die Ansicht möglicherweise zurückgesetzt. Die <codeph>disableAutoUpdate</codeph>-Methode agiert kumulativ. Es ist dieselbe Anzahl von <codeph>enableAutoUpdate</codeph>-Aufrufen für die Ansicht erforderlich, um Ereignisse zu verteilen und die Ansicht zu aktualisieren. Hinweis: <codeph>disableAutoUpdate</codeph> hat nur Auswirkungen auf die einzelne Ansicht. Änderungen können einzeln von anderen Ansichten festgestellt werden.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:enableAutoUpdate"><apiName>enableAutoUpdate</apiName><shortdesc>
      Aktiviert die automatische Aktualisierung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Aktiviert die automatische Aktualisierung. Weitere Informationen finden Sie unter <codeph>disableAutoUpdate</codeph>.
	 
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ICollectionView/disableAutoUpdate()"><linktext>disableAutoUpdate()</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:itemUpdated"><apiName>itemUpdated</apiName><shortdesc>
      Informiert die Ansicht darüber, dass ein Element aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Element in der Ansicht, die aktualisiert wurde.
	 
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der Name der Eigenschaft, die aktualisiert wurde.
	 
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der alte Wert dieser Eigenschaft. (Wenn die Eigenschaft „null“ war, kann dies der alte Wert des Elements sein.)
	 
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Der neue Wert dieser Eigenschaft. (Wenn die Eigenschaft „null“ war, muss der Wert nicht angegeben werden, da davon ausgegangen wird, dass das Element den neuen Wert hat.)
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Informiert die Ansicht darüber, dass ein Element aktualisiert wurde. Diese Methode ist nützlich, wenn der Inhalt der Ansicht <codeph>IPropertyChangeNotifier</codeph> nicht implementiert. Wenn der Aufruf dieser Methode einen <codeph>property</codeph>-Parameter enthält, kann die Ansicht möglicherweise ihre Benachrichtigungsfunktion optimieren. Andernfalls wird möglicherweise einfach die gesamte Ansicht aktualisiert.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link><link href="mx.core.xml#IPropertyChangeNotifier"><linktext>mx.core.IPropertyChangeNotifier</linktext></link><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:ICollectionView:mx.collections:ICollectionView:refresh"><apiName>refresh</apiName><shortdesc>
      Wendet die Sortierung und den Filter auf die Ansicht an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn refresh() abgeschlossen wurde, <codeph>false</codeph>, wenn refresh() nicht abgeschlossen wurde.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Wendet die Sortierung und den Filter auf die Ansicht an. Die ICollectionView erkennt Änderungen einer Gruppe nicht automatisch. Daher müssen Sie die <codeph>refresh()</codeph>-Methode aufrufen, um die Ansicht nach dem Einrichten der Eigenschaften <codeph>sort</codeph> oder <codeph>filterFunction</codeph> zu aktualisieren. Wenn Ihre ICollectionView-Implementierung auch die IMXMLObject-Schnittstelle implementiert, sollten Sie die <codeph>refresh()</codeph>-Methode von der <codeph>initialized()</codeph>-Methode aus aufrufen.
	 
      <p>Gibt <codeph>true</codeph> zurück, wenn die Aktualisierung erfolgreich war und <codeph>false</codeph>, wenn die Sortierung noch nicht abgeschlossen wurde (d. h. es stehen noch Elemente aus). Ein Client der Ansicht sollte auf ein CollectionEvent-Ereignis mit der Eigenschaft <codeph>CollectionEventKind.REFRESH</codeph> <codeph>kind</codeph> warten, um sicherzustellen, dass der <codeph>refresh()</codeph>-Vorgang abgeschlossen wurde.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:filterFunction:get"><apiName>filterFunction</apiName><shortdesc>
      Eine Funktion, die von der Ansicht verwendet wird, um Elemente zu entfernen, die die Funktionskriterien nicht erfüllen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Eine Funktion, die von der Ansicht verwendet wird, um Elemente zu entfernen, die die Funktionskriterien nicht erfüllen. Eine filterFunction muss folgende Signatur haben:
	 
	  <pre>f(item:Object):Boolean</pre>
	 
	  Dabei ist der Rückgabewert <codeph>true</codeph>, wenn das angegebene Element in der Ansicht beibehalten werden soll.
	 
      <p>Wenn ein Filter nicht unterstützt wird, gibt Flex einen Fehler aus, wenn auf diese Eigenschaft zugegriffen wird. Sie müssen <codeph>refresh()</codeph> aufrufen, nachdem Sie die <codeph>filterFunction</codeph>-Eigenschaft zum Aktualisieren der Ansicht eingerichtet haben.</p>
	 
 	  <p>Hinweis: Die Flex-Implementierungen der ICollectionView rufen alle Elemente von einer Remote-Position ab, bevor die Filterfunktion ausgeführt wird. Wenn Sie Paging verwenden, wenden Sie den Filter auf die Remote-Sammlung an, bevor Sie die Daten abrufen.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ICollectionView/refresh()"><linktext>aktualisieren()</linktext></link></related-links></apiValue><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:length:get"><apiName>length</apiName><shortdesc>
      Die Anzahl der Elemente in dieser Ansicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Die Anzahl der Elemente in dieser Ansicht. 0 bedeutet keine Elemente, -1 bedeutet, dass die Länge unbekannt ist.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:ICollectionView:mx.collections:ICollectionView:sort:get"><apiName>sort</apiName><shortdesc>
      Das Sort-Objekt, das auf die ICollectionView angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.collections:Sort</apiValueClassifier></apiValueDef><apiDesc>
      Das Sort-Objekt, das auf die ICollectionView angewendet wird. Durch das Einrichten der Sortierung wird nicht automatisch die Ansicht aktualisiert. Sie müssen die <codeph>refresh()</codeph>-Methode nach dem Einrichten dieser Eigenschaft aufrufen. Wenn die Sortierung nicht unterstützt wird, gibt Flex einen Fehler aus, wenn auf diese Eigenschaft zugegriffen wird.
	 
	  <p>Hinweis: Die Flex-Implementierungen der ICollectionView-Schnittstelle rufen alle Elemente von einer Remote-Position ab, bevor eine Sortierung durchgeführt wird. Wenn Sie bei einer sortierten Liste Paging verwenden, wenden Sie die Sortierung auf die Remote-Sammlung an, bevor Sie die Daten abrufen.</p>
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ICollectionView/refresh()"><linktext>aktualisieren()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.collections:IViewCursor"><apiName>IViewCursor</apiName><shortdesc>
  Definiert die Schnittstelle zur bidirektionalen Aufzählung einer hierarchischen Sammlungsansicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Definiert die Schnittstelle zur bidirektionalen Aufzählung einer hierarchischen Sammlungsansicht. Dieser Cursor stellt Such- und Lesezeichenfunktionen sowie die Änderungsmethoden „insert“ und „remove“ bereit. Wenn ein Cursor aus einer Ansicht abgerufen wird (normalerweise mit der <codeph>createCursor()</codeph>-Methode von ICollectionView) sollte der Wert der <codeph>current</codeph>-Eigenschaft das erste Element in der Ansicht sein, außer die Ansicht ist leer.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.collections:IViewCursor_mx.events.FlexEvent.CURSOR_UPDATE_cursorUpdate"><apiName>cursorUpdate</apiName><shortdesc>
  Wird ausgelöst, wenn die Cursorposition aktualisiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CURSOR_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Wird ausgelöst, wenn die Cursorposition aktualisiert wird.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findAny"><apiName>findAny</apiName><shortdesc>
      Sucht in der Sammlung ein Element mit den angegebenen Eigenschaften und platziert den Cursor auf diesem Element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Wenn alle Daten lokal sind, gibt diese Methode <codeph>true</codeph> zurück, falls das Element gefunden werden kann, andernfalls <codeph>false</codeph>. 
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Die Suchkriterien. Die Werte im Objekt müssen als Name/Wert-Paare konfiguriert sein, wie in einem assoziativen Array (oder sie sind das zu suchende Objekt selbst). Die Werte der angegebenen Namen müssen Eigenschaften entsprechen, die für die Sortierung angegeben wurden. Beispiel: Wenn die Eigenschaften <codeph> x</codeph>, <codeph>y</codeph> und <codeph>z</codeph> in der aktuellen Sortierung enthalten sind, sollten die angegebenen Werte <codeph>{x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph> sein.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sucht in der Sammlung ein Element mit den angegebenen Eigenschaften und platziert den Cursor auf dieses Element. Wenn das Element nicht gefunden wird, ändert sich die Cursorposition nicht.
     
      <p>Die <codeph>findAny()</codeph>-Methode kann nur für sortierte Ansichten aufgerufen werden. Wenn die Ansicht nicht sortiert ist, wird ein <codeph>CursorError</codeph> ausgegeben.</p>
      
      <p>Wenn die zugehörige Sammlung remote ist und nicht alle Elemente lokal zwischengespeichert wurden, beginnt diese Methode einen asynchronen Abruf aus der Remote-Sammlung. Wenn bereits ein Abruf ausgeführt wird, wartet diese Methode, bis der Abruf beendet wurde, bevor eine weitere Abrufanforderung gestellt wird.</p>
     
      <p>Wenn mehrere Elemente die Suchkriterien erfüllen, ist das gefundene Elemente nicht-deterministisch. Wenn es wichtig ist, das erste oder letzte Vorkommen eines Elements in einem nicht eindeutigen Index zu finden, verwenden Sie die Methode <codeph>findFirst()</codeph> oder <codeph>findLast()</codeph>.</p>
     
      <p>Wenn die Daten nicht lokal sind und ein asynchroner Vorgang ausgeführt werden muss, wird ein ItemPendingError ausgegeben.</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findFirst()"><linktext>findFirst()</linktext></link><link href="mx.collections.xml#IViewCursor/findLast()"><linktext>findLast()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findFirst"><apiName>findFirst</apiName><shortdesc>
      Sucht in der Sammlung das erste Element mit den angegebenen Eigenschaften und platziert den Cursor auf diesem Element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Wenn alle Daten lokal sind, gibt diese Methode <codeph>true</codeph> zurück, falls das Element gefunden werden kann, andernfalls <codeph>false</codeph>. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Die Suchkriterien. Die Werte im Objekt müssen als Name/Wert-Paare konfiguriert sein, wie in einem assoziativen Array (oder sie sind das zu suchende Objekt selbst). Die Werte der angegebenen Namen müssen Eigenschaften entsprechen, die für die Sortierung angegeben wurden. Beispiel: Wenn die Eigenschaften <codeph> x</codeph>, <codeph>y</codeph> und <codeph>z</codeph> in der aktuellen Sortierung enthalten sind, sollten die angegebenen Werte <codeph>{x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph> sein.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sucht in der Sammlung das erste Element mit den angegebenen Eigenschaften und platziert den Cursor auf dieses Element. Wenn das Element nicht gefunden wird, ändert sich die Cursorposition nicht.
     
      <p>Die <codeph>findFirst()</codeph>-Methode kann nur für sortierte Ansichten aufgerufen werden. Wenn die Ansicht nicht sortiert ist, wird ein <codeph>CursorError</codeph> ausgegeben.</p>
      
      <p>Wenn die zugehörige Sammlung remote ist und nicht alle Elemente lokal zwischengespeichert wurden, beginnt diese Methode einen asynchronen Abruf aus der Remote-Sammlung. Wenn bereits ein Abruf ausgeführt wird, wartet diese Methode, bis der Abruf beendet wurde, bevor eine weitere Abrufanforderung gestellt wird.</p>
     
      <p>Wenn es nicht wichtig ist, das erste Vorkommen eines Elements in einem nicht eindeutigen Index zu finden, verwenden Sie die Methode <codeph>findAny()</codeph>, die möglicherweise ein wenig schneller ist als die <codeph>findFirst()</codeph>-Methode.</p>
     
      <p>Wenn die Daten nicht lokal sind und ein asynchroner Vorgang ausgeführt werden muss, wird ein ItemPendingError ausgegeben.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findAny()"><linktext>findAny()</linktext></link><link href="mx.collections.xml#IViewCursor/findLast()"><linktext>findLast()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:findLast"><apiName>findLast</apiName><shortdesc>
      Sucht in der Sammlung das letzte Element mit den angegebenen Eigenschaften und platziert den Cursor auf diesem Element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Wenn alle Daten lokal sind, gibt diese Methode <codeph>true</codeph> zurück, falls das Element gefunden werden kann, andernfalls <codeph>false</codeph>. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>values</apiItemName><apiType value="Object"/><apiDesc>Die Suchkriterien. Die Werte im Objekt müssen als Name/Wert-Paare konfiguriert sein, wie in einem assoziativen Array (oder sie sind das zu suchende Objekt selbst). Die Werte der angegebenen Namen müssen Eigenschaften entsprechen, die für die Sortierung angegeben wurden. Beispiel: Wenn die Eigenschaften <codeph> x</codeph>, <codeph>y</codeph> und <codeph>z</codeph> in der aktuellen Sortierung enthalten sind, sollten die angegebenen Werte <codeph>{x: <i>x-value</i>, y: <i>y-value</i>, z: <i>z-value</i>}</codeph> sein.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sucht in der Sammlung das letzte Element mit den angegebenen Eigenschaften und platziert den Cursor auf diesem Element. Wenn das Element nicht gefunden wird, ändert sich die Cursorposition nicht.
     
      <p>Die <codeph>findLast()</codeph>-Methode kann nur für sortierte Ansichten aufgerufen werden. Wenn die Ansicht nicht sortiert ist, wird ein <codeph>CursorError</codeph> ausgegeben.</p>
      
      <p>Wenn die zugehörige Sammlung remote ist und nicht alle Elemente lokal zwischengespeichert wurden, beginnt diese Methode einen asynchronen Abruf aus der Remote-Sammlung. Wenn bereits ein Abruf ausgeführt wird, wartet diese Methode, bis der Abruf beendet wurde, bevor eine weitere Abrufanforderung gestellt wird.</p>
     
      <p>Wenn es nicht wichtig ist, das letzte Vorkommen eines Elements in einem nicht eindeutigen Index zu finden, verwenden Sie die Methode <codeph>findAny()</codeph>, die möglicherweise ein wenig schneller ist.</p>
     
      <p>Wenn die Daten nicht lokal sind und ein asynchroner Vorgang ausgeführt werden muss, wird ein ItemPendingError ausgegeben.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/findAny()"><linktext>findAny()</linktext></link><link href="mx.collections.xml#IViewCursor/findFirst()"><linktext>findFirst()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:insert"><apiName>insert</apiName><shortdesc>
      Fügt das angegebene Element vor der aktuellen Cursor-Position ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Das Element, das vor der aktuellen Cursor-Position eingefügt werden soll.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fügt das angegebene Element vor der aktuellen Cursor-Position ein. Wenn der Cursor <codeph>afterLast</codeph> ist, erfolgt die Einfügung am Ende der Ansicht. Wenn der Cursor bei einer nicht leeren Ansicht <codeph>beforeFirst</codeph> ist, wird ein Fehler ausgegeben.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:moveNext"><apiName>moveNext</apiName><shortdesc>
      Verschiebt den Cursor auf das nächste Element in der Sammlung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn noch in der Liste, <codeph>false</codeph>, wenn <codeph>current</codeph> ursprünglich den Wert <codeph>afterLast</codeph> hatte oder diesen Wert aktuell hat.
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Verschiebt den Cursor auf das nächste Element in der Sammlung. Bei Erfolg wird die Eigenschaft <codeph>current</codeph> aktualisiert, um das Objekt an dieser neuen Position zu referenzieren. Gibt <codeph>true</codeph> zurück, wenn die resultierende Eigenschaft <codeph>current</codeph> gültig ist, andernfalls <codeph>false</codeph> (der Eigenschaftswert ist <codeph>afterLast</codeph>).
     
      <p>Wenn die Daten nicht lokal sind und ein asynchroner Vorgang ausgeführt werden muss, wird ein ItemPendingError ausgegeben. Weitere Informationen zur Verwendung von ItemPendingError finden Sie in der ItemPendingError-Dokumentation und der Dokumentation zu den Sammlungen.</p>
     
      </apiDesc><example>
      <pre>
      var myArrayCollection:ICollectionView = new ArrayCollection([ "Bobby", "Mark", "Trevor", "Jacey", "Tyler" ]);
      var cursor:IViewCursor = myArrayCollection.createCursor();
      while (!cursor.afterLast)
      {
          trace(cursor.current);
          cursor.moveNext();
      }
      </pre>
      
      </example></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>current</linktext></link><link href="mx.collections.xml#IViewCursor/movePrevious()"><linktext>movePrevious()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:movePrevious"><apiName>movePrevious</apiName><shortdesc>
      Verschiebt den Cursor auf das vorherige Element in der Sammlung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, wenn noch in der Liste, <codeph>false</codeph>, wenn <codeph>current</codeph> ursprünglich den Wert <codeph>beforeFirst</codeph> hatte oder diesen Wert aktuell hat. Beispiel:
      <pre>
      var myArrayCollection:ICollectionView = new ArrayCollection([ "Bobby", "Mark", "Trevor", "Jacey", "Tyler" ]);
      var cursor:IViewCursor = myArrayCollection.createCursor();
      cursor.seek(CursorBookmark.last);
      while (!cursor.beforeFirst)
      {
          trace(current);
          cursor.movePrevious();
      }
      </pre>
     
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Verschiebt den Cursor auf das vorherige Element in der Sammlung. Bei Erfolg wird die Eigenschaft <codeph>current</codeph> aktualisiert, um das Objekt an dieser neuen Position zu referenzieren. Gibt <codeph>true</codeph> zurück, wenn die resultierende Eigenschaft <codeph>current</codeph> gültig ist, andernfalls <codeph>false</codeph> (der Eigenschaftswert ist <codeph>beforeFirst</codeph>).
     
      <p>Wenn die Daten nicht lokal sind und ein asynchroner Vorgang ausgeführt werden muss, wird ein ItemPendingError ausgegeben. Weitere Informationen zur Verwendung von ItemPendingError finden Sie in der ItemPendingError-Dokumentation und der Dokumentation zu den Sammlungen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>current</linktext></link><link href="mx.collections.xml#IViewCursor/moveNext()"><linktext>moveNext()</linktext></link><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:remove"><apiName>remove</apiName><shortdesc>
      Entfernt das aktuelle Elemente und gibt es zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das entfernte Element.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Entfernt das aktuelle Elemente und gibt es zurück. Wenn die Cursorposition <codeph>beforeFirst</codeph> oder <codeph>afterLast</codeph> ist, gibt die Methode einen CursorError aus. Wenn Sie ein anderes Element als das letzte Element entfernen, wird der Cursor zum nächsten Element verschoben. Wenn Sie das letzte Element entfernen, befindet sich der Cursor beim AFTER_LAST-Lesezeichen.
      
      <p>Wenn die Daten nach dem entfernten Element nicht lokal sind und ein asynchroner Vorgang ausgeführt werden muss, wird ein ItemPendingError ausgegeben. Weitere Informationen zur Verwendung von ItemPendingError finden Sie in der ItemPendingError-Dokumentation und der Dokumentation zu den Sammlungen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiOperation id="mx.collections:IViewCursor:mx.collections:IViewCursor:seek"><apiName>seek</apiName><shortdesc>
      Verschiebt den Cursor an eine Position an einem Offset vom angegebenen Lesezeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bookmark</apiItemName><apiOperationClassifier>mx.collections:CursorBookmark</apiOperationClassifier><apiDesc><codeph>CursorBookmark</codeph>-Verweis auf Markeninformationen, die eine Neuplatzierung an einer bestimmten Position ermöglichen. Sie können diesen Parameter auf den Wert setzen, der von der <codeph>bookmark</codeph>-Eigenschaft zurückgegeben wurde, oder auf einen der folgenden konstanten Lesezeichenwerte:
      <ul>
        <li><codeph>CursorBookmark.FIRST</codeph> - Vom Beginn der Sammlung aus (erstes Element) suchen</li>
        <li><codeph>CursorBookmark.CURRENT</codeph> - Von der aktuellen Position der Sammlung aus suchen</li>
        <li><codeph>CursorBookmark.LAST</codeph> - Vom Ende der Sammlung aus (letztes Element) suchen</li>
      </ul>
     
      </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Gibt an, wie weit vom angegebenen Lesezeichen gesucht werden soll. Wenn die angegebene Zahl negativ ist, versucht der Cursor, sich vor das angegebene Lesezeichen zu platzieren. Wenn der angegebene Offset sich nach dem Ende der Sammlung befindet, wird der Cursor hinter das Ende platziert, an die Position <codeph>beforeFirst</codeph> oder <codeph>afterLast</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>prefetch</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>Wird für Remote-Daten verwendet. Gibt eine Priorität an, die Sammlung in einer angegebene Richtung zu durchlaufen, wenn der Suchvorgang abgeschlossen wurde. Dies verringert die Anzahl der erforderlichen Netzwerk-Roundtrips bei einer Suche. Wenn die Durchlaufrichtung zum Zeitpunkt der Anforderung bekannt ist, kann die geeignete Datenmenge zurückgegeben werden, bevor die Anforderung die Daten durchläuft.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Verschiebt den Cursor an eine Position an einem Offset vom angegebenen Lesezeichen. Der Offset kann negativ sein. In diesem Fall wird der Cursor um die in <codeph>offset</codeph> angegebene Anzahl von Elementen vor dem angegebenen Lesezeichen platziert.
     
      <p>Wenn die zugehörige Sammlung remote ist und nicht alle Elemente lokal zwischengespeichert wurden, beginnt diese Methode einen asynchronen Abruf aus der Remote-Sammlung.</p>
     
      <p>Wenn die Daten nicht lokal sind und ein asynchroner Vorgang ausgeführt werden muss, wird ein ItemPendingError ausgegeben. Weitere Informationen zur Verwendung von ItemPendingError finden Sie in der ItemPendingError-Dokumentation und der Dokumentation zu den Sammlungen.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link></related-links></apiOperation><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:afterLast:get"><apiName>afterLast</apiName><shortdesc>
      Wenn der Cursor sich hinter dem letzten Element in der Ansicht befindet, ist diese Eigenschaft „true“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Wenn der Cursor sich hinter dem letzten Element in der Ansicht befindet, ist diese Eigenschaft <codeph>true</codeph>. Wenn die ICollectionView leer ist (length == 0), ist diese Eigenschaft <codeph>true</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:beforeFirst:get"><apiName>beforeFirst</apiName><shortdesc>
      Wenn der Cursor sich vor dem ersten Element in der Ansicht befindet, ist diese Eigenschaft „true“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Wenn der Cursor sich vor dem ersten Element in der Ansicht befindet, ist diese Eigenschaft <codeph>true</codeph>. Wenn die ICollectionView leer ist (length == 0), ist diese Eigenschaft <codeph>true</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:bookmark:get"><apiName>bookmark</apiName><shortdesc>
      Bietet Zugriff auf ein Lesezeichen, das dem von der aktuellen Eigenschaft zurückgegebenen Element entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Bietet Zugriff auf ein Lesezeichen, das dem von der <codeph>current</codeph>-Eigenschaft zurückgegebenen Element entspricht. Das Lesezeichen kann verwendet werden, um den Cursor an ein zuvor besuchtes Element oder eine Position relativ zu diesem Element zu verschieben. (Weitere Informationen finden Sie unter der <codeph>seek()</codeph>-Methode.)
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#IViewCursor/current"><linktext>current</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>seek()</linktext></link></related-links></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:current:get"><apiName>current</apiName><shortdesc>
      Bietet Zugriff auf das Objekt an der Position in der Quellsammlung, die von diesem Cursor referenziert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Bietet Zugriff auf das Objekt an der Position in der Quellsammlung, die von diesem Cursor referenziert wird. Wenn der Cursor sich hinter dem Ende der Sammlung befindet (<codeph>beforeFirst</codeph>, <codeph>afterLast</codeph>) wird <codeph>null</codeph> zurückgegeben.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#IViewCursor/moveNext()"><linktext>moveNext()</linktext></link><link href="mx.collections.xml#IViewCursor/movePrevious()"><linktext>movePrevious()</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>seek()</linktext></link><link href="mx.collections.xml#IViewCursor/beforeFirst"><linktext>beforeFirst</linktext></link><link href="mx.collections.xml#IViewCursor/afterLast"><linktext>afterLast</linktext></link></related-links></apiValue><apiValue id="mx.collections:IViewCursor:mx.collections:IViewCursor:view:get"><apiName>view</apiName><shortdesc>
      Ein Verweis auf die ICollectionView, der dieser Cursor zugeordnet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:ICollectionView</apiValueClassifier></apiValueDef><apiDesc>
      Ein Verweis auf die ICollectionView, der dieser Cursor zugeordnet ist.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:SortField"><apiName>SortField</apiName><shortdesc>
  Stellt die Sortierinformationen bereit, die erforderlich sind, um eine Sortierung eines Felds oder einer Eigenschaft in einer vorhandenen Ansicht durchzuführen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:SortField&gt;</code> tag has the following attributes:</p>
 
  <pre>
  &lt;mx:SortField
  <b>Properties</b>
  caseInsensitive="false"
  compareFunction="<em>Internal compare function</em>"
  descending="false"
  name="null"
  numeric="null"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Stellt die Sortierinformationen bereit, die erforderlich sind, um eine Sortierung eines Felds oder einer Eigenschaft in einer vorhandenen Ansicht durchzuführen. Normalerweise wird die Sortierung für Sammlungen komplexer Elemente definiert, also für Elemente, in denen die Sortierung anhand von Eigenschaften dieser Objekte durchgeführt wird. Beispiel:
 
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem({first:"Anders", last:"Dickerson"});
     var sort:Sort = new Sort();
     sort.fields = [new SortField("first", true)];
     col.sort = sort;
  </codeph></pre>
 
  Es gibt Situationen, in denen die Sammlung einfache Elemente enthält, wie <codeph>String</codeph>, <codeph>Date</codeph>, <codeph>Boolean</codeph> usw. In diesem Fall wird die Sortierung direkt auf den einfachen Datentyp angewendet. Bei der Erstellung einer Sortierung für diese Situation ist nur ein einzelnes Sortierfeld erforderlich, für das <codeph>name</codeph> nicht angegeben sein sollte. Beispiel:
 
  <pre><codeph>
     var col:ICollectionView = new ArrayCollection();
     col.addItem("California");
     col.addItem("Arizona");
     var sort:Sort = new Sort();
     sort.fields = [new SortField(null, true)];
     col.sort = sort;
  </codeph></pre>
 
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.collections:SortField:SortField"><apiName>SortField</apiName><shortdesc>
      Konstruktor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Der Name der Eigenschaft, die dieses Feld für den Vergleich verwendet. Wenn das Objekt ein einfacher Typ ist, übergeben Sie <codeph>null</codeph>.
      </apiDesc></apiParam><apiParam><apiItemName>caseInsensitive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Beim Sortieren von Strings wird der Komparator angewiesen, ob die Schreibweise der Werte ignoriert werden soll.
      </apiDesc></apiParam><apiParam><apiItemName>descending</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Weist den Komparator an, ob Elemente in absteigender Reihenfolge angeordnet werden sollen.
      </apiDesc></apiParam><apiParam><apiItemName>numeric</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Weist den Komparator an, ob Sortierelemente als Zahlenwerte verglichen werden sollen, anstatt alphabetisch.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Konstruktor.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:SortField:reverse"><apiName>reverse</apiName><shortdesc>
     Die Kriterien für dieses Sortierfeld umkehren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Die Kriterien für dieses Sortierfeld umkehren. Wenn das Feld z. B. in absteigender Reihenfolge sortiert war, wird es in aufsteigender Reihenfolge sortiert.
     
     <p>Hinweis: Eine ICollectionView wird nicht automatisch aktualisiert, wenn die SortFields geändert werden. Rufen Sie zur Aktualisierung der Ansicht ihre <codeph>refresh()</codeph>-Methode auf.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:SortField:caseInsensitive:get"><apiName>caseInsensitive</apiName><shortdesc>
      Gibt an, ob die Sortierung für dieses Feld zwischen Groß- und Kleinschreibung unterscheiden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, ob die Sortierung für dieses Feld zwischen Groß- und Kleinschreibung unterscheiden soll.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:compareFunction:get"><apiName>compareFunction</apiName><shortdesc>
      Die Funktion, die zwei Elemente bei der Sortierung von Elementen für die zugehörige Sammlung vergleicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Die Funktion, die zwei Elemente bei der Sortierung von Elementen für die zugehörige Sammlung vergleicht. Wenn Sie die <codeph>compareFunction</codeph>-Eigenschaft in einem Sort-Objekt angeben, ignoriert Flex alle <codeph>compareFunction</codeph>-Eigenschaften der SortField-Objekte des Sort-Objekts.
      <p>Die Vergleichsfunktion muss folgende Signatur haben:</p>
     
      <p><codeph>function myCompare(a:Object, b:Object):int</codeph></p>
     
      <p>Diese Funktion muss folgende Werte zurückgeben:</p>
	 
	   <ul>
            <li>-1, wenn <codeph>a</codeph> in der sortierten Sequenz vor <codeph>b</codeph> erscheint.</li>
            <li>0, wenn <codeph>a</codeph> gleich <codeph>b</codeph> ist.</li>
            <li>-1, wenn <codeph>a</codeph> in der sortierten Sequenz nach <codeph>b</codeph> erscheint.</li>
      </ul>
     
      <p>Der Standardwert ist eine interne Vergleichsfunktion, die einen Vergleich von Strings, numerischen Werten oder Datumsangaben in aufsteigender oder absteigender Reihenfolge durchführen kann, wobei die Stringvergleiche zwischen Groß- und Kleinschreibung unterscheiden können. Geben Sie Ihre eigene Funktion nur an, wenn ein benutzerdefinierter Vergleichsalgorithmus erforderlich ist. Dies ist normalerweise nur der Fall, wenn ein berechnetes Feld in einer Anzeige verwendet wird.</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:descending:get"><apiName>descending</apiName><shortdesc>
      Gibt an, ob dieses Feld in absteigender Reihenfolge sortiert werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Gibt an, ob dieses Feld in absteigender Reihenfolge sortiert werden soll.
     
      <p> Der Standardwert ist <codeph>false</codeph> (aufsteigend).</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:name:get"><apiName>name</apiName><shortdesc>
      Der Name des zu sortierenden Felds.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Der Name des zu sortierenden Felds.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:SortField:numeric:get"><apiName>numeric</apiName><shortdesc>
      Gibt an, dass der Komparator einen numerischen Vergleich verwendet, wenn das sortierte Feld numerische Werte (number/int/uint) oder Stringdarstellungen numerischer Werte enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Gibt an, dass der Komparator einen numerischen Vergleich verwendet, wenn das sortierte Feld numerische Werte (number/int/uint) oder Stringdarstellungen numerischer Werte enthält. Wenn diese Eigenschaft <codeph>false</codeph> ist, werden Felder mit Stringdarstellungen von Zahlen mithilfe eines Stringvergleichs sortiert, sodass 100 vor 99 kommt, da „1“ ein kleinerer Stringwert als „9“ ist. Wenn diese Eigenschaft <codeph>null</codeph> ist, wird das erste Datenelement geprüft, um festzustellen, ob es sich um eine Zahl oder einen String handelt, und die Sortierung wird basierend auf dieser Prüfung fortgesetzt
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.collections:CursorBookmark"><apiName>CursorBookmark</apiName><shortdesc>
  Fasst die Positionsaspekte eines Cursor in einer ICollectionView zusammen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Fasst die Positionsaspekte eines Cursors in einer <codeph>ICollectionView </codeph> zusammen. Lesezeichen werden verwendet, um einen Cursor an eine absolute Position innerhalb der <codeph>ICollectionView</codeph> zurückzuversetzen.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#IViewCursor/bookmark"><linktext>mx.collections.IViewCursor.bookmark</linktext></link><link href="mx.collections.xml#IViewCursor/seek()"><linktext>mx.collections.IViewCursor.seek()</linktext></link></related-links><apiConstructor id="mx.collections:CursorBookmark:CursorBookmark"><apiName>CursorBookmark</apiName><shortdesc>
      Erstellt eine neue Instanz eines Lesezeichens mit dem angegebenen Wert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiDesc>Der Wert dieses Lesezeichens.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Erstellt eine neue Instanz eines Lesezeichens mit dem angegebenen Wert.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.collections:CursorBookmark:getViewIndex"><apiName>getViewIndex</apiName><shortdesc>
      Ruft den ungefähren Index des Elements ab, der von diesem Lesezeichen in seiner Ansicht dargestellt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Index des Elements. Wenn das Element nicht in der aktuellen Ansicht enthalten ist, gibt diese Methode -1 zurück. Diese Methode gibt auch -1 zurück, wenn die auf dem Index basierende Position nicht möglich ist.
      
      </apiDesc><apiType value="int"/></apiReturn></apiOperationDef><apiDesc>
      Ruft den ungefähren Index des Elements ab, der von diesem Lesezeichen in seiner Ansicht dargestellt wird. Wenn das Element ausgelagert wurde, kann diese Methode einen ItemPendingError ausgeben.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.collections:CursorBookmark:CURRENT:get"><apiName>CURRENT</apiName><shortdesc>
      Ein Lesezeichen, das das aktuelle Element für den IViewCursor in einer ICollectionView darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Ein Lesezeichen, das das aktuelle Element für den <codeph>IViewCursor</codeph> in einer <codeph>ICollectionView</codeph> darstellt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:FIRST:get"><apiName>FIRST</apiName><shortdesc>
      Ein Lesezeichen, das das erste Element in einer ICollectionView darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Ein Lesezeichen, das das erste Element in einer <codeph>ICollectionView</codeph> darstellt.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:LAST:get"><apiName>LAST</apiName><shortdesc>
      Ein Lesezeichen, das das letzte Element in einer ICollectionView darstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      Ein Lesezeichen, das das letzte Element in einer <codeph>ICollectionView</codeph> darstellt. Wenn die Ansicht keine Elemente enthält, befindet sich der Cursor an diesem Lesezeichen.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.collections:CursorBookmark:value:get"><apiName>value</apiName><shortdesc>
      Die zugrunde liegende Markierungsdarstellung des Lesezeichens.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Die zugrunde liegende Markierungsdarstellung des Lesezeichens. Dieser Wert wird im Allgemeinen nur von der <codeph>IViewCursor</codeph>- oder <codeph>ICollectionView</codeph>-Implementierung verstanden.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>