<?xml version="1.0"?>
<apiPackage id="mx.controls"><apiName>mx.controls</apiName><apiDetail/><apiClassifier id="mx.controls:ProgressBarLabelPlacement"><apiName>ProgressBarLabelPlacement</apiName><shortdesc>
  La classe ProgressBarLabelPlacement définit les valeurs de la propriété labelPlacement de la classe ProgressBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ProgressBarLabelPlacement définit les valeurs de la propriété <codeph>labelPlacement</codeph> de la classe ProgressBar.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ProgressBar"><linktext>mx.controls.ProgressBar</linktext></link></related-links><apiValue id="mx.controls:ProgressBarLabelPlacement:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
	  Indique que l’étiquette doit être placée sous la barre de progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que l’étiquette doit être placée sous la barre de progression.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarLabelPlacement:CENTER"><apiName>CENTER</apiName><shortdesc>
	  Indique que l’étiquette doit être placée au centre de la barre de progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que l’étiquette doit être placée au centre de la barre de progression.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarLabelPlacement:LEFT"><apiName>LEFT</apiName><shortdesc>
	  Indique que l’étiquette doit être placée à gauche de la barre de progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que l’étiquette doit être placée à gauche de la barre de progression.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarLabelPlacement:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	  Indique que l’étiquette doit être placée à droite de la barre de progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que l’étiquette doit être placée à droite de la barre de progression.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarLabelPlacement:TOP"><apiName>TOP</apiName><shortdesc>
	  Indique que l’étiquette doit être placée au-dessus de la barre de progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Indique que l’étiquette doit être placée au-dessus de la barre de progression.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:TextArea"><apiName>TextArea</apiName><shortdesc>
  Le contrôle TextArea est un champ de texte multiligne présentant une bordure et des barres de défilement facultatives.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Alternative owner="mx.controls:TextArea" replacement="spark.components.TextArea" since="4.0">
	</Alternative><styles><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:TextArea" playerVersion="Flash9" type="uint">
<description>
  Couleur du composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:TextArea" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du composant et le bord supérieur de sa zone de contenu.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:TextArea" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du composant et le bord inférieur de sa zone de contenu.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:TextArea" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:TextArea" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:TextArea" playerVersion="Flash9" type="String">
<description>
  Indique quels coins du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:TextArea" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus.
  
  </description>
<default>0.4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TextArea&gt;</code> tag inherits the attributes
  of its superclass and adds the following attributes:</p>
 
  <pre>
  &lt;mx:TextArea
    <b>Properties</b>
    condenseWhite="false|true"
    data="undefined"
    displayAsPassword="false|true"
    editable="true|false"
    horizontalScrollPolicy="auto|on|off"
    horizontalScrollPosition="0"
    htmlText="null"
    imeMode="null"
    length="0"
    listData="null"
    maxChars="0"
    restrict="null"
    selectionBeginIndex="0"
    selectionEndIndex="0"
    styleSheet="null"
    text=""
    textHeight="<i>height of text</i>" [read-only]
    textWidth="<i>width of text</i>" [read-only]
    verticalScrollPolicy="auto|on|off"
    verticalScrollPosition="0"
    wordWrap="true|false"
    &nbsp;
    <b>Styles</b>
    disabledColor="0xAAB3B3"
    focusAlpha="0.5"
    focusRoundedCorners"tl tr bl br"
    paddingLeft="0""
    paddingRight="0""
    &nbsp;
    <b>Events</b>
    change="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:ScrollControlBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle TextArea est un champ de texte multiligne présentant une bordure et des barres de défilement facultatives. Le contrôle TextArea prend en charge les fonctionnalités de rendu HTML de Flash Player et AIR.
 
  <p>Si vous désactivez un contrôle TextArea, il affiche son contenu dans la couleur indiquée par le style <codeph>disabledColor</codeph>. Vous pouvez également définir un contrôle TextArea en lecture seule pour empêcher l’édition du texte. Pour masquer le texte de saisie en affichant les caractères sous forme d’astérisques, définissez la propriété <codeph>displayAsPassword</codeph> du contrôle TextArea.</p>
 
  <p>Le contrôle TextArea possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>largeur : 160 pixels ; hauteur : 44 pixels</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 par 10000 pixels</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TextAreaExample.mxml"><swfblock conref="examples/TextAreaExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Label"><linktext>mx.controls.Label</linktext></link><link href="mx.controls.xml#Text"><linktext>mx.controls.Text</linktext></link><link href="mx.controls.xml#TextInput"><linktext>mx.controls.TextInput</linktext></link><link href="mx.controls.xml#RichTextEditor"><linktext>mx.controls.RichTextEditor</linktext></link><link href="mx.controls.textClasses.xml#TextRange"><linktext>mx.controls.textClasses.TextRange</linktext></link></related-links><adobeApiEvent id="mx.controls:TextArea_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
  Distribué lorsque l’utilisateur saisit, supprime ou colle du texte dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur saisit, supprime ou colle du texte dans le contrôle. Aucun événement n’est distribué lorsque l’utilisateur appuie sur la touche Suppr ou sur la touche Retour arrière.
 
  <p>Même si la valeur par défaut de la propriété <codeph>TextEvent.bubbles</codeph> est <codeph>true</codeph>, ce contrôle distribue l’événement avec la propriété <codeph>TextEvent.bubbles</codeph> définie sur <codeph>false</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextArea_flash.events.TextEvent.LINK_link"><apiName>link</apiName><shortdesc> 
  Distribué lorsqu’un utilisateur clique sur un hyperlien dans un texte défini par la propriété htmlText, dont l’URL commence par « event: ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.LINK</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
  Distribué lorsqu’un utilisateur clique sur un hyperlien dans un texte défini par la propriété <codeph>htmlTexte</codeph>, dont l’URL commence par <codeph>"event:"</codeph>. La partie de l’URL qui suit <codeph>"event:"</codeph> est placée dans la propriété text de l’objet d’événement <codeph>link</codeph>.
 
  <p>Lorsque vous gérez l’événement <codeph>link</codeph>, l’hyperlien n’est pas automatiquement exécuté. Vous devez l’exécuter depuis votre gestionnaire d’événements. Vous utilisez en général la méthode <codeph>navigateToURL()</codeph> pour exécuter l’hyperlien. Cela permet de modifier l’hyperlien, ou même de l’empêcher d’avoir lieu, dans votre application. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextArea_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
 
  <p>Lorsque vous utilisez un composant comme rendu d’élément, la propriété <codeph>data</codeph> contient les données à afficher. Vous pouvez écouter cet événement et mettre à jour le composant lorsque la propriété <codeph>data</codeph> change.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextArea_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque le texte du contrôle TextArea change du fait d’une saisie de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le texte du contrôle TextArea change du fait d’une saisie de l’utilisateur. Cet événement ne se produit pas si vous utilisez la liaison de données ou le code ActionScript pour modifier le texte.
 
  <p>Même si la valeur par défaut de la propriété <codeph>Event.bubbles</codeph> est <codeph>true</codeph>, ce contrôle distribue l’événement avec la propriété <codeph>Event.bubbles</codeph> définie sur <codeph>false</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:TextArea:TextArea"><apiName>TextArea</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:TextArea:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc>
      Renvoie un objet TextLineMetrics doté d’informations sur la position du texte et des mesures pour une ligne de texte du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet contenant des informations sur la position du texte et les mesures pour la ligne de texte spécifiée du contrôle.
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/><apiDesc>Index de base zéro de la ligne pour laquelle vous récupérez les mesures. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie un objet TextLineMetrics doté d’informations sur la position du texte et des mesures pour une ligne de texte du contrôle. Le composant doit être validé pour obtenir un nombre correct. Si vous définissez la propriété <codeph>text</codeph> ou <codeph>htmlText</codeph>, puis appelez immédiatement la méthode <codeph>getLineMetrics()</codeph>, vous risquez de recevoir une valeur incorrecte. Vous devez soit attendre la validation du composant, soit appeler la méthode <codeph>validateNow()</codeph>. Ce comportement est différent de celui de la classe flash.text.TextField, qui met immédiatement la valeur à jour.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:TextArea:setSelection"><apiName>setSelection</apiName><shortdesc>
      Sélectionne le texte dans la plage spécifiée par les paramètres.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiDesc>Index de base zéro du premier caractère de la sélection (c’est-à-dire que le premier caractère est 0, le deuxième est 1, etc).
     
      </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiDesc>Index de base zéro de la position <i>suivant</i> le dernier caractère dans la selection (équivalent à l’index de base un du dernier caractère). Si le paramètre est 5, le dernier caractère de la sélection, par exemple, est le cinquième caractère. Lorsque le contrôle TextArea reçoit le focus, la sélection est visible si les propriétés <codeph>selectionBeginIndex</codeph> et <codeph>selectionEndIndex</codeph> sont définies toutes les deux.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Sélectionne le texte dans la plage spécifiée par les paramètres. Si le contrôle n’a pas le focus, la surbrillance de la sélection ne s’affichera pas tant que le contrôle n’aura pas récupéré le focus. De même, si le focus est obtenu en cliquant sur un contrôle, toute sélection précédente est perdue. Si les deux valeurs de paramètre sont identiques, la nouvelle sélection est un signe d’insertion.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:TextArea:protected:textField"><apiName>textField</apiName><shortdesc>
      Objet UITextField interne qui effectue le rendu du texte de ce contrôle TextArea.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      Objet UITextField interne qui effectue le rendu du texte de ce contrôle TextArea.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc>
      Indique si les espaces blancs supplémentaires (espaces, sauts de ligne, etc.) doivent être supprimés dans un contrôle TextArea contenant du texte HTML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si les espaces blancs supplémentaires (espaces, sauts de ligne, etc.) doivent être supprimés dans un contrôle TextArea contenant du texte HTML.
      
      <p>La propriété <codeph>condenseWhite</codeph> n’affecte que le texte défini avec la propriété <codeph>htmlText</codeph>, pas la propriété <codeph>text</codeph>. Si vous définissez du texte avec la propriété <codeph>text</codeph>, la propriété <codeph>condenseWhite</codeph> est ignorée.</p>
     
      <p>Si vous définissez la propriété <codeph>condenseWhite</codeph> sur <codeph>true</codeph>, vous devez utiliser les commandes HTML classiques, telles que <codeph>&lt;br></codeph> et <codeph>&lt;p></codeph>, pour placer des sauts de ligne dans le champ de texte.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:data:get"><apiName>data</apiName><shortdesc>
      Permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
     
      <p>Lorsque vous utilisez le contrôle comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex écrit automatiquement la valeur actuelle de l’élément dans la propriété <codeph>text</codeph> de ce contrôle.</p>
     
      <p>Vous ne pouvez pas définir cette propriété dans MXML.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc>
      Indique si ce contrôle est utilisé pour entrer des mots de passe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3177
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue><apiTipTexts><apiTipText>Indique si le caractère ’ doit être affiché à la place des caractères réels
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Indique si ce contrôle est utilisé pour entrer des mots de passe. Si la valeur est <codeph>true</codeph>, le champ n’affiche pas le texte entré. En revanche, chaque caractère de texte entré dans le contrôle s’affiche sous la forme du caractère « * ».
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:editable:get"><apiName>editable</apiName><shortdesc>
      Indique si l’utilisateur est autorisé à modifier le texte dans ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3176
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true;
     
      </apiDefaultValue><apiTipTexts><apiTipText>Spécifie si le composant peut être modifié ou non
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Indique si l’utilisateur est autorisé à modifier le texte dans ce contrôle. Si la valeur est <codeph>true</codeph>, l’utilisateur peut modifier le texte.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      Indique si la barre de défilement horizontale est toujours active (ScrollPolicy.ON), toujours inactive (ScrollPolicy.OFF) ou si elle est activée lorsque cela est nécessaire (ScrollPolicy.AUTO).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si la barre de défilement horizontale est toujours active (<codeph>ScrollPolicy.ON</codeph>), toujours inactive (<codeph>ScrollPolicy.OFF</codeph>) ou si elle est activée lorsque cela est nécessaire (<codeph>ScrollPolicy.AUTO</codeph>).
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:htmlText:get"><apiName>htmlText</apiName><shortdesc>
      Spécifie le texte affiché par le contrôle TextArea, y compris la balise HTML définissant les styles de ce texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le texte affiché par le contrôle TextArea, y compris la balise HTML définissant les styles de ce texte. Lorsque vous spécifiez du texte HTML dans cette propriété, vous pouvez utiliser le sous-jeu de balises HTML pris en charge par le contrôle Flash TextField.
     
      <p>Lorsque vous définissez cette propriété, le marqueur HTML est appliqué après l’application des styles CSS pour l’occurrence TextArea. Lorsque vous obtenez cette propriété, le marqueur HTML inclut les styles CSS.</p>
      
      <p>Par exemple, si vous le définissez en tant que chaîne (par exemple <codeph>« Ceci est un exemple de marqueur &lt;b>bold&lt;/b> »</codeph>), le texte « Ceci est un exemple de marqueur <b>bold</b> » s’affiche dans le contrôle TextArea avec les styles CSS qui s’appliquent normalement. De plus, le terme « bold » (gras) s’affiche en gras à cause du marqueur <codeph>&lt;b></codeph>.</p>
     
      <p>Les marqueurs HTML utilisent des caractères comme &lt; et >, qui ont une signification particulière en langage XML (et par conséquent MXML). Ainsi, le code suivant n’est pas conforme pour la compilation :</p>
      
      <pre>
      &lt;mx:TextArea htmlText="This is an example of &lt;b>bold&lt;/b> markup"/>
      </pre>
      
      <p>Trois méthodes permettent de contourner ce problème.</p>
      
      <ul>
      
      <li>
      
      <p>Définissez la propriété <codeph>htmlText</codeph> dans une méthode ActionScript appelée comme gestionnaire <codeph>initialize</codeph> :</p>
      
      <pre>
      &lt;mx:TextArea id="myTextArea" initialize="myTextArea_initialize()"/>
      </pre>
      
      <p>dans laquelle la méthode <codeph>myTextArea_initialize</codeph> se trouve dans la section CDATA d’un script :</p>
      
      <pre>
      &lt;mx:Script>
      &lt;![CDATA[
      private function myTextArea_initialize():void {
          myTextArea.htmlText = "This is an example of &lt;b>bold&lt;/b> markup";
      }
      ]]&gt;
      &lt;/mx:Script>
      
      </pre>
      
      <p>Ceci est l’approche la plus simple, car le marqueur HTML reste facilement lisible. Notez que vous devez attribuer un <codeph>id</codeph> au contrôle TextArea afin de pouvoir vous y référer dans le gestionnaire <codeph>initialize</codeph>.</p>
      
      </li>
      
      <li>
      
      <p>Spécifiez la propriété <codeph>htmlText</codeph> en utilisant une balise enfant avec une section CDATA. Une section CDATA en langage XML contient des données de caractères pour lesquelles les caractères comme &lt; et > n’ont pas de signification particulière.</p>
      
      <pre>
      &lt;mx:TextArea>
          &lt;mx:htmlText>&lt;![CDATA[This is an example of &lt;b>bold&lt;/b> markup]]&gt;&lt;/mx:htmlText>
      &lt;mx:TextArea/>
      </pre>
      
      <p>Vous devez écrire la propriété <codeph>htmlText</codeph> en tant que balise enfant au lieu d’un attribut sur la balise <codeph>&lt;mx:TextArea></codeph>, car le langage XML n’autorise pas la section CDATA comme valeur d’attribut. Notez que le marqueur est lisible, mais la section CDATA rend cette approche plus compliquée.</p>
      
      </li>
      
      <li>
      
      <p>Utilisez un attribut<codeph>hmtlText</codeph>dont toutes les occurrences de caractères de marqueur HTML &lt; et > dans la valeur d’attribut sont écrites, au lieu d’utiliser les entités « XML » <codeph>&amp;lt </codeph> et <codeph>&amp;gt ;</codeph> :</p>
      
      <pre>
      &lt;mx:TextArea htmlText="This is an example of &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt; markup"/&amp;gt;
      </pre>
      
      Adobe ne recommande pas cette approche, car le marqueur HTML devient presque impossible à lire.
      
      </li>
      
      </ul>
      
      <p>Si la propriété <codeph>condenseWhite</codeph> a la valeur <codeph>true</codeph> lorsque vous définissez la propriété <codeph>htmlText</codeph>, plusieurs caractères d’espace sont condensés, comme dans les navigateurs HTML. Par exemple, trois espaces consécutifs sont affichés sous la forme d’un espace unique. La valeur par défaut de <codeph>condenseWhite</codeph> est <codeph>false</codeph>. Vous devez donc définir <codeph>condenseWhite</codeph> sur <codeph>true</codeph> pour réduire l’espace.</p>
      
      <p>Si vous relisez la propriété <codeph>htmlText</codeph> peu de temps après l’avoir définie, vous obtenez la même chaîne que celle que vous avez définie. Toutefois, après l’exécution de l’objet LayoutManager, la valeur change pour inclure un marqueur supplémentaire comprenant les styles CSS.</p>
      
      <p>La définition de la propriété <codeph>htmlText</codeph> affecte la propriété <codeph>text</codeph> de plusieurs manières. Si vous lisez la propriété <codeph>text</codeph> peu de temps après avoir défini la propriété <codeph>htmlText</codeph>, vous obtenez la valeur <codeph>null</codeph>. Cela indique que la propriété <codeph>text</codeph> correspondant à la nouvelle propriété <codeph>htmlText</codeph> n’a pas encore été déterminée. Toutefois, après l’exécution de l’objet LayoutManager, la propriété <codeph>text</codeph> se transforme en chaîne <codeph>htmlText</codeph> et tous les marqueurs HTML sont supprimés. En fait, la valeur correspond aux caractères que le contrôle TextArea affiche réellement.</p>
       
      <p>A l’inverse, si vous définissez la propriété <codeph>text</codeph>, toute propriété <codeph>htmlText</codeph> précédemment définie devient obsolète. Si vous lisez la propriété <codeph>htmlText</codeph> peu de temps après avoir défini la propriété <codeph>text</codeph>, vous obtenez la valeur <codeph>null</codeph>. Cela indique que la propriété <codeph>htmlText</codeph> qui correspond à la nouvelle propriété <codeph>text</codeph> n’a pas encore été déterminée. Toutefois, après l’exécution du gestionnaire LayoutManager, la valeur de la propriété <codeph>htmlText</codeph> devient le nouveau texte et inclut un marqueur supplémentaire pour les styles CSS.</p>
     
      <p>Pour que le gestionnaire LayoutManager s’exécute immédiatement, vous pouvez appeler la méthode <codeph>validateNow()</codeph> sur le contrôle TextArea. Par exemple, vous pouvez obtenir des propriétés <codeph>htmlText</codeph>, appeler la méthode <codeph>validateNow()</codeph> et récupérer immédiatement la propriété <codeph>text</codeph> correspondante qui n’a pas le marqueur HTML.</p>
      
      <p>Si vous définissez les deux propriétés <codeph>text</codeph> et <codeph>htmlText</codeph> dans ActionScript, celle définie en dernier prend effet. Ne définissez pas les deux dans MXML, car MXML ne garantit pas que les propriétés d’une occurrence puissent être définies dans un ordre particulier.</p>
      
      <p>Définir la propriété <codeph>text</codeph> ou <codeph>htmlText</codeph> à l’intérieur d’une boucle est une opération rapide, car le contrôle TextField sous-jacent qui effectue réellement le rendu du texte n’est pas mis à jour tant que le gestionnaire LayoutManager s’exécute.</p>
     
      <p>Si vous essayez de définir cette propriété sur <codeph>null</codeph>, elle est à la place définie sur la chaîne vide. Si la propriété a temporairement la valeur <codeph>null</codeph>, cela indique que la propriété <codeph>text</codeph> a été récemment définie et que la propriété <codeph>htmlText</codeph> correspondante n’a pas encore été déterminée.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Spécifie le mode IME (éditeur de méthode d’entrée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
     </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le mode IME (éditeur de méthode d’entrée). L’éditeur IME permet aux utilisateurs d’entrer du texte en chinois, japonais et coréen. Flex définit le mode IME spécifié lorsque le contrôle est mis en focus et rétablit la valeur précédente lorsque le contrôle est désactivé.
     
      <p>La classe flash.system.IMEConversionMode définit des constantes pour les valeurs valides de cette propriété. Vous pouvez spécifier <codeph>null</codeph> pour n’indiquer aucun IME.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:length:get"><apiName>length</apiName><shortdesc>
      Nombre de caractères affichés dans la zone de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3173
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Nombre de caractères dans la zone de texte
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Nombre de caractères affichés dans la zone de texte.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:listData:get"><apiName>listData</apiName><shortdesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété listData du composant avec les données appropriées du contrôle List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété <codeph>listData</codeph> du composant avec les données appropriées du contrôle List. Le composant peut ensuite utiliser la propriété <codeph>listData</codeph> pour initialiser la propriété <codeph>data</codeph> du rendu d’élément supplémentaire ou de l’éditeur d’élément supplémentaire.
     
      <p>Vous ne définissez pas cette propriété dans MXML ou ActionScript. Flex la définit lorsque le composant est utilisé comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      Nombre maximal de caractères que les utilisateurs peuvent entrer dans un champ de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3172
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiTipTexts><apiTipText>Nombre maximal de caractères pouvant être contenus dans la zone de texte
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Nombre maximal de caractères que les utilisateurs peuvent entrer dans un champ de texte. Cette propriété ne limite pas la longueur de texte spécifiée en définissant la propriété <codeph>text</codeph> ou <codeph>htmlText</codeph> du contrôle.
     
      <p>La valeur par défaut est 0, ce qui signifie aucune limite.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:restrict:get"><apiName>restrict</apiName><shortdesc>
      Indique le jeu de caractères que l’utilisateur peut saisir dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3174
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue><apiTipTexts><apiTipText>Jeu de caractères pouvant être saisis dans le contrôle TextArea
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Indique le jeu de caractères que l’utilisateur peut saisir dans le contrôle. Si la valeur de la propriété <codeph>restrict</codeph> est <codeph>null</codeph>, vous pouvez entrer tout caractère. Si la valeur de la propriété <codeph>restrict</codeph> est une chaîne vide, aucun caractère ne peut être entré. Cette propriété ne limite que l’interaction avec l’utilisateur ; un script peut mettre tout texte dans le champ de texte. Si la valeur de la propriété <codeph>restrict</codeph> est une chaîne de caractères, vous ne pouvez entrer que les caractères dans la chaîne du champ de texte.
     
      <p>Flex analyse la chaîne de gauche à droite. Vous pouvez spécifier une plage à l’aide du caractère (-). Si la chaîne commence par un caret (^), tous les caractères sont initialement acceptés et les caractères suivants de la chaîne sont exclus du jeu de caractères acceptés. Si la chaîne ne commence pas par un caret (^), aucun caractère n’est initialement accepté et les caractères suivants de la chaîne sont inclus dans le jeu de caractères acceptés.</p>
     
      <p>Comme certains caractères ont une signification particulière lorsqu’ils sont utilisés dans la propriété <codeph>restrict</codeph>, vous devez utiliser des barres obliques inverses pour spécifier les caractères de type littéral -, ^ et \. Lorsque vous utilisez la propriété <codeph>restrict</codeph> comme attribut dans une balise MXML, utilisez des barres obliques inverses uniques, comme dans cet exemple : \^\-\\. Lorsque vous définissez la propriété <codeph>restrict</codeph> dans une expression ActionScript, utilisez des barres obliques inverses doubles, comme dans cet exemple : \\^\\-\\\.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/restrict"><linktext>flash.text.TextField.restrict</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:selectable:get"><apiName>selectable</apiName><shortdesc>
      Précise si le texte peut être sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Précise si le texte peut être sélectionné. Le fait de rendre le texte sélectionnable permet de copier du texte à partir du contrôle.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc>
      Valeur d’index basée sur zéro du premier caractère de la sélection actuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Valeur d’index basée sur zéro du premier caractère de la sélection.
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Valeur d’index basée sur zéro du premier caractère de la sélection actuelle. Par exemple, le premier caractère est 0, le deuxième est 1, etc. Lorsque le contrôle reçoit le focus, la sélection est visible si les propriétés <codeph>selectionBeginIndex</codeph> et <codeph>selectionEndIndex</codeph> sont définies toutes les deux.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc>
      Index de base zéro de la position suivant le dernier caractère dans la selection en cours (équivalent à l’index de base un du dernier caractère).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Valeur d’index basée sur zéro du dernier caractère de la sélection.
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Index de base zéro de la position <i>suivant</i> le dernier caractère dans la selection en cours (équivalent à l’index de base un du dernier caractère). Si le dernier caractère de la sélection, par exemple, est le cinquième caractère, cette propriété a la valeur 5. Lorsque le contrôle reçoit le focus, la sélection est visible si les propriétés <codeph>selectionBeginIndex</codeph> et <codeph>selectionEndIndex</codeph> sont définies toutes les deux.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:styleSheet:get"><apiName>styleSheet</apiName><shortdesc>
     Objet flash.text.StyleSheet pouvant effectuer des rendus sur le texte du contrôle TextArea.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:StyleSheet"/><apiDefaultValue>null
     
     </apiDefaultValue></apiValueDef><apiDesc>
     Objet flash.text.StyleSheet pouvant effectuer des rendus sur le texte du contrôle TextArea. Utilisé pour le contrôle détaillé des styles HTML du texte. Pour plus d’informations, voir la documentation sur la classe flash.text.StyleSheet.
    
     </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.StyleSheet.xml"><linktext>flash.text.StyleSheet</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:text:get"><apiName>text</apiName><shortdesc>
      Texte ordinaire apparaissant dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3179
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue><apiTipTexts><apiTipText>Récupère ou définit le contenu du contrôle TextArea
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Texte ordinaire apparaissant dans le contrôle. Son apparence est fonction des styles CSS de son contrôle Label.
      
      <p>Toutes les balises HTML de la chaîne de texte sont ignorées et apparaissent telles qu’elles sont saisies dans la chaîne. Pour afficher un texte mis en forme à l’aide de balises HTML, utilisez plutôt la propriété <codeph>htmlText</codeph>. Si vous définissez la propriété <codeph>htmlText</codeph>, le code HTML remplace le texte défini à l’aide de cette propriété et la propriété <codeph>text</codeph> retourne une version de texte ordinaire du texte HTML, dépouillée de toutes les balises HTML. Pour plus d’informations, voir la propriété <codeph>htmlText</codeph>.</p>
     
      <p>Pour inclure les caractères spéciaux de signe inférieur à (&lt;), de signe supérieur à (>) ou de perluète (&amp;) dans le texte, enroulez la chaîne de texte dans la balise CDATA. Vous pouvez également utiliser des entités de caractères HTML pour les caractères spéciaux, par exemple <codeph>&amp;lt;</codeph>.</p>
     
      <p>Si vous essayez de définir cette propriété sur <codeph>null</codeph>, elle est à la place définie sur la chaîne vide. La propriété <codeph>text</codeph> peut avoir temporairement la valeur <codeph>null</codeph>, ce qui indique que la propriété <codeph>htmlText</codeph> a été récemment définie et que la propriété <codeph>text</codeph> n’a pas encore été déterminée.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:textHeight:get"><apiName>textHeight</apiName><shortdesc>
      hauteur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      hauteur du texte.
     
      <p>La valeur de la propriété <codeph>textHeight</codeph> est correcte une fois que le composant a été validé uniquement. Si vous définissez la propriété <codeph>text</codeph>, puis demandez immédiatement la propriété <codeph>textHeight</codeph>, vous risquez de recevoir une valeur incorrecte. Vous devez attendre la validation du composant ou appeler la méthode <codeph>validateNow</codeph> pour obtenir la valeur. Ce comportement est différent de celui du contrôle flash.text.TextField, qui met immédiatement la valeur à jour.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:textWidth:get"><apiName>textWidth</apiName><shortdesc>
      Largeur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur du texte.
     
      <p>La valeur de la propriété <codeph>textWidth</codeph> est correcte une fois que le composant a été validé uniquement. Si vous définissez la propriété <codeph>text</codeph>, puis demandez immédiatement la propriété <codeph>textWidth</codeph>, vous risquez de recevoir une valeur incorrecte. Vous devez attendre la validation du composant ou appeler la méthode <codeph>validateNow</codeph> pour obtenir la valeur. Ce comportement est différent de celui du contrôle flash.text.TextField, qui met immédiatement la valeur à jour.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      Indique si la barre de défilement verticale est toujours active (ScrollPolicy.ON), toujours inactive (ScrollPolicy.OFF) ou si elle est activée lorsque cela est nécessaire (ScrollPolicy.AUTO).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3428
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      </apiDefaultValue><apiTipTexts><apiTipText>Indique si la barre de défilement verticale est activée, désactivée ou ajustée automatiquement
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Indique si la barre de défilement verticale est toujours active (<codeph>ScrollPolicy.ON</codeph>), toujours inactive (<codeph>ScrollPolicy.OFF</codeph>) ou si elle est activée lorsque cela est nécessaire (<codeph>ScrollPolicy.AUTO</codeph>).
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:wordWrap:get"><apiName>wordWrap</apiName><shortdesc>
      Indique si le texte va automatiquement à la ligne à la fin d’une ligne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3175
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue><apiTipTexts><apiTipText>Si la valeur est true, le texte va automatiquement à la ligne. Si la valeur est false, les lignes longues sont coupées.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Indique si le texte va automatiquement à la ligne à la fin d’une ligne. Si la valeur est <codeph>true</codeph>, le texte va sur plusieurs lignes si cela est nécessaire.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:horizontalScrollPosition:set"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Position dans la zone de contenu du pixel le plus à gauche actuellement affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Position dans la zone de contenu du pixel le plus à gauche actuellement affiché (la zone de contenu inclut tous les contenus d’un contrôle, pas seulement la portion actuellement affichée). Cette propriété est toujours définie sur 0 et ignore les changements si la propriété <codeph>wordWrap</codeph> est définie sur <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:verticalScrollPosition:set"><apiName>verticalScrollPosition</apiName><shortdesc>
      Numéro de ligne de la rangée de caractères supérieure actuellement affichée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3181
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiTipTexts><apiTipText>Décalage des pixels dans le contenu à partir du bord gauche
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Numéro de ligne de la rangée de caractères supérieure actuellement affichée. La valeur par défaut est 0.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:VRule"><apiName>VRule</apiName><shortdesc>
  Le contrôle VRule crée une seule ligne verticale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:VRule" replacement="spark.primitives.Line" since="4.0">
	</Alternative><styles><style format="Length" inherit="yes" name="strokeWidth" owner="mx.controls:VRule" playerVersion="Flash9" type="Number">
<description>
  Epaisseur de la règle, en pixels. 
  <ul>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est 1, la règle est une ligne de 1 pixel de large.</li>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est 2, la règle a la forme de deux lignes verticales adjacentes de 1 pixel de large.</li>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est supérieure à 2, la règle est un rectangle creux avec des bords de 1 pixel de large.</li>
  </ul>
  
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="strokeColor" owner="mx.controls:VRule" playerVersion="Flash9" type="uint">
<description>
  Couleur de la ligne. 
  <ul>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est 1, strokeColor est la couleur de la ligne entière.</li>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est 2, strokeColor est la couleur de la ligne gauche.</li>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est supérieure à 2, strokeColor est la couleur des bords supérieur et gauche du rectangle.</li>
  </ul>
  
  </description>
<default>0xC4CCCC
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="shadowColor" owner="mx.controls:VRule" playerVersion="Flash9" type="uint">
<description>
  Couleur des tons foncés de la ligne. 
  <ul>
    <li>Si <codeph>strokeWidth</codeph> a la valeur 1, shadowColor n’a aucun effet.</li>
    <li>Si <codeph>strokeWidth</codeph> a la valeur 2, shadowColor est la couleur de la ligne droite.</li>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est supérieure à 2, shadowColor est la couleur des bords inférieur et droit du rectangle.</li>
  </ul>
  
  </description>
<default>0xEEEEEE
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VRule&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:VRule
    <strong>Styles</strong>
    strokeColor="0xC4CCCC"
    shadowColor="0xEEEEEE"
    strokeWidth="2"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle VRule crée une seule ligne verticale. Ce contrôle permet généralement de créer une ligne de division au sein d’un conteneur.
 
  <p>Le contrôle HRule est doté des propriétés par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La hauteur par défaut est de 100 pixels et la largeur par défaut de 2 pixels. Par défaut, le contrôle VRule ne peut pas être redimensionné. Définissez la largeur et la hauteur sur des valeurs de pourcentage pour activer le redimensionnement.</entry>
        </row><row>
           <entry>strokeWidth</entry>
           <entry>2 pixels.</entry>
        </row><row>
           <entry>strokeColor</entry>
           <entry>0xC4CCCC.</entry>
        </row><row>
           <entry>shadowColor</entry>
           <entry>0xEEEEEE.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleVRule.mxml"><swfblock conref="examples/SimpleVRule.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#HRule"><linktext>mx.controls.HRule</linktext></link></related-links><apiConstructor id="mx.controls:VRule:VRule"><apiName>VRule</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:Alert"><apiName>Alert</apiName><shortdesc>
  Le contrôle Alert est une boîte de dialogue contextuelle pouvant contenir un message, un titre, des boutons (toute combinaison de OK, Annuler, Oui et Non) et une icône.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="titleStyleName" owner="mx.controls:Alert" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles du texte de titre du contrôle Alert. 
 
  <p>Vous ne définissez ce style qu’à l’aide d’un sélecteur de type, qui définit le style de tous les controles Alert de votre application. Si vous le définissez sur une occurrence spécifique du contrôle Alert, cela peut entraîner un dimensionnement incorrect du contrôle.</p>
 
  </description>
<default>"windowStyles" 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="messageStyleName" owner="mx.controls:Alert" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles du texte de message du contrôle Alert. 
 
  <p>Vous ne définissez ce style qu’à l’aide d’un sélecteur de type, qui définit le style de tous les controles Alert de votre application. Si vous le définissez sur une occurrence spécifique du contrôle Alert, cela peut entraîner un dimensionnement incorrect du contrôle.</p>
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="buttonStyleName" owner="mx.controls:Alert" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles des boutons du contrôle Alert. 
 
  </description>
<default>"alertButtonStyle"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle Alert est une boîte de dialogue contextuelle pouvant contenir un message, un titre, des boutons (toute combinaison de OK, Annuler, Oui et Non) et une icône. Le contrôle Alert est modal, c’est-à-dire qu’il conserve le focus jusqu’à ce qu’il soit fermé par l’utilisateur.
 
  <p>Importez la classe mx.controls.Alert dans votre application, puis appelez la méthode <codeph>show()</codeph> statique dans ActionScript pour afficher un contrôle Alert. Vous ne pouvez pas créer de contrôle Alert dans MXML.</p>
 
  <p>Le contrôle Alert se ferme lorsque vous sélectionnez un bouton du contrôle ou appuyez sur la touche Echap.</p>
 
  </apiDesc><example conref="SimpleAlert.mxml"><swfblock conref="examples/SimpleAlert.swf"/></example></apiClassifierDetail><related-links><link href="mx.managers.xml#SystemManager"><linktext>mx.managers.SystemManager</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link></related-links><apiConstructor id="mx.controls:Alert:Alert"><apiName>Alert</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:Alert:show"><apiName>show</apiName><shortdesc>
      Méthode statique faisant s’afficher le contrôle Alert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Référence au contrôle Alert. 
     
      </apiDesc><apiOperationClassifier>mx.controls:Alert</apiOperationClassifier></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiData/><apiDesc>Chaîne de texte qui s’affiche dans le contrôle Alert. Ce texte est centré dans la boîte de dialogue d’alerte.
     
      </apiDesc></apiParam><apiParam><apiItemName>title</apiItemName><apiType value="String"/><apiData/><apiDesc>Chaîne de texte qui s’affiche dans la barre de titre. Ce texte est justifié à gauche.
     
      </apiDesc></apiParam><apiParam><apiItemName>flags</apiItemName><apiType value="uint"/><apiData>0x4</apiData><apiDesc>Les boutons à placer dans le contrôle Alert. Les valeurs valides sont <codeph>Alert.OK</codeph>, <codeph>Alert.CANCEL</codeph>, <codeph>Alert.YES</codeph> et <codeph>Alert.NO</codeph>. La valeur par défaut est <codeph>Alert.OK</codeph>. Utilisez l’opérateur OR au niveau du bit pour afficher plusieurs boutons. Par exemple, la transmission de <codeph>(Alert.YES | Alert.NO)</codeph> permet d’afficher les boutons Oui et Non. Quel que soit l’ordre dans lequel vous spécifiez les boutons, ils apparaissent toujours dans l’ordre suivant, de gauche à droite : OK, Oui, Non, Annuler.
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:Sprite"/><apiData>null</apiData><apiDesc>Objet sur lequel le contrôle Alert se centre.
     
      </apiDesc></apiParam><apiParam><apiItemName>closeHandler</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Gestionnaire d’événement appelé lorsque l’utilisateur clique sur un des boutons du contrôle Alert. L’objet d’événement transmis à ce gestionnaire est une occurrence de CloseEvent. La propriété <codeph>detail</codeph> de cet objet contient la valeur <codeph>Alert.OK</codeph>, <codeph>Alert.CANCEL</codeph>, <codeph>Alert.YES</codeph> ou <codeph>Alert.NO</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>iconClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Classe de l’icône placée à gauche du texte dans le contrôle Alert.
     
      </apiDesc></apiParam><apiParam><apiItemName>defaultButtonFlag</apiItemName><apiType value="uint"/><apiData>0x4</apiData><apiDesc>Bit indicateur qui spécifie le bouton par défaut. Vous ne pouvez spécifier qu’une seule des valeurs <codeph>Alert.OK</codeph>, <codeph>Alert.CANCEL</codeph>, <codeph>Alert.YES</codeph> ou <codeph>Alert.NO</codeph>. La valeur par défaut est <codeph>Alert.OK</codeph>. Appuyez sur la touche Entrée pour déclencher le bouton par défaut comme si vous cliquiez dessus. Appuyez sur la touche Echap pour déclencher le bouton Annuler ou Non par défaut comme si vous l’aviez sélectionné.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Méthode statique faisant s’afficher le contrôle Alert. Le contrôle Alert se ferme lorsque vous sélectionnez un bouton du contrôle ou appuyez sur la touche Echap.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CloseEvent"><linktext>mx.events.CloseEvent</linktext></link></related-links></apiOperation><apiValue id="mx.controls:Alert:CANCEL"><apiName>CANCEL</apiName><shortdesc>
      Valeur qui active un bouton Annuler sur le contrôle Alert lorsqu’elle est transmise comme paramètres flags de la méthode show().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0008</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      Valeur qui active un bouton Annuler sur le contrôle Alert lorsqu’elle est transmise comme paramètre <codeph>flags</codeph> de la méthode <codeph>show()</codeph>. Vous pouvez utiliser l’opérateur | pour combiner ce bit indicateur aux indicateurs <codeph>OK</codeph>, <codeph>YES</codeph>, <codeph>NO</codeph> et <codeph>NONMODAL</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:NO"><apiName>NO</apiName><shortdesc>
      Valeur qui active un bouton Non sur le contrôle Alert lorsqu’elle est transmise comme paramètre flags de la méthode show().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0002</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      Valeur qui active un bouton Non sur le contrôle Alert lorsqu’elle est transmise comme paramètre <codeph>flags</codeph> de la méthode <codeph>show()</codeph>. Vous pouvez utiliser l’opérateur | pour combiner ce bit indicateur avec les indicateurs <codeph>OK</codeph>, <codeph>CANCEL</codeph>, <codeph>YES</codeph> et <codeph>NONMODAL</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:NONMODAL"><apiName>NONMODAL</apiName><shortdesc>
      Valeur qui crée un contrôle Alert non modal lorsqu’elle est transmise comme paramètre flags de la méthode show().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x8000</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      Valeur qui crée un contrôle Alert non modal lorsqu’elle est transmise comme paramètre <codeph>flags</codeph> de la méthode <codeph>show()</codeph>. Vous pouvez utiliser l’opérateur | pour combiner ce bit indicateur avec les indicateurs <codeph>OK</codeph>, <codeph>CANCEL</codeph>, <codeph>YES</codeph> et <codeph>NO</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:OK"><apiName>OK</apiName><shortdesc>
      Valeur qui active un bouton OK sur le contrôle Alert lorsqu’elle est transmise comme paramètre flags de la méthode show().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0004</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      Valeur qui active un bouton OK sur le contrôle Alert lorsqu’elle est transmise comme paramètre <codeph>flags</codeph> de la méthode <codeph>show()</codeph>. Vous pouvez utiliser l’opérateur | pour combiner ce bit indicateur aux indicateurs <codeph>CANCEL</codeph>, <codeph>YES</codeph>, <codeph>NO</codeph> et <codeph>NONMODAL</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:YES"><apiName>YES</apiName><shortdesc>
      Valeur qui active un bouton Oui sur le contrôle Alert lorsqu’elle est transmise comme paramètre flags de la méthode show().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0001</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      Valeur qui active un bouton Oui sur le contrôle Alert lorsqu’elle est transmise comme paramètre <codeph>flags</codeph> de la méthode <codeph>show()</codeph>. Vous pouvez utiliser l’opérateur | pour combiner ce bit indicateur avec les indicateurs <codeph>OK</codeph>, <codeph>CANCEL</codeph>, <codeph>NO</codeph> et <codeph>NONMODAL</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:buttonFlags"><apiName>buttonFlags</apiName><shortdesc>
      Bit indicateur contenant les valeurs Alert.OK, Alert.CANCEL, Alert.YES et/ou Alert.NO indiquant quels boutons sont disponibles dans le contrôle Alert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0x0004</apiData><apiType value="uint"/><apiDefaultValue>Alert.OK
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bit indicateur contenant les valeurs <codeph>Alert.OK</codeph>, <codeph>Alert.CANCEL</codeph>, <codeph>Alert.YES</codeph> et/ou <codeph>Alert.NO</codeph> indiquant quels boutons sont disponibles dans le contrôle Alert.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:buttonHeight"><apiName>buttonHeight</apiName><shortdesc>
      Hauteur de chaque bouton du contrôle Alert, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hauteur de chaque bouton du contrôle Alert, en pixels. Tous les boutons doivent être de même hauteur.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:buttonWidth"><apiName>buttonWidth</apiName><shortdesc>
      Largeur de chaque bouton du contrôle Alert, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>unknown</apiData><apiType value="Number"/><apiDefaultValue>60
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Largeur de chaque bouton du contrôle Alert, en pixels. Tous les boutons doivent être de même largeur.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:defaultButtonFlag"><apiName>defaultButtonFlag</apiName><shortdesc>
      Bit indicateur contenant les valeurs Alert.OK, Alert.CANCEL, Alert.YES ou Alert.NO pour spécifier le bouton par défaut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0x0004</apiData><apiType value="uint"/><apiDefaultValue>Alert.OK
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Bit indicateur contenant les valeurs <codeph>Alert.OK</codeph>, <codeph>Alert.CANCEL</codeph>, <codeph>Alert.YES</codeph> ou <codeph>Alert.NO</codeph> pour spécifier le bouton par défaut.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:iconClass"><apiName>iconClass</apiName><shortdesc>
      Classe de l’icône à afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Classe de l’icône à afficher. Vous imbriquez généralement une ressource, comme un fichier JPEG ou GIF, puis utilisez la variable associée à la ressource imbriquée pour indiquer la valeur de cette propriété.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:text"><apiName>text</apiName><shortdesc>
      Texte à afficher dans la boîte de dialogue de ce contrôle Alert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte à afficher dans la boîte de dialogue de ce contrôle Alert.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:cancelLabel:get"><apiName>cancelLabel</apiName><shortdesc>
      Etiquette du bouton Annuler.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Etiquette du bouton Annuler.
     
      <p>Si vous utilisez une étiquette différente, vous devez peut-être ajuster la propriété <codeph>buttonWidth</codeph> pour l’afficher pleinement.</p>
     
      Les ressources de langue française définissent cette propriété sur « ANNULER ». 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:noLabel:get"><apiName>noLabel</apiName><shortdesc>
      Etiquette du bouton Non.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Etiquette du bouton Non.
     
      <p>Si vous utilisez une étiquette différente, vous devez peut-être ajuster la propriété <codeph>buttonWidth</codeph> pour l’afficher pleinement.</p>
     
      Les ressources de langue française définissent cette propriété sur « NON ». 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:okLabel:get"><apiName>okLabel</apiName><shortdesc>
      Etiquette du bouton OK.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Etiquette du bouton OK.
     
      <p>Si vous utilisez une étiquette différente, vous devez peut-être ajuster la propriété <codeph>buttonWidth</codeph> pour afficher pleinement l’étiquette.</p>
     
      Les ressources de langue française définissent cette propriété sur « OK ». 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:yesLabel:get"><apiName>yesLabel</apiName><shortdesc>
      Etiquette du bouton Oui.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Etiquette du bouton Oui.
     
      <p>Si vous utilisez une étiquette différente, vous devez peut-être ajuster la propriété <codeph>buttonWidth</codeph> pour afficher pleinement l’étiquette.</p>
     
      Les ressources de langue française définissent cette propriété sur « OUI ». 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:IFlexContextMenu"><apiName>IFlexContextMenu</apiName><shortdesc>
  L’interface IFlexContextMenu définit l’interface des menus contextuels Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  L’interface IFlexContextMenu définit l’interface des menus contextuels Flex.  
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent/flexContextMenu"><linktext>mx.core.UIComponent.flexContextMenu</linktext></link></related-links><apiOperation id="mx.controls:IFlexContextMenu:mx.controls:IFlexContextMenu:setContextMenu"><apiName>setContextMenu</apiName><shortdesc>
      Définit le menu contextuel d’un objet InteractiveObject.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>component</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>Objet InteractiveObject sur lequel définir un menu contextuel
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit le menu contextuel d’un objet InteractiveObject. Cette opération accomplit toutes les étapes nécessaires à l’ajout de l’objet InteractiveObject en tant que menu contextuel de cet objet, comme l’ajout des écouteurs, etc.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:IFlexContextMenu:mx.controls:IFlexContextMenu:unsetContextMenu"><apiName>unsetContextMenu</apiName><shortdesc>
      Annule la définition du menu contextuel d’un objet InteractiveObject.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>component</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>Objet InteractiveObject sur lequel annuler la définition du menu contextuel.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Annule la définition du menu contextuel d’un objet InteractiveObject. Cette opération accomplit toutes les étapes nécessaires à la suppression de l’objet InteractiveObject en tant que menu contextuel de cet objet, comme la suppression des écouteurs, etc.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.controls:Text"><apiName>Text</apiName><shortdesc>
  Le contrôle Text affiche le texte multiligne non modifiable.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalAlign"/><Exclude kind="style" name="horizontalAlign"/><styles><style format="Length" inherit="yes" name="leading" owner="mx.controls:Text" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Text&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Text
  leading="2"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Label</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle Text affiche le texte multiligne non modifiable. Utilisez le contrôle Label si vous avez besoin d’une seule ligne de texte.
 
  <p>Le contrôle Text ne prend pas en charge les barres de défilement. Si vous avez besoin d’un défilement, utilisez un contrôle TextArea non modifiable.</p>
 
  <p>Vous pouvez mettre en forme le texte d’un contrôle Text à l’aide des balises HTML, qui sont appliquées après l’application des styles CSS du contrôle. Vous pouvez également appliquer une marge aux quatre côtés du texte.</p>
 
  <p>Le texte d’un contrôle Text est sélectionnable par défaut, mais vous pouvez le rendre non sélectionnable en définissant la propriété <codeph>selectable</codeph> sur <codeph>false</codeph>.</p>
 
  <p>Si le contrôle n’est pas aussi large que le texte, ce dernier sera envoyé à la ligne. Le texte est toujours aligné en haut à gauche du contrôle.</p>
 
  <p>Pour dimensionner un composant Text, il est fréquent de spécifier une largeur explicite et de laisser Flex déterminer la hauteur requise pour afficher tout le texte. Si vous spécifiez une hauteur explicite, une partie du texte risque d’être coupée. Contrairement au contrôle Label, le contrôle Text ne tronque pas son texte avec "...". Il est également fréquent d’utiliser des largeurs et hauteurs en pourcentage avec le contrôle Text.</p>
 
  <p>Si vous ne spécifiez ni la largeur ni la hauteur, Flex les calcule en fonction des sauts de ligne explicites du texte, sans envoyer le texte sur les lignes. Par exemple, si vous définissez la propriété <codeph>text</codeph>, le nouveau caractère NouvelleLigne <codeph>"\n"</codeph> provoque un saut de ligne. Si vous définissez la propriété <codeph>htmlText</codeph>, le marqueur HTML <codeph>&lt;br></codeph> provoque un saut de ligne. Si votre propriété <codeph>text</codeph> ou <codeph>htmlText</codeph> est longue et ne contient pas de sauts de ligne, vous pouvez obtenir un composant Text très large. Vous pouvez définir la propriété <codeph>maxWidth</codeph> de façon à limiter la largeur que le composant est autorisé à atteindre.</p>
 
  <p>Les contrôles Text n’ont pas d’arrière-plans ou de bordures et ne peuvent pas recevoir le focus.</p>
 
  <p>Le contrôle Text possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Flex dimensionne le contrôle pour l’adapter au texte. La largeur doit être assez important pour recevoir la plus longue ligne de texte et la hauteur assez grande pour recevoir le nombre de lignes. Si vous ne spécifiez pas de hauteur en pixels, la hauteur est déterminée par le nombre de sauts de ligne explicites de la chaîne de texte. Si la longueur du texte change, le contrôle est redimensionné pour s’adapter au nouveau texte.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel.</entry>
        </row><row>
           <entry>ChMaximum sizear03</entry>
           <entry>10000 par 10000 pixels</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TextExample.mxml"><swfblock conref="examples/TextExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Label"><linktext>mx.controls.Label</linktext></link><link href="mx.controls.xml#TextInput"><linktext>mx.controls.TextInput</linktext></link><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link><link href="mx.controls.xml#RichTextEditor"><linktext>mx.controls.RichTextEditor</linktext></link></related-links><apiConstructor id="mx.controls:Text:Text"><apiName>Text</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:ProgressBar"><apiName>ProgressBar</apiName><shortdesc>
  Le contrôle ProgressBar fournit une représentation visuelle de la progression d’une tâche dans le temps.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><effects><effect event="complete" name="completeEffect" owner="mx.controls:ProgressBar">
<description>
  Effet appelé lorsque Flex distribue l’événement <codeph>complete</codeph>, qui se produit à la fin du chargement.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style format="Length" inherit="yes" name="labelWidth" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Largeur de l’étiquette en pixels. Si la valeur est NaN, le contrôle ProgressBar la définit sur la largeur du contrôle.
 
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="trackHeight" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Hauteur du rail en pixels. Si la valeur est NaN, utilisez la hauteur de l’habillage spécifiée par la propriété <codeph>trackSkin</codeph>. 
  
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="trackColors" owner="mx.controls:ProgressBar" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Couleurs du rail, sous forme de tableau de deux couleurs. Vous pouvez utliser deux fois la même couleur pour une couleur de rail uniforme.
 
  </description>
<default>[ 0xE6EEEE, 0xE6EEEE ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="themeColor" owner="mx.controls:ProgressBar" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de thème du contrôle ProgressBar. haloGreen, haloBlue et haloOrange sont des valeurs possibles. Adobe recommande de définir le style <codeph>themeColor</codeph> dans la balise <codeph>&lt;mx:Application></codeph>, plutôt que dans chaque contrôle. 
 
  </description>
<default>"haloBlue"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="trackSkin" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Class">
<description>
  Style d’habillage du rail d’indicateur de progression.
 
  </description>
<default>mx.skins.halo.ProgressTrackSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="maskSkin" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Class">
<description>
  Style d’habillage du masque des barres déterminées et indéterminées.
 
  </description>
<default>mx.skins.halo.ProgressMaskSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="indeterminateSkin" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Class">
<description>
  Style d’habillage d’une barre de progression indéterminée.
 
  </description>
<default>mx.skins.halo.ProgressIndeterminateSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="indeterminateMoveInterval" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels en fonction duquel déplacer la barre de progression indéterminée pour chaque boucle indéterminée. Une fois que la barre de progression est déplacée en fonction du nombre de pixels spécifié, elle est repositionnée à son point de départ. La valeur 0 signifie que la barre n’est pas déplacée. 
 
  </description>
<default>26
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:ProgressBar" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Section noire d’une bordure en trois dimensions ou sélection de couleur d’une bordure en deux dimensions.
  </description>
<default>0xB7BABC
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="barSkin" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Class">
<description>
  Style d’habillage d’une barre de progression déterminée.
 
  </description>
<default>mx.skins.halo.ProgressBarSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:ProgressBar" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:ProgressBar" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:ProgressBar" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens vertical. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.controls:ProgressBar" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Détermine la couleur d’un contrôle ProgressBar. Un contrôle ProgressBar est rempli d’un dégradé vertical entre cette couleur et une couleur plus vive qui en découle. Ce style n’a aucun effet sur d’autres composants, mais il peut être défini sur un conteneur pour contrôler l’apparence de toutes les barres de progression trouvées à l’intérieur. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. Dans ce cas, la propriété de style <codeph>themeColor</codeph> est utilisée.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ProgressBar&gt;</code> tag inherits all of the tag attributes 
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:ProgressBar
    <strong>Properties</strong>
    conversion="1"
    direction="right|left"
    indeterminate="false|true"
    label="<i>No default</i>"
    labelPlacement="bottom|top|left|right|center"
    maximum="0"
    minimum="0"
    mode="event|polled|manual"
    source="<i>No default</i>"
  
    <strong>Styles</strong>
    barColor="undefined"
    barSkin="ProgressBarSkin"
    borderColor="0xAAB3B3"
    color="0x0B333C"
    disabledColor="0xAAB3B3"
    fontAntiAliasType="advanced"
    fontFamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0"
    fontSize="10"
    fontThickness="0"
    fontStyle="normal|italic"
    fontWeight="normal|bold"
    horizontalGap="8"
    indeterminateMoveInterval="26"
    indeterminateSkin="ProgressIndeterminateSkin"
    labelWidth="Computed"
    leading="0"
    maskSkin="ProgressMaskSkin"
    paddingLeft="0"
    paddingRight="0"
    textAlign="left|right|center"
    textDecoration="none|underline"
    textIndent="0"
    themeColor="haloGreen|haloBlue|haloOrange"
    trackColors="[0xE6EEEE,0xE6EEEE]"
    trackHeight="Calculated"
    trackSkin="ProgressTrackSkin"
    verticalGap="6"
  
    <strong>Events</strong>
    complete="<i>No default</i>"
    hide="<i>No default</i>"
    progress="<i>No default</i>"
    show="<i>No default</i>"
  
    <strong>Effects</strong>
    completeEffect="<i>No default</i>"
  /&gt;
  </pre>
  </p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle ProgressBar fournit une représentation visuelle de la progression d’une tâche dans le temps. Il existe deux types de contrôles ProgressBar : déterminés et indéterminés.
 
  <p>Un contrôle ProgressBar déterminé est une représentation linéaire de la progression d’une tâche dans le temps. Utilisez un contrôle ProgressBar déterminé lorsque l’étendue de la tâche est connue. Il s’affiche lorsque l’utilisateur doit attendre pendant une période prolongée.</p>
 
  <p>Un contrôle ProgressBar indéterminé représente des processus basés sur le temps, pour lesquels l’étendue n’est pas encore connue. Dès que vous pouvez en déterminer l’étendue, il est conseillé d’utiliser un contrôle ProgressBar déterminé.</p>
 
  <p>Le contrôle ProgressBar possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>taille par défaut</entry>
           <entry>150 pixels de large par 4 pixels de haut</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Undefined</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleProgressBar.mxml"><swfblock conref="examples/SimpleProgressBar.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#ProgressBarDirection"><linktext>mx.controls.ProgressBarDirection</linktext></link><link href="mx.controls.xml#ProgressBarLabelPlacement"><linktext>mx.controls.ProgressBarLabelPlacement</linktext></link><link href="mx.controls.xml#ProgressBarMode"><linktext>mx.controls.ProgressBarMode</linktext></link></related-links><adobeApiEvent id="mx.controls:ProgressBar_mx.events.FlexEvent.SHOW_show"><apiName>show</apiName><shortdesc>
  Distribué lorsque le composant devient visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le composant devient visible.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ProgressBar_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  Distribué pendant le chargement du contenu en event ou polled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué pendant le chargement du contenu en event ou polled.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ProgressBar_mx.events.FlexEvent.HIDE_hide"><apiName>hide</apiName><shortdesc>
  Distribué lorsqu’un objet passe de l’état visible à l’état invisible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.HIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un objet passe de l’état visible à l’état invisible.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ProgressBar_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Distribué lorsque le chargement se termine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le chargement se termine.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:ProgressBar:ProgressBar"><apiName>ProgressBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:ProgressBar:setProgress"><apiName>setProgress</apiName><shortdesc>
      Définit l’état de la barre pour qu’elle reflète l’avancée de la progression lorsque le mode manuel est utilisé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>Valeur actuelle.
     
      </apiDesc></apiParam><apiParam><apiItemName>total</apiItemName><apiType value="Number"/><apiDesc>Valeur totale ou visée.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit l’état de la barre pour qu’elle reflète l’avancée de la progression lorsque le mode manual est utilisé. L’argument <codeph>value</codeph> est attribué à la propriété <codeph>value</codeph> et l’argument <codeph>maximum</codeph> à la propriété <codeph>maximum</codeph>. La propriété <codeph>minimum</codeph> n’est pas modifiée.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:ProgressBar:conversion:get"><apiName>conversion</apiName><shortdesc>
      Nombre utilisé pour convertir la valeur des octets entrants chargés et les valeurs totales des octets chargés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre utilisé pour convertir la valeur courante des octets entrants chargés et les valeurs totales des octets chargés. Flex divise les valeurs courantes et totales par cette propriété et utilise le nombre entier le plus proche qui est supérieur ou égal à chaque valeur de la chaîne d’étiquette. Aucune conversion n’est effectuée si la valeur est de 1.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:direction:get"><apiName>direction</apiName><shortdesc>
      Direction dans laquelle s’effectue le remplissage du contrôle ProgressBar jusqu’à la fin du chargement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ProgressBarDirection.RIGHT
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Direction dans laquelle s’effectue le remplissage du contrôle ProgressBar jusqu’à la fin du chargement. Les valeurs valides dans MXML sont <codeph>"right"</codeph> et <codeph>"left"</codeph>.
     
      <p>Dans ActionScript, utilisez les constantes suivantes pour définir cette propriété : <codeph>ProgressBarDirection.RIGHT</codeph> et <codeph>ProgressBarDirection.LEFT</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#ProgressBarDirection"><linktext>mx.controls.ProgressBarDirection</linktext></link></related-links></apiValue><apiValue id="mx.controls:ProgressBar:indeterminate:get"><apiName>indeterminate</apiName><shortdesc>
      Indique si l’apparence du contrôle ProgressBar est déterminée ou indéterminée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si l’apparence du contrôle ProgressBar est déterminée ou indéterminée. Utilisez une apparence indéterminée lorsque l’état de la progression ne peut pas être connu. Si la valeur est <codeph>true</codeph>, l’apparence est indéterminée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:label:get"><apiName>label</apiName><shortdesc>
      Texte accompagnant la barre de progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"LOADING %3%%"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte accompagnant la barre de progression. Vous pouvez inclure les caractères spéciaux suivants dans la chaîne de texte :
     
      <ul>
        <li>%1 = octets actuellement chargés</li>
        <li>%2 = nombre total d’octets</li>
        <li>%3 = pourcentage d’octets chargés</li>
        <li>%% = caractère « % »</li>
      </ul>
     
      <p>Si un champ est inconnu, il est remplacé par « ?? ». S’il n’est pas défini, l’étiquette ne s’affiche pas.</p>
      
      <p>Si vous êtes en mode manuel, vous pouvez définir les valeurs de ces caractères spéciaux à l’aide de la méthode <codeph>setProgress()</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:labelPlacement:get"><apiName>labelPlacement</apiName><shortdesc>
      Emplacement de l’étiquette.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ProgressBarLabelPlacement.BOTTOM
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Emplacement de l’étiquette. Les valeurs valides dans MXML sont <codeph>"right"</codeph>, <codeph>"left"</codeph>, <codeph>"bottom"</codeph>, <codeph>"center"</codeph> et <codeph>"top"</codeph>.
     
      <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>ProgressBarLabelPlacement.RIGHT</codeph>, <codeph>ProgressBarLabelPlacement.LEFT</codeph>, <codeph>ProgressBarLabelPlacement.BOTTOM</codeph>, <codeph>ProgressBarLabelPlacement.CENTER</codeph> et <codeph>ProgressBarLabelPlacement.TOP</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#ProgressBarLabelPlacement"><linktext>mx.controls.ProgressBarLabelPlacement</linktext></link></related-links></apiValue><apiValue id="mx.controls:ProgressBar:maximum:get"><apiName>maximum</apiName><shortdesc>
      Plus grande valeur possible de la progression du contrôle ProgressBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Plus grande valeur possible de la progression du contrôle ProgressBar. Vous ne pouvez utiliser cette propriété qu’en mode manual.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:minimum:get"><apiName>minimum</apiName><shortdesc>
      Plus petite valeur possible de la progression du contrôle ProgressBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Plus petite valeur possible de la progression du contrôle ProgressBar. Cette propriété est définie par le développeur uniquement en mode manuel.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:mode:get"><apiName>mode</apiName><shortdesc>
      Spécifie la méthode utilisée pour actualiser la barre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ProgressBarMode.EVENT
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie la méthode utilisée pour actualiser la barre. Utilisez une des valeurs suivantes dans MXML :
     
      <ul>
        <li><codeph>event</codeph> Le contrôle spécifié par la propriété <codeph>source</codeph> doit distribuer les événements progress et completed. Le contrôle ProgressBar utilise ces événements pour actualiser son état. Le contrôle ProgressBar n’est actualisé que si la valeur de la propriété <codeph>source</codeph> prolonge la classe EventDispatcher.</li>
     
        <li><codeph>polled</codeph> La propriété <codeph>source</codeph> doit spécifier un objet qui expose les méthodes <codeph>bytesLoaded</codeph> et <codeph>bytesTotal</codeph>. Le contrôle ProgressBar appelle ces méthodes pour actualiser son état.</li>
     
        <li><codeph>manual</codeph> Vous actualisez manuellement l’état du contrôle ProgressBar. Dans ce mode, vous spécifiez les propriétés <codeph>maximum</codeph> et <codeph>minimum</codeph> et utilisez la méthode <codeph>setProgress()</codeph> pour spécifier l’état. Ce mode est souvent utilisé lorsque la propriété <codeph>indeterminate</codeph> a la valeur <codeph>true</codeph>.</li>
      </ul>
     
      <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>ProgressBarMode.EVENT</codeph>, <codeph>ProgressBarMode.POLLED</codeph> et <codeph>ProgressBarMode.MANUAL</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#ProgressBarMode"><linktext>mx.controls.ProgressBarMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:ProgressBar:percentComplete:get"><apiName>percentComplete</apiName><shortdesc>
      Pourcentage d’accomplissement du processus. La plage va de 0 à 100.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Pourcentage d’accomplissement du processus. La plage va de 0 à 100. Utilisez la méthode <codeph>setProgress()</codeph> pour modifier le pourcentage.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:source:get"><apiName>source</apiName><shortdesc>
      Fait référence au contrôle dont ProgressBar mesure la progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Fait référence au contrôle dont ProgressBar mesure la progression. N’utilisez cette propriété qu’en event ou polled. L’usage consiste généralement à définir cette propriété sur un contrôle Loader.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:value:get"><apiName>value</apiName><shortdesc>
      Propriété en lecture seule qui contient la progression réalisée (entre les valeurs minimale et maximale).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Propriété en lecture seule qui contient la progression réalisée (entre les valeurs minimale et maximale).
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:ButtonLabelPlacement"><apiName>ButtonLabelPlacement</apiName><shortdesc>
  La classe ButtonLabelPlacement définit les constantes des valeurs autorisées de la propriété labelPlacement d’un contrôle Button, CheckBox, LinkButton ou RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ButtonLabelPlacement définit les constantes des valeurs autorisées de la propriété <codeph>labelPlacement</codeph> d’un contrôle Button, CheckBox, LinkButton ou RadioButton.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#Button"><linktext>mx.controls.Button</linktext></link><link href="mx.controls.xml#CheckBox"><linktext>mx.controls.CheckBox</linktext></link><link href="mx.controls.xml#LinkButton"><linktext>mx.controls.LinkButton</linktext></link><link href="mx.controls.xml#RadioButton"><linktext>mx.controls.RadioButton</linktext></link></related-links><apiValue id="mx.controls:ButtonLabelPlacement:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
	  Spécifie que le libellé doit s’afficher sous l’icône.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie que le libellé doit s’afficher sous l’icône.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ButtonLabelPlacement:LEFT"><apiName>LEFT</apiName><shortdesc>
	  Spécifie que le libellé doit s’afficher à gauche de l’icône.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie que le libellé doit s’afficher à gauche de l’icône.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ButtonLabelPlacement:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	  Spécifie que le libellé doit s’afficher à droite de l’icône.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie que le libellé doit s’afficher à droite de l’icône.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ButtonLabelPlacement:TOP"><apiName>TOP</apiName><shortdesc>
	  Spécifie que le libellé doit s’afficher au-dessus de l’icône.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie que le libellé doit s’afficher au-dessus de l’icône.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:Button"><apiName>Button</apiName><shortdesc>
  Le contrôle Button est un bouton rectangulaire couramment utilisé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:Button" replacement="spark.components.Button" since="4.0">
	</Alternative><styles><style inherit="no" name="selectedDisabledIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme icône lorsque le bouton est sélectionné et désactivé.
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedDownIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme icône lorsque le bouton est sélectionné et que le bouton de la souris est enfoncé.
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedOverIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme icône lorsque le bouton est sélectionné et que la souris survole le composant.
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedUpIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme icône lorsque le bouton est sélectionné et que le bouton de la souris est relevé.
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme icône lorsque le bouton est désactivé et non sélectionné.
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme icône lorsque le bouton n’est pas sélectionné et que le bouton de la souris est enfoncé.
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="overIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme icône lorsque le bouton n’est pas sélectionné et que la souris survole le contrôle.
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme icône lorsqu’un bouton de basculement n’est pas sélectionné et que la souris ne le survole pas.
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="icon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme icône par défaut. La définition de tout autre style d’icône écrase ce paramètre.
  
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedDisabledSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme enveloppe pour l’arrière-plan et la bordure lorsqu’un bouton bascule est sélectionné et désactivé.
 
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedDownSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme enveloppe pour l’arrière-plan et la bordure lorsqu’un bouton bascule est sélectionné et que le bouton de la souris est enfoncé.
  
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedOverSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsqu’un bouton de basculement est sélectionné et que la souris survole le contrôle.
  
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedUpSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsqu’un bouton de basculement est sélectionné et que la souris ne survole pas le contrôle.
 
  </description>
<default>"mx.skins.halo.ButtonSkin" 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme enveloppe pour l’arrière-plan et la bordure lorsque le bouton n’est pas sélectionné et est désactivé.
 
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme enveloppe pour l’arrière-plan et la bordure lorsque le bouton n’est pas sélectionné et que le bouton de la souris est enfoncé.
  
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="overSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsque le bouton n’est pas sélectionné et que la souris survole le contrôle.
  
  </description>
<default>"mx.skins.halo.ButtonSkin" 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsque le bouton n’est pas sélectionné et que la souris ne survole pas le contrôle.
  
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="skin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage par défaut pour l’arrière-plan et la bordure. 
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Espace entre le libellé du bouton et l’icône lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:Button" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte du libellé lorsque l’utilisateur clique sur le bouton.
  
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:Button" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte du libellé lorsque l’utilisateur déplace le pointeur de la souris sur le bouton.
  
  </description>
<default>0x2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Nombre de millisecondes entre les événements <codeph>buttonDown</codeph> si l’utilisateur maintient le bouton de la souris enfoncé.
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Nombre de millisecondes à attendre après le premier événement<codeph>buttonDown</codeph> avant de répéter les événements <codeph>buttonDown</codeph> à chaque intervalle <codeph>repeatInterval</codeph>.
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du composant et la partie supérieure de sa zone de contenu.
  
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du composant et la partie inférieure de sa zone de contenu.
  
  </description>
<default>2 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="labelVerticalOffset" owner="mx.controls:Button" playerVersion="Flash10" type="Number">
<description>
  Nombre de pixels du décalage vertical à appliquer à la position de libellé. Les valeurs positives déplacent le libellé vers le bas.
  
  </description>
<default>1 
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Espace entre le libellé et l’icône lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>gauche</codeph> ou <codeph>droite</codeph>.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.controls:Button" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de l’anneau du focus lorsque le composant est en focus.
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:Button" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:Button" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:Button" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:Button" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:Button" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:Button" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris le libellé du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.controls:Button" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage de surbrillance des contrôles. La première valeur indique la transparencé du haut de la surbrillance et la seconde valeur indique la transparence du bas de la surbrillance. La surbrillance couvre la moitié supérieure de l’habillage.
  
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.controls:Button" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Couleurs utilisées pour teindre l’arrière-plan du contrôle. Transmettez la même couleur pour les deux valeurs d’un contrôle à l’aspect plat.
  
  </description>
<default>[ 0xFFFFFF, 0xCCCCCC ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.controls:Button" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage d’arrière-plan des contrôles. Utilisez la valeur [1, 1] pour rendre l’arrière-plan des contrôles opaque.
  
  </description>
<default>[ 0.6, 0.4 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:Button" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Rayon des angles des composants. Les composants suivants prennent ce style en charge : Alert, Button, ComboBox, LinkButton, MenuBar, NumericStepper, Panel, ScrollBar, Tab, TitleWindow et tous les composants qui prennent en charge une propriété <codeph>borderStyle</codeph> définie sur <codeph>"solid"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:Button" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de la bordure. Les contrôles suivants prennent ce style en charge : Button, CheckBox, ComboBox, MenuBar, NumericStepper, ProgressBar, RadioButton, ScrollBar, Slider et tous les composants qui prennent en charge le style <codeph>borderStyle</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0xB7BABC</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  Indique quels angles du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus.
  
  </description>
<default>0.4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Button&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Button
    <b>Properties</b>
    autoRepeat="false|true"
    emphasized="false|true"
    fontContext="<i>IFontModuleFactory</i>"
    label=""
    labelPlacement="right|left|bottom|top"
    selected="false|true"
    selectedField="null"
    stickyHighlighting="false|true"
    toggle="false|true"
 
    <b>Styles</b>
    borderColor="0xAAB3B3"
    color="0x0B333C"
    cornerRadius="4"
    disabledColor="0xAAB3B3"
    disabledIcon="null"
    disabledSkin="mx.skins.halo.ButtonSkin"
    downIcon="null"
    downSkin="mx.skins.halo.ButtonSkin"
    fillAlphas="[0.6, 0.4]"
    fillColors="[0xE6EEEE, 0xFFFFFF]"
    focusAlpha="0.5"
    focusRoundedCorners"tl tr bl br"
    fontAntiAliasType="advanced"
    fontFamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="bold|normal"
    highlightAlphas="[0.3, 0.0]"
    horizontalGap="2"
    icon="null"
    kerning="false|true"
    leading="2"
    letterSpacing="0"
    overIcon="null"
    overSkin="mx.skins.halo.ButtonSkin"
    paddingBottom="2"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="2"
    repeatDelay="500"
    repeatInterval="35"
    selectedDisabledIcon="null"
    selectedDisabledSkin="mx.skins.halo.ButtonSkin"
    selectedDownIcon="null"
    selectedDownSkin="mx.skins.halo.ButtonSkin"
    selectedOverIcon="null"
    selectedOverSkin="mx.skins.halo.ButtonSkin"
    selectedUpIcon="null"
    selectedUpSkin="mx.skins.halo.ButtonSkin"
    skin="mx.skins.halo.ButtonSkin"
    textAlign="center|left|right"
    textDecoration="none|underline"
    textIndent="0"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x000000"
    upIcon="null"
    upSkin="mx.skins.halo.ButtonSkin"
    verticalGap="2"
 
    <b>Events</b>
    buttonDown="<i>No default</i>"
    change="<i>No default</i>"
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle Button est un bouton rectangulaire standard. Les contrôles Button montrent que l’on peut cliquer sur leur entrée. Leur face peut présenter un libellé, une icône ou les deux.
 
  <p>Les contrôles Button utilisent généralement des écouteurs d’événements pour effectuer une action lorsque l’utilisateur les sélectionne. Lorsque l’utilisateur clique sur un contrôle Button alors que celui-ci est activé, un événement <codeph>click</codeph> et un événement <codeph>buttonDown</codeph> sont distribués. Un contrôle Button distribue toujours des événements comme <codeph>mouseMove</codeph>, <codeph>mouseOver</codeph>, <codeph>mouseOut</codeph>, <codeph>rollOver</codeph>, <codeph>rollOut</codeph>, <codeph>mouseDown</codeph> et <codeph>mouseUp</codeph>, qu’ils soient activés ou non.</p>
 
  <p>Vous pouvez personnaliser l’apparence d’un contrôle Button et le transformer de bouton-poussoir en bouton à basculement. Vous pouvez modifier l’apparence du bouton en lui appliquant une enveloppe différente pour chacun de ses états.</p>
 
  <p>La police du libellé d’un contrôle Button est en gras. Si vous imbriquez une police pour l’utiliser dans le libellé du contrôle Button, vous devez imbriquer la police en gras. Par exemple :</p>
 
  <pre>
  &lt;mx:style>
    @font-face {
      src:url("../MyFont-Bold.ttf");        
      fontFamily: myFont;
      fontWeight: bold;
    }
   .myBoldStyle {
      fontFamily: myFont;
      fontWeight: bold;
    } 
  &lt;/mx:style>
  ...
  &lt;mx:Button ... styleName="myBoldStyle"/>
  </pre>
  
  <p>Le contrôle Button possède les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row><entry>Taille par défaut</entry><entry>Taille assez grande pour contenir le texte du libellé et les icônes</entry></row><row><entry>Taille minimale</entry><entry>0 pixel</entry></row><row><entry>Taille minimale</entry><entry>Aucune limite</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonExample.mxml"><swfblock conref="examples/ButtonExample.swf"/></example></apiClassifierDetail><adobeApiEvent id="mx.controls:Button_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété données change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
 
  <p>Lorsque vous utilisez un composant comme rendu d’élément, la propriété <codeph>data</codeph> contient les données à afficher. Vous pouvez écouter cet événement et mettre à jour le composant lorsque la propriété <codeph>data</codeph> change.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Button_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la propriété sélectionné change pour un contrôle Button à basculement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>selected</codeph> change pour un contrôle Button à basculement. Un contrôle Button à basculement implique que la propriété <codeph>toggle</codeph> soit définie sur <codeph>true</codeph>. Pour les contrôles RadioButton, cet événement est distribué lorsque la propriété <codeph>selected</codeph> change. Pour les contrôles CheckBox, cet événement est distribué uniquement lorsque l’utilisateur interagit avec le contrôle à l’aide de la souris.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Button_mx.events.FlexEvent.BUTTON_DOWN_buttonDown"><apiName>buttonDown</apiName><shortdesc>
  Distribué lorsque l’utilisateur clique sur le contrôle Button.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BUTTON_DOWN</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur clique sur le contrôle Button. Si la propriété <codeph>autoRepeat</codeph> est <codeph>true</codeph>, cet événement est redistribué en continu tant que le bouton demeure enfoncé.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:Button:Button"><apiName>Button</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:Button:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      Gestionnaire par défaut de l’événement MouseEvent.CLICK.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire par défaut de l’événement <codeph>MouseEvent.CLICK</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Button:protected:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc>
      Gestionnaire par défaut de l’événement MouseEvent.MOUSE_DOWN.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire par défaut de l’événement <codeph>MouseEvent.MOUSE_DOWN</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Button:protected:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc>
      Gestionnaire par défaut de l’événement MouseEvent.MOUSE_UP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire par défaut de l’événement <codeph>MouseEvent.MOUSE_UP</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Button:protected:rollOutHandler"><apiName>rollOutHandler</apiName><shortdesc>
      Gestionnaire par défaut de l’événement MouseEvent.ROLL_OUT.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire par défaut de l’événement <codeph>MouseEvent.ROLL_OUT</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Button:protected:rollOverHandler"><apiName>rollOverHandler</apiName><shortdesc>
      Gestionnaire par défaut de l’événement MouseEvent.ROLL_OVER.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire par défaut de l’événement <codeph>MouseEvent.ROLL_OVER</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:Button:selectedField"><apiName>selectedField</apiName><shortdesc>
      Nom du champ dans la propriété données qui indique la valeur de la propriété sélectionné du contrôle Button.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ dans la propriété <codeph>data</codeph> qui indique la valeur de la propriété <codeph>selected</codeph> du contrôle Button. Vous pouvez définir cette propriété lorsque vous utilisez le contrôle Button dans un rendu d’élément. La valeur par défaut est null, ce qui signifie que le contrôle Button ne définit pas son état sélectionné en fonction d’une propriété de la propriété <codeph>data</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:stickyHighlighting"><apiName>stickyHighlighting</apiName><shortdesc>
      Si la valeur est false, le contrôle Button affiche son habillage inférieur lorsque l’utilisateur clique dessus, mais le transforme ensuite en habillage supérieur lorsque l’utilisateur écarte sa souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>false</codeph>, le contrôle Button affiche son habillage inférieur lorsque l’utilisateur clique dessus, mais le transforme ensuite en habillage supérieur lorsque l’utilisateur écarte sa souris. Si la valeur est <codeph>true</codeph>, le contrôle Button affiche son habillage inférieur lorsque l’utilisateur clique dessus, puis continue à afficher son habillage lorsque l’utilisateur écarte sa souris.
     
      <p>Les sous-classes Button, comme les classes SliderThumb et ScrollThumb ou les flèches vers le haut et vers le bas d’une ScrollBar, définissent cette propriété sur <codeph>true</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:protected:textField"><apiName>textField</apiName><shortdesc>
      Objet UITextField interne qui effectue le rendu du libellé de ce bouton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier><apiDefaultValue>null 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet UITextField interne qui effectue le rendu du libellé de ce bouton.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:autoRepeat:get"><apiName>autoRepeat</apiName><shortdesc>
      Indique si des événements buttonDown doivent être distribués de façon répétée si l’utilisateur maintient le bouton de sa souris enfoncé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si des événements <codeph>buttonDown</codeph> doivent être distribués de façon répétée si l’utilisateur maintient le bouton de sa souris enfoncé.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:data:get"><apiName>data</apiName><shortdesc>
      La propriété data permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      La propriété <codeph>data</codeph> permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
     
      <p>Lorsque vous utilisez le contrôle comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex écrit automatiquement la valeur actuelle de l’élément dans la propriété <codeph>selected</codeph> de ce contrôle.</p>
     
      <p>Vous ne pouvez pas définir cette propriété dans MXML.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:Button:emphasized:get"><apiName>emphasized</apiName><shortdesc>
      Trace une bordure épaisse autour du contrôle Button lorsque ce dernier est en état relevé si la propriété mise en surbrillance est définie sur true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Trace une bordure épaisse autour du contrôle Button lorsque ce dernier est en état relevé si la propriété <codeph>emphasized</codeph> est définie sur <codeph>true</codeph>. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      
      Fabrique de module qui fournit le contexte des polices de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      
      Fabrique de module qui fournit le contexte des polices de ce composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:label:get"><apiName>label</apiName><shortdesc>
      Texte qui doit s’afficher sur le contrôle Button.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte qui doit s’afficher sur le contrôle Button.
     
      <p>Si le libellé est plus large que le contrôle Button, il est tronqué et se termine par des points de suspension (...). Le libellé complèt s’affiche sous forme d’info-bulle lorsque l’utilisateur passe sa souris sur le contrôle Button. Si vous avez également défini une info-bulle à l’aide de la propriété <codeph>tooltip</codeph>, l’info-bulle s’affiche à la place du texte du libellé.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:labelPlacement:get"><apiName>labelPlacement</apiName><shortdesc>
      Emplacement du libellé par rapport à l’icône spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ButtonLabelPlacement.RIGHT
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Emplacement du libellé par rapport à l’icône spécifiée. Les valides MXML valides sont <codeph>right</codeph>, <codeph>left</codeph>, <codeph>bottom</codeph> et <codeph>top</codeph>.
     
      <p>Dans ActionScript, vous pouvez utiliser les constantes suivantes pour définir cette propriété : <codeph>ButtonLabelPlacement.RIGHT</codeph>, <codeph>ButtonLabelPlacement.LEFT</codeph>, <codeph>ButtonLabelPlacement.BOTTOM</codeph> et <codeph>ButtonLabelPlacement.TOP</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:listData:get"><apiName>listData</apiName><shortdesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété listData du composant avec les données appropriées du contrôle List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété <codeph>listData</codeph> du composant avec les données appropriées du contrôle List. Le composant peut ensuite utiliser la propriété <codeph>listData</codeph> pour initialiser la propriété <codeph>data</codeph> du rendu d’élément supplémentaire ou de l’éditeur d’élément supplémentaire.
     
      <p>Vous ne définissez pas cette propriété dans MXML ou ActionScript. Flex la définit lorsque le composant est utilisé comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:Button:selected:get"><apiName>selected</apiName><shortdesc>
      Indique si un bouton de basculement est activé (true) ou non (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si un bouton de basculement est activé (<codeph>true</codeph>) ou non (<codeph>false</codeph>). Cette propriété ne peut être définie que si la propriété <codeph>toggle</codeph> est définie sur <codeph>true</codeph>.
     
      <p>Dans le cas d’un contrôle CheckBox, indique si une coche s’affiche dans la case. Dans le cas d’un contrôle RadioButton, indique si le contrôle est sélectionné.</p>
     
      <p>L’utilisateur peut modifier cette propriété en cliquant sur le contrôle, mais vous pouvez également la définir par programmation.</p>
     
      <p>Dans les versions précédentes, si la propriété <codeph>toggle</codeph> était définie sur <codeph>true</codeph>, le changement de cette propriété provoquait la distribution d’un événement <codeph>change</codeph>. Depuis la version 3.0, la définition de cette propriété par programme ne distribue qu’un événement <codeph>valueCommit</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:toggle:get"><apiName>toggle</apiName><shortdesc>
      Indique si l’état du bouton est à basculement ou non.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si l’état du bouton est à basculement ou non. Si la valeur est <codeph>true</codeph>, un clic sur le bouton le fait passer de l’état sélectionné à l’état non sélectionné. Vous pouvez obtenir ou définir cet état par programmation en utilisant la propriété <codeph>selected</codeph>. Si la valeur est <codeph>false</codeph>, le bouton ne demeure pas en état appuyé lorsque l’utilisateur le relâche. Dans ce cas, sa propriété <codeph>selected</codeph> a toujours la valeur <codeph>false</codeph>. Les boutons de ce type permettent d’accomplir des actions. Lorsque <codeph>toggle</codeph> est défini sur <codeph>false</codeph>, <codeph>selected</codeph> devient <codeph>false</codeph>, dans la mesure où seul un bouton de ce type peut être sélectionné.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:CheckBox"><apiName>CheckBox</apiName><shortdesc>
  Le contrôle CheckBox est composé d’une étiquette (facultative) et d’une petite case contenant ou non une coche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="toggle"/><Exclude kind="property" name="emphasized"/><Alternative owner="mx.controls:CheckBox" replacement="spark.components.CheckBox" since="4.0">
	</Alternative><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:CheckBox" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’un symbole de composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton ScrollBar.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:CheckBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage désactivé. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox désactivé, par la classe ComboBoxSkin pour tracer la flèche vers le bas d’un contrôle ComboBox désactivé et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois d’un contrôle DateChooser désactivé. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x999999</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:CheckBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox, par la classe ComboBoxSkin pour tracer la flèche vers le bas du contrôle ComboBox et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois du contrôle DateChooser. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x111111</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:CheckBox&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:CheckBox
    <strong>Styles</strong>
    disabledIconColor="0x999999"
    iconColor="0x2B333C"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IToggleButton</apiBaseInterface><apiBaseClassifier>mx.controls:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle CheckBox est composé d’une étiquette (facultative) et d’une petite case contenant ou non une coche. Vous pouvez placer l’étiquette de texte facultative à gauche, à droite, en haut ou en bas du contrôle CheckBox. Lorsque l’utilisateur clique sur un contrôle CheckBox ou sur le texte qui lui est associé, l’état du contrôle CheckBox passe de checked à unchecked ou vice versa. Les contrôles CheckBox rassemblent un ensemble de valeurs true ou false qui ne s’excluent pas mutuellement.
 
  <p>Le contrôle CheckBox possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Taille assez grande pour contenir l’étiquette</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Aucune limite</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="CheckBoxExample.mxml"><swfblock conref="examples/CheckBoxExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.controls:CheckBox:CheckBox"><apiName>CheckBox</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:Spacer"><apiName>Spacer</apiName><shortdesc>
  Le contrôle Spacer vous aide à disposer les enfants au sein d’un conteneur parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:Spacer&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds no new tag attributes.</p>
  
  <pre>
  &lt;mx:Spacer/&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle Spacer vous aide à disposer les enfants au sein d’un conteneur parent. Bien que le contrôle Spacer ne trace rien, il s’alloue un espace au sein de son conteneur parent. 
  
  <p>Dans l’exemple suivant, un contrôle Spacer flexible est utilisé pour pousser le contrôle Button sur la droite, afin de l’aligner sur le bord droit du conteneur HBox :</p>
 
  <pre>
  &lt;mx:HBox>
      &lt;mx:Image source="Logo.jpg"/>
      &lt;mx:Label text="Company XYZ"/>
      &lt;mx:Spacer width="100%"/>
      &lt;mx:Button label="Close"/>
  &lt;/mx:HBox>
  </pre>
 
  </apiDesc><example conref="SpacerExample.mxml"><swfblock conref="examples/SpacerExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.controls:Spacer:Spacer"><apiName>Spacer</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:DateField"><apiName>DateField</apiName><shortdesc>
  Le contrôle DateField est un champ de texte qui affiche la date accompagnée d’une icône de calendrier, sur sa droite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="editableDisabledSkin"/><Exclude kind="style" name="editableDownSkin"/><Exclude kind="style" name="editableOverSkin"/><Exclude kind="style" name="editableUpSkin"/><Exclude kind="style" name="borderThickness"/><Exclude kind="property" name="selectedItem"/><Exclude kind="property" name="selectedIndex"/><styles><style deprecatedReplacement="dateChooserStyleName" deprecatedSince="3.0" inherit="no" name="weekDayStyleName" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Nom de définition de la feuille de style pour configurer les noms de jours du contrôle. Si cela est omis, les noms de jours héritent des styles de texte du contrôle.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="dateChooserStyleName" deprecatedSince="3.0" inherit="no" name="todayStyleName" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Nom de définition de la feuille de style pour configurer l’apparence du texte numérique du jour actuel, mis en surbrillance dans le contrôle lorsque la propriété <codeph>showToday</codeph> est définie sur <codeph>true</codeph>. Indique une propriété de style <codeph>color</codeph> pour changer la couleur de police. Si cela est omis, le texte du jour actuel hérite des styles de texte du contrôle.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="todayColor" owner="mx.controls:DateField" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de surbrillance de la date d’aujourd’hui dans le contrôle DateChooser. La valeur par défaut est <codeph>0x2B333</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="skin" owner="mx.controls:DateField" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage par défaut pour l’arrière-plan et la bordure. La classe DateField n’a pas de valeur par défaut.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:DateField" playerVersion="Flash9" type="uint">
<description>
  Couleur de la zone de surbrillance de la date actuellement sélectionnée dans le contrôle DateChooser.
  </description>
<default>0xCDFFC1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:DateField" playerVersion="Flash9" type="uint">
<description>
  Couleur de la zone de surbrillance de la date lorsque l’utilisateur maintient le pointeur de la souris sur une date dans le contrôle DateChooser.
  </description>
<default>0xE3FFD6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" deprecatedReplacement="dateChooserStyleName" deprecatedSince="3.0" inherit="no" name="highlightAlphas" owner="mx.controls:DateField" playerVersion="Flash9" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage de surbrillance des contrôles. La première valeur indique la transparencé du haut de la surbrillance et la seconde valeur indique la transparence du bas de la surbrillance. La surbrillance couvre la moitié supérieure de l’habillage.
  
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="dateChooserStyleName" deprecatedSince="3.0" inherit="no" name="headerStyleName" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Nom de définition de la feuille de style pour configurer le texte (nom du mois et du jour) et l’apparence de la zone d’en-tête du contrôle.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" deprecatedReplacement="dateChooserStyleName" deprecatedSince="3.0" format="Color" inherit="yes" name="headerColors" owner="mx.controls:DateField" playerVersion="Flash9" type="Array">
<description>
  Couleurs de la bande située en haut du contrôle DateChooser. La valeur par défaut est <codeph>[ 0xE6EEEE, 0xFFFFFF ]</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" deprecatedReplacement="nextMonthStyleFilters, prevMonthStyleFilters, dateChooserStyleName" deprecatedSince="3.0" format="Color" inherit="no" name="fillColors" owner="mx.controls:DateField" playerVersion="Flash9" type="Array">
<description>
  Couleurs utilisées pour teindre l’arrière-plan du contrôle. Transmettez la même couleur pour les deux valeurs d’un contrôle à l’aspect plat.
  
  </description>
<default>[ 0xFFFFFF, 0xCCCCCC ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" deprecatedReplacement="nextMonthStyleFilters, prevMonthStyleFilters, dateChooserStyleName" deprecatedSince="3.0" inherit="no" name="fillAlphas" owner="mx.controls:DateField" playerVersion="Flash9" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage d’arrière-plan des contrôles. Utilisez la valeur [1, 1] pour rendre l’arrière-plan des contrôles opaque.
  
  </description>
<default>[ 0.6, 0.4 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dateChooserStyleName" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS à utiliser pour les styles de la liste déroulante du contrôle DataChooser. Par défaut, le contrôle DateChooser utilise les styles héritables du contrôle DateField. 
  
  <p>Vous pouvez utiliser ce sélecteur de classe pour définir les valeurs de toutes les propriétés de style de la classe DateChooser, notamment <codeph>cornerRadius</codeph>, <codeph>fillAlphas</codeph>, <codeph>fillColors</codeph>, <codeph>headerColors</codeph>, <codeph>headerStyleName</codeph>, <codeph>highlightAlphas</codeph>, <codeph>todayStyleName</codeph> et <codeph>weekdayStyleName</codeph>.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="dateChooserStyleName" deprecatedSince="3.0" format="Length" inherit="no" name="cornerRadius" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  Rayon des angles des composants. Les composants suivants prennent ce style en charge : Alert, Button, ComboBox, LinkButton, MenuBar, NumericStepper, Panel, ScrollBar, Tab, TitleWindow et tous les composants qui prennent en charge une propriété <codeph>borderStyle</codeph> définie sur <codeph>"solid"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:DateField" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur du cadre de sélection du contrôle DateChooser. La valeur par défaut est 1.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:DateField" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de la bordure. Les contrôles suivants prennent ce style en charge : Button, CheckBox, ComboBox, MenuBar, NumericStepper, ProgressBar, RadioButton, ScrollBar, Slider et tous les composants qui prennent en charge le style <codeph>borderStyle</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0xB7BABC</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:DateField" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:DateField" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:DateField" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:DateField" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:DateField" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:DateField" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:DateField" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage désactivé. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox désactivé, par la classe ComboBoxSkin pour tracer la flèche vers le bas d’un contrôle ComboBox désactivé et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois d’un contrôle DateChooser désactivé. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x999999</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:DateField" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox, par la classe ComboBoxSkin pour tracer la flèche vers le bas du contrôle ComboBox et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois du contrôle DateChooser. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x111111</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  Indique quels coins du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus.
  
  </description>
<default>0.4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:DateField&gt</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:DateField
    <strong>Properties</strong>
    dayNames="["S", "M", "T", "W", "T", "F", "S"]"
    disabledDays="<i>No default</i>"
    disabledRanges="<i>No default</i>"
    displayedMonth="<i>Current month</i>"
    displayedYear="<i>Current year</i>"
    dropdownFactory="<i>ClassFactory that creates an mx.controls.DateChooser</i>"
    firstDayOfWeek="0"
    formatString="MM/DD/YYYY"
    labelFunction="<i>Internal formatter</i>"
    maxYear="2100"
    minYear="1900"
    monthNames="["January", "February", "March", "April", "May",
    "June", "July", "August", "September", "October", "November",
    "December"]"
    monthSymbol=""
    parseFunction="<i>Internal parser</i>"
    selectableRange="<i>No default</i>"
    selectedDate="<i>No default</i>"
    showToday="true|false"
    yearNavigationEnabled="false|true"
    yearSymbol=""
  
   <strong>Styles</strong>
    borderColor="0xAAB3B3"
    borderThickness="1"
    color="0x0xB333C"
    dateChooserStyleName="dateFieldPopup"
    disabledColor="0xAAB3B3"
    disabledIconColor="0x999999"
    focusAlpha="0.5"
    focusRoundedCorners="tl tr bl br"
    fontAntiAliasType="advanced"
    fontFamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    iconColor="0x111111"
    leading="2"
    paddingLeft="0"
    paddingRight="0"
    rollOverColor="0xE3FFD6"
    selectionColor="0xB7F39B"
    textAlign="left|right|center"
    textDecoration="none|underline"
    textIndent="0"
    todayColor="0x2B333C"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    close="<i>No default</i>"
    dataChange="<i>No default</i>"
    open="<i>No default</i>"
    scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseClassifier>mx.controls:ComboBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle DateField est un champ de texte qui affiche la date accompagnée d’une icône de calendrier, sur sa droite. Lorsque l’utilisateur clique à l’intérieur du cadre de sélection du contrôle, un contrôle DateChooser s’affiche et présente les dates dans le mois de la date en cours. Si aucune date n’est sélectionnée, le champ de texte est vide et le mois de la date en cours s’affiche dans le contrôle DateChooser.
 
  <p>Lorsque le contrôle DateChooser est ouvert, l’utilisateur peut parcourir les mois et les années, puis sélectionner une date. Une fois la date sélectionnée, le contrôle DateChooser se ferme et le champ de texte affiche la date sélectionnée.</p>
 
  <p>L’utilisateur peut également saisir la date dans le champ de texte si la propriété <codeph>editable</codeph> du contrôle DateField est définie sur <codeph>true</codeph>.</p>
 
  <p>Le contrôle DateField possède les mêmes caractéristiques par défaut (présentées ci-dessous) que le contrôle DateChooser pour son choix de dates développé.</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Taille assez grande pour contenir le calendrier et assez large pour afficher le nom des jours</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Aucune limite</entry>
        </row></tbody></tgroup></adobetable>
 
 <p>Le contrôle DateField possède les caractéristiques par défaut suivantes pour le contrôle réduit :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Taille assez grande pour contenir la date mise en forme et l’icône de calendrier</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Aucune limite</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DateFieldExample.mxml"><swfblock conref="examples/DateFieldExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#DateChooser"><linktext>mx.controls.DateChooser</linktext></link></related-links><adobeApiEvent id="mx.controls:DateField_mx.events.DateChooserEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Distribué lorsqu’une interaction de l’utilisateur modifie le mois.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3616
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DateChooserEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.DateChooserEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une interaction de l’utilisateur modifie le mois.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DateField_mx.events.DropdownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Distribué lorsqu’un utilisateur sélectionne le champ pour ouvrir la liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3614
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.OPEN</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un utilisateur sélectionne le champ pour ouvrir la liste déroulante.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DateField_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
 
  <p>Lorsque vous utilisez un composant comme rendu d’élément, la propriété <codeph>data</codeph> contient les données à afficher. Vous pouvez écouter cet événement et mettre à jour le composant lorsque la propriété <codeph>data</codeph> change.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DateField_mx.events.DropdownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Distribué lorsqu’une date est sélectionnée ou lorsque l’utilisateur clique hors de la liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3615
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une date est sélectionnée ou lorsque l’utilisateur clique hors de la liste déroulante.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DateField_mx.events.CalendarLayoutChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsqu’une date est sélectionnée ou modifiée et lorsque le contrôle DataChooser se ferme.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3613
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CalendarLayoutChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CalendarLayoutChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une date est sélectionnée ou modifiée et lorsque le contrôle DataChooser se ferme.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:DateField:DateField"><apiName>DateField</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:DateField:close"><apiName>close</apiName><shortdesc>
      Ferme le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3621
      
      </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ferme le contrôle DateChooser.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DateField:dateToString"><apiName>dateToString</apiName><shortdesc>
      Met en forme une date dans une chaîne en fonction de l’argument outputFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Date mise en forme comme chaîne.
     
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Date"/><apiDesc>Date à mettre en forme.
     
      </apiDesc></apiParam><apiParam><apiItemName>outputFormat</apiItemName><apiType value="String"/><apiDesc>Chaîne définissant le format de date.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Met en forme une date dans une chaîne en fonction de l’argument <codeph>outputFormat</codeph>. L’argument <codeph>outputFormat</codeph> contient un motif dans lequel la chaîne <codeph>value</codeph> est mise en forme. Il peut contenir <codeph>"M"</codeph>, <codeph>"D"</codeph>, <codeph>"A"</codeph>, des caractères de délimitation et de ponctuation.
     
      </apiDesc><example><pre>var todaysDate:String = DateField.dateToString(new Date(), "MM/DD/YYYY");</pre>
      
      </example></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DateField:open"><apiName>open</apiName><shortdesc>
      Ouvre le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3620
      
      </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ouvre le contrôle DateChooser.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DateField:stringToDate"><apiName>stringToDate</apiName><shortdesc>
      Analyse un objet de chaîne contenant une date et retourne un objet Date correspondant à la chaîne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Date mise en forme comme objet Date.
     
      
      </apiDesc><apiType value="Date"/></apiReturn><apiParam><apiItemName>valueString</apiItemName><apiType value="String"/><apiDesc>Date à mettre en forme.
     
      </apiDesc></apiParam><apiParam><apiItemName>inputFormat</apiItemName><apiType value="String"/><apiDesc>Chaîne définissant le format de date.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Analyse un objet de chaîne contenant une date et retourne un objet Date correspondant à la chaîne. L’argument <codeph>inputFormat</codeph> contient le motif dans lequel la chaîne <codeph>valueString</codeph> est mise en forme. Il peut contenir <codeph>"M"</codeph>, <codeph>"D"</codeph>, <codeph>"A"</codeph>, des caractères de délimitation et de ponctuation.
     
      <p>La fonction ne vérifie pas la disponibilité de l’objet Date. Si la valeur de la date, du mois ou de l’année est NaN, cette méthode retourne la valeur null.</p>
     
      <p>Exemple :
      <pre>var dob:Date = DateField.stringToDate("06/30/2005", "MM/DD/YYYY");</pre>        
      </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:DateField:data:get"><apiName>data</apiName><shortdesc>
      La propriété data permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      La propriété <codeph>data</codeph> vous permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
     
      <p>Lorsque vous utilisez le contrôle comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex écrit automatiquement la valeur actuelle de l’élément dans la propriété <codeph>selectedDate</codeph> de ce contrôle.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateField:dayNames:get"><apiName>dayNames</apiName><shortdesc>
      Nom des jours de la semaine du contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3626
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[ "S", "M", "T", "W", "T", "F", "S" ]
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom des jours de la semaine du contrôle DateChooser. La définition de cette propriété change l’étiquette des jours du contrôle DateChooser. Dimanche est le premier jour (à l’index 0). Le reste des noms de la semaine suivent l’ordre normal.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:disabledDays:get"><apiName>disabledDays</apiName><shortdesc>
      Jours à désactiver dans une semaine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3627
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      </apiDefaultValue></apiValueDef><apiDesc>
      Jours à désactiver dans une semaine. Toutes les dates du mois, pour le jour spécifié, sont désactivées. Cette propriété change l’interface utilisateur du contrôle DateChooser. Les éléments de ce tableau peuvent avoir des valeurs comprises entre 0 (dimanche) et 6 (samedi). Par exemple, la valeur <codeph>[0, 6]</codeph> affiche le dimanche et le samedi.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:disabledRanges:get"><apiName>disabledRanges</apiName><shortdesc>
      Désactive un seul et plusieurs jours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3629
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      </apiDefaultValue></apiValueDef><apiDesc>
      Désactive un seul et plusieurs jours.
     
      <p>Cette propriété accepte un tableau d’objets en tant que paramètre. Chaque objet de ce tableau est un objet Date spécifiant un seul jour à désactiver, ou un objet contenant une des propriétés <codeph>rangeStart</codeph> et <codeph>rangeEnd</codeph>, voire les deux, dont les valeurs sont un objet Date. La valeur de ces propriétés décrit les limites de la période. Si l’une ou l’autre des propriétés est omise, la période est considérée comme illimitée dans le sens correspondant. Si vous ne spécifiez que la propriété <codeph>rangeStart</codeph>, toutes les dates qui se trouvent après la date spécifiée sont désactivées, y compris la date <codeph>rangeStart</codeph>. Si vous ne spécifiez que la propriété <codeph>rangeEnd</codeph>, toutes les dates qui se trouvent avant la date spécifiée sont désactivées, y compris la date <codeph>rangeEnd</codeph>. Pour ne désactiver qu’un seul jour, utilisez un objet Date unique qui spécifie une date du tableau. Les valeurs de temps sont mises à zéro à partir de l’objet Date si elles existent.</p>
     
      <p>L’exemple suivant désactive les dates suivantes : 11 janvier 2006, la période allant du 23 janvier au 10 février 2006 et le 1er mars 2006 et toutes les dates suivantes.</p>
     
      <pre>disabledRanges="{[new Date(2006,0,11), {rangeStart:
      new Date(2006,0,23), rangeEnd: new Date(2006,1,10)},
      {rangeStart: new Date(2006,2,1)}]}"</pre>
     
      <p>La définition de cette propriété change immédiatement l’apparence du contrôle DateChooser si les états désactivés sont inclus dans les propriétés <codeph>displayedMonth</codeph> et <codeph>displayedYear</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:displayedMonth:get"><apiName>displayedMonth</apiName><shortdesc>
      Utilisée avec la propriété displayedYear, la propriété displayedMonth spécifie le mois affiché dans le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3624
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Utilisée avec la propriété <codeph>displayedYear</codeph>, la propriété displayedMonth spécifie le mois affiché dans le contrôle <codeph>DateChooser</codeph>. Les numéros de mois sont basés sur zéro. Ainsi, janvier a la valeur 0 et décembre 11. La définition de cette propriété change immédiatement l’apparence du contrôle DateChooser. La valeur par défaut est le numéro du mois de la date d’aujourd’hui.
     
      <p>La valeur par défaut est le mois en cours.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:displayedYear:get"><apiName>displayedYear</apiName><shortdesc>
      Utilisée avec la propriété displayedMonth, la propriété displayedYear détermine l’année affichée dans le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3625
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Utilisée avec la propriété <codeph>displayedMonth</codeph>, la propriété <codeph>displayedYear</codeph> détermine l’année affichée dans le contrôle DateChooser. La définition de cette propriété change immédiatement l’apparence du contrôle DateChooser.
      
      <p>La valeur par défaut est l’année en cours.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:dropdown:get"><apiName>dropdown</apiName><shortdesc>
      Contient une référence au contrôle DateChooser enfermé par le contrôle DateField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls:DateChooser</apiValueClassifier></apiValueDef><apiDesc>
      Contient une référence au contrôle DateChooser enfermé par le contrôle DateField. La classe utilisée peut être définie avec <codeph>dropdownFactory</codeph> dans la mesure où elle prolonge <codeph>DateChooser</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:dropdownFactory:get"><apiName>dropdownFactory</apiName><shortdesc>
      Objet IFactory qui crée une occurrence dérivée du contrôle DateChooser à utiliser comme choix de dates. La valeur par défaut est un objet IFactory du contrôle DateChooser.
     
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      Objet IFactory qui crée une occurrence dérivée du contrôle DateChooser à utiliser comme choix de dates. La valeur par défaut est un objet IFactory du contrôle DateChooser.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:firstDayOfWeek:get"><apiName>firstDayOfWeek</apiName><shortdesc>
      Jour de la semaine (0 à 6, dont 0 est le premier élement du tableau dayNames) à afficher dans la première colonne du contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3623
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>0 (Sunday)
      </apiDefaultValue></apiValueDef><apiDesc>
      Jour de la semaine (0 à 6, dont 0 est le premier élement du tableau dayNames) à afficher dans la première colonne du contrôle DateChooser. La définition de cette propriété modifie l’ordre d’affichage des colonnes des jours.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:formatString:get"><apiName>formatString</apiName><shortdesc>
      Format de la date affichée dans le champ de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"MM/DD/YYYY"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Format de la date affichée dans le champ de texte. Cette propriété peut contenir toute combinaison de <codeph>"MM"</codeph>, <codeph>"DD"</codeph>, <codeph>"AA"</codeph>, <codeph>"AAAA"</codeph>, des caractères de délimitation et de ponctuation.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Fonction utilisée pour mettre en forme la date affichée dans la zone de texte du contrôle DateField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3618
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction utilisée pour mettre en forme la date affichée dans la zone de texte du contrôle DateField. Si aucune fonction n’est spécifiée, le format par défaut est utilisé.
      
      <p>La fonction prend un objet Date comme argument et retourne une chaîne au format à afficher, comme le montre l’exemple suivant :</p>
      <pre>
      public function formatDate(currentDate:Date):String {
          ...
          return dateString;
      }</pre>
     
      <p>Si vous autorisez l’utilisateur à saisir une date dans le champ de texte du contrôle DateField et que vous définissez une fonction de mise en forme avec la propriété <codeph>labelFunction</codeph>, vous devez spécifier une fonction pour la propriété <codeph>parseFunction</codeph> qui convertit la chaîne de texte saisie en objet Date pouvant être utilisé par le contrôle DateField, ou définir la propriété <codeph>parseFunction</codeph> sur null.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#DateField/parseFunction"><linktext>mx.controls.DateField.parseFunction</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateField:listData:get"><apiName>listData</apiName><shortdesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété listData du composant avec les données appropriées du contrôle List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété <codeph>listData</codeph> du composant avec les données appropriées du contrôle List. Le composant peut ensuite utiliser la propriété <codeph>listData</codeph> pour initialiser la propriété <codeph>data</codeph> du rendu d’élément supplémentaire ou de l’éditeur d’élément supplémentaire.
     
      <p>Vous ne définissez pas cette propriété dans MXML ou ActionScript. Flex la définit lorsque le composant est utilisé comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateField:maxYear:get"><apiName>maxYear</apiName><shortdesc>
      Dernière année sélectionnable du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>2100
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Dernière année sélectionnable du contrôle.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:minYear:get"><apiName>minYear</apiName><shortdesc>
      Première année sélectionnable du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1900
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Première année sélectionnable du contrôle.
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:monthNames:get"><apiName>monthNames</apiName><shortdesc>
      Noms des mois affichés au haut du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[ "January", "February", "March", "April", "May", "June", 
      "July", "August", "September", "October", "November", "December" ]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Noms des mois affichés au haut du contrôle. La propriété <codeph>monthSymbol</codeph> est ajoutée à la fin de la valeur spécifiée par la propriété <codeph>monthNames</codeph>, ce qui est utile dans des langues comme le japonais.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:monthSymbol:get"><apiName>monthSymbol</apiName><shortdesc>
      Cette propriété est ajoutée à la fin de la valeur spécifiée par la propriété monthNames afin de définir les noms des mois affichés en haut du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Cette propriété est ajoutée à la fin de la valeur spécifiée par la propriété <codeph>monthNames</codeph> afin de définir les noms des mois affichés en haut du contrôle. Certaines langues, comme le japonais, utilisent un symbole supplémentaire après le nom des mois. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:parseFunction:get"><apiName>parseFunction</apiName><shortdesc>
      Fonction utilisée pour analyser la date saisie sous forme de texte dans le champ de texte du contrôle DateField et renvoyer un objet Date au contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction utilisée pour analyser la date saisie sous forme de texte dans le champ de texte du contrôle DateField et renvoyer un objet Date au contrôle. Si aucune fonction n’est spécifiée, Flex utilise la fonction par défaut. Si vous définissez la propriété <codeph>parseFunction</codeph>, elle doit généralement effectuer l’inverse de la fonction spécifiée pour la propriété <codeph>labelFunction</codeph>.
      
      <p>La fonction prendre deux arguments et retourne un objet Date au contrôle DateField, comme le montre l’exemple suivant :</p>
      <pre>
      public function parseDate(valueString:String, inputFormat:String):Date {
          ...
          return newDate
      }</pre>
     
      <p>L’argument <codeph>valueString</codeph> contient ici la chaîne de texte saisie par l’utilisateur dans le champ de texte et l’argument <codeph>inputFormat</codeph> contient la mise en forme de la chaîne. Par exemple, si vous autorisez uniquement l’utilisateur à saisir une chaîne de texte utilisant deux caractères pour le mois, le jour et l’année, « MM/DD/AA » est transmis à l’argument <codeph>inputFormat</codeph>. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#DateField/labelFunction"><linktext>mx.controls.DateField.labelFunction</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateField:selectableRange:get"><apiName>selectableRange</apiName><shortdesc>
      Période au cours de laquelle il est possible de sélectionner des dates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3628
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Période au cours de laquelle il est possible de sélectionner des dates. Par exemple, une date comprise entre 04-12-2006 et 04-12-2007 peut être sélectionnée, mais les dates hors de cette période sont désactivées.
     
      <p>Cette propriété accepte un objet comme paramètre. L’objet contient deux propriétés : <codeph>rangeStart</codeph> et <codeph>rangeEnd</codeph>, de type Date. Si vous ne spécifiez que la propriété <codeph>rangeStart</codeph>, toutes les dates qui se trouvent après la date spécifiée sont activées. Si vous ne spécifiez que la propriété <codeph>rangeEnd</codeph>, toutes les dates qui se trouvent avant la date spécifiée sont activées. Pour n’activer qu’un seul jour d’un contrôle DateChooser, vous pouvez transmettre directement un objet Date. Les valeurs de temps sont mises à zéro à partir de l’objet Date si elles existent.</p>
     
      <p>L’exemple suivant active uniquement la période allant du 1er janvier 2006 au 30 juin 2006. Les mois qui se situent avant janvier et après juin n’apparaissent pas dans le contrôle DateChooser.</p>
     
      <pre>selectableRange="{{rangeStart : new Date(2006,0,1),
      rangeEnd : new Date(2006,5,30)}}"</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:selectedDate:get"><apiName>selectedDate</apiName><shortdesc>
      Date, telle qu’elle est sélectionnée dans le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3630
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Date, telle qu’elle est sélectionnée dans le contrôle DateChooser. Accepte un objet Date comme paramètre. Si l’objet Date entrant comporte toute valeur de temps, ces valeurs sont mises à zéro.
     
      <p>Maintenir la touche Ctrl enfoncée tout en sélectionnant la date actuellement sélectionnée, définit la propriété <codeph>selectedDate</codeph> sur <codeph>null</codeph> et distribue l’événement <codeph>change</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:showToday:get"><apiName>showToday</apiName><shortdesc>
      Si la valeur est true, indique que la date d’aujourd’hui est mise en surbrillance dans le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3622
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, indique que la date d’aujourd’hui est mise en surbrillance dans le contrôle DateChooser. La définition de cette propriété change immédiatement l’apparence du contrôle DateChooser.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:yearNavigationEnabled:get"><apiName>yearNavigationEnabled</apiName><shortdesc>
      Permet de parcourir les années.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Permet de parcourir les années. Lorsque la valeur est <codeph>true</codeph>, un bouton vers le haut et le bas s’affiche à droite de l’année affichée. Vous pouvez utiliser ces boutons pour changer l’année en cours. Ces boutons apparaissent à gauche de l’année dans les langues où l’année vient après le mois dans le format de date.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:yearSymbol:get"><apiName>yearSymbol</apiName><shortdesc>
      Cette propriété est ajoutée à la fin de l’année affichée en haut du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Cette propriété est ajoutée à la fin de l’année affichée en haut du contrôle. Certaines langues, comme le japonais, ajoutent un symbole après l’année. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:ColorPicker"><apiName>ColorPicker</apiName><shortdesc>
  Le contrôle ColorPicker permet à l’utilisateur de choisir une couleur dans un nuancier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="highlightAlphas"/><Exclude kind="style" name="fillColors"/><Exclude kind="style" name="fillAlphas"/><Exclude kind="property" name="text"/><styles><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Length" inherit="no" name="verticalGap" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Espace vertical entre les nuanciers de la grille. La valeur par défaut est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Length" inherit="no" name="textFieldWidth" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Largeur de la zone de texte qui s’affiche au-dessus de la grille du nuancier. La valeur par défaut est 72.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" inherit="no" name="textFieldStyleName" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  Nom de définition de la feuille de style pour configurer le contrôle de saisie de texte. La valeur par défaut est « swatchPanelTextField »
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Length" inherit="no" name="swatchWidth" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Largeur de chaque nuancier. La valeur par défaut est 12.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="swatchPanelStyleName" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  Nom du sélecteur de classe qui définit les propriétés de style du panneau de nuancier. La valeur par défaut est <codeph>undefined</codeph>. L’exemple suivant montre les propriétés de style par défaut qui sont définies par la classe <codeph>swatchPanelStyleName</codeph>. 
  <pre>
  ColorPicker {
      swatchPanelStyleName:mySwatchPanelStyle;
  }
  
  .mySwatchPanelStyle {
      backgroundColor:#E5E6E7;
      columnCount:20;
      horizontalGap:0;
      previewHeight:22;
      previewWidth:45;
      swatchGridBackgroundColor:#000000;
      swatchGridBorderSize:0;
      swatchHeight:12;
      swatchHighlightColor:#FFFFFF;
      swatchHighlightSize:1;
      swatchWidth:12;
      textFieldWidth:72;
      verticalGap:0;
  }
  </pre>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Length" inherit="no" name="swatchHighlightSize" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Taille de la surbrillance qui entoure le nuancier lorsque l’utilisateur survole un nuancier avec la souris. La valeur par défaut est 1.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Color" inherit="no" name="swatchHighlightColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="uint">
<description>
  Couleur de la surbrillance qui entoure le nuancier lorsque l’utilisateur survole un nuancier avec la souris. La valeur par défaut est <codeph>0xFFFFFF</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Length" inherit="no" name="swatchHeight" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Hauteur de chaque nuancier. La valeur par défaut est 12.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Length" inherit="no" name="swatchGridBorderSize" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Taille de la bordure unique qui entoure la grille de nuanciers. La valeur par défaut est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Color" inherit="no" name="swatchGridBackgroundColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="uint">
<description>
  Couleur du rectangle d’arrière-plan qui se trouve derrière la grille de nuancier. La valeur par défaut est <codeph>0x000000</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="swatchBorderSize" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Taille de contour des bordures des nuanciers. La valeur par défaut est 1.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="swatchBorderColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleurs des bordures des nuanciers. La valeur par défaut est <codeph>0x000000</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Length" inherit="no" name="previewWidth" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Largeur du nuancier d’aperçu le plus volumineux. La valeur par défaut est 45.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Length" inherit="no" name="previewHeight" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Hauteur du nuancier d’aperçu le plus volumineux qui s’affiche au-dessus de la grille de nuancier, en haut à gauche de l’objet SwatchPanel. La valeur par défaut est 22.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Marge supérieure de l’objet SwatchPanel au-dessus de la grille de nuancier. La valeur par défaut est 4.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Marge droite de l’objet SwatchPanel à côté de la grille de nuancier. La valeur par défaut est 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Marge gauche de l’objet SwatchPanel à côté de la grille de nuancier. La valeur par défaut est 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Marge inférieure de l’objet SwatchPanel sous la grille de nuancier. La valeur par défaut est 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Function">
<description>
  Fonction d’accélération permettant de contrôler l’interpolation du composant. La valeur par défaut est <codeph>undefined</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Longueur d’une transition ouverte, en millisecondes. La valeur par défaut est 250.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Length" inherit="no" name="horizontalGap" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Espace horizontal entre les nuanciers de la grille. La valeur par défaut est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Couleurs utilisées pour teindre l’arrière-plan du contrôle. Transmettez la même couleur pour les deux valeurs d’un contrôle à l’aspect plat. La valeur par défaut est <codeph>[ 0xFFFFFF, 0xCCCCCC ]</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage d’arrière-plan des contrôles. La valeur par défaut est <codeph>[ 0.6, 0.4 ]</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" inherit="no" name="columnCount" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="int">
<description>
  Nombre de colonnes de la grille de nuancier. La valeur par défaut est 20.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeEasingFunction" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Function">
<description>
  Fonction d’accélération permettant de contrôler l’interpolation du composant. La valeur par défaut est <codeph>undefined</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="closeDuration" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Longueur d’une transition fermée, en millisecondes. La valeur par défaut est 250.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de la bordure extérieure de l’objet SwatchPanel. La valeur par défaut est <codeph>0xA5A9AE</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="swatchPanelStyleName" deprecatedSince="3.0" format="Color" inherit="no" name="backgroundColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="uint">
<description>
  Couleur d’arrière-plan de l’objet SwatchPanel. La valeur par défaut est <codeph>0xE5E6E7</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:ColorPicker" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:ColorPicker" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:ColorPicker" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage désactivé. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox désactivé, par la classe ComboBoxSkin pour tracer la flèche vers le bas d’un contrôle ComboBox désactivé et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois d’un contrôle DateChooser désactivé. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x999999</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox, par la classe ComboBoxSkin pour tracer la flèche vers le bas du contrôle ComboBox et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois du contrôle DateChooser. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x111111</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  Indique quels coins du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus.
  
  </description>
<default>0.4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ColorPicker&gt;</code> tag inherits all of the properties of its
  superclass, and the following properties:</p>
 
  <pre>
  &lt;mx:ColorPicker
    <b>Properties</b>
    colorField="color"
    labelField="label"
    selectedColor="0x000000"
    selectedIndex="0"
    showTextField="true|false"
 
    <b>Styles</b>
    borderColor="0xA5A9AE"
    closeDuration="250"
    closeEasingFunction="undefined"
    color="0x0B333C"
    disabledIconColor="0x999999"
    fillAlphas="[0.6,0.4]"
    fillColors="[0xFFFFFF, 0xCCCCCC]"
    focusAlpha="0.5"
    focusRoundedCorners="tl tr bl br"
    fontAntiAliasType="advanced"
    fontfamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0""
    fontSize="10"
    fontStyle="normal"
    fontThickness="0"
    fontWeight="normal"
    highlightAlphas="[0.3,0.0]"
    iconColor="0x000000"
    leading="2"
    openDuration="250"
    openEasingFunction="undefined"
    paddingBottom="5"
    paddingLeft="5"
    paddingRight="5"
    paddingTop="4"
    swatchBorderColor="0x000000"
    swatchBorderSize="1"
    swatchPanelStyleName="undefined"
    textAlign="left"
    textDecoration="none"
    textIndent="0"
 
    <b>Events</b>
    change="<i>No default</i>"
    close="<i>No default</i>"
    enter="<i>No default</i>"
    itemRollOut="<i>No default</i>"
    itemRollOver="<i>No default</i>"
    open="<i>No default</i>"
    /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:ComboBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle ColorPicker permet à l’utilisateur de choisir une couleur dans un nuancier. Le mode par défaut du composant présente une seule couleur dans un bouton carré. Lorsque l’utilisateur clique sur le bouton de la couleur, le nuancier complet apparaît.
 
  <p>Le contrôle ColorPicker possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>ColorPicker : 22 par 22 pixels. Panneau de nuancier : dimensionné en fonction de la largeur du contrôle ColorPicker</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel par 0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Undefined</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ColorPickerExample.mxml"><swfblock conref="examples/ColorPickerExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="mx.controls:ColorPicker_mx.events.DropdownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Distribué à l’ouverture du panneau du nuancier de couleurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4920
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.OPEN</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à l’ouverture du panneau du nuancier de couleurs.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ColorPicker_mx.events.ColorPickerEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  Distribué lorsque la souris de l’utilisateur survole un nuancier de l’objet SwatchPanel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4923
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ColorPickerEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events.ColorPickerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la souris de l’utilisateur survole un nuancier de l’objet SwatchPanel.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ColorPicker_mx.events.ColorPickerEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  Distribué lorsque la souris de l’utilisateur cesse de survoler un nuancier de l’objet SwatchPanel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4924
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ColorPickerEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events.ColorPickerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la souris de l’utilisateur cesse de survoler un nuancier de l’objet SwatchPanel.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ColorPicker_mx.events.ColorPickerEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  Distribué si la propriété editable de l’objet ColorPicker est définie sur true et si l’utilisateur appuie sur la touche Entrée après avoir saisi une valeur de couleur hexadécimale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4919
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ColorPickerEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.ColorPickerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué si la propriété <codeph>editable</codeph> de l’objet ColorPicker est définie sur <codeph>true</codeph> et si l’utilisateur appuie sur la touche Entrée après avoir saisi une valeur de couleur hexadécimale.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ColorPicker_mx.events.DropdownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Distribué lors de la fermeture du panneau de nuancier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4921
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lors de la fermeture du panneau de nuancier.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ColorPicker_mx.events.ColorPickerEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la couleur sélectionée change après une interaction de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4918
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ColorPickerEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.ColorPickerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la couleur sélectionée change après une interaction de l’utilisateur.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:ColorPicker:ColorPicker"><apiName>ColorPicker</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:ColorPicker:close"><apiName>close</apiName><shortdesc>
      Masque l’objet SwatchPanel déroulant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4926
      
      </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>trigger</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
      Masque l’objet SwatchPanel déroulant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ColorPicker:open"><apiName>open</apiName><shortdesc>
      Affiche l’objet SwatchPanel déroulant qui présente des couleurs que les utilisateurs peuvent sélectionner.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4925
      
      </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Affiche l’objet SwatchPanel déroulant qui présente des couleurs que les utilisateurs peuvent sélectionner.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:ColorPicker:colorField:get"><apiName>colorField</apiName><shortdesc>
      Nom du champ des objets dans le tableau dataProvider qui indique les valeurs hexadécimales des couleurs affichées par le panneau de nuancier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4927
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"color"
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ des objets dans le tableau dataProvider qui indique les valeurs hexadécimales des couleurs affichées par le panneau de nuancier.
     
      <p>Si les objets dataProvider ne comportent pas de champ de couleur, définissez la propriété <codeph>colorField</codeph> de façon à utiliser le nom de champ approprié. Cette propriété est disponible, mais pas significative, si l’objet dataProvider est un tableau de valeurs des couleurs hexadécimales.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ColorPicker:labelField:get"><apiName>labelField</apiName><shortdesc>
      Nom du champ des éléments dans le tableau dataProvider qui contient le texte à afficher en tant qu’étiquette dans la zone de texte de l’objet SwatchPanel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4928
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ des éléments dans le tableau dataProvider qui contient le texte à afficher en tant qu’étiquette dans la zone de texte de l’objet SwatchPanel.
     
      <p>Si les objets dataProvider ne comportent pas de champ d’étiquette, définissez la propriété <codeph>true</codeph> de façon à utiliser le nom de champ approprié. Cette propriété est disponible, mais pas significative, si l’objet dataProvider est un tableau de valeurs des couleurs hexadécimales.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ColorPicker:selectedColor:get"><apiName>selectedColor</apiName><shortdesc>
      Valeur de la couleur actuellement sélectionnée dans l’objet SwatchPanel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4932
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
      Valeur de la couleur actuellement sélectionnée dans l’objet SwatchPanel. Dans la balise &lt;mx:ColorPicker> uniquement, vous pouvez définir cette propriété sur un nom de couleur de chaîne standard, par exemple « blue ». Si l’objet dataProvider comporte une entrée pour la couleur noire (0x000000), la valeur par défaut est 0. Sinon, la valeur par défaut est la couleur de l’élément qui se trouve à l’index 0 du fournisseur de données.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ColorPicker:showTextField:get"><apiName>showTextField</apiName><shortdesc>
      Indique si la zone de texte qui indique l’étiquette de couleur ou la valeur de couleur hexadécimale doit être affichée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si la zone de texte qui indique l’étiquette de couleur ou la valeur de couleur hexadécimale doit être affichée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ColorPicker:protected:swatchStyleFilters:get"><apiName>swatchStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre de l’objet ColorPicker au nuancier d’aperçu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre de l’objet ColorPicker au nuancier d’aperçu. 
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:ColorPicker:selectedIndex:set"><apiName>selectedIndex</apiName><shortdesc>
      Index du fournisseur de données de l’élement sélectionné dans l’objet SwatchPanel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4931
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Index du fournisseur de données de l’élement sélectionné dans l’objet SwatchPanel. La définition de cette propriété permet de définir la couleur sélectionnée sur la couleur correspondant à l’index, de définir l’index sélectionné dans le nuancier déroulant sur la valeur de propriété <codeph>selectedIndex</codeph> et d’afficher l’étiquette associée dans la zone de texte. La valeur par défaut est l’index correspondant à la couleur noire (0x000000) si elle est trouvée. Sinon, la valeur est de 0.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:SWFLoader"><apiName>SWFLoader</apiName><shortdesc>
  Le contrôle SWFLoader charge et affiche un fichier SWF donné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><effects><effect event="complete" name="completeEffect" owner="mx.controls:SWFLoader">
<description>
  Effet qui commence lorsque l’événement complete est distribué.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.controls:SWFLoader" playerVersion="Flash9" type="String">
<description>
  Alignement vertical du contenu si aucune proportion de un à un ne lui est affectée. Valeurs possibles : <codeph>"top"</codeph>, <codeph>"middle"</codeph> et <codeph>"bottom"</codeph>.
  </description>
<default>"top"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.controls:SWFLoader" playerVersion="Flash9" type="String">
<description>
  Alignement horizontal du contenu si aucune proportion de un à un ne lui est affectée. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
  </description>
<default>"left"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="brokenImageSkin" owner="mx.controls:SWFLoader" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage SWFLoader si le contrôle ne parvient pas à charger le contenu. La valeur par défaut est le symbole « __brokenImage » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="brokenImageBorderSkin" owner="mx.controls:SWFLoader" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage de bordure SWFLoader si le contrôle ne parvient pas à charger le contenu.
  </description>
<default>BrokenImageBorderSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The &lt;mx:SWFLoader&gt; tag inherits all of the tag attributes
  of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:SWFLoader
    <strong>Properties</strong>
    autoLoad="true|false"
    loadForCompatibility="false|true"
    loaderContext="null"
    maintainAspectRatio="true|false"
    scaleContent="true|false"
    showBusyCursor="false|true"
    source="<i>No default</i>"
    trustContent="false|true"
  
    <strong>Styles</strong>
    brokenImageBorderSkin="BrokenImageBorderSkin"
    brokenImageSkin="<i>'__brokenImage' symbol in Assets.swf</i>"
    horizontalAlign="left|center|right"
    verticalAlign="top|middle|bottom"
  
    <strong>Effects</strong>
    completeEffect="<i>No default</i>"
    
    <strong>Events</strong>
    complete="<i>No default</i>"
    httpStatus="<i>No default</i>"
    init="<i>No default</i>"
    ioError="<i>No default</i>"
    open="<i>No default</i>"
    progress="<i>No default</i>"
    securityError="<i>No default</i>"
    unload="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFLoader</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle SWFLoader charge et affiche un fichier SWF donné. Le contrôle SWFLoader est généralement utilisé pour charger une application Flex dans une application Flex hôte.
 
  <p><b>Remarque :</b> vous pouvez utiliser le contrôle SWFLoader pour charger un fichier d’image GIF, JPEG ou PNG au moment de l’exécution, pour charger un objet ByteArray représentant une image SWF, GIF, JPEG ou PNG au moment de l’exécution ou pour charger une version imbriquée de n’importe lequel de ces types de fichiers, ainsi que les fichiers SVG, au moment de la compilation à l’aide de <codeph>@Embed(source=’filename’)</codeph>. Toutefois, le contrôle Image convient mieux et doit être utilisé pour la plupart des chargement d’images. Le contrôle Image est également conçu pour être utilisé dans les rendus d’élément et les éditeurs d’élément personnalisés. Lorsque vous utilisez le contrôle SWFLoader ou Image avec un fichier SVG, vous ne pouvez charger le fichier SVG que s’il a été imbriqué dans votre application à l’aide d’une déclaration Embed. Vous ne pouvez pas charger un fichier SVG à partir du réseau au moment de l’exécution.</p>
 
  <p>Le contrôle SWFLoader permet de mettre son contenu à l’échelle et de définir sa taille. Il peut également se redimensionner pour adapter sa taille à son contenu. Par défaut, le contenu est mis à l’échelle pour s’adapter à la taille du contrôle SWFLoader. Il peut également charger du contenu sur demande par programme et contrôler la progression du chargement.</p>  
 
  <p>Un contrôle SWFLoader ne peut pas recevoir le focus. En revanche, le contenu d’un contrôle SWFLoader peut accepter le focus et avoir ses propres interactions de focus.</p>
 
  <p>Le contrôle SWFLoader possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Largeur et hauteur suffisamment importantes pour le contenu chargé</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Undefined</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="local.mxml"/><example conref="SimpleLoader.mxml"><swfblock conref="examples/SimpleLoader.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Image"><linktext>mx.controls.Image</linktext></link></related-links><adobeApiEvent id="mx.controls:SWFLoader_flash.events.Event.UNLOAD_unload"><apiName>unload</apiName><shortdesc>
  Distribué lorsqu’un objet chargé est supprimé ou lorsqu’un second chargement est effectué par le même contrôle SWFLoader et que le contenu d’origine est supprimé avant le début du nouveau chargement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.UNLOAD</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un objet chargé est supprimé ou lorsqu’un second chargement est effectué par le même contrôle SWFLoader et que le contenu d’origine est supprimé avant le début du nouveau chargement.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
  Distribué lorsqu’une erreur de sécurité se produit pendant le chargement du contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une erreur de sécurité se produit pendant le chargement du contenu. Pour plus d’informations, voir la classe SecurityErrorEvent.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  Distribué lors du chargement de contenu d’un contenu. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lors du chargement de contenu d’un contenu. 
 
  <p>Cet événement est distribué que le chargement soit déclenché par un paramètre autoload ou par un appel explicite à la méthode <codeph>load()</codeph>.</p>
 
  <p><b>Remarque :</b> il n’est pas assuré que l’événement <codeph>progress</codeph> soit distribué. L’événement <codeph>complete</codeph> peut être reçu sans qu’aucun événement <codeph>progress</codeph> ne soit distribué. Ceci peut se produire si le contenu chargé est un fichier local.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.Event.OPEN_open"><apiName>open</apiName><shortdesc>
  Distribué lors du démarrage d’une opération réseau.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lors du démarrage d’une opération réseau.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  Distribué lorsqu’une erreur d’entrée/sortie se produit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une erreur d’entrée/sortie se produit.
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.IOErrorEvent.xml"><linktext>flash.events.IOErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.Event.INIT_init"><apiName>init</apiName><shortdesc>
  Distribué lorsqu’il est possible d’accéder aux propriétés et aux méthodes d’un fichier SWF chargé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.INIT</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’il est possible d’accéder aux propriétés et aux méthodes d’un fichier SWF chargé. Pour que cet événement soit distribué, les deux conditions suivantes doivent être remplies :
 
  <ul>
    <li>Il est possible d’accéder à toutes les propriétés et méthodes associées à l’objet chargé et celles associées au contrôle.</li>
    <li>L’exécution des constructeurs de tous les objets enfant est terminée.</li>
  </ul>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><shortdesc>
  Distribué lorsqu’une requête réseau est envoyée via le protocole HTTP et que Flash Player ou AIR peut détecter le code d’état HTTP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une requête réseau est envoyée via le protocole HTTP et que Flash Player ou AIR peut détecter le code d’état HTTP.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Distribué lorsque le chargement du contenu est terminé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le chargement du contenu est terminé.
 
  <p>Cet événement est distribué que le chargement soit déclenché par un paramètre autoload ou par un appel explicite à la méthode <codeph>load()</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:SWFLoader:SWFLoader"><apiName>SWFLoader</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:SWFLoader:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      Gestionnaire par défaut de l’événement MouseEvent.CLICK.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>objet événement.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gestionnaire par défaut de l’événement <codeph>MouseEvent.CLICK</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:SWFLoader:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      
      Obtenez les limites de l’application chargée qui sont visibles pour l’utilisateur à l’écran.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet <codeph>Rectangle</codeph> incluant la portion visible de cet objet. Le rectangle utilise les coordonnées globales.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>allApplications</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Détermine si le rectangle visible est calculé uniquement en fonction des objets d’affichage de cette application ou également de toutes les applications parent. L’inclusion d’autres applications parent peut réduire la zone visible retournée. Si la valeur est <codeph>true</codeph>, toutes les applications sont utilisées pour rechercher la zone visible. Sinon, seuls les objets d’affichage de cette application sont utilisés.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Obtenez les limites de l’application chargée qui sont visibles pour l’utilisateur à l’écran.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:SWFLoader:load"><apiName>load</apiName><shortdesc>
      Charge une image ou un fichier SWF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>URL absolue ou relative du fichier GIF, JPEG, PNG ou SWF à charger.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Charge une image ou un fichier SWF. L’argument <codeph>url</codeph> peut faire référence à un fichier GIF, JPEG, PNG ou SWF. Vous ne pouvez pas utiliser cette méthode pour charger un fichier SVG. Vous devez en revanche le charger à l’aide d’une déclaration Embed avec la propriété <codeph>source</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:SWFLoader:unloadAndStop"><apiName>unloadAndStop</apiName><shortdesc>
      Décharge une image ou un fichier SWF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invokeGarbageCollector</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc> Indique au nettoyeur de mémoire de s’exécuter sur les objets SWF enfant (<codeph>true</codeph>) ou pas (<codeph>false</codeph>). Si vous déchargez plusieurs objets de façon asynchrone, définissez le paramètre <codeph>gc</codeph> sur <codeph>false</codeph> afin d’améliorer les performances de l’application. Toutefois, si ce paramètre est défini sur <codeph>false</codeph>, les objets multimédia et les objets d’affichage du fichier SWF enfant peuvent rester en mémoire après le déchargement du fichier SWF enfant.  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Décharge une image ou un fichier SWF. Au retour de cette méthode, la valeur de la propriété <codeph>source</codeph> est null. Cela est uniquement pris en charge si le Flash Player hôte est de version 10 ou supérieure. Si le Flash Player hôte est inférieur à la version 10, cette méthode décharge le contenu comme si la propriété <codeph>source</codeph> avait la valeur null. Cette méthode tente de décharger les fichiers SWF qui ont été chargés en supprimant les références aux objets EventDispatcher, NetConnection, Timer, Sound ou Video du fichier SWF enfant. Par conséquent, les actions suivantes sont effectuées dans le fichier SWF enfant et la liste d’affichage du fichier SWF enfant : 
      <ul>
      <li>Les sons sont arrêtés.</li>
      <li>Les écouteurs d’événement sont supprimés de la scène.</li>
      <li>Les écouteurs d’événement des événements <codeph>enterFrame</codeph>, <codeph>frameConstructed</codeph>, <codeph>exitFrame</codeph>, <codeph>activate</codeph> et <codeph>deactivate</codeph> sont supprimés.</li>
      <li>Les horloges sont arrêtées.</li>
      <li>Les occurrences Camera et Microphone sont détachées.</li>
      <li>Les clips sont arrêtés.</li>
      </ul>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:SWFLoader:autoLoad:get"><apiName>autoLoad</apiName><shortdesc>
      Indicateur précisant si le contenu commence automatiquement à être chargé ou s’il attend l’appel de la méthode load().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si le contenu commence automatiquement à être chargé ou s’il attend l’appel de la méthode <codeph>load()</codeph>. Si la valeur est <codeph>true</codeph>, le contenu est chargé automatiquement. Si la valeur est <codeph>false</codeph>, vous devez appeler la méthode <codeph>load()</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      Nombre d’octets du fichier SWF ou image déjà chargé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Nombre d’octets du fichier SWF ou image déjà chargé.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      Taille totale du fichier SWF ou image.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Taille totale du fichier SWF ou image.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
     
      Vérifie si l’enfant autorise son parent à accéder à ses objets d’affichage ou à écouter les messages qui prennent leur origine dans l’enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     
      Vérifie si l’enfant autorise son parent à accéder à ses objets d’affichage ou à écouter les messages qui prennent leur origine dans l’enfant. La valeur est <codeph>true</codeph> si l’accès est autorisé. Sinon, la valeur est <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:content:get"><apiName>content</apiName><shortdesc>
      Cette propriété contient l’objet représentant le contenu qui a été chargé dans le contrôle SWFLoader.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3134
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/><apiTipTexts><apiTipText>Renvoie le contenu du contrôle SWFLoader.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Cette propriété contient l’objet représentant le contenu qui a été chargé dans le contrôle SWFLoader. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      Hauteur du contenu mis à l’échelle et chargé par le contrôle, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hauteur du contenu mis à l’échelle et chargé par le contrôle, en pixels. Notez qu’il ne s’agit pas de la hauteur du contrôle, mais de celle du contenu chargé. Utilisez la propriété <codeph>height</codeph> du contrôle pour obtenir sa hauteur.
     
      <p>La valeur de cette propriété n’est pas finale lorsque l’événement <codeph>complete</codeph> est déclenché. Vous pouvez obtenir la valeur après le déclenchement de l’événement <codeph>updateComplete</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      Largeur du contenu mis à l’échelle et chargé par le contrôle, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Largeur du contenu mis à l’échelle et chargé par le contrôle, en pixels. Notez qu’il ne s’agit pas de la largeur du contrôle, mais de celle du contenu chargé. Utilisez la propriété <codeph>width</codeph> du contrôle pour obtenir sa largeur.
     
      <p>La valeur de cette propriété n’est pas finale lorsque l’événement <codeph>complete</codeph> est déclenché. Vous pouvez obtenir la valeur après le déclenchement de l’événement <codeph>updateComplete</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:loadForCompatibility:get"><apiName>loadForCompatibility</apiName><shortdesc>
      Indicateur précisant si le contenu est chargé afin qu’il puisse interagir avec des applications de version différente du compilateur Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si le contenu est chargé afin qu’il puisse interagir avec des applications de version différente du compilateur Flex. La compatibilité avec d’autres applications Flex s’effectue en chargeant l’application dans une classe ApplicationDomain sœur (ou homologue). Cet indicateur est ignoré si le contenu doit être chargé dans un objet SecurityDomain différent. Si la valeur est <codeph>true</codeph>, le contenu est chargé dans une classe ApplicationDomain sœur. Si la valeur est <codeph>false</codeph>, le contenu est chargé dans une classe ApplicationDomain enfant.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:loaderContext:get"><apiName>loaderContext</apiName><shortdesc>
      Objet LoaderContext à utiliser pour contrôler le chargement du contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.system:LoaderContext"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet LoaderContext à utiliser pour contrôler le chargement du contenu. Il s’agit d’une propriété avancée. La plupart du temps, vous pouvez utiliser la propriété <codeph>trustContent</codeph>.
     
      <p>La valeur par défaut est <codeph>null</codeph>, ce qui entraîne le contrôle à utiliser la propriété <codeph>trustContent</codeph> pour créer un objet LoaderContext que vous pouvez relire une fois le chargement commencé.</p>
     
      <p>Pour utiliser un objet LoaderContext personnalisé, vous devez comprendre les classes SecurityDomain et ApplicationDomain. La définition de cette propriété ne lance pas un chargement. Vous devez la définir avant le début du chargement. Cela ne signifie pas que vous devez définir la propriété <codeph>autoLoad</codeph> sur <codeph>false</codeph>, car le chargement ne commence pas immédiatement. Mais attendre que l’événement <codeph>creationComplete</codeph> la définisse est trop tard.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.LoaderContext.xml"><linktext>flash.system.LoaderContext</linktext></link><link href="" invalidHref="flash.system.ApplicationDomain.xml"><linktext>flash.system.ApplicationDomain</linktext></link><link href="" invalidHref="flash.system.SecurityDomain.xml"><linktext>flash.system.SecurityDomain</linktext></link></related-links></apiValue><apiValue id="mx.controls:SWFLoader:maintainAspectRatio:get"><apiName>maintainAspectRatio</apiName><shortdesc>
      Indicateur précisant si les proportions du contenu chargé doivent être conservées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si les proportions du contenu chargé doivent être conservées. Si la valeur est <codeph>true</codeph>, indique que l’image doit s’afficher avec les mêmes proportions de hauteur à largeur que l’image d’origine.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc>
     
      Vérifie si le parent autorise son enfant à accéder à ses objets d’affichage ou à écouter les messages qui prennent leur origine dans le parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     
      Vérifie si le parent autorise son enfant à accéder à ses objets d’affichage ou à écouter les messages qui prennent leur origine dans le parent. La valeur est <codeph>true</codeph> si l’accès est autorisé. Sinon, la valeur est <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:percentLoaded:get"><apiName>percentLoaded</apiName><shortdesc>
      Pourcentage du fichier image ou SWF déjà chargé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Pourcentage du fichier image ou SWF déjà chargé.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:scaleContent:get"><apiName>scaleContent</apiName><shortdesc>
      Indicateur précisant si le contenu doit être mis à l’échelle pour correspondre à la taille du contrôle ou si le contrôle doit être redimensionné en fonction de la taille du contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si le contenu doit être mis à l’échelle pour correspondre à la taille du contrôle ou si le contrôle doit être redimensionné en fonction de la taille du contenu. Si la valeur est <codeph>true</codeph>, le contenu est mis à l’échelle pour correspondre au contrôle SWFLoader. Si la valeur est <codeph>false</codeph>, le contrôle SWFLoader est mis à l’échelle en fonction du contenu. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:showBusyCursor:get"><apiName>showBusyCursor</apiName><shortdesc>
      Indicateur précisant si un curseur occupé doit s’afficher pendant le chargement du contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si un curseur occupé doit s’afficher pendant le chargement du contenu. Si la valeur est <codeph>true</codeph>, un curseur occupé s’affiche pendant le chargement du contenu. Le curseur occupé par défaut est l’occurrence mx.skins.halo.BusyCursor telle qu’elle est définie par la propriété <codeph>busyCursor</codeph> de la classe CursorManager.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.managers.xml#CursorManager"><linktext>mx.managers.CursorManager</linktext></link></related-links></apiValue><apiValue id="mx.controls:SWFLoader:smoothBitmapContent:get"><apiName>smoothBitmapContent</apiName><shortdesc>
      Indicateur qui signale s’il faut lisser le contenu lorsqu’il est redimensionné.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur qui signale s’il faut lisser le contenu lorsqu’il est redimensionné. Seul un contenu Bitmap peut être lissé. Si la valeur est <codeph>true</codeph> et le contenu est un Bitmap, alors la propriété de lissage du contenu est définie sur <codeph>true</codeph>. Si la valeur est <codeph>false</codeph>, le contenu n’est pas lissé. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:source:get"><apiName>source</apiName><shortdesc>
      Nom d’URL, d’objet, de classe ou de chaîne d’une classe à charger comme contenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom d’URL, d’objet, de classe ou de chaîne d’une classe à charger comme contenu. La propriété <codeph>source</codeph> prend la forme suivante :
     
      <p><pre>
      <codeph>source="<i>URLOrPathOrClass</i>"</codeph></pre></p>
     
      <p><pre>
      <codeph>source="@Embed(source='<i>PathOrClass</i>')"</codeph></pre></p>
     
      <p>La valeur de la propriété <codeph>source</codeph> représente une URL relative ou absolue, un objet ByteArray représentant un fichier SWF, GIF, JPEG ou PNG, un objet qui implémente l’objet IFlexDisplayObject, une classe dont le type implémente l’objet IFlexDisplayObject ou une chaîne qui représente une classe. </p> 
     
      <p>Lorsue vous spécifiez un chemin d’accès à un fichier SWF, GIF, JPEG, PNG ou SVG, Flex convertit automatiquement le fichier dans le type de données approprié pour l’utiliser avec le contrôle SWFLoader.</p> 
     
      <p>Si vous omettez la déclaration Embed, Flex charge le fichier référencé au moment de l’exécution. Il ne fait pas partie du fichier SWF généré. Au moment de l’exécution, la propriété <codeph>source</codeph> ne prend en charge que le chargement des images GIF, JPEG, PNG et des fichiers SWF.</p>
     
      <p>Les utilisateurs de Flex Data Services peuvent utiliser le contrôle SWFLoader pour charger une application Flex des façons suivantes :</p>
     
      <p><pre>
      <codeph>source="<i>MXMLPath</i>.mxml.swf"</codeph></pre></p>
     
      <p>Flex Data Services compile le fichier MXML et retourne le fichier SWF vers l’application principale. Cette technique fonctionne parfaitement avec les fichiers SWF qui ajoutent des graphiques ou des animations à une application, mais ils ne sont pas conçus pour contenir un grand nombre d’interactions utilisateur. Si vous importez des fichiers SWF qui nécessitent un grand nombre d’interactions utilisateur, vous devez les créer en tant que composants personnalisés. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:swfBridge:get"><apiName>swfBridge</apiName><shortdesc>
     
      Pont vers l’application qui est associé à l’implémentation de cette interface.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
     
      Pont vers l’application qui est associé à l’implémentation de cette interface. Objet IEventDispatcher pouvant servir à envoyer des événements à une application dans un objet ApplicationDomain différent ou un sandbox différent.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:trustContent:get"><apiName>trustContent</apiName><shortdesc>
      Si la valeur est true, le contenu est chargé dans votre domaine de sécurité.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, le contenu est chargé dans votre domaine de sécurité. Cela signifie que le chargement échoue si le contenu se trouve dans un autre domaine et que ce domaine n’est pas doté de fichier crossdomain.xml qui autorise votre domaine à y accéder. Cette propriété n’a un effet que sur le prochain chargement. Elle ne commence pas un nouveau chargement sur un contenu déjà chargé.
     
      <p>La valeur par défaut est <codeph>false</codeph>, ce qui signifie que tout contenu est chargé sans échec, mais vous ne pouvez pas accéder au contenu. Plus important encore, le contenu chargé n’a pas accès à vos objets ni au code, ce qui constitue le scénario le plus sûr. Ne définissez pas cette propriété sur <codeph>true</codeph> sauf si vous êtes absolument certain de la sécurité du contenu chargé, particulièrement en ce qui concerne le contenu actif comme les fichiers SWF.</p>
     
      <p>Si la définition de la propriété <codeph>trustContent</codeph> ne répond pas parfaitement à vos besoins, vous pouvez également utiliser la propriété <codeph>loaderContext</codeph> pour déterminer de façon exacte le mode de chargement du contenu. La propriété <codeph>loaderContext</codeph> entraîne le contrôle SWFLoader à ignorer la valeur de la propriété <codeph>trustContent</codeph>. Vous devez cependant connaître les classes SecurityDomain et ApplicationDomain pour utiliser la propriété <codeph>loaderContext</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.SecurityDomain.xml"><linktext>flash.system.SecurityDomain</linktext></link><link href="" invalidHref="flash.system.ApplicationDomain.xml"><linktext>flash.system.ApplicationDomain</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:NavBar"><apiName>NavBar</apiName><shortdesc>
  Le contrôle NavBar est la super-classe des contrôles de navigation, comme les contrôles LinkBar et TabBar et ne peut pas être directement instancié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="event" name="click"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code><mx:NavBar></code> tag inherits all of the tag attributes
  of its superclass, with the exception of scrolling-related
  attributes, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    <strong>Properties</strong>
    dataProvider="<i>No default</i>"
    iconField="icon"
    labeField="label"
    selectedIndex="-1"
    toolTipField="toolTip"
     
    <strong>Events</strong>
    itemClick="<i>No default</i>"
    &gt;
     ...
       <i>child tags</i>
     ...
    &lt;/mx:<i>tagname</i>&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle NavBar est la super-classe des contrôles de navigation, comme les contrôles LinkBar et TabBar et ne peut pas être directement instancié.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#IList"><linktext>mx.collections.IList</linktext></link><link href="mx.containers.xml#ViewStack"><linktext>mx.containers.ViewStack</linktext></link><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link><link href="mx.controls.xml#TabBar"><linktext>mx.controls.TabBar</linktext></link><link href="mx.controls.xml#ButtonBar"><linktext>mx.controls.ButtonBar</linktext></link></related-links><adobeApiEvent id="mx.controls:NavBar_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Distribué lorsqu’un élément de navigation est sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un élément de navigation est sélectionné.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:NavBar:NavBar"><apiName>NavBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:NavBar:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      Gère l’événement MouseEvent.CLICK pour les éléments du contrôle NavBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Objet événement.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gère l’événement <codeph>MouseEvent.CLICK</codeph> pour les éléments du contrôle NavBar. Ce gestionnaire distribue l’événement <codeph>itemClick</codeph> du contrôle NavBar.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:protected:createNavItem"><apiName>createNavItem</apiName><shortdesc>
      Crée des éléments de navigation individuels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Elément de navigation créé.
      
      </apiDesc><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>label</apiItemName><apiType value="String"/><apiDesc>Etiquette de l’élément de navigation créé. 
     
      </apiDesc></apiParam><apiParam><apiItemName>icon</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Icône de l’élément de navigation créé. En général, il s’agit d’une icône que vous avez imbriquée dans l’application.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée des éléments de navigation individuels. Par défaut, cette méthode ne réalise aucune action. Vous pouvez remplacer cette méthode dans une sous-classe pour créer un élément de navigation en fonction du type des éléments de navigation de votre sous-classe.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:protected:hiliteSelectedNavItem"><apiName>hiliteSelectedNavItem</apiName><shortdesc>
      Met en surbrillance l’élément de navigation sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’élément sélectionné du contrôle NavBar. Le premier élément se trouve à l’index 0.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Met en surbrillance l’élément de navigation sélectionné. Par défaut, cette méthode ne réalise aucune action. Vous pouvez remplacer cette méthode dans une sous-classe pour mettre en surbrillance l’élément de navigation sélectionné.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      Renvoie la chaîne que la fonctionnalité de rendu doit afficher pour l’objet de données spécifié, en fonction des propriétés labelField et labelFunction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Chaîne à afficher en fonction des données.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet à afficher.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Retourne la chaîne que la fonctionnalité de rendu doit afficher pour l’objet de données spécifié, en fonction des propriétés labelField et labelFunction. Si la méthode ne peut pas convertir le paramètre en chaîne, elle retourne un espace unique.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:protected:resetNavItems"><apiName>resetNavItems</apiName><shortdesc>
      Restaure l’état par défaut de la barre de navigation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Restaure l’état par défaut de la barre de navigation. Par défaut, cette méthode ne réalise aucune action. Vous pouvez remplacer cette méthode dans une sous-classe pour restaurer l’état par défaut de la barre de navigation.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:protected:updateNavItemIcon"><apiName>updateNavItemIcon</apiName><shortdesc>
      Réinitialise l’icône de l’élément de navigation du contrôle NavBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’élément de navigation du contrôle NavBar. Le premier élément de navigation se trouve à l’index 0.
     
      </apiDesc></apiParam><apiParam><apiItemName>icon</apiItemName><apiType value="Class"/><apiDesc>Nouvelle icône de l’élément de navigation. En général, il s’agit d’une icône que vous avez imbriquée dans l’application.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Réinitialise l’icône de l’élément de navigation du contrôle NavBar. Vous pouvez remplacer cette méthode dans une sous-classe pour définir l’icône d’un élément de navigation en fonction du type des éléments de navigation de votre sous-classe.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:protected:updateNavItemLabel"><apiName>updateNavItemLabel</apiName><shortdesc>
      Définit la propriété libellé d’un élément de navigation du contrôle NavBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’élément de navigation du contrôle NavBar. Le premier élément de navigation se trouve à l’index 0.
     
      </apiDesc></apiParam><apiParam><apiItemName>label</apiItemName><apiType value="String"/><apiDesc>Nouveau texte détiquette de l’élément de navigation. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit la propriété libellé d’un élément de navigation du contrôle NavBar. Vous pouvez remplacer cette méthode dans une sous-classe pour définir l’étiquette d’un élément de navigation en fonction du type des éléments de navigation de votre sous-classe.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:NavBar:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Données utilisées pour renseigner le contrôle de navigation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"undefined"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Données utilisées pour renseigner le contrôle de navigation. Le type de données peut être un conteneur ViewStack ou un tableau.
     
      <p>Lorsque vous utilisez un conteneur ViewStack, les propriétés <codeph>label</codeph> et <codeph>icon</codeph> des enfants du conteneur ViewStack sont utilisées pour renseigner les éléments de navigation, comme dans l’exemple suivant :</p>
     
      <pre>
      &lt;mx:LinkBar dataProvider="{vs}"/>
      &lt;mx:ViewStack id="vs">
        &lt;mx:VBox label="Accounts" icon="account_icon"/>
        &lt;mx:VBox label="Leads" icon="leads_icon"/>
      &lt;/mx:ViewStack> </pre>
      
      <p>Le contrôle LinkBar comporte deux liens : « Accounts » et « Leads ». Chacun est accompagné de sa propre icône, comme les balises VBox le spécifient. Lorsque vous cliquez sur un lien, le conteneur ViewStack accède à la vue correspondante.</p>
     
      <p>Lorsque vous utilisez un tableau, la propriété <codeph>labelField</codeph> détermine le nom du champ <codeph>dataProvider</codeph> à utiliser comme étiquette pour chaque élément de navigation et la propriété <codeph>iconField</codeph> détermine le nom du champ <codeph>dataProvider</codeph> à utiliser comme icône pour chaque élément de navigation. Si vous utilisez un tableau de chaînes, la propriété <codeph>labelField</codeph> est ignorée.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NavBar:iconField:get"><apiName>iconField</apiName><shortdesc>
      Nom du champ dans l’objet dataProvider à afficher en tant qu’icône pour chaque élément de navigation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"icon"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ dans l’objet <codeph>dataProvider</codeph> à afficher en tant qu’icône pour chaque élément de navigation. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NavBar:labelField:get"><apiName>labelField</apiName><shortdesc>
      Nom du champ dans l’objet dataProvider à afficher en tant que libellé pour chaque élément de navigation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ dans l’objet <codeph>dataProvider</codeph> à afficher en tant que libellé pour chaque élément de navigation. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NavBar:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer le libellé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer le libellé. Par défaut, le composant List recherche la propriété <codeph>label</codeph> sur chaque élément du fournisseur de données et l’affiche. Toutefois, certains jeux de données n’ont pas de propriété <codeph>label</codeph> ni une autre propriété à afficher. Un jeu de données présentant les champs lastName et firstName mais dont vous souhaitez afficher les noms complets en est un exemple.
     
      <p>Vous pouvez fournir une propriété <codeph>labelFunction</codeph> qui recherche les champs appropriés et retourne une chaîne affichable. La propriété <codeph>labelFunction</codeph> permet également de gérer la mise en forme et la localisation. </p>
     
      <p>Pour la plupart des composants, la fonction libellé prend un unique argument correspondant à l’élément du fournisseur de données et retourne une chaîne.</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NavBar:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Index de l’élément de navigation actif, dans lequel le premier élément se trouve à l’index 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Index de l’élément de navigation actif, dans lequel le premier élément se trouve à l’index 0.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NavBar:toolTipField:get"><apiName>toolTipField</apiName><shortdesc>
      Nom du champ dans l’objet dataProvider à afficher en tant qu’info-bulle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"toolTip"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ dans l’objet <codeph>dataProvider</codeph> à afficher en tant qu’info-bulle.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:TextInput"><apiName>TextInput</apiName><shortdesc>
  Le contrôle TextInput est un champ de texte d’une seule ligne qui est entièrement modifiable.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:TextInput" replacement="spark.components.TextInput" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du composant et le bord supérieur de sa zone de contenu.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du composant et le bord inférieur de sa zone de contenu.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de l’anneau de focus anneau lorsque le composant est en cours
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la zone de contenu du composant.
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="Number">
<description>
  
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:TextInput" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:TextInput" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:TextInput" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:TextInput" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:TextInput" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:TextInput" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  Indique quels coins du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus.
  
  </description>
<default>0.4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Distance de l’ombre portée. Si la propriété est définie sur une valeur négative, l’ombre apparaît au-dessus du composant.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="String">
<description>
  Direction de l’ombre portée. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’ombre portée.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b/><codeph/> Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. Ce style est utilisé avec <codeph>borderStyle="solid"</codeph>. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b>Remarque :</b> pour que les ombres portées apparaissent sur des conteneurs, définissez les propriétés <codeph>backgroundColor</codeph> ou <codeph>backgroundImage</codeph>. Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Rayon des angles des composants. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 0. La valeur par défaut du contrôle ApplicationControlBar est 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur du cadre de sélection. Utilisé uniquement lorsque la propriété <codeph>borderStyle</codeph> est définie sur <codeph>"solid"</codeph>.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  Style du cadre de sélection. Les valeurs possibles sont <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> et <codeph>"outset"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>"inset"</codeph>. La valeur par défaut de la plupart des conteneurs est <codeph>"none"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.controls:TextInput" playerVersion="Flash9" type="Class">
<description>
  Classe d’habillage de bordure du composant. La classe mx.skins.halo.HaloBorder est la valeur par défaut de tous les composants qui ne définissent pas explicitement leur propre valeur par défaut. La valeur par défaut du conteneur Panel est mx.skins.halo.PanelSkin. Pour déterminer la valeur par défaut d’un composant, voir le fichier default.css.
 
  </description>
<default>mx.skins.halo.HaloBorder
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="String">
<description>
  Côtés du cadre de sélection. Chaîne délimitée par des espaces qui indique quels côtés de la bordure afficher. La chaîne peut contenir les valeurs <codeph>"left"</codeph>, <codeph>"top"</codeph>, <codeph>"right"</codeph> et <codeph>"bottom"</codeph> dans n’importe quel ordre. La valeur par défaut est <codeph>"left top right bottom"</codeph>, ce qui permet de montrer les quatre côtés. Ce style est uniquement utilisé lorsque la propriété borderStyle est <codeph>"solid"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Couleur de la bordure. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0xB7BABC</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="Number">
<description>
  
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="String">
<description>
  Met à l’échelle l’image spécifiée par la propriété <codeph>backgroundImage</codeph> sur différentes tailles de pourcentage. Une valeur de <codeph>"100%"</codeph> étire l’image afin de remplir l’intégralité du composant. Pour spécifier un pourcentage, vous devez inclure le symbole de pourcentage (%). La valeur par défaut du conteneur Application est <codeph>100%</codeph>. La valeur par défaut de tous les autres conteneurs est <codeph>auto</codeph>, ce qui permet de conserver la taille d’origine de l’image.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Image d’arrière-plan d’un composant. Il peut s’agir d’une URL absolue ou relative ou d’une classe. <codeph/><codeph/> L’image d’arrière-plan s’affiche par dessus la couleur d’arrière-plan. La valeur par défaut est <codeph>undefined</codeph>, c’est-à-dire « non définie ». Si ce style et le style de la propriété <codeph>backgroundColor</codeph> ne sont pas définis, le composant est doté d’un arrière-plan transparent.
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, l’image d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan du composant lorsqu’il est désactivé. La valeur par défaut globale est <codeph>undefined</codeph>. La valeur par défaut des contrôles List est <codeph>0xDDDDDD</codeph> (gris clair). Si un conteneur est désactivé, l’arrière-plan est estompé et le degré d’estompe est contrôlé par le style <codeph>disabledOverlayAlpha</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan d’un composant. Les deux propriétés <codeph>backgroundColor</codeph> et <codeph>backgroundImage</codeph> peuvent être définies. Certains composants n’ont pas d’arrière-plan. Le contrôle DataGrid ignore ce style. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. Si ce style et le style de la propriété <codeph>backgroundImage</codeph> sont <codeph>undefined</codeph>, le composant est doté d’un arrière-plan transparent.
 
  <p>Pour le conteneur Application, ce style indique la couleur d’arrière-plan lors du chargement de l’application et un dégradé d’arrière-plan lors de son exécution. Flex calcule le motif de dégradé entre une couleur légèrement plus sombre que la couleur spécifiée et une couleur légèrement plus claire que la couleur spécifiée.</p>
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, la couleur d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Niveau Alpha de la couleur définie par la propriété <codeph>backgroundColor</codeph>, de l’image ou fichier SWF défini par le style <codeph>backgroundImage</codeph>. Les valeurs valides vont de 0.0 à 1.0. Pour la plupart des contrôles, la valeur par défaut est 1.0, mais pour les contrôles ToolTip, la valeur par défaut est de 0.95 et pour les contrôles Alert, elle est de 0.9.
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TextInput&gt;</code> tag inherits the attributes
  of its superclass and adds the following attributes:</p>
 
  <pre>
  &lt;mx:TextInput
    <b>Properties</b>
    condenseWhite="false|true"
    data="undefined"
    displayAsPassword="false|true"
    editable="true|false"
    horizontalScrollPosition="0"
    htmlText=""
    imeMode="null"
    length="0"
    listData="null"
    maxChars="0"
    parentDrawsFocus="false"
    restrict="null"
    selectionBeginIndex="0"
    selectionEndIndex="0"
    text=""
    textHeight="0"
    textWidth="0"
    &nbsp;
    <b>Styles</b>
    backgroundAlpha="1.0"
    backgroundColor="undefined"
    backgroundImage="undefined"
    backgroundSize="auto"
    borderColor="0xAAB3B3"
    borderSides="left top right bottom"
    borderSkin="mx.skins.halo.HaloBorder"
    borderStyle="inset"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    dropShadowColor="0x000000"
    dropShadowEnabled="false"
    focusAlpha="0.5"
    focusRoundedCorners"tl tr bl br"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|none|subpixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    paddingLeft="0"
    paddingRight="0"
    shadowDirection="center"
    shadowDistance="2"
    textAlign="left|right|center"
    textDecoration="none|underline"
    textIndent="0"
    &nbsp;
    <b>Events</b>
    change="<i>No default</i>"
    dataChange="<i>No default</i>"
    enter="<i>No default</i>"
    textInput="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Le contrôle TextInput est un champ de texte modifiable, sur une seule ligne.
  
  </apiTipText></apiTipTexts><apiBaseInterface>mx.core:ITextInput</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle TextInput est un champ de texte d’une seule ligne qui est entièrement modifiable. Tout le texte de ce contrôle doit utiliser les mêmes styles, sauf s’il s’agit d’un texte HTML. Le contrôle TextInput prend en charge les fonctionnalités de rendu HTML de Flash Player et AIR.
 
  <p>Les contrôles TextInput n’incluent pas d’étiquette, mais vous pouvez en ajouter une à l’aide d’un contrôle Label ou en incorporant le contrôle TextInput dans un contrôle FormItem d’un conteneur Form. Lorsqu’il est utilisé dans un contrôle FormItem, un contrôle TextInput indique si une valeur est requise. Les contrôles TextInput ont différents états, notamment ils peuvent être remplis, sélectionnés, désactivés ou contenir une erreur. Ils prennent en charge la mise en forme, la validation et les équivalents clavier. Ils distribuent également les événements change et enter.</p>
 
  <p>Si vous désactivez un contrôle TextInput, il affiche son contenu dans la couleur indiquée par le style <codeph>disabledColor</codeph>. Pour désactiver l’édition du texte, définissez la propriété <codeph>editable</codeph> sur <codeph>false</codeph>. Pour masquer le texte de saisie en affichant des astérisques à la place des caractères saisis, définissez la propriété <codeph>displayAsPassword</codeph> sur <codeph>true</codeph>.</p>
 
  <p>Le contrôle TextInput est utilisé comme sous-composant dans plusieurs autres contrôles, comme les contrôles RichTextEditor, NumericStepper et ComboBox. Par conséquent, si vous affectez des propriétés de style à un contrôle TextInput à l’aide d’un sélecteur de type CSS, Flex applique ces styles au contrôle TextInput lorsqu’il s’affiche dans les autres contrôles, sauf si vous les avez explicitement remplacés.</p>
 
  <p>Le contrôle TextInput possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Taille du texte avec une taille minimale par défaut de 22 pixels de hauteur et 160 pixels de largeur</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 par 10000 pixels</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TextInputExample.mxml"><swfblock conref="examples/TextInputExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Label"><linktext>mx.controls.Label</linktext></link><link href="mx.controls.xml#Text"><linktext>mx.controls.Text</linktext></link><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link><link href="mx.controls.xml#RichTextEditor"><linktext>mx.controls.RichTextEditor</linktext></link><link href="mx.controls.textClasses.xml#TextRange"><linktext>mx.controls.textClasses.TextRange</linktext></link></related-links><adobeApiEvent id="mx.controls:TextInput_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
  Distribué lorsque l’utilisateur saisit, supprime ou colle du texte dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur saisit, supprime ou colle du texte dans le contrôle. Aucun événement n’est distribué lorsque l’utilisateur appuie sur la touche Suppr ou sur la touche Retour arrière.
 
  <p>Même si la valeur par défaut de la propriété <codeph>TextEvent.bubbles</codeph> est <codeph>true</codeph>, ce contrôle distribue l’événement avec la propriété <codeph>TextEvent.bubbles</codeph> définie sur <codeph>false</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextInput_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  Distribué lorsque l’utilisateur appuie sur la touche Entrée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur appuie sur la touche Entrée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextInput_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
 
  <p>Lorsque vous utilisez un composant comme rendu d’élément, la propriété <codeph>data</codeph> contient les données à afficher. Vous pouvez écouter cet événement et mettre à jour le composant lorsque la propriété <codeph>data</codeph> change.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextInput_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque le texte du contrôle TextInput change du fait d’une saisie de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le texte du contrôle TextInput change du fait d’une saisie de l’utilisateur. Cet événement ne se produit pas si vous utilisez la liaison de données ou le code ActionScript pour modifier le texte.
 
  <p>Même si la valeur par défaut de la propriété <codeph>Event.bubbles</codeph> est <codeph>true</codeph>, ce contrôle distribue l’événement avec la propriété <codeph>Event.bubbles</codeph> définie sur <codeph>false</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:TextInput:TextInput"><apiName>TextInput</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:TextInput:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      Crée la bordure de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée la bordure de ce composant. Normalement, la bordure est déterminée par les styles <codeph>borderStyle</codeph> et <codeph>borderSkin</codeph>. La propriété de la bordure doit être définie sur l’occurrence de la bordure.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:TextInput:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc>
      Renvoie un objet TextLineMetrics doté d’informations sur la position du texte et des mesures pour une ligne de texte du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet contenant des informations sur la position du texte et les mesures pour la ligne de texte spécifiée du contrôle.
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/><apiDesc>Index de base zéro de la ligne pour laquelle vous récupérez les mesures. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie un objet TextLineMetrics doté d’informations sur la position du texte et des mesures pour une ligne de texte du contrôle. Le composant doit être validé pour obtenir un nombre correct. Si vous définissez la propriété <codeph>text</codeph> ou <codeph>htmlText</codeph>, puis appelez immédiatement la méthode <codeph>getLineMetrics()</codeph>, vous risquez de recevoir une valeur incorrecte. Vous devez soit attendre la validation du composant, soit appeler la méthode <codeph>validateNow()</codeph>. Ce comportement est différent de celui de la classe flash.text.TextField, qui met immédiatement la valeur à jour.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:TextInput:selectRange"><apiName>selectRange</apiName><shortdesc>
      Sélectionne le texte dans la plage spécifiée par les paramètres.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      Sélectionne le texte dans la plage spécifiée par les paramètres. <codeph/>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#TextInput/setSelection"><linktext/></link></related-links></apiOperation><apiOperation id="mx.controls:TextInput:setSelection"><apiName>setSelection</apiName><shortdesc>
      Sélectionne le texte dans la plage spécifiée par les paramètres.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiDesc>Index de base zéro du premier caractère de la sélection (c’est-à-dire que le premier caractère est 0, le deuxième est 1, etc).
     
      </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiDesc>Index de base zéro de la position <i>suivant</i> le dernier caractère dans la selection (équivalent à l’index de base un du dernier caractère). Si le paramètre est 5, le dernier caractère de la sélection, par exemple, est le cinquième caractère. Lorsque le contrôle TextInput reçoit le focus, la sélection est visible si les propriétés <codeph>selectionBeginIndex</codeph> et <codeph>selectionEndIndex</codeph> sont définies toutes les deux.
     
      </apiDesc></apiParam><apiTipTexts><apiTipText>Définit une nouvelle sélection de texte.
      
      </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
      Sélectionne le texte dans la plage spécifiée par les paramètres. Si le contrôle n’a pas le focus, la surbrillance de la sélection ne s’affichera pas tant que le contrôle n’aura pas récupéré le focus. De même, si le focus est obtenu en cliquant sur un contrôle, toute sélection précédente est perdue. Si les deux valeurs de paramètre sont identiques, la nouvelle sélection est un signe d’insertion.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:TextInput:showBorder"><apiName>showBorder</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:TextInput:protected:textField"><apiName>textField</apiName><shortdesc>
      Objet UITextField interne qui effectue le rendu du texte de ce contrôle TextInput.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      Objet UITextField interne qui effectue le rendu du texte de ce contrôle TextInput.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc>
      Indique si les espaces blancs supplémentaires (espaces, sauts de ligne, etc.) doivent être supprimés dans un contrôle TextInput contenant du texte HTML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si les espaces blancs supplémentaires (espaces, sauts de ligne, etc.) doivent être supprimés dans un contrôle TextInput contenant du texte HTML.
     
      <p>La propriété <codeph>condenseWhite</codeph> n’affecte que le texte défini avec la propriété <codeph>htmlText</codeph>, pas la propriété <codeph>text</codeph>. Si vous définissez du texte avec la propriété <codeph>text</codeph>, la propriété <codeph>condenseWhite</codeph> est ignorée.</p>
     
      <p>Si vous définissez la propriété <codeph>condenseWhite</codeph> sur <codeph>true</codeph>, vous devez utiliser les commandes HTML classiques, telles que <codeph>&lt;br></codeph> et <codeph>&lt;p></codeph>, pour placer des sauts de ligne dans le champ de texte.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:data:get"><apiName>data</apiName><shortdesc>
      Permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
     
      <p>Lorsque vous utilisez le contrôle comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex écrit automatiquement la valeur actuelle de l’élément dans la propriété <codeph>text</codeph> de ce contrôle.</p>
     
      <p>Vous ne pouvez pas définir cette propriété dans MXML.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc>
      Indique si ce contrôle est utilisé pour entrer des mots de passe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3197
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue><apiTipTexts><apiTipText>Indique si le caractère ’ doit être affiché à la place des caractères réels
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Indique si ce contrôle est utilisé pour entrer des mots de passe. Si la valeur est <codeph>true</codeph>, le champ n’affiche pas le texte entré. En revanche, chaque caractère de texte entré dans le contrôle s’affiche sous la forme du caractère « * ».
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:editable:get"><apiName>editable</apiName><shortdesc>
      Indique si l’utilisateur est autorisé à modifier le texte dans ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3196
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue><apiTipTexts><apiTipText>Spécifie si le composant peut être modifié ou non
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Indique si l’utilisateur est autorisé à modifier le texte dans ce contrôle. Si la valeur est <codeph>true</codeph>, l’utilisateur peut modifier le texte.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      
      Fabrique de module qui fournit le contexte des polices de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      
      Fabrique de module qui fournit le contexte des polices de ce composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Position dans la zone de contenu du pixel le plus à gauche qui est actuellement affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3194
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0

      </apiDefaultValue><apiTipTexts><apiTipText>Position de pixel du caractère le plus à gauche qui est actuellement affiché
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Position dans la zone de contenu du pixel le plus à gauche qui est actuellement affiché (la zone de contenu inclut tous les contenus d’un contrôle, pas seulement la portion actuellement affichée). Cette propriété est toujours définie sur 0 et ignore les changements si la propriété <codeph>wordWrap</codeph> est définie sur <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:htmlText:get"><apiName>htmlText</apiName><shortdesc>
      Spécifie le texte affiché par le contrôle TextInput, y compris la balise HTML définissant les styles du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le texte affiché par le contrôle TextInput, y compris la balise HTML définissant les styles du texte. Lorsque vous spécifiez du texte HTML dans cette propriété, vous pouvez utiliser le sous-jeu de balises HTML pris en charge par le contrôle Flash TextField.
     
      <p> Lorsque vous définissez cette propriété, le marqueur HTML est appliqué après l’application des styles CSS pour l’occurrence TextInput. Lorsque vous obtenez cette propriété, le marqueur HTML inclut les styles CSS.</p>
      
      <p>Par exemple, si vous le définissez en tant que chaîne (par exemple <codeph>« Ceci est un exemple de marqueur &lt;b>bold&lt;/b> »</codeph>), le texte « Ceci est un exemple de marqueur <b>bold</b> » s’affiche dans le contrôle TextInput avec les styles CSS qui s’appliquent normalement. De plus, le terme « bold » (gras) s’affiche en gras à cause du marqueur <codeph>&lt;b></codeph>.</p>
     
      <p>Les marqueurs HTML utilisent des caractères comme &lt; et >, qui ont une signification particulière en langage XML (et par conséquent MXML). Ainsi, le code suivant n’est pas conforme pour la compilation :</p>
      
      <pre>
      &lt;mx:TextInput htmlText="This is an example of &lt;b>bold&lt;/b> markup"/>
      </pre>
      
      <p>Trois méthodes permettent de contourner ce problème.</p>
      
      <ul>
      
      <li>
      
      <p>Définissez la propriété <codeph>htmlText</codeph> dans une méthode ActionScript appelée comme gestionnaire <codeph>initialize</codeph> :</p>
      
      <pre>
      &lt;mx:TextInput id="myTextInput" initialize="myTextInput_initialize()"/>
      </pre>
      
      <p>dont la méthode <codeph>TextInput_initialize</codeph> se trouve dans la section CDATA d’un script:</p>
      
      <pre>
      &lt;mx:Script>
      &lt;![CDATA[
      private function myTextInput_initialize():void {
          myTextInput.htmlText = "This is an example of &lt;b>bold&lt;/b> markup";
      }
      ]]&gt;
      &lt;/mx:Script>
      
      </pre>
      
      <p>Ceci est l’approche la plus simple, car le marqueur HTML reste facilement lisible. Notez que vous devez attribuer un <codeph>id</codeph> au contrôle TextInput afin de pouvoir vous y référer dans le gestionnaire <codeph>initialize</codeph>.</p>
      
      </li>
      
      <li>
      
      <p>Spécifiez la propriété <codeph>htmlText</codeph> en utilisant une balise enfant avec une section CDATA. Une section CDATA en langage XML contient des données de caractères pour lesquelles les caractères comme &lt; et > n’ont pas de signification particulière.</p>
      
      <pre>
      &lt;mx:TextInput>
          &lt;mx:htmlText>&lt;![CDATA[This is an example of &lt;b>bold&lt;/b> markup]]&gt;&lt;/mx:htmlText>
      &lt;mx:TextInput/>
      </pre>
      
      <p>Vous devez écrire la propriété <codeph>htmlText</codeph> en tant que balise enfant au lieu d’un attribut sur la balise <codeph>&lt;mx:TextInput></codeph>, car le langage XML n’autorise pas la section CDATA comme valeur d’attribut. Notez que le marqueur est lisible, mais la section CDATA rend cette approche plus compliquée.</p>
      
      </li>
      
      <li>
      
      <p>Utilisez un attribut <codeph>hmtlText</codeph> dont toutes les occurrences de caractères de marqueur HTML &lt; et > dans la valeur d’attribut sont écrites, au lieu d’utiliser les « entités » XML <codeph>&amp;lt;</codeph> et <codeph>&amp;gt;</codeph> :</p>
      
      <pre>
      &lt;mx:TextInput htmlText="This is an example of &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt; markup"/&amp;gt;
      </pre>
      
      Adobe ne recommande pas cette approche, car le marqueur HTML devient presque impossible à lire.
      
      </li>
      
      </ul>
      
      <p>Si la propriété <codeph>condenseWhite</codeph> a la valeur <codeph>true</codeph> lorsque vous définissez la propriété <codeph>htmlText</codeph>, plusieurs caractères d’espace sont condensés, comme dans les navigateurs HTML. Par exemple, trois espaces consécutifs sont affichés sous la forme d’un espace unique. La valeur par défaut de <codeph>condenseWhite</codeph> est <codeph>false</codeph>. Vous devez donc définir <codeph>condenseWhite</codeph> sur <codeph>true</codeph> pour réduire l’espace.</p>
      
      <p>Si vous relisez la propriété <codeph>htmlText</codeph> peu de temps après l’avoir définie, vous obtenez la même chaîne que celle que vous avez définie. Toutefois, après l’exécution de l’objet LayoutManager, la valeur change pour inclure un marqueur supplémentaire comprenant les styles CSS.</p>
      
      <p>La définition de la propriété <codeph>htmlText</codeph> affecte la propriété <codeph>text</codeph> de plusieurs manières. Si vous lisez la propriété <codeph>text</codeph> peu de temps après avoir défini la propriété <codeph>htmlText</codeph>, vous obtenez la valeur <codeph>null</codeph>. Cela indique que la propriété <codeph>text</codeph> correspondant à la nouvelle propriété <codeph>htmlText</codeph> n’a pas encore été déterminée. Toutefois, après l’exécution de l’objet LayoutManager, la propriété <codeph>text</codeph> se transforme en chaîne <codeph>htmlText</codeph> et tous les marqueurs HTML sont supprimés. En fait, la valeur correspond aux caractères que le contrôle TextInput affiche réellement.</p>
       
      <p>A l’inverse, si vous définissez la propriété <codeph>text</codeph>, toute propriété <codeph>htmlText</codeph> précédemment définie devient obsolète. Si vous lisez la propriété <codeph>htmlText</codeph> peu de temps après avoir défini la propriété <codeph>text</codeph>, vous obtenez la valeur <codeph>null</codeph>. Cela indique que la propriété <codeph>htmlText</codeph> qui correspond à la nouvelle propriété <codeph>text</codeph> n’a pas encore été déterminée. Toutefois, après l’exécution du gestionnaire LayoutManager, la valeur de la propriété <codeph>htmlText</codeph> devient le nouveau texte et inclut un marqueur supplémentaire pour les styles CSS.</p>
     
      <p>Pour que le gestionnaire LayoutManager s’exécute immédiatement, vous pouvez appeler la méthode <codeph>validateNow()</codeph> sur le contrôle TextInput. Par exemple, vous pouvez obtenir des propriétés <codeph>htmlText</codeph>, appeler la méthode <codeph>validateNow()</codeph> et récupérer immédiatement la propriété <codeph>text</codeph> correspondante qui n’a pas le marqueur HTML.</p>
      
      <p>Si vous définissez les deux propriétés <codeph>text</codeph> et <codeph>htmlText</codeph> dans ActionScript, celle définie en dernier prend effet. Ne définissez pas les deux dans MXML, car MXML ne garantit pas que les propriétés d’une occurrence puissent être définies dans un ordre particulier.</p>
      
      <p>Définir la propriété <codeph>text</codeph> ou <codeph>htmlText</codeph> à l’intérieur d’une boucle est une opération rapide, car le contrôle TextField sous-jacent qui effectue réellement le rendu du texte n’est pas mis à jour tant que le gestionnaire LayoutManager s’exécute.</p>
     
      <p>Si vous essayez de définir cette propriété sur <codeph>null</codeph>, elle est à la place définie sur la chaîne vide. Si la propriété a temporairement la valeur <codeph>null</codeph>, cela indique que la propriété <codeph>text</codeph> a été récemment définie et que la propriété <codeph>htmlText</codeph> correspondante n’a pas encore été déterminée.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Spécifie le mode IME (éditeur de méthode d’entrée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le mode IME (éditeur de méthode d’entrée). L’éditeur IME permet aux utilisateurs d’entrer du texte en chinois, japonais et coréen. Flex définit le mode IME spécifié lorsque le contrôle est mis en focus et rétablit la valeur précédente lorsque le contrôle est désactivé.
     
      <p>La classe flash.system.IMEConversionMode définit des constantes pour les valeurs valides de cette propriété. Vous pouvez spécifier <codeph>null</codeph> pour n’indiquer aucun IME.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:length:get"><apiName>length</apiName><shortdesc>
      Nombre de caractères affichés dans la zone de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3192
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
      </apiDefaultValue><apiTipTexts><apiTipText>Nombre de caractères dans la zone de saisie de texte.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Nombre de caractères affichés dans la zone de texte.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:listData:get"><apiName>listData</apiName><shortdesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété listData du composant avec les données appropriées du contrôle List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété <codeph>listData</codeph> du composant avec les données appropriées du contrôle List. Le composant peut ensuite utiliser la propriété <codeph>listData</codeph> pour initialiser la propriété <codeph>data</codeph> du rendu d’élément supplémentaire ou de l’éditeur d’élément supplémentaire.
     
      <p>Vous ne définissez pas cette propriété dans MXML ou ActionScript. Flex la définit lorsque le composant est utilisé comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      Nombre maximal de caractères que les utilisateurs peuvent entrer dans un champ de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3191
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiTipTexts><apiTipText>Nombre maximum de caractères pouvant être contenus dans la zone de saisie de texte
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Nombre maximal de caractères que les utilisateurs peuvent entrer dans un champ de texte. Cette propriété ne limite pas la longueur de texte spécifiée en définissant la propriété <codeph>text</codeph> ou <codeph>htmlText</codeph> du contrôle.
     
      <p>La valeur par défaut est 0, ce qui correspond à un cas particulier indiquant un nombre illimité.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:parentDrawsFocus:get"><apiName>parentDrawsFocus</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
       
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:restrict:get"><apiName>restrict</apiName><shortdesc>
      Indique le jeu de caractères que l’utilisateur peut saisir dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3193
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      </apiDefaultValue><apiTipTexts><apiTipText>Jeu de caractères pouvant être saisis dans le contrôle TextInput.
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Indique le jeu de caractères que l’utilisateur peut saisir dans le contrôle. Si la valeur de la propriété <codeph>restrict</codeph> est <codeph>null</codeph>, vous pouvez entrer tout caractère. Si la valeur de la propriété <codeph>restrict</codeph> est une chaîne vide, aucun caractère ne peut être entré. Cette propriété ne limite que l’interaction avec l’utilisateur ; un script peut mettre tout texte dans le champ de texte. Si la valeur de la propriété <codeph>restrict</codeph> est une chaîne de caractères, vous ne pouvez entrer que les caractères dans la chaîne du champ de texte.
     
      <p>Flex analyse la chaîne de gauche à droite. Vous pouvez spécifier une plage à l’aide du caractère (-). Si la chaîne commence par un caret (^), tous les caractères sont initialement acceptés et les caractères suivants de la chaîne sont exclus du jeu de caractères acceptés. Si la chaîne ne commence pas par un caret (^), aucun caractère n’est initialement accepté et les caractères suivants de la chaîne sont inclus dans le jeu de caractères acceptés.</p>
     
      <p>Comme certains caractères ont une signification particulière lorsqu’ils sont utilisés dans la propriété <codeph>restrict</codeph>, vous devez utiliser des barres obliques inverses pour spécifier les caractères de type littéral -, ^ et \. Lorsque vous utilisez la propriété <codeph>restrict</codeph> comme attribut dans une balise MXML, utilisez des barres obliques inverses uniques, comme dans cet exemple : \^\-\\. Lorsque vous définissez la propriété <codeph>restrict</codeph> dans une expression ActionScript, utilisez des barres obliques inverses doubles, comme dans cet exemple : \\^\\-\\\.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/restrict"><linktext>flash.text.TextField.restrict</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:selectable:get"><apiName>selectable</apiName><shortdesc>
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc>
      Valeur d’index basée sur zéro du premier caractère de la sélection actuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Valeur d’index basée sur zéro du premier caractère de la sélection.
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Valeur d’index basée sur zéro du premier caractère de la sélection actuelle. Par exemple, le premier caractère est 0, le deuxième est 1, etc. Lorsque le contrôle reçoit le focus, la sélection est visible si les propriétés <codeph>selectionBeginIndex</codeph> et <codeph>selectionEndIndex</codeph> sont définies toutes les deux.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc>
      Index de base zéro de la position suivant le dernier caractère dans la selection en cours (équivalent à l’index de base un du dernier caractère).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>Valeur d’index basée sur zéro du dernier caractère de la sélection.
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Index de base zéro de la position <i>suivant</i> le dernier caractère dans la selection en cours (équivalent à l’index de base un du dernier caractère). Si le dernier caractère de la sélection, par exemple, est le cinquième caractère, cette propriété a la valeur 5. Lorsque le contrôle reçoit le focus, la sélection est visible si les propriétés <codeph>selectionBeginIndex</codeph> et <codeph>selectionEndIndex</codeph> sont définies toutes les deux.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:text:get"><apiName>text</apiName><shortdesc>
      Texte ordinaire apparaissant dans le contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3190
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue><apiTipTexts><apiTipText>Récupère ou définit le contenu du contrôle TextInput
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Texte ordinaire apparaissant dans le contrôle. Son apparence est fonction des styles CSS de son contrôle Label.
      
      <p>Toutes les balises HTML de la chaîne de texte sont ignorées et apparaissent telles qu’elles sont saisies dans la chaîne. Pour afficher un texte mis en forme à l’aide de balises HTML, utilisez plutôt la propriété <codeph>htmlText</codeph>. Si vous définissez la propriété <codeph>htmlText</codeph>, le code HTML remplace le texte défini à l’aide de cette propriété et la propriété <codeph>text</codeph> retourne une version de texte ordinaire du texte HTML, dépouillée de toutes les balises HTML. Pour plus d’informations, voir la propriété <codeph>htmlText</codeph>.</p>
     
      <p>Pour inclure les caractères spéciaux de signe inférieur à (&lt;), de signe supérieur à (>) ou de perluète (&amp;) dans le texte, enroulez la chaîne de texte dans la balise CDATA. Vous pouvez également utiliser des entités de caractères HTML pour les caractères spéciaux, par exemple <codeph>&amp;lt;</codeph>.</p>
     
      <p>Si vous essayez de définir cette propriété sur <codeph>null</codeph>, elle est à la place définie sur la chaîne vide. La propriété <codeph>text</codeph> peut avoir temporairement la valeur <codeph>null</codeph>, ce qui indique que la propriété <codeph>htmlText</codeph> a été récemment définie et que la propriété <codeph>text</codeph> n’a pas encore été déterminée.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:textHeight:get"><apiName>textHeight</apiName><shortdesc>
      hauteur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      hauteur du texte.
     
      <p>La valeur de la propriété <codeph>textHeight</codeph> est correcte une fois que le composant a été validé uniquement. Si vous définissez la propriété <codeph>text</codeph>, puis demandez immédiatement la propriété <codeph>textHeight</codeph>, vous risquez de recevoir une valeur incorrecte. Vous devez attendre la validation du composant ou appeler la méthode <codeph>validateNow</codeph> pour obtenir la valeur. Ce comportement est différent de celui du contrôle flash.text.TextField, qui met immédiatement la valeur à jour.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:textWidth:get"><apiName>textWidth</apiName><shortdesc>
      Largeur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur du texte.
     
      <p>La valeur de la propriété <codeph>textWidth</codeph> est correcte une fois que le composant a été validé uniquement. Si vous définissez la propriété <codeph>text</codeph>, puis demandez immédiatement la propriété <codeph>textWidth</codeph>, vous risquez de recevoir une valeur incorrecte. Vous devez attendre la validation du composant ou appeler la méthode <codeph>validateNow</codeph> pour obtenir la valeur. Ce comportement est différent de celui du contrôle flash.text.TextField, qui met immédiatement la valeur à jour.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
  Le contrôle NumericStepper permet à l’utilisateur de sélectionner un nombre dans un jeu ordonné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:NumericStepper" replacement="spark.components.NumericStepper" since="4.0">
	</Alternative><styles><style inherit="no" name="upArrowUpSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche vers le haut lorsque la flèche est activée et que le pointeur de la souris ne se trouve pas sur la flèche.
 
  </description>
<default>mx.skins.halo.NumericStepperUpSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upArrowOverSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche vers le haut lorsque la flèche est activée et que le pointeur de la souris ne survole pas la flèche.
 
  </description>
<default>mx.skins.halo.NumericStepperUpSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upArrowDownSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche vers le haut lorsque la flèche est activée et qu’un utilisateur clique sur le bouton de la souris au-dessus de la flèche.
 
  </description>
<default>mx.skins.halo.NumericStepperUpSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upArrowDisabledSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage de la flèche vers le haut lorsque la flèche est désactivée.
 
  </description>
<default>mx.skins.halo.NumericStepperUpSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upArrowSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage par défaut pour la flèche vers le haut.
  
  </description>
<default>mx.skins.halo.NumericStepperUpSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textInputClass" owner="mx.controls:NumericStepper" playerVersion="Flash10" type="Class">
<description>
  
 
  <p/>
 
  </description>
<default>mx.controls.TextInput
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’un symbole de composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton ScrollBar.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage de surbrillance des contrôles.
 
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de l’anneau de focus anneau lorsque le composant est en cours
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="downArrowUpSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche vers le bas lorsque la flèche est activée et que le pointeur de la souris ne se trouve pas sur la flèche. Il n’y a pas de valeur par défaut.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downArrowOverSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche vers le bas lorsque la flèche est activée et que le pointeur de la souris ne survole pas la flèche.
  
  </description>
<default>mx.skins.halo.NumericStepperDownSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downArrowDownSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche vers le bas lorsque la flèche est activée et qu’un utilisateur clique sur le bouton de la souris au-dessus de la flèche.
 
  </description>
<default>mx.skins.halo.NumericStepperDownSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downArrowDisabledSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche vers le bas lorsque la flèche est désactivée.
 
  </description>
<default>mx.skins.halo.NumericStepperDownSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downArrowSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage par défaut pour la flèche vers le bas.
 
  </description>
<default>mx.skins.halo.NumericStepperDownSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la zone de contenu du composant.
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:NumericStepper" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:NumericStepper" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:NumericStepper" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage désactivé. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox désactivé, par la classe ComboBoxSkin pour tracer la flèche vers le bas d’un contrôle ComboBox désactivé et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois d’un contrôle DateChooser désactivé. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x999999</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox, par la classe ComboBoxSkin pour tracer la flèche vers le bas du contrôle ComboBox et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois du contrôle DateChooser. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x111111</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  Indique quels coins du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus.
  
  </description>
<default>0.4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Distance de l’ombre portée. Si la propriété est définie sur une valeur négative, l’ombre apparaît au-dessus du composant.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="String">
<description>
  Direction de l’ombre portée. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’ombre portée.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b/><codeph/> Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. Ce style est utilisé avec <codeph>borderStyle="solid"</codeph>. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b>Remarque :</b> pour que les ombres portées apparaissent sur des conteneurs, définissez les propriétés <codeph>backgroundColor</codeph> ou <codeph>backgroundImage</codeph>. Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Rayon des angles des composants. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 0. La valeur par défaut du contrôle ApplicationControlBar est 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur du cadre de sélection. Utilisé uniquement lorsque la propriété <codeph>borderStyle</codeph> est définie sur <codeph>"solid"</codeph>.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  Style du cadre de sélection. Les valeurs possibles sont <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> et <codeph>"outset"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>"inset"</codeph>. La valeur par défaut de la plupart des conteneurs est <codeph>"none"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  Classe d’habillage de bordure du composant. La classe mx.skins.halo.HaloBorder est la valeur par défaut de tous les composants qui ne définissent pas explicitement leur propre valeur par défaut. La valeur par défaut du conteneur Panel est mx.skins.halo.PanelSkin. Pour déterminer la valeur par défaut d’un composant, voir le fichier default.css.
 
  </description>
<default>mx.skins.halo.HaloBorder
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="String">
<description>
  Côtés du cadre de sélection. Chaîne délimitée par des espaces qui indique quels côtés de la bordure afficher. La chaîne peut contenir les valeurs <codeph>"left"</codeph>, <codeph>"top"</codeph>, <codeph>"right"</codeph> et <codeph>"bottom"</codeph> dans n’importe quel ordre. La valeur par défaut est <codeph>"left top right bottom"</codeph>, ce qui permet de montrer les quatre côtés. Ce style est uniquement utilisé lorsque la propriété borderStyle est <codeph>"solid"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Couleur de la bordure. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0xB7BABC</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="String">
<description>
  Met à l’échelle l’image spécifiée par la propriété <codeph>backgroundImage</codeph> sur différentes tailles de pourcentage. Une valeur de <codeph>"100%"</codeph> étire l’image afin de remplir l’intégralité du composant. Pour spécifier un pourcentage, vous devez inclure le symbole de pourcentage (%). La valeur par défaut du conteneur Application est <codeph>100%</codeph>. La valeur par défaut de tous les autres conteneurs est <codeph>auto</codeph>, ce qui permet de conserver la taille d’origine de l’image.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Image d’arrière-plan d’un composant. Il peut s’agir d’une URL absolue ou relative ou d’une classe. <codeph/><codeph/> L’image d’arrière-plan s’affiche par dessus la couleur d’arrière-plan. La valeur par défaut est <codeph>undefined</codeph>, c’est-à-dire « non définie ». Si ce style et le style de la propriété <codeph>backgroundColor</codeph> ne sont pas définis, le composant est doté d’un arrière-plan transparent.
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, l’image d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan du composant lorsqu’il est désactivé. La valeur par défaut globale est <codeph>undefined</codeph>. La valeur par défaut des contrôles List est <codeph>0xDDDDDD</codeph> (gris clair). Si un conteneur est désactivé, l’arrière-plan est estompé et le degré d’estompe est contrôlé par le style <codeph>disabledOverlayAlpha</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan d’un composant. Les deux propriétés <codeph>backgroundColor</codeph> et <codeph>backgroundImage</codeph> peuvent être définies. Certains composants n’ont pas d’arrière-plan. Le contrôle DataGrid ignore ce style. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. Si ce style et le style de la propriété <codeph>backgroundImage</codeph> sont <codeph>undefined</codeph>, le composant est doté d’un arrière-plan transparent.
 
  <p>Pour le conteneur Application, ce style indique la couleur d’arrière-plan lors du chargement de l’application et un dégradé d’arrière-plan lors de son exécution. Flex calcule le motif de dégradé entre une couleur légèrement plus sombre que la couleur spécifiée et une couleur légèrement plus claire que la couleur spécifiée.</p>
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, la couleur d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Niveau Alpha de la couleur définie par la propriété <codeph>backgroundColor</codeph>, de l’image ou fichier SWF défini par le style <codeph>backgroundImage</codeph>. Les valeurs valides vont de 0.0 à 1.0. Pour la plupart des contrôles, la valeur par défaut est 1.0, mais pour les contrôles ToolTip, la valeur par défaut est de 0.95 et pour les contrôles Alert, elle est de 0.9.
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  The <code>&lt;mx:NumericStepper&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:
 
  <pre>
  &lt;mx:NumericStepper
    <strong>Properties</strong>
    imeMode="null"
    maxChars="10"
    maximum="10"
    minimum="0"
    stepSize="1"
    value="0"
  
    <strong>Styles</strong>
    backgroundAlpha="1.0"
    backgroundColor="undefined"
    backgroundImage="undefined"
    backgroundSize="auto"
    borderColor="0xAAB3B3"
    borderSides="left top right bottom"
    borderSkin="HaloBorder"
    borderStyle="inset"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    disabledIconColor="0x999999"
    downArrowDisabledSkin="NumericStepperDownSkin"
    downArrowDownSkin="NumericStepperDownSkin"
    downArrowOverSkin="NumericStepperDownSkin"
    downArrowUpSkin="NumericStepperDownSkin"
    dropShadowEnabled="false"
    dropShadowColor="0x000000"
    focusAlpha="0.5"
    focusRoundedCorners="tl tr bl br"
    fontAntiAliasType="advanced"
    fontFamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    highlightAlphas="[0.3,0.0]"
    iconColor="0x111111"
    leading="2"
    paddingLeft="0"
    paddingRight="0"
    shadowDirection="center"
    shadowDistance="2"
    textAlign="left|center|right"
    textDecoration="none|underline"
    textIndent="0"
    upArrowDisabledSkin="NumericStepperUpSkin"
    upArrowDownSkin="NumericStepperUpSkin"
    upArrowOverSkin="NumericStepperUpSkin"
    upArrowUpSkin="NumericStepperUpSkin"
  
    <strong>Events</strong>
    change="<i>No default</i>"
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle NumericStepper permet à l’utilisateur de sélectionner un nombre dans un jeu ordonné. Le contrôle NumericStepper se compose d’une zone de texte d’une seule ligne et d’une paire de boutons fléchés permettant de parcourir les valeurs possibles. Les touches Haut et Bas permettent également de parcourir les valeurs.
 
  <p>Le contrôle NumericStepper possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Assez large pour afficher le nombre maximal de chiffres utilisés par le contrôle</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Basé sur la taille du texte.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Undefined</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="NumericStepperExample.mxml"><swfblock conref="examples/NumericStepperExample.swf"/></example></apiClassifierDetail><adobeApiEvent id="mx.controls:NumericStepper_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
 
  <p>Lorsque vous utilisez un composant comme rendu d’élément, la propriété <codeph>data</codeph> contient les données à afficher. Vous pouvez écouter cet événement et mettre à jour le composant lorsque la propriété <codeph>data</codeph> change.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:NumericStepper_mx.events.NumericStepperEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la valeur du contrôle NumericStepper change suite à l’interaction d’un utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.NumericStepperEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.NumericStepperEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la valeur du contrôle NumericStepper change suite à l’interaction d’un utilisateur.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:NumericStepper:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:NumericStepper:data:get"><apiName>data</apiName><shortdesc>
      La propriété data permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      La propriété <codeph>data</codeph> vous permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
     
      <p>Lorsque vous utilisez le contrôle comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex écrit automatiquement la valeur actuelle de l’élément dans la propriété <codeph>value</codeph> de ce contrôle.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:protected:downArrowStyleFilters:get"><apiName>downArrowStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle NumericStepper à la flèche vers le bas.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle NumericStepper à la flèche vers le bas.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Spécifie le mode IME (éditeur de méthode d’entrée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le mode IME (éditeur de méthode d’entrée). L’éditeur IME permet aux utilisateurs d’entrer du texte en chinois, japonais et coréen. Flex définit le mode IME spécifié lorsque le contrôle obtient le focus et rétablit la valeur précédente lorsque le contrôle perd le focus.
     
     <p>La classe flash.system.IMEConversionMode définit des constantes pour les valeurs valides de cette propriété. Vous pouvez spécifier <codeph>null</codeph> pour n’indiquer aucun IME.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:protected:inputFieldStyleFilters:get"><apiName>inputFieldStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle NumericStepper au champ de saisie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle NumericStepper au champ de saisie.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:listData:get"><apiName>listData</apiName><shortdesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété listData du composant avec les données appropriées du contrôle List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété <codeph>listData</codeph> du composant avec les données appropriées du contrôle List. Le composant peut ensuite utiliser la propriété <codeph>listData</codeph> pour initialiser la propriété <codeph>data</codeph> du rendu d’élément supplémentaire ou de l’éditeur d’élément supplémentaire.
     
      <p>Vous ne définissez pas cette propriété dans MXML ou ActionScript. Flex la définit lorsque le composant est utilisé comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      Nombre maximal de caractères pouvant être entré dans le champ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre maximal de caractères pouvant être saisis dans le champ. La valeur 0 signifie que tout nombre de caractères peut être entré.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:maximum:get"><apiName>maximum</apiName><shortdesc>
      Valeur maximale du contrôle NumericStepper.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur maximale du contrôle NumericStepper. Il peut s’agir de tout nombre, y compris une valeur fractionnelle.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:minimum:get"><apiName>minimum</apiName><shortdesc>
      Valeur minimale du contrôle NumericStepper.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur minimale du contrôle NumericStepper. Il peut s’agir de tout nombre, y compris une valeur fractionnelle.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:nextValue:get"><apiName>nextValue</apiName><shortdesc>
      Valeur d’une étape supérieure à la propriété value actuelle et inférieure à la valeur de la propriété maximum.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur d’une étape supérieure à la propriété <codeph>value</codeph> actuelle et inférieure à la valeur de la propriété <codeph>maximum</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:previousValue:get"><apiName>previousValue</apiName><shortdesc>
      Valeur d’une étape inférieure à la propriété value actuelle et supérieure à la valeur de la propriété maximum.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Valeur d’une étape inférieure à la propriété <codeph>value</codeph> actuelle et supérieure à la valeur de la propriété <codeph>maximum</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:stepSize:get"><apiName>stepSize</apiName><shortdesc>
      Unité non nulle de changement entre les valeurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Unité non nulle de changement entre les valeurs. La propriété <codeph>value</codeph> doit être un multiple de ce nombre moins le minimum.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:protected:upArrowStyleFilters:get"><apiName>upArrowStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle NumericStepper à la flèche vers le haut.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle NumericStepper à la flèche vers le haut.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:value:get"><apiName>value</apiName><shortdesc>
      Valeur actuelle affichée dans la zone de texte du contrôle NumericStepper.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur actuelle affichée dans la zone de texte du contrôle NumericStepper. Si un utilisateur saisit un nombre qui n’est pas un multiple de la propriété <codeph>stepSize</codeph> et qui n’est pas compris entre les propriétés <codeph>maximum</codeph> et <codeph>minimum</codeph>, cette propriété est définie sur la valeur valide la plus proche.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:ToolTip"><apiName>ToolTip</apiName><shortdesc>
  Le contrôle ToolTip permet de donner des informations utiles à vos utilisateurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:ToolTip" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:ToolTip" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:ToolTip" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:ToolTip" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:ToolTip" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Distance de l’ombre portée. Si la propriété est définie sur une valeur négative, l’ombre apparaît au-dessus du composant.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="String">
<description>
  Direction de l’ombre portée. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’ombre portée.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.controls:ToolTip" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b/><codeph/> Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. Ce style est utilisé avec <codeph>borderStyle="solid"</codeph>. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b>Remarque :</b> pour que les ombres portées apparaissent sur des conteneurs, définissez les propriétés <codeph>backgroundColor</codeph> ou <codeph>backgroundImage</codeph>. Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Rayon des angles des composants. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 0. La valeur par défaut du contrôle ApplicationControlBar est 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.controls:ToolTip" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur du cadre de sélection. Utilisé uniquement lorsque la propriété <codeph>borderStyle</codeph> est définie sur <codeph>"solid"</codeph>.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  Style du cadre de sélection. Les valeurs possibles sont <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> et <codeph>"outset"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>"inset"</codeph>. La valeur par défaut de la plupart des conteneurs est <codeph>"none"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Class">
<description>
  Classe d’habillage de bordure du composant. La classe mx.skins.halo.HaloBorder est la valeur par défaut de tous les composants qui ne définissent pas explicitement leur propre valeur par défaut. La valeur par défaut du conteneur Panel est mx.skins.halo.PanelSkin. Pour déterminer la valeur par défaut d’un composant, voir le fichier default.css.
 
  </description>
<default>mx.skins.halo.HaloBorder
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="String">
<description>
  Côtés du cadre de sélection. Chaîne délimitée par des espaces qui indique quels côtés de la bordure afficher. La chaîne peut contenir les valeurs <codeph>"left"</codeph>, <codeph>"top"</codeph>, <codeph>"right"</codeph> et <codeph>"bottom"</codeph> dans n’importe quel ordre. La valeur par défaut est <codeph>"left top right bottom"</codeph>, ce qui permet de montrer les quatre côtés. Ce style est uniquement utilisé lorsque la propriété borderStyle est <codeph>"solid"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Couleur de la bordure. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0xB7BABC</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.controls:ToolTip" playerVersion="Flash10" theme="spark" type="Number">
<description>
  
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="String">
<description>
  Met à l’échelle l’image spécifiée par la propriété <codeph>backgroundImage</codeph> sur différentes tailles de pourcentage. Une valeur de <codeph>"100%"</codeph> étire l’image afin de remplir l’intégralité du composant. Pour spécifier un pourcentage, vous devez inclure le symbole de pourcentage (%). La valeur par défaut du conteneur Application est <codeph>100%</codeph>. La valeur par défaut de tous les autres conteneurs est <codeph>auto</codeph>, ce qui permet de conserver la taille d’origine de l’image.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Image d’arrière-plan d’un composant. Il peut s’agir d’une URL absolue ou relative ou d’une classe. <codeph/><codeph/> L’image d’arrière-plan s’affiche par dessus la couleur d’arrière-plan. La valeur par défaut est <codeph>undefined</codeph>, c’est-à-dire « non définie ». Si ce style et le style de la propriété <codeph>backgroundColor</codeph> ne sont pas définis, le composant est doté d’un arrière-plan transparent.
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, l’image d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan du composant lorsqu’il est désactivé. La valeur par défaut globale est <codeph>undefined</codeph>. La valeur par défaut des contrôles List est <codeph>0xDDDDDD</codeph> (gris clair). Si un conteneur est désactivé, l’arrière-plan est estompé et le degré d’estompe est contrôlé par le style <codeph>disabledOverlayAlpha</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan d’un composant. Les deux propriétés <codeph>backgroundColor</codeph> et <codeph>backgroundImage</codeph> peuvent être définies. Certains composants n’ont pas d’arrière-plan. Le contrôle DataGrid ignore ce style. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. Si ce style et le style de la propriété <codeph>backgroundImage</codeph> sont <codeph>undefined</codeph>, le composant est doté d’un arrière-plan transparent.
 
  <p>Pour le conteneur Application, ce style indique la couleur d’arrière-plan lors du chargement de l’application et un dégradé d’arrière-plan lors de son exécution. Flex calcule le motif de dégradé entre une couleur légèrement plus sombre que la couleur spécifiée et une couleur légèrement plus claire que la couleur spécifiée.</p>
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, la couleur d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Niveau Alpha de la couleur définie par la propriété <codeph>backgroundColor</codeph>, de l’image ou fichier SWF défini par le style <codeph>backgroundImage</codeph>. Les valeurs valides vont de 0.0 à 1.0. Pour la plupart des contrôles, la valeur par défaut est 1.0, mais pour les contrôles ToolTip, la valeur par défaut est de 0.95 et pour les contrôles Alert, elle est de 0.9.
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IToolTip</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle ToolTip permet de donner des informations utiles à vos utilisateurs. Lorsqu’un utilisateur déplace le pointeur de la souris sur un composant graphique, le contrôle ToolTip s’affiche et affiche un texte explicatif sur le composant. Vous pouvez utiliser les infos-bulles pour aider les utilisateurs à utiliser votre application ou personnaliser les contrôles ToolTip pour apporter plus de fonctionnalités.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link><link href="mx.styles.xml#CSSStyleDeclaration"><linktext>mx.styles.CSSStyleDeclaration</linktext></link></related-links><apiConstructor id="mx.controls:ToolTip:ToolTip"><apiName>ToolTip</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:ToolTip:maxWidth"><apiName>maxWidth</apiName><shortdesc>
      Largeur maximale en pixels des nouveaux contrôles ToolTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>300</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur maximale en pixels des nouveaux contrôles ToolTip.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ToolTip:protected:textField"><apiName>textField</apiName><shortdesc>
      Objet UITextField interne qui effectue le rendu du texte de cette info-bulle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      Objet UITextField interne qui effectue le rendu du texte de cette info-bulle.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ToolTip:text:get"><apiName>text</apiName><shortdesc>
      Texte affiché par l’info-bulle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Texte affiché par l’info-bulle.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:MenuBar"><apiName>MenuBar</apiName><shortdesc>
  Un contrôle MenuBar définit une barre de menus horizontale de niveau supérieur contenant un ou plusieurs menus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:MenuBar" playerVersion="Flash9" type="uint">
<description conref="mx.controls.Menu#style:selectionColor">
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:MenuBar" playerVersion="Flash9" type="uint">
<description conref="mx.controls.Menu#style:rollOverColor">
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="menuStyleName" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration CSSStyleDeclaration qui spécifie les styles des contrôles Menu affichés par ce contrôle MenuBar. Par défaut, le contrôle Menu utilise les styles héritables du contrôle MenuBar. 
  
  <p>Vous pouvez utiliser ce sélecteur de classe pour définir les valeurs de toutes les propriétés de style de la classe Menu, notamment <codeph>backgroundAlpha</codeph> et <codeph>backgroundColor</codeph>.</p>
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemDownSkin" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Class">
<description>
  Habillage lorsqu’un élément MenuBar est sélectionné. 
 
  </description>
<default>mx.skins.halo.ActivatorSkin 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemOverSkin" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Class">
<description>
  Habillage lorsque le focus est placé sur un élément MenuBar. 
 
  </description>
<default>mx.skins.halo.ActivatorSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemUpSkin" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Class">
<description>
  Habillage lorsqu’un élément MenuBar n’est pas sélectionné.
 
  </description>
<default>mx.skins.halo.ActivatorSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemSkin" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Class">
<description>
  Habillage par défaut d’un élément MenuBar
 
  </description>
<default>mx.skins.halo.ActivatorSkin 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSkin" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Class">
<description>
  Habillage d’arrière-plan du contrôle MenuBar. 
   
  </description>
<default>mx.skins.halo.MenuBarBackgroundSkin 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="menuStyleName" deprecatedSince="3.0" format="Color" inherit="no" name="backgroundColor" owner="mx.controls:MenuBar" playerVersion="Flash9" type="uint">
<description>
  Couleur d’arrière-plan du composant. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie et que l’arrière-plan du composant est transparent.
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, la couleur d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  </p>
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>>
  </pre>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="menuStyleName" deprecatedSince="3.0" inherit="no" name="backgroundAlpha" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  Niveau Alpha de la couleur définie par la propriété <codeph>backgroundColor</codeph> Les valeurs valides sont comprises entre 0.0 et 1.0.
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:MenuBar" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:MenuBar" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:MenuBar" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:MenuBar" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:MenuBar" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris le libellé du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.controls:MenuBar" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage de surbrillance des contrôles. La première valeur indique la transparencé du haut de la surbrillance et la seconde valeur indique la transparence du bas de la surbrillance. La surbrillance couvre la moitié supérieure de l’habillage.
  
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.controls:MenuBar" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Couleurs utilisées pour teindre l’arrière-plan du contrôle. Transmettez la même couleur pour les deux valeurs d’un contrôle à l’aspect plat.
  
  </description>
<default>[ 0xFFFFFF, 0xCCCCCC ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.controls:MenuBar" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage d’arrière-plan des contrôles. Utilisez la valeur [1, 1] pour rendre l’arrière-plan des contrôles opaque.
  
  </description>
<default>[ 0.6, 0.4 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:MenuBar" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Rayon des angles des composants. Les composants suivants prennent ce style en charge : Alert, Button, ComboBox, LinkButton, MenuBar, NumericStepper, Panel, ScrollBar, Tab, TitleWindow et tous les composants qui prennent en charge une propriété <codeph>borderStyle</codeph> définie sur <codeph>"solid"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:MenuBar" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de la bordure. Les contrôles suivants prennent ce style en charge : Button, CheckBox, ComboBox, MenuBar, NumericStepper, ProgressBar, RadioButton, ScrollBar, Slider et tous les composants qui prennent en charge le style <codeph>borderStyle</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0xB7BABC</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  Indique quels angles du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus.
  
  </description>
<default>0.4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  <p>
  The <code>&lt;mx:MenuBar&gt</code> tag inherits all of the tag attributes of its superclass, and
  adds the following tag attributes:
  </p>
  
  <pre>
  &lt;mx:MenuBar
    <b>Properties</b>
    dataDescriptor="<i>mx.controls.treeClasses.DefaultDataDescriptor</i>"
    dataProvider="<i>undefined</i>"
    iconField="icon"
    labelField="label"
    labelFunction="<i>undefined</i>"
    menuBarItemRenderer="<i>mx.controls.menuClasses.MenuBarItem</i>"
    menuBarItems="[]"
    menus="[]"
    selectedIndex="-1"
    showRoot="true"
  
    <b>Styles</b>
    backgroundSkin="mx.skins.halo.MenuBarBackgroundSkin"
    borderColor="0xAAB3B3"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    fillAlphas="[0.6,0.4]"
    fillColors="[0xFFFFFF, 0xCCCCCC]"
    focusAlpha="0.5"
    focusRoundedCorners="tl tr bl br"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|none|subpixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    highlightAlphas="[0.3,0.0]"
    itemDownSkin="mx.skins.halo.ActivatorSkin"
    itemOverSkin="mx.skins.halo.ActivatorSkin"
    itemUpSkin="mx.skins.halo.ActivatorSkin"
    leading="2"
    menuStyleName="<i>No default</i>"
    rollOverColor="0xB2E1FF"
    selectionColor="0x7FCEFF"
    textAlign="left"
    textDecoration="none"
    textIndent="0"
  
    <b>Events</b>
    itemClick="<i>No default"</i>
    itemRollOut="<i>No default"</i>
    itemRollOver="<i>No default"</i>
    menuHide="<i>No default"</i>
    menuShow="<i>No default"</i>
  /&gt;
  </pre>
  </p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un contrôle MenuBar définit une barre de menus horizontale de niveau supérieur contenant un ou plusieurs menus. Cliquer sur un élément de menu de niveau supérieur a pour effet d’ouvrir un sous-menu contextuel qui est une occurrence du contrôle Menu.
 
  <p>La barre de menus de niveau supérieur du contrôle MenuBar est généralement toujours visible. Elle n’a pas pour but d’être utilisée comme un menu contextuel. Chaque sous-menu s’affiche lorsque l’utilisateur le sélectionne avec la souris ou le clavier. Les sous-menus ouverts disparaissent lorsqu’un élément de menu est sélectionné ou si l’utilisateur fait disparaître le menu en cliquant en dehors.</p>
 
  <p>Pour plus d’informations et pour obtenir un exemple sur les attributs que vous pouvez utiliser dans le fournisseur de données pour le contrôle MenuBar, voir le contrôle Menu.</p>
 
  <p>Le contrôle MenuBar possède les caractéristiques de taille par défaut suivantes :
  </p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La largeur est déterminée à partir du texte du menu, sa valeur minimale étant de 27 pixels. La valeur par défaut pour la hauteur est de 22 pixels.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="MenuBarExample.mxml"><swfblock conref="examples/MenuBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Menu"><linktext>mx.controls.Menu</linktext></link><link href="mx.controls.xml#PopUpMenuButton"><linktext>mx.controls.PopUpMenuButton</linktext></link><link href="mx.controls.menuClasses.xml#IMenuBarItemRenderer"><linktext>mx.controls.menuClasses.IMenuBarItemRenderer</linktext></link><link href="mx.controls.menuClasses.xml#MenuBarItem"><linktext>mx.controls.menuClasses.MenuBarItem</linktext></link><link href="mx.controls.menuClasses.xml#IMenuDataDescriptor"><linktext>mx.controls.menuClasses.IMenuDataDescriptor</linktext></link><link href="mx.controls.treeClasses.xml#DefaultDataDescriptor"><linktext>mx.controls.treeClasses.DefaultDataDescriptor</linktext></link></related-links><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  Distribué lorsque le pointeur de la souris survole un élément de menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le pointeur de la souris survole un élément de menu.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  Distribué lorsque le pointeur de la souris cesse de survoler un élément de menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le pointeur de la souris cesse de survoler un élément de menu.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.MENU_SHOW_menuShow"><apiName>menuShow</apiName><shortdesc>
  Distribué lorsqu’un sous-menu contextuel s’ouvre ou lorsque l’utilisateur sélectionne un élement d’une barre de menus sans menu déroulant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.MENU_SHOW</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un sous-menu contextuel s’ouvre ou lorsque l’utilisateur sélectionne un élement d’une barre de menus sans menu déroulant.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.MENU_HIDE_menuHide"><apiName>menuHide</apiName><shortdesc>
  Distribué à la fermeture d’un sous-menu contextuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.MENU_HIDE</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à la fermeture d’un sous-menu contextuel.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Diffusé lorsque l’utilisateur sélectionne un élément dans un sous-menu contextuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Diffusé lorsque l’utilisateur sélectionne un élément dans un sous-menu contextuel.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la sélection change après une interaction de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la sélection change après une interaction de l’utilisateur. Cet événement est également distribué lorsque l’utilisateur change la sélection du menu en cours dans un sous-menu déroulant. Lorsque l’événement se produit sur la barre de menus, la propriété <codeph>menu</codeph> de l’objet MenuEvent a la valeur <codeph>null</codeph>. Lorsqu’il se produit dans un sous-menu déroulant, la propriété <codeph>menu</codeph> contient une référence à l’objet Menu qui représente le sous-menu déroulant.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:MenuBar:MenuBar"><apiName>MenuBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:MenuBar:getMenuAt"><apiName>getMenuAt</apiName><shortdesc>
      Renvoie une référence à l’objet Menu à l’index de l’élément MenuBar spécifié. La valeur 0 correspond à l’objet Menu contenu à l’index de l’élément MenuBar le plus à gauche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Référence à l’objet Menu contenu à l’index spécifié.
      
      </apiDesc><apiOperationClassifier>mx.controls:Menu</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index de l’occurrence Menu à renvoyer.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie une référence à l’objet Menu à l’index de l’élément MenuBar spécifié. La valeur 0 correspond à l’objet Menu contenu à l’index de l’élément MenuBar le plus à gauche. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:MenuBar:itemToIcon"><apiName>itemToIcon</apiName><shortdesc>
      Renvoie la classe d’une icône, le cas échant, d’un élément de données, en fonction de la propriété iconField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Icône de l’élément, comme référence de classe ou <codeph>null</codeph> si aucune n’existe.
      
      </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Elément à partir duquel extraire la classe d’une icône
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la classe d’une icône, le cas échant, d’un élément de données, en fonction de la propriété <codeph>iconField</codeph>. Le champ de l’élément peut renvoyer une chaîne tant que cette chaîne représente le nom d’une classe dans l’application. Le champ de l’élément peut également être une chaîne qui est le nom d’une variable dans le document qui contient la classe de l’icône.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:MenuBar:itemToLabel"><apiName>itemToLabel</apiName><shortdesc conref="mx.controls.listClasses.ListBase#itemToLabel()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>Chaîne à afficher en fonction des données.
      
      </apiDesc></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet à afficher.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.listClasses.ListBase#itemToLabel()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:MenuBar:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule la largeur et la hauteur préférées du contrôle MenuBar en fonction des largeurs par défaut des éléments MenuBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule la largeur et la hauteur préférées du contrôle MenuBar en fonction des largeurs par défaut des éléments MenuBar. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:MenuBar:protected:updateBackground"><apiName>updateBackground</apiName><shortdesc>
      Actualise l’habillage d’arrière-plan du contrôle MenuBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Actualise l’habillage d’arrière-plan du contrôle MenuBar. Cette méthode est appelée lorsque les enfants du contrôle MenuBar sont créés ou lorsque des styles changent sur le contrôle MenuBar. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:MenuBar:labelFunction"><apiName>labelFunction</apiName><shortdesc>
      Fonction qui détermine le texte à afficher pour chaque élément de menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/><apiDefaultValue>"undefined"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction qui détermine le texte à afficher pour chaque élément de menu. La fonction libellé doit trouver le ou les champs appropriés dans le fournisseur de données et renvoyer une chaîne à afficher. Si vous omettez cette propriété, Flex utilise le contenu du champ ou de l’attribut spécifié par la propriété <codeph>labelField</codeph>. Si vous spécifiez cette propriété, Flex ignore toute valeur de la propriété <codeph>labelField</codeph>. La propriété <codeph>labelFunction</codeph> permet de gérer la mise en forme et la localisation.
     
      <p>La fonction libellé doit prendre un seul argument, qui est l’élément dans le fournisseur de données et renvoyer une chaîne.</p>
      <pre>
      <codeph>myLabelFunction(item:Object):String</codeph> </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:menuBarItems"><apiName>menuBarItems</apiName><shortdesc>
      Tableau contenant les objets MenuBarItem qui rendent chaque élément de la barre de menus de niveau supérieur d’un contrôle MenuBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/><apiDefaultValue>[ ]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Tableau contenant les objets MenuBarItem qui rendent chaque élément de la barre de menus de niveau supérieur d’un contrôle MenuBar. Par défaut, cette propriété contient des occurrences de la classe MenuBarItem. Il est déconseillé d’ajouter directement les éléments au tableau <codeph>menuBarItems</codeph>. Pour ajouter des éléments de la barre de menus, ajoutez-les directement au fournisseur de données du contrôle MenuBar. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.menuClasses.xml#MenuBarItem"><linktext>mx.controls.menuClasses.MenuBarItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:MenuBar:menus"><apiName>menus</apiName><shortdesc>
      Tableau contenant les objets Menu correspondant aux sous-menus contextuels de ce contrôle MenuBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/><apiDefaultValue>[ ] 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Tableau contenant les objets Menu correspondant aux sous-menus contextuels de ce contrôle MenuBar. Chaque élément MenuBar peut disposer d’un objet Menu correspondant dans le tableau, même si l’élément ne comporte pas de sous-menu contextuel. Flex ne renseigne pas initialement le tableau <codeph>menus</codeph>. En revanche, il crée les menus de façon dynamique, selon les besoins. Il est déconseillé d’ajouter directement les éléments au tableau <codeph>menus</codeph>. Pour ajouter des menus contextuels, ajoutez-les directement au fournisseur de données du contrôle MenuBar.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      Objet qui accède aux objets du fournisseur de données et les manipule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.menuClasses:IMenuDataDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      Objet qui accède aux objets du fournisseur de données et les manipule. Le contrôle MenuBar délègue au descripteur de données pour obtenir des informations sur ses données. Ces données sont ensuite utilisées pour analyser et déplacer la source de données. Le descripteur de données défini pour le contrôle MenuBar est utilisé pour tous les menus enfant et les sous-menus. 
     
      <p>Lorsque vous spécifiez cette propriété comme attribut dans MXML, vous devez utiliser une référence au descripteur de données et pas lenom de chaîne du descripteur. Utilisez le format suivant pour définir la propriété :</p>
     
     <pre>&lt;mx:MenuBar id="menubar" dataDescriptor="{new MyCustomDataDescriptor()}"/></pre>
     
      <p>Vous pouvez également spécifier la propriété dans MXML comme sous-balise imbriquée, comme le montre l’exemple suivant :</p>
     
      <pre>&lt;mx:MenuBar>
      &lt;mx:dataDescriptor>
         &lt;myCustomDataDescriptor>
      &lt;/mx:dataDescriptor>
      ...</pre>
     
      <p>Valeur par défaut dune occurrence interne de la classe DefaultDataDescriptor.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Hiérarchie des objets qui s’affichent en tant qu’éléments MenuBar et menus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"undefined"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hiérarchie des objets qui s’affichent en tant qu’éléments MenuBar et menus. Les enfants de niveau supérieur deviennent tous des éléments MenuBar et leurs enfants deviennent les éléments des menus et sous-menus. Le contrôle MenuBar gère l’objet de données source de la manière suivante :
      <p>
      <ul>
      <li>Une chaîne contenant du texte XML valide est convertie en objet XML.</li>
      <li>Un objet XMLNode est converti en objet XML.</li>
      <li>Un objet XMLList est converti en objet XMLListCollection.</li>
      <li>N’importe quel objet qui implémente l’interface ICollectionView est distribué à un objet ICollectionView.</li>
      <li>Un objet Array est converti en objet ArrayCollection.</li>
      <li>Tout autre type d’objet est enroulé dans un objet Array (l’objet étant sa seule entrée).</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:hasRoot:get"><apiName>hasRoot</apiName><shortdesc conref="mx.controls.Menu#hasRoot">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.Menu#hasRoot">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:iconField:get"><apiName>iconField</apiName><shortdesc>
      Nom du champ dans le fournisseur de données qui détermine l’icône à afficher pour chaque élément de menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"icon"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ dans le fournisseur de données qui détermine l’icône à afficher pour chaque élément de menu. Par défaut, le contrôle MenuBar n’essaie pas d’afficher les icônes avec le texte dans un élément de menu. En spécifiant un champ d’icône, vous pouvez définir un graphique qui est créé et affiché en tant qu’icône dans un élément de menu. 
     
      <p>Le contrôle MenuItemRenderer recherche dans le fournisseur de données une propriété dont le nom est défini par la propriété <codeph>iconField</codeph>. Si la valeur de la propriété est une classe, cette dernière est instanciée et sera probablement une occurrence d’un objet IFlexDisplayObject. Si la valeur de la propriété est une chaîne, elle regarde si une classe de ce nom existe dans l’application. Si elle n’en trouve pas, elle recherchera également une propriété de ce nom dans le document et s’attendra à ce que cette propriété s’associe à une classe.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:labelField:get"><apiName>labelField</apiName><shortdesc>
      Nom du champ dans le fournisseur de données qui détermine le texte à afficher pour chaque élément de menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><label>to specify the label attribute in an E4X XML Object 
      as the text to display for each menu item. 
     
      Setting the <code>labelFunction</code> property overrides this property.
     
      </label></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ dans le fournisseur de données qui détermine le texte à afficher pour chaque élément de menu. Si le fournisseur de données est un tableau de chaînes, Flex utilise chaque valeur de chaîne comme libellé. Si le fournisseur de données est un objet E4X XML, vous devez définir explicitement cette propriété. Utilisez par exemple </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:menuBarItemRenderer:get"><apiName>menuBarItemRenderer</apiName><shortdesc>
      Rendu d’élément utilisé par le contrôle MenuBar pour la barre de menus de niveau supérieur du contrôle MenuBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier><apiDefaultValue>"mx.controls.menuClasses.MenuBarItem"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Rendu d’élément utilisé par le contrôle MenuBar pour la barre de menus de niveau supérieur du contrôle MenuBar. 
     
      <p>Vous pouvez définir un rendu d’élément pour les sous-menus contextuels du contrôle MenuBar. Comme chaque sous-menu contextuel est une occurrence du contrôle Menu, utilisez la classe MenuItemRenderer pour définir un rendu d’élément pour les sous-menus contextuels. Pour définir le rendu d’élément d’un sous-menu contextuel, accédez à l’objet Menu à l’aide la propriété <codeph>menus</codeph>. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.menuClasses.xml#MenuBarItem"><linktext>mx.controls.menuClasses.MenuBarItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:MenuBar:protected:menuBarItemStyleFilters:get"><apiName>menuBarItemStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre de MenuBar aux éléments barre de menus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre de MenuBar aux éléments barre de menus.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:MenuBar:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Index du contrôle MenuBar de l’objet Menu actuellement ouvert ou du dernier objet Menu ouvert si aucun n’est actuellement ouvert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Index du contrôle MenuBar de l’objet Menu actuellement ouvert ou du dernier objet Menu ouvert si aucun n’est actuellement ouvert.    
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      Indicateur booléen précisant si le nœud racine du fournisseur de données doit être affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur booléen précisant si le nœud racine du fournisseur de données doit être affiché. Si le fournisseur de données comporte un nœud racine et si la propriété <codeph>showRoot</codeph> est définie sur <codeph>false</codeph>, les éléments du contrôle MenuBar correspondent aux descendants immédiats du nœud racine. Cet indicateur n’a aucun effet sur les fournisseurs de données sans nœud racine, comme les contrôles Lists et Arrays. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#MenuBar/hasRoot"><linktext>hasRoot</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:VSlider"><apiName>VSlider</apiName><shortdesc>	
  Le contrôle VSlider permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="direction"/><Alternative owner="mx.controls:VSlider" replacement="spark.components.VSlider" since="4.0">
	</Alternative><styles><style enumeration="left,top,right,bottom" inherit="no" name="dataTipPlacement" owner="mx.controls:VSlider" playerVersion="Flash9" type="String">
<description>
  Emplacement de l’astuce sur les données par rapport au curseur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph>, <codeph>"top"</codeph> et <codeph>"bottom"</codeph>.
  
  </description>
<default>"left"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VSlider&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attribute:</p>
 
  <pre>
  &lt;mx:VSlider
    <strong>Styles</strong>
    dataTipPlacement="top"
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.sliderClasses:Slider</apiBaseClassifier></apiClassifierDef><apiDesc>	
  Le contrôle VSlider permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail. La valeur actuelle du curseur est déterminée par son emplacement relatif entre ses extrémités, ce qui correspond aux valeurs minimum et maximum du curseur.
 
  <p>Le curseur peut autoriser une plage continue de valeurs entre ses valeurs minimales et maximales, ou être limité à des valeurs à intervalles concrets entre la valeur minimale et maximale. Des coches peuvent s’afficher aux intervalles spécifiés le long du rail. Ces coches sont indépendantes des valeurs autorisées du curseur. Il peut également utiliser une astuce sur les données pour afficher sa valeur actuelle.</p>
  	
  <p>Le contrôle VSlider est orienté verticalement. Le rail du curseur s’étire de bas en haut et les étiquettes et coches sont placées à gauche ou à droite du rail.</p>
 
  <p>Le contrôle VSlider possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>250 pixels de hauteur et assez large pour contenir le curseur et ses étiquettes associées</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Aucun</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Aucun</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleImageVSlider.mxml"><swfblock conref="examples/SimpleImageVSlider.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#HSlider"><linktext>mx.controls.HSlider</linktext></link><link href="mx.controls.sliderClasses.xml#Slider"><linktext>mx.controls.sliderClasses.Slider</linktext></link><link href="mx.controls.sliderClasses.xml#SliderThumb"><linktext>mx.controls.sliderClasses.SliderThumb</linktext></link><link href="mx.controls.sliderClasses.xml#SliderDataTip"><linktext>mx.controls.sliderClasses.SliderDataTip</linktext></link><link href="mx.controls.sliderClasses.xml#SliderLabel"><linktext>mx.controls.sliderClasses.SliderLabel</linktext></link></related-links><apiConstructor id="mx.controls:VSlider:VSlider"><apiName>VSlider</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:ProgressBarDirection"><apiName>ProgressBarDirection</apiName><shortdesc>
  La classe ProgressBarDirection définit les valeurs de la propriété direction de la classe ProgressBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ProgressBarDirection définit les valeurs de la propriété <codeph>direction</codeph> de la classe ProgressBar.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ProgressBar"><linktext>mx.controls.ProgressBar</linktext></link></related-links><apiValue id="mx.controls:ProgressBarDirection:LEFT"><apiName>LEFT</apiName><shortdesc>
	  Spécifie un remplissage de la barre de progression de droite à gauche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie un remplissage de la barre de progression de droite à gauche.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarDirection:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	  Spécifie un remplissage de la barre de progression de gauche à droite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Spécifie un remplissage de la barre de progression de gauche à droite.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
  Le contrôle HScrollBar (ScrollBar horizontale) permet de contrôler la portion de données qui s’affiche lorsqu’il existe plus de données que la zone d’affichage ne peut en contenir.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="direction"/><Alternative owner="mx.controls:HScrollBar" replacement="spark.components.HScrollBar" since="4.0">
	</Alternative><styles><style format="Time" inherit="no" name="repeatInterval" owner="mx.controls:HScrollBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de millisecondes entre les événements <codeph>buttonDown</codeph> si l’utilisateur maintient le bouton de la souris enfoncé. La valeur par défaut est 35.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="mx.controls:HScrollBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de millisecondes à attendre après le premier événement<codeph>buttonDown</codeph> avant de répéter les événements <codeph>buttonDown</codeph> à <codeph>repeatInterval</codeph>. La valeur par défaut est 500.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:HScrollBar&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:HScrollBar
    <strong>Styles</strong>
    repeatDelay="500"
    repeatInterval="35"
 
    <strong>Events</strong>
    scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.scrollClasses:ScrollBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle HScrollBar (ScrollBar horizontale) permet de contrôler la portion de données qui s’affiche lorsqu’il existe plus de données que la zone d’affichage ne peut en contenir. Ce contrôle prolonge le contrôle ScrollBar de base. 
  
  <p>Bien que vous puissiez utiliser le contrôle HScrollBar de façon autonome, vous le combinez généralement dans un autre groupe de composants pour bénéficier de la fonctionnalité de défilement.</p>
 
  <p>Un contrôle ScrollBar comprend quatre parties : deux boutons fléchés, un rail et un curseur. La position du curseur et l’affichage des boutons dépendent de l’état actuel du contrôle. Pour calculer son état d’affichage, le contrôle ScrollBar utilise quatre paramètres :</p>
 
  <ul>
    <li>Valeur de plage minimale.</li>
    <li>Valeur de plage maximale.</li>
    <li>Position actuelle : doit se trouver entre les valeurs de plage minimale et maximale.</li>
    <li>Taille de la fenêtre : représente le nombre d’éléments de la plage que vous pouvez afficher en même temps. Le nombre d’éléments doit être inférieur ou égal à la plage, celle-ci correspondant au jeu de valeurs comprises entre la valeur minimale et la valeur maximale de la plage.</li>
  </ul>
 
  </apiDesc><example conref="HScrollBarExample.mxml"><swfblock conref="examples/HScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.scrollClasses.xml#ScrollBar"><linktext>mx.controls.scrollClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="mx.controls:HScrollBar_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Distribué lorsque le contrôle ScrollBar défile via l’action initiée par l’utilisateur ou par programme.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le contrôle ScrollBar défile via l’action initiée par l’utilisateur ou par programme. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:HScrollBar:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:ProgressBarMode"><apiName>ProgressBarMode</apiName><shortdesc>
  La classe ProgressBarMode définit les valeurs de la propriété mode de la classe ProgressBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ProgressBarMode définit les valeurs de la propriété <codeph>mode</codeph> de la classe ProgressBar.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ProgressBar"><linktext>mx.controls.ProgressBar</linktext></link></related-links><apiValue id="mx.controls:ProgressBarMode:EVENT"><apiName>EVENT</apiName><shortdesc>
	  Le contrôle spécifié par la propriété source doit distribuer les événements progress et completed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>event</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Le contrôle spécifié par la propriété <codeph>source</codeph> doit distribuer les événements <codeph>progress</codeph> et <codeph>completed</codeph>. Le contrôle ProgressBar utilise ces événements pour actualiser son état.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarMode:MANUAL"><apiName>MANUAL</apiName><shortdesc>
	  Mettez manuellement à jour l’état de la barre de progression.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>manual</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Mettez manuellement à jour l’état de la barre de progression. Dans ce mode, vous spécifiez les propriétés <codeph>maximum</codeph> et <codeph>minimum</codeph> et utilisez la méthode <codeph>setProgress()</codeph> pour spécifier l’état. Ce mode est souvent utilisé lorsque la propriété <codeph>indeterminate</codeph> a la valeur <codeph>true</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarMode:POLLED"><apiName>POLLED</apiName><shortdesc>
	  La propriété source doit spécifier un objet qui expose les méthodes getBytesLoaded() et getBytesTotal().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>polled</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  La propriété <codeph>source</codeph> doit spécifier un objet qui expose les méthodes <codeph>getBytesLoaded()</codeph> et <codeph>getBytesTotal()</codeph>. Le contrôle ProgressBar appelle ces méthodes pour actualiser son état.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:Tree"><apiName>Tree</apiName><shortdesc>
  Le contrôle Tree permet à l’utilisateur d’afficher les données hiérarchiques organisées sous forme d’arborescence à développer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:Tree" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte lorsque l’utilisateur sélectionne une rangée.
 
  </description>
<default>0x2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:Tree" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte lorsque l’utilisateur survole une rangée avec la souris.
 
  </description>
<default>0x2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectionEasingFunction" owner="mx.controls:Tree" playerVersion="Flash9" type="Function">
<description>
  Référence à une fonction <codeph>easingFunction</codeph> qui permet de contrôler l’interpolation par programme.
 
  <p>La valeur par défaut est <codeph>undefined</codeph>.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionDisabledColor" owner="mx.controls:Tree" playerVersion="Flash9" type="uint">
<description>
  Indique la couleur désactivée d’un élément de liste.
 
  </description>
<default>0xDDDDDD
 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:Tree" playerVersion="Flash9" type="uint">
<description>
  Couleur d’arrière-plan lorsque l’utilisateur sélectionne le lien.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:Tree" playerVersion="Flash9" type="uint">
<description>
  Couleur d’arrière-plan lorsque l’utilisateur survole le lien avec la souris.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.controls:Tree" playerVersion="Flash9" type="Function">
<description>
  Fonction d’accélération permettant de contrôler l’interpolation du composant.
 
  <p>La valeur par défaut est <codeph>undefined</codeph>.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.controls:Tree" playerVersion="Flash9" type="Number">
<description>
  Longueur d’une transition ouverte ou fermée, en millisecondes.
 
  </description>
<default>250
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="indentation" owner="mx.controls:Tree" playerVersion="Flash9" type="Number">
<description>
  Retrait de chaque niveau de l’arborescence, en pixels.
 
  </description>
<default>17
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="folderClosedIcon" owner="mx.controls:Tree" playerVersion="Flash9" type="Class">
<description>
  Spécifie l’icône fermée de dossier d’un élément de branche de l’arborescence. Dans MXML, vous pouvez utiliser la syntaxe suivante pour définir cette propriété : <codeph>folderClosedIcon="@Embed(source=’b.jpg’);"</codeph> La valeur par défaut est le symbole « TreeFolderClosed » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="folderOpenIcon" owner="mx.controls:Tree" playerVersion="Flash9" type="Class">
<description>
  Spécifie l’icône ouverte de dossier d’un élément de branche de l’arborescence. Dans MXML, vous pouvez utiliser la syntaxe suivante pour définir cette propriété : <codeph>folderOpenIcon="@Embed(source=’a.jpg’);"</codeph> La valeur par défaut est le symbole « TreeFolderOpen » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="disclosureClosedIcon" owner="mx.controls:Tree" playerVersion="Flash9" type="Class">
<description>
  Spécifie l’icône qui s’affiche à côté d’un élément parent fermé afin que ses enfants ne s’affichent pas (l’arborescence secondaire est réduite). La valeur par défaut est le symbole « TreeDisclosureClosed » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="disclosureOpenIcon" owner="mx.controls:Tree" playerVersion="Flash9" type="Class">
<description>
  Spécifie l’icône qui s’affiche à côté d’un élément parent ouvert afin que ses enfants s’affichent. La valeur par défaut est le symbole « TreeDisclosureOpen » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="defaultLeafIcon" owner="mx.controls:Tree" playerVersion="Flash9" type="Class">
<description>
  Spécifie l’icône par défaut d’un élément de nœud terminal. Dans MXML, vous pouvez utiliser la syntaxe suivante pour définir cette propriété : <codeph>defaultLeafIcon="@Embed(source=’c.jpg’);"</codeph> La valeur par défaut est le symbole « TreeNodeIcon » du fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="depthColors" owner="mx.controls:Tree" playerVersion="Flash9" type="Array">
<description>
  Tableau de couleurs utilisé dans le contrôle Tree, par ordre décroissant.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="mx.controls:Tree" playerVersion="Flash9" type="Array">
<description>
  Couleurs alternées pour les rangées. La valeur peut être un tableau de deux couleurs ou plus. Utilisée uniquement si la propriété <codeph>backgroundColor</codeph> n’est pas spécifiée.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:Tree" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:Tree" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  <p>
  The &lt;mx:Tree&gt; tag inherits all the tag attributes of its superclass, and
  adds the following tag attributes:
  </p>
  <pre>
  &lt;mx:Tree
    <b>Properties</b>
    dataDescriptor="<i>Instance of DefaultDataDescriptor</i>"
    dataProvider="null"
    dragMoveEnabled="true|false"
    firstVisibleItem="<i>First item in the control</i>"
    hasRoot="false|true"
    itemIcons="null"
    maxHorizontalScrollPosition="0"
    openItems="null"
    showRoot="true|false"
    &nbsp;
    <b>Styles</b>
    alternatingItemColors="undefined"
    backgroundDisabledColor="0xDDDDDD"
    defaultLeafIcon="<i>'TreeNodeIcon' symbol in Assets.swf</i>"
    depthColors="undefined"
    disclosureClosedIcon="<i>'TreeDisclosureClosed' symbol in Assets.swf</i>"
    disclosureOpenIcon="<i>'TreeDisclosureOpen' symbol in Assets.swf</i>"
    folderClosedIcon="<i>'TreeFolderClosed' symbol in Assets.swf</i>"
    folderOpenIcon="<i>'TreeFolderOpen' symbol in Assets.swf</i>"
    indentation="17"
    openDuration="250"
    openEasingFunction="undefined"
    paddingLeft="2"
    paddingRight="0"
    rollOverColor="0xAADEFF"
    selectionColor="0x7FCDFE"
    selectionDisabledColor="0xDDDDDD"
    selectionEasingFunction="undefined"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x2B333C"
    &nbsp;
    <b>Events</b>
    change="<i>No default</i>"
    itemClose="<i>No default</i>"
    itemOpen="<i>No default</i>"
    itemOpening="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>mx.controls:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle Tree permet à l’utilisateur d’afficher les données hiérarchiques organisées sous forme d’arborescence à développer. Chaque élément d’une arborescence peut être un nœud terminal ou une branche. Un nœud terminal est une extrémité de l’arborescence. Un élément de branche peut contenir des nœuds terminaux ou des branches, ou peut être vide.
 
  <p>Par défaut, un nœud terminal est représenté par une étiquette de texte à côté d’une icône de fichier. Une branche est représentée par une étiquette de texte à côté d’une icône de dossier, avec un triangle développement/réduction qu’un utilisateur peut ouvrir pour exposer les enfants.</p>
  
  <p>La classe Tree utilise un objet ITreeDataDescriptor ou ITreeDataDescriptor2 pour analyser et manipuler le fournisseur de données. Le descripteur de données de l’arborescence par défaut, un objet de la classe DefaultDataDescriptor, prend en charge les classes XML et Object. Tous les enfants d’un fournisseur de données de classe Object doivent se trouver dans les champs <codeph>children</codeph>.
  </p>
 
  <p>Le contrôle Tree possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Assez large pour accueillir l’icône, l’étiquette et le triangle de développement, le cas échéant, le nœud le plus large dans les 7 premières rangées (non réduites) et sept rangées de hauteur, chaque rangées faisant 20 pixels de haut. Si une barre de défilement est requise, sa largeur n’est pas comprise dans les calculs de largeur.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>5000 par 5000.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TreeExample.mxml"><swfblock conref="examples/TreeExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.treeClasses.xml#ITreeDataDescriptor"><linktext>mx.controls.treeClasses.ITreeDataDescriptor</linktext></link><link href="mx.controls.treeClasses.xml#ITreeDataDescriptor2"><linktext>mx.controls.treeClasses.ITreeDataDescriptor2</linktext></link><link href="mx.controls.treeClasses.xml#DefaultDataDescriptor"><linktext>mx.controls.treeClasses.DefaultDataDescriptor</linktext></link></related-links><adobeApiEvent id="mx.controls:Tree_mx.events.TreeEvent.ITEM_OPENING_itemOpening"><apiName>itemOpening</apiName><shortdesc>
  Distribué lorsque l’ouverture ou la fermeture d’une branche est initiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TreeEvent.ITEM_OPENING</apiEventType><adobeApiEventClassifier>mx.events.TreeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’ouverture ou la fermeture d’une branche est initiée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Tree_mx.events.TreeEvent.ITEM_OPEN_itemOpen"><apiName>itemOpen</apiName><shortdesc>
  Distribué lorsqu’une branche est ouverte ou développée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TreeEvent.ITEM_OPEN</apiEventType><adobeApiEventClassifier>mx.events.TreeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une branche est ouverte ou développée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Tree_mx.events.TreeEvent.ITEM_CLOSE_itemClose"><apiName>itemClose</apiName><shortdesc>
  Distribué lorsqu’une branche est fermée ou réduite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TreeEvent.ITEM_CLOSE</apiEventType><adobeApiEventClassifier>mx.events.TreeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une branche est fermée ou réduite.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:Tree:Tree"><apiName>Tree</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:Tree:protected:dragCompleteHandler"><apiName>dragCompleteHandler</apiName><shortdesc>
      Gère les événements DragEvent.DRAG_COMPLETE.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>Objet DragEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gère les événements <codeph>DragEvent.DRAG_COMPLETE</codeph>. Cette méthode supprime l’élément du fournisser de données.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:protected:dragDropHandler"><apiName>dragDropHandler</apiName><shortdesc>
      Gère les événements DragEvent.DRAG_DROP.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>Objet DragEvent.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gère les <codeph>événements DragEvent.DRAG_DROP</codeph>. Cette méthode masque le résultats du dépôt en appelant la méthode <codeph>hideDropFeedback()</codeph>.
     
      <p>Si l’action est de type <codeph>COPY</codeph>, cette méthode réalise une copie profonde de l’objet en appelant la méthode <codeph>ObjectUtil.copy()</codeph> et remplace la propriété <codeph>uid</codeph> de la copie (si elle est présente) par une nouvelle valeur en appelant la méthode <codeph>UIDUtil.createUID()</codeph>.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.utils.xml#ObjectUtil"><linktext>mx.utils.ObjectUtil</linktext></link><link href="mx.utils.xml#UIDUtil"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:Tree:expandChildrenOf"><apiName>expandChildrenOf</apiName><shortdesc>
      Ouvre ou ferme tous les éléments de l’arborescence situés sous l’élément spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément de départ.
     
      </apiDesc></apiParam><apiParam><apiItemName>open</apiItemName><apiType value="Boolean"/><apiDesc>Fait basculer une opération d’ouverture ou de fermeture. Indique la valeur <codeph>true</codeph> pour ouvrir les éléments et la valeur <codeph>false</codeph> pour les fermer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ouvre ou ferme tous les éléments de l’arborescence situés sous l’élément spécifié. Si vous définissez l’objet <codeph>dataProvider</codeph> puis appelez immédiatement la méthode <codeph>expandChildrenOf()</codeph>, il est possible que le comportement soit incorrect. Vous devez soit attendre la validation du composant, soit appeler la méthode <codeph>validateNow</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:expandItem"><apiName>expandItem</apiName><shortdesc>
      Ouvre ou ferme un élément de branche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à affecter.
     
      </apiDesc></apiParam><apiParam><apiItemName>open</apiItemName><apiType value="Boolean"/><apiDesc>Indiquez la valeur <codeph>true</codeph> pour ouvrir et la valeur <codeph>false</codeph> pour fermer.
     
      </apiDesc></apiParam><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Spécifiez la valeur <codeph>true</codeph> pour animer la transition (remarque : pour des raisons de performances, si une branche comporte plus de 20 enfants, elle n’est pas animée lors de sa première ouverture).
     
      </apiDesc></apiParam><apiParam><apiItemName>dispatchEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Contrôle si l’arborescence déclenche un événement <codeph>open</codeph> à la fin de l’ouverture de l’animation.
     
      </apiDesc></apiParam><apiParam><apiItemName>cause</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>L’événement, le cas échéant, qui a initié l’action d’ouverture de l’élément.
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ouvre ou ferme un élément de branche. Lorsqu’un élément de branche s’ouvre, il rétablit les états d’ouverture et de fermeture de ses branches enfant si elles étaient déjà ouvertes. Si vous définissez l’objet <codeph>dataProvider</codeph> puis appelez immédiatement la méthode <codeph>expandItem()</codeph>, il est possible que le comportement soit incorrect. Vous devez soit attendre la validation du composant, soit appeler la méthode <codeph>validateNow()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:getParentItem"><apiName>getParentItem</apiName><shortdesc>
      Renvoie le parent connu d’un élément enfant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Parent de l’élément.
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>élément pour lequel vous obtenez le parent.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie le parent connu d’un élément enfant. Cette méthode retourne une valeur uniquement si l’élément était ou est actuellement visible. Les éléments de niveau supérieur ont un parent dont la valeur est <codeph>null</codeph>. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:protected:initListData"><apiName>initListData</apiName><shortdesc>
      Initialise un objet TreeListData utilisé par le rendu d’élément de l’arborescence.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à rendre.
      </apiDesc></apiParam><apiParam><apiItemName>treeListData</apiItemName><apiOperationClassifier>mx.controls.treeClasses:TreeListData</apiOperationClassifier><apiDesc>Objet TreeListDataItem à utiliser dans le rendu de l’élément.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Initialise un objet TreeListData utilisé par le rendu d’élément de l’arborescence.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:isItemOpen"><apiName>isItemOpen</apiName><shortdesc>
      Renvoie la valeur true si la branche d’élément spécifiée est ouverte (affiche ses enfants).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur est true si elle est ouverte et false si elle est fermée.
     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à inspecter.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la valeur <codeph>true</codeph> si la branche d’élément spécifiée est ouverte (affiche ses enfants).
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:protected:makeListData"><apiName>makeListData</apiName><shortdesc>
      Crée une nouvelle occurrence TreeListData et renseigne les champs en fonction de l’élément du fournisseur de données de saisie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Objet ListData récemment créé.
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:BaseListData</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Elément du fournisseur de données utilisé pour renseigner la propriété ListData.
      </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>UID de l’élément.
      </apiDesc></apiParam><apiParam><apiItemName>rowNum</apiItemName><apiType value="int"/><apiDesc>Index de l’élément dans le fournisseur de données.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée une nouvelle occurrence TreeListData et renseigne les champs en fonction de l’élément du fournisseur de données de saisie. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:setItemIcon"><apiName>setItemIcon</apiName><shortdesc>
      Définit l’icône associée de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément à affecter.
      </apiDesc></apiParam><apiParam><apiItemName>iconID</apiItemName><apiType value="Class"/><apiDesc>Identifiant de liaison de l’icône fermée (ou nœud terminal).
      </apiDesc></apiParam><apiParam><apiItemName>iconID2</apiItemName><apiType value="Class"/><apiDesc>Identifiant de liaison de l’icône ouverte.
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit l’icône associée de l’élément. L’appel de cette méthode remplace les propriétés <codeph>iconField</codeph> et <codeph>iconFunction</codeph> de cet élément s’il s’agit d’un nœud terminal. Les éléments de branche n’utilisent pas les propriétés <codeph>iconField</codeph> et <codeph>iconFunction</codeph>. Ils utilisent les propriétés <codeph>folderOpenIcon</codeph> et <codeph>folderClosedIcon</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:Tree:itemIcons"><apiName>itemIcons</apiName><shortdesc>
      Objet spécifiant les icônes des éléments.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/><apiDefaultValue>undefined
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet spécifiant les icônes des éléments. Chaque entrée de l’objet comporte un nom de champ qui correspond à l’identifiant de l’élément et une valeur qui correspond à un objet au format suivant :
      <pre>
      {iconID: <i>Class</i>, iconID2: <i>Class</i>}
      </pre>
      La valeur du champ <codeph>iconID</codeph> est la classe de l’icône d’un élément fermé ou de nœud terminal et <codeph>iconID2</codeph> est la classe de l’icône d’un élément ouvert.
     
      <p>Cette propriété est destinée à autoriser l’initialisation des icônes d’éléments. Les modifications apportées à ce tableau après l’initialisation ne sont pas détectées automatiquement. Utilisez la méthode <codeph>setItemIcon()</codeph> pour modifier les icônes de façon dynamique.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#Tree/setItemIcon()"><linktext>setItemIcon()</linktext></link></related-links></apiValue><apiValue id="mx.controls:Tree:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      Renvoie l’objet ITreeDataDescriptor actuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.treeClasses:ITreeDataDescriptor</apiValueClassifier><apiDefaultValue>DefaultDataDescriptor
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Renvoie l’objet ITreeDataDescriptor actuel.
     
       </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Tree:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      Indique que les éléments peuvent être déplacés au lieu d’être simplement copiés du contrôle Tree dans le cadre d’une opération Glisser-déposer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique que les éléments peuvent être déplacés au lieu d’être simplement copiés du contrôle Tree dans le cadre d’une opération Glisser-déposer.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Tree:firstVisibleItem:get"><apiName>firstVisibleItem</apiName><shortdesc>
      Elément actuellement affiché dans la rangée supérieure de l’arborescence.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Elément actuellement affiché dans la rangée supérieure de l’arborescence. Selon les modalités d’ouverture, de fermeture et de défilement des branches, la rangée supérieure peut contenir, par exemple, le neuvième élément de la liste des éléments actuellement affichables, qui à son tour représente certains arrière-petits-enfants de la racine. La définition de cette propriété revient à définir la propriété du contrôle List. Si l’élément n’est actuellement pas affichable, par exemple parce qu’il se trouve sous un élément non développable, définir cette propriété n’a aucun effet.
     
      <p>REMARQUE : dans Flex 1.0, cette propriété était tapée sous forme d’élément XMLNode bien qu’il s’agissait réellement d’un élément XMLNode ou TreeNode. Dans 2.0, il s’agit maintenant de l’objet de type générique qui renvoyera un objet de même type que les données contenues dans le fournisseur de données.</p>
     
      <p>La valeur par défaut est le premier élément du contrôle Tree.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Tree:hasRoot:get"><apiName>hasRoot</apiName><shortdesc>
      Indique que le fournisseur de données actuel comporte un élément racine. Par exemple, un nœud supérieur unique dans une structure hiérarchique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique que le fournisseur de données actuel comporte un élément racine. Par exemple, un nœud supérieur unique dans une structure hiérarchique. XML et Object sont des exemples de types dotés d’une racine. Les contrôles List et Array n’en comportent pas.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#Tree/showRoot"><linktext>showRoot</linktext></link></related-links></apiValue><apiValue id="mx.controls:Tree:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      Valeur maximale de la propriété maxHorizontalScrollPosition du contrôle Tree.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur maximale de la propriété <codeph>maxHorizontalScrollPosition</codeph> du contrôle Tree. Contrairement à la propriété <codeph>maxHorizontalScrollPosition</codeph> du contrôle List, cette propriété est modifiée par le contrôle Tree lorsque les éléments s’ouvrent et se ferment et lorsque les éléments de l’arborescence deviennent autrement visibles ou sont masqués (par défilement, par exemple).
     
      <p>Si vous définissez cette propriété sur l’élément connu le plus large du fournisseur de données, le contrôle Tree le modifie de sorte que même si l’élément le plus large se trouve quatre niveaux plus bas dans l’arborescence, l’utilisateur peut faire défiler jusqu’à l’élément. Par conséquent, même si vous relisez la même valeur pour la propriété <codeph>maxHorizontalScrollPosition</codeph> que vous avez définie, il ne s’agit pas nécessairement de la valeur réelle utilisée par le contrôle Tree.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Tree:openItems:get"><apiName>openItems</apiName><shortdesc>
      Les éléments qui ont été ouverts ou définis comme étant ouverts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Les éléments qui ont été ouverts ou définis comme étant ouverts.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Tree:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      Définit la visibilité de l’élément racine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Définit la visibilité de l’élément racine. Si les données du fournisseur de données ont un nœud racine et que la valeur est <codeph>false</codeph>, le contrôle Tree n’affiche pas l’élément racine. Seuls les decendants de l’élément racine sont affichés. Cet indicateur n’a aucun effet sur les fournisseurs de données sans racine, comme les contrôles List et Array. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#Tree/hasRoot"><linktext>hasRoot</linktext></link></related-links></apiValue><apiValue id="mx.controls:Tree:dataProvider:set"><apiName>dataProvider</apiName><shortdesc>
      Objet contenant les données à afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet contenant les données à afficher. Lorsque vous affectez une valeur à cette propriété, la classe Tree gère l’objet des données source comme suit :
      <p>
      <ul><li>Une chaîne contenant du texte XML valide est convertie en objet XMLListCollection.</li>
      <li>Un objet XMLNode est converti en objet XMLListCollection.</li>
      <li>Un objet XMLList est converti en objet XMLListCollection.</li>
      <li>N’importe quel objet qui implémente l’interface ICollectionView est distribué à un objet ICollectionView.</li>
      <li>Un objet Array est converti en objet ArrayCollection.</li>
      <li>Tout autre type d’objet est enroulé dans un objet Array (l’objet étant sa seule entrée).</li></ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:ComboBase"><apiName>ComboBase</apiName><shortdesc>
  La classe ComboBase est la classe de base des contrôles qui affichent du texte dans un champ de texte et qui comportent un bouton provoquant l’apparition d’une liste déroulante dans laquelle l’utilisateur peut choisir le texte à afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="textInputStyleName" owner="mx.controls:ComboBase" playerVersion="Flash9" type="String">
<description>
  Déclaration de style du sous-composant TextInput interne qui affiche la sélection en cours. Si aucune valeur n’est indiquée, le sous-composant TextInput utilise les styles de texte par défaut définis par la classe ComboBase.
 
  </description>
<default>""
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textInputClass" owner="mx.controls:ComboBase" playerVersion="Flash10" type="Class">
<description>
  
 
  <p/>
 
  </description>
<default>mx.controls.TextInput
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="editableDisabledSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsque le contrôle est désactivé et que la propriété <codeph>editable</codeph> est définie sur <codeph>true</codeph>. Cet habillage est uniquement utilisé par la classe ComboBox. Il n’existe pas de valeur par défaut pour la classe ComboBase Pour la classe ComboBox, la valeur par défaut est la classe ComboBoxArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="editableDownSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsque l’utilisateur maintient le bouton de la souris enfoncé et que la propriété <codeph>editable</codeph> est définie sur <codeph>true</codeph>. Cet habillage est uniquement utilisé par la classe ComboBox. Il n’existe pas de valeur par défaut pour la classe ComboBase Pour la classe ComboBox, la valeur par défaut est la classe ComboBoxArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="editableOverSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsque la souris survole un contrôle et que la propriété <codeph>editable</codeph> est définie sur <codeph>true</codeph>. Cet habillage est uniquement utilisé par la classe ComboBox. Il n’existe pas de valeur par défaut pour la classe ComboBase Pour la classe ComboBox, la valeur par défaut est la classe ComboBoxArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="editableUpSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsque la souris ne survole pas le contrôle et que la propriété <codeph>editable</codeph> est définie <codeph>true</codeph>. Cet habillage est uniquement utilisé par la classe ComboBox. Il n’existe pas de valeur par défaut pour la classe ComboBase Pour la classe ComboBox, la valeur par défaut est la classe ComboBoxArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsque le contrôle est désactivé. Il n’existe pas de valeur par défaut pour la classe ComboBase Pour la classe ComboBox, la valeur par défaut est la classe ComboBoxArrowSkin. Pour la classe ColorPicker, la valeur par défaut est la classe ColorPickerSkin. Pour la classe DateField, la valeur par défaut est la classe ScrollArrowDownSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsque l’utilisateur maintient le bouton de la souris enfoncé. Il n’existe pas de valeur par défaut pour la classe ComboBase Pour la classe ComboBox, la valeur par défaut est la classe ComboBoxArrowSkin. Pour la classe ColorPicker, la valeur par défaut est la classe ColorPickerSkin. Pour la classe DateField, la valeur par défaut est la classe ScrollArrowDownSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="overSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsque la souris survole le contrôle. Il n’existe pas de valeur par défaut pour la classe ComboBase Pour la classe ComboBox, la valeur par défaut est la classe ComboBoxArrowSkin. Pour la classe ColorPicker, la valeur par défaut est la classe ColorPickerSkin. Pour la classe DateField, la valeur par défaut est la classe ScrollArrowDownSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour l’arrière-plan et la bordure lorsque la souris ne survole pas le contrôle. Il n’existe pas de valeur par défaut pour la classe ComboBase Pour la classe ComboBox, la valeur par défaut est la classe ComboBoxArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="skin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage par défaut pour l’arrière-plan et la bordure. Il n’existe pas de valeur par défaut pour la classe ComboBase Pour la classe ComboBox, la valeur par défaut est la classe ComboBoxArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:ComboBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’un symbole de composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton ScrollBar.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.controls:ComboBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de l’anneau de focus anneau lorsque le composant est en cours
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.controls:ComboBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la zone de contenu du composant.
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.controls:ComboBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ComboBase&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;<i>mx:tagname</i>
    <b>Properties</b>
    dataProvider="null"
    editable="false|true"
    imeMode="null"
    restrict="null"
    selectedIndex="-1"
    selectedItem="null"
    text=""
    &nbsp;
    <b>Styles</b>
    disabledSkin="<i>Depends on class</i>"
    downSkin="<i>Depends on class</i>"
    editableDisabledSkin="<i>Depends on class</i>"
    editableDownSkin="<i>Depends on class</i>"
    editableOverSkin="<i>Depends on class</i>"
    editableUpSkin="<i>Depends on class</i>"
    overSkin="<i>Depends on class</i>"
    textInputStyleName="" 
    upSkin="<i>Depends on class</i>"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe ComboBase est la classe de base des contrôles qui affichent du texte dans un champ de texte et qui comportent un bouton provoquant l’apparition d’une liste déroulante dans laquelle l’utilisateur peut choisir le texte à afficher. La classe ComboBase n’est pas utilisée directement comme balise MXML.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#Button"><linktext>mx.controls.Button</linktext></link><link href="mx.controls.xml#TextInput"><linktext>mx.controls.TextInput</linktext></link><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link></related-links><apiConstructor id="mx.controls:ComboBase:ComboBase"><apiName>ComboBase</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:ComboBase:protected:calculatePreferredSizeFromData"><apiName>calculatePreferredSizeFromData</apiName><shortdesc>
      Détermine les valeurs par défaut de hauteur et largeur à utiliser pour les entrées de la liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Objet doté des propriétés <codeph>width</codeph> et <codeph>height</codeph>.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>numItems</apiItemName><apiType value="int"/><apiDesc>Nombre d’éléments à vérifier pour en déterminer la taille.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine les valeurs par défaut de hauteur et largeur à utiliser pour les entrées de la liste déroulante. Chaque sous-classe de la classe ComboBase doit implémenter cette méthode et renvoyer un objet contenant deux propriétés : <codeph>width</codeph> et <codeph>height</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBase:protected:collectionChangeHandler"><apiName>collectionChangeHandler</apiName><shortdesc>
      Répond aux changements du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Objet CollectionEvent distribué depuis la collection.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Répond aux changements du fournisseur de données. Le composant ajustera la propriété <codeph>selectedIndex</codeph> si des éléments sont ajoutés ou supprimés avant l’élément sélectionné du composant.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:ComboBase:protected:downArrowButton_buttonDownHandler"><apiName>downArrowButton_buttonDownHandler</apiName><shortdesc>
      Effectue une opération lorsque l’utilisateur clique sur le bouton déroulant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:FlexEvent</apiOperationClassifier><apiDesc>Evénement déclenché lorsque l’utilisateur clique sur le bouton déroulant.     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Effectue une opération lorsque l’utilisateur clique sur le bouton déroulant. Il s’agit d’une implémentation de classe de base abstraite qui n’a aucun effet et est remplacée par les sous-classes.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBase:protected:itemToUID"><apiName>itemToUID</apiName><shortdesc>
      Détermine l’UID d’un élément du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Identifiant unique.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Elément du fournisseur de données.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine l’UID d’un élément du fournisseur de données. Chaque élément du fournisseur de données doit avoir ou disposera d’un identifiant unique (UID).
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBase:protected:measure"><apiName>measure</apiName><shortdesc>
      Détermine les propriétés measuredWidth et measuredHeight du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Détermine les propriétés <codeph>measuredWidth</codeph> et <codeph>measuredHeight</codeph> du contrôle. La largeur mesurée est la largeur du texte le plus large de la propriété <codeph>dataProvider</codeph> plus la largeur du bouton déroulant. La hauteur mesurée est la hauteur la plus grande du bouton ou du texte. Si aucun fournisseur de données n’est défini ou si le fournisseur de données ne comporte aucun élément, la propriété <codeph>measuredWidth</codeph> est définie sur <codeph>UIComponent.DEFAULT_MEASURED_WIDTH</codeph> et la propriété <codeph>measuredHeight</codeph> est définie sur <codeph>UIComponent.DEFAULT_MEASURED_HEIGHT</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:ComboBase:protected:textInput_changeHandler"><apiName>textInput_changeHandler</apiName><shortdesc>
      Gère les modifications apportées au contrôle TextInput qui sert de champ de texte modifiable dans le composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Evénement déclenché à chaque fois que le texte du contrôle change.     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Gère les modifications apportées au contrôle TextInput qui sert de champ de texte modifiable dans le composant. La méthode définit la propriété <codeph>selectedIndex</codeph> sur -1 (et donc la propriété <codeph>selectedItem</codeph> sur <codeph>null</codeph>).
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBase:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Tailles et positions des composants internes de largeur et hauteur données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Tailles et positions des composants internes de largeur et hauteur données. Le bouton déroulant est placé sur toute la droite et le champ de texte remplit la zone restante.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.controls:ComboBase:protected:collection"><apiName>collection</apiName><shortdesc>
      Objet ICollectionView des éléments affichés par ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.collections:ICollectionView</apiValueClassifier></apiValueDef><apiDesc>
      Objet ICollectionView des éléments affichés par ce composant.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:protected:iterator"><apiName>iterator</apiName><shortdesc>
      Occurrence IViewCursor principale utilisée pour récupérer les éléments du fournisseur de données et les transmettre aux rendus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.collections:IViewCursor</apiValueClassifier></apiValueDef><apiDesc>
      Occurrence IViewCursor principale utilisée pour récupérer les éléments du fournisseur de données et les transmettre aux rendus. A la fin d’une séquence de code, il doit toujours être placé sur l’élément visible le plus en haut actuellement à l’écran.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:protected:textInput"><apiName>textInput</apiName><shortdesc>
      Sous-composant TextInput interne qui affiche la sélection en cours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:ITextInput</apiValueClassifier></apiValueDef><apiDesc>
      Sous-composant TextInput interne qui affiche la sélection en cours.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:protected:arrowButtonStyleFilters:get"><apiName>arrowButtonStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle ComboBase au bouton de flèche vers le bas
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle ComboBase au bouton de flèche vers le bas
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBase:protected:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Renvoie un objet EdgeMetrics qui comporte quatre propriété : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Renvoie un objet EdgeMetrics qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur du côté correspondant de la bordure, exprimée en pixels.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Jeu d’éléments affichés par ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu d’éléments affichés par ce composant. Cette propriété est de type Object, car les classes dérivées peuvent gérer plusieurs types de données comme les classes Array, XML, ICollectionView et autres. Toutes sont converties en objet ICollectionView retourné si vous obtenez la valeur de cette propriété. Vous n’obtiendrez pas la valeur que vous avez définie s’il ne s’agissait pas d’un objet ICollectionView.
     
      <p>La définition de cette propriété ajuster la propriété <codeph>selectedIndex</codeph> (et par conséquent la propriété <codeph>selectedItem</codeph>) si la propriété <codeph>selectedIndex</codeph> n’est pas définie différemment. S’il n’existe pas de propriété <codeph>prompt</codeph>, la propriété <codeph>selectedIndex</codeph> est définie sur 0. Sinon, elle reste à -1, qui est l’index utilisé pour la chaîne d’invite. Si la propriété <codeph>selectedIndex</codeph> a été définie et se trouve hors de la plage du nouveau fournisseur de données, un comportement inattendu risque de se produire.</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:editable:get"><apiName>editable</apiName><shortdesc>
      Indicateur précisant si le contrôle peut être modifié, ce qui permet à l’utilisateur de saisir directement des entrées qui ne sont pas spécifiées dans le fournisseur de données, ou s’il ne peut pas être modifié, ce qui implique que l’utilisateur doit sélectionner les éléments du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false.
      This property is ignored by the DateField control.
     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si le contrôle peut être modifié, ce qui permet à l’utilisateur de saisir directement des entrées qui ne sont pas spécifiées dans le fournisseur de données, ou s’il ne peut pas être modifié, ce qui implique que l’utilisateur doit sélectionner les éléments du fournisseur de données.
     
      <p>Si la valeur est <codeph>true</codeph>, la saisie clavier sera entrée dans le champ de texte modifiable. Sinon, les raccourcis permettront de sélectionner les éléments dans le fournisseur de données.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:imeMode:get"><apiName>imeMode</apiName><shortdesc conref="mx.controls.TextInput#imeMode">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.TextInput#imeMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:restrict:get"><apiName>restrict</apiName><shortdesc>
      Jeu de caractères qu’un utilisateur peut ou non entrer dans le champ de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Jeu de caractères qu’un utilisateur peut ou non entrer dans le champ de texte.
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/restrict"><linktext>flash.text.TextField.restrict</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBase:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Index dans le fournisseur de données de l’élément sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Index dans le fournisseur de données de l’élément sélectionné. Si une propriété <codeph>prompt</codeph> est présente, la valeur de la propriété <codeph>selectedIndex</codeph> peut être définie sur -1 pour afficher l’invite. Si aucune propriété <codeph>prompt</codeph> n’est présente, la propriété <codeph>selectedIndex</codeph> est alors définie sur 0 lorsqu’un objet <codeph>dataProvider</codeph> est défini.
     
      <p>Si le contrôle ComboBox est modifiable, la propriété <codeph>selectedIndex</codeph> est définie sur -1 si l’utilisateur entre du texte dans le champ de texte.</p>
     
      <p>Contrairement à beaucoup d’autres propriétés Flex d’invalidation (leur définition n’a pas d’effet immédiat), les propriétés <codeph>selectedIndex</codeph> et <codeph>selectedItem</codeph> sont synchrones. La définition d’une propriété affecte l’autre immédiatement.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      Elément du fournisseur de données à l’emplacement selectedIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Elément du fournisseur de données à l’emplacement selectedIndex.
     
      <p>Si les données sont un objet ou une occurrence de classe, modifier les propriétés de l’objet ou de l’occurrence modifie l’objet <codeph>dataProvider</codeph> mais peut ne pas actualiser les vues sauf si l’occurrence peut être liée ou implémente la propriété IPropertyChangeNotifier ou si un appel de la méthode dataProvider.itemUpdated() a lieu.</p>
     
      La définition de la propriété <codeph>selectedItem</codeph> provoque la sélection par le contrôle ComboBox de cet élément (l’affiche dans le champ de texte et définit la propriété <codeph>selectedIndex</codeph>) s’il se trouve dans le fournisseur de données. Si le contrôle ComboBox est modifiable, la propriété <codeph>selectedItem</codeph> est définie sur <codeph>null</codeph> si l’utilisateur entre du texte dans le champ de texte.
     
      <p>Contrairement à beaucoup d’autres propriétés Flex d’invalidation (leur définition n’a pas d’effet immédiat), les propriétés <codeph>selectedIndex</codeph> et <codeph>selectedItem</codeph> sont synchrones. La définition d’une propriété affecte l’autre immédiatement.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:text:get"><apiName>text</apiName><shortdesc>
      Contenu du champ de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Contenu du champ de texte. Si le contrôle n’est pas modifiable, la définition de cette propriété n’a aucun effet. Si le contrôle est modifiable, la définition de cette propriété a pour effet de définir le contenu du champ de texte.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:protected:textInputStyleFilters:get"><apiName>textInputStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle ComboBase à l’entrée de texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle ComboBase à l’entrée de texte. Ces styles sont ignorés si vous définissez la propriété de style <codeph>textInputStyleName</codeph>.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBase:value:get"><apiName>value</apiName><shortdesc>
      Valeur de l’élément sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Valeur de l’élément sélectionné. Si l’élément est un nombre ou une chaîne, la valeur est l’élément. Si l’élément est un objet, la valeur est la propriété <codeph>data</codeph> (si elle existe) ou la propriété <codeph>label</codeph> (si elle existe).
     
      <p><b>Remarque :</b> il est souvent préférable d’utiliser <codeph>selectedItem</codeph>. La propriété <codeph>value</codeph> existe pour la comptabilité descendante avec des applications antérieures.</p>
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:TileList"><apiName>TileList</apiName><shortdesc>
  Le contrôle TileList affiche plusieurs éléments organisés en mosaïques.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:TileList" replacement="spark.components.List" since="4.0">
<description>
  Les composants Liste de la mise en forme dans Flex 3 ont été remplacés par un composant Liste plus générique qui prend une mise en forme générique. Pour obtenir un comportement similaire dans le nouveau composant List, définissez la propriété <codeph>layout</codeph> sur <codeph>TileLayout</codeph>.
 </description>
	</Alternative><effects><effect event="itemsChange" name="itemsChangeEffect" owner="mx.controls:TileList">
<description>
  Effet de données à lire lorsqu’un changement se produit dans le fournisseur de données du contrôle.
 
  <p>Par défaut, le contrôle TileList n’utilise pas d’effet de données. Pour le contrôle TileList, utilisez une occurrence de la classe DefaultTileListEffect.</p>
 
 </description>
<default>undefined
  
  </default>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:TileList&gt;</code> tag inherits
  all of the tag attributes of its superclass, but ignores the
  <code>variableRowHeight</code> and <code>wordWrap</code> tag attributes.  
  It adds no additional tag attributes.</p>
  
  <pre>
  &lt;mx:TileList/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.listClasses:TileBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle TileList affiche plusieurs éléments organisés en mosaïques. Il affiche une barre de défilement sur l’un de ses axes pour accéder à tous les éléments de la liste, en fonction de la propriété <codeph>direction</codeph>. Vous pouvez définir la taille des mosaïques à l’aide des propriétés <codeph>rowHeight</codeph> et <codeph>columnWidth</codeph>. Sinon, Flex mesure le rendu d’élément du premier élément dans le fournisseur de données et utilise cette taille pour toutes les mosaïques.
  
  <p>Le contrôle TileList possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Quatre colonnes et quatre rangées. En utilisant le rendu d’élément par défaut, la taille totale est 66 par 126 pixels. </entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>5000 par 5000.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TileListExample.mxml"><swfblock conref="examples/TileListExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.controls:TileList:TileList"><apiName>TileList</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:FormItemLabel"><apiName>FormItemLabel</apiName><shortdesc>
  Le conteneur FormItem utilise un objet FormItemLabel pour afficher sa partie d’étiquette.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Label</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le conteneur FormItem utilise un objet FormItemLabel pour afficher sa partie d’étiquette.
 
  <p>La classe FormItemLabel n’ajoute aucune fonctionnalité à sa super-classe Label. En revanche, son objectif est de vous laisser définir les styles dans un sélecteur de type FormItemLabel qui affectent les étiquettes de tous les conteneurs FormItem.</p>
 
  <p><b>Remarque :</b> cette classe est déconseillée. La méthode recommandée pour appliquer un style à l’étiquette FormItem est d’utiliser la propriété de style <codeph>labelStyleName</codeph> de la classe FormItem.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiConstructor id="mx.controls:FormItemLabel:FormItemLabel"><apiName>FormItemLabel</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:List"><apiName>List</apiName><shortdesc>
  Le contrôle List affiche une liste d’éléments verticale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:List" replacement="spark.components.List" since="4.0">
	</Alternative><effects><effect event="itemsChange" name="itemsChangeEffect" owner="mx.controls:List">
<description>
  Effet de données à lire lorsqu’un changement se produit dans le fournisseur de données du contrôle.
 
  <p>Par défaut, le contrôle List n’utilise pas d’effet de données. Pour le contrôle List, utilisez une occurrence de la classe DefaultListEffect pour configurer l’effet de données. </p>
 
 </description>
<default>undefined
  
  </default>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:List&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:List
    <b>Properties</b>
    editable="false|true"
    editedItemPosition="<i>No default</i>"
    editorDataField="text"
    editorHeightOffset="0"
    editorUsesEnterKey="false|true"
    editorWidthOffset="0"
    editorXOffset="0"
    editorYOffset="0"
    imeMode="null"    
    itemEditor="TextInput"
    itemEditorInstance="<i>Current item editor</i>"
    rendererIsEditor="false|true"
    
    <b>Styles</b>
    backgroundDisabledColor="0xDDDDDD"
    
    <b>Events</b>
    itemEditBegin="<i>No default</i>"
    itemEditEnd="<i>No default</i>"
    itemEditBeginning="<i>No default</i>"
    itemFocusIn="<i>No default</i>"
    itemFocusOut="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>mx.controls.listClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle List affiche une liste d’éléments verticale. Son fonctionnement est très proche de celui de l’élément de formulaire SELECT en HTML. Si d’autres éléments peuvent être affichés en même temps, il peut afficher une barre de défilement verticale permettant à l’utilisateur d’accéder à tous les éléments de la liste. Une barre de défilement horizontale facultative permet à l’utilisateur de voir les éléments lorsque toute la largeur des éléments de la liste risque de ne pas pouvoir être affichée. L’utilisateur peut sélectionner un ou plusieurs éléments de la liste, selon la valeur de la propriété <codeph>allowMultipleSelection</codeph>.
 
  <p>Le contrôle List possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Assez large pour accueillir l’étiquette la plus large des sept premiers éléments visibles (ou tous les éléments visibles de la liste, si leur nombre est inférieur à sept) ; sept rangées de hauteur (chaque rangée ayant une hauteur de 20 pixels).</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>5000 par 5000.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleList.mxml"><swfblock conref="examples/SimpleList.swf"/></example></apiClassifierDetail><related-links><link href="mx.events.xml#ListEvent"><linktext>mx.events.ListEvent</linktext></link></related-links><adobeApiEvent id="mx.controls:List_mx.events.ListEvent.ITEM_FOCUS_OUT_itemFocusOut"><apiName>itemFocusOut</apiName><shortdesc>
  Distribué lorsqu’un rendu d’élément perd le focus, ce qui peut se produire lorsque l’utilisateur clique sur un autre élément du contrôle List ou à l’extérieur de la liste, ou utilise le clavier pour accéder à un autre élément du contrôle List ou hors du contrôle list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_FOCUS_OUT</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un rendu d’élément perd le focus, ce qui peut se produire lorsque l’utilisateur clique sur un autre élément du contrôle List ou à l’extérieur de la liste, ou utilise le clavier pour accéder à un autre élément du contrôle List ou hors du contrôle list. Distribué uniquement si l’élément List est modifiable.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:List_mx.events.ListEvent.ITEM_FOCUS_IN_itemFocusIn"><apiName>itemFocusIn</apiName><shortdesc>
  Distribué lorsqu’un rendu d’élément reçoit le focus, ce qui peut se produire lorsque l’utilisateur clique sur un élément du contrôle List ou accède à l’élément à l’aide du clavier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_FOCUS_IN</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un rendu d’élément reçoit le focus, ce qui peut se produire lorsque l’utilisateur clique sur un élément du contrôle List ou accède à l’élément à l’aide du clavier. Distribué uniquement si l’élément List est modifiable.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:List_mx.events.ListEvent.ITEM_EDIT_END_itemEditEnd"><apiName>itemEditEnd</apiName><shortdesc>
  Distribué lorsqu’une session de modification d’élément se termine pour une raison quelconque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_EDIT_END</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une session de modification d’élément se termine pour une raison quelconque.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:List_mx.events.ListEvent.ITEM_EDIT_BEGIN_itemEditBegin"><apiName>itemEditBegin</apiName><shortdesc>
  Diffusé lorsque la propriété editedItemPosition est définie et que l’élément peut être modifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_EDIT_BEGIN</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Diffusé lorsque la propriété <codeph>editedItemPosition</codeph> est définie et que l’élément peut être modifié.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:List_mx.events.ListEvent.ITEM_EDIT_BEGINNING_itemEditBeginning"><apiName>itemEditBeginning</apiName><shortdesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris alors qu’il survole un élément, accède au contrôle List ou entre dans la liste avec la touche de tabulation ou tente de toute autre manière de modifier un élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_EDIT_BEGINNING</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris alors qu’il survole un élément, accède au contrôle List ou entre dans la liste avec la touche de tabulation ou tente de toute autre manière de modifier un élément.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:List:List"><apiName>List</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:List:createItemEditor"><apiName>createItemEditor</apiName><shortdesc>
      Crée l’éditeur d’élément pour le rendu d’élément au niveau de editedItemPosition en utilisant l’éditeur désigné par la propriété itemEditor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>colIndex</apiItemName><apiType value="int"/><apiDesc>Index de colonne. Flex définit la valeur de cette propriété sur 0 pour un contrôle List.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Index dans le fournisseur de données de l’élément à modifier.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée l’éditeur d’élément pour le rendu d’élément au niveau de <codeph>editedItemPosition</codeph> en utilisant l’éditeur désigné par la propriété <codeph>itemEditor</codeph>.
     
      <p>Cette méthode définit l’occurrence de l’éditeur sous forme de propriété <codeph>itemEditoroccurrence</codeph>.</p>
     
      <p>Vous ne pouvez appeler cette méthode que de l’intérieur de l’écouteur d’événements pour l’événement <codeph>itemEditBegin</codeph>. Pour créer un éditeur à d’autres moments, définissez la propriété <codeph>editedItemPosition</codeph> pour générer l’événement <codeph>itemEditBegin</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:createItemRenderer"><apiName>createItemRenderer</apiName><shortdesc>
      Obtient le rendu approprié et utilise le rendu par défaut si aucun n’est spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Fonctionnalité de rendu.
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Objet à partir duquel le rendu d’élément est créé.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Obtient le rendu approprié et utilise le rendu par défaut si aucun n’est spécifié.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:destroyItemEditor"><apiName>destroyItemEditor</apiName><shortdesc>
      Ferme l’éditeur d’élément qui est actuellement ouvert sur un élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ferme l’éditeur d’élément qui est actuellement ouvert sur un élément. Vous n’appelez généralement cette méthode que de l’intérieur de l’écouteur d’événements pour l’événement <codeph>itemEditEnd</codeph>, après avoir appelé la méthode <codeph>preventDefault()</codeph> pour empêcher l’exécution de l’écouteur d’événements par défaut.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:protected:drawRowBackground"><apiName>drawRowBackground</apiName><shortdesc>
      Trace un arrière-plan de rangée aux position et hauteur définies.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>Objet Sprite qui contiendra un objet d’affichage doté des graphiques de cette rangée.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Index de la rangée dans le jeu des rangées affichées. L’en-tête ne compte pas. La rangée visible la plus à gauche comporte l’index de rangée 0. Ceci est utile pour suivre les objets utilisés pour tracer les arrière-plans. Ainsi, une rangée donnée peut réutiliser le même objet d’affichage même si l’index de l’élément que cette rangée rend a changé.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Position y suggérée pour l’arrière-plan.
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur suggérée pour l’indicateur.
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Couleur suggérée pour l’indicateur.
     
      </apiDesc></apiParam><apiParam><apiItemName>dataIndex</apiItemName><apiType value="int"/><apiDesc>Index de l’élément pour cette rangée dans le fournisseur de données. Il peut être utilisé par exemple pour teinter différemment le dixième élément.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Trace un arrière-plan de rangée aux position et hauteur définies. Cette implémentation crée une forme en tant qu’enfant de l’objet Sprite saisi et la remplit de la couleur appropriée. Cette méthode utilise également le paramètre de la propriété de style <codeph>backgroundAlpha</codeph> pour déterminer la transparence de la couleur d’arrière-plan.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:protected:endEdit"><apiName>endEdit</apiName><shortdesc>
      Arrête l’édition d’un élément dans le fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si la méthode <codeph>preventDefault()</codeph> n’est pas appelée. Autrement, <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>reason</apiItemName><apiType value="String"/><apiDesc>Constante définissant le motif de l’événement (par exemple « CANCELLED », « NEW_ROW » ou « OTHER »). La valeur doit être membre de la classe ListEventReason.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Arrête l’édition d’un élément dans le fournisseur de données. Lorsque l’utilisateur a fini de modifier un élément, le contrôle appelle cette méthode. Il distribue l’événement <codeph>itemEditEnd</codeph> pour commencer à copier les données modifiées de l’occurrence <codeph>itemEditorInstance</codeph> dans le fournisseur de données et masque l’occurrence <codeph>itemEditorInstance</codeph>.
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ListEventReason"><linktext>mx.events.ListEventReason</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:List:isItemEditable"><apiName>isItemEditable</apiName><shortdesc>
      Détermine si le rendu d’élément d’un élément du fournisseur de données peut être modifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur est <codeph>true</codeph> si l’élément peut être modifié.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Elément du fournisseur de données
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine si le rendu d’élément d’un élément du fournisseur de données peut être modifié.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:protected:layoutEditor"><apiName>layoutEditor</apiName><shortdesc>
      Positionne l’occurrence de l’éditeur d’élément à la position suggérée avec les dimensions suggérées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="int"/><apiDesc>Position x suggérée pour l’indicateur.
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="int"/><apiDesc>Position y suggérée pour l’indicateur.
      </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="int"/><apiDesc>Largeur suggérée pour l’indicateur.
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="int"/><apiDesc>Hauteur suggérée pour l’indicateur.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Positionne l’occurrence de l’éditeur d’élément à la position suggérée avec les dimensions suggérées. Le contrôle Tree remplace cette méthode et ajuste la position pour compenser le retrait du rendu.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:protected:makeListData"><apiName>makeListData</apiName><shortdesc>
      Crée une nouvelle occurrence ListData et renseigne les champs en fonction de l’élément du fournisseur de données de saisie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Objet ListData récemment créé.
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:BaseListData</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Elément du fournisseur de données utilisé pour renseigner la propriété ListData.
      </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>UID de l’élément.
      </apiDesc></apiParam><apiParam><apiItemName>rowNum</apiItemName><apiType value="int"/><apiDesc>Index de l’élément dans le fournisseur de données.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée une nouvelle occurrence ListData et renseigne les champs en fonction de l’élément du fournisseur de données de saisie.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:List:editorDataField"><apiName>editorDataField</apiName><shortdesc>
      Nom de la propriété de l’éditeur d’élément contenant les nouvelles données de l’élément de la liste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>text</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Nom de la propriété de l’éditeur d’élément contenant les nouvelles données de l’élément de la liste. Par exemple, la valeur par défaut de la propriété <codeph>itemEditor</codeph> étant le contrôle TextInput, la valeur par défaut de la propriété <codeph>editorDataField</codeph> est <codeph>"text"</codeph>, qui définit la propriété <codeph>text</codeph> du contrôle TextInput.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editorHeightOffset"><apiName>editorHeightOffset</apiName><shortdesc>
      Hauteur de l’éditeur d’élément, en pixels, par rapport à la taille du rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Hauteur de l’éditeur d’élément, en pixels, par rapport à la taille du rendu d’élément. Cette propriété peut être utilisée pour faire en sorte que l’éditeur chevauche le rendu d’élément de quelques pixels, afin de compenser la bordure entourant l’éditeur.  
      <p>Le fait de changer ces valeurs alors que l’éditeur est affiché n’a aucun effet sur l’éditeur en cours, mais cela affectera le prochain rendu d’élément qui ouvrira un éditeur.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editorUsesEnterKey"><apiName>editorUsesEnterKey</apiName><shortdesc>
      Indicateur précisant si l’éditeur d’élément utilise la touche Entrée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si l’éditeur d’élément utilise la touche Entrée. Si cette propriété est définie sur <codeph>true</codeph>, l’éditeur d’élément utilise la touche Entrée. Le contrôle List ne recherchera pas la touche Entrée et ne répondra pas en déplaçant l’éditeur.
      <p>Le fait de changer cette valeur alors que l’éditeur est affiché n’a aucun effet sur l’éditeur en cours, mais cela affectera le prochain rendu d’élément qui ouvrira un éditeur.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editorWidthOffset"><apiName>editorWidthOffset</apiName><shortdesc>
      Largeur de l’éditeur d’élément, en pixels, par rapport à la taille du rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Largeur de l’éditeur d’élément, en pixels, par rapport à la taille du rendu d’élément. Cette propriété peut être utilisée pour faire en sorte que l’éditeur chevauche le rendu d’élément de quelques pixels, afin de compenser la bordure entourant l’éditeur.
      <p>Le fait de changer ces valeurs alors que l’éditeur est affiché n’a aucun effet sur l’éditeur en cours, mais cela affectera le prochain rendu d’élément qui ouvrira un éditeur.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editorXOffset"><apiName>editorXOffset</apiName><shortdesc>
      Emplacement x du coin supérieur gauche de l’éditeur d’élément, en pixels, par rapport au coin supérieur gauche de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Emplacement x du coin supérieur gauche de l’éditeur d’élément, en pixels, par rapport au coin supérieur gauche de l’élément. Cette propriété peut être utilisée pour faire en sorte que l’éditeur chevauche le rendu d’élément de quelques pixels, afin de compenser la bordure entourant l’éditeur.
      <p>Le fait de changer ces valeurs alors que l’éditeur est affiché n’a aucun effet sur l’éditeur en cours, mais cela affectera le prochain rendu d’élément qui ouvrira un éditeur.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editorYOffset"><apiName>editorYOffset</apiName><shortdesc>
      Emplacement y du coin supérieur gauche de l’éditeur d’élément, en pixels, par rapport au coin supérieur gauche de l’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Emplacement y du coin supérieur gauche de l’éditeur d’élément, en pixels, par rapport au coin supérieur gauche de l’élément. Cette propriété peut être utilisée pour faire en sorte que l’éditeur chevauche le rendu d’élément de quelques pixels, afin de compenser la bordure entourant l’éditeur.
      <p>Le fait de changer ces valeurs alors que l’éditeur est affiché n’a aucun effet sur l’éditeur en cours, mais cela affectera le prochain rendu d’élément qui ouvrira un éditeur.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:itemEditor"><apiName>itemEditor</apiName><shortdesc>
      Fabrique de classe de l’éditeur d’élément à utiliser pour le contrôle, si la propriété editable est définie sur true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IFactory</apiValueClassifier><apiDefaultValue>new ClassFactory(mx.controls.TextInput)
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fabrique de classe de l’éditeur d’élément à utiliser pour le contrôle, si la propriété <codeph>editable</codeph> est définie sur <codeph>true</codeph>. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:itemEditorInstance"><apiName>itemEditorInstance</apiName><shortdesc>
      Référence à l’occurrence actuellement active de l’éditeur d’élément, s’il existe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      Référence à l’occurrence actuellement active de l’éditeur d’élément, s’il existe.
     
      <p>Pour accéder à l’occurrence de l’éditeur d’élément et à la nouvelle valeur de l’élément lorsqu’un élément est modifié, utilisez la propriété <codeph>itemEditorInstance</codeph>. La propriété <codeph>itemEditoroccurrence</codeph> n’est valide qu’après l’exécution de l’écouteur d’événement de l’événement <codeph>itemEditBegin</codeph>. De ce fait, vous n’accédez généralement à la propriété <codeph>itemEditorInstance</codeph> que de l’intérieur de l’écouteur d’événements de l’événement <codeph>itemEditEnd</codeph>.</p>
     
      <p>La propriété <codeph>itemEditor</codeph> définit la classe de l’éditeur d’élément et, de ce fait, le type de données de l’occurrence de l’éditeur d’élément.</p>
     
      <p>Vous ne pouvez pas définir cette propriété dans MXML.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:protected:measuringObjects"><apiName>measuringObjects</apiName><shortdesc>
      cache de la mesure d’objets par fabrique
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      cache de la mesure d’objets par fabrique
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:rendererIsEditor"><apiName>rendererIsEditor</apiName><shortdesc>
      Indique si le rendu d’élément est également un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le rendu d’élément est également un éditeur d’élément. Si cette propriété est définie sur <codeph>true</codeph>, Flex ignore la propriété <codeph>itemEditor</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editable:get"><apiName>editable</apiName><shortdesc>
      Un indicateur précise si l’utilisateur peut ou non modifier les éléments du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Un indicateur précise si l’utilisateur peut ou non modifier les éléments du fournisseur de données. Si la valeur est <codeph>true</codeph>, les fonctionnalités de rendu d’élément du contrôle sont modifiables. L’utilisateur peut cliquer sur un rendu d’élément pour ouvrir un éditeur.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editedItemPosition:get"><apiName>editedItemPosition</apiName><shortdesc>
      Index de colonne et de ligne du rendu d’élément de l’élément du fournisseur de données en cours de modification, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Index de colonne et de ligne du rendu d’élément de l’élément du fournisseur de données en cours de modification, le cas échéant.
     
      <p>Cet Objet présente deux champs : <codeph>columnIndex</codeph> et <codeph>rowIndex</codeph>, les index basés sur zéro des éléments et des colonnes de l’élément. Pour un contrôle List, la propriété <codeph>columnIndex</codeph> a toujours la valeur 0. Par exemple : <codeph>{columnIndex:0, rowIndex:3}</codeph>.</p>
     
      <p>La définition de cette propriété ramène l’élément en vue et distribue l’événement <codeph>itemEditBegin</codeph> pour ouvrir un éditeur d’élément dans l’élément spécifié,
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editedItemRenderer:get"><apiName>editedItemRenderer</apiName><shortdesc>
      Référence au rendu d’élément du contrôle DataGrid dont l’élément est en cours de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      Référence au rendu d’élément du contrôle DataGrid dont l’élément est en cours de modification.
     
      <p>Depuis un écouteur des événements <codeph>itemEditBegin</codeph> et <codeph>itemEditEnd</codeph>, vous pouvez accéder à la valeur actuelle de l’élément en cours de modification à l’aide de la propriété <codeph>editedItemRenderer.data</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Spécifie le mode IME (éditeur de méthode d’entrée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le mode IME (éditeur de méthode d’entrée). L’éditeur IME permet aux utilisateurs d’entrer du texte en chinois, japonais et coréen. Flex définit le mode IME spécifié lorsque le contrôle obtient le focus et rétablit la valeur précédente lorsque le contrôle perd le focus.
     
     <p>La classe flash.system.IMEConversionMode définit des constantes pour les valeurs valides de cette propriété. Vous pouvez spécifier <codeph>null</codeph> pour n’indiquer aucun IME.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IME.xml"><linktext>flash.system.IME</linktext></link><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:LinkButton"><apiName>LinkButton</apiName><shortdesc>
  Le contrôle LinkButton est un contrôle Button sans bordure dont le contenu est mis en surbrillance lorsqu’un utilisateur le survole avec sa souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="highlightAlphas"/><Exclude kind="style" name="fillColors"/><Exclude kind="style" name="fillAlphas"/><Exclude kind="style" name="borderColor"/><Exclude kind="property" name="emphasized"/><styles><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:LinkButton" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte d’un contrôle LinkButton lorsqu’un utilisateur clique dessus.
 
  </description>
<default>0x2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:LinkButton" playerVersion="Flash9" type="uint">
<description>
  Couleur du texte d’un contrôle LinkButton lorsqu’un utilisateur le survole avec le pointeur de sa souris.
 
  </description>
<default>0x2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:LinkButton" playerVersion="Flash9" type="uint">
<description>
  Couleur d’arrière-plan d’un contrôle LinkButton lorsqu’un utilisateur clique dessus.
 
  </description>
<default>0xB7F39B
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:LinkButton" playerVersion="Flash9" type="uint">
<description>
  Couleur d’un contrôle LinkButton lorsqu’un utilisateur le survole avec le pointeur de sa souris.
 
  </description>
<default>0xEEFEE6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:LinkButton" playerVersion="Flash9" type="Number">
<description>
  Rayon d’angle du rectangle mis en surbrillance autour d’un contrôle LinkButton.
 
  </description>
<default>4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:LinkButton&gt;</code> tag inherits all of the tag attributes 
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:LinkButton
    <b>Styles</b>
    cornerRadius="4""
    rollOverColor="0xEEFEE6"
    selectionColor="0xB7F39B"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x2B333C"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle LinkButton est un contrôle Button sans bordure dont le contenu est mis en surbrillance lorsqu’un utilisateur le survole avec sa souris. Ces traits sont souvent exposés par les liens HTML contenus au sein d’une page de navigateur. Pour que le contrôle LinkButton effectue une action, vous devez spécifier un gestionnaire d’événement <codeph>click</codeph>, comme vous le faites avec un contrôle Button.
 
  <p>Le contrôle LinkButton possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Largeur et hauteur suffisantes pour le texte</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Indéfini</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LinkButtonExample.mxml"><swfblock conref="examples/LinkButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link></related-links><apiConstructor id="mx.controls:LinkButton:LinkButton"><apiName>LinkButton</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
  Le contrôle ButtonBar définit un groupe horizontal ou vertical de boutons de commande associés de façon logique et pourvus d’une apparence et d’une navigation communes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="shadowDistance"/><Exclude kind="style" name="shadowDirection"/><Exclude kind="style" name="shadowColor"/><Exclude kind="style" name="shadowCapColor"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="dropShadowEnabled"/><Exclude kind="style" name="dropShadowColor"/><Exclude kind="style" name="cornerRadius"/><Exclude kind="style" name="borderThickness"/><Exclude kind="style" name="borderStyle"/><Exclude kind="style" name="borderSkin"/><Exclude kind="style" name="borderSides"/><Exclude kind="style" name="borderColor"/><Exclude kind="style" name="backgroundSize"/><Exclude kind="style" name="backgroundImage"/><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAttachment"/><Exclude kind="style" name="backgroundAlpha"/><Exclude kind="event" name="click"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Alternative owner="mx.controls:ButtonBar" replacement="spark.components.ButtonBar" since="4.0">
	</Alternative><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens vertical.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="top,middle,bottom" inherit="no" name="verticalAlign" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="String">
<description>
 Alignement vertical de tous les boutons dans le contrôle ButtonBar. Comme chaque bouton s’étire pour remplir l’intégralité du contrôle ButtonBar, ce style n’est utile que si vous utilisez le style buttonHeight et si les hauteurs combinées des boutons sont inférieures à la largeur du contrôle ButtonBar. Valeurs possibles : <codeph>"top"</codeph>, <codeph>"middle"</codeph> et <codeph>"bottom"</codeph>.
 
 </description>
<default>"middle"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lastButtonStyleName" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="String">
<description>
 Alignement vertical de tous les boutons dans le contrôle ButtonBar. Comme chaque bouton s’étire pour remplir l’intégralité du contrôle ButtonBar, ce style n’est utile que si vous utilisez le style buttonHeight et si les hauteurs combinées des boutons sont inférieures à la largeur du contrôle ButtonBar. Valeurs possibles : <codeph>"top"</codeph>, <codeph>"middle"</codeph> et <codeph>"bottom"</codeph>.
 
 </description>
<default>"middle"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="String">
<description>
 Alignement horizontal de tous les boutons dans le contrôle ButtonBar. Comme chaque bouton s’étire pour remplir l’intégralité du contrôle ButtonBar, ce style n’est utile que si vous utilisez le style buttonWidth et si les largeurs combinées des boutons sont inférieures à la largeur du contrôle ButtonBar. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="firstButtonStyleName" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles du premier bouton. Si cela n’est pas spécifié, la valeur par défaut de la propriété de style <codeph>buttonStyleName</codeph> est utilisée.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="buttonWidth" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="Number">
<description>
  Largeur de chaque bouton, en pixels. Si elle n’est pas définie, la largeur par défaut de chaque bouton est calculée à partir de son texte d’étiquette.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="buttonStyleName" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles des boutons.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="buttonHeight" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="Number">
<description>
  Hauteur de chaque bouton, en pixels. Si elle n’est pas définie, la hauteur de chaque bouton est déterminée par les styles de polices appliqués au conteneur. Si vous définissez cette propriété, la valeur spécifiée remplace ce calcul.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ButtonBar&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:ButtonBar
    <b>Styles</b>
    buttonHeight="undefined"
    buttonStyleName="<i>Name of CSS style declaration, which specifies
    styles for the buttons</i>"
    buttonWidth="undefined"
    firstButtonStyleName="<i>The value of</i> <code>buttonStyleName</code>"
    horizontalAlign="center|left|right"
    horizontalGap="0"
    lastButtonStyleName="<i>The value of</i> <code>buttonStyleName</code>"
    verticalAlign="middle|top|bottom"
    verticalGap="0"
     
    <b>Events</b>
    itemClick="<i>No default</i>"
    &gt;
    ...
       <i>child tags</i>
    ...
  &lt;/mx:ButtonBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.controls:NavBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle ButtonBar définit un groupe horizontal ou vertical de boutons de commande associés de façon logique et pourvus d’une apparence et d’une navigation communes.
 
  <p>Un bouton de commande ne se souvient pas de son état de sélection lorsqu’il est sélectionné. L’utilisation courante d’un bouton de commande dans une barre de boutons vise à regrouper un jeu de boutons associés, ce qui leur donne une apparence et une navigation communes et à gérer la logique de l’événement <codeph>click</codeph> à un seul endroit. </p>
 
  <p>Le contrôle ButtonBar crée des contrôles Button en fonction de la valeur de sa propriété <codeph>dataProvider</codeph>. Même si le contrôle ButtonBar est une sous-classe d’un contrôle Container, n’utilisez pas des méthodes comme <codeph>Container.addChild()</codeph> et <codeph>Container.removeChild()</codeph> pour ajouter ou supprimer des contrôles Button. Utilisez en revanche des méthodes comme <codeph>addItem()</codeph> et <codeph>removeItem()</codeph> pour manipuler la propriété <codeph>dataProvider</codeph>. Le contrôle ButtonBar ajoute ou supprime automatiquement les enfants nécessaires en fonction des modifications apportées à la propriété <codeph>dataProvider</codeph>.</p>
 
  <p>Pour contrôler le style des boutons du contrôle ButtonBar, utilisez les propriétés de style <codeph>buttonStyleName</codeph>, <codeph>firstButtonStyleName</codeph> et <codeph>lastButtonStyleName</codeph>. N’essayez pas d’appliquer un style à chaque bouton faisant partie du contrôle ButtonBar.</p>
 
  <p>Vous pouvez utiliser le contrôle ToggleButtonBar pour définir un groupe de boutons de basculement.</p>
 
  <p>Le contrôle ButtonBar possède les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
        <entry>Taille préférée</entry>
        <entry>Assez large pour contenir tous les boutons ainsi que le texte de leurs étiquettes et leurs icônes éventuels, la marge et les séparateurs, et assez haut pour contenir la hauteur du bouton.</entry>
     </row><row>
        <entry>Règles de redimensionnement des contrôles</entry>
        <entry>Les contrôles ne sont pas redimensionnés par défaut. Spécifiez des tailles de pourcentage pour redimensionner votre contrôle ButtonBar en fonction de la taille de son conteneur parent.</entry>
     </row><row>
        <entry>Marge</entry>
        <entry>0 pixel pour les propriétés Haut, Bas, Gauche et Droite.</entry>
     </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonBarExample.mxml"><swfblock conref="examples/ButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#ToggleButtonBar"><linktext>mx.controls.ToggleButtonBar</linktext></link><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link></related-links><adobeApiEvent id="mx.controls:ButtonBar_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Distribué lorsqu’un utilisateur clique sur un bouton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un utilisateur clique sur un bouton. Cet événement est distribué uniquement si la propriété <codeph>dataProvider</codeph> ne se rapporte pas à un conteneur ViewStack.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:ButtonBar:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:Label"><apiName>Label</apiName><shortdesc>
  Le contrôle Label affiche une seule ligne de texte non modifiable.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="method" name="setFocus"/><Exclude kind="style" name="themeColor"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="property" name="tabEnabled"/><Exclude kind="property" name="mouseFocusEnabled"/><Exclude kind="property" name="focusPane"/><Exclude kind="property" name="focusEnabled"/><Alternative owner="mx.controls:Label" replacement="spark.components.Label" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la partie supérieure de l’étiquette et la partie supérieure du texte. 
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la partie inférieure de l’étiquette et la partie inférieure du texte. 
  
  </description>
<default>0 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la partie droite de l’étiquette et la partie droite du texte. 
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la partie gauche de l’étiquette et la partie gauche du texte. 
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:Label" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:Label" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:Label" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:Label" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:Label" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:Label" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Label&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Label
    <b>Properties</b>
    condenseWhite="true|false"
    data="null"
    htmlText=""
    listData="null"
    selectable="true|false"
    text=""
    truncateToFit="true|false"
    &nbsp;
    <b>Styles</b>
    color="0x0B333C"
    disabledColor="0xAAB3B3"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|none|subpixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    paddingBottom="0"
    styleSheet="null"
    textAlign="left|right|center"
    textDecoration="none|underline"
    textIndent="0"
    &nbsp;
    <b>Events</b>
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle Label affiche une seule ligne de texte non modifiable. Utilisez le contrôle Text pour créer des blocs de texte multiligne non modifiable.
 
  <p>Vous pouvez mettre en forme le texte d’un contrôle Label à l’aide des balises HTML, qui sont appliquées après l’application des styles CSS du contrôle Label. Vous pouvez également appliquer une marge aux quatre côtés du texte. Le texte d’un contrôle Label n’est pas sélectionnable par défaut, mais vous pouvez le rendre sélectionnable.</p>
 
  <p>Si un contrôle est dimensionné de façon à être plus petit que son texte, vous pouvez contrôler si le texte est simplement coupé ou s’il est tronqué avec une chaîne localisable comme "..." (remarque : le texte brut peut être tronqué, mais pas le texte HTML). Si l’intégralité du texte du contrôle Label, qu’il soit brut ou HTML, n’est pas complètement visible et que vous n’avez pas affecté d’info-bulle au contrôle Label, une « astuce de troncation » s’affiche automatiquement pour terminer le texte brut lorsqu’un utilisateur maintient la souris sur le contrôle Label.</p>
 
  <p>Les contrôles Label n’ont pas d’arrière-plans ou de bordures et ne peuvent pas recevoir le focus.</p>
 
  <p>Le contrôle Label possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Largeur et hauteur suffisantes pour le texte</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 par 10000 pixels</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LabelExample.mxml"><swfblock conref="examples/LabelExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Text"><linktext>mx.controls.Text</linktext></link><link href="mx.controls.xml#TextInput"><linktext>mx.controls.TextInput</linktext></link><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link><link href="mx.controls.xml#RichTextEditor"><linktext>mx.controls.RichTextEditor</linktext></link></related-links><adobeApiEvent id="mx.controls:Label_flash.events.TextEvent.LINK_link"><apiName>link</apiName><shortdesc> 
  Distribué lorsqu’un utilisateur clique sur un hyperlien dans un champ de texte HTML dont l’URL commence par « event: ».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.LINK</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
  Distribué lorsqu’un utilisateur clique sur un hyperlien dans un champ de texte HTML dont l’URL commence par <codeph>"event:"</codeph>. La partie de l’URL qui suit <codeph>"event:"</codeph> est placée dans la propriété text de l’objet d’événement <codeph>link</codeph>.
 
  <p>Lorsque vous gérez l’événement <codeph>link</codeph>, l’hyperlien n’est pas automatiquement exécuté. Vous devez l’exécuter depuis votre gestionnaire d’événements. Vous utilisez en général la méthode <codeph>navigateToURL()</codeph> pour exécuter l’hyperlien. Cela permet de modifier l’hyperlien, ou même de l’empêcher d’avoir lieu, dans votre application. </p>
 
  <p>La propriété <codeph>selectable</codeph> du contrôle Label doit être définie sur <codeph>true</codeph> pour générer l’événement <codeph>link</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Label_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
 
  <p>Lorsque vous utilisez un composant comme rendu d’élément, la propriété <codeph>data</codeph> contient les données à afficher. Vous pouvez écouter cet événement et mettre à jour le composant lorsque la propriété <codeph>data</codeph> change.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:Label:Label"><apiName>Label</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:Label:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc>
      Renvoie un objet TextLineMetrics doté d’informations sur la position du texte et des mesures pour une ligne de texte du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Objet TextLineMetrics qui contient les informations sur le texte.
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/><apiDesc>Index de base zéro de la ligne pour laquelle vous récupérez les mesures. Pour le contrôle Label, qui ne comporte qu’une seule ligne, la valeur doit être 0.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie un objet TextLineMetrics doté d’informations sur la position du texte et des mesures pour une ligne de texte du contrôle. Le composant doit être validé pour obtenir un nombre correct. Si vous définissez la propriété <codeph>text</codeph>, puis appelez immédiatement la méthode <codeph>getLineMetrics()</codeph>, vous risquez de recevoir une valeur incorrecte. Vous devez soit attendre la validation du composant, soit appeler la méthode <codeph>validateNow()</codeph>. Ce comportement est différent de celui de la classe flash.text.TextField, qui met immédiatement la valeur à jour.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiValue id="mx.controls:Label:protected:textField"><apiName>textField</apiName><shortdesc>
      Objet UITextField interne qui rend le texte de ce contrôle Label.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      Objet UITextField interne qui rend le texte de ce contrôle Label.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:truncateToFit"><apiName>truncateToFit</apiName><shortdesc>
      Si cette propriété a la valeur true et si la taille du contrôle Label est inférieure à son texte, le texte du contrôle Label est tronqué à l’aide d’une chaîne localisable comme "...".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si cette propriété a la valeur <codeph>true</codeph> et si la taille du contrôle Label est inférieure à son texte, le texte du contrôle Label est tronqué à l’aide d’une chaîne localisable comme <codeph>"..."</codeph>. Si cette propriété a la valeur <codeph>false</codeph>, le texte qui ne rentre pas est coupé.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc>
      Indique si les espaces blancs supplémentaires (espaces, sauts de ligne, etc.) doivent être supprimés dans un contrôle Label contenant du texte HTML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si les espaces blancs supplémentaires (espaces, sauts de ligne, etc.) doivent être supprimés dans un contrôle Label contenant du texte HTML.
     
      <p>La propriété <codeph>condenseWhite</codeph> n’affecte que le texte défini avec la propriété <codeph>htmlText</codeph>, pas la propriété <codeph>text</codeph>. Si vous définissez du texte avec la propriété <codeph>text</codeph>, la propriété <codeph>condenseWhite</codeph> est ignorée.</p>
     
      <p>Si vous définissez la propriété <codeph>condenseWhite</codeph> sur <codeph>true</codeph>, vous devez utiliser les commandes HTML classiques, telles que <codeph>&lt;br></codeph> et <codeph>&lt;p></codeph>, pour placer des sauts de ligne dans le champ de texte.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:data:get"><apiName>data</apiName><shortdesc>
      Permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
     
      <p>Lorsque vous utilisez le contrôle comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex écrit automatiquement la valeur actuelle de l’élément dans la propriété <codeph>text</codeph> de ce contrôle.</p>
     
      <p>Vous ne pouvez pas définir cette propriété dans MXML.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:Label:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      
      Fabrique de module qui fournit le contexte des polices de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      
      Fabrique de module qui fournit le contexte des polices de ce composant.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:htmlText:get"><apiName>htmlText</apiName><shortdesc>
      Spécifie le texte affiché par le contrôle Label, y compris la balise HTML définissant ses styles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le texte affiché par le contrôle Label, y compris la balise HTML définissant ses styles. Lorsque vous spécifiez du texte HTML dans cette propriété, vous pouvez utiliser le sous-jeu de balises HTML pris en charge par le contrôle Flash TextField.
     
      <p>Lorsque vous définissez cette propriété, le marqueur HTML est appliqué après l’application des styles CSS pour l’occurrence Label. Lorsque vous obtenez cette propriété, le marqueur HTML inclut les styles CSS.</p>
      
      <p>Par exemple, si vous le définissez en tant que chaîne (par exemple <codeph>« Ceci est un exemple de marqueur &lt;b>bold&lt;/b> »</codeph>), le texte « Ceci est un exemple de marqueur <b>bold</b> » s’affiche dans le contrôle Label avec les styles CSS qui s’appliquent normalement. De plus, le terme « bold » (gras) s’affiche en gras à cause du marqueur <codeph>&lt;b></codeph>.</p>
     
      <p>Les marqueurs HTML utilisent des caractères comme &lt; et >, qui ont une signification particulière en langage XML (et par conséquent MXML). Ainsi, le code suivant n’est pas conforme pour la compilation :</p>
      
      <pre>
      &lt;mx:Label htmlText="This is an example of &lt;b>bold&lt;/b> markup"/>
      </pre>
      
      <p>Trois méthodes permettent de contourner ce problème.</p>
      
      <ul>
      
      <li>
      
      <p>Définissez la propriété <codeph>htmlText</codeph> dans une méthode ActionScript appelée comme gestionnaire <codeph>initialize</codeph> :</p>
      
      <pre>
      &lt;mx:Label id="myLabel" initialize="myLabel_initialize()"/>
      </pre>
      
      <p>dont la méthode <codeph>myLabel_initialize</codeph> se trouve dans la section CDATA d’un script :</p>
      
      <pre>
      &lt;mx:Script>
      &lt;![CDATA[
      private function myLabel_initialize():void {
          myLabel.htmlText = "This is an example of &lt;b>bold&lt;/b> markup";
      }
      ]]&gt;
      &lt;/mx:Script>
      
      </pre>
      
      <p>Ceci est l’approche la plus simple, car le marqueur HTML reste facilement lisible. Notez que vous devez attribuer un <codeph>id</codeph> au contrôle Label afin de pouvoir vous y référer dans le gestionnaire <codeph>initialize</codeph>.</p>
      
      </li>
      
      <li>
      
      <p>Spécifiez la propriété <codeph>htmlText</codeph> en utilisant une balise enfant avec une section CDATA. Une section CDATA en langage XML contient des données de caractères pour lesquelles les caractères comme &lt; et > n’ont pas de signification particulière.</p>
      
      <pre>
      &lt;mx:Label>
          &lt;mx:htmlText>&lt;![CDATA[This is an example of &lt;b>bold&lt;/b> markup]]&gt;&lt;/mx:htmlText>
      &lt;mx:Label/>
      </pre>
      
      <p>Vous devez écrire la propriété <codeph>htmlText</codeph> en tant que balise enfant au lieu d’un attribut sur la balise <codeph>&lt;mx:Label></codeph>, car le langage XML n’autorise pas la section CDATA comme valeur d’attribut. Notez que le marqueur est lisible, mais la section CDATA rend cette approche plus compliquée.</p>
      
      </li>
      
      <li>
      
      <p>Utilisez un attribut <codeph>hmtlText</codeph> dont toutes les occurrences de caractères de marqueur HTML &lt; et > dans la valeur d’attribut sont écrites, au lieu d’utiliser les « entités » XML <codeph>&amp;lt;</codeph> et <codeph>&amp;gt;</codeph> :</p>
      
      <pre>
      &lt;mx:Label htmlText="This is an example of &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt; markup"/&amp;gt;
      </pre>
      
      Adobe ne recommande pas cette approche, car le marqueur HTML devient presque impossible à lire.
      
      </li>
      
      </ul>
      
      <p>Si la propriété <codeph>condenseWhite</codeph> a la valeur <codeph>true</codeph> lorsque vous définissez la propriété <codeph>htmlText</codeph>, plusieurs caractères d’espace sont condensés, comme dans les navigateurs HTML. Par exemple, trois espaces consécutifs sont affichés sous la forme d’un espace unique. La valeur par défaut de <codeph>condenseWhite</codeph> est <codeph>false</codeph>. Vous devez donc définir <codeph>condenseWhite</codeph> sur <codeph>true</codeph> pour réduire l’espace.</p>
      
      <p>Si vous relisez la propriété <codeph>htmlText</codeph> peu de temps après l’avoir définie, vous obtenez la même chaîne que celle que vous avez définie. Toutefois, après l’exécution de l’objet LayoutManager, la valeur change pour inclure un marqueur supplémentaire comprenant les styles CSS.</p>
      
      <p>La définition de la propriété <codeph>htmlText</codeph> affecte la propriété <codeph>text</codeph> de plusieurs manières. Si vous lisez la propriété <codeph>text</codeph> peu de temps après avoir défini la propriété <codeph>htmlText</codeph>, vous obtenez la valeur <codeph>null</codeph>. Cela indique que la propriété <codeph>text</codeph> correspondant à la nouvelle propriété <codeph>htmlText</codeph> n’a pas encore été déterminée. Toutefois, après l’exécution de l’objet LayoutManager, la propriété <codeph>text</codeph> se transforme en chaîne <codeph>htmlText</codeph> et tous les marqueurs HTML sont supprimés. En fait, la valeur correspond aux caractères que le contrôle Label affiche réellement.</p>
       
      <p>A l’inverse, si vous définissez la propriété <codeph>text</codeph>, toute propriété <codeph>htmlText</codeph> précédemment définie devient obsolète. Si vous lisez la propriété <codeph>htmlText</codeph> peu de temps après avoir défini la propriété <codeph>text</codeph>, vous obtenez la valeur <codeph>null</codeph>. Cela indique que la propriété <codeph>htmlText</codeph> qui correspond à la nouvelle propriété <codeph>text</codeph> n’a pas encore été déterminée. Toutefois, après l’exécution du gestionnaire LayoutManager, la valeur de la propriété <codeph>htmlText</codeph> devient le nouveau texte et inclut un marqueur supplémentaire pour les styles CSS.</p>
     
      <p>Pour que le gestionnaire LayoutManager s’exécute immédiatement, vous pouvez appeler la méthode <codeph>validateNow()</codeph> sur le contrôle Label. Par exemple, vous pouvez obtenir des propriétés <codeph>htmlText</codeph>, appeler la méthode <codeph>validateNow()</codeph> et récupérer immédiatement la propriété <codeph>text</codeph> correspondante qui n’a pas le marqueur HTML.</p>
      
      <p>Si vous définissez les deux propriétés <codeph>text</codeph> et <codeph>htmlText</codeph> dans ActionScript, celle définie en dernier prend effet. Ne définissez pas les deux dans MXML, car MXML ne garantit pas que les propriétés d’une occurrence puissent être définies dans un ordre particulier.</p>
      
      <p>Définir la propriété <codeph>text</codeph> ou <codeph>htmlText</codeph> à l’intérieur d’une boucle est une opération rapide, car le contrôle TextField sous-jacent qui effectue réellement le rendu du texte n’est pas mis à jour tant que le gestionnaire LayoutManager s’exécute.</p>
     
      <p>Si vous essayez de définir cette propriété sur <codeph>null</codeph>, elle est à la place définie sur la chaîne vide. Si la propriété a temporairement la valeur <codeph>null</codeph>, cela indique que la propriété <codeph>text</codeph> a été récemment définie et que la propriété <codeph>htmlText</codeph> correspondante n’a pas encore été déterminée.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue><apiValue id="mx.controls:Label:listData:get"><apiName>listData</apiName><shortdesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété listData du composant avec les données appropriées du contrôle List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété <codeph>listData</codeph> du composant avec les données appropriées du contrôle List. Le composant peut ensuite utiliser la propriété <codeph>listData</codeph> pour initialiser la propriété <codeph>data</codeph> du rendu d’élément supplémentaire ou de l’éditeur d’élément supplémentaire.
     
      <p>Vous ne définissez pas cette propriété dans MXML ou ActionScript. Flex la définit lorsque le composant est utilisé comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:Label:selectable:get"><apiName>selectable</apiName><shortdesc>
      Précise si le texte peut être sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Précise si le texte peut être sélectionné. Le fait de rendre le texte sélectionnable permet de copier du texte à partir du contrôle.
     
      <p>Lorsqu’un événement <codeph>link</codeph> est spécifié dans le contrôle Label, la propriété <codeph>selectable</codeph> doit être définie sur <codeph>true</codeph> pour exécuter l’événement <codeph>link</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:styleSheet:get"><apiName>styleSheet</apiName><shortdesc>
     Objet flash.text.StyleSheet pouvant effectuer des rendus sur le texte du contrôle Libellé.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:StyleSheet"/><apiDefaultValue>null
    </apiDefaultValue></apiValueDef><apiDesc>
     Objet flash.text.StyleSheet pouvant effectuer des rendus sur le texte du contrôle Libellé. Utilisez cette propriété pour le contrôle détaillé des styles HTML du texte. Pour plus d’informations, voir la documentation sur la classe flash.text.StyleSheet.
    
     </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.StyleSheet.xml"><linktext>flash.text.StyleSheet</linktext></link></related-links></apiValue><apiValue id="mx.controls:Label:text:get"><apiName>text</apiName><shortdesc>
      Spécifie le texte brut affiché par ce contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3907
     
     </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue><apiTipTexts><apiTipText>Récupère ou définit le contenu du contrôle Label
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      Spécifie le texte brut affiché par ce contrôle. Son apparence est fonction des styles CSS de son contrôle Label.
     
      <p>Lorsque vous définissez cette propriété, tous les caractères susceptibles de ressembler à une balise HTML dans la chaîne n’ont pas de signification particulière et s’affichent tels quels.</p>
     
      <p>Pour afficher un texte mis en forme à l’aide de balises HTML, utilisez plutôt la propriété <codeph>htmlText</codeph>. Si vous définissez la propriété <codeph>htmlText</codeph>, le code HTML remplace le texte défini à l’aide de cette propriété et la propriété <codeph>text</codeph> renvoie une version de texte ordinaire du texte HTML, dépouillée de toutes les balises HTML.</p>
     
      <p>Pour inclure les caractères spéciaux de signe inférieur à (&lt;), de signe supérieur à (>) ou de perluète (&amp;) dans le texte, enroulez la chaîne de texte dans la balise CDATA. Vous pouvez également utiliser des entités de caractères HTML pour les caractères spéciaux, par exemple <codeph>&amp;lt;</codeph>.</p>
     
      <p>Si le texte est plus large que le contrôle Label, il est tronqué et se termine par des points de suspension (...). Le texte entier s’affiche sous forme d’info-bulle lorsque vous passez la souris sur le contrôle Label. Si vous avez également défini une info-bulle à l’aide de la propriété <codeph>tooltip</codeph>, l’info-bulle s’affiche à la place du texte.</p>
     
      <p>Si vous essayez de définir cette propriété sur <codeph>null</codeph>, elle est à la place définie sur la chaîne vide. La propriété <codeph>text</codeph> peut avoir temporairement la valeur <codeph>null</codeph>, ce qui indique que la propriété <codeph>htmlText</codeph> a été récemment définie et que la propriété <codeph>text</codeph> n’a pas encore été déterminée.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:textHeight:get"><apiName>textHeight</apiName><shortdesc>
      hauteur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      hauteur du texte.
     
      <p>La valeur de la propriété <codeph>textHeight</codeph> est correcte une fois que le composant a été validé uniquement. Si vous définissez la propriété <codeph>text</codeph>, puis demandez immédiatement la propriété <codeph>textHeight</codeph>, vous risquez de recevoir une valeur incorrecte. Vous devez attendre la validation du composant ou appeler la méthode <codeph>validateNow</codeph> pour obtenir la valeur. Ce comportement est différent de celui du contrôle flash.text.TextField, qui met immédiatement la valeur à jour.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.controls:Label:textWidth:get"><apiName>textWidth</apiName><shortdesc>
      Largeur du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur du texte.
     
      <p>La valeur de la propriété <codeph>textWidth</codeph> est correcte une fois que le composant a été validé uniquement. Si vous définissez la propriété <codeph>text</codeph>, puis demandez immédiatement la propriété <codeph>textWidth</codeph>, vous risquez de recevoir une valeur incorrecte. Vous devez attendre la validation du composant ou appeler la méthode <codeph>validateNow</codeph> pour obtenir la valeur. Ce comportement est différent de celui du contrôle flash.text.TextField, qui met immédiatement la valeur à jour.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:TabBar"><apiName>TabBar</apiName><shortdesc>
  Le contrôle TabBar permet de créer un groupe horizontal ou vertical d’éléments de navigation par onglets en définissant les étiquettes et les données associées à chaque onglet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="shadowDistance"/><Exclude kind="style" name="shadowDirection"/><Exclude kind="style" name="shadowColor"/><Exclude kind="style" name="shadowCapColor"/><Exclude kind="style" name="lastButtonStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="firstButtonStyleName"/><Exclude kind="style" name="dropShadowEnabled"/><Exclude kind="style" name="dropShadowColor"/><Exclude kind="style" name="cornerRadius"/><Exclude kind="style" name="borderThickness"/><Exclude kind="style" name="borderStyle"/><Exclude kind="style" name="borderSkin"/><Exclude kind="style" name="borderSides"/><Exclude kind="style" name="borderColor"/><Exclude kind="style" name="backgroundSize"/><Exclude kind="style" name="backgroundImage"/><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAttachment"/><Exclude kind="style" name="backgroundAlpha"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:TabBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les éléments de navigation par onglets dans le sens vertical.
 
  </description>
<default>-1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="top,middle,bottom" inherit="no" name="verticalAlign" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
 Alignement vertical de tous les onglets dans le contrôle TabBar. Comme chaque onglet s’étire pour remplir l’intégralité du contrôle TabBar, ce style n’est utile que si vous utilisez le style tabHeight et si les hauteurs combinées des onglets sont inférieures à la hauteur du contrôle TabBar. Les valeurs possibles sont <codeph>"top"</codeph>, <codeph>"middle"</codeph> et <codeph>"bottom"</codeph>.
 
 </description>
<default>"middle"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tabWidth" owner="mx.controls:TabBar" playerVersion="Flash9" type="Number">
<description>
  Largeur de l’élément de navigation par onglets, en pixels. Si elle n’est pas définie, la largeur par défaut des onglets est calculée à partir du texte d’étiquette.
 
  </description>
<default>undefined 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tabHeight" owner="mx.controls:TabBar" playerVersion="Flash9" type="Number">
<description>
  Hauteur de chaque élément de navigation par onglets, en pixels. Lorsque cette propriété est <codeph>undefined</codeph>, la hauteur de chaque onglet est déterminée par les styles de polices appliqués au conteneur. Si vous définissez cette propriété, la valeur spécifiée remplace ce calcul.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="tabStyleName" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles à utiliser pour les éléments de navigation par onglets.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedTabTextStyleName" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles à utiliser pour le texte de l’élément de navigation par onglets sélectionné. 
 
  </description>
<default>"activeTabStyle" 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lastTabStyleName" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles à utiliser pour le dernier élément de onglets par tabulation. 
  
  </description>
<default>"tabStyleName" 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:TabBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les éléments de navigation par onglets dans le sens horizontal.
 
  </description>
<default>-1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
 Alignement horizontal de tous les onglets dans le contrôle TabBar. Comme chaque onglet s’étire pour remplir l’intégralité du contrôle TabBar, ce style n’est utile que si vous utilisez le style tabWidth et si les largeurs combinées des onglets sont inférieures à largeur du contrôle TabBar. Valeurs possibles : <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="firstTabStyleName" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles à utiliser pour le premier élément de navigation par onglets. 
  
  </description>
<default>"tabStyleName"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TabBar&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:TabBar
    <b>Styles</b>
    firstTabStyleName="<i>Value of the</i> <code>tabStyleName</code> <i>property</i>"
    horizontalAlign="left|center|right"
    horizontalGap="-1"
    lastTabStyleName="<i>Value of the</i> <code>tabStyleName</code> <i>property</i>"
    selectedTabTextStyleName="activeTabStyle"
    tabHeight="undefined"
    tabStyleName="Tab"
    tabWidth="undefined"
    verticalAlign="top|middle|bottom"
    verticalGap="-1"
 
    <b>Events</b>
    itemClick="<i>No default</i>"
    &gt;
    ...
       <i>child tags</i>
    ...
  &lt;/mx:TabBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:ToggleButtonBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle TabBar permet de créer un groupe horizontal ou vertical d’éléments de navigation par onglets en définissant les étiquettes et les données associées à chaque onglet. Utilisez le contrôle TabBar à la place du conteneur TabNavigator pour créer des onglets qui, par défaut, ne sont pas associés à plusieurs vues.
 
  <p>L’utilisation du contrôle TabBar permet aux onglets d’être directement déterminés par les données, de sorte que vous pouvez changer la ou les vues de toute façon.</p>
 
  <p>Un contrôle TabBar possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille préférée</entry>
           <entry>Largeur suffisante pour contenir tout le texte de l’étiquette ainsi que la marge, et hauteur suffisante pour contenir le texte de l’étiquette. La hauteur par défaut de l’onglet est déterminée par la police, le style et l’habillage appliqués au contrôle. Si vous définissez une hauteur explicite à l’aide de la propriété tabHeight, cette valeur remplace la valeur par défaut.</entry>
        </row><row>
           <entry>Règles de redimensionnement des contrôles</entry>
           <entry>Les contrôles TabBar ne sont pas redimensionnés par défaut. Spécifiez des tailles de pourcentage pour redimensionner votre contrôle TabBar en fonction de la taille de son conteneur parent.</entry>
        </row><row>
           <entry>Marge</entry>
           <entry>0 pixel pour les propriétés Gauche et Droite.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TabBarExample.mxml"><swfblock conref="examples/TabBarExample.swf"/></example></apiClassifierDetail><adobeApiEvent id="mx.controls:TabBar_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Distribué lorsqu’un élément de navigation par onglets est sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un élément de navigation par onglets est sélectionné. Cet événement est distribué uniquement si le fournisseur de données n’est pas un conteneur ViewStack.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:TabBar:TabBar"><apiName>TabBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:RadioButton"><apiName>RadioButton</apiName><shortdesc>
  Le contrôle RadioButton permet à l’utilisateur d’effectuer un choix unique au sein d’un jeu de choix mutuellement exclusifs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="toggle"/><Exclude kind="property" name="emphasized"/><Alternative owner="mx.controls:RadioButton" replacement="spark.components.RadioButton" since="4.0">
	</Alternative><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:RadioButton" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’un symbole de composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton ScrollBar.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:RadioButton" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage désactivé. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox désactivé, par la classe ComboBoxSkin pour tracer la flèche vers le bas d’un contrôle ComboBox désactivé et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois d’un contrôle DateChooser désactivé. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x999999</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:RadioButton" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox, par la classe ComboBoxSkin pour tracer la flèche vers le bas du contrôle ComboBox et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois du contrôle DateChooser. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x111111</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:RadioButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:RadioButton
    <strong>Properties</strong>
    groupName=""
    labelPlacement="right|left|top|bottom"
  
    <strong>Styles</strong>
    disabledIconColor="0x999999"
    iconColor="0x2B333C"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerGroup</apiBaseInterface><apiBaseInterface>mx.core:IToggleButton</apiBaseInterface><apiBaseClassifier>mx.controls:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle RadioButton permet à l’utilisateur d’effectuer un choix unique au sein d’un jeu de choix mutuellement exclusifs. Un groupe RadioButton est constitué de deux contrôles RadioButton ou plus avec la même propriété <codeph>groupName</codeph>. Alors que le regroupement d’occurrences de RadioButton dans un composant RadioButtonGroup est facultatif, un groupe vous permet d’effectuer des choses comme définir un seul gestionnaire d’événement sur un groupe de boutons, plutôt que sur chaque bouton. Le groupe RadioButton peut se référer à un groupe créé par la balise <codeph>&lt;mx:RadioButtonGroup></codeph>. L’utilisateur sélectionne un seul membre du groupe à la fois. La sélection d’un membre de groupe non sélectionné a pour effet de désélectionner le contrôle RadioButton actuellement sélectionné dans ce groupe. 
 
  <p>Le contrôle RadioButton possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Suffisamment large pour afficher l’étiquette de texte du contrôle</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Undefined</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="RadioButtonExample.mxml"><swfblock conref="examples/RadioButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#RadioButtonGroup"><linktext>mx.controls.RadioButtonGroup</linktext></link></related-links><apiConstructor id="mx.controls:RadioButton:RadioButton"><apiName>RadioButton</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:RadioButton:group:get"><apiName>group</apiName><shortdesc>
      Objet RadioButtonGroup auquel appartient ce contrôle RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:RadioButtonGroup</apiValueClassifier><apiDefaultValue>"undefined"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Objet RadioButtonGroup auquel appartient ce contrôle RadioButton.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButton:groupName:get"><apiName>groupName</apiName><shortdesc>
      Indique le nom du groupe auquel ce contrôle RadioButton appartient ou indique la valeur de la propriété id d’un contrôle RadioButtonGroup si ce contrôle RadioButton fait partie d’un groupe défini par un contrôle RadioButtonGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiException><apiDesc>Renvoie une erreur ArgumentError si vous utilisez Flex 4 ou une version ultérieure et si le nom groupName commence par la chaîne « _fx_ ». 
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiDefaultValue>"undefined"
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique le nom du groupe auquel ce contrôle RadioButton appartient ou indique la valeur de la propriété <codeph>id</codeph> d’un contrôle RadioButtonGroup si ce contrôle RadioButton fait partie d’un groupe défini par un contrôle RadioButtonGroup.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButton:labelPlacement:get"><apiName>labelPlacement</apiName><shortdesc>
      Position de l’étiquette par rapport à l’icône RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ButtonLabelPlacement.RIGHT
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Position de l’étiquette par rapport à l’icône RadioButton. Les valeurs valides dans MXML sont <codeph>"right"</codeph>, <codeph>"left"</codeph>, <codeph>"bottom"</codeph> et <codeph>"top"</codeph>.
     
      <p>Dans ActionScript, vous utilisez les constantes suivantes pour définir cette propriété : <codeph>ButtonLabelPlacement.RIGHT</codeph>, <codeph>ButtonLabelPlacement.LEFT</codeph>, <codeph>ButtonLabelPlacement.BOTTOM</codeph> et <codeph>ButtonLabelPlacement.TOP</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButton:value:get"><apiName>value</apiName><shortdesc>
      Valeur facultative définie par l’utilisateur et associée à un contrôle RadioButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur facultative définie par l’utilisateur et associée à un contrôle RadioButton.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:HorizontalList"><apiName>HorizontalList</apiName><shortdesc>
  Le contrôle HorizontalList affiche une liste d’éléments horizontale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="variableRowHeight"/><Exclude kind="property" name="maxRows"/><Exclude kind="property" name="maxColumns"/><Exclude kind="property" name="direction"/><Alternative owner="mx.controls:HorizontalList" replacement="spark.components.List" since="4.0">
<description>
  Les composants Liste de la mise en forme dans Flex 3 ont été remplacés par un composant Liste plus générique qui prend une mise en forme générique. Pour obtenir un comportement similaire dans le nouveau composant Liste, définissez la propriété <codeph>layout</codeph> sur <codeph>HorizontalLayout</codeph>.
 </description>
	</Alternative><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:HorizontalList&gt;</code> tag inherits all of the 
  tag attributes of its superclass and it adds no new tag attributes.</p>
 
  <pre>
  &lt;mx:HorizontalList/&gt
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.listClasses:TileBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle HorizontalList affiche une liste d’éléments horizontale. Si d’autres éléments peuvent être affichés en même temps, il peut afficher une barre de défilement horizontale afin que l’utilisateur puisse accéder à tous les éléments de la liste.
 
  <p>Le contrôle HorizontalList possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Quatre colonnes, dont la taille est déterminée par les dimensions des cellules.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>5000 par 5000.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HorizontalListExample.mxml"><swfblock conref="examples/HorizontalListExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.controls:HorizontalList:HorizontalList"><apiName>HorizontalList</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:ToggleButtonBar"><apiName>ToggleButtonBar</apiName><shortdesc>
  Le contrôle ToggleButtonBar définit un groupe horizontal ou vertical de boutons qui conservent leur état sélectionné ou désélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="shadowDistance"/><Exclude kind="style" name="shadowDirection"/><Exclude kind="style" name="shadowColor"/><Exclude kind="style" name="shadowCapColor"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="dropShadowEnabled"/><Exclude kind="style" name="dropShadowColor"/><Exclude kind="style" name="cornerRadius"/><Exclude kind="style" name="borderThickness"/><Exclude kind="style" name="borderStyle"/><Exclude kind="style" name="borderSkin"/><Exclude kind="style" name="borderSides"/><Exclude kind="style" name="borderColor"/><Exclude kind="style" name="backgroundSize"/><Exclude kind="style" name="backgroundImage"/><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAttachment"/><Exclude kind="style" name="backgroundAlpha"/><Exclude kind="event" name="click"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Alternative owner="mx.controls:ToggleButtonBar" replacement="spark.components.ButtonBar" since="4.0">
	</Alternative><styles><style inherit="no" name="selectedButtonTextStyleName" owner="mx.controls:ToggleButtonBar" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles du texte du bouton sélectionné.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ToggleButtonBar&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:ToggleButtonBar
    <b>Properties</b>
    selectedIndex="0"
    toggleOnClick="false|true"
 
    <b>Styles</b>
    selectedButtonTextStyleName="<i>Name of CSS style declaration that specifies styles for the text of the selected button.</i>"&gt;
    ...
       <i>child tags</i>
    ...
  &lt;/mx:ToggleButtonBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:ButtonBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle ToggleButtonBar définit un groupe horizontal ou vertical de boutons qui conservent leur état sélectionné ou désélectionné. Un seul bouton du contrôle ToggleButtonBar peut se trouver dans l’état sélectionné. Cela signifie que lorsqu’un utilisateur sélectionne un bouton dans un contrôle ToggleButtonBar, le bouton conserve son état sélectionné jusqu’à ce que l’utilisateur sélectionne un autre bouton.
 
  <p>Si vous définissez la propriété <codeph>toggleOnClick</codeph> du conteneur ToggleButtonBar sur <codeph>true</codeph>, la sélection du bouton actuellement sélectionné a pour effet de le désélectionner. Par défaut, la propriété <codeph>toggleOnClick</codeph> est définie sur <codeph>false</codeph>.</p>
 
  <p>Vous pouvez utiliser le contrôle ButtonBar pour définir un groupe de boutons de commande.</p>
 
  <p>L’utilisation habituelle d’un bouton de basculement permet de conserver une sélection parmi un jeu d’options, comme passer d’une vue à une autre dans un conteneur ViewStack.</p>
 
  <p>Le contrôle ToggleButtonBar crée des contrôles Button en fonction de la valeur de sa propriété <codeph>dataProvider</codeph>. Même si le contrôle ToggleButtonBar est une sous-classe d’un contrôle Container, n’utilisez pas des méthodes comme <codeph>Container.addChild()</codeph> et <codeph>Container.removeChild()</codeph> pour ajouter ou supprimer des contrôles Button. Utilisez en revanche des méthodes comme <codeph>addItem()</codeph> et <codeph>removeItem()</codeph> pour manipuler la propriété <codeph>dataProvider</codeph>. Le contrôle ToggleButtonBar ajoute ou supprime automatiquement les enfants nécessaires en fonction des modifications apportées à la propriété <codeph>dataProvider</codeph>.</p>
 
  <p>Pour contrôler le style des boutons du contrôle ToggleButtonBar, utilisez les propriétés de style <codeph>buttonStyleName</codeph>, <codeph>firstButtonStyleName</codeph> et <codeph>lastButtonStyleName</codeph>. N’essayez pas d’appliquer un style à chaque bouton faisant partie du contrôle ToggleButtonBar.</p>
 
  <p>Le contrôle ToggleButtonBar possède les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
      
    
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
        <entry>Taille préférée</entry>
        <entry>Assez large pour contenir tous les boutons ainsi que le texte de leurs étiquettes et leurs icônes éventuels, la marge et les séparateurs, et assez haut pour contenir la hauteur du bouton.</entry>
     </row><row>
        <entry>Règles de redimensionnement des contrôles</entry>
        <entry>Les contrôles ne sont pas redimensionnés par défaut. Spécifiez des tailles de pourcentage pour redimensionner votre contrôle ToggleButtonBar en fonction de la taille de son conteneur parent.</entry>
     </row><row>
        <entry>selectedIndex</entry>
        <entry>Détermine le bouton qui sera sélectionné à la création du contrôle. La valeur par défaut est « 0 » et le bouton situé le plus à gauche sur la barre est sélectionné. Si vous définissez la propriété selectedIndex sur « -1 », tous les boutons de la barre sont désélectionnés.</entry>
     </row><row>
        <entry>Marge</entry>
        <entry>0 pixel pour les propriétés Haut, Bas, Gauche et Droite.</entry>
     </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ToggleButtonBarExample.mxml"><swfblock conref="examples/ToggleButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#ButtonBar"><linktext>mx.controls.ButtonBar</linktext></link><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link></related-links><apiConstructor id="mx.controls:ToggleButtonBar:ToggleButtonBar"><apiName>ToggleButtonBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:ToggleButtonBar:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Index du bouton sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Index du bouton sélectionné. Les index sont compris dans la plage 0, 1, 2, ..., n - 1, où <i>n</i> correspond au nombre de boutons.
     
      <p>La valeur par défaut est 0. La valeur -1 a pour effet de désélectionner tous les boutons de la barre.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ToggleButtonBar:toggleOnClick:get"><apiName>toggleOnClick</apiName><shortdesc>
      Indique si le bouton actuellement sélectionné peut être désélectionné par l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le bouton actuellement sélectionné peut être désélectionné par l’utilisateur. Par défaut, le bouton actuellement sélectionné est désélectionné automatiquement, uniquement lorsque l’utilisateur sélectionne un autre bouton du groupe. Si vous définissez cette propriété sur <codeph>true</codeph>, l’utilisateur pourra le désélectionner. Lorsque le bouton actuellement sélectionné est désélectionné, la propriété <codeph>selectedIndex</codeph> est définie sur <codeph>-1</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:HRule"><apiName>HRule</apiName><shortdesc>
  Le contrôle HRule crée une seule ligne horizontale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:HRule" replacement="spark.primitives.Line" since="4.0">
	</Alternative><styles><style format="Length" inherit="yes" name="strokeWidth" owner="mx.controls:HRule" playerVersion="Flash9" type="Number">
<description>
  Epaisseur de la règle, en pixels.
  <ul>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est 1, la règle est une ligne de 1 pixel de large.</li>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est 2, la règle a la forme de deux lignes horizontales adjacentes de 1 pixel de large.</li>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est supérieure à 2, la règle est un rectangle creux avec des bords de 1 pixel de large.</li>
  </ul>
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="strokeColor" owner="mx.controls:HRule" playerVersion="Flash9" type="uint">
<description>
  Couleur de la ligne. 
  <ul>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est 1, strokeColor est la couleur de la ligne entière.</li>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est 2, strokeColor est la couleur de la ligne supérieure.</li>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est supérieure à 2, strokeColor est la couleur des bords supérieur et gauche du rectangle.</li>
  </ul> 
  
  </description>
<default>0xC4CCCC
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="shadowColor" owner="mx.controls:HRule" playerVersion="Flash9" type="uint">
<description>
  Couleur des tons foncés de la ligne. 
  <ul>
    <li>Si <codeph>strokeWidth</codeph> a la valeur 1, shadowColor n’a aucun effet.</li>
    <li>Si <codeph>strokeWidth</codeph> a la valeur 2, shadowColor est la couleur de la ligne inférieure.</li>
    <li>Si la valeur de <codeph>strokeWidth</codeph> est supérieure à 2, shadowColor est la couleur des bords inférieur et droit du rectangle.</li>
  </ul>
 
  </description>
<default>0xEEEEEE
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:HRule&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:HRule
    <strong>Styles</strong>
    strokeColor="0xC4CCCC"
    shadowColor="0xEEEEEE"
    strokeWidth="2"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle HRule crée une seule ligne horizontale. Ce contrôle permet généralement de créer une ligne de division au sein d’un conteneur.
 
  <p>Le contrôle HRule est doté des propriétés par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La largeur par défaut est de 100 pixels et la hauteur par défaut de 2 pixels. Par défaut, le contrôle HRule ne peut pas être redimensionné. Définissez la largeur et la hauteur sur des valeurs de pourcentage pour activer le redimensionnement.</entry>
        </row><row>
           <entry>strokeWidth</entry>
           <entry>2 pixels.</entry>
        </row><row>
           <entry>strokeColor</entry>
           <entry>0xC4CCCC.</entry>
        </row><row>
           <entry>shadowColor</entry>
           <entry>0xEEEEEE.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleHRule.mxml"><swfblock conref="examples/SimpleHRule.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#VRule"><linktext>mx.controls.VRule</linktext></link></related-links><apiConstructor id="mx.controls:HRule:HRule"><apiName>HRule</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:PopUpButton"><apiName>PopUpButton</apiName><shortdesc> 
  Le contrôle PopUpButton ajoute une interface de contrôle déroulant flexible à un contrôle Button.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="selectedUpSkin"/><Exclude kind="style" name="selectedUpIcon"/><Exclude kind="style" name="selectedOverSkin"/><Exclude kind="style" name="selectedOverIcon"/><Exclude kind="style" name="selectedDownSkin"/><Exclude kind="style" name="selectedDownIcon"/><Exclude kind="style" name="selectedDisabledSkin"/><Exclude kind="style" name="selectedDisabledIcon"/><Exclude kind="property" name="toggle"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:PopUpButton" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’un symbole de composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton ScrollBar.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="skin" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Class">
<description>
  Classe d’habillage avec état par défaut du contrôle.
  </description>
<default>mx.skins.halo.PopUpButtonSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="popUpOverSkin" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Class">
<description>
  Classe d’habillage pour l’état popUpOver (sur arrowButton) de l’arrière-plan et de la bordure.
  </description>
<default>mx.skins.halo.PopUpButtonSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="popUpIcon" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Class">
<description>
  Icône utilisée pour le bouton droit du contrôle PopUpButton. Les classes prises en charge sont mx.skins.halo.PopUpIcon et mx.skins.halo.PopUpMenuIcon.
  </description>
<default>mx.skins.halo.PopUpIcon
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="popUpGap" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels verticaux entre le contrôle PopUpButton et l’objet UIComponent déroulant spécifié. La valeur par défaut est 0.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="popUpDownSkin" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Class">
<description>
  Classe d’habillage pour l’état popUpDown (lorsque le contrôle arrowButton est dans un état Activé) de l’arrière-plan et de la bordure.
  </description>
<default>mx.skins.halo.PopUpButtonSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="popUpStyleName" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="String">
<description>
  Nom d’une déclaration de style CSS utilisée par le contrôle. Ce style permet de contrôler l’apparence de l’objet UIComponent affiché par ce contrôle. 
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Function">
<description>
  Fonction d’accélération permettant de contrôler l’interpolation d’ouverture du composant.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Number">
<description>
  Longueur d’une transition ouverte, en millisecondes. La valeur par défaut est 250.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="icon" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Class">
<description>
  Classe d’icône par défaut du bouton principal.
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeEasingFunction" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Function">
<description>
  Fonction d’accélération permettant de contrôler l’interpolation de fermeture du composant.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="closeDuration" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Number">
<description>
  Longueur d’une transition fermée, en millisecondes. La valeur par défaut est 250.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="arrowButtonWidth" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la ligne de division et le bord droit du composant. La valeur par défaut est 16.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:PopUpButton" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage désactivé. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox désactivé, par la classe ComboBoxSkin pour tracer la flèche vers le bas d’un contrôle ComboBox désactivé et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois d’un contrôle DateChooser désactivé. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x999999</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:PopUpButton" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox, par la classe ComboBoxSkin pour tracer la flèche vers le bas du contrôle ComboBox et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois du contrôle DateChooser. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x111111</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:PopUpButton&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:PopUpButton
    <strong>Properties</strong> 
    openAlways="false|true
    popUp="No default"
  
    <strong>Styles</strong>
    arrowButtonWidth="16"
    closeDuration="250"
    closeEasingFunction="No default"
    disabledIconColor="0x999999"
    iconColor="0x111111"
    openDuration="250"
    openEasingFunction="No default"
    popUpDownSkin="popUpDownSkin"
    popUpGap="0"
    popUpIcon="PopUpIcon"
    popUpOverSkin="popUpOverSkin"
  
    <strong>Events</strong>
    close="No default"
    open="No default"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Button</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Le contrôle PopUpButton ajoute une interface de contrôle déroulant flexible à un contrôle Button. Il contient un bouton principal et un bouton secondaire, appelé bouton déroulant, qui affiche un objet UIComponent lorsqu’un utilisateur clique sur le bouton déroulant. 
 
  <p>Un contrôle PopUpButton peut présenter une étiquette de texte, une icône, ou les deux, sur sa face. Lorsqu’un utilisateur clique sur la partie principale du contrôle PopUpButton, le contrôle distribue un événement <codeph>click</codeph>.</p>
 
  <p>Une utilisation courante du contrôle PopUpButton est de faire en sorte que le bouton déroulant ouvre un contrôle List ou Menu qui change la fonction et l’étiquette du bouton principal.</p>
 
  <p>Le contrôle PopUpButton possède les caractéristiques par défaut suivantes  :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Largeur suffisante pour accueillir l’étiquette et l’icône sur le bouton principal et l’icône sur le bouton déroulant.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Undefined</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="PopUpButtonExample.mxml"><swfblock conref="examples/PopUpButtonExample.swf"/></example></apiClassifierDetail><adobeApiEvent id="mx.controls:PopUpButton_mx.events.DropdownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Distribué à l’ouverture de l’objet UIComponent spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.OPEN</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à l’ouverture de l’objet UIComponent spécifié.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:PopUpButton_mx.events.DropdownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Distribué à la fermeture de l’objet UIComponent spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à la fermeture de l’objet UIComponent spécifié. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:PopUpButton:PopUpButton"><apiName>PopUpButton</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:PopUpButton:close"><apiName>close</apiName><shortdesc>
      Ferme l’objet UIComponent ouvert par le contrôle PopUpButton.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ferme l’objet UIComponent ouvert par le contrôle PopUpButton.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:PopUpButton:open"><apiName>open</apiName><shortdesc>
      Ouvre l’objet UIComponent spécifié par la propriété popUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Ouvre l’objet UIComponent spécifié par la propriété <codeph>popUp</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:PopUpButton:closeOnActivity:get"><apiName>closeOnActivity</apiName><shortdesc>
      Si elle est définie sur true, cela indique que la commande du menu déroulant se ferme sur un clic ou sur une autre activité de l’utilisateur.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true 
     </apiDefaultValue></apiValueDef><apiDesc>
      Si elle est définie sur <codeph>true</codeph>, cela indique que la commande du menu déroulant se ferme sur un clic ou sur une autre activité de l’utilisateur. La commande du menu déroulant est une commande ouverte par un clic sur le bouton contextuel.
     
      <p>Pour les commandes du menu contextuel telles que Menu, Liste ou TileList, vous pouvez laisser cette propriété avec sa valeur par défaut <codeph>true</codeph> étant donné que ces commandes doivent cesser leur activité. Toutefois, pour les sélections multiples et d’autres types de commandes du menu contextuel, vous pouvez définir cette propriété sur <codeph>false</codeph> pour empêcher que les commandes du menu contextuel cessent leur activité.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpButton:openAlways:get"><apiName>openAlways</apiName><shortdesc>
      Si la valeur est true, indique de faire s’afficher la propriété popUp lorsque vous cliquez sur le bouton principal.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, indique de faire s’afficher la propriété <codeph>popUp</codeph> lorsque vous cliquez sur le bouton principal. La propriété <codeph>popUp</codeph> s’affiche toujours lorsque vous activez la barre d’espacement ou lorsque vous cliquez sur le bouton déroulant, quel que soit le paramètre de la propriété <codeph>openAlways</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpButton:popUp:get"><apiName>popUp</apiName><shortdesc>
      Spécifie l’objet UIComponent ou l’objet défini par une sous-classe de la classe UIComponent, qui doit s’afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier><apiDefaultValue>null 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie l’objet UIComponent ou l’objet défini par une sous-classe de la classe UIComponent, qui doit s’afficher. Vous pouvez par exemple spécifier un contrôle Menu, TileList ou Tree. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:PopUpMenuButton"><apiName>PopUpMenuButton</apiName><shortdesc>
  Le contrôle PopUpMenuButton crée un contrôle PopUpButton doté d’un sous-bouton principal et d’un sous-bouton secondaire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="selectedUpSkin"/><Exclude kind="style" name="selectedUpIcon"/><Exclude kind="style" name="selectedOverSkin"/><Exclude kind="style" name="selectedOverIcon"/><Exclude kind="style" name="selectedDownSkin"/><Exclude kind="style" name="selectedDownIcon"/><Exclude kind="style" name="selectedDisabledSkin"/><Exclude kind="style" name="selectedDisabledIcon"/><Exclude kind="property" name="toggle"/><styles><style inherit="no" name="popUpStyleName" owner="mx.controls:PopUpMenuButton" playerVersion="Flash9" type="String">
<description>
  Nom d’une déclaration de style CSS utilisée par le menu déroulant. Cette propriété permet de contrôler l’apparence du menu déroulant. La valeur par défaut définit <codeph>fontWeight</codeph> sur <codeph>normal</codeph> et <codeph>textAlign</codeph> sur <codeph>left</codeph>.
 
  </description>
<default>"popUpMenu"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:PopUpMenuButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:PopUpMenuButton
    <strong>Properties</strong>
    dataDescriptor="<i>instance of DefaultDataDescriptor</i>"
    dataProvider="undefined"
    iconField="icon"
    iconFunction="undefined"
    labelField="label"
    labelFunction="undefined"
    showRoot="false|true"
    &nbsp;
    <strong>Event</strong>
    change=<i>No default</i>
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Permet de dérouler un menu et agit comme un bouton
  </apiTipText></apiTipTexts><apiBaseClassifier>mx.controls:PopUpButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle PopUpMenuButton crée un contrôle PopUpButton doté d’un sous-bouton principal et d’un sous-bouton secondaire. Lorsque l’utilisateur clique sur le sous-bouton secondaire (à droite), un menu déroulant qui peut être renseigné par la propriété <codeph>dataProvider</codeph> apparaît. Contrairement aux contrôles Menu et MenuBar, le contrôle PopUpMenuButton prend en charge un menu d’un seul niveau. Cela signifie que le menu ne peut pas contenir des menus en cascades.
 
  <p>Le sous-bouton principal du contrôle PopUpMenuButton peut présenter une étiquette de texte, une icône, ou les deux, sur sa face. Lorsqu’un utilisateur sélectionne un élément du menu déroulant ou clique sur le bouton principal du contrôle PopUpMenuButton, le contrôle distribue un événement <codeph>itemClick</codeph>. Lorsqu’un utilisateur clique sur le bouton principal du contrôle, ce dernier distribue également un événement <codeph>click</codeph>. Vous pouvez personnaliser l’aspect d’un contrôle PopUpMenuButton.</p>
 
  <p>Le contrôle PopUpMenuButton possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Suffisante pour accueillir l’étiquette et l’icône sur le bouton principal et l’icône sur le bouton déroulant. Le contrôle ne réserve pas d’espace pour le menu.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>10000 par 10000.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="PopUpButtonMenuExample.mxml"><swfblock conref="examples/PopUpButtonMenuExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Menu"><linktext>mx.controls.Menu</linktext></link><link href="mx.controls.xml#MenuBar"><linktext>mx.controls.MenuBar</linktext></link></related-links><adobeApiEvent id="mx.controls:PopUpMenuButton_mx.events.MenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Distribué lorsqu’un utilisateur sélectionne un élément dans le menu contextuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un utilisateur sélectionne un élément dans le menu contextuel.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:PopUpMenuButton:PopUpMenuButton"><apiName>PopUpMenuButton</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:PopUpMenuButton:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      Le descripteur de données accède aux objets du fournisseur de données et les manipule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.menuClasses:IMenuDataDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      Le descripteur de données accède aux objets du fournisseur de données et les manipule.
      <p>Lorsque vous spécifiez cette propriété comme attribut dans MXML, vous devez utiliser une référence au descripteur de données et pas le nom de chaîne du descripteur. Utilisez le format suivant pour la propriété :</p>
     
      <pre>&lt;mx:PopUpMenuButton id="menubar" dataDescriptor="{new MyCustomDataDescriptor()}"/></pre>
     
      <p>Vous pouvez également spécifier la propriété dans MXML comme sous-balise imbriquée, comme le montre l’exemple suivant :</p>
     
      <pre>&lt;mx:PopUpMenuButton>
      &lt;mx:dataDescriptor>
         &lt;myCustomDataDescriptor>
      &lt;/mx:dataDescriptor>
      ...</pre>
     
      <p>Valeur par défaut d’une occurrence interne de la classe DefaultDataDescriptor.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      DataProvider for popUpMenu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      DataProvider for popUpMenu.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:iconField:get"><apiName>iconField</apiName><shortdesc>
      Nom du champ du tableu dataProvider qui contient l’icône à afficher pour chaque élément de menu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"icon"
     </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ du tableau <codeph>dataProvider</codeph> qui contient l’icône à afficher pour chaque élément de menu. La propriété <codeph>iconFunction</codeph>, si elle définie, remplace cette propriété.
     
      <p>Le rendu d’élément recherche dans le fournisseur de données une propriété portant le nom spécifié dans la propriété <codeph>iconField</codeph>. Si la valeur de la propriété est une classe, cette dernière est instanciée et sera probablement une occurrence d’un objet IFlexDisplayObject. Si la valeur de la propriété est une chaîne, elle recherche si la propriété Classe existe avec ce nom dans l’application. Si elle ne parvient pas à trouver une propriété de l’application, elle recherche une propriété dans le document avec ce nom et s’attend à ce que cette propriété se mappe à une classe.</p>
     
      <p>Si le fournisseur de données est un objet E4X XML, vous devez définir explicitement cette propriété. Par exemple, utilisez @icon pour indiquer l’attribut <codeph>icon</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      Fonction qui détermine l’icône à afficher pour chaque élément de menu.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     </apiDefaultValue></apiValueDef><apiDesc>
      Fonction qui détermine l’icône à afficher pour chaque élément de menu. Si vous omettez cette propriété, Flex utilise le contenu du champ ou de l’attribut déterminé par la propriété <codeph>iconField</codeph>. Si vous spécifiez cette propriété, Flex ignore toute valeur de la propriété<codeph>iconField</codeph>.
     
      <p>Par défaut, le menu n’essaie pas d’afficher les icônes avec le texte dans les rangées. En revanche, en spécifiant une fonction d’icône, vous pouvez définir une classe pour un graphique qui sera créé et affiché en tant qu’icône dans la rangée.  </p>
     
      <p>La propriété iconFunction prend un unique argument correspondant à l’élément du fournisseur de données et retourne une classe:</p>
     
      <blockquote>
      Classe <codeph>iconFunction(item:Object)</codeph>
      </blockquote>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:labelField:get"><apiName>labelField</apiName><shortdesc>
      Nom du champ dans le tableau dataProvider qui contient le texte à afficher pour chaque élément de menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom du champ dans le tableau <codeph>dataProvider</codeph> qui contient le texte à afficher pour chaque élément de menu. La propriété <codeph>labelFunction</codeph>, si elle est définie, remplace cette propriété. Si le fournisseur de données est un tableau de chaînes, Flex utilise chaque valeur de chaîne comme étiquette. Si le fournisseur de données est un objet E4X XML, vous devez définir explicitement cette propriété. Par exemple, utilisez @label pour indiquer l’attribut <codeph>label</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Fonction qui détermine le texte à afficher de chaque élément de menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Fonction qui détermine le texte à afficher de chaque élément de menu. Si vous omettez cette propriété, Flex utilise le contenu du champ ou de l’attribut déterminé par la propriété <codeph>labelField</codeph>. Si vous spécifiez cette propriété, Flex ignore toute valeur de la propriété <codeph>labelField</codeph>.
     
      <p>Si vous spécifiez cette propriété, la fonction d’étiquette doit trouver le ou les champs appropriés et renvoyer une chaîne affichable. La propriété <codeph>labelFunction</codeph> permet de gérer la mise en forme et la localisation.</p>
     
      <p>La propriété d’étiquette doit prendre un seul argument correspondant à l’élément du fournisseur de données et renvoyer une chaîne, comme le montre l’exemple suivant :</p>
     
      <pre>labelFunction(item:Object):String</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      Indique si le ou les nœuds de niveau supérieur du fournisseur de données doivent être affichés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le ou les nœuds de niveau supérieur du fournisseur de données doivent être affichés. Si cette propriété est définie sur <codeph>false</codeph>, le contrôle n’affiche que les descendants du premier nœud de niveau supérieur. Tous les autres nœuds de niveau supérieur sont ignorés. Vous définissez généralement cette propriété sur <codeph>false</codeph> pour les fournisseurs de données XML au format E4X, dont le nœud de niveau supérieur est l’objet document.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:popUp:set"><apiName>popUp</apiName><shortdesc>
      Référence à l’objet de menu déroulant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
      Référence à l’objet de menu déroulant.
     
      <p>Cette propriété est en lecture seule et sa définition n’a aucun effet. Définissez plutôt la propriété <codeph>dataProvider</codeph> (l’indicateur d’écriture seule s’affiche dans le résumé de la syntaxe, car la propriété dans la super-classe est accessible en lecture et en écriture et cette classe remplace la méthode setter par une implémentation vide).</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:DateChooser"><apiName>DateChooser</apiName><shortdesc>
  Le contrôle DateChooser affiche les noms du mois et de l’année et une grille des jours du mois. Des colonnes portent le nom des jours de la semaine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="weekDayStyleName" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Nom de définition de la feuille de style pour configurer les noms de jours du contrôle. Si cela est omis, les noms de jours héritent des styles de texte du contrôle.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="todayStyleName" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Nom de définition de la feuille de style pour configurer l’apparence du texte numérique du jour actuel, qui est mis en surbrillance dans le contrôle lorsque la propriété <codeph>showToday</codeph> est définie sur <codeph>true</codeph>. Indique un style « color » pour changer la couleur de police. Si cela est omis, le texte du jour actuel hérite des styles de texte du contrôle.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="todayIndicatorSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la zone de surbrillance de la date d’aujourd’hui dans le contrôle DateChooser.
 
  </description>
<default>mx.skins.halo.DateChooserIndicator
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="todayColor" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan de la date d’aujourd’hui. La valeur par défaut est <codeph>0x818181</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:DateChooser" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur d’un symbole de composant. Les exemples incluent la coche d’un composant CheckBox ou la flèche d’un bouton ScrollBar.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectionIndicatorSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la zone de surbrillance de la date actuellement sélectionnée dans le contrôle DateChooser.
 
  </description>
<default>mx.skins.halo.DateChooserIndicator
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:DateChooser" playerVersion="Flash9" type="uint">
<description>
  Couleur de la zone de surbrillance de la date actuellement sélectionnée dans le contrôle DateChooser.
  </description>
<default>0xCDFFC1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="rollOverIndicatorSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la zone de surbrillance de la date lorsque l’utilisateur maintient le pointeur de la souris sur une date dans le contrôle DateChooser.
 
  </description>
<default>mx.skins.halo.DateChooserIndicator
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:DateChooser" playerVersion="Flash9" type="uint">
<description>
  Couleur de la zone de surbrillance de la date lorsque l’utilisateur maintient le pointeur de la souris sur une date dans le contrôle DateChooser.
  </description>
<default>0xE3FFD6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevYearUpSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche de l’année précédente lorsque la souris ne survole pas la flèche. La valeur par défaut est la classe DateChooserYearArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevYearOverSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche de l’année précédente lorsque la souris survole la flèche. La valeur par défaut est la classe DateChooserYearArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevYearDownSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche de l’année précédente lorsque l’utilisateur appuie sur le bouton de la souris sur la flèche. La valeur par défaut est la classe DateChooserYearArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevYearDisabledSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage de la flèche de l’année précédente lorsque la flèche est désactivée. La valeur par défaut est la classe DateChooserYearArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevYearSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage de la flèche de l’année précédente. La valeur par défaut est la classe DateChooserYearArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevMonthUpSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche du mois précédent lorsque la souris ne survole pas la flèche. La valeur par défaut est la classe DateChooserMonthArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevMonthOverSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche du mois précédent lorsque la souris survole la flèche. La valeur par défaut est la classe DateChooserMonthArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevMonthDownSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche du mois précédent lorsque l’utilisateur appuie sur le bouton de la souris sur la flèche. La valeur par défaut est la classe DateChooserMonthArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevMonthDisabledSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage de la flèche du mois précédent lorsque la flèche est désactivée. La valeur par défaut est la classe DateChooserMonthArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevMonthSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage de la flèche du mois précédent. La valeur par défaut est la classe DateChooserMonthArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextYearUpSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche de l’année suivante lorsque la souris ne survole pas la flèche. La valeur par défaut est la classe DateChooserYearArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextYearOverSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche de l’année suivante lorsque l’utilisateur déplace la souris sur la flèche. La valeur par défaut est la classe DateChooserYearArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextYearDownSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche de l’année suivante lorsque l’utilisateur clique sur le bouton de la souris sur la flèche. La valeur par défaut est la classe DateChooserYearArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextYearDisabledSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage de la flèche de l’année suivante lorsque la flèche est désactivée. La valeur par défaut est la classe DateChooserYearArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextYearSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage de la flèche de l’année suivante. La valeur par défaut est la classe DateChooserYearArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextMonthUpSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche du mois suivant lorsque la souris ne survole pas la flèche. La valeur par défaut est la classe DateChooserMonthArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextMonthOverSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche du mois suivant lorsque l’utilisateur déplace la souris sur la flèche. La valeur par défaut est la classe DateChooserMonthArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextMonthDownSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage pour la flèche du mois suivant lorsque l’utilisateur appuie sur le bouton de la souris sur la flèche. La valeur par défaut est la classe DateChooserMonthArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextMonthDisabledSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage de la flèche du mois suivant lorsque la flèche est désactivée. La valeur par défaut est la classe DateChooserMonthArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextMonthSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  Nom de la classe à utiliser comme habillage de la flèche du mois suivant. La valeur par défaut est la classe DateChooserMonthArrowSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage de surbrillance des contrôles. La première valeur indique la transparencé du haut de la surbrillance et la seconde valeur indique la transparence du bas de la surbrillance. La surbrillance couvre la moitié supérieure de l’habillage.
  
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerStyleName" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Nom de définition de la feuille de style pour configurer le texte (nom du mois et du jour) et l’apparence de la zone d’en-tête du contrôle.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="headerColors" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Couleurs de la bande située en haut du contrôle DateChooser. La valeur par défaut est <codeph>[ 0xE1E5EB, 0xF4F5F7 ]</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.controls:DateChooser" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de l’anneau de focus anneau lorsque le composant est en cours
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="uint" deprecatedReplacement="nextMonthStyleFilters, prevMonthStyleFilters" deprecatedSince="3.0" format="Color" inherit="no" name="fillColors" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Array">
<description>
  Couleurs utilisées pour teindre l’arrière-plan du contrôle. Transmettez la même couleur pour les deux valeurs d’un contrôle à l’aspect plat.
  
  </description>
<default>[ 0xFFFFFF, 0xCCCCCC ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" deprecatedReplacement="nextMonthStyleFilters, prevMonthStyleFilters" deprecatedSince="3.0" inherit="no" name="fillAlphas" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage d’arrière-plan des contrôles. Utilisez la valeur [1, 1] pour rendre l’arrière-plan des contrôles opaque.
  
  </description>
<default>[ 0.6, 0.4 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Rayon des angles des composants. Les composants suivants prennent ce style en charge : Alert, Button, ComboBox, LinkButton, MenuBar, NumericStepper, Panel, ScrollBar, Tab, TitleWindow et tous les composants qui prennent en charge une propriété <codeph>borderStyle</codeph> définie sur <codeph>"solid"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.controls:DateChooser" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Couleur de la zone de contenu du composant.
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.controls:DateChooser" playerVersion="Flash10" theme="spark" type="Number">
<description>
  
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur du cadre de sélection. Utilisé uniquement lorsque la propriété <codeph>borderStyle</codeph> est définie sur <codeph>"solid"</codeph>.
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de la bordure. Les contrôles suivants prennent ce style en charge : Button, CheckBox, ComboBox, MenuBar, NumericStepper, ProgressBar, RadioButton, ScrollBar, Slider et tous les composants qui prennent en charge le style <codeph>borderStyle</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0xB7BABC</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan du contrôle DateChooser.
  
  </description>
<default>0xFFFFF
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Niveau Alpha de la couleur définie par la propriété <codeph>backgroundColor</codeph>. Les valeurs valides sont comprises entre 0.0 et 1.0.
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:DateChooser" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:DateChooser" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:DateChooser" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:DateChooser" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:DateChooser" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris l’étiquette du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage désactivé. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox désactivé, par la classe ComboBoxSkin pour tracer la flèche vers le bas d’un contrôle ComboBox désactivé et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois d’un contrôle DateChooser désactivé. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x999999</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox, par la classe ComboBoxSkin pour tracer la flèche vers le bas du contrôle ComboBox et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois du contrôle DateChooser. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x111111</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens vertical. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens horizontal. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  Indique quels coins du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus.
  
  </description>
<default>0.4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:DateChooser&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:DateChooser
    <strong>Properties</strong>
    allowDisjointSelection="true|false"
    allowMultipleSelection="false|true"
    dayNames="["S", "M", "T", "W", "T", "F", "S"]"
    disabledDays="<i>No default</i>"
    disabledRanges="<i>No default</i>"
    displayedMonth="<i>Current month</i>"
    displayedYear="<i>Current year</i>"
    firstDayOfWeek="0"
    maxYear="2100"
    minYear="1900"
    monthNames="["January", "February", "March", "April", "May",
      "June", "July", "August", "September", "October", "November",
      "December"]"
    monthSymbol=""
    selectableRange="<i>No default</i>"
    selectedDate="<i>No default</i>"
    selectedRanges="<i>No default</i>"
    showToday="true|false"
    yearNavigationEnabled="false|true"
    yearSymbol=""
 
    <strong>Styles</strong>
    backgroundColor="0xFFFFFF"
    backgroundAlpha="1.0"
    borderColor="0xAAB3B3"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="4"
    disabledColor="0xAAB3B3"
    disabledIconColor="0x999999"
    fillAlphas="[0.6, 0.4]"
    fillColors="[0xFFFFFF, 0xCCCCCC]"
    focusAlpha="0.5"
    focusRoundedCorners"tl tr bl br"
    fontAntiAliasType="advanced"
    fontFamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    headerColors="[0xE1E5EB, 0xF4F5F7]"
    headerStyleName="headerDateText"
    highlightAlphas="[0.3, 0.0]"
    horizontalGap="8"
    iconColor="0x111111"
    leading="2"
    nextMonthDisabledSkin="DateChooserMonthArrowSkin"
    nextMonthDownSkin="DateChooserMonthArrowSkin"
    nextMonthOverSkin="DateChooserMonthArrowSkin"
    nextMonthSkin = "DateChooserMonthArrowSkin" 
    nextMonthUpSkin="DateChooserMonthArrowSkin"
    nextYearDisabledSkin="DateChooserYearArrowSkin"
    nextYearDownSkin="DateChooserYearArrowSkin"
    nextYearOverSkin="DateChooserYearArrowSkin"
    nextYearSkin = "DateChooserYearArrowSkin"
    nextYearUpSkin="DateChooserYearArrowSkin"
    prevMonthDisabledSkin="DateChooserMonthArrowSkin"
    prevMonthDownSkin="DateChooserMonthArrowSkin"
    prevMonthOverSkin="DateChooserMonthArrowSkin"
    prevMonthSkin = "DateChooserMonthArrowSkin"
    prevMonthUpSkin="DateChooserMonthArrowSkin"
    prevYearDisabledSkin="DateChooserYearArrowSkin"
    prevYearDownSkin="DateChooserYearArrowSkin"
    prevYearOverSkin="DateChooserYearArrowSkin"
    prevYearSkin = "DateChooserYearArrowSkin"
    prevYearUpSkin="DateChooserYearArrowSkin"
    rollOverColor="0xEEFEE6"
    rollOverIndicatorSkin="DateChooserIndicator"
    selectionColor="0xB7F39B"
    selectionIndicatorSkin="DateChooserIndicator"
    textAlign="left|right|center"
    textDecoration="none|underline"
    textIndent="0"
    todayColor="0x818181"
    todayIndicatorSkin="DateChooserIndicator"
    todayStyleName="todayStyle"
    verticalGap="6"
    weekDayStyleName="weekDayStyle"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle DateChooser affiche les noms du mois et de l’année et une grille des jours du mois. Des colonnes portent le nom des jours de la semaine. L’utilisateur peut sélectionner une date, une plage de dates ou plusieurs dates. Le contrôle contient des boutons de flèche vers l’avant ou l’arrière pour changer le mois et l’année. Vous pouvez laisser les utilisateurs sélectionner plusieurs dates, désactiver la sélection de certaines dates et limiter l’affichage à une plage de dates.
 
  <p>Le contrôle DateChooser possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Taille assez grande pour contenir le calendrier et assez large pour afficher le nom des jours</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Aucune limite</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DateChooserExample.mxml"><swfblock conref="examples/DateChooserExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#DateField"><linktext>mx.controls.DateField</linktext></link></related-links><adobeApiEvent id="mx.controls:DateChooser_mx.events.DateChooserEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Distribué lorsqu’une interaction de l’utilisateur modifie le mois.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DateChooserEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.DateChooserEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une interaction de l’utilisateur modifie le mois.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DateChooser_mx.events.CalendarLayoutChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsqu’une date est sélectionnée ou modifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CalendarLayoutChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CalendarLayoutChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une date est sélectionnée ou modifiée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:DateChooser:DateChooser"><apiName>DateChooser</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:DateChooser:allowDisjointSelection:get"><apiName>allowDisjointSelection</apiName><shortdesc>
      Si la valeur est true, indique qu’une sélection non contiguë est autorisée dans le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, indique qu’une sélection non contiguë est autorisée dans le contrôle DateChooser. Cette propriété n’a un effet que si la propriété <codeph>allowMultipleSelection</codeph> a la valeur <codeph>true</codeph>. La définition de cette propriété change l’apparence du contrôle DateChooser.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:allowMultipleSelection:get"><apiName>allowMultipleSelection</apiName><shortdesc>
      Si la valeur est true, indique qu’une sélection multiple est autorisée dans le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, indique qu’une sélection multiple est autorisée dans le contrôle DateChooser. La définition de cette propriété change l’apparence du contrôle DateChooser.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:protected:calendarLayoutStyleFilters:get"><apiName>calendarLayoutStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle DateChooser à la présentation du calendrier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle DateChooser à la présentation du calendrier.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateChooser:dayNames:get"><apiName>dayNames</apiName><shortdesc>
      Nom des jours de la semaine du contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[ "S", "M", "T", "W", "T", "F", "S" ].
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom des jours de la semaine du contrôle DateChooser. Modifier cette propriété change l’étiquette des jours du contrôle DateChooser. Dimanche est le premier jour (à l’index 0). Le reste des noms de la semaine suivent l’ordre normal.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:disabledDays:get"><apiName>disabledDays</apiName><shortdesc>
      Jours à désactiver dans une semaine.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Jours à désactiver dans une semaine. Toutes les dates du mois, pour le jour spécifié, sont désactivées. Cette propriété change l’apparence du contrôle DateChooser. Les éléments de ce tableau peuvent avoir des valeurs comprises entre 0 (dimanche) et 6 (samedi). Par exemple, la valeur <codeph>[ 0, 6 ]</codeph> désactive le dimanche et le samedi.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:disabledRanges:get"><apiName>disabledRanges</apiName><shortdesc>
      Désactive un seul et plusieurs jours.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Désactive un seul et plusieurs jours.
     
      <p>Cette propriété accepte un tableau d’objets en tant que paramètre. Chaque objet de ce tableau est un objet Date spécifiant un seul jour à désactiver, ou un objet contenant une des propriétés <codeph>rangeStart</codeph> et <codeph>rangeEnd</codeph>, voire les deux, dont les valeurs sont un objet Date. La valeur de ces propriétés décrit les limites de la période. Si l’une ou l’autre des propriétés est omise, la période est considérée comme illimitée dans le sens correspondant. Si vous ne spécifiez que la propriété <codeph>rangeStart</codeph>, toutes les dates qui se trouvent après la date spécifiée sont désactivées, y compris la date <codeph>rangeStart</codeph>. Si vous ne spécifiez que la propriété <codeph>rangeEnd</codeph>, toutes les dates qui se trouvent avant la date spécifiée sont désactivées, y compris la date <codeph>rangeEnd</codeph>. Pour ne désactiver qu’un seul jour, utilisez un objet Date unique qui spécifie une date du tableau. Les valeurs de temps sont mises à zéro à partir de l’objet Date si elles existent.</p>
     
      <p>L’exemple suivant désactive les dates suivantes : 11 janvier 2006, la période allant du 23 janvier au 10 février 2006 et le 1er mars 2006 et toutes les dates suivantes.</p>
     
      <p><codeph>disabledRanges="{[ new Date(2006,0,11), {rangeStart: new Date(2006,0,23), rangeEnd: new Date(2006,1,10)}, {rangeStart: new Date(2006,2,1)} ]}"</codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:displayedMonth:get"><apiName>displayedMonth</apiName><shortdesc>
      Utilisée avec la propriété displayedYear, la propriété displayedMonth spécifie le mois affiché dans le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Utilisée avec la propriété <codeph>displayedYear</codeph>, la propriété <codeph>displayedMonth</codeph> spécifie le mois affiché dans le contrôle DateChooser. Les numéros de mois sont basés sur zéro. Ainsi, janvier a la valeur 0 et décembre 11. La définition de cette propriété change l’apparence du contrôle DateChooser.
     
      <p>La valeur par défaut est le mois en cours.</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:displayedYear:get"><apiName>displayedYear</apiName><shortdesc>
      Utilisée avec la propriété displayedMonth, la propriété displayedYear spécifie l’année affichée dans le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Utilisée avec la <codeph>displayedMonth</codeph>, la propriété <codeph>displayedYear</codeph> spécifie l’année affichée dans le contrôle DateChooser. La définition de cette propriété change l’apparence du contrôle DateChooser.
     
      <p>La valeur par défaut est l’année en cours.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:firstDayOfWeek:get"><apiName>firstDayOfWeek</apiName><shortdesc>
      Nombre représentant le jour de la semaine à afficher dans la première colonne du contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>0 (Sunday)
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre représentant le jour de la semaine à afficher dans la première colonne du contrôle DateChooser. La valeur doit être comprise entre 0 et 6, où 0 correspond à dimanche ; le premier élément du tableau <codeph>dayNames</codeph>.
     
      <p>La définition de cette propriété modifie l’ordre d’affichage des colonnes des jours. Par exemple, si vous définissez cette propriété sur 1, lundi s’affiche dans la première colonne du contrôle.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:maxYear:get"><apiName>maxYear</apiName><shortdesc>
      Dernière année sélectionnable du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>2100
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Dernière année sélectionnable du contrôle.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:minYear:get"><apiName>minYear</apiName><shortdesc>
      Première année sélectionnable du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1900
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Première année sélectionnable du contrôle.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:monthNames:get"><apiName>monthNames</apiName><shortdesc>
      Nom des mois affichés en haut du contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[ "January", "February", "March", "April", "May", "June", 
      "July", "August", "September", "October", "November", "December" ]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nom des mois affichés en haut du contrôle DateChooser. La propriété <codeph>monthSymbol</codeph> est ajoutée à la fin de la valeur spécifiée par la propriété <codeph>monthNames</codeph>, ce qui est utile dans des langues comme le japonais.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:monthSymbol:get"><apiName>monthSymbol</apiName><shortdesc>
      Cette propriété est ajoutée à la fin de la valeur spécifiée par la propriété monthNames afin de définir les noms de mois affichés en haut du contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Cette propriété est ajoutée à la fin de la valeur spécifiée par la propriété <codeph>monthNames</codeph> afin de définir les noms de mois affichés en haut du contrôle DateChooser. Certaines langues, comme le japonais, utilisent un symbole supplémentaire après le nom des mois. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:protected:nextMonthStyleFilters:get"><apiName>nextMonthStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle DateChooser au bouton du mois suivant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle DateChooser au bouton du mois suivant.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateChooser:protected:nextYearStyleFilters:get"><apiName>nextYearStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle DateChooser au bouton de l’année suivante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle DateChooser au bouton de l’année suivante.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateChooser:protected:prevMonthStyleFilters:get"><apiName>prevMonthStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle DateChooser au bouton du mois précédent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle DateChooser au bouton du mois précédent.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateChooser:protected:prevYearStyleFilters:get"><apiName>prevYearStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle DateChooser au bouton de l’année précédente.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle DateChooser au bouton de l’année précédente.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateChooser:selectableRange:get"><apiName>selectableRange</apiName><shortdesc>
      Période au cours de laquelle il est possible de sélectionner des dates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Période au cours de laquelle il est possible de sélectionner des dates. Par exemple, une date comprise entre 04-12-2006 et 04-12-2007 peut être sélectionnée, mais les dates hors de cette période sont désactivées.
     
      <p>Cette propriété accepte un objet comme paramètre. L’objet contient deux propriétés : <codeph>rangeStart</codeph> et <codeph>rangeEnd</codeph>, de type Date. Si vous ne spécifiez que la propriété <codeph>rangeStart</codeph>, toutes les dates qui se trouvent après la date spécifiée sont activées. Si vous ne spécifiez que la propriété <codeph>rangeEnd</codeph>, toutes les dates qui se trouvent avant la date spécifiée sont activées. Pour n’activer qu’un seul jour d’un contrôle DateChooser, vous pouvez transmettre directement un objet Date. Les valeurs de temps sont mises à zéro à partir de l’objet Date si elles existent.</p>
     
      <p>L’exemple suivant active uniquement la période allant du 1er janvier 2006 au 30 juin 2006. Les mois qui se situent avant janvier et après juin n’apparaissent pas dans le contrôle DateChooser.</p>
     
      <p><codeph>selectableRange="{{rangeStart : new Date(2006,0,1), rangeEnd : new Date(2006,5,30)}}"</codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:selectedDate:get"><apiName>selectedDate</apiName><shortdesc>
      Date sélectionnée dans le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Date sélectionnée dans le contrôle DateChooser. Si l’objet Date entrant comporte toute valeur de temps, ces valeurs sont mises à zéro.
     
      <p>Maintenir la touche Ctrl enfoncée tout en sélectionnant la date actuellement sélectionnée dans le contrôle a pour effet de la désélectionner, de définir la propriété <codeph>selectedDate</codeph> sur <codeph>null</codeph> et de distribuer l’événement <codeph>change</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:selectedRanges:get"><apiName>selectedRanges</apiName><shortdesc>
      Périodes sélectionnées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Périodes sélectionnées.
     
      <p>Cette propriété accepte un tableau d’objets en tant que paramètre. Chaque objet de ce tableau comporte deux objets de date : <codeph>rangeStart</codeph> et <codeph>rangeEnd</codeph>. La période située entre chaque jeu d’objets <codeph>rangeStart</codeph> et <codeph>rangeEnd</codeph> (inclus) est sélectionnée. Pour sélectionner un seul jour, définissez les deux objets <codeph>rangeStart</codeph> et <codeph>rangeEnd</codeph> sur la même date. Les valeurs de temps sont mises à zéro à partir de l’objet Date si elles existent.</p>
     
      <p>L’exemple suivant sélectionne les dates suivantes : 11 janvier 2006, la période allant du 23 janvier au 10 février 2006. </p>
     
      <p><codeph>selectedRanges="{[ {rangeStart: new Date(2006,0,11), rangeEnd: new Date(2006,0,11)}, {rangeStart:new Date(2006,0,23), rangeEnd: new Date(2006,1,10)} ]}"</codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:showToday:get"><apiName>showToday</apiName><shortdesc>
      Si la valeur est true, indique que la date d’aujourd’hui est mise en surbrillance dans le contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, indique que la date d’aujourd’hui est mise en surbrillance dans le contrôle DateChooser. La définition de cette propriété change l’apparence du contrôle DateChooser.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:yearNavigationEnabled:get"><apiName>yearNavigationEnabled</apiName><shortdesc>
      Permet de parcourir les années.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Permet de parcourir les années. Lorsque la valeur est <codeph>true</codeph>, un bouton vers le haut et le bas s’affiche à droite de l’année affichée. Vous pouvez utiliser ces boutons pour changer l’année en cours. Ces boutons apparaissent à gauche de l’année dans les langues où l’année vient après le mois dans le format de date.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:yearSymbol:get"><apiName>yearSymbol</apiName><shortdesc>
      Cette propriété est ajoutée à la fin de l’année affichée en haut du contrôle DateChooser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Cette propriété est ajoutée à la fin de l’année affichée en haut du contrôle DateChooser. Certaines langues, comme le japonais, ajoutent un symbole après l’année. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:ComboBox"><apiName>ComboBox</apiName><shortdesc>
  Le contrôle ComboBox contient une liste déroulante dans laquelle l’utilisateur peut sélectionner une valeur unique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  Objet textSelectedColor de la liste déroulante.
 
  </description>
<default>#2B333C
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  Objet textRollOverColor de la liste déroulante.
 
  </description>
<default>#2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style inherit="no" name="selectionEasingFunction" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Function">
<description>
  Objet selectionEasingFunction de la liste déroulante.
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style format="Time" inherit="no" name="selectionDuration" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  Objet selectionDuration de la liste déroulante.
 
  </description>
<default>250
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  Objet selectionColor de la liste déroulante.

  </description>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  Objet rollOverColor de la liste déroulante.

  </description>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure du contrôle et la partie supérieure de sa zone de contenu. Lorsque la propriété <codeph>editable</codeph> est définie sur <codeph>true</codeph>, les contrôles <codeph>paddingTop</codeph> et <codeph>paddingBottom</codeph> affectent la taille du contrôle ComboBox, mais pas la position de la zone de texte modifiable.
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure du contrôle et la partie inférieure de sa zone de contenu. Lorsque la propriété <codeph>editable</codeph> est définie sur <codeph>true</codeph>, les contrôles <codeph>paddingTop</codeph> et <codeph>paddingBottom</codeph> affectent la taille du contrôle ComboBox, mais pas la position de la zone de texte modifiable.
  
  </description>
<default>0 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Function">
<description>
  Fonction d’accélération permettant de contrôler la transition ouverte. Les fonctions d’accélération permettent de contrôler l’accélération et le ralentissement de la transition.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Longueur de la transition à l’ouverture de la liste déroulante, en millisecondes. La transition par défaut comporte la liste déroulante Glisser vers le bas du contrôle ComboBox.
 
  </description>
<default>250
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropdownStyleName" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  Nom d’une déclaration CSSStyleDeclaration utilisée par la liste déroulante. Cette propriété permet de contrôler l’apparence de la liste déroulante ou de ses rendus d’élément.
 
  </description>
<default>"comboDropdown"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="dropdownStyleName" inherit="no" name="dropDownStyleName" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  Nom d’une déclaration CSSStyleDeclaration utilisée par la liste déroulante. Cette propriété permet de contrôler l’apparence de la liste déroulante ou de ses rendus d’élément. [déconseillés]
 
  </description>
<default>"comboDropDown"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropdownBorderColor" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de la bordure du contrôle ComboBox. Si la valeur est <codeph>undefined</codeph>, la liste déroulante utilisera son style borderColor normal. Ce style est utilisé par les validateurs pour afficher le contrôle ComboBox dans un état d’erreur.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeEasingFunction" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Function">
<description>
  Fonction d’accélération permettant de contrôler la transition fermée. Les fonctions d’accélération permettent de contrôler l’accélération et le ralentissement de la transition.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="closeDuration" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Longueur de la transition à la fermeture de la liste déroulante, en millisecondes. La transition par défaut comporte la liste déroulante Glisser vers le haut du contrôle ComboBox.
 
  </description>
<default>250
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Epaisseur de la bordure de la liste déroulante, en pixels. Cette valeur est remplacée si vous définissez la propriété <codeph>borderThickness</codeph> lorsque vous configuez la déclaration CSSStyleDeclaration de la propriété <codeph>dropdownStyleName</codeph>. 
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="arrowButtonWidth" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Largeur du bouton fléché, en pixels.
  </description>
<default>22
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Array">
<description>
  Jeu des contrôles BackgroundColor des rangées de la liste déroulante en motif alterné. La valeur peut être un tableau de deux couleurs ou plus. Si la valeur est <codeph>undefined</codeph>, les rangées utilisent le style backgroundColor de la liste déroulante.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche du conteneur, en pixels.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:ComboBox" playerVersion="Flash10" type="Class">
<description>
  Classe implémentant l’occurrence IUITextField qui permet à ce composant de rendre le texte.
 
  <p>Elle peut être définie sur la classe mx.core.UITextField (pour utiliser la classe TextField classique intégrée à Flash Player) ou la classe mx.core.UITLFTextField (pour utiliser Text Layout Framework, qui permet d’améliorer le rendu du texte et d’obtenir notamment une mise en forme bidirectionnelle).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est souligné. Les valeurs possibles sont <codeph>"none"</codeph> et <codeph>"underline"</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  Alignement du texte au sein d’un conteneur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph> ou <codeph>"center"</codeph>.
 
  <p>La valeur par défaut de la plupart des composants est <codeph>"left"</codeph>. Pour le composant FormItem, la valeur par défaut est <codeph>"right"</codeph>. Pour les composants Button, LinkButton et AccordionHeader, la valeur par défaut est <codeph>"center"</codeph>. Cette propriété n’est reconnue que lorsque la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"left"</codeph> ou <codeph>"right"</codeph>. Si la propriété <codeph>labelPlacement</codeph> est définie sur <codeph>"top"</codeph> ou <codeph>"bottom"</codeph>, le texte et les icônes sont centrés.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:ComboBox" playerVersion="Flash10" type="String">
<description>
  
 
  <p/>
 
  <p><codeph/></p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels supplémentaires devant apparaître entre chaque caractère. Une valeur positive augmente l’espacement des caractères par rapport à l’espacement normal, alors qu’une valeur négative le réduit.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Boolean">
<description>
  Valeur booléenne indiquant si le crénage est activé (<codeph>true</codeph>) ou désactivé (<codeph>false</codeph>). Le crénage ajuste le pas entre certaines paires de caractères pour améliorer la lisibilité et ne doit être employé que si nécessaire, dans les titres en grande police, par exemple. Le crénage est supporté uniquement pour les polices incorporées. Certaines polices, telles que Verdana, et les polices à espacement fixe, telles que Courier New, ne prennent pas en charge le crénage.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte est en gras. Les valeurs reconnues sont <codeph>normal</codeph> et <codeph>bold</codeph>. La valeur par défaut du contrôle Button est <codeph>bold</codeph>. La valeur par défaut de tous les autres contrôles est <codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>thickness</codeph> des sous-contrôles TextField internes qui représentent le texte des contrôles Flex. Cette propriété spécifie l’épaisseur du contour des glyphes. Les nombres possibles vont de -200 à 200. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet sur les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  Détermine si le texte doit être en italique. Les valeurs reconnues sont <codeph>"normal"</codeph> et <codeph>"italic"</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Hauteur du texte, en pixels. La valeur par défaut est 10 pour tous les contrôles, à l’exception de ColorPicker. Pour le contrôle ColorPicker, la valeur par défaut est 11. 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Définit la propriété <codeph>sharpness</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Cette propriété spécifie la netteté du contour des glyphes. Les nombres possibles vont de -400 à 400. 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>gridFitType</codeph> des objets TextField internes représentant le texte dans les contrôles Flex. Les valeurs possibles sont <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) et <codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Cette propriété s’applique uniquement lorsque vous utilisez une police imbriquée et lorsque la propriété <codeph>fontAntiAliasType</codeph> est définie sur <codeph>"advanced"</codeph>.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
 
  <p>Ce style s’applique à l’ensemble du texte d’un sous-contrôle TextField. Vous ne pouvez pas l’appliquer uniquement à certains caractères et pas à d’autres.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  Nom de la police à utiliser. A la différence d’une implémentation CSS complète, les listes de valeurs séparées par des virgules ne sont pas prises en charge. Vous pouvez utiliser n’importe quel nom de famille de polices. Si vous spécifiez un nom de police générique, il est converti dans la police de périphérique appropriée.
 
  </description>
<default>"Verdana"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  Définit la propriété <codeph>antiAliasType</codeph> des objets TextField internes. Les valeurs possibles sont <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) et <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>La valeur par défaut est <codeph>"advanced"</codeph>, ce qui active l’anti-aliasing avancé de la police. Définissez la propriété sur <codeph>"normal"</codeph> pour désactiver l’anti-aliasing avancé.</p>
  
  <p>Ce style n’a aucun effet pour les polices système.</p>
  
  <p>Ce style s’applique à l’intégralité du texte d’un sous-contrôle TextField : vous ne pouvez pas l’appliquer à certains caractères seulement et non à d’autres.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant s’il est désactivé.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:ComboBox" playerVersion="Flash10" type="String">
<description>
  
 
  <p><codeph/><codeph/></p>
 
  <p/>
 
  <p><codeph/></p>
 
  <p><codeph/> </p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte dans le composant, y compris le libellé du composant.
 
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage de surbrillance des contrôles. La première valeur indique la transparencé du haut de la surbrillance et la seconde valeur indique la transparence du bas de la surbrillance. La surbrillance couvre la moitié supérieure de l’habillage.
  
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Couleurs utilisées pour teindre l’arrière-plan du contrôle. Transmettez la même couleur pour les deux valeurs d’un contrôle à l’aspect plat.
  
  </description>
<default>[ 0xFFFFFF, 0xCCCCCC ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Transparences Alpha utilisées pour le remplissage d’arrière-plan des contrôles. Utilisez la valeur [1, 1] pour rendre l’arrière-plan des contrôles opaque.
  
  </description>
<default>[ 0.6, 0.4 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Rayon des angles des composants. Les composants suivants prennent ce style en charge : Alert, Button, ComboBox, LinkButton, MenuBar, NumericStepper, Panel, ScrollBar, Tab, TitleWindow et tous les composants qui prennent en charge une propriété <codeph>borderStyle</codeph> définie sur <codeph>"solid"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de la bordure. Les contrôles suivants prennent ce style en charge : Button, CheckBox, ComboBox, MenuBar, NumericStepper, ProgressBar, RadioButton, ScrollBar, Slider et tous les composants qui prennent en charge le style <codeph>borderStyle</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0xB7BABC</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure droite du composant et le bord droit de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure gauche du composant et le bord gauche de sa zone de contenu.
  <p>La valeur par défaut est 0.</p>
  <p>La valeur par défaut d’un contrôle Button est 10.</p>
  <p>La valeur par défaut d’un contrôle ComboBox est 5.</p>
  <p>La valeur par défaut d’un conteneur Form est 16.</p>
  <p>La valeur par défaut d’un contrôle Tree est 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Espace vertical supplémentaire entre les lignes de texte.
 
  <p>La valeur par défaut est 2.</p>
  <p>La valeur par défaut du contrôle ComboBox est 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage désactivé. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox désactivé, par la classe ComboBoxSkin pour tracer la flèche vers le bas d’un contrôle ComboBox désactivé et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois d’un contrôle DateChooser désactivé. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x999999</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox, par la classe ComboBoxSkin pour tracer la flèche vers le bas du contrôle ComboBox et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois du contrôle DateChooser. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x111111</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  Indique quels coins du rectangle de focus doivent être arrondis. Cette valeur est une chaîne séparée par des espaces pouvant contenir toute combinaison de <codeph>"tl"</codeph>, <codeph>"tr"</codeph>, <codeph>"bl"</codeph> et <codeph>"br"</codeph>. Par exemple, pour indiquer que les coins du côté droit doivent être arrondis, mais que les coins du côté gauche doivent être carrés, utilisez <codeph>"tr br"</codeph>. La propriété de style <codeph>cornerRadius</codeph> indique le rayon des coins arrondis. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée pour la classe, la valeur par défaut est <codeph>"tl tr bl br"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  Indique la valeur de transparence Alpha de l’habillage du focus.
  
  </description>
<default>0.4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ComboBox&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:ComboBox
    <b>Properties</b>
    dataProvider="null"
    dropdownFactory="<i>ClassFactory that creates an mx.controls.List</i>"
    dropdownWidth="<i>100 or width of the longest text in the dataProvider</i>"
    itemRenderer="null"
    labelField="label"
    labelFunction="null"
    prompt="null"
    rowCount="5"
    selectedIndex="-1"
    selectedItem="null"
    
    <b>Styles</b>
    alternatingItemColors="undefined"
    arrowButtonWidth="22"
    borderColor="0xB7BABC"
    borderThickness="1"
    closeDuration="250"
    closeEasingFunction="undefined"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    disabledIconColor="0x919999"
    dropdownBorderColor="undefined"
    dropdownStyleName="comboDropdown"
    fillAlphas="[0.6,0.4]"
    fillColors="[0xFFFFFF, 0xCCCCCC]"
    focusAlpha="0.4"
    focusRoundedCorners="tl tr bl br"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|none|subpixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    highlightAlphas="[0.3,0.0]"
    iconColor="0x111111"
    leading="0"
    openDuration="250"
    openEasingFunction="undefined"
    paddingTop="0"
    paddingBottom="0"
    paddingLeft="5"
    paddingRight="5"
    rollOverColor="<i>Depends on theme color"</i>
    selectionColor="<i>Depends on theme color"</i>
    selectionDuration="250"
    selectionEasingFunction="undefined"
    textAlign="left|center|right"
    textDecoration="none|underline"
    textIndent="0"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x2B333C"
    
    <b>Events</b>
    change="<i>No default</i>"
    close="<i>No default</i>"
    dataChange="<i>No default</i>"
    enter="<i>No default</i>"
    itemRollOut="<i>No default</i>"
    itemRollOver="<i>No default</i>"
    open="<i>No default</i>"
    scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseClassifier>mx.controls:ComboBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle ComboBox contient une liste déroulante dans laquelle l’utilisateur peut sélectionner une valeur unique. Son fonctionnement est très proche de celui de l’élément de formulaire SELECT en HTML. Le contrôle ComboBox peut être modifié, auquel cas l’utilisateur peut taper des entrées qui ne se trouvent pas dans la liste dans la partie TextInput du contrôle ComboBox.
 
  <p>Le contrôle ComboBox possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Assez large pour accueillir l’entrée la plus longue de la liste déroulante de sur la zone d’affichage du contrôle principal, plus le bouton déroulant. Lorsque la liste déroulante n’est pas visible, la hauteur par défaut est basée sur la taille du texte de l’étiquette. 
 
               <p>La hauteur par défaut de la liste déroulante correspond à cinq rangées ou au nombre d’entrées dans la liste déroulante, selon ce qui est le plus petit. La hauteur par défaut de chaque entrée de la liste déroulante est de 22 pixels.</p></entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>5000 par 5000.</entry>
        </row><row>
           <entry>dropdownWidth</entry>
           <entry>Largeur du contrôle ComboBox.</entry>
        </row><row>
           <entry>rowCount</entry>
           <entry>5 rangées.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleComboBox.mxml"><swfblock conref="examples/SimpleComboBox.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="mx.controls:ComboBox_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Distribué lorsque l’utilisateur fait défiler la liste déroulante du contrôle ComboBox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur fait défiler la liste déroulante du contrôle ComboBox.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.DropdownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  Distribué lorsque l’utilisateur clique sur un bouton déroulant pour afficher la liste déroutante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.OPEN</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur clique sur un bouton déroulant pour afficher la liste déroutante. Il est également distribué si l’utilisateur utilise le clavier et les touches Ctrl et Bas pour ouvrir le menu déroulant.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.ListEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  Distribué lorsque l’utilisateur survole un élément de la liste déroulante avec la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur survole un élément de la liste déroulante avec la souris. La propriété <codeph>target</codeph> de l’objet événement contient une référence au contrôle ComboBox et non à la liste déroulante.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.ListEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  Distribué lorsque l’utilisateur cesse de survoler un élément de la liste déroulante avec la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur cesse de survoler un élément de la liste déroulante avec la souris. La propriété <codeph>target</codeph> de l’objet événement contient une référence au contrôle ComboBox et non à la liste déroulante.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  Distribué si la propriété editable est définie sur true et que l’utilisateur appuie sur la touche Entrée pendant qu’il tape du texte dans un champ de texte modifiable.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué si la propriété <codeph>editable</codeph> est définie sur <codeph>true</codeph> et que l’utilisateur appuie sur la touche Entrée pendant qu’il tape du texte dans un champ de texte modifiable.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
 
  <p>Lorsque vous utilisez un composant comme rendu d’élément, la propriété <codeph>data</codeph> contient un élément de l’objet dataProvider. Vous pouvez écouter cet événement et mettre à jour le composant lorsque la propriété <codeph>data</codeph> change.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.DropdownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Distribué lorsque la liste déroulante disparaît, par exemple lorsque l’utilisateur : sélectionne un élément de la liste déroulante, clique en dehors de la liste déroulante, clique sur le bouton déroulant alors que la liste déroulante est affichée, appuie sur la touche Echap alors que la liste déroulante est affichée.
  
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la liste déroulante disparaît, par exemple lorsque l’utilisateur :
  <ul>
      <li>sélectionne un élément dans la liste déroulante ;</li>
      <li>clique en dehors de la liste déroulante ;</li>
      <li>cliquez sur le bouton déroulant alors que la liste déroulante est affichée ;</li>
      <li>appuie sur la touche Echap alors que la liste déroulante est affichée.</li>
  </ul>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.ListEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque le contenu du contrôle ComboBox change à la suite d’une interaction de l’utilisateur, lorsque la propriété selectedIndex ou selectedItem change et, si le contrôle ComboBox est modifiable, à chaque fois qu’une séquence de touches est entrée dans la zone.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le contenu du contrôle ComboBox change à la suite d’une interaction de l’utilisateur, lorsque la propriété <codeph>selectedIndex</codeph> ou <codeph>selectedItem</codeph> change et, si le contrôle ComboBox est modifiable, à chaque fois qu’une séquence de touches est entrée dans la zone.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:ComboBox:ComboBox"><apiName>ComboBox</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:ComboBox:protected:calculatePreferredSizeFromData"><apiName>calculatePreferredSizeFromData</apiName><shortdesc>
      Détermine les valeurs par défaut de la hauteur et de la largeur à utiliser pour chaque entrée de la liste déroulante, en fonction de la taille maximale du texte d’étiquette dans les éléments numItems du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Objet contenant deux propriétés : largeur et hauteur.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>count</apiItemName><apiType value="int"/><apiDesc>Nombre d’éléments à vérifier pour déterminer la valeur.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine les valeurs par défaut de la hauteur et de la largeur à utiliser pour chaque entrée de la liste déroulante, en fonction de la taille maximale du texte d’étiquette dans les éléments <codeph>numItems</codeph> du fournisseur de données. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBox:close"><apiName>close</apiName><shortdesc>
      Masque la liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>trigger</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
      Masque la liste déroulante.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBox:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      Renvoie une chaîne représentant le paramètre item.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Objet contenant la valeur à convertir en étiquette. Si l’élément a la valeur null, cette méthode retourne la chaîne vide.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie une chaîne représentant le paramètre <codeph>item</codeph>.
      
      <p>Cette méthode recherche dans l’ordre suivant une valeur à renvoyer :</p>
      
      <ol>
        <li>Si vous avez spécifié une propriété <codeph>labelFunction</codeph>, le résultat de la transmission de l’élément à la fonction est retourné.</li>
        <li>Si l’élément est une chaîne, un nombre, un opérateur booléen ou une fonction, l’élément est retourné.</li>
        <li>Si l’élément a une propriété dont le nom est spécifié par la propriété <codeph>labelField</codeph> du contrôle, le contenu de la propriété est retourné.</li>
        <li>Si l’élément possède une propriété label, sa valeur est retournée.</li>
      </ol>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBox:protected:measure"><apiName>measure</apiName><shortdesc>
      Vérifiez que la largeur du contrôle est d’au moins 40 pixels, que sa hauteur est suffisante pour accueillir une ligne de texte dans la portion TextInput du contrôle et qu’elle est d’au moins 22 pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Vérifiez que la largeur du contrôle est d’au moins 40 pixels, que sa hauteur est suffisante pour accueillir une ligne de texte dans la portion TextInput du contrôle et qu’elle est d’au moins 22 pixels.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBox:open"><apiName>open</apiName><shortdesc>
      Affiche la liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Affiche la liste déroulante.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:ComboBox:data:get"><apiName>data</apiName><shortdesc>
      La propriété data permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      La propriété <codeph>data</codeph> vous permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
     
      <p>Le contrôle ComboBox utilise la propriété <codeph>listData</codeph> et la propriété <codeph>data</codeph> comme suit. Si le contrôle ComboBox se trouve dans un contrôle DataGrid, il s’attend à ce que la propriété <codeph>dataField</codeph> de la colonne s’associe à une propriété des données et définit la valeur <codeph>selectedItem</codeph> sur cette propriété. Si le contrôle ComboBox se trouve dans un contrôle List, il s’attend à ce que la propriété <codeph>labelField</codeph> de la liste s’associe à une propriété des données et définit la valeur <codeph>selectedItem</codeph> sur cette propriété. Sinon, il définit la valeur <codeph>selectedItem</codeph> sur les données elles-mêmes.</p>
     
      <p>Vous ne pouvez pas définir cette propriété dans MXML.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBox:protected:dropDownStyleFilters:get"><apiName>dropDownStyleFilters</apiName><shortdesc>
      Jeu de styles à transmettre du contrôle ComboBox au contrôle dropDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de styles à transmettre du contrôle ComboBox au contrôle dropDown. Les styles du style dropDownStyleName remplaceront ces styles.
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBox:dropdown:get"><apiName>dropdown</apiName><shortdesc>
      Référence au contrôle List qui agit comme liste déroulante dans le contrôle ComboBox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls.listClasses:ListBase</apiValueClassifier></apiValueDef><apiDesc>
      Référence au contrôle List qui agit comme liste déroulante dans le contrôle ComboBox.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:dropdownFactory:get"><apiName>dropdownFactory</apiName><shortdesc>
      Objet IFactory qui crée une occurrence dérivée de l’objet ListBase à utiliser comme liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      Objet IFactory qui crée une occurrence dérivée de l’objet ListBase à utiliser comme liste déroulante. La valeur par défaut est un objet IFactory de l’objet Liste
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:dropdownWidth:get"><apiName>dropdownWidth</apiName><shortdesc>
      Largeur de la liste déroulante, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Largeur de la liste déroulante, en pixels.
      <p>La valeur par défaut est 100 ou la largeur du texte le plus long dans la propriété <codeph>dataProvider</codeph>, selon ce qui est le plus important.</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      Objet IFactory qui génère les occurrences qui affichent les données de la liste déroulante du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      Objet IFactory qui génère les occurrences qui affichent les données de la liste déroulante du contrôle. Vous pouvez utiliser cette propriété pour spécifier un rendu d’élément personnalisé dans la liste déroulante.
     
      <p>Le contrôle utilise un contrôle List en interne pour créer la liste déroulante. Le rendu d’élément par défaut du contrôle List est la classe ListItemRenderer, qui trace le texte associé à chaque élément de la liste, ainsi qu’une icône facultative. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link><link href="mx.controls.listClasses.xml#ListItemRenderer"><linktext>mx.controls.listClasses.ListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBox:labelField:get"><apiName>labelField</apiName><shortdesc>
      Nom du champ des éléments dans le tableau dataProvider à afficher en tant qu’étiquette dans la portion TextInput de la liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Nom du champ des éléments dans le tableau <codeph>dataProvider</codeph> à afficher en tant qu’étiquette dans la portion TextInput de la liste déroulante. Par défaut, le contrôle utilise la propriété <codeph>label</codeph> sur chaque tableau et l’affiche.
      <p>Toutefois, si les éléments <codeph>dataProvider</codeph> ne contiennent pas de propriété <codeph>label</codeph>, vous pouvez définir la propriété <codeph>labelField</codeph> pour qu’elle utilise une autre propriété.</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer l’étiquette.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Fonction fournie par l’utilisateur à exécuter sur chaque élément pour en déterminer l’étiquette. Par défaut, le contrôle utilise une propriété appelée <codeph>label</codeph> sur chaque élément <codeph>dataProvider</codeph> pour en déterminer le libellé. Toutefois, certains jeux de données n’ont pas de propriété <codeph>label</codeph> ou ne disposent pas d’une autre propriété pouvant être utilisée en tant que libellé.
      <p>Un jeu de données présentant les champs <codeph>lastName</codeph> et <codeph>firstName</codeph> mais dont vous souhaitez afficher les noms complets en est un exemple. Utilisez la propriété <codeph>labelFunction</codeph> pour spécifier une fonction de rappel qui utilise les champs appropriés et renvoyer une chaîne affichable.</p>
     
      <p>La propriété labelFunction prend un unique argument correspondant à l’élément du fournisseur de données et retourne une chaîne :</p>
      <pre>
      myLabelFunction(item:Object):String
      </pre>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:listData:get"><apiName>listData</apiName><shortdesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété listData du composant avec les données appropriées du contrôle List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier></apiValueDef><apiDesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété <codeph>listData</codeph> du composant avec les données appropriées du contrôle List. Le composant peut ensuite utiliser la propriété <codeph>listData</codeph> et la propriété <codeph>data</codeph> pour afficher les informations appropriées sous forme de rendu d’élément supplémentaire ou d’éditeur d’élément supplémentaire.
     
      <p>Vous ne définissez pas cette propriété dans MXML ou ActionScript. Flex la définit lorsque le composant est utilisé comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBox:prompt:get"><apiName>prompt</apiName><shortdesc>
      Invite du contrôle ComboBox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Invite du contrôle ComboBox. Une invite est une chaîne qui s’affiche dans la portion TextInput du contrôle ComboBox lorsque <codeph>selectedIndex</codeph> = -1. La chaîne ressemble généralement à « Sélectionnez un... ». Si aucune invite n’existe, le contrôle ComboBox définit la propriété <codeph>selectedIndex</codeph> sur 0 et affiche le premier élément de la propriété <codeph>dataProvider</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:rowCount:get"><apiName>rowCount</apiName><shortdesc>
      Nombre maximale de rangées visibles dans la liste du contrôle ComboBox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre maximale de rangées visibles dans la liste du contrôle ComboBox. Si moins d’éléments sont présents dans l’objet dataProvider, le contrôle ComboBox affiche uniquement le nombre d’éléments correspondant à ceux présents dans l’objet dataProvider.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:selectedLabel:get"><apiName>selectedLabel</apiName><shortdesc>
      Chaîne affichée dans la portion TextInput du contrôle ComboBox.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Chaîne affichée dans la portion TextInput du contrôle ComboBox. Elle est calculée à partir des données à l’aide de la propriété <codeph>labelField</codeph> ou <codeph>labelFunction</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:dataProvider:set"><apiName>dataProvider</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:selectedIndex:set"><apiName>selectedIndex</apiName><shortdesc>
      Index de l’élément sélectionné dans la liste déroulante.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Index de l’élément sélectionné dans la liste déroulante. Définir cette propriété permet de définir l’index actuel et d’afficher l’étiquette associée dans la portion TextInput.
      <p>La valeur par défaut est -1, mais elle est définie sur 0 lorsqu’un objet <codeph>dataProvider</codeph> est affecté, sauf si une invite existe. Si le contrôle est modifiable et si l’utilisateur utilise la portion TextInput, la valeur de la propriété <codeph>selectedIndex</codeph> devient -1. Si la valeur de la propriété <codeph>selectedIndex</codeph> se trouve hors plage, la propriété <codeph>selectedIndex</codeph> est définie sur le dernier élément de l’objet <codeph>dataProvider</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:selectedItem:set"><apiName>selectedItem</apiName><shortdesc>
      Contient une référence à l’élément sélectionné dans l’objet dataProvider.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Contient une référence à l’élément sélectionné dans l’objet <codeph>dataProvider</codeph>. Si les données sont un objet ou une occurrence de classe, modifier les propriétés de l’objet ou de l’occurrence modifie l’objet <codeph>dataProvider</codeph> et donc ses vues. La définition de la propriété selectedItem elle-même provoque la sélection par le contrôle ComboBox de cet élément (l’affiche dans la portion TextInput et définit la propriété selectedIndex) s’il se trouve dans l’objet dataProvider.
      <p>Si le contrôle ComboBox est modifiable, la propriété <codeph>selectedItem</codeph> est définie sur <codeph>null</codeph> si l’utilisateur entre du texte dans la portion TextInput. Elle n’a de valeur que si l’utilisateur sélectionne un élément dans la liste déroulante, ou si elle est définie par programme.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:Image"><apiName>Image</apiName><shortdesc>
  Le contrôle Image permet d’importer des fichiers JPEG, PNG, GIF et SWF au moment de l’exéuction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:Image&gt;</code> tag inherits the tag attributes of its superclass,  
  and adds the following tag attribute:</p>
 
  <pre>
  &lt;mx:Image
    <strong>Events</strong>
    dataChange="No default"
  /&gt
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseClassifier>mx.controls:SWFLoader</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle Image permet d’importer des fichiers JPEG, PNG, GIF et SWF au moment de l’exéuction. Vous pouvez également incorporer ces fichiers et les fichiers SVG lors de la compilation à l’aide de la méthode <codeph>@Embed(source=’filename’)</codeph>.
 
  <p><b>Remarque : </b>Flex comprend également le contrôle SWFLoader pour charger les applications Flex. Le contrôle Image s’utilise généralement pour charger des fichiers graphiques statiques et des fichiers SWF et le contrôle SWFLoader pour charger les applications Flex. Le contrôle Image est également conçu pour être utilisé dans les rendus d’élément et les éditeurs d’élément personnalisés. </p>
 
  <p>Les images incorporées se chargent immédiatement, car elles font déjà partie du fichier SWF Flex. Toutefois, elles augmentent la taille de votre application et ralentissent l’initialisation de l’application. Les images incorporées demandent également que vous recompiliez vos applications à chaque fois que vos fichiers d’image changent.</p> 
  
  <p>Pour ne pas incorporer une ressource, vous pouvez la charger au moment de l’exécution. Vous pouvez charger une ressource à partir du système de fichiers local dans lequel s’exécute le fichier SWF ou accéder à une ressource distante, en général via une requête HTTP sur un réseau. Ces images ne dépendent pas de votre application Flex, vous pouvez donc les modifier sans provoquer de recompilation tant que les noms des images modifiées restent les mêmes. Les images référencées n’augmentent pas le temps de chargement initial d’une application. Toutefois, vous pouvez rencontrer un délai lorsque vous utilisez les images et les chargez dans Flash Player ou AIR. </p>
  
  <p>Un fichier SWF peut accéder à un type de ressource externe uniquement, qu’il soit local ou sur un réseau. Il ne peut pas accéder aux deux types. Vous déterminez le type d’accès autorisé par le fichier SWF à l’aide de l’indicateur <codeph>use-network</codeph> lorsque vous compilez votre application. Lorsque l’indicateur <codeph>use-network</codeph> est défini sur <codeph>false</codeph>, vous pouvez accéder aux ressources du système de fichiers local, mais pas sur le réseau. La valeur par défaut est <codeph>true</codeph>, ce qui permet d’accéder aux ressources sur le réseau, mais pas dans le système de fichiers local. </p>
  
  <p>Lorsque vous chargez des images au moment de l’exécution, vous devez prendre en compte les restrictions de sécurité de Flash Player ou AIR. Par exemple, dans Flash Player, vous pouvez charger une image depuis tout domaine à l’aide d’une URL, mais les paramètres de sécurité par défaut ne permettront pas à votre code d’accéder aux données bitmap des images sauf si elles proviennent du même domaine que l’application. Pour accéder aux données bitmap d’images sur d’autres serveurs, vous devez utiliser un fichier crossdomain.xml. </p>
 
  <p>Les formats PNG et GIF prennent également en charge l’utilisation d’une couche alpha pour créer des images transparentes.</p>
 
  <p>Lorsque vous utilisez le contrôle Image comme rendu d’élément supplémentaire dans un contrôle List, définissez une hauteur de rangée explicite du contrôle List, à l’aide de la propriété <codeph>rowHeight</codeph>, ou définissez la propriété <codeph>variableRowHeight</codeph> du contrôle List sur <codeph>true</codeph> pour dimensionner correctement la rangée.</p>
 
  <p>Si vous rencontrez des problèmes de mémoire liés aux objets Images, essayez de définir explicitement la propriété <codeph>source</codeph> sur null lorsque vous avez terminé d’utiliser l’objet Image dans votre application.</p>
  
  </apiDesc><example conref="SimpleImage.mxml"><swfblock conref="examples/SimpleImage.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#SWFLoader"><linktext>mx.controls.SWFLoader</linktext></link></related-links><adobeApiEvent id="mx.controls:Image_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Distribué lorsque la propriété data change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>data</codeph> change.
 
  <p>Lorsque vous utilisez un composant comme rendu d’élément, la propriété <codeph>data</codeph> contient les données à afficher. Vous pouvez écouter cet événement et mettre à jour le composant lorsque la propriété <codeph>data</codeph> change.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:Image:Image"><apiName>Image</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:Image:data:get"><apiName>data</apiName><shortdesc>
      La propriété data permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      La propriété <codeph>data</codeph> vous permet de transmettre une valeur au composant lorsque vous l’utilisez dans un rendu d’élément ou un éditeur d’élément. Vous utilisez généralement la liaison des données pour lier un champ de la propriété <codeph>data</codeph> à une propriété de ce composant.
     
      <p>Lorsque vous utilisez le contrôle comme rendu d’élément supplémentaire, Flex utilise la propriété <codeph>listData.label</codeph>, si elle existe, comme valeur de la propriété <codeph>source</codeph> de ce contrôle, ou utilise la propriété <codeph>data</codeph> comme propriété <codeph>source</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:Image:listData:get"><apiName>listData</apiName><shortdesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété listData du composant avec les données appropriées du contrôle List.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Lorsqu’un composant est utilisé en tant que rendu d’élément supplémentaire ou éditeur d’élément supplémentaire, Flex initialise la propriété <codeph>listData</codeph> du composant avec les données appropriées du contrôle List. Le composant peut ensuite utiliser la propriété <codeph>listData</codeph> pour initialiser les autres propriétés data du rendu d’élément supplémentaire.
     
      <p>Vous ne définissez pas cette propriété dans MXML ou ActionScript. Flex la définit lorsque le composant est utilisé comme rendu d’élément supplémentaire ou éditeur d’élément supplémentaire.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:HSlider"><apiName>HSlider</apiName><shortdesc>	
  Le contrôle HSlider permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="direction"/><Alternative owner="mx.controls:HSlider" replacement="spark.components.HSlider" since="4.0">
	</Alternative><styles><style enumeration="left,top,right,bottom" inherit="no" name="dataTipPlacement" owner="mx.controls:HSlider" playerVersion="Flash9" type="String">
<description>
  Emplacement de l’astuce sur les données par rapport au curseur. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"right"</codeph>, <codeph>"top"</codeph> et <codeph>"bottom"</codeph>.
 
  </description>
<default>"top"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:HSlider&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attribute:</p>
 
  <pre>
  &lt;mx:HSlider
    <strong>Styles</strong>
    dataTipPlacement="top"
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.sliderClasses:Slider</apiBaseClassifier></apiClassifierDef><apiDesc>	
  Le contrôle HSlider permet à l’utilisateur de sélectionner une valeur en déplaçant le curseur entre les extrémités du rail. La valeur actuelle du curseur est déterminée par son emplacement relatif entre ses extrémités, ce qui correspond aux valeurs minimum et maximum du curseur.
 
  <p>Le curseur peut autoriser une plage continue de valeurs entre ses valeurs minimales et maximales, ou être limité à des valeurs à intervalles spécifiques entre la valeur minimale et maximale. Des coches peuvent s’afficher aux intervalles spécifiés le long du rail. Ces coches sont indépendantes des valeurs autorisées du curseur. Le curseur peut également utiliser une astuce sur les données pour afficher sa valeur actuelle.</p>
  	
  <p>Le contrôle HSlider est horizontal. Le rail du curseur s’étire de gauche à droite et les étiquettes et coches sont placées en haut ou en bas du rail.</p>
  
  <p>Le contrôle HSlider possède les caractéristiques par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>250 pixels de largeur et assez haut pour contenir le curseur et ses étiquettes associées</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Aucun</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>Aucun</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleImageHSlider.mxml"><swfblock conref="examples/SimpleImageHSlider.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#VSlider"><linktext>mx.controls.VSlider</linktext></link><link href="mx.controls.sliderClasses.xml#Slider"><linktext>mx.controls.sliderClasses.Slider</linktext></link><link href="mx.controls.sliderClasses.xml#SliderThumb"><linktext>mx.controls.sliderClasses.SliderThumb</linktext></link><link href="mx.controls.sliderClasses.xml#SliderDataTip"><linktext>mx.controls.sliderClasses.SliderDataTip</linktext></link><link href="mx.controls.sliderClasses.xml#SliderLabel"><linktext>mx.controls.sliderClasses.SliderLabel</linktext></link></related-links><apiConstructor id="mx.controls:HSlider:HSlider"><apiName>HSlider</apiName><shortdesc>
	  Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Constructeur.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:DataGrid"><apiName>DataGrid</apiName><shortdesc>
  Le contrôle DataGrid ressemble à un contrôle List, mais il peut afficher plusieurs colonnes de données, ce qui le rend approprié pour afficher des objets dotés de plusieurs propriétés.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="cornerRadius"/><Exclude kind="property" name="showDataTips"/><Exclude kind="property" name="offscreenExtraRowsOrColumnsChanged"/><Exclude kind="property" name="offscreenExtraColumnsRight"/><Exclude kind="property" name="offscreenExtraColumnsLeft"/><Exclude kind="property" name="offscreenExtraColumns"/><Exclude kind="property" name="offscreenExtraRowsBottom"/><Exclude kind="property" name="offscreenExtraRowsTop"/><Exclude kind="property" name="offscreenExtraRows"/><Exclude kind="property" name="offscreenExtraRowsOrColumns"/><Exclude kind="property" name="labelField"/><Exclude kind="property" name="iconFunction"/><Exclude kind="property" name="iconField"/><Exclude kind="property" name="columnCount"/><DefaultProperty name="dataProvider"/><styles><style inherit="no" name="headerDragProxyStyleName" owner="mx.controls:DataGrid" playerVersion="Flash9" type="String">
<description>
  Nom d’une déclaration de style CSS pour le contrôle des aspects de l’apparence d’une colonne lorsque l’utilisateur la fait glisser ailleurs.
 
  </description>
<default>"headerDragProxyStyle"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnDropIndicatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  Classe à utiliser comme habillage pour indiquer qu’une colonne peut être déposée dans l’emplacement en cours.
 
  </description>
<default>mx.skins.halo.DataGridColumnDropIndicator
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stretchCursor" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  Classe à utiliser comme habillage pour le curseur qui indique qu’une colonne peut être redimensionnée. La valeur par défaut est le symbole « cursorStretch » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="sortArrowSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  Classe à utiliser comme habillage pour la flèche qui indique le sens de tri des colonnes.
  </description>
<default>mx.skins.halo.DataGridSortArrow
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalLockedSeparatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  Classe à utiliser comme habillage qui définit l’apparence du séparateur entre les colonnes verrouillées et dévérrouillées d’un contrôle DataGrid. Par défaut, le contrôle DataGrid utilise les méthodes <codeph>drawHorizontalLine()</codeph> et <codeph>drawVerticalLine()</codeph> pour tracer les séparateurs.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalSeparatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  Classe à utiliser comme habillage qui définit l’apparence des séparateurs entre les colonnes d’un contrôle DataGrid. Par défaut, le contrôle DataGrid utilise les méthodes <codeph>drawHorizontalLine()</codeph> et <codeph>drawVerticalLine()</codeph> pour tracer les séparateurs.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalLockedSeparatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  Classe à utiliser comme habillage qui définit l’apparence du séparateur entre les rangées verrouillées et dévérrouillées d’un contrôle DataGrid. Par défaut, le contrôle DataGrid utilise les méthodes <codeph>drawHorizontalLine()</codeph> et <codeph>drawVerticalLine()</codeph> pour tracer les séparateurs.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalSeparatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  Classe à utiliser comme habillage qui définit l’apparence du séparateur entre les rangées d’un contrôle DataGrid. Par défaut, le contrôle DataGrid utilise les méthodes <codeph>drawHorizontalLine()</codeph> et <codeph>drawVerticalLine()</codeph> pour tracer les séparateurs.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerSeparatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  Classe à utiliser comme habillage qui définit l’apparence du séparateur entre les en-têtes de colonne d’un contrôle DataGrid.
  </description>
<default>mx.skins.halo.DataGridHeaderSeparator
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerBackgroundSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  Classe à utiliser comme habillage qui définit l’apparence de l’arrière-plan des en-têtes de colonne d’un contrôle DataGrid.
  </description>
<default>mx.skins.halo.DataGridHeaderBackgroundSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnResizeSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  Classe à utiliser comme habillage pour une colonne en cours de redimensionnement.
  </description>
<default>mx.skins.halo.DataGridColumnResizeSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerStyleName" owner="mx.controls:DataGrid" playerVersion="Flash9" type="String">
<description>
  Nom d’une déclaration de style CSS permettant de contrôler d’autres aspects de l’apparence des en-têtes de colonne.
  </description>
<default>"dataGridStyles"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:DataGrid" playerVersion="Flash9" type="uint">
<description>
  Couleur d’arrière-plan de la rangée lorsque l’utilisateur sélectionne un rendu d’élément dans la rangée.
  </description>
<default>0x7FCEFF
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:DataGrid" playerVersion="Flash9" type="uint">
<description>
  Couleur de l’arrière-plan de la rangée lorsque l’utilisateur la survole avec sa souris.
  </description>
<default>0xB2E1FF
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="headerColors" owner="mx.controls:DataGrid" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Tableau de deux couleurs utilisé pour tracer le dégradé d’arrière-plan de l’en-tête. La première couleur est la couleur supérieure. La seconde couleur est la couleur inférieure.
  </description>
<default>[0xFFFFFF, 0xE6E6E6]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="horizontalGridLineColor" owner="mx.controls:DataGrid" playerVersion="Flash9" type="uint">
<description>
  Couleur des lignes horizontales de la grille.
 </description>
<default>0xF7F7F7
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="verticalGridLineColor" owner="mx.controls:DataGrid" playerVersion="Flash9" type="uint">
<description>
  Couleur des lignes verticales de la grille.
  </description>
<default>0xCCCCCC
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalGridLines" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Boolean">
<description>
  Indicateur précisant si les lignes horizontales de la grille doivent s’afficher entre les rangées. Si la valeur est <codeph>true</codeph>, les lignes horizontales de la grille apparaissent. Si la valeur est <codeph>false</codeph>, les lignes horizontales de la grille sont masquées.
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalGridLines" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Boolean">
<description>
  Indicateur précisant si les lignes verticales de la grille doivent s’afficher entre les colonnes. Si la valeur est <codeph>true</codeph>, les lignes verticales de la grille apparaissent. Si la valeur est <codeph>false</codeph>, les lignes verticales de la grille sont masquées.
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="defaultDataGridItemRenderer" owner="mx.controls:DataGrid" playerVersion="Flash10" type="Class">
<description>
  Nom de la classe de la propriété itemRenderer à utiliser si aucune propriété n’est spécifiée pour une colonne ou son en-tête. C’est un moyen permettant de définir une propriété itemRenderer d’un groupe de classes DataGrid au lieu d’avoir à définir chaque élément individuellement. Si vous définissez la propriété itemRenderer du composant DataGrid, elle remplace cette valeur.
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="defaultDataGridItemEditor" owner="mx.controls:DataGrid" playerVersion="Flash10" type="Class">
<description>
    
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:DataGrid" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage désactivé. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox désactivé, par la classe ComboBoxSkin pour tracer la flèche vers le bas d’un contrôle ComboBox désactivé et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois d’un contrôle DateChooser désactivé. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x999999</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:DataGrid" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’icône dans un habillage. Par exemple, ce style est utilisé par la classe d’habillage CheckBoxIcon pour tracer la coche d’un contrôle CheckBox, par la classe ComboBoxSkin pour tracer la flèche vers le bas du contrôle ComboBox et par la classe d’habillage DateChooserMonthArrowSkin pour tracer la flèche du mois du contrôle DateChooser. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0x111111</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  <p>
  The <code>&lt;mx:DataGrid&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except for <code>labelField</code>, 
  <code>iconField</code>, and <code>iconFunction</code>, and adds the 
  following tag attributes:
  </p>
  <pre>
  &lt;mx:DataGrid
    <b>Properties</b>
    columns="<i>From dataProvider</i>"
    draggableColumns="true|false"
    editable="false|true"
    editedItemPosition="<code>null</code>"
    horizontalScrollPosition="null"
    imeMode="null"
    itemEditorInstance="null"
    minColumnWidth="<code>NaN</code>"
    resizableColumns="true|false"
    sortableColumns="true|false"
    
    <b>Styles</b>
    backgroundDisabledColor="0xEFEEEF"
    columnDropIndicatorSkin="DataGridColumnDropIndicator"
    columnResizeSkin="DataGridColumnResizeSkin"
    disabledIconColor="0x999999"
    headerColors="[#FFFFFF, #E6E6E6]"
    headerDragProxyStyleName="headerDragProxyStyle"
    headerSeparatorSkin="DataGridHeaderSeparator"
    headerStyleName="dataGridStyles"
    horizontalGridLineColor="0xF7F7F7"
    horizontalGridLines="false|true"
    horizontalLockedSeparatorSkin="undefined"
    horizontalSeparatorSkin="undefined"
    iconColor="0x111111"
    rollOverColor="0xB2E1FF"
    selectionColor="0x7FCEFF"
    sortArrowSkin="DataGridSortArrow"
    stretchCursor="<i>"cursorStretch" symbol from the Assets.swf file</i>"
    verticalGridLineColor="0xCCCCCC"
    verticalGridLines="false|true"
    verticalLockedSeparatorSkin="undefined"
    verticalSeparatorSkin="undefined"
     
    <b>Events</b>
    columnStretch="<i>No default</i>"
    headerRelease="<i>No default</i>"
    headerShift="<i>No default</i>"
    itemEditBegin="<i>No default</i>"
    itemEditBeginning="<i>No default</i>" 
    itemEditEnd="<i>No default</i>"
    itemFocusIn="<i>No default</i>"
    itemFocusOut="<i>No default</i>"
  /&gt;
   
  <b>The following DataGrid code sample specifies the column order:</b>
  &lt;mx:DataGrid&gt;
    &lt;mx:dataProvider&gt;
        &lt;mx:Object Artist="Pavement" Price="11.99"
          Album="Slanted and Enchanted"/&gt;
        &lt;mx:Object Artist="Pavement"
          Album="Brighten the Corners" Price="11.99"/&gt;
    &lt;/mx:dataProvider&gt;
    &lt;mx:columns&gt;
        &lt;mx:DataGridColumn dataField="Album"/&gt;
        &lt;mx:DataGridColumn dataField="Price"/&gt;
    &lt;/mx:columns&gt;
  &lt;/mx:DataGrid&gt;
  </pre>
  </p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>mx.controls.dataGridClasses:DataGridBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle <codeph>DataGrid</codeph> ressemble à un contrôle List, mais il peut afficher plusieurs colonnes de données, ce qui le rend approprié pour afficher des objets dotés de plusieurs propriétés.
  <p>
  Le contrôle DataGrid offre les fonctionnalités suivantes :
  <ul>
  <li>Colonnes de largeur variable ou fixe</li>
  <li>Colonnes que l’utilisateur peut redimensionner </li>
  <li>Colonnes que l’utilisateur peut réorganiser </li>
  <li>En-têtes de colonne personnalisables en option</li>
  <li>Possibilité d’utiliser un rendu d’élément personnalisé pour les colonnes dans le but d’afficher des données autres que de type texte.</li>
  <li>Prise en charge du tri des données en cliquant sur une colonne.</li>
  </ul>
  </p>
  Le contrôle DataGrid est destiné à l’affichage des données. Il ne s’agit pas d’un outil de mise en forme, tel qu’un tableau HTML. Le package mx.containers fournit ces outils de mise en forme.
  
  <p>Le contrôle DataGrid possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>Si les colonnes sont vides, la largeur par défaut est de 300 pixels. Si les colonnes contiennent des informations, mais qu’elles ne définissent aucune largeur spécifique, la largeur par défaut est de 100 pixels par colonne. La largeur du contrôle DataGrid est adaptée à la largeur de toutes les colonnes, si possible. Le nombre par défaut de rangées affichées, y compris l’en-tête, est de 7. Chaque rangée, par défaut, a une hauteur de 20 pixels.
           </entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>0 pixel.</entry>
        </row><row>
           <entry>Taille minimale</entry>
           <entry>5000 par 5000.</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleDataGrid.mxml"><swfblock conref="examples/SimpleDataGrid.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.dataGridClasses.xml#DataGridItemRenderer"><linktext>mx.controls.dataGridClasses.DataGridItemRenderer</linktext></link><link href="mx.controls.dataGridClasses.xml#DataGridColumn"><linktext>mx.controls.dataGridClasses.DataGridColumn</linktext></link><link href="mx.controls.dataGridClasses.xml#DataGridDragProxy"><linktext>mx.controls.dataGridClasses.DataGridDragProxy</linktext></link><link href="mx.events.xml#DataGridEvent"><linktext>mx.events.DataGridEvent</linktext></link></related-links><adobeApiEvent id="mx.controls:DataGrid_mx.events.IndexChangedEvent.HEADER_SHIFT_headerShift"><apiName>headerShift</apiName><shortdesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris sur un en-tête de colonne après avoir fait glissé la colonne vers un nouvel emplacement, ce qui a provoqué le déplacement de la colonne sur un nouvel index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.HEADER_SHIFT</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris sur un en-tête de colonne après avoir fait glissé la colonne vers un nouvel emplacement, ce qui a provoqué le déplacement de la colonne sur un nouvel index.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.HEADER_RELEASE_headerRelease"><apiName>headerRelease</apiName><shortdesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris sur un en-tête de colonne pour demander que le controle trie le contenu de la grille en fonction du contenu de la colonne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.HEADER_RELEASE</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris sur un en-tête de colonne pour demander que le controle trie le contenu de la grille en fonction du contenu de la colonne. Distribué uniquement si la colonne peut être triée et si le fournisseur de données prend le tri en charge. Le contrôle DataGrid a un gestionnaire par défaut pour cet événement, qui implémente le tri d’une seule colonne. Le tri de plusieurs colonnes peut être implémenté en appelant la méthode <codeph>preventDefault()</codeph> pour empêcher le tri d’une seule colonne et en définissant la propriété <codeph>sort</codeph> du fournisseur de données.
 <p>
 <b>Remarque </b>: les flèches de tri sont définies par le gestionnaire d’événement par défaut de l’événement headerRelease. Si vous appelez la méthode <codeph>preventDefault()</codeph> dans votre gestionnaire d’événement, les flèches ne sont pas tracées.
 </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.COLUMN_STRETCH_columnStretch"><apiName>columnStretch</apiName><shortdesc>
  Distribué lorsqu’un utilisateur change la largeur d’une colonne, ce qui indique que la quantité des données affichées dans cette colonne a peut-être changé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.COLUMN_STRETCH</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un utilisateur change la largeur d’une colonne, ce qui indique que la quantité des données affichées dans cette colonne a peut-être changé. Si la propriété <codeph>horizontalScrollPolicy</codeph> est définie sur <codeph>"off"</codeph>, les autres colonnes sont réduites ou développées pour compenser le redimensionnement de la colonne. Elles distribuent également cet événement.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_FOCUS_OUT_itemFocusOut"><apiName>itemFocusOut</apiName><shortdesc>
  Distribué lorsqu’un rendu d’élément perd le focus, ce qui peut se produire lorsque l’utilisateur clique sur un autre élément du contrôle DataGrid, clique à l’extérieur du contrôle, ou utilise le clavier pour accéder à un autre élément du contrôle DataGrid ou hors du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_FOCUS_OUT</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un rendu d’élément perd le focus, ce qui peut se produire lorsque l’utilisateur clique sur un autre élément du contrôle DataGrid, clique à l’extérieur du contrôle, ou utilise le clavier pour accéder à un autre élément du contrôle DataGrid ou hors du contrôle. Distribué uniquement si l’élément est modifiable.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_FOCUS_IN_itemFocusIn"><apiName>itemFocusIn</apiName><shortdesc>
  Distribué lorsqu’un rendu d’élément reçoit le focus, ce qui peut se produire lorsque l’utilisateur clique sur un élément du contrôle DataGrid ou accède à l’élément à l’aide du clavier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_FOCUS_IN</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un rendu d’élément reçoit le focus, ce qui peut se produire lorsque l’utilisateur clique sur un élément du contrôle DataGrid ou accède à l’élément à l’aide du clavier. Distribué uniquement si l’élément est modifiable.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_EDIT_END_itemEditEnd"><apiName>itemEditEnd</apiName><shortdesc>
  Distribué lorsqu’une session de modification d’élément se termine pour une raison quelconque.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_EDIT_END</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’une session de modification d’élément se termine pour une raison quelconque.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_EDITOR_CREATE_itemEditorCreate"><apiName>itemEditorCreate</apiName><shortdesc>
  Distribué lorsque l’éditeur d’élément a été instancié.</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_EDITOR_CREATE</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’éditeur d’élément a été instancié.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_EDIT_BEGIN_itemEditBegin"><apiName>itemEditBegin</apiName><shortdesc>
  Distribué lorsque la propriété editedItemPosition a été définie et que l’élément peut être modifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_EDIT_BEGIN</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la propriété <codeph>editedItemPosition</codeph> a été définie et que l’élément peut être modifié.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_EDIT_BEGINNING_itemEditBeginning"><apiName>itemEditBeginning</apiName><shortdesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris alors qu’il survole un rendu d’élément, accède au contrôle DataGrid ou entre dans le contrôle DataGrid avec la touche de tabulation ou tente de toute autre manière de modifier un élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_EDIT_BEGINNING</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’utilisateur relâche le bouton de la souris alors qu’il survole un rendu d’élément, accède au contrôle DataGrid ou entre dans le contrôle DataGrid avec la touche de tabulation ou tente de toute autre manière de modifier un élément.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:DataGrid:DataGrid"><apiName>DataGrid</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:DataGrid:protected:adjustListContent"><apiName>adjustListContent</apiName><shortdesc>
      Appelé par la méthode updateDisplayList() pour ajuster la taille et la position de l’objet listContent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>Largeur du contrôle listContent. Cette valeur ignore les changements apportés à la largeur par des composants ou paramètres externes.
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>Hauteur du contrôle listContent. Cette valeur ignore les changements apportés à la hauteur par des composants ou paramètres externes.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé par la méthode <codeph>updateDisplayList()</codeph> pour ajuster la taille et la position de l’objet listContent.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:clearSeparators"><apiName>clearSeparators</apiName><shortdesc>
      Supprime les séparateurs d’en-têtes de colonne que l’utilisateur utilise généralement pour redimensionner les colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Supprime les séparateurs d’en-têtes de colonne que l’utilisateur utilise généralement pour redimensionner les colonnes.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:createItemEditor"><apiName>createItemEditor</apiName><shortdesc>
      Crée l’éditeur d’élément pour le rendu d’élément au niveau de editedItemPosition en utilisant l’éditeur désigné par la propriété itemEditor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>colIndex</apiItemName><apiType value="int"/><apiDesc>Index de la colonne dans le fournisseur de données de l’élément à modifier.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Index de la ligne dans le fournisseur de données de l’élément à modifier.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée l’éditeur d’élément pour le rendu d’élément au niveau de <codeph>editedItemPosition</codeph> en utilisant l’éditeur désigné par la propriété <codeph>itemEditor</codeph>.
     
      <p>Cette méthode définit l’occurrence de l’éditeur sous forme de propriété <codeph>itemEditoroccurrence</codeph>.</p>
     
      <p>Vous ne pouvez appeler cette méthode que de l’intérieur de l’écouteur d’événements pour l’événement <codeph>itemEditBegin</codeph>. Pour créer un éditeur à d’autres moments, définissez la propriété <codeph>editedItemPosition</codeph> pour générer l’événement <codeph>itemEditBegin</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:deriveComplexFieldReference"><apiName>deriveComplexFieldReference</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>complexFieldNameComponents</apiItemName><apiType value="Array"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:destroyItemEditor"><apiName>destroyItemEditor</apiName><shortdesc>
      Cette méthode ferme l’éditeur d’élément actuellement ouvert sur un rendu d’élément.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Cette méthode ferme l’éditeur d’élément actuellement ouvert sur un rendu d’élément. Vous n’appelez généralement cette méthode que de l’intérieur de l’écouteur d’événements pour l’événement <codeph>itemEditEnd</codeph>, après avoir déjà appelé la méthode <codeph>preventDefault()</codeph> pour empêcher l’exécution de l’écouteur d’événements par défaut.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawColumnBackground"><apiName>drawColumnBackground</apiName><shortdesc>
      Trace l’arrière-plan d’une colonne avec la couleur suggéréé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>Objet Sprite qui contiendra un objet d’affichage doté des graphiques de cette colonne.
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>Index de la colonne dans le jeu des colonnes affichées. La colonne visible la plus à gauche possède l’index de colonne 0. Ceci est utile pour suivre les objets utilisés pour tracer les arrière-plans. Ainsi, une colonne donnée peut réutiliser le même objet d’affichage même si l’index du contrôle DataGridColumn de cette colonne a changé.
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Couleur suggérée pour l’indicateur
     
      </apiDesc></apiParam><apiParam><apiItemName>column</apiItemName><apiOperationClassifier>mx.controls.dataGridClasses:DataGridColumn</apiOperationClassifier><apiDesc>Colonne du contrôle DataGrid pour laquelle vous tracez l’arrière-plan.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Trace l’arrière-plan d’une colonne avec la couleur suggéréé. Cette implémentation crée une forme sous forme d’enfant de l’objet Sprite saisi et la remplit de la couleur appropriée.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawHeaderBackground"><apiName>drawHeaderBackground</apiName><shortdesc>
      Trace l’arrière-plan des en-têtes dans l’objet UIComponent donné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>headerBG</apiItemName><apiOperationClassifier>mx.core:UIComponent</apiOperationClassifier><apiDesc>Objet UIComponent qui contiendra les graphiques d’arrière-plan des en-têtes.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Trace l’arrière-plan des en-têtes dans l’objet UIComponent donné. Les graphiques tracés peuvent être dimensionnés horizontalement si la largeur du composant change ou cette méthode sera rappelée pour retracer à une largeur et/ou hauteur différentes
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawHorizontalLine"><apiName>drawHorizontalLine</apiName><shortdesc>
      Trace une ligne entre les rangées.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>Objet Sprite qui contiendra un objet d’affichage doté des graphiques de cette rangée.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Index de la rangée dans le jeu des rangées affichées. L’en-tête ne compte pas. La rangée visible la plus à gauche possède l’index de rangée 0. Ceci est utile pour suivre les objets utilisés dans le tracé des arrière-plans. Ainsi, une rangée donnée peut réutiliser le même objet d’affichage même si l’index de l’élément que cette rangée rend a changé.
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Couleur suggérée pour l’indicateur
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Position y suggérée pour l’arrière-plan
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Trace une ligne entre les rangées. Cette implémentation trace une ligne directement dans l’objet Sprite fourni. L’objet Sprite a été effacé avant que les lignes ne soient tracées.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawLinesAndColumnBackgrounds"><apiName>drawLinesAndColumnBackgrounds</apiName><shortdesc>
      Trace des lignes entre les colonnes et les arrière-plans des colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Trace des lignes entre les colonnes et les arrière-plans des colonnes. Cette implémentation appelle les méthodes <codeph>drawHorizontalLine()</codeph>, <codeph>drawVerticalLine()</codeph> et <codeph>drawColumnBackground()</codeph> lorsque cela est nécessaire. Elle crée un objet Sprite qui contient tous ces graphiques et l’ajoute en tant qu’enfant de l’objet listContent devant l’ordre z.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawLinesAndColumnGraphics"><apiName>drawLinesAndColumnGraphics</apiName><shortdesc>
      Trace des lignes entre les colonnes et les arrière-plans des colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>contentHolder</apiItemName><apiOperationClassifier>mx.controls.listClasses:ListBaseContentHolder</apiOperationClassifier><apiDesc>Conteneur de tous les rendus d’élément et éditeurs d’élément du contrôle DataGrid.
      </apiDesc></apiParam><apiParam><apiItemName>visibleColumns</apiItemName><apiType value="Array"/><apiDesc>Tableau des colonnes visibles du contrôle DataGrid.
      </apiDesc></apiParam><apiParam><apiItemName>separators</apiItemName><apiType value="Object"/><apiDesc>Objet qui définit les lignes supérieure, inférieure, gauche et droite séparant les colonnes et les rangées.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Trace des lignes entre les colonnes et les arrière-plans des colonnes. Cette implémentation appelle les méthodes <codeph>drawHorizontalLine()</codeph>, <codeph>drawVerticalLine()</codeph> et <codeph>drawColumnBackground()</codeph> lorsque cela est nécessaire. Elle crée un objet Sprite qui contient tous ces graphiques et l’ajoute en tant qu’enfant de l’objet listContent devant l’ordre z.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawRowBackground"><apiName>drawRowBackground</apiName><shortdesc>
      Trace un arrière-plan de rangée aux position et hauteur définies avec la couleur spécifiée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>Objet Sprite qui contiendra un objet d’affichage doté des graphiques de cette rangée.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>Index de la rangée dans le jeu des rangées affichées. L’en-tête ne compte pas. La rangée visible la plus à gauche possède l’index de rangée 0. Ceci est utile pour suivre les objets utilisés dans le tracé des arrière-plans. Ainsi, une rangée donnée peut réutiliser le même objet d’affichage même si l’index de l’élément que cette rangée rend a changé.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Position y suggérée pour l’arrière-plan
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Hauteur suggérée pour l’indicateur
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Couleur suggérée pour l’indicateur
     
      </apiDesc></apiParam><apiParam><apiItemName>dataIndex</apiItemName><apiType value="int"/><apiDesc>Index de l’élément pour cette rangée dans le fournisseur de données. Il peut être utilisé par exemple pour teinter différemment le dixième élément.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Trace un arrière-plan de rangée aux position et hauteur définies avec la couleur spécifiée. Cette implémentation crée une forme sous forme d’enfant de l’objet Sprite saisi et la remplit de la couleur appropriée. Cette méthode utilise également le paramètre de la propriété de style <codeph>backgroundAlpha</codeph> pour déterminer la transparence de la couleur d’arrière-plan.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawSeparators"><apiName>drawSeparators</apiName><shortdesc>
      Crée et affiche les séparateurs d’en-têtes de colonne que l’utilisateur utilise généralement pour redimensionner les colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée et affiche les séparateurs d’en-têtes de colonne que l’utilisateur utilise généralement pour redimensionner les colonnes. Cette implémentation utilise le même objet Sprite que les lignes et les arrière-plans de colonne, ajoute des occurrences de la classe <codeph>headerSeparatorSkin</codeph> et leur attribue des écouteurs de souris afin de savoir quand l’utilisateur souhaite redimensionner une colonne.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawVerticalLine"><apiName>drawVerticalLine</apiName><shortdesc>
      Trace des lignes entre les colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>Objet Sprite qui contiendra un objet d’affichage doté des graphiques de cette rangée.
     
      </apiDesc></apiParam><apiParam><apiItemName>colIndex</apiItemName><apiType value="int"/><apiDesc>Index de la colonne dans le jeu des colonnes affichées. La colonne visible la plus à gauche possède l’index de colonne 0.
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Couleur suggérée pour l’indicateur
     
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Position x suggérée pour l’arrière-plan
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Trace des lignes entre les colonnes. Cette implémentation trace une ligne directement dans l’objet Sprite fourni. L’objet Sprite a été effacé avant que les lignes ne soient tracées.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:getCurrentDataValue"><apiName>getCurrentDataValue</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:isComplexColumn"><apiName>isComplexColumn</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>property</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:isItemEditable"><apiName>isItemEditable</apiName><shortdesc>
      Détermine si un élément du fournisseur de données peut être modifié par rangée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Le comportement par défaut consiste à renvoyer la valeur <codeph>true</codeph> si la propriété <codeph>editable</codeph> du contrôle DataGrid est <codeph>true</codeph> et si l’objet de données n’a pas la valeur <codeph>null</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Elément du fournisseur de données. L’implémentation par défaut de cette méthode retourne la valeur <codeph>false</codeph> si l’objet de données a la valeur <codeph>null</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine si un élément du fournisseur de données peut être modifié par rangée. L’implémentation par défaut de cette méthode vérifie uniquement la propriété <codeph>editable</codeph> du contrôle DataGrid et retourne la valeur <codeph>false</codeph> si la propriété <codeph>editable</codeph> a la valeur <codeph>false</codeph> ou si l’élément du fournisseur de données a la valeur <codeph>null</codeph>.
     
      <p>Cette méthode peut être remplacée pour autoriser un contrôle affiné des éléments du fournisseur de données modifiables. Par exemple, pour désactiver la modification de rangées de regroupement ou de rangées de résumé, remplacez cette méthode par une logique personnalisée de ce comportement.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:placeSortArrow"><apiName>placeSortArrow</apiName><shortdesc>
      Trace le graphique de la flèche de tri sur la colonne qui constitue la clé de tri actuelle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Trace le graphique de la flèche de tri sur la colonne qui constitue la clé de tri actuelle. Cette implémentation crée ou réutilise une occurrence de l’habillage spécifié par la propriété de style <codeph>sortArrowSkin</codeph> et la place dans l’en-tête de colonne approprié. Elle réduit également la taille de l’en-tête de colonne si le texte de l’en-tête risque d’être masqué par la flèche de tri.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:scrollPositionToIndex"><apiName>scrollPositionToIndex</apiName><shortdesc>
      
      Renvoie l’index du fournisseur de données correspondant à l’élément sur les premières rangée et colonne visibles, pour les positions de défilement données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Index du fournisseur de données.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>horizontalScrollPosition</apiItemName><apiType value="int"/><apiDesc>Valeur de la propriété <codeph>horizontalScrollPosition</codeph> correspondant à la position du défilement.
      </apiDesc></apiParam><apiParam><apiItemName>verticalScrollPosition</apiItemName><apiType value="int"/><apiDesc>Valeur de la propriété <codeph>verticalScrollPosition</codeph> correspondant à la position du défilement.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Renvoie l’index du fournisseur de données correspondant à l’élément sur les premières rangée et colonne visibles, pour les positions de défilement données.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:scrollVertically"><apiName>scrollVertically</apiName><shortdesc>
      
      Ajuste les rendus en fonction d’un changement de la position du défilement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pos</apiItemName><apiType value="int"/><apiDesc>Nouvelle position du défilement.
      </apiDesc></apiParam><apiParam><apiItemName>deltaPos</apiItemName><apiType value="int"/><apiDesc>Changement de position. Cette valeur est toujours un nombre positif.
      </apiDesc></apiParam><apiParam><apiItemName>scrollUp</apiItemName><apiType value="Boolean"/><apiDesc>La valeur est <codeph>true</codeph> si la position du défilement se réduit.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Ajuste les rendus en fonction d’un changement de la position du défilement.
     
      <p>Les classes List tentent d’optimiser le défilement lorsque la position du défilement a été modifié d’un nombre inférieur à celui des rangées visibles. Dans ce cas, certaines rangées restent inchangées et ont juste besoin d’être déplacées. D’autres rangées sont supprimées et de nouvelles rangées sont ajoutées. Si la position du défilement change trop, toutes les anciennes rangées sont supprimées et de nouvelles rangées sont ajoutées en appellant la méthode <codeph>makeRowsAndColumns()</codeph> pour l’intégralité de la zone d’affichage.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:setNewValue"><apiName>setNewValue</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="mx.controls:DataGrid:itemEditorInstance"><apiName>itemEditorInstance</apiName><shortdesc>
      Référence à l’occurrence actuellement active de l’éditeur d’élément, s’il existe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      Référence à l’occurrence actuellement active de l’éditeur d’élément, s’il existe.
     
      <p>Pour accéder à l’occurrence de l’éditeur d’élément et à la nouvelle valeur de l’élément lorsqu’un élément est modifié, utilisez la propriété <codeph>itemEditorInstance</codeph>. La propriété <codeph>itemEditoroccurrence</codeph> n’est valide qu’après l’exécution de l’écouteur d’événement de l’événement <codeph>itemEditBegin</codeph>. De ce fait, vous n’accédez généralement à la propriété <codeph>itemEditorInstance</codeph> que de l’intérieur de l’écouteur d’événements de l’événement <codeph>itemEditEnd</codeph>.</p>
     
      <p>La propriété <codeph>DataGridColumn.itemEditor</codeph> définit la classe de l’éditeur d’élément et, de ce fait, le type de données de l’occurrence de l’éditeur d’élément.</p>
     
      <p>Vous ne pouvez pas définir cette propriété dans MXML.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:resizableColumns"><apiName>resizableColumns</apiName><shortdesc>
      Indicateur précisant si l’utilisateur peut modifier la taille des colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si l’utilisateur peut modifier la taille des colonnes. Si la valeur est <codeph>true</codeph>, l’utilisateur peut agrandir ou rétrécir les colonnes du contrôle DataGrid en faisant glisser les lignes séparant les cellules d’en-tête. Si la valeur est <codeph>true</codeph>, les propriétés <codeph>resizeable</codeph> des colonnes individuelles doivent également être définies sur <codeph>false</codeph> pour empêcher l’utilisateur de redimensionner une certaine colonne.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:sortableColumns"><apiName>sortableColumns</apiName><shortdesc>
      Indicateur signalant si l’utilisateur peut trier les éléments du fournisseur de données en cliquant sur une cellule d’en-tête de colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur signalant si l’utilisateur peut trier les éléments du fournisseur de données en cliquant sur une cellule d’en-tête de colonnes. Si la valeur est <codeph>true</codeph>, l’utilisateur peut trier les éléments du fournisseur de données en cliquant sur une cellule d’en-tête de colonne. La propriété <codeph>DataGridColumn.dataField</codeph> de la colonne ou la propriété <codeph>DataGridColumn.sortCompareFunction</codeph> de la colonne est utilisée comme champ de tri. Si un utilisateur clique plusieurs fois sur une colonne, le trie alterne entre ordre croissant et décroissant. Si la valeur est <codeph>true</codeph>, chaque colonne peut être définie pour ne pas répondre à un clic sur un en-tête. Pour cela, définissez la propriété <codeph>sortable</codeph> sur <codeph>false</codeph>.
     
      <p>Lorsqu’un utilisateur relâche le bouton de la souris sur une cellule d’en-tête, le contrôle DataGrid distribue un événement <codeph>headerRelease</codeph> si cette propriété et la propriété triable de la colonne sont définies toutes les deux sur <codeph>true</codeph>. Si aucun gestionnaire n’appelle la méthode <codeph>preventDefault()</codeph> sur l’événement, le contrôle DataGrid réalise le tri avec les propriétés <codeph>DataGridColumn.dataField</codeph> ou <codeph>DataGridColumn.sortCompareFunction</codeph> de cette colonne.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.dataGridClasses.xml#DataGridColumn/dataField"><linktext>mx.controls.dataGridClasses.DataGridColumn.dataField</linktext></link><link href="mx.controls.dataGridClasses.xml#DataGridColumn/sortCompareFunction"><linktext>mx.controls.dataGridClasses.DataGridColumn.sortCompareFunction</linktext></link></related-links></apiValue><apiValue id="mx.controls:DataGrid:columns:get"><apiName>columns</apiName><shortdesc>
      Tableau d’objets DataGridColumn, un pour chaque colonne pouvant être affichée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau d’objets DataGridColumn, un pour chacune des colonnes pouvant être affichées. S’il n’est pas défini explicitement, le contrôle DataGrid tente d’examiner le premier élément du fournisseur de données pour déterminer l’ensemble des propriétés et les afficher par ordre alphabétique.
     
      <p>Si vous souhaitez modifier l’ensemble des colonnes, vous devez obtenir ce tableau, modifier les colonnes et leur ordre d’apparition dans le tableau, puis affecter le nouveau tableau à la propriété columns. Cette opération est nécessaire car le contrôle DataGrid a renvoyé une nouvelle copie du tableau de colonnes et n’a donc pas pu remarquer les modifications.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:draggableColumns:get"><apiName>draggableColumns</apiName><shortdesc>
      Indicateur précisant si l’utilisateur est autorisé à réorganiser les colonnes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant si l’utilisateur est autorisé à réorganiser les colonnes. Si la valeur est <codeph>true</codeph>, l’utilisateur peut réorganiser les colonnes du contrôle DataGrid en faisant glisser les cellules d’en-tête.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:editable:get"><apiName>editable</apiName><shortdesc>
      Un indicateur précise si l’utilisateur peut ou non modifier les éléments du fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Un indicateur précise si l’utilisateur peut ou non modifier les éléments du fournisseur de données. Si la valeur est <codeph>true</codeph>, les fonctionnalités de rendu d’élément du contrôle sont modifiables. L’utilisateur peut cliquer sur un rendu d’élément pour ouvrir un éditeur.
     
      <p>Vous pouvez désactiver l’édition de colonnes individuelles du contrôle DataGrid à l’aide de la propriété <codeph>DataGridColumn.editable</codeph>, ou en utilisant les événements <codeph>itemEditBeginning</codeph> et <codeph>itemEditBegin</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:editedItemPosition:get"><apiName>editedItemPosition</apiName><shortdesc>
      Index de colonne et de ligne du rendu d’élément de l’élément du fournisseur de données en cours de modification, le cas échéant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Index de colonne et de ligne du rendu d’élément de l’élément du fournisseur de données en cours de modification, le cas échéant.
     
      <p>Cet Objet présente deux champs : <codeph>columnIndex</codeph> et <codeph>rowIndex</codeph>, les index basés sur zéro des colonnes et des lignes de l’élément. Exemple : { columnIndex:2, rowIndex:3}</p>
     
      <p>La définition de cette propriété ramène l’élément en vue et distribue l’événement <codeph>itemEditBegin</codeph> pour ouvrir un éditeur d’élément dans le rendu d’élément spécifié.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:editedItemRenderer:get"><apiName>editedItemRenderer</apiName><shortdesc>
      Référence au rendu d’élément du contrôle DataGrid dont l’élément est en cours de modification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      Référence au rendu d’élément du contrôle DataGrid dont l’élément est en cours de modification.
     
      <p>Depuis un écouteur des événements <codeph>itemEditBegin</codeph> et <codeph>itemEditEnd</codeph>, vous pouvez accéder à la valeur actuelle de l’élément en cours de modification à l’aide de la propriété <codeph>editedItemRenderer.data</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Spécifie le mode IME (éditeur de méthode d’entrée).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Spécifie le mode IME (éditeur de méthode d’entrée). L’éditeur IME permet aux utilisateurs d’entrer du texte en chinois, japonais et coréen. Flex définit le mode IME spécifié lorsque le contrôle est mis en focus et rétablit la valeur précédente lorsque le contrôle est désactivé.
     
     <p>La classe flash.system.IMEConversionMode définit des constantes pour les valeurs valides de cette propriété. Vous pouvez spécifier <codeph>null</codeph> pour n’indiquer aucun IME.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:DataGrid:minColumnWidth:get"><apiName>minColumnWidth</apiName><shortdesc>
      Largeur minimale des colonnes, en pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Largeur minimale des colonnes, en pixels. Si la valeur n’est pas NaN, le contrôle DataGrid l’applique en tant que largeur minimale de toutes les colonnes. Sinon, chaque colonne peut avoir sa propre largeur minimale.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:horizontalScrollPosition:set"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Décalage dans le contenu à partir du bord gauche.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Décalage dans le contenu à partir du bord gauche. Il peut s’agir d’un décalage en pixels dans certaines sous-classes ou d’une autre mesure comme le nombre de colonnes d’un contrôle DataGrid. Le défilement du contrôle DataGrid s’effectue par colonnes de sorte que la valeur de la propriété <codeph>horizontalScrollPosition</codeph> se trouve toujours dans la plage 0 pour l’index des colonnes qui rendra la dernière colonne visible. Cela est différent pour le contrôle List, dont le défilement s’effectue par pixels. Le contrôle DataGrid aligne toujours le bord gauche d’une colonne sur son bord gauche.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:RichTextEditor"><apiName>RichTextEditor</apiName><shortdesc>Le contrôle RichTextEditor permet aux utilisateurs d’entrer du texte et de le mettre en forme.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="underlineButton"/><Exclude kind="property" name="toolBar2"/><Exclude kind="property" name="toolBar"/><Exclude kind="property" name="linkTextInput"/><Exclude kind="property" name="layout"/><Exclude kind="property" name="label"/><Exclude kind="property" name="italicButton"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="fontSizeCombo"/><Exclude kind="property" name="fontSizeArray"/><Exclude kind="property" name="fontFamilyCombo"/><Exclude kind="property" name="fontFamilyArray"/><Exclude kind="property" name="defaultButton"/><Exclude kind="property" name="colorPicker"/><Exclude kind="property" name="bulletButton"/><Exclude kind="property" name="boldButton"/><Exclude kind="property" name="alignButtons"/><styles><style inherit="no" name="textAreaStyleName" owner="mx.controls:RichTextEditor" playerVersion="Flash9" type="String">
<description>
          Nom de la déclaration de style CSS à utiliser pour les styles du contrôle TextArea. Par défaut, le contrôle TextArea utilise les styles héritables du contrôle RichTextEditor.
          
          </description>

<playerversion>AIR 1.1
          </playerversion>
	<prolog><asCustoms><langversion>3.0
          </langversion><productversion>Flex 3
         </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The &lt;mx:RichTextEditor&gt; tag inherits all the members
  of its parent and adds the following members:</p>
 <pre>
  &lt;RichTextEditor
    <strong>Properties</strong>
    defaultLinkProtocol="http://"
    htmlText=""
    showControlBar="true | false"
    showToolTips="false | true"
    text=""
      
    <strong>Events</strong>
    change
  /&gt;
  
 </pre>
  
 ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseClassifier>mx.containers:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>Le contrôle RichTextEditor permet aux utilisateurs d’entrer du texte et de le mettre en forme. Les caractéristiques de texte que les utilisateurs peuvent modifier incluent la famille de police, la couleur, la taille et le style, ainsi que d’autres propriétés comme l’alignement du texte, les listes à puces et les liens d’URL. Le contrôle est constitué d’un contrôle Panel doté de deux enfants directs :
 <ul>
  <li>Un contrôle de zone de texte où les utilisateurs peuvent entrer du texte.</li>
  <li>Un conteneur avec des contrôles de format qui permettent aux utilisateurs d’indiquer les caractéristiques du texte. Les contrôles de format affectent le texte tapé ou sélectionné.</li>
 </ul>
 <p>Le contrôle RichTextEditor a une hauteur et une largeur par défaut de 300 sur 325, ainsi qu’une hauteur et une largeur minimales par défaut de 200 sur 220 pixels. Si vous placez un contrôle RichTextEditor dans un contrôle DividedBox, vérifiez que le contrôle DividedBox est assez large pour contenir le contrôle RichTextEditor à ses dimensions minimales. De même, vous pouvez explicitement définir la propriété minHeight ou minWidth du contrôle RichTextEditor sur <codeph>NaN</codeph> pour que le conteneur DividedBox réduise les dimensions du contrôle à 0.</p>
 <p>Le tableau suivant décrit les sous-contrôles auxquels vous pouvez accéder et que vous pouvez modifier :</p>
 <adobetable class="innertable">
  
  
  
  
  
  
  
  
  
  
  
  
  
 <tgroup cols="3"><thead><row><entry>Type de contrôle </entry><entry>ID</entry><entry>Description</entry></row></thead><tbody><row>
    <entry><xref href="../controls/TextArea.html">TextArea</xref></entry>
    <entry>textArea</entry>
    <entry>Zone dans laquelle l’utilisateur peut entrer du texte.</entry>
  </row><row>
    <entry><xref href="../core/Container.html">Conteneur</xref></entry>
    <entry>barre d’outils</entry>
    <entry>Conteneur des contrôles de format ; place les contrôles sur une seule rangée horizontale, si cela est possible, ou sur plusieurs rangées.</entry>
  </row><row>
    <entry><xref href="../controls/ComboBox.html">ComboBox</xref></entry>
    <entry>fontFamilyCombo</entry>
    <entry>Indique la famille de police du texte. Le fournisseur de données ComboBox est un tableau de chaînes dont les valeurs sont les suivantes :
     <ul>
         <li>_sans</li>
         <li>_serif</li>
         <li>_typewriter</li>
         <li>Arial</li>
         <li>Courier</li>
         <li>Courier New</li>
         <li>Geneva</li>
         <li>Georgia</li>
         <li>Helvetica</li>
         <li>Times New Roman</li>
         <li>Times</li>
         <li>Verdana (default)</li>
    </ul></entry>
  </row><row>
    <entry><xref href="../controls/ComboBox.html">ComboBox</xref></entry>
    <entry>fontSizeCombo</entry>
    <entry>Indique la taille de police. Le fournisseur de données ComboBox est un tableau de chaînes dont les valeurs sont les suivantes : 8, 9, 10 (par défaut), 11, 12, 14, 16, 18, 20, 24, 26, 28, 36, 48, 72. 
    <p><b>Remarque :</b> cette spécification est une valeur en pixels réelle de la taille de police. Ces tailles ne sont pas équivalentes aux tailles de polices relatives indiquées en langage HTML à l’aide de l’attribut <codeph>size</codeph> de la balise &lt;font>.</p></entry>
  </row><row>
    <entry><xref href="../containers/HBox.html">HBox</xref></entry>
    <entry>barre d’outils 2</entry>
    <entry>Contient les boutons de caractéristiques de polices.</entry>
  </row><row>
    <entry><xref href="../controls/Button.html">Button</xref></entry>
    <entry>boldButton</entry>
    <entry>Lorsque selected="true", la police est en gras. </entry>
  </row><row>
    <entry><xref href="../controls/Button.html">Button</xref></entry>
    <entry>italicButton</entry>
    <entry>Lorsque selected="true", la police est en italique. </entry>
  </row><row>
    <entry><xref href="../controls/Button.html">Button</xref></entry>
    <entry>underlineButton</entry>
    <entry>Lorsque selected="true", la police est soulignée.</entry>
  </row><row>
    <entry><xref href="../controls/ColorPicker.html">ColorPicker</xref></entry>
    <entry>colorPicker</entry>
    <entry>Indique la couleur du texte. </entry>
  </row><row>
    <entry><xref href="../controls/ToggleButtonBar.html">ToggleButtonBar</xref></entry>
    <entry>alignButtons</entry>
    <entry>Indique l’alignement du texte. Le fournisseur de données du contrôle consiste en un tableau d’objets, le champ <codeph>action</codeph> des objets spécifiant le type de justification. Les actions disponibles sont les suivantes :
      <ul>
        <li>gauche (par défaut) </li>
    <li>centre</li>
    <li>droit</li>
    <li>justifier</li>
    </ul></entry>
  </row><row>
    <entry><xref href="../controls/Button.html">Button</xref></entry>
    <entry>bulletButton</entry>
    <entry>Lorsque selected="true", la ligne en cours, ou la ligne sélectionnée, est définie sur un élément de liste, précédée d’une puce.</entry>
  </row><row>
    <entry><xref href="../controls/TextInput.html">TextInput</xref></entry>
    <entry>linkTextInput</entry>
    <entry>Ce champ n’est activé que si du texte est sélectionné. Lorsque l’utilisateur entre une URL dans ce champ et appuie sur la touche Entrée, Flex insère l’équivalent d’une balise HTML <codeph>&lt;a href="<i>user_text</i>" target="blank">&lt;/a></codeph> dans le sous-contrôle TextArea autour du texte actuellement sélectionné.
 
        <p>Flex remplit initialement ce contrôle avec le texte spécifié par la propriété <codeph>defaultLinkProtocol</codeph> ; les utilisateurs peuvent ajouter le reste du lien à ce texte, ou le remplacer.</p>
 </entry>
  </row></tbody></tgroup></adobetable>
  
 <p>Pour accéder à un des sous-contrôles, vous pouvez utiliser une syntaxe similaire à la suivante :
 <pre>
 myRTE.toolBar2.setStyle("backgroundColor", 0xCC6633);
 </pre>
 </p>
 
 <p>Le contrôle RichTextEditor possède les caractéristiques de taille par défaut suivantes :</p>
    <adobetable class="innertable">
       
       
       
       
    <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
          <entry>Taille par défaut</entry>
          <entry>325 pixels de large par 300 pixels de haut</entry>
       </row><row>
          <entry>Taille minimale</entry>
          <entry>220 pixels de large par 200 pixels de haut</entry>
       </row><row>
          <entry>Taille minimale</entry>
          <entry>10000 par 10000 pixels</entry>
       </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="RichTextEditorExample.mxml"><swfblock conref="examples/RichTextEditorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#ControlBar"><linktext>mx.containers.ControlBar</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link><link href="mx.controls.xml#ToggleButtonBar"><linktext>mx.controls.ToggleButtonBar</linktext></link><link href="mx.controls.xml#Button"><linktext>mx.controls.Button</linktext></link><link href="mx.controls.xml#ColorPicker"><linktext>mx.controls.ColorPicker</linktext></link><link href="mx.controls.xml#ComboBox"><linktext>mx.controls.ComboBox</linktext></link><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link><link href="mx.controls.xml#TextInput"><linktext>mx.controls.TextInput</linktext></link></related-links><adobeApiEvent id="mx.controls:RichTextEditor_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
        Distribué lorsque l’utilisateur change le contenu ou le format du texte dans le contrôle TextArea </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
        Distribué lorsque l’utilisateur change le contenu ou le format du texte dans le contrôle TextArea. Cet événement n’est pas distribué si vous changez le contenu du contrôle TextArea en redéfinissant la propriété <codeph>text</codeph> ou <codeph>htmlText</codeph>.
        
        </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:RichTextEditor:RichTextEditor"><apiName>RichTextEditor</apiName><shortdesc>Constructeur.</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>Constructeur.</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:RichTextEditor:alignToolTip"><apiName>alignToolTip</apiName><shortdesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur les boutons d’alignement du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Align</apiData><apiType value="String"/><apiDefaultValue>"Align"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur les boutons d’alignement du texte. Tous les boutons partagent la même info-bulle. Pour afficher les infos-bulles, vous devez également définir la propriété <codeph>showToolTips</codeph> du contrôle RichTextEditor sur <codeph>true</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:boldToolTip"><apiName>boldToolTip</apiName><shortdesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le bouton de mise en gras du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Bold</apiData><apiType value="String"/><apiDefaultValue>"Bold"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le bouton de mise en gras du texte. Pour afficher les infos-bulles, vous devez également définir la propriété <codeph>showToolTips</codeph> du contrôle RichTextEditor sur <codeph>true</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:bulletToolTip"><apiName>bulletToolTip</apiName><shortdesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le bouton de liste à puces.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Bullet</apiData><apiType value="String"/><apiDefaultValue>"Bullet"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le bouton de liste à puces. Pour afficher les infos-bulles, vous devez également définir la propriété <codeph>showToolTips</codeph> du contrôle RichTextEditor sur <codeph>true</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:colorPickerToolTip"><apiName>colorPickerToolTip</apiName><shortdesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le contrôle ColorPicker.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Color</apiData><apiType value="String"/><apiDefaultValue>"Color"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le contrôle ColorPicker. Pour afficher les infos-bulles, vous devez également définir la propriété <codeph>showToolTips</codeph> du contrôle RichTextEditor sur <codeph>true</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:fontFamilyToolTip"><apiName>fontFamilyToolTip</apiName><shortdesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur la liste déroulante des polices.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Font Family</apiData><apiType value="String"/><apiDefaultValue>"Font Family"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur la liste déroulante des polices. Pour afficher les infos-bulles, vous devez également définir la propriété <codeph>showToolTips</codeph> du contrôle RichTextEditor sur <codeph>true</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:fontSizeToolTip"><apiName>fontSizeToolTip</apiName><shortdesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur la liste déroulante des tailles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Font Size</apiData><apiType value="String"/><apiDefaultValue>"Font Size"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur la liste déroulante des tailles. Pour afficher les infos-bulles, vous devez également définir la propriété <codeph>showToolTips</codeph> du contrôle RichTextEditor sur <codeph>true</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:italicToolTip"><apiName>italicToolTip</apiName><shortdesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le bouton de mise en italique du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Italic</apiData><apiType value="String"/><apiDefaultValue>"Italic"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le bouton de mise en italique du texte. Pour afficher les infos-bulles, vous devez également définir la propriété <codeph>showToolTips</codeph> du contrôle RichTextEditor sur <codeph>true</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:linkToolTip"><apiName>linkToolTip</apiName><shortdesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le champ de saisie du texte de lien.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Link</apiData><apiType value="String"/><apiDefaultValue>"Link"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le champ de saisie du texte de lien. Pour afficher les infos-bulles, vous devez également définir la propriété <codeph>showToolTips</codeph> du contrôle RichTextEditor sur <codeph>true</codeph>.
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:underlineToolTip"><apiName>underlineToolTip</apiName><shortdesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le bouton de soulignement du texte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Underline</apiData><apiType value="String"/><apiDefaultValue>"Underline"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Info-bulle qui s’affiche lorsque l’utilisateur passe sa souris sur le bouton de soulignement du texte. Pour afficher les infos-bulles, vous devez également définir la propriété <codeph>showToolTips</codeph> du contrôle RichTextEditor sur <codeph>true</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:defaultLinkProtocol:get"><apiName>defaultLinkProtocol</apiName><shortdesc>
     Chaîne de protocole par défaut à utiliser au début d’un texte de lien.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"http://"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Chaîne de protocole par défaut à utiliser au début d’un texte de lien. Cette chaîne s’affiche dans le sous-contrôle LinkTextInput, de sorte que les utilisateurs n’ont pas besoin de taper l’identifiant du protocole lorsqu’ils entrent du texte de lien.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:htmlText:get"><apiName>htmlText</apiName><shortdesc>
     Texte contenant un marqueur HTML qui s’affiche dans le sous-contrôle TextArea du contrôle RichTextEditor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
     </apiDefaultValue></apiValueDef><apiDesc>
     Texte contenant un marqueur HTML qui s’affiche dans le sous-contrôle TextArea du contrôle RichTextEditor. Vous ne pouvez pas définir cette propriété et la propriété <codeph>text</codeph> en même temps. Si vous définissez une propriété, elle remplace les valeurs définies à l’aide de l’autre propriété. Vous pouvez obtenir les deux propriétés ; la propriété <codeph>htmlText</codeph> retourne toujours une chaîne contenant le marqueur HTML qui représente la mise en forme du texte en cours. Pour plus d’informations sur l’utilisation de cette propriété, voir la documentation TextArea.
     
     </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link></related-links></apiValue><apiValue id="mx.controls:RichTextEditor:selection:get"><apiName>selection</apiName><shortdesc>
      Objet TextRange contenant le texte sélectionné dans le sous-contrôle TextArea.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls.textClasses:TextRange</apiValueClassifier></apiValueDef><apiDesc>
      Objet TextRange contenant le texte sélectionné dans le sous-contrôle TextArea.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.textClasses.xml#TextRange"><linktext>mx.controls.textClasses.TextRange</linktext></link></related-links></apiValue><apiValue id="mx.controls:RichTextEditor:showControlBar:get"><apiName>showControlBar</apiName><shortdesc>
     Indique si la barre de contrôle contenant les contrôles de mise en forme du texte doit s’afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Indique si la barre de contrôle contenant les contrôles de mise en forme du texte doit s’afficher.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:showToolTips:get"><apiName>showToolTips</apiName><shortdesc>
     Indique si les infos-bulles des contrôles de mise en forme du texte doivent s’afficher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
     Indique si les infos-bulles des contrôles de mise en forme du texte doivent s’afficher. 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:text:get"><apiName>text</apiName><shortdesc>
     Texte brut sans marqueur HTML qui s’affiche dans le sous-contrôle TextArea du contrôle RichTextEditor.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
     </apiDefaultValue></apiValueDef><apiDesc>
     Texte brut sans marqueur HTML qui s’affiche dans le sous-contrôle TextArea du contrôle RichTextEditor. Vous ne pouvez pas définir cette propriété et la propriété <codeph>htmlText</codeph> en même temps. Si vous définissez une propriété, elle remplace les valeurs définies à l’aide de l’autre propriété. Vous pouvez obtenir les deux propriétés ; la propriété <codeph>text</codeph> retourne toujours une chaîne de texte brut sans information de mise en forme. Pour plus d’informations sur l’utilisation de cette propriété, voir la documentation TextArea.
     
     </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
  Le contrôle RadioButtonGroup définit un groupe de contrôles RadioButton agissant comme un contrôle unique mutuellement exclusif. De ce fait, l’utilisateur ne peut sélectionner qu’un seul contrôle RadioButton à la fois.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:RadioButtonGroup" replacement="spark.components.RadioButtonGroup" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:RadioButtonGroup&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:RadioButtonGroup
    <strong>Properties</strong>
    enabled="true|false"
    id="<i>No default</i>"
    labelPlacement="right|left|top|bottom"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    itemClick="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle RadioButtonGroup définit un groupe de contrôles RadioButton agissant comme un contrôle unique mutuellement exclusif. De ce fait, l’utilisateur ne peut sélectionner qu’un seul contrôle RadioButton à la fois. Alors que le regroupement d’occurrences de RadioButton dans un composant RadioButtonGroup est facultatif, un groupe vous permet d’effectuer des choses comme définir un seul gestionnaire d’événement sur un groupe de boutons, plutôt que sur chaque bouton.
  
  <p>La propriété <codeph>id</codeph> est requise lorsque vous utilisez la balise <codeph>&lt;mx:RadioButtonGroup></codeph> pour définir le nom du groupe.</p> 
 
  <p>Le contrôle RadioButtonGroup est une sous-classe de la classe EventDispatcher et non de la classe UIComponent, et il implémente l’interface IMXMLObject. Les autres composants visuels de Flex sont des sous-classes de la classe UIComponent, qui implémente l’interface IUIComponent. Le contrôle RadioButtonGroup est intégré au compilateur Flex, ce qui vous permet d’utiliser le contrôle RadioButtonGroup comme enfant d’un conteneur Flex, même s’il n’implémente pas l’interface IUIComponent. Les autres enfants du conteneur doivent implémenter l’interface IUIComponent.</p>
 
  <p>Par conséquent, si vous essayez de définir un composant visuel comme sous-classe du contrôle EventDispatcher qui implémente l’interface IMXMLObject, vous ne pourrez pas l’utiliser comme enfant d’un conteneur.</p>
 
  </apiDesc><example conref="RadioButtonGroupExample.mxml"><swfblock conref="examples/RadioButtonGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#RadioButton"><linktext>mx.controls.RadioButton</linktext></link></related-links><adobeApiEvent id="mx.controls:RadioButtonGroup_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Distribué lorsqu’un utilisateur sélectionne un contrôle RadioButton dans le groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un utilisateur sélectionne un contrôle RadioButton dans le groupe. Vous pouvez également définir un gestionnaire pour chaque contrôle RadioButton.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:RadioButtonGroup_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la valeur du contrôle RadioButton sélectionné dans ce groupe change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la valeur du contrôle RadioButton sélectionné dans ce groupe change.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:RadioButtonGroup:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>document</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Dans les cas simples où une classe étend la classe EventDispatcher, le paramètre <codeph>document</codeph> ne doit pas être utilisé.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links></apiConstructor><apiOperation id="mx.controls:RadioButtonGroup:getRadioButtonAt"><apiName>getRadioButtonAt</apiName><shortdesc>
      Renvoie le contrôle RadioButton à l’index spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Contrôle RadioButton spécifié.
      
      </apiDesc><apiOperationClassifier>mx.controls:RadioButton</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Index du contrôle RadioButton dans le contrôle RadioButtonGroup, l’index du premier contrôle étant 0.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie le contrôle RadioButton à l’index spécifié.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:RadioButtonGroup:initialized"><apiName>initialized</apiName><shortdesc>
      Implémentation de la méthode IMXMLObject.initialized() pour prendre en charge l’instanciation différée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Document MXML à l’origine de cet objet.
     
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Identificateur utilisé par le document pour faire référence à cet objet. Si l’objet est une propriété profonde dans le document, la valeur <codeph>id</codeph> est null.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Implémentation de la méthode <codeph>IMXMLObject.initialized()</codeph> permettant de prendre en charge l’instanciation différée.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#IMXMLObject"><linktext>mx.core.IMXMLObject</linktext></link></related-links></apiOperation><apiValue id="mx.controls:RadioButtonGroup:enabled:get"><apiName>enabled</apiName><shortdesc>
      Détermine si la sélection est autorisée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Détermine si la sélection est autorisée.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButtonGroup:labelPlacement:get"><apiName>labelPlacement</apiName><shortdesc>
      Position de l’étiquette RadioButton par rapport à l’icône RadioButton de chaque contrôle du groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"right"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Position de l’étiquette RadioButton par rapport à l’icône RadioButton de chaque contrôle du groupe. Vous pouvez remplacer ce paramètre pour chaque contrôle.
     
      <p>Les valeurs valides dans MXML sont <codeph>"right"</codeph>, <codeph>"left"</codeph>, <codeph>"bottom"</codeph> et <codeph>"top"</codeph>. </p>
     
      <p>Dans ActionScript, vous utilisez les constantes suivantes pour définir cette propriété : <codeph>ButtonLabelPlacement.RIGHT</codeph>, <codeph>ButtonLabelPlacement.LEFT</codeph>, <codeph>ButtonLabelPlacement.BOTTOM</codeph> et <codeph>ButtonLabelPlacement.TOP</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButtonGroup:numRadioButtons:get"><apiName>numRadioButtons</apiName><shortdesc>
      Nombre de contrôles RadioButton appartenant à ce contrôle RadioButtonGroup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>"undefined"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de contrôles RadioButton appartenant à ce contrôle RadioButtonGroup.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButtonGroup:selectedValue:get"><apiName>selectedValue</apiName><shortdesc>
      Valeur de la propriété value du contrôle RadioButton sélectionné dans le groupe, si elle est différente de la valeur null (valeur par défaut).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Valeur de la propriété <codeph>value</codeph> du contrôle RadioButton sélectionné dans le groupe, si elle est différente de la valeur <codeph>null</codeph> (valeur par défaut). Sinon, <codeph>selectedValue</codeph> est la valeur de la propriété <codeph>label</codeph> du contrôle RadioButton sélectionné. Si aucun contrôle RadioButton n’est sélectionné, la valeur de cette propriété est <codeph>null</codeph>.
     
      <p>Si vous définissez la propriété <codeph>selectedValue</codeph>, Flex sélectionne le contrôle RadioButton dont la propriété <codeph>value</codeph> ou <codeph>label</codeph> correspond à cette valeur.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButtonGroup:selection:get"><apiName>selection</apiName><shortdesc>
      Contient une référence au contrôle RadioButton actuellement sélectionné dans le groupe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:RadioButton</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Contient une référence au contrôle RadioButton actuellement sélectionné dans le groupe. Vous pouvez accéder à la propriété dans ActionScript uniquement ; elle ne peut pas être définie dans MXML. Définir cette propriété sur <codeph>null</codeph> a pour effet de désélectionner le contrôle RadioButton actuellement sélectionné.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:Menu"><apiName>Menu</apiName><shortdesc>
  Le contrôle Menu crée un menu contextuel composé de choix sélectionnables individuellement, tout comme le menu Fichier ou Edition de la plupart des applications logicielles.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBarStyleName"/><Exclude kind="property" name="showScrollTips"/><Exclude kind="property" name="scrollTipFunction"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="liveScrolling"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBarStyleName"/><Exclude kind="property" name="allowMultipleSelection"/><styles><style inherit="no" name="separatorSkin" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  Habillage de tous les éléments de menu identifiés comme séparateurs. La valeur par défaut est le symbole « MenuSeparator » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="radioDisabledIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  Icône de tous les éléments de menu désactivés dont l’identifiant de type est une case d’option. La valeur par défaut est le symbole « MenuRadioDisabled » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="radioIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  Icône de tous les éléments de menu désactivés dont l’identifiant de type est une case d’option. La valeur par défaut est le symbole « MenuRadioEnabled » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="checkDisabledIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  Icône de tous les éléments de menu désactivés dont l’identifiant de type est une case à cocher. La valeur par défaut est le symbole « MenuCheckDisabled » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="checkIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  Icône de tous les éléments de menu activés dont l’identifiant de type est une case à cocher. La valeur par défaut est le symbole « MenuCheckEnabled » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="branchDisabledIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  Icône de tous les éléments de menu désactivés qui comportent des sous-menus. La valeur par défaut est le symbole « MenuBranchDisabled » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="branchIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  Icône de tous les éléments de menu activés qui comportent des sous-menus. La valeur par défaut est le symbole « MenuBranchEnabled » dans le fichier Assets.swf.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:Menu" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte de l’élément de menu lorsqu’il est sélectionné.
 
  </description>
<default>0x2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:Menu" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte de l’élément de menu lorsque l’utilisateur le survole avec la souris.
 
  </description>
<default>0x2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:Menu" playerVersion="Flash9" type="Number">
<description>
  Décalage de la première ligne de texte à partir du côté gauche de l’élément de menu ou de sous-menu. 
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectionEasingFunction" owner="mx.controls:Menu" playerVersion="Flash9" type="Function">
<description>
  Référence à une équation <codeph>easingFunction</codeph> qui permet de contrôler l’interpolation par programme.
 
  </description>
<default>"undefined"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:Menu" playerVersion="Flash9" type="uint">
<description>
  Couleur d’arrière-plan de l’élément de menu lorsqu’il est sélectionné.
  
  </description>
<default>0x7FCEFF
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:Menu" playerVersion="Flash9" type="uint">
<description>
  Couleur d’arrière-plan de l’élément de menu lorsque l’utilisateur le survole avec la souris. 
  
  </description>
<default>0xB2E1FF
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.controls:Menu" playerVersion="Flash9" type="Number">
<description>
  Durée de la transition d’ouverture du menu ou sous-menu, en millisecondes. La valeur 0 indique l’absence de transition.
  
  </description>
<default>250 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="rightIconGap" owner="mx.controls:Menu" playerVersion="Flash9" type="Number">
<description>
  Espace à droite du libellé dans un élément de menu. Si l’icône branche n’entre pas dans cet espace, ce dernier est étendu en fonction. La valeur par défaut est 15.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="leftIconGap" owner="mx.controls:Menu" playerVersion="Flash9" type="Number">
<description>
  Espace à gauche du libellé dans un élément de menu. Si les icônes (icône personnalisée et icône de type) n’entrent pas dans cet espace, ce dernier est étendu en fonction. La valeur par défaut est 18.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:Menu" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants (icônes et étiquette) dans le sens horizontal.
 
  </description>
<default>6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="mx.controls:Menu" playerVersion="Flash9" type="Array">
<description>
  Couleurs utilisées pour les éléments de menu ou de sous-menu dans un motif alterné. La valeur peut être un tableau de deux couleurs ou plus. Ce style est uniquement utilisé si la propriété <codeph>backgroundColor</codeph> n’est pas indiquée. 
 
  </description>
<default>"undefined"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseClassifier>mx.controls:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle Menu crée un menu contextuel composé de choix sélectionnables individuellement, tout comme le menu Fichier ou Edition de la plupart des applications logicielles. Le menu contextuel peut comporter autant de niveaux de sous-menus que nécessaire. Après l’ouverture d’un contrôle Menu, il reste visible jusqu’à sa fermeture par une des actions suivantes :
 
  <ul>
   <li>Un appel de la méthode <codeph>Menu.hide()</codeph>.</li>
   <li>Lorsqu’un utilisateur sélectionne un élément de menu activé.</li>
   <li>Lorsqu’un utilisateur clique hors du contrôle Menu.</li>
   <li>Lorsqu’un utilisateur sélectionne un autre composant dans l’application.</li>
  </ul>
 
  <p>La classe Menu n’a pas de balise MXML correspondante. Vous devez la créer avec ActionScript.</p>
 
  <p>Le contrôle Menu possède les caractéristiques de taille par défaut suivantes :</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
           <entry>Taille par défaut</entry>
           <entry>La largeur est déterminée par le texte du contrôle Menu. La hauteur par défaut est le nombre de rangées du menu, multiplié par 19 pixels par rangée (hauteur de rangée par défaut).</entry>
        </row></tbody></tgroup></adobetable>
 
 <p>Le fournisseur de données des éléments Menu peut spécifier différents attributs qui déterminent la façon dont l’élément est affiché et se comporte, comme le montre le fournisseur de données XML suivant :</p>
  <pre>
   &lt;mx:XML format="e4x" id="myMenuData">
     &lt;root>
        &lt;menuitem label="MenuItem A" icon="myTopIcon">
            &lt;menuitem label="SubMenuItem A-1" enabled="False"/>
            &lt;menuitem label="SubMenuItem A-2"/>
        &lt;/menuitem>
        &lt;menuitem label="MenuItem B" type="check" toggled="true"/>
        &lt;menuitem label="MenuItem C" type="check" toggled="false" icon="myTopIcon"/>
        &lt;menuitem type="separator"/> 
        &lt;menuitem label="MenuItem D" icon="myTopIcon">
            &lt;menuitem label="SubMenuItem D-1" type="radio" groupName="one"/>
            &lt;menuitem label="SubMenuItem D-2" type="radio" groupName="one" toggled="true"/>
            &lt;menuitem label="SubMenuItem D-3" type="radio" groupName="one"/>
        &lt;/menuitem>
    &lt;/root>
 &lt;/mx:XML></pre>
 
  <p>Le tableau suivant répertorie les attributs que vous pouvez spécifier, leurs types de données, leurs objectifs et la façon dont le fournisseur de données doit les représenter si le menu utilise la classe DefaultDataDescriptor par défaut pour analyser le fournisseur de données :</p>
 
  <adobetable class="innertable">
  
  
  
  
  
  
  
 <tgroup cols="3"><thead><row><entry>Attribut</entry><entry>Type</entry><entry>Description</entry></row></thead><tbody><row>
    <entry><codeph>enabled</codeph></entry>
    <entry>Boolean</entry>
    <entry>Indique si l’utilisateur peut sélectionner l’élément de menu (<codeph>true</codeph>) ou non (<codeph>false</codeph>). Si cela n’est pas spécifié, Flex traite l’élément comme si la valeur était <codeph>true</codeph>. Si vous utilisez le descripteur de données par défaut, les fournisseurs de données doivent utiliser un attribut XML <codeph>enabled</codeph> ou un champ d’objet pour spécifier cette caractéristique.</entry>
  </row><row>
    <entry><codeph>groupName</codeph></entry>
    <entry>String</entry>
    <entry> (Requis, ou significatif, pour le type <codeph>radio</codeph> uniquement) Identifiant qui associe les éléments de la case d’option dans un groupe. Si vous utilisez le descripteur de données par défaut, les fournisseurs de données doivent utiliser un attribut XML <codeph>groupName</codeph> ou un champ d’objet pour spécifier les caractéristiques.</entry>
  </row><row>
    <entry><codeph>icon</codeph></entry>
    <entry>Classe</entry>
    <entry>Indique l’identifiant de classe d’une ressource d’image. Cet élément n’est pas utilisé pour les types <codeph>check</codeph>, <codeph>radio</codeph> ou <codeph>separator</codeph>. Vous pouvez utiliser les styles <codeph>checkIcon</codeph> et <codeph>radioIcon</codeph> pour spécifier les icônes utilisées pour les éléments de case d’option et de case à cocher qui sont sélectionnés. La propriété <codeph>iconField</codeph> ou <codeph>iconFunction</codeph> du menu détermine le nom du champ des données qui spécifie l’icône, ou une fonction qui détermine les icônes.</entry>
  </row><row>
    <entry><codeph>label</codeph></entry>
    <entry>String</entry>
    <entry>Spécifie le texte qui s’affiche dans le contrôle. Cet élément est utilisé pour tous les types d’éléments de menu, à l’exception du <codeph>separator</codeph>. La propriété <codeph>labelField</codeph> ou <codeph>labelFunction</codeph> du menu détermine le nom du champ des données qui spécifie le libellé, ou une fonction qui détermine les libellés (si le fournisseur de données est au format E4X XML, vous devez spécifier une de ces propriétés pour afficher un libellé). Si le fournisseur de données est un tableau de chaînes, Flex utilise la valeur de chaîne comme libellé.</entry>
  </row><row>
    <entry><codeph>toggled</codeph></entry>
    <entry>Booléen</entry>
    <entry>Indique si un élément de case à cocher ou de la case d’option est sélectionné. Si cela n’est pas spécifié, Flex traite l’élément comme si la valeur était <codeph>false</codeph> et l’élément n’est pas sélectionné. Si vous utilisez le descripteur de données par défaut, les fournisseurs de données doivent utiliser un attribut XML alterné ou un champ d’objet pour spécifier les caractéristiques.</entry>
  </row><row>
    <entry><codeph>type</codeph></entry>
    <entry>Chaîne</entry>
    <entry>Indique le type d’élément de menu. Les valeurs significatives sont <codeph>separator</codeph>, <codeph>check</codeph> ou <codeph>radio</codeph>. Flex traite toutes les autres valeurs, ou les nœuds sans entrée de type, comme des entrées de menu normales. Si vous utilisez le descripteur de données par défaut, les fournisseurs de données doivent utiliser un attribut XML type ou un champ d’objet pour spécifier les caractéristiques.</entry>
  </row></tbody></tgroup></adobetable>
 
 
  </apiDesc><example conref="SimpleMenuExample.mxml"><swfblock conref="examples/SimpleMenuExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#MenuBar"><linktext>mx.controls.MenuBar</linktext></link><link href="mx.controls.xml#PopUpMenuButton"><linktext>mx.controls.PopUpMenuButton</linktext></link><link href="mx.controls.menuClasses.xml#IMenuDataDescriptor"><linktext>mx.controls.menuClasses.IMenuDataDescriptor</linktext></link><link href="mx.controls.treeClasses.xml#DefaultDataDescriptor"><linktext>mx.controls.treeClasses.DefaultDataDescriptor</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  Distribué lorsqu’un utilisateur survole un élément de menu avec la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un utilisateur survole un élément de menu avec la souris.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  Distribué lorsqu’un utilisateur cesse de survoler un élément de menu avec la souris.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un utilisateur cesse de survoler un élément de menu avec la souris.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.MENU_SHOW_menuShow"><apiName>menuShow</apiName><shortdesc>
  Distribué à l’ouverture d’un menu ou sous-menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.MENU_SHOW</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué à l’ouverture d’un menu ou sous-menu. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.MENU_HIDE_menuHide"><apiName>menuHide</apiName><shortdesc>
  Distribué lorsqu’un menu ou sous-menu disparaît.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.MENU_HIDE</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un menu ou sous-menu disparaît.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  Distribué lorsqu’un élément de menu est sélectionné.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsqu’un élément de menu est sélectionné. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Distribué lorsque la sélection change après une interaction de l’utilisateur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la sélection change après une interaction de l’utilisateur. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:Menu:Menu"><apiName>Menu</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
     
      <p>Les applications n’appellent généralement pas le constructreur Menu directement. En revanche, les applications appellent la méthode <codeph>Menu.createMenu()</codeph>.</p>
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:Menu:createMenu"><apiName>createMenu</apiName><shortdesc>
      Crée et retourne une occurrence de la classe Menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><showRoot>
     
      </showRoot></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Occurrence de la classe Menu. 
     
      </apiDesc><apiOperationClassifier>mx.controls:Menu</apiOperationClassifier></apiReturn><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Conteneur que le contrôle PopUpManager utilise pour insérer le contrôle Menu. Le contrôle Menu peut être un parent de cet objet.
     
      </apiDesc></apiParam><apiParam><apiItemName>mdp</apiItemName><apiType value="Object"/><apiDesc>Fournisseur de données du contrôle Menu. 
      </apiDesc></apiParam><apiParam><apiItemName>showRoot</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Indicateur booléen précisant si le nœud racine du fournisseur de données doit être affiché.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée et retourne une occurrence de la classe Menu. Le contenu du contrôle Menu est déterminé par l’argument <codeph>mdp</codeph> de la méthode. Le contrôle Menu est inséré dans le conteneur parent spécifié par l’argument <codeph>parent</codeph> de la méthode. Cette méthode n’affiche pas le contrôle Menu. En revanche, elle crée simplement le contrôle Menu et autorise les modifications sur les occurrences Menu avant l’affichage du contrôle Menu. Pour afficher le contrôle Menu, appelez la méthode <codeph>Menu.show()</codeph>.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#Menu"><linktext>mx.controls.Menu</linktext></link><link href="mx.controls.xml#Menu"><linktext>mx.controls.Menu</linktext></link><link href="mx.controls.xml#Menu/popUpMenu()"><linktext>mx.controls.Menu.popUpMenu()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:Menu:hide"><apiName>hide</apiName><shortdesc>
      Masque le contrôle Menu et ses sous-menus si le contrôle Menu est visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Masque le contrôle Menu et ses sous-menus si le contrôle Menu est visible.  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Menu:protected:makeListData"><apiName>makeListData</apiName><shortdesc>
      Crée une nouvelle occurrence MenuListData et renseigne les champs en fonction de l’élément du fournisseur de données de saisie.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>Objet ListData récemment créé.
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:BaseListData</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Elément du fournisseur de données utilisé pour renseigner la propriété ListData.
      </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>UID de l’élément.
      </apiDesc></apiParam><apiParam><apiItemName>rowNum</apiItemName><apiType value="int"/><apiDesc>Index de l’élément dans le fournisseur de données.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Crée une nouvelle occurrence MenuListData et renseigne les champs en fonction de l’élément du fournisseur de données de saisie. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Menu:protected:measure"><apiName>measure</apiName><shortdesc>
      Calcule la largeur et la hauteur préférées du contrôle Menu en fonction des largeurs et hauteurs de ses éléments de menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Calcule la largeur et la hauteur préférées du contrôle Menu en fonction des largeurs et hauteurs de ses éléments de menu. Cette méthode ne prend pas en compte la position et la taille des sous-menus. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Menu:popUpMenu"><apiName>popUpMenu</apiName><shortdesc>
      Définit l’objet dataProvider d’un contrôle Menu et positionne le contrôle Menu dans le conteneur parent spécifié.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>menu</apiItemName><apiOperationClassifier>mx.controls:Menu</apiOperationClassifier><apiDesc>Contrôle Menu à afficher. 
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Conteneur que le contrôle PopUpManager utilise pour insérer le contrôle Menu. Le contrôle Menu peut être un parent de cet objet. Si vous omettez cette propriété, la méthode définit le parent du contrôle Menu sur l’application. 
     
      </apiDesc></apiParam><apiParam><apiItemName>mdp</apiItemName><apiType value="Object"/><apiDesc>Objet dataProvider défini sur le contrôle Menu affiché. Si vous omettez cette propriété, la méthode définit le fournisseur de données Menu sur un nouvel objet XML vide.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit l’objet dataProvider d’un contrôle Menu et positionne le contrôle Menu dans le conteneur parent spécifié. Cette méthode n’affiche pas le contrôle Menu ; vous devez utiliser la méthode <codeph>Menu.show()</codeph> pour l’afficher. La méthode <codeph>Menu.createMenu()</codeph> fait appel à cette méthode.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Menu:protected:setMenuItemToggled"><apiName>setMenuItemToggled</apiName><shortdesc>
      Fait basculer l’élément de menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>Elément de menu à basculer.
      </apiDesc></apiParam><apiParam><apiItemName>toggle</apiItemName><apiType value="Boolean"/><apiDesc>Valeur booléenne qui indique si l’élément est basculé. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Fait basculer l’élément de menu. L’identifiant du type de l’élément de menu doit être une case à cocher ou une case d’option. Sinon, cette méthode n’a aucun effet.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Menu:show"><apiName>show</apiName><shortdesc>
      Affiche le contrôle Menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>xShow</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Emplacement horizontal de l’angle supérieur gauche du contrôle Menu (facultatif).
     
      </apiDesc></apiParam><apiParam><apiItemName>yShow</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Emplacement vertical de l’angle supérieur gauche du contrôle Menu (facultatif).
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Affiche le contrôle Menu. Si le contrôle Menu n’est pas visible, cette méthode lance le contrôle Menu dans l’angle supérieur gauche de l’application parent aux coordonnées données, redimensionne le contrôle Menu comme il convient et rend le contrôle Menu visible. <codeph/> Par exemple, si le contrôle Menu est un conteneur HBox imbriqué dans un conteneur Panel, les coordonnées x et y sont basées sur le conteneur Application et non sur le conteneur HBox.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:Menu:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      Objet qui accède aux objets du fournisseur de données et les manipule.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.menuClasses:IMenuDataDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      Objet qui accède aux objets du fournisseur de données et les manipule. Le contrôle Menu délègue au descripteur de données pour obtenir des informations sur ses données. Ces données sont ensuite utilisées pour analyser et déplacer la source de données. Le descripteur de données défini pour le contrôle racine est utilisé pour tous les sous-menus. Valeur par défaut d’une occurrence interne de la classe DefaultDataDescriptor.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Menu:hasRoot:get"><apiName>hasRoot</apiName><shortdesc>
      Indicateur précisant que le fournisseur de données actuel comporte un nœud racine. Par exemple, un nœud supérieur unique dans une structure hiérarchique.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur précisant que le fournisseur de données actuel comporte un nœud racine. Par exemple, un nœud supérieur unique dans une structure hiérarchique. XML et Object sont des exemples de types dotés de nœuds racine, tandis que List and Array n’en ont pas.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#Menu/showRoot"><linktext>showRoot</linktext></link></related-links></apiValue><apiValue id="mx.controls:Menu:parentMenu:get"><apiName>parentMenu</apiName><shortdesc>
      Menu parent dans une chaîne de menus hiérarchique, où le menu actuel est un sous-menu du parent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:Menu</apiValueClassifier></apiValueDef><apiDesc>
      Menu parent dans une chaîne de menus hiérarchique, où le menu actuel est un sous-menu du parent.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Menu:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      Indicateur booléen précisant si le nœud racine du fournisseur de données doit être affiché.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Indicateur booléen précisant si le nœud racine du fournisseur de données doit être affiché. Si l’objet du fournisseur de données a un nœud racine et que la valeur de showRoot est <codeph>false</codeph>, le contrôle Menu n’affiche pas le nœud racine. Seuls les descendants du nœud racine seront affichés. Cet indicateur n’a aucun effet sur les fournisseurs de données sans nœud racine, comme les contrôles Lists et Arrays. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#Menu/hasRoot"><linktext>hasRoot</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
  Le contrôle VScrollBar (ScrollBar verticale) permet de contrôler la portion de données qui s’affiche lorsqu’il existe plus de données que la zone d’affichage ne peut en contenir.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="direction"/><Alternative owner="mx.controls:VScrollBar" replacement="spark.components.VScrollBar" since="4.0">
	</Alternative><styles><style format="Time" inherit="no" name="repeatInterval" owner="mx.controls:VScrollBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de millisecondes entre les événements <codeph>buttonDown</codeph> si l’utilisateur maintient le bouton de la souris enfoncé. La valeur par défaut est 35.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="mx.controls:VScrollBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de millisecondes à attendre après le premier événement<codeph>buttonDown</codeph> avant de répéter les événements <codeph>buttonDown</codeph> à <codeph>repeatInterval</codeph>. La valeur par défaut est 500.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VScrollBar&gt;</code> tag inherits all the
  tag attributes of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:VScrollBar
    <strong>Styles</strong>
    repeatDelay="500"
    repeatInterval="35"
 
    <strong>Events</strong>
    scroll="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.scrollClasses:ScrollBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle VScrollBar (ScrollBar verticale) permet de contrôler la portion de données qui s’affiche lorsqu’il existe plus de données que la zone d’affichage ne peut en contenir. Ce contrôle prolonge le contrôle ScrollBar de base. 
  
  <p>Bien que vous puissiez utiliser le contrôle VScrollBar de façon autonome, vous le combinez généralement dans un autre groupe de composants pour bénéficier de la fonctionnalité de défilement.</p>
  
  <p>Un contrôle ScrollBar comprend quatre parties : deux boutons fléchés, un rail et un curseur. La position du curseur et l’affichage des boutons fléchés dépendent de l’état actuel du contrôle ScrollBar. Pour calculer son état d’affichage, le contrôle ScrollBar utilise quatre paramètres :</p>
 
  <ul>
    <li>Valeur de plage minimale</li>
    <li>Valeur de plage maximale</li>
    <li>Position actuelle : doit se trouver entre les valeurs de plage minimale et maximale</li>
    <li>Taille de la fenêtre : représente le nombre d’éléments de la plage que vous pouvez afficher en même temps. Le nombre d’éléments doit être inférieur ou égal à la plage, celle-ci correspondant au jeu de valeurs comprises entre la valeur minimale et la valeur maximale de la plage.</li>
  </ul>
  
  </apiDesc><example conref="VScrollBarExample.mxml"><swfblock conref="examples/VScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.scrollClasses.xml#ScrollBar"><linktext>mx.controls.scrollClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="mx.controls:VScrollBar_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Distribué lorsque le contrôle ScrollBar défile via l’action initiée par l’utilisateur ou par programme.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le contrôle ScrollBar défile via l’action initiée par l’utilisateur ou par programme. 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:VScrollBar:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
  Le contrôle VideoDisplay permet de lire un fichier FLV dans une application Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:VideoDisplay" replacement="spark.components.VideoPlayer" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="shadowDistance" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Distance de l’ombre portée. Si la propriété est définie sur une valeur négative, l’ombre apparaît au-dessus du composant.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="String">
<description>
  Direction de l’ombre portée. Les valeurs possibles sont <codeph>"left"</codeph>, <codeph>"center"</codeph> et <codeph>"right"</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur de l’ombre portée.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.controls:VideoDisplay" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b/><codeph/> Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Propriété booléenne qui indique si le composant comporte une ombre portée visible. Ce style est utilisé avec <codeph>borderStyle="solid"</codeph>. La valeur par défaut est <codeph>false</codeph>.
 
  <p><b>Remarque :</b> pour que les ombres portées apparaissent sur des conteneurs, définissez les propriétés <codeph>backgroundColor</codeph> ou <codeph>backgroundImage</codeph>. Sinon, l’ombre s’affiche derrière le conteneur, car l’arrière-plan par défaut d’un conteneur est transparent.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Rayon des angles des composants. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est 0. La valeur par défaut du contrôle ApplicationControlBar est 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.controls:VideoDisplay" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Epaisseur du cadre de sélection. Utilisé uniquement lorsque la propriété <codeph>borderStyle</codeph> est définie sur <codeph>"solid"</codeph>.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.controls:VideoDisplay" playerVersion="Flash9" type="String">
<description>
  Style du cadre de sélection. Les valeurs possibles sont <codeph>"none"</codeph>, <codeph>"solid"</codeph>, <codeph>"inset"</codeph> et <codeph>"outset"</codeph>. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>"inset"</codeph>. La valeur par défaut de la plupart des conteneurs est <codeph>"none"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.controls:VideoDisplay" playerVersion="Flash9" type="Class">
<description>
  Classe d’habillage de bordure du composant. La classe mx.skins.halo.HaloBorder est la valeur par défaut de tous les composants qui ne définissent pas explicitement leur propre valeur par défaut. La valeur par défaut du conteneur Panel est mx.skins.halo.PanelSkin. Pour déterminer la valeur par défaut d’un composant, voir le fichier default.css.
 
  </description>
<default>mx.skins.halo.HaloBorder
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="String">
<description>
  Côtés du cadre de sélection. Chaîne délimitée par des espaces qui indique quels côtés de la bordure afficher. La chaîne peut contenir les valeurs <codeph>"left"</codeph>, <codeph>"top"</codeph>, <codeph>"right"</codeph> et <codeph>"bottom"</codeph> dans n’importe quel ordre. La valeur par défaut est <codeph>"left top right bottom"</codeph>, ce qui permet de montrer les quatre côtés. Ce style est uniquement utilisé lorsque la propriété borderStyle est <codeph>"solid"</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Couleur de la bordure. La valeur par défaut dépend de la classe du composant. Si elle n’est pas remplacée par la classe, la valeur par défaut est <codeph>0xB7BABC</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.controls:VideoDisplay" playerVersion="Flash10" theme="spark" type="Number">
<description>
  
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="String">
<description>
  Met à l’échelle l’image spécifiée par la propriété <codeph>backgroundImage</codeph> sur différentes tailles de pourcentage. Une valeur de <codeph>"100%"</codeph> étire l’image afin de remplir l’intégralité du composant. Pour spécifier un pourcentage, vous devez inclure le symbole de pourcentage (%). La valeur par défaut du conteneur Application est <codeph>100%</codeph>. La valeur par défaut de tous les autres conteneurs est <codeph>auto</codeph>, ce qui permet de conserver la taille d’origine de l’image.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Image d’arrière-plan d’un composant. Il peut s’agir d’une URL absolue ou relative ou d’une classe. <codeph/><codeph/> L’image d’arrière-plan s’affiche par dessus la couleur d’arrière-plan. La valeur par défaut est <codeph>undefined</codeph>, c’est-à-dire « non définie ». Si ce style et le style de la propriété <codeph>backgroundColor</codeph> ne sont pas définis, le composant est doté d’un arrière-plan transparent.
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, l’image d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan du composant lorsqu’il est désactivé. La valeur par défaut globale est <codeph>undefined</codeph>. La valeur par défaut des contrôles List est <codeph>0xDDDDDD</codeph> (gris clair). Si un conteneur est désactivé, l’arrière-plan est estompé et le degré d’estompe est contrôlé par le style <codeph>disabledOverlayAlpha</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Couleur d’arrière-plan d’un composant. Les deux propriétés <codeph>backgroundColor</codeph> et <codeph>backgroundImage</codeph> peuvent être définies. Certains composants n’ont pas d’arrière-plan. Le contrôle DataGrid ignore ce style. La valeur par défaut est <codeph>undefined</codeph>, ce qui signifie qu’elle n’est pas définie. Si ce style et le style de la propriété <codeph>backgroundImage</codeph> sont <codeph>undefined</codeph>, le composant est doté d’un arrière-plan transparent.
 
  <p>Pour le conteneur Application, ce style indique la couleur d’arrière-plan lors du chargement de l’application et un dégradé d’arrière-plan lors de son exécution. Flex calcule le motif de dégradé entre une couleur légèrement plus sombre que la couleur spécifiée et une couleur légèrement plus claire que la couleur spécifiée.</p>
 
  <p>Les habillages par défaut de la plupart des contrôles Flex sont partiellement transparents. Par conséquent, la couleur d’arrière-plan d’un conteneur déteint partiellement sur les contrôles qui se trouvent dans ce conteneur. Vous pouvez éviter cette situation en définissant les valeurs Alpha de la propriété <codeph>fillAlphas</codeph> du contrôle sur 1, comme le montre l’exemple suivant :
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Niveau Alpha de la couleur définie par la propriété <codeph>backgroundColor</codeph>, de l’image ou fichier SWF défini par le style <codeph>backgroundImage</codeph>. Les valeurs valides vont de 0.0 à 1.0. Pour la plupart des contrôles, la valeur par défaut est 1.0, mais pour les contrôles ToolTip, la valeur par défaut est de 0.95 et pour les contrôles Alert, elle est de 0.9.
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:VideoDisplay&gt;</code> tag inherits all the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:VideoDisplay
    <strong>Properties</strong>
    autoBandWidthDetection="false|true"
    autoPlay="true|false"
    autoRewind="true|false"
    bufferTime="0.1"
    cuePointManagerClass=""
    cuePoints=""
    idleTimeout="300000"
    live="false|true"
    maintainAspectRatio="true|false"
    playheadTime=""
    playheadUpdateInterval="250"
    progressInterval="250"
    source=""
    totalTime=""
    volume="0.75"
  
    <b>Styles</b>
    backgroundAlpha="1.0"
    backgroundColor="0x000000"
    backgroundImage="undefined"
    backgroundSize="undefined"
    borderColor="undefined"
    borderSides="left top right bottom"
    borderSkin="ClassReference('mx.skins.halo.HaloBorder')"
    borderStyle="none"
    borderThickness="1"
    cornerRadius="0"
    dropShadowColor="0x000000"
    dropShadowEnabled="false|true"
    shadowDirection="center"
    shadowDistance="2"
  
    <strong>Events</strong>
    close="<i>No default</i>"
    complete="<i>No default</i>"
    cuePoint="<i>No default</i>"
    playheadUpdate="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
    rewind="<i>No default</i>"
    stateChange="<i>No default</i>"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Le contrôle VideoDisplay permet de lire un fichier FLV dans une application Flex. Il prend en charge le téléchargement progressif avec le protocole HTTP, la diffusion en continu depuis Flash Media Server et depuis un objet Camera.
 
  </apiDesc><example conref="VideoDisplayExample.mxml"><swfblock conref="examples/VideoDisplayExample.swf"/></example></apiClassifierDetail><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.STATE_CHANGE_stateChange"><apiName>stateChange</apiName><shortdesc>
  Distribué lorsque l’état du contrôle change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.STATE_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’état du contrôle change.
 
  <p>Vous pouvez utiliser cet événement pour savoir quand la lecture entre et quitte l’état non réactif (par exemple au milieu d’une connexion, d’un redimensionnement ou d’un rembobinage), à quels moments les appels des méthodes <codeph>play()</codeph>, <codeph>pause()</codeph> et <codeph>stop()</codeph> et les inscriptions dans la propriété <codeph>playHeadTime</codeph> sont mis en attente, puis exécutés lorsque le lecteur entre dans l’état réactif.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.REWIND_rewind"><apiName>rewind</apiName><shortdesc>
  Distribué lorsque le contrôle se rembobine automatiquement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.REWIND</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le contrôle se rembobine automatiquement.
 
  </apiDesc></adobeApiEventDetail><related-links><link href="mx.controls.xml#VideoDisplay/autoRewind"><linktext>autoRewind</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.READY_ready"><apiName>ready</apiName><shortdesc>
  Distribué lorsque le fichier FLV est chargé et prêt pour la lecture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.READY</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque le fichier FLV est chargé et prêt pour la lecture.
 
  <p>Cet événement est distribué la première fois que le contrôle VideoDisplay entre dans un état réactif après le chargement d’un nouveau fichier FLV par la méthode <codeph>load()</codeph> ou <codeph>play()</codeph>. Il est distribué une seule fois pour chaque fichier FLV chargé.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  Distribué en continu jusqu’à ce que le fichier FLV soit entièrement téléchargé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué en continu jusqu’à ce que le fichier FLV soit entièrement téléchargé.
 
  <p>Vous pouvez utiliser cet événement pour vérifier le nombre d’octets dans le tampon. Cet événement commence à être distribué lorsque la méthode <codeph>load()</codeph> ou <codeph>play()</codeph> est appelée pour la première fois et se termine lorsque tous les octets sont chargés ou si une erreur réseau se produit.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><shortdesc>
  Distribué en continu lorsque la vidéo est en cours de lecture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué en continu lorsque la vidéo est en cours de lecture. L’intervalle entre les événements, en millisecondes, est spécifié par la propriété <codeph>playheadUpdateInterval</codeph>, dont la valeur par défaut est 250 ms. Cet événement n’est pas distribué lorsque la vidéo est interrompue ou arrêtée.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.MetadataEvent.METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><shortdesc>
  Distribué lorsque les premières métadonnées du fichier FLV sont atteintes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MetadataEvent.METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>mx.events.MetadataEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque les premières métadonnées du fichier FLV sont atteintes.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.CuePointEvent.CUE_POINT_cuePoint"><apiName>cuePoint</apiName><shortdesc>
  Distribué lorsque la valeur de la propriété time d’un point de repère correspond à l’emplacement de lecture actuel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CuePointEvent.CUE_POINT</apiEventType><adobeApiEventClassifier>mx.events.CuePointEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la valeur de la propriété <codeph>time</codeph> d’un point de repère correspond à l’emplacement de lecture actuel.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Distribué lorsque la tête de lecture atteint la fin du fichier FLV.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque la tête de lecture atteint la fin du fichier FLV.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  Distribué lorsque l’objet NetConnection est fermé, soit par expiration du délai ou par l’appel de la méthode close().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Distribué lorsque l’objet NetConnection est fermé, soit par expiration du délai ou par l’appel de la méthode <codeph>close()</codeph>. Vous utilisez cet événement avec Flash Media Server.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:VideoDisplay:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:VideoDisplay:attachCamera"><apiName>attachCamera</apiName><shortdesc>
      Indique de lire un flux vidéo depuis une caméra.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>camera</apiItemName><apiType value="flash.media:Camera"/><apiDesc>Objet Camera qui capture des données vidéo.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Indique de lire un flux vidéo depuis une caméra. La vidéo s’affiche dans les limites du contrôle dans la fenêtre d’application. N’appelez pas la méthode <codeph>play()</codeph> lorsque vous affichez un flux depuis une caméra.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:close"><apiName>close</apiName><shortdesc>
      Force la fermeture d’un flux d’entrée et d’une connexion à Flash Media Server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Force la fermeture d’un flux d’entrée et d’une connexion à Flash Media Server. L’appel de cette méthode distribue l’événement <codeph>close</codeph>. En général, l’appel direct de cette méthode n’est pas nécessaire, car la connexion est automatiquement fermée à la fin de la période d’inactivité, telle que définie par la propriété <codeph>idleTimeout</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      Crée la bordure de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Crée la bordure de ce composant. Normalement, la bordure est déterminée par les styles <codeph>borderStyle</codeph> et <codeph>borderSkin</codeph>. La propriété de la bordure doit être définie sur l’occurrence de la bordure.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      Répond aux changements de taille en définissant les positions et les tailles des bordures.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Répond aux changements de taille en définissant les positions et les tailles des bordures.
     
      <p>La méthode <codeph>VideoDisplay.layoutChrome()</codeph> définit la position et la taille de la bordure du contrôle VideoDisplay. Dans chaque sous-classe du contrôle VideoDisplay, la méthode <codeph>layoutChrome()</codeph> de la sous-classe doit appeler la méthode <codeph>super.layoutChrome()</codeph>, afin de positionner correctement la bordure.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:load"><apiName>load</apiName><shortdesc>
      Charge le fichier multimédia sans le lire.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Charge le fichier multimédia sans le lire.
     
      <p>Cette méthode est similaire à la méthode <codeph>play()</codeph>, mais elle provoque le chargement du fichier sans sa lecture. Un redimensionnement sera effectué si besoin est. Après le chargement et le redimensionnement automatique, l’état du contrôle est défini sur <codeph>VideoEvent.PAUSED</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:pause"><apiName>pause</apiName><shortdesc>
      Interrompt la lecture sans déplacer la tête de lecture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Interrompt la lecture sans déplacer la tête de lecture. Si la lecture est déjà interrompue ou arrêtée, cette méthode n’a aucun effet.  
     
      <p>Pour relancer la lecture, appelez la méthode <codeph>play()</codeph>.</p>
     
      <p>Si le contrôle ne répond pas, la demande est mise en file d’attente.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:play"><apiName>play</apiName><shortdesc>
      Lit le fichier multimédia.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Lit le fichier multimédia. Si le fichier n’est pas chargé, elle le charge. Vous pouvez appeler cette méthode alors que la lecture est interrompue, arrêtée ou lorsque le contrôle est en cours de lecture.  
     
      <p>Si le contrôle ne répond pas, la demande est mise en file d’attente.</p>
     
      <p>Pour diffuser en continu une vidéo à partir d’une caméra, appelez la méthode <codeph>attachCamera()</codeph> au lieu de la méthode <codeph>play()</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:stop"><apiName>stop</apiName><shortdesc>
      Arrête la lecture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Arrête la lecture. Si la propriété <codeph>autoRewind</codeph> est définie sur <codeph>true</codeph>, rembobine la vidéo jusqu’à la première image.  
     
      <p>Pour relancer la lecture, appelez la méthode <codeph>play()</codeph>.</p>
     
      <p>Si la lecture est déjà arrêtée, cette méthode n’a aucun effet. Si le contrôle ne répond pas, la demande est mise en file d’attente.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:VideoDisplay:protected:border"><apiName>border</apiName><shortdesc>
      L’objet de bordure du contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc>
      L’objet de bordure du contrôle.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:autoBandWidthDetection:get"><apiName>autoBandWidthDetection</apiName><shortdesc>
      Indique si le contrôle VideoDisplay doit utiliser la fonctionnalité de détection de bande passante automatique intégrée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le contrôle VideoDisplay doit utiliser la fonctionnalité de détection de bande passante automatique intégrée. Lorsque la valeur est <codeph>false</codeph>, vous n’avez pas besoin d’un fichier main.asc sur Flash Media Server (FMS) 2 pour vous connecter à FMS. Si la valeur est <codeph>true</codeph>, vous devez implémenter un fichier main.asc et le stocker dans une structure de répertoires de FMS. Le fichier main.asc doit définir les fonctions suivantes :
     
      <ul>
      <li><pre>
      application.onConnect = function(p_client, p_autoSenseBW)
      {
        //Add security code here.     
        this.acceptConnection(p_client);      
        if (p_autoSenseBW)
          this.calculateClientBw(p_client);
        else
          p_client.call("onBWDone");
      }</pre></li>
     
      <li><pre>
      application.calculateClientBw = function(p_client)
      {
        // Add code to set the clients BandWidth.
        // Use p_client.getStats() which returns bytes_in 
        // and bytes_Out and check your bandWidth using 
        // p_client.call("onBWCheck", result, p_client.payload).
        p_client.call("onBWDone");
      }
      </pre>
      </li>
     
      <li><pre>
      Client.prototype.getStreamLength = function(p_streamName)
      {
        return Stream.length(p_streamName);
      }</pre>
      </li>
      </ul>
      
      Pour plus d’informations sur l’écriture d’un fichier main.asc, voir la documentation FMS.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:autoPlay:get"><apiName>autoPlay</apiName><shortdesc>
      Indique si la vidéo doit se mettre en lecture immédiatement après la définition de la propriété source.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si la vidéo doit se mettre en lecture immédiatement après la définition de la propriété <codeph>source</codeph>. Si la valeur est <codeph>true</codeph>, le fichier vidéo est immédiatement placé en mémoire tampon et est lu.
     
      <p>Même si la propriété <codeph>autoPlay</codeph> est définie sur <codeph>false</codeph>, Flex commence à charger la vidéo après l’appel de la méthode <codeph>initialize()</codeph>. Pour Flash Media Server, cela signifie la création du flux et le chargement de la première image à afficher (et en charge plus si la propriété <codeph>autoSize</codeph> ou <codeph>aspectRatio</codeph> est définie sur <codeph>true</codeph>). Dans le cas d’un téléchargement avec le protocole HTTP, Flex commence à télécharger le flux et affiche la première image.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
      Indique si le fichier FLV doit être rembobiné jusqu’à la première image lorsque la lecture s’arrête, soit en appelant la méthode stop(), soit en atteignant la fin du flux.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le fichier FLV doit être rembobiné jusqu’à la première image lorsque la lecture s’arrête, soit en appelant la méthode <codeph>stop()</codeph>, soit en atteignant la fin du flux. Cette propriété n’a aucun effet pour la diffusion en continu live des vidéos.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Renvoie un objet EdgeMetrics qui comporte quatre propriété : left, top, right et bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Renvoie un objet EdgeMetrics qui comporte quatre propriétés : <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> et <codeph>bottom</codeph>. La valeur de chaque propriété est égale à l’épaisseur du côté de la bordure qui entoure le contrôle, en pixels.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:bufferTime:get"><apiName>bufferTime</apiName><shortdesc>
      Nombre de secondes de la vidéo à placer en mémoire tampon avant de commencer la lecture du fichier vidéo.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Nombre de secondes de la vidéo à placer en mémoire tampon avant de commencer la lecture du fichier vidéo. Pour les connexiosn lentes dont la diffusion en continu passe par RTMP, il est important d’augmenter cette propriété par rapport à la valeur par défaut.  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      Nombre d’octets déjà chargés qui sont disponibles pour la lecture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre d’octets déjà chargés qui sont disponibles pour la lecture. La valeur est utile uniquement pour les fichiers multimédias chargés avec le protocole HTTP.
     
      <p>Contient la valeur -1 s’il n’existe aucun flux d’entrée, lorsque le flux provient de Flash Media Server ou si l’information n’est pas encore disponible. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      Nombre total d’octets à charger.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Nombre total d’octets à charger. La valeur est utile uniquement pour les fichiers multimédias chargés avec le protocole HTTP.
     
      <p>Contient la valeur -1 s’il n’existe aucun flux d’entrée, lorsque le flux provient de Flash Media Server ou si l’information n’est pas encore disponible. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:cuePointManager:get"><apiName>cuePointManager</apiName><shortdesc>
      Occurrence de la classe CuePointManager associée au contrôle VideoPlayer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Occurrence de la classe CuePointManager associée au contrôle VideoPlayer. Vous pouvez utiliser cet objet pour contrôler les points de repère ou utiliser la propriété <codeph>cuePoints</codeph>.
     
      <p>Vous pouvez utiliser les points de repère pour déclencher les événements <codeph>cuePoint</codeph> lorsque la lecture de votre vidéo atteint un emplacement donné. Pour définir des points de repère, utilisez les méthodes de la classe CuePointManager. </p>
     
     <p>Les points de repère imbriqués dans le fichier FLV ne sont pas disponibles via <codeph>cuePoints</codeph> ou <codeph>cuePointManager</codeph>. Pour les récupérer, vous pouvez accéder à la propriété <codeph>metadata</codeph> ou à l’événement <codeph>metadataReceived</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.videoClasses.xml#CuePointManager"><linktext>mx.controls.videoClasses.CuePointManager</linktext></link></related-links></apiValue><apiValue id="mx.controls:VideoDisplay:cuePointManagerClass:get"><apiName>cuePointManagerClass</apiName><shortdesc>
      Gestionnaire des points de repère à utiliser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc>
      Gestionnaire des points de repère à utiliser. Définissez-le sur mx.controls.videoClasses.CuePointManager pour activer la gestion des points de repère.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.videoClasses.xml#CuePointManager"><linktext>mx.controls.videoClasses.CuePointManager</linktext></link></related-links></apiValue><apiValue id="mx.controls:VideoDisplay:cuePoints:get"><apiName>cuePoints</apiName><shortdesc>
      Tableau de points de repère associés au contrôle.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Tableau de points de repère associés au contrôle. Vous pouvez utiliser cette propriété pour contrôler les points de repère ou utiliser la propriété <codeph>cuePointManager</codeph>.
     
      <p>Vous pouvez utiliser les points de repère pour déclencher les événements <codeph>cuePoint</codeph> lorsque la lecture de votre vidéo atteint un emplacement donné. Pour définir les points de repère, vous transmettez un tableau à la propriété <codeph>cuePoints</codeph>. </p>
     
     <p>Les points de repère imbriqués dans le fichier FLV ne sont pas disponibles via <codeph>cuePoints</codeph> ou <codeph>cuePointManager</codeph>. Pour les récupérer, vous pouvez accéder à la propriété <codeph>metadata</codeph> ou à l’événement <codeph>metadataReceived</codeph>.</p>
     
      <p>Chaque élément du tableau contient deux champs :</p>
      <ul>
        <li>Le champ <codeph>name</codeph> contient un nom arbitraire du point de repère.</li>
        <li>Le champ <codeph>time</codeph> contient l’emplacement de la tête de lecture, en secondes, du contrôle VideoDisplay avec lequel le point de repère est associé.</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:idleTimeout:get"><apiName>idleTimeout</apiName><shortdesc>
      Indique la durée, en millisecondes, pendant laquelle la connexion est inactive (la lecture est interrompue ou arrêtée) avant que la connexion à Flash Media Server ne soit arrêtée.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>300000 (five minutes)
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique la durée, en millisecondes, pendant laquelle la connexion est inactive (la lecture est interrompue ou arrêtée) avant que la connexion à Flash Media Server ne soit arrêtée. Cette propriété n’a aucun effet sur le téléchargement avec le protocole HTTP des fichiers FLV. Si cette propriété est définie lorsque le flux est déjà inactif, elle redémarre le délai d’expiration de l’inactivité avec une nouvelle valeur.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:live:get"><apiName>live</apiName><shortdesc>
      Indique si le contrôle effectue une diffusion en continu live.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le contrôle effectue une diffusion en continu live. Définissez cette propriété sur <codeph>true</codeph> lors de la diffusion en continu live depuis Flash Media Server. 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:maintainAspectRatio:get"><apiName>maintainAspectRatio</apiName><shortdesc>
      Indique si le contrôle doit conserver la proportion d’origine lors du redimensionnement de la vidéo.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique si le contrôle doit conserver la proportion d’origine lors du redimensionnement de la vidéo.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:metadata:get"><apiName>metadata</apiName><shortdesc>
     Objet contenant un paquet d’informations sur les métadonnées qui est reçu d’un appel de la méthode de rappel NetStream.onMetaData(), si elle est disponible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
     Objet contenant un paquet d’informations sur les métadonnées qui est reçu d’un appel de la méthode de rappel <codeph>NetStream.onMetaData()</codeph>, si elle est disponible. Prêt lorsque l’événement <codeph>metadataReceived</codeph> est distribué.
     
     <p>Si le fichier FLV est codé à l’aide de l’encodeur de Flash 8, la propriété <codeph>metadata</codeph> contient les informations présentées ci-dessous. Les fichiers FLV plus anciens contiennent uniquement les valeurs <codeph>height</codeph>, <codeph>width</codeph> et <codeph>duration</codeph>.</p>
     
     <adobetable class="innertable">
      
          
          
     
     
     
     
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry><b>Paramètre</b></entry><entry><b>Description</b></entry></row></thead><tbody><row><entry><codeph>canSeekToEnd</codeph></entry><entry>Valeur booléenne définie sur <codeph>true</codeph> si le fichier FLV est codé avec une image-clé sur la dernière image qui permet de rechercher jusqu’à la fin d’un clip téléchargé progressivement. Elle est définie sur <codeph>false</codeph> si le fichier FLV n’est pas codé avec une image-clé sur la dernière image.</entry></row><row><entry><codeph>cuePoints</codeph></entry><entry>Tableau d’objets, un pour chaque point de repère imbriqué dans le fichier FLV. Cette valeur n’est pas définie si le fichier FLV ne contient pas de points de repère. Chaque objet possède les propriétés ci-dessous.
          
              <ul>
                  <li><codeph>type</codeph>—Chaîne définissant le type de point de repère comme « navigation » ou « event ».</li>
                  <li><codeph>name</codeph>—Chaîne correspondant au nom du point de repère.</li>
                  <li><codeph>time</codeph>—Nombre correspondant à la durée du point de repère en secondes avec une précision de trois chiffres après la virgule (millisecondes).</li>
                  <li><codeph>parameters</codeph>—Objet facultatif doté de paires nom-valeur qui sont désignées par l’utilisateur lorsqu’il crée les points de repère.</li>
              </ul>
          </entry></row><row><entry><codeph>audiocodecid</codeph></entry><entry>Nombre indiquant le codec audio (technique de codage/décodage) utilisé.</entry></row><row><entry><codeph>audiodelay</codeph></entry><entry> Nombre représentant l’heure <codeph>0</codeph> dans le fichier source à partir de laquelle le fichier FLV a été encodé. 
     <p>Le contenu vidéo est légèrement retardé pour que l’audio puisse être synchronisé. Par exemple, si la valeur <codeph>audiodelay</codeph> est <codeph>.038</codeph>, la vidéo qui commençait à <codeph>0</codeph> dans le fichier source commence à <codeph>.038</codeph> dans le fichier FLV.</p> 
     <p>Notez que la classe VideoDisplay compense ce retard dans ses paramètres de temps. Vous pouvez donc conserver les paramètres que vous utilisiez dans le fichier source.</p>
</entry></row><row><entry><codeph>audiodatarate</codeph></entry><entry>Nombre de kilo-octets par seconde de données audio.</entry></row><row><entry><codeph>videocodecid</codeph></entry><entry>Nombre correspondant à la version codec utilisée pour encoder la vidéo.</entry></row><row><entry><codeph>framerate</codeph></entry><entry>Nombre correspondant à la cadence du fichier FLV.</entry></row><row><entry><codeph>videodatarate</codeph></entry><entry>Nombre correspondant à la cadence des données vidéo du fichier FLV.</entry></row><row><entry><codeph>height</codeph></entry><entry>Nombre correspondant à la hauteur du fichier FLV.</entry></row><row><entry><codeph>width</codeph></entry><entry>Nombre correspondant à la largeur du fichier FLV.</entry></row><row><entry><codeph>duration</codeph></entry><entry>Nombre qui indique la durée du fichier FLV en secondes.</entry></row></tbody></tgroup></adobetable>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      Position de la tête de lecture, mesurée en secondes, depuis le début de la lecture de la vidéo.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Position de la tête de lecture, mesurée en secondes, depuis le début de la lecture de la vidéo. L’objet d’événement pour de nombreux événements VideoPlay inclut l’emplacement de la tête de lecture, de sorte que vous pouvez déterminer l’endroit dans le fichier vidéo où l’événement s’est produit.
     
      <p>Définir cette propriété sur une valeur en secondes lance une opération de recherche. Si la vidéo est en cours de lecture, elle continue à être lue à partir du nouvel emplacement de la tête de lecture. Si la vidéo est interrompue, elle recherche le nouvel emplacement de la tête de lecture et reste interrompue. Si la vidéo est arrêtée, elle recherche le nouvel emplacement de la tête de lecture et passe en état d’interruption. Définir cette propriété n’a aucun effet avec les diffusions en continu live.</p>
     
      <p>Si le nouvel emplacement de la tête de lecture est inférieur à 0 ou NaN, le contrôle génère une exception. Si le nouvel emplacement de la tête de lecture est au-delà de la fin de la vidéo ou a dépasse la quantité du fichier vidéo téléchargée jusque là, le contrôle tente tout de même la recherche.</p>
     
      <p>Pour un fichier FLV, définir la propriété <codeph>playheadTime</codeph> permet de rechercher l’image-clé la plus proche de la position spécifiée. Les images-clés sont spécifiées dans le fichier FLV au moment de l’encodage. Par conséquent, il est possible que vous ne recherchiez pas le moment correct si aucune image-clé n’est spécifié à cette position.</p>
     
      <p>Si le lecteur est dans un état non réactif, il met la demande en file d’attente.</p>
     
      <p>Cette propriété génère une exception si elle est définie lorsque aucun flux n’est connecté. Utilisez l’événement <codeph>stateChange</codeph> et la propriété <codeph>connected</codeph> pour savoir quand définir cette propriété en toute sécurité.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:playheadUpdateInterval:get"><apiName>playheadUpdateInterval</apiName><shortdesc>
      Indique la durée, en millisecondes, qui sépare chaque événement playheadUpdate.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>250 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique la durée, en millisecondes, qui sépare chaque événement <codeph>playheadUpdate</codeph>.
     
      <p>Si vous définissez cette propriété alors que la vidéo est en cours de lecture, l’horloge redémarre à 0 et l’événement <codeph>playheadUpdate</codeph> suivant a lieu après le nouvel intervalle.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:playing:get"><apiName>playing</apiName><shortdesc>
      Si la valeur est true, le fichier multimédia est en cours de lecture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Si la valeur est <codeph>true</codeph>, le fichier multimédia est en cours de lecture.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:progressInterval:get"><apiName>progressInterval</apiName><shortdesc>
      Indique la durée, en millisecondes, qui sépare chaque événement progress.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>250 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Indique la durée, en millisecondes, qui sépare chaque événement <codeph>progress</codeph> L’événement <codeph>progress</codeph> a lieu continuellement jusqu’à ce que la vidéo soit entièrement téléchargée.
     
      <p>Si vous définissez cette propriété alors que la vidéo est en cours de téléchargement, l’horloge redémarre à 0 et l’événement <codeph>progress</codeph> suivant a lieu après le nouvel intervalle.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:source:get"><apiName>source</apiName><shortdesc>
      Chemin relatif et nom de fichier du fichier FLV à diffuser en continu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Chemin relatif et nom de fichier du fichier FLV à diffuser en continu.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:state:get"><apiName>state</apiName><shortdesc>
      Etat actuel du contrôle VideoDisplay.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>VideoEvent.DISCONNECTED
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Etat actuel du contrôle VideoDisplay. Vous définissez cette propriété en appelant les méthodes <codeph>load()</codeph>, <codeph>play()</codeph>, <codeph>stop()</codeph> et <codeph>pause()</codeph> et en définissant la propriété <codeph>playHeadTime</codeph>.
     
      <p>Cette propriété peut comporter les valeurs suivantes, définies dans la classe VideoEvent : <codeph>VideoEvent.BUFFERING</codeph>, <codeph>VideoEvent.CONNECTION_ERROR</codeph>, <codeph>VideoEvent.DISCONNECTED</codeph>, <codeph>VideoEvent.EXEC_QUEUED_CMD</codeph>, <codeph>VideoEvent.LOADING</codeph>, <codeph>VideoEvent.PAUSED</codeph>, <codeph>VideoEvent.PLAYING</codeph>, <codeph>VideoEvent.RESIZING</codeph>, <codeph>VideoEvent.REWINDING</codeph>, <codeph>VideoEvent.SEEKING</codeph> et <codeph>VideoEvent.STOPPED</codeph>. </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#VideoEvent"><linktext>mx.events.VideoEvent</linktext></link></related-links></apiValue><apiValue id="mx.controls:VideoDisplay:stateResponsive:get"><apiName>stateResponsive</apiName><shortdesc>
      Indique si le contrôle VideoDisplay est dans un état réactif (état true) ou non réactif (état false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Indique si le contrôle VideoDisplay est dans un état réactif (<codeph>true</codeph>) ou non réactif (<codeph>false</codeph>). Le contrôle entre dans un état réactif lorsque la vidéo est chargée ou rembobinée.
      
      <p>Le contrôle est également dans un état réactif lorsque la propriété <codeph>state</codeph> est : <codeph>VideoEvent.CONNECTION_ERROR</codeph>, <codeph>VideoEvent.EXEC_QUEUED_CMD</codeph>, <codeph>VideoEvent.RESIZING</codeph> ou <codeph>VideoEvent.SEEKING</codeph>. </p>
      
      <p>Si le contrôle est dans un état non réactif, les appels des méthodes <codeph>play()</codeph>, <codeph>load()</codeph>, <codeph>stop()</codeph> et <codeph>pause()</codeph> sont mis en file d’attente, puis exécutés lorsque le contrôle passe en état réactif.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:totalTime:get"><apiName>totalTime</apiName><shortdesc>
      Longueur totale du fichier multimédia, en secondes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Longueur totale du fichier multimédia, en secondes. Pour les fichiers vidéo FLV 1.0, définissez cette propriété manuellement. Pour FLV 1.1 et version ultérieure, le contrôle calcule cette valeur automatiquement.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:videoHeight:get"><apiName>videoHeight</apiName><shortdesc>
      Hauteur du fichier FLV chargé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Hauteur du fichier FLV chargé. <codeph>-1</codeph> si aucun fichier FLV n’est encore chargé.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:videoWidth:get"><apiName>videoWidth</apiName><shortdesc>
      Largeur du fichier FLV chargé.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Largeur du fichier FLV chargé. <codeph>-1</codeph> si aucun fichier FLV n’est encore chargé.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:volume:get"><apiName>volume</apiName><shortdesc>
      Niveau du volume, indiqué comme valeur comprise entre 0 et 1.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.75
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Niveau du volume, indiqué comme valeur comprise entre 0 et 1.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:LinkBar"><apiName>LinkBar</apiName><shortdesc>
  Un contrôle LinkBar définit une rangée horizontale ou verticale des contrôles LinkButton qui désignent une série de destinations des liens.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="event" name="click"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les enfants dans le sens vertical.
 
  </description>
<default>8
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:LinkBar" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte du lien lorsque vous cliquez dessus.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:LinkBar" playerVersion="Flash9" type="uint">
<description>
  Couleur de texte du lien lorsque vous le survolez avec la souris.
 
  </description>
<default>0x2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="separatorWidth" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Number">
<description>
  Largeur des séparateurs, en pixels.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="separatorSkin" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Class">
<description>
  Symbole de séparation entre les contrôles LinkButton du contrôle LinkBar. 
 
  </description>
<default>mx.skins.halo.LinkSeparator
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="separatorColor" owner="mx.controls:LinkBar" playerVersion="Flash9" type="uint">
<description>
  Couleur des séparateurs utilisés par l’habillage de séparation par défaut.
 
  </description>
<default>0xC4CCCC
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:LinkBar" playerVersion="Flash9" type="uint">
<description>
  Couleur d’arrière-plan du contrôle LinkButton lorsque vous cliquez dessus.
 
  </description>
<default>0xCDFFC1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:LinkBar" playerVersion="Flash9" type="uint">
<description>
  Couleur des liens lorsque vous les survolez avec la souris. La valeur par défaut dépend du contrôle <codeph>themeColor</codeph> en cours.
 
  </description>
<default>0xEEFEE6 (light green)
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure supérieure et les contrôles LinkButton.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre la bordure inférieure et les contrôles LinkButton.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="linkButtonStyleName" owner="mx.controls:LinkBar" playerVersion="Flash9" type="String">
<description>
  Nom de la déclaration de style CSS qui indique les styles à utiliser pour les éléments de navigation des boutons de lien.
 
  </description>
<default>""
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Number">
<description>
  Nombre de pixels entre les contrôles LinkButton dans le sens horizontal.
 
  </description>
<default>8
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;mx:LinkBar&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:LinkBar
    <b>Properties</b>
    selectedIndex="-1"
  
    <b>Styles</b>
    linkButtonStyleName=""
    horizontalGap="8"
    paddingBottom="2"
    paddingTop="2"
    rollOverColor="0xEEFEE6"
    selectionColor="0xCDFFC1"
    separatorColor="<i>No default</i>"
    separatorSkin="0x000000"
    separatorWidth="1"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x000000"
    verticalGap="8"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:LinkBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:NavBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  Un contrôle LinkBar définit une rangée horizontale ou verticale des contrôles LinkButton qui désignent une série de destinations des liens. Vous utilisez généralement un contrôle LinkBar pour contrôler le conteneur enfant actif d’un conteneur ViewStack ou pour créer un jeu autonome de liens.
 
  <p>Le contrôle LinkBar crée des contrôles LinkButton en fonction de la valeur de sa propriété <codeph>dataProvider</codeph>. Même si le contrôle LinkBar est une sous-classe d’un contrôle Container, n’utilisez pas des méthodes comme <codeph>Container.addChild()</codeph> et <codeph>Container.removeChild()</codeph> pour ajouter ou supprimer des contrôles LinkButton. Utilisez en revanche des méthodes comme <codeph>addItem()</codeph> et <codeph>removeItem()</codeph> pour manipuler la propriété <codeph>dataProvider</codeph>. Le contrôle LinkBar ajoute ou supprime automatiquement les enfants nécessaires en fonction des modifications apportées à la propriété <codeph>dataProvider</codeph>.</p>
 
  <p>Un contrôle LinkBar possède les caractéristiques par défaut suivantes :</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>Caractéristique</entry><entry>Description</entry></row></thead><tbody><row>
        <entry>Taille préférée</entry>
        <entry>Largeur suffisante pour contenir tout le texte de l’étiquette ainsi que la marte et les séparateurs, et hauteur suffisante pour contenir l’enfant le plus grand.</entry>
     </row><row>
        <entry>Règles de redimensionnement des contrôles</entry>
        <entry>Les contrôles LinkBar ne sont pas redimensionnés par défaut. Spécifiez des tailles de pourcentage pour redimensionner votre contrôle LinkBar en fonction de la taille de son conteneur parent.</entry>
     </row><row>
        <entry>Marge</entry>
        <entry>2 pixels pour les propriétés Haut, Bas, Gauche et Droite.</entry>
     </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LinkBarExample.mxml"><swfblock conref="examples/LinkBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#NavBar"><linktext>mx.controls.NavBar</linktext></link><link href="mx.containers.xml#ViewStack"><linktext>mx.containers.ViewStack</linktext></link><link href="mx.controls.xml#LinkButton"><linktext>mx.controls.LinkButton</linktext></link><link href="mx.controls.xml#ToggleButtonBar"><linktext>mx.controls.ToggleButtonBar</linktext></link><link href="mx.controls.xml#ButtonBar"><linktext>mx.controls.ButtonBar</linktext></link></related-links><apiConstructor id="mx.controls:LinkBar:LinkBar"><apiName>LinkBar</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:LinkBar:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      
      Appelé lorsque la valeur d’une propriété de style change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style qui a changé.    
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Appelé lorsque la valeur d’une propriété de style change. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:LinkBar:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Répond aux changements de taille en définissant les positions et les tailles des enfants de ce contrôle LinkBar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Indique la largeur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleX</codeph> du composant.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Indique la hauteur du composant, en pixels, des coordonnées du composant, quelle que soit la valeur de la propriété <codeph>scaleY</codeph> du composant.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Répond aux changements de taille en définissant les positions et les tailles des enfants de ce contrôle LinkBar. Pour plus d’information sur la méthode <codeph>updateDisplayList()</codeph>, voir la méthode <codeph>UIComponent.updateDisplayList()</codeph>.
     
      <p>La méthode <codeph>LinkBar.updateDisplayList()</codeph> appelle d’abord la méthode <codeph>Box.updateDisplayList()</codeph> pour positionner les contrôles LinkButton. Pour plus de détails, voir la méthode <codeph>Box.updateDisplayList()</codeph>. Après avoir disposé les contrôles LinkButton, les séparateurs sont placés entre eux.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link><link href="mx.containers.xml#Box/updateDisplayList()"><linktext>mx.containers.Box.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.controls:LinkBar:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      Index du dernier contrôle LinkButton sélectionné si le contrôle LinkBar utilise un conteneur ViewStack comme fournisseur de données.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Index du dernier contrôle LinkButton sélectionné si le contrôle LinkBar utilise un conteneur ViewStack comme fournisseur de données.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>