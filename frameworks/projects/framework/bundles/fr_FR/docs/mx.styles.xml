<?xml version="1.0"?>
<apiPackage id="mx.styles"><apiName>mx.styles</apiName><apiDetail/><apiClassifier id="mx.styles:StyleManager"><apiName>StyleManager</apiName><shortdesc>
  La classe StyleManager gère les éléments suivants : les propriétés de style CSS dont classe hérite, les propriétés de style qui sont des couleurs et doivent donc bénéficier d’un traitement spécial Une liste de chaînes qui sont les alias des valeurs de couleur 
  
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe StyleManager gère les éléments suivants : 
  <ul>
    <li>Les propriétés de style CSS dont la classe hérite </li>
    <li>Les propriétés de style qui sont des couleurs et doivent donc bénéficier d’un traitement spécial </li>
    <li>Une liste de chaînes qui sont les alias des valeurs de couleur </li>
  </ul>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.styles.xml#CSSStyleDeclaration"><linktext>mx.styles.CSSStyleDeclaration</linktext></link></related-links><apiOperation id="mx.styles:StyleManager:clearStyleDeclaration"><apiName>clearStyleDeclaration</apiName><shortdesc>
      Efface l’objet CSSStyleDeclaration qui stocke les règles du sélecteur CSS spécifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selector</apiItemName><apiType value="String"/><apiDesc>Nom du sélecteur CSS à effacer. 
      </apiDesc></apiParam><apiParam><apiItemName>update</apiItemName><apiType value="Boolean"/><apiDesc>Définissez la valeur sur <codeph>true</codeph> pour forcer une mise à jour immédiate de ce style. Définissez la valeur sur <codeph>false</codeph> pour empêcher toute mise à jour immédiate des styles de l’application. Pour plus d’informations sur cette méthode, voir la description dans la méthode <codeph>setStyleDeclaration()</codeph>. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Efface l’objet CSSStyleDeclaration qui stocke les règles du sélecteur CSS spécifié. 
     
      <p>Si le sélecteur spécifié est un sélecteur de classe (par exemple, « .bigMargins » ou « .myStyle »), vous devez vérifier que la propriété <codeph>selector</codeph> commence par un point (.).</p>
     
      <p>Si le sélecteur spécifié est un sélecteur de type (par exemple, « Button »), ne commencez pas la propriété <codeph>selector</codeph> par un point.</p>
     
      <p>Le sélecteur <codeph>global</codeph>, similaire à un sélecteur de type, ne commence pas par un point. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.styles.xml#StyleManager/setStyleDeclaration()"><linktext>setStyleDeclaration()</linktext></link></related-links></apiOperation><apiOperation id="mx.styles:StyleManager:getColorName"><apiName>getColorName</apiName><shortdesc>
      Renvoie la valeur de couleur RVB numérique qui correspond à la chaîne de couleurs spécifiée. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Renvoie une valeur uint qui représente la valeur de couleur ou <codeph>NOT_A_COLOR</codeph> si la valeur de la propriété <codeph>colorName</codeph> n’est pas un alias d’une couleur. 
      
      </apiDesc><apiType value="uint"/></apiReturn><apiParam><apiItemName>colorName</apiItemName><apiType value="Object"/><apiDesc>Nom de la couleur. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Renvoie la valeur de couleur RVB numérique qui correspond à la chaîne de couleurs spécifiée. La chaîne de couleurs peut être un nom de couleur non sensible à la casse tel que <codeph>"red"</codeph>, <codeph>"Blue"</codeph> ou <codeph>"haloGreen"</codeph>, une valeur hexadécimale telle que 0xFF0000 ou une chaîne #-hexadécimale telle que <codeph>"#FF0000"</codeph>.
     
      <p>Cette méthode renvoie une valeur uint, telles que 4521830, qui représente une couleur. Vous pouvez convertir cette valeur uint en valeur hexadécimale en transmettant la base numérique (dans ce cas, 16), à la méthode <codeph>toString()</codeph> de la classe uint, comme le montre l’exemple suivant : </p>
      <pre>
      import mx.styles.StyleManager;
      private function getNewColorName():void {
          StyleManager.registerColorName("soylentGreen",0x44FF66);
          trace(StyleManager.getColorName("soylentGreen").toString(16));
      }
      </pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:getColorNames"><apiName>getColorNames</apiName><shortdesc>
      Convertit le nom de couleur de chaque élément du tableau de couleurs en valeur colorimétrique RVB numérique. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>colors</apiItemName><apiType value="Array"/><apiDesc>Tableau de noms de couleur. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Convertit le nom de couleur de chaque élément du tableau de couleurs en valeur colorimétrique RVB numérique. Chaque chaîne de couleurs peut être un nom de couleur non sensible à la casse tel que <codeph>"red"</codeph>, <codeph>"Blue"</codeph> ou <codeph>"haloGreen"</codeph>, une valeur hexadécimale telle que 0xFF0000 ou une chaîne #-hexadécimale telle que <codeph>"#FF0000"</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:getStyleDeclaration"><apiName>getStyleDeclaration</apiName><shortdesc>
      Récupère la déclaration CSSStyleDeclaration qui stocke les règles du sélecteur CSS spécifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Déclaration de style dont le nom correspond à la propriété <codeph> selector</codeph>. 
      
      </apiDesc><apiOperationClassifier>mx.styles:CSSStyleDeclaration</apiOperationClassifier></apiReturn><apiParam><apiItemName>selector</apiItemName><apiType value="String"/><apiDesc>Nom du sélecteur CSS. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Récupère la déclaration CSSStyleDeclaration qui stocke les règles du sélecteur CSS spécifié. 
     
      <p>Si le paramètre <codeph>selector</codeph> commence par un point (.), la déclaration CSSStyleDeclaration renvoyée est un sélecteur de classe qui s’applique uniquement aux occurrences dont la propriété <codeph>styleName</codeph> spécifie ce sélecteur (qui n’inclue pas de point). Par exemple, le sélecteur de classe <codeph>".bigMargins"</codeph> s’applique à tous les composants UIComponent dont le nom <codeph>styleName</codeph> is <codeph>"bigMargins"</codeph>.</p>
     
      <p>Si le paramètre <codeph>selector</codeph> ne commence pas par un point, la déclaration CSSStyleDeclaration renvoyée est un sélecteur de type qui s’applique à toutes les occurrences de ce type. Par exemple, le sélecteur de type <codeph>"button"</codeph> s’applique à toutes les occurrences de Button et ses sous-classes. </p>
     
      <p>Le sélecteur <codeph>global</codeph>, similaire à un sélecteur de type, ne commence pas par un point. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:isColorName"><apiName>isColorName</apiName><shortdesc>
      Vérifie si la chaîne donnée est un alias de valeur de couleur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si <codeph>colorName</codeph> est un alias de couleur. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>colorName</apiItemName><apiType value="String"/><apiDesc>Nom de la couleur à vérifier. Ce paramètre n’est pas sensible à la casse. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vérifie si la chaîne est un alias de valeur de couleur. Par exemple, par défaut, la chaîne « bleu » est un alias de 0x0000FF. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:isInheritingStyle"><apiName>isInheritingStyle</apiName><shortdesc>
      Vérifie si un style hérite. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si le style spécifié hérite. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>Nom du style dont il faut vérifier héritage. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vérifie si un style hérite. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:isInheritingTextFormatStyle"><apiName>isInheritingTextFormatStyle</apiName><shortdesc>
      Vérifie si un style TextFormat hérite. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si le style TextFormat spécifié hérite. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>Nom du style dont il faut vérifier héritage. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vérifie si un style TextFormat hérite. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:isParentDisplayListInvalidatingStyle"><apiName>isParentDisplayListInvalidatingStyle</apiName><shortdesc>
      Vérifie si ce style affecte le conteneur parent du composant de façon à exiger que le conteneur parent se redessine lorsque ce style est modifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Renvoie <codeph>true</codeph> si le style spécifié est celui qui peut avoir une incidence sur l’aspect ou la présentation du composant du conteneur parent. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>Nom du style à vérifier.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vérifie si ce style affecte le conteneur parent du composant de façon à exiger que le conteneur parent se redessine lorsque ce style est modifié. 
     
      <p>Lorsque l’un de ces styles est défini avec la méthode <codeph>setStyle()</codeph>, la méthode <codeph>invalidateDisplayList()</codeph> est automatiquement appelée sur le conteneur parent du composant afin qu’il effectue à nouveau la dessin et/ou la présentation de ses enfants.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:isParentSizeInvalidatingStyle"><apiName>isParentSizeInvalidatingStyle</apiName><shortdesc>
      Vérifie si le style modifie la taille du conteneur parent du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si le style spécifié est celui qui peut avoir une incidence sur la taille mesurée du composant du conteneur parent. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>Nom du style à vérifier.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vérifie si le style modifie la taille du conteneur parent du composant. 
     
      <p>Lorsqu’un de ces styles est défini avec la méthode <codeph>setStyle()</codeph>, la méthode <codeph>invalidateSize()</codeph> est appelée automatiquement sur le composant du conteneur parent afin de recalculer ultérieurement sa taille mesurée. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:isSizeInvalidatingStyle"><apiName>isSizeInvalidatingStyle</apiName><shortdesc>
      Vérifie si un style modifie la taille d’un composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Renvoie la valeur <codeph>true</codeph> si le style spécifié est celui qui peut avoir une incidence sur la taille mesurée du composant. 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>Nom du style à vérifier.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Vérifie si un style modifie la taille d’un composant. 
     
      <p>Lorsqu’un de ces styles est défini avec la méthode <codeph>setStyle()</codeph>, la méthode <codeph>invalidateSize()</codeph> est appelée automatiquement sur le composant afin de recalculer ultérieurement sa taille mesurée. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:isValidStyleValue"><apiName>isValidStyleValue</apiName><shortdesc>
      Détermine si un paramètre spécifié est une propriété de style valide. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Si vous transmettez la valeur renvoyée par un appel de la méthode <codeph>getStyle()</codeph> à cette méthode, elle renvoie <codeph>true</codeph> si le style a été défini et <codeph>false</codeph> dans le cas contraire. 
     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>Propriété de style à vérifier. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine si un paramètre spécifié est une propriété de style valide. Exemple :
     
      <pre>
      trace(StyleManager.isValidStyleValue(myButton.getStyle("color")).toString());
      </pre>
     
      <p>Cela peut être utile car certains styles peuvent être définis sur des valeurs telles que 0, <codeph>NaN</codeph>, la chaîne vide(<codeph>""</codeph>) ou <codeph>null</codeph>, qui entraînent l’échec du test d’une valeur<codeph>if (value)</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:loadStyleDeclarations"><apiName>loadStyleDeclarations</apiName><shortdesc>
      Charge un style SWF. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Une implémentation IEventDispatcher qui prend en charge les événements StyleEvent.PROGRESS, StyleEvent.COMPLETE et StyleEvent.ERROR. 
     
      </apiDesc><apiType value="flash.events:IEventDispatcher"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiDesc>Emplacement du fichier SWF de style. 
     
      </apiDesc></apiParam><apiParam><apiItemName>update</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Définissez la valeur sur <codeph>true</codeph> pour forcer une mise à jour immédiate des styles. Définissez sur <codeph>false</codeph> pour empêcher toute mise à jour immédiate des styles de l’application. Ce paramètre est facultatif et est défini par défaut sur <codeph>true</codeph>. Pour plus d’informations sur ce paramètre, voir la description dans la méthode <codeph>setStyleDeclaration()</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>trustContent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Obsolète, n’est plus utilisé. Ce paramètre est facultatif et prend par défaut la valeur <codeph>false</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiType value="flash.system:ApplicationDomain"/><apiData>null</apiData><apiDesc>Classe ApplicationDomain transmise à la méthode <codeph>load()</codeph> de la classe IModuleInfo qui charge le fichier SWF de style. Ce paramètre est facultatif et prend par défaut la valeur <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiType value="flash.system:SecurityDomain"/><apiData>null</apiData><apiDesc>Classe SecurityDomain transmise à la méthode <codeph>load()</codeph> de la classe IModuleInfo qui charge le fichier SWF de style. Ce paramètre est facultatif et prend par défaut la valeur <codeph>null</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Charge un fichier SWF de style. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.styles.xml#StyleManager/setStyleDeclaration()"><linktext>setStyleDeclaration()</linktext></link></related-links></apiOperation><apiOperation id="mx.styles:StyleManager:registerColorName"><apiName>registerColorName</apiName><shortdesc>
      Ajoute un nom de couleur à la liste des alias des couleurs. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>colorName</apiItemName><apiType value="String"/><apiDesc>Nom de la couleur à ajouter à la liste ; par exemple, « blue ». Si vous accéder ultérieurement à ce nom de couleur, la valeur n’est pas sensible à la casse. 
     
      </apiDesc></apiParam><apiParam><apiItemName>colorValue</apiItemName><apiType value="uint"/><apiDesc>Valeur de la couleur, par exemple, 0x0000FF. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ajoute un nom de couleur à la liste des alias des couleurs. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:registerInheritingStyle"><apiName>registerInheritingStyle</apiName><shortdesc>
      Effectue un ajout à la liste de styles qui peuvent hériter des valeurs de leurs parents. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>Nom du style ajouté à la liste des styles qui peuvent hériter des valeurs. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Effectue un ajout à la liste de styles qui peuvent hériter des valeurs de leurs parents. 
     
      <p><b>Remarque :</b> veuillez éviter d’utiliser noms de style en double, car des conflits peuvent entraîner une baisse des performances si un style qui est déjà utilisé fait l’objet d’un héritage. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:registerParentDisplayListInvalidatingStyle"><apiName>registerParentDisplayListInvalidatingStyle</apiName><shortdesc>
      Effectue un ajout à la liste des styles, ce qui peut avoir une incidence sur l’aspect ou la présentation du conteneur parent du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>Nom du style à enregistrer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Effectue un ajout à la liste des styles, ce qui peut avoir une incidence sur l’aspect ou la présentation du conteneur parent du composant. Lorsqu’un de ces styles est défini avec <codeph>setStyle()</codeph>, la méthode <codeph>invalidateDisplayList</codeph> est appelée sur le composant de conteneur parent pour qu’il effectue à nouveau le dessin et/ou la présentation ses enfants. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:registerParentSizeInvalidatingStyle"><apiName>registerParentSizeInvalidatingStyle</apiName><shortdesc>
      Effectue un ajout à la liste des styles, ce qui peut avoir une incidence sur la taille mesurée du conteneur parent du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>Nom du style à enregistrer.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Effectue un ajout à la liste des styles, ce qui peut avoir une incidence sur la taille mesurée du conteneur parent du composant. 
      <p>Lorsqu’un de ces styles est défini avec la méthode <codeph>setStyle()</codeph>, la méthode <codeph>invalidateSize()</codeph> est appelée automatiquement sur le conteneur parent du composant afin de recalculer ultérieurement sa taille mesurée. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:registerSizeInvalidatingStyle"><apiName>registerSizeInvalidatingStyle</apiName><shortdesc>
      Effectue un ajout à la liste des styles, ce qui peut avoir une incidence sur la taille mesurée du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleName</apiItemName><apiType value="String"/><apiDesc>Nom du style ajouté à la liste. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Effectue un ajout à la liste des styles, ce qui peut avoir une incidence sur la taille mesurée du composant. Lorsqu’un de ces styles est défini avec la méthode <codeph>setStyle()</codeph>, la méthode <codeph>invalidateSize()</codeph> est appelée automatiquement sur le composant afin de recalculer ultérieurement sa taille mesurée. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:setStyleDeclaration"><apiName>setStyleDeclaration</apiName><shortdesc>
      Définit l’objet CSSStyleDeclaration qui stocke les règles du sélecteur CSS spécifié. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selector</apiItemName><apiType value="String"/><apiDesc>Nom du sélecteur CSS. 
      </apiDesc></apiParam><apiParam><apiItemName>styleDeclaration</apiItemName><apiOperationClassifier>mx.styles:CSSStyleDeclaration</apiOperationClassifier><apiDesc>Nouvelle déclaration de style. 
      </apiDesc></apiParam><apiParam><apiItemName>update</apiItemName><apiType value="Boolean"/><apiDesc>Définissez la valeur sur <codeph>true</codeph> pour forcer la mise à jour immédiate des styles ; en interne, Flex appelle la méthode <codeph>styleChanged()</codeph> du composant UIComponent. Définissez la valeur sur <codeph>false</codeph> pour empêcher toute mise à jour immédiate des styles de l’application. 
     
      <p>Les styles sont mis à jour la prochaine fois où l’une des méthodes suivantes est appelée avec la propriété <codeph>update</codeph> définie sur <codeph>true</codeph>.
      <ul>
       <li><codeph>clearStyleDeclaration()</codeph></li>
       <li><codeph>loadStyleDeclarations()</codeph></li>
       <li><codeph>setStyleDeclaration()</codeph></li>
       <li><codeph>unloadStyleDeclarations()</codeph></li>
      </ul>
      </p>
     
      <p>Généralement, si vous appelez l’une de ces méthodes plusieurs fois, définissez cette propriété sur <codeph>true</codeph> uniquement sur le dernier appel, de sorte que Flex n’appelle pas la méthode <codeph>styleChanged()</codeph> plusieurs fois. </p>
     
      <p>Si vous appelez la méthode <codeph>getStyle()</codeph>, Flex renvoie la valeur de style qui a été appliquée à la classe UIComponent par un appel à la méthode <codeph>styleChanged()</codeph>. L’aspect du composant peut ne pas refléter la valeur renvoyée par la méthode <codeph>getStyle()</codeph>. Cela se produit car une de ces méthodes de déclaration de style peut ne pas avoir encore été appelée avec propriété <codeph>update</codeph>définie sur <codeph>true</codeph>.</p>
      
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit l’objet CSSStyleDeclaration qui stocke les règles du sélecteur CSS spécifié. 
     
      <p>Si le paramètre <codeph>selector</codeph> commence par un point (.), le sélecteur spécifié est un « sélecteur de classe » qui s’applique uniquement aux occurrences dont la propriété <codeph>styleName</codeph> spécifie ce sélecteur (qui n’inclue pas de point). Par exemple, le sélecteur de classe <codeph>".bigMargins"</codeph> s’applique à toutes les composants UIComponent dont le nom <codeph>styleName</codeph> est <codeph>"bigMargins"</codeph>.</p>
     
      <p>Si le paramètre <codeph>selector</codeph> ne commence pas par un point, le sélecteur spécifié est un « sélecteur de type » qui s’applique à toutes les occurrences de ce type. Par exemple, le sélecteur de type <codeph>"Button"</codeph> s’applique à toutes les occurrences de Button et ses sous-classes.</p>
     
      <p>Le sélecteur <codeph>global</codeph>, similaire à un sélecteur de type, ne commence pas par un point. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleManager:unloadStyleDeclarations"><apiName>unloadStyleDeclarations</apiName><shortdesc>
      Décharge un fichier SWF de style. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiDesc>Emplacement du fichier SWF de style. 
      </apiDesc></apiParam><apiParam><apiItemName>update</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Définissez la valeur sur <codeph>true</codeph> pour forcer une mise à jour immédiate des styles. Définissez la valeur sur <codeph>false</codeph> pour empêcher toute mise à jour immédiate des styles de l’application. Pour plus d’informations sur cette méthode, voir la description de la méthode <codeph>setStyleDeclaration()</codeph>. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Décharge un fichier SWF de style. 
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.styles.xml#StyleManager/setStyleDeclaration()"><linktext>setStyleDeclaration()</linktext></link></related-links></apiOperation><apiValue id="mx.styles:StyleManager:NOT_A_COLOR"><apiName>NOT_A_COLOR</apiName><shortdesc>
      La méthode getColorName() renvoie cette valeur si la chaîne n’est pas un nom de couleur légitime. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0xFFFFFFFF</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      La méthode <codeph>getColorName()</codeph> renvoie cette valeur si la chaîne n’est pas un nom de couleur légitime.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:StyleManager:selectors:get"><apiName>selectors</apiName><shortdesc>
      Renvoie un tableau de tous les sélecteurs CSS enregistrées via le gestionnaire StyleManager. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Renvoie un tableau de tous les sélecteurs CSS enregistrées via le gestionnaire StyleManager. Vous pouvez transmettre des éléments de ce tableau à la méthode <codeph>getStyleDeclaration()</codeph> pour obtenir l’objet CSSStyleDeclaration correspondant. Les sélecteurs de classe sont ajoutés au début avec un point. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.styles:CSSStyleDeclaration"><apiName>CSSStyleDeclaration</apiName><shortdesc>
  La classe CSSStyleDeclaration représente un jeu de règles de style CSS. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  La classe CSSStyleDeclaration représente un jeu de règles de style CSS. Le compilateur MXML génère automatiquement un objet CSSStyleDeclaration pour chaque sélecteur des fichiers CSS associés à une application Flex. 
  
  <p>Une règle CSS telle que 
  <pre>
      Button { color: #FF0000 }
  </pre>
  affecte toutes les occurrences de la classe Button ; un sélecteur comme <codeph>Button</codeph>, également dénommé sélecteur de type, ne doit pas commencer par un point. </p>
 
  <p>Une règle CSS telle que 
  <pre>
      .redButton { color: #FF0000 }
  </pre>
  affecte uniquement les composants dont la propriété <codeph>styleName</codeph> est définie sur <codeph>"redButton"</codeph> ; un sélecteur comme <codeph>.redButton</codeph>, dénommé sélecteur de classe, doit commencer par un point.</p>
 
  <p>Vous pouvez accéder aux objets CSSStyleDeclaration autogénérés à l’aide de la méthode <codeph>StyleManager.getStyleDeclaration()</codeph>, en transmettant un sélecteur de type
  <pre>
  var buttonDeclaration:CSSStyleDeclaration =
      StyleManager.getStyleDeclaration("Button");
  </pre>
  ou un sélecteur de classe 
  <pre>
  var redButtonStyleDeclaration:CSSStyleDeclaration =
      StyleManager.getStyleDeclaration(".redButton");
  </pre>
  </p>
 
  <p>Vous pouvez utiliser la méthode <codeph>getStyle()</codeph>, <codeph>setStyle()</codeph> et <codeph>clearStyle</codeph> pour obtenir, définir et effacer les propriétés de style d’un objet CSSStyleDeclaration. </p>
 
  <p>Vous pouvez également créer et installer un objet CSSStyleDeclaration lors de l’exécution à l’aide de la méthode <codeph>StyleManager.setStyleDeclaration()</codeph> : 
  <pre>
  var newStyleDeclaration:CSSStyleDeclaration = new CSSStyleDeclaration(".bigMargins");
  newStyleDeclaration.defaultFactory = function():void
  {
      leftMargin = 50;
      rightMargin = 50;
  }
  StyleManager.setStyleDeclaration(".bigMargins", newStyleDeclaration, true);
  </pre>
  </p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link><link href="mx.styles.xml#StyleManager"><linktext>mx.styles.StyleManager</linktext></link></related-links><apiConstructor id="mx.styles:CSSStyleDeclaration:CSSStyleDeclaration"><apiName>CSSStyleDeclaration</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>selector</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>- Si le sélecteur est de type CSSSelector, les sélecteurs CSS avancés sont pris en charge. Si une chaîne est utilisée pour le sélecteur, seuls sélecteurs CSS simples sont pris en charge. Si la chaîne commence par un point, elle est interprétée comme un sélecteur de classe universel. Dans le cas contraire, elle doit représenter un sélecteur de type simple. Si la valeur n’est pas null, cet objet CSSStyleDeclaration sera enregistré avec le gestionnaire StyleManager.  
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.styles:CSSStyleDeclaration:clearStyle"><apiName>clearStyle</apiName><shortdesc>
      Supprime une propriété de style pour cet objet CSSStyleDeclaration. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Supprime une propriété de style pour cet objet CSSStyleDeclaration. Cette opération est identique à la définition de la valeur du style sur <codeph>undefined</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:CSSStyleDeclaration:getStyle"><apiName>getStyle</apiName><shortdesc>
      Récupère la valeur d’une propriété de style spécifiée, telle que déterminée uniquement par cet objet CSSStyleDeclaration. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Valeur de la propriété de style si cette dernière est définie ou <codeph>undefined</codeph> dans le cas contraire. 
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Récupère la valeur d’une propriété de style spécifiée, telle que déterminée uniquement par cet objet CSSStyleDeclaration. 
     
      <p>La valeur renvoyée peut être de n’importe quel type. </p>
     
      <p>Les valeurs <codeph>null</codeph>, <codeph>""</codeph>, <codeph>false</codeph>, <codeph>NaN</codeph> et <codeph>0</codeph> sont toutes des valeurs de style valides, mais la valeur <codeph>undefined</codeph> ne l’est pas ; elle indique que le style spécifié n’est pas défini sur cette déclaration CSSStyleDeclaration. Vous pouvez utiliser la méthode <codeph>StyleManager.isValidStyleValue()</codeph> pour tester la valeur renvoyée. </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:CSSStyleDeclaration:matchesStyleClient"><apiName>matchesStyleClient</apiName><shortdesc>
      Détermine si cette déclaration de style s’applique au composant donné en fonction d’une correspondance de la chaîne de sélecteur. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur est true si cette déclaration de style s’applique au composant, false dans le cas contraire.  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiOperationClassifier>mx.styles:IAdvancedStyleClient</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
      Détermine si cette déclaration de style s’applique au composant donné en fonction d’une correspondance de la chaîne de sélecteur. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:CSSStyleDeclaration:setStyle"><apiName>setStyle</apiName><shortdesc>
      Définit une propriété de style pour cet objet CSSStyleDeclaration. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value=""/><apiDesc>Valeur de la propriété de style. La valeur renvoyée peut être de n’importe quel type. Les valeurs <codeph>null</codeph>, <codeph>""</codeph>, <codeph>false</codeph>, <codeph>NaN</codeph> et <codeph>0</codeph> sont toutes des valeurs de style valides, ce qui n’est pas le cas de la valeur <codeph>undefined</codeph>. La définition d’une propriété de style sur la valeur <codeph>undefined</codeph> est identique à l’appel de la méthode <codeph>clearStyle()</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit une propriété de style pour cet objet CSSStyleDeclaration. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.styles:CSSStyleDeclaration:defaultFactory"><apiName>defaultFactory</apiName><shortdesc>
      Cette fonction, si elle n’est pas null, est généralement générée automatiquement par le compilateur MXML. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Cette fonction, si elle n’est pas <codeph>null</codeph>, est généralement générée automatiquement par le compilateur MXML. Elle produit des copies d’un objet ordinaire, tel que <codeph>{ leftMargin: 10, rightMargin: 10 }</codeph>, contenant des paires nom/valeur pour les propriétés de style. L’objet est utilisé pour construire un nœud de la chaîne de prototype à des fins de recherche des propriétés de style.
     
      <p>Si cette déclaration CSSStyleDeclaration est administrée par un composant UIComponent écrit en MXML, cette fonction code les attributs de style qui ont été spécifiés dans la balise racine de la définition du composant. </p>
     
      <p>Si le composant UIComponent a été écrit en code ActionScript, cette propriété est <codeph>null</codeph>. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSStyleDeclaration:factory"><apiName>factory</apiName><shortdesc>
      Cette fonction, si elle n’est pas null, est généralement générée automatiquement par le compilateur MXML. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Cette fonction, si elle n’est pas <codeph>null</codeph>, est généralement générée automatiquement par le compilateur MXML. Elle produit des copies d’un objet ordinaire, tel que <codeph>{ leftMargin: 10, rightMargin: 10 }</codeph>, contenant des paires nom/valeur pour les propriétés de style. L’objet est utilisé pour construire un nœud de la chaîne de prototype à des fins de recherche des propriétés de style.
     
      <p>Si cette déclaration CSSStyleDeclaration est administrée par un composant UIComponent, cette fonction code les attributs de style qui ont été spécifiés en MXML pour une occurrence de ce composant. </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSStyleDeclaration:protected:overrides"><apiName>overrides</apiName><shortdesc>
      Si la méthode setStyle() est appelée sur un composant UIComponent ou CSSStyleDeclaration lors de l’exécution, cet objet stocke les paires nom/valeur qui ont été définies ; elles remplacent les paires nom/valeur des objets produits par les méthodes spécifiées par les propriétés defaultFactory et factory. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Si la méthode <codeph>setStyle()</codeph> est appelée sur un composant UIComponent ou CSSStyleDeclaration lors de l’exécution, cet objet stocke les paires nom/valeur qui ont été définies ; elles remplacent les paires nom/valeur des objets produits par les méthodes spécifiées par les propriétés <codeph>defaultFactory</codeph> et <codeph>factory</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSStyleDeclaration:selector:get"><apiName>selector</apiName><shortdesc>
      Cette propriété correspond au sélecteur de base d’une chaîne potentielle de sélecteurs et de conditions utilisés pour faire correspondre une déclaration de style CSS à des composants. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:CSSSelector</apiValueClassifier></apiValueDef><apiDesc>
      Cette propriété correspond au sélecteur de base d’une chaîne potentielle de sélecteurs et de conditions utilisés pour faire correspondre une déclaration de style CSS à des composants. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSStyleDeclaration:specificity:get"><apiName>specificity</apiName><shortdesc>
      Détermine l’ordre de priorité lors de l’application de plusieurs déclarations de style à un composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Détermine l’ordre de priorité lors de l’application de plusieurs déclarations de style à un composant. Si les déclarations de style ont une priorité identique, la dernière est prioritaire.  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSStyleDeclaration:subject:get"><apiName>subject</apiName><shortdesc>
      Le sujet décrit le nom d’un composant pouvant être une correspondance potentielle pour cette déclaration de style. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Le sujet décrit le nom d’un composant pouvant être une correspondance potentielle pour cette déclaration de style. Le sujet est déterminé comme le sélecteur de type simple le plus à droite dans une chaîne de sélecteurs potentielle. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.styles:IStyleModule"><apiName>IStyleModule</apiName><shortdesc>
 Interface simple définissant une méthode unload(). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
 Interface simple définissant une méthode <codeph>unload()</codeph>. Vous pouvez associer un objet à un type IStyleModule afin d’éliminer toute dépendance au type StyleModule dans l’application de chargement. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.styles:IStyleModule:mx.styles:IStyleModule:unload"><apiName>unload</apiName><shortdesc>
     Décharge le module de style.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Décharge le module de style.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.styles:CSSCondition"><apiName>CSSCondition</apiName><shortdesc>
  Représente une condition d’un sélecteur CSSSelector utilisé pour faire correspondre un sous-ensemble de composants en fonction d’une propriété particulière. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Représente une condition d’un sélecteur CSSSelector utilisé pour faire correspondre un sous-ensemble de composants en fonction d’une propriété particulière. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.styles.xml#CSSConditionKind"><linktext>mx.styles.CSSConditionKind</linktext></link></related-links><apiConstructor id="mx.styles:CSSCondition:CSSCondition"><apiName>CSSCondition</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>kind</apiItemName><apiType value="String"/><apiDesc>Type de condition. Pour les valeurs valides, voir l’énumération CSSConditionKind. 
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="String"/><apiDesc>Valeur de la condition (sans syntaxe CSS). 
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.styles:CSSCondition:matchesStyleClient"><apiName>matchesStyleClient</apiName><shortdesc>
      Détermine si cette condition correspond au composant donné. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>La valeur est true si le composant est une correspondance, false dans le cas contraire.  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiOperationClassifier>mx.styles:IAdvancedStyleClient</apiOperationClassifier><apiDesc>Composant auquel la condition peut s’appliquer. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine si cette condition correspond au composant donné. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:CSSCondition:toString"><apiName>toString</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Représentation sous forme de chaîne de cette condition, y compris la syntaxe CSS. 
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.styles:CSSCondition:kind:get"><apiName>kind</apiName><shortdesc>
      Type de condition représentée par cette occurrence. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Type de condition représentée par cette occurrence. Les options sont class, id et pseudo. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#CSSConditionKind"><linktext>mx.styles.CSSConditionKind</linktext></link></related-links></apiValue><apiValue id="mx.styles:CSSCondition:specificity:get"><apiName>specificity</apiName><shortdesc>
      Calcule la spécificité d’un sélecteur conditionnel dans une chaîne de sélecteurs. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Calcule la spécificité d’un sélecteur conditionnel dans une chaîne de sélecteurs. La spécificité totale est utilisée pour déterminer la priorité lors de l’application de plusieurs déclarations de style correspondantes. Les conditions d’ID contribuent pour 100 points, les conditions pseudo et class pour 10 points. Les sélecteurs d’une spécificité supérieure remplacent ceux d’une spécificité inférieure. Si des sélecteurs possèdent la même spécificité, l’ordre de déclaration définit la priorité (c’est-à-dire, le dernier est prioritaire). 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSCondition:value:get"><apiName>value</apiName><shortdesc>
      Valeur de cette condition sans syntaxe CSS. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Valeur de cette condition sans syntaxe CSS. Pour obtenir une représentation sous forme de chaîne incluant une syntaxe CSS, appelez la méthode toString(). 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.styles:CSSSelector"><apiName>CSSSelector</apiName><shortdesc>
  Représente un nœud de sélecteur dans une chaîne de sélecteurs potentielle utilisée pour faire correspondre une déclaration de style aux composants. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Représente un sélecteur nœud dans une chaîne de sélecteurs utilisé pour faire correspondre une déclaration de style CSS aux composants. 
 
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.styles:CSSSelector:CSSSelector"><apiName>CSSSelector</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>subject</apiItemName><apiType value="String"/><apiDesc>Représentation ordinaire de ce sélecteur sans conditions ou ancêtres.  
      
      </apiDesc></apiParam><apiParam><apiItemName>conditions</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>  Actuellement, une seule condition ou une paire sont prises en charge. 
     
      </apiDesc></apiParam><apiParam><apiItemName>ancestor</apiItemName><apiOperationClassifier>mx.styles:CSSSelector</apiOperationClassifier><apiData>null</apiData><apiDesc>Sélecteur facultatif permettant de faire correspondre un composant issu d’un ancêtre arbitraire.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.styles:CSSSelector:matchesStyleClient"><apiName>matchesStyleClient</apiName><shortdesc>
      Détermine si ce sélecteur correspond au composant donné. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>la valeur est true si le composant est une correspondance ou false dans le cas contraire.  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiOperationClassifier>mx.styles:IAdvancedStyleClient</apiOperationClassifier><apiDesc>Composant auquel le sélecteur peut s’appliquer. 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Détermine si ce sélecteur correspond au composant donné. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:CSSSelector:toString"><apiName>toString</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Représentation sous forme de chaîne de ce sélecteur y compris l’ensemble de sa syntaxe, de ses conditions et de ses ancêtres. 
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.styles:CSSSelector:ancestor:get"><apiName>ancestor</apiName><shortdesc>
      Si ce sélecteur fait partie d’un sélecteur descendant il peut avoir une autre sélecteur défini en tant qu’ancêtre arbitraire. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.styles:CSSSelector</apiValueClassifier></apiValueDef><apiDesc>
      Si ce sélecteur fait partie d’un sélecteur descendant il peut avoir une autre sélecteur défini en tant qu’ancêtre arbitraire. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSSelector:conditions:get"><apiName>conditions</apiName><shortdesc>
      Ce sélecteur peut correspondre à un sous-ensemble de composants en spécifiant d’autres conditions, c’est-à-dire</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Ce sélecteur peut correspondre à un sous-ensemble de composants en spécifiant d’autres conditions. Autrement dit, un composant doit avoir un id, une propriété styleName (équivalente à une condition ’classe’ dans CSS) ou un état (équivalent à une condition ’pseudo’ dans CSS) particulier. En l’absence de conditions, cette propriété est null. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSSelector:specificity:get"><apiName>specificity</apiName><shortdesc>
      Calcule la spécificité d’une chaîne de sélecteur pour déterminer la priorité lors de l’application de plusieurs déclarations de style correspondantes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Calcule la spécificité d’une chaîne de sélecteur pour déterminer la priorité lors de l’application de plusieurs déclarations de style correspondantes. Notez que les conditions d’ID contribuent pour 100 points, les conditions pseudo et classe pour 10 points, les types (y compris les descendants dans une chaîne des sélecteurs) pour 1 point. Sélecteurs universels (c’est-à-dire qui ne contribuent à rien). Le résultat est la somme de ces contributions. Les sélecteurs d’une spécificité supérieure remplacent ceux d’une spécificité inférieure. Si des sélecteurs possèdent la même spécificité, l’ordre de déclaration définit la priorité (c’est-à-dire, le dernier est prioritaire). 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSSelector:subject:get"><apiName>subject</apiName><shortdesc>
      Sujet de ce nœud de sélecteur (uniquement). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Sujet de ce nœud de sélecteur (uniquement). Pour obtenir une représentation sous forme de chaîne de l’ensemble des conditions et des descendants de ce sélecteur, appelez la méthode toString(). Si ce sélecteur représente le nœud racine d’une chaîne de sélecteurs potentielle, le sujet représente également le sujet de l’ensemble de l’expression de sélecteur. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.styles:ISimpleStyleClient"><apiName>ISimpleStyleClient</apiName><shortdesc>
  Cette interface décrit les propriétés et les méthodes qu’un objet doit implémenter afin de participer au sous-système de style. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Cette interface décrit les propriétés et les méthodes qu’un objet doit implémenter afin de participer au sous-système de style. Cette interface est conçue pour être utilisée par les classes qui obtiennent leurs valeurs de style des d’autres objets plutôt que par le biais de valeurs et de sélecteurs de type localement définies. Cette interface est implémentée par la classe ProgrammaticSkin. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.styles.xml#IStyleClient"><linktext>mx.styles.IStyleClient</linktext></link><link href="mx.styles.xml#CSSStyleDeclaration"><linktext>mx.styles.CSSStyleDeclaration</linktext></link></related-links><apiOperation id="mx.styles:ISimpleStyleClient:mx.styles:ISimpleStyleClient:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      Appelé lorsque la valeur d’une propriété de style change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style qui a changé.    
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Appelé lorsque la valeur d’une propriété de style change. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.styles:ISimpleStyleClient:mx.styles:ISimpleStyleClient:styleName:get"><apiName>styleName</apiName><shortdesc>
      Source des valeurs de style de cet objet. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Source des valeurs de style de cet objet. La valeur de la propriété <codeph>styleName</codeph> peut être de l’un des trois types possibles suivants :
     
      <ul>
        <li>Chaîne (par exemple, « headerStyle »). La chaîne nomme un sélecteur de classe qui est défini dans une feuille de style CSS. </li>
     
        <li>CSSStyleDeclaration (par exemple, <codeph>StyleManager.getStyleDeclaration(".headerStyle")</codeph>).</li>
     
        <li>UIComponent. L’objet implémentant cette interface hérite de toutes les valeurs de style de l’objet UIComponent référencé. </li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.styles:IStyleClient"><apiName>IStyleClient</apiName><shortdesc>
  Cette interface décrit les propriétés et les méthodes qu’un objet doit implémenter afin de participer entièrement au sous-système de style. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Cette interface décrit les propriétés et les méthodes qu’un objet doit implémenter afin de participer entièrement au sous-système de style. Cette interface est implémentée par le composant UIComponent. 
 
  <p>S’il n’a pas besoin de stocker les valeurs de style localement, l’objet peut implémenter l’interface <codeph>ISimpleStyleClient</codeph> à la place.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.styles.xml#ISimpleStyleClient"><linktext>mx.styles.ISimpleStyleClient</linktext></link><link href="mx.styles.xml#CSSStyleDeclaration"><linktext>mx.styles.CSSStyleDeclaration</linktext></link></related-links><apiOperation id="mx.styles:IStyleClient:mx.styles:IStyleClient:clearStyle"><apiName>clearStyle</apiName><shortdesc>
      Définit une propriété de style depuis cette occurrence de composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit une propriété de style depuis cette occurrence de composant.
     
      <p>La méthode <codeph>getStyle()</codeph> ne renvoie pas nécessairement la valeur <codeph>undefined</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:IStyleClient:mx.styles:IStyleClient:getClassStyleDeclarations"><apiName>getClassStyleDeclarations</apiName><shortdesc>
      Retourne un tableau d’objets CSSStyleDeclaration pour le sélecteur de type qui s’applique à ce composant. Retourne la valeur null si aucun n’existe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Tableau d’objets CSSStyleDeclaration.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Retourne un tableau d’objets CSSStyleDeclaration pour le sélecteur de type qui s’applique à ce composant. Retourne la valeur <codeph>null</codeph> si aucun n’existe.
     
      <p>Par exemple, supposons que le composant MyButton étende le contrôle Button. Cette méthode recherche d’abord un sélecteur MyButton. Ensuite, elle recherche un sélecteur de type Button. Enfin, elle recherche un sélecteur de type UIComponent.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:IStyleClient:mx.styles:IStyleClient:getStyle"><apiName>getStyle</apiName><shortdesc>
      Extrait une propriété de style ayant été définie n’importe où dans la chaîne de recherche de style de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Valeur du style.
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Extrait une propriété de style ayant été définie n’importe où dans la chaîne de recherche de style de ce composant. 
     
      <p>Cette méthode étant utilisée pour obtenir un type de propriété de style, la valeur renvoyée peut être une valeur booléenne, de chaîne, de nombre, int, uint (pour une couleur RVB), de classe (pour un habillage) ou un type d’objet. Par conséquent, le type renvoyé est spécifié en tant que ~~.</p>
     
      <p>Si vous obtenez une propriété de style particulière, vous connaîtrez son type et souhaiterez souvent stocker le résultat dans une variable de ce type. Vous pouvez utiliser l’opérateur <codeph>as</codeph> ou la fonction de coercition pour effectuer cela. Exemple :</p>
     
      <pre>
      var backgroundColor:uint = getStyle("backgroundColor") as int;
      
      or
      
      var backgroundColor:uint = int(getStyle("backgroundColor"));
      </pre>
     
      <p>Si la propriété de style n’a pas été définie à un endroit quelconque de la chaîne de recherche de style, la valeur renvoyée par la méthode <codeph>getStyle()</codeph> est <codeph>undefined</codeph>. Notez que <codeph>undefined</codeph> est une valeur spéciale ne correspondant pas à <codeph>false</codeph>, la chaîne vide (<codeph>""</codeph>), <codeph>NaN</codeph>, 0 ou <codeph>null</codeph>. Aucune valeur de style valide n’est jamais <codeph>undefined</codeph>. Vous pouvez utiliser la méthode statique <codeph>StyleManager.isValidStyleValue()</codeph> pour vérifier si la valeur a été définie.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:IStyleClient:mx.styles:IStyleClient:notifyStyleChangeInChildren"><apiName>notifyStyleChangeInChildren</apiName><shortdesc>
      Propage les changements de style aux enfants de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
     
      </apiDesc></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Indique si les changements de style doivent être propagés aux enfants des enfants. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Propage les changements de style aux enfants de ce composant.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:IStyleClient:mx.styles:IStyleClient:regenerateStyleCache"><apiName>regenerateStyleCache</apiName><shortdesc>
      Configure les valeurs de cache du style interne afin que la méthode getStyle() fonctionne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Régénère les chaînes proto des enfants. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Configure les valeurs de cache du style interne afin que la méthode <codeph>getStyle()</codeph> fonctionne. Si cet objet possède déjà des enfants, réinitialisez les caches de style des enfants.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:IStyleClient:mx.styles:IStyleClient:registerEffects"><apiName>registerEffects</apiName><shortdesc>
      Enregistre le gestionnaire EffectManager comme l’un des écouteurs d’événement pour chaque événement d’effet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>Tableau de chaînes de noms d’effets. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Enregistre le gestionnaire EffectManager comme l’un des écouteurs d’événement pour chaque événement d’effet.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:IStyleClient:mx.styles:IStyleClient:setStyle"><apiName>setStyle</apiName><shortdesc>
      Définit une propriété de style pour cette occurrence de composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value=""/><apiDesc>Nouvelle valeur du style. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Définit une propriété de style pour cette occurrence de composant.
     
      <p>Ceci peut remplacer un style défini globalement.</p>
     
      <p>Appeler la méthode <codeph>setStyle()</codeph> peut entraîner une baisse des performances. Utilisez-la uniquement lorsque cela est nécessaire.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.styles:IStyleClient:mx.styles:IStyleClient:className:get"><apiName>className</apiName><shortdesc>
      Nom de la classe du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Nom de la classe du composant. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:IStyleClient:mx.styles:IStyleClient:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      Objet contenant les styles héritables de ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Objet contenant les styles héritables pour ce composant. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:IStyleClient:mx.styles:IStyleClient:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      Objet contenant les styles non héritables pour ce composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Objet contenant les styles non héritables de ce composant. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:IStyleClient:mx.styles:IStyleClient:styleDeclaration:get"><apiName>styleDeclaration</apiName><shortdesc>
      Déclaration de style contenant les styles en ligne déclarés par cet objet. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:CSSStyleDeclaration</apiValueClassifier></apiValueDef><apiDesc>
      Déclaration de style contenant les styles en ligne déclarée par cet objet. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#CSSStyleDeclaration"><linktext>mx.styles.CSSStyleDeclaration</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.styles:IAdvancedStyleClient"><apiName>IAdvancedStyleClient</apiName><shortdesc>
  Cette interface décrit les propriétés avancées que le composant doit implémenter pour participer pleinement au sous-système de style avancé. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Cette interface décrit les propriétés avancées que le composant doit implémenter pour participer pleinement au sous-système de style avancé. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.styles:IAdvancedStyleClient:mx.styles:IAdvancedStyleClient:matchesCSSState"><apiName>matchesCSSState</apiName><shortdesc>
      Etat actuel de ce composant utilisé pour faire correspondre les pseudo-sélecteurs CSS. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssState</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      Etat actuel de ce composant utilisé pour faire correspondre les pseudo-sélecteurs CSS. En l’absence d’état, elle renvoie la valeur null. Remarque : les composants Spark utilisent leur état d’habillage comme pseudo état, tandis que les composants Halo utilisent leur propriété currentState. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:IAdvancedStyleClient:mx.styles:IAdvancedStyleClient:matchesCSSType"><apiName>matchesCSSType</apiName><shortdesc>
      Détermine si l’occurrence est identique au, ou est une sous-classe du, type donné. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssType</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      Détermine si l’occurrence est identique au, ou est une sous-classe du, type donné. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:IAdvancedStyleClient:mx.styles:IAdvancedStyleClient:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
	  Flex appelle la méthode stylesInitialized() lors de la première initialisation des styles d’un composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Flex appelle la méthode <codeph>stylesInitialized()</codeph> lors de la première initialisation des styles d’un composant.
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.styles:IAdvancedStyleClient:mx.styles:IAdvancedStyleClient:id:get"><apiName>id</apiName><shortdesc>
      Identité du composant. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Identité du composant. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:IAdvancedStyleClient:mx.styles:IAdvancedStyleClient:styleParent:get"><apiName>styleParent</apiName><shortdesc>
      Parent de ce composant.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.styles:IAdvancedStyleClient</apiValueClassifier></apiValueDef><apiDesc>
      Parent de ce composant.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.styles:CSSConditionKind"><apiName>CSSConditionKind</apiName><shortdesc>
  Enumération des types de conditions CSSCondition. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Enumération des types de conditions CSSCondition. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.styles.xml#CSSCondition"><linktext>mx.styles.CSSCondition</linktext></link><link href="mx.styles.xml#CSSSelector"><linktext>mx.styles.CSSSelector</linktext></link></related-links><apiValue id="mx.styles:CSSConditionKind:CLASS"><apiName>CLASS</apiName><shortdesc>
      Condition de sélecteur correspondant à un composant par nom styleName. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>class</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Condition de sélecteur correspondant à un composant par nom styleName. Exemples : Button.special { ... } .special { ... }
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSConditionKind:ID"><apiName>ID</apiName><shortdesc>
      Condition de sélecteur correspondant à un composant par ID. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>id</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Condition de sélecteur correspondant à un composant par ID. Exemples: Button#special { ... } #special { ... }
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:CSSConditionKind:PSEUDO"><apiName>PSEUDO</apiName><shortdesc>
      Condition de sélecteur correspondant à un composant par état (qui peut être dynamique et évoluer progressivement). </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pseudo</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Condition de sélecteur correspondant à un composant par état (qui peut être dynamique et évoluer progressivement). Exemples: Button:special { ... } :special { ... }
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.styles:StyleProxy"><apiName>StyleProxy</apiName><shortdesc>
  Renvoie un objet qui implémente l’interface IAdvancedStyleClient. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.styles:IAdvancedStyleClient</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Renvoie un objet qui implémente l’interface IAdvancedStyleClient. Cette interface prend en charge une propriété <codeph>filterMap</codeph> qui contient les paires style-source/style- destination. 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.styles.xml#IAdvancedStyleClient"><linktext>mx.styles.IAdvancedStyleClient</linktext></link></related-links><apiConstructor id="mx.styles:StyleProxy:StyleProxy"><apiName>StyleProxy</apiName><shortdesc>
      Constructeur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>mx.styles:IStyleClient</apiOperationClassifier><apiDesc>Objet qui implémente l’interface IStyleClient. 
      </apiDesc></apiParam><apiParam><apiItemName>filterMap</apiItemName><apiType value="Object"/><apiDesc>Jeu de styles à transmettre de la source au sous-composant.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Constructeur.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.styles:StyleProxy:clearStyle"><apiName>clearStyle</apiName><shortdesc conref="mx.styles.IStyleClient#clearStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.styles.IStyleClient#clearStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleProxy:getClassStyleDeclarations"><apiName>getClassStyleDeclarations</apiName><shortdesc conref="mx.styles.IStyleClient#getClassStyleDeclarations()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/><apiDesc>Tableau d’objets CSSStyleDeclaration.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.styles.IStyleClient#getClassStyleDeclarations()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleProxy:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.styles.IStyleClient#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>Valeur du style.
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.styles.IStyleClient#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleProxy:matchesCSSState"><apiName>matchesCSSState</apiName><shortdesc conref="mx.styles.IAdvancedStyleClient#matchesCSSState()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssState</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="mx.styles.IAdvancedStyleClient#matchesCSSState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleProxy:matchesCSSType"><apiName>matchesCSSType</apiName><shortdesc conref="mx.styles.IAdvancedStyleClient#matchesCSSType()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssType</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="mx.styles.IAdvancedStyleClient#matchesCSSType()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleProxy:notifyStyleChangeInChildren"><apiName>notifyStyleChangeInChildren</apiName><shortdesc conref="mx.styles.IStyleClient#notifyStyleChangeInChildren()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
     
      </apiDesc></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Indique si les changements de style doivent être propagés aux enfants des enfants. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.styles.IStyleClient#notifyStyleChangeInChildren()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleProxy:regenerateStyleCache"><apiName>regenerateStyleCache</apiName><shortdesc conref="mx.styles.IStyleClient#regenerateStyleCache()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Régénère les chaînes proto des enfants. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.styles.IStyleClient#regenerateStyleCache()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleProxy:registerEffects"><apiName>registerEffects</apiName><shortdesc conref="mx.styles.IStyleClient#registerEffects()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>Tableau de chaînes de noms d’effets. 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.styles.IStyleClient#registerEffects()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleProxy:setStyle"><apiName>setStyle</apiName><shortdesc conref="mx.styles.IStyleClient#setStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style.
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value=""/><apiDesc>Nouvelle valeur du style.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.styles.IStyleClient#setStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleProxy:styleChanged"><apiName>styleChanged</apiName><shortdesc conref="mx.styles.ISimpleStyleClient#styleChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Nom de la propriété de style qui a changé.    
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.styles.ISimpleStyleClient#styleChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.styles:StyleProxy:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc conref="mx.styles.IAdvancedStyleClient#stylesInitialized()">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.styles.IAdvancedStyleClient#stylesInitialized()">
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.styles:StyleProxy:className:get"><apiName>className</apiName><shortdesc conref="mx.styles.IStyleClient#className">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.styles.IStyleClient#className">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:StyleProxy:filterMap:get"><apiName>filterMap</apiName><shortdesc>
      Jeu de paires de chaînes. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Jeu de paires de chaînes. Le premier élément de la paire de chaînes est le nom du style du composant source. Le deuxième élément de la paire de chaînes est le nom du style du sous-composant. Cet objet vous permet de mapper un style particulier du composant parent à un autre style du sous-composant. Cette fonction est utile si le composant parent et le sous-composant partagent le même style, mais que vous souhaitez contrôler leurs valeurs séparément. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:StyleProxy:id:get"><apiName>id</apiName><shortdesc conref="mx.styles.IAdvancedStyleClient#id">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.styles.IAdvancedStyleClient#id">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:StyleProxy:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc conref="mx.styles.IStyleClient#inheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.styles.IStyleClient#inheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:StyleProxy:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc conref="mx.styles.IStyleClient#nonInheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.styles.IStyleClient#nonInheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:StyleProxy:source:get"><apiName>source</apiName><shortdesc>
      Objet qui implémente l’interface IStyleClient. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:IStyleClient</apiValueClassifier></apiValueDef><apiDesc>
      Objet qui implémente l’interface IStyleClient. Il s’agit de l’objet dont la mise en proxy est en cours. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:StyleProxy:styleDeclaration:get"><apiName>styleDeclaration</apiName><shortdesc conref="mx.styles.IStyleClient#styleDeclaration">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:CSSStyleDeclaration</apiValueClassifier></apiValueDef><apiDesc conref="mx.styles.IStyleClient#styleDeclaration">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:StyleProxy:styleName:get"><apiName>styleName</apiName><shortdesc conref="mx.styles.ISimpleStyleClient#styleName">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.styles.ISimpleStyleClient#styleName">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.styles:StyleProxy:styleParent:get"><apiName>styleParent</apiName><shortdesc conref="mx.styles.IAdvancedStyleClient#styleParent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.styles:IAdvancedStyleClient</apiValueClassifier></apiValueDef><apiDesc conref="mx.styles.IAdvancedStyleClient#styleParent">
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>