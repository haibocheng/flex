<?xml version="1.0"?>
<apiPackage id="mx.core"><apiName>mx.core</apiName><apiDetail/><apiClassifier id="mx.core:IButton"><apiName>IButton</apiName><shortdesc>
  IButton インターフェイスは、コンポーネントがボタンとして機能することを示す、マーカーインターフェイスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IButton インターフェイスは、コンポーネントがボタンとして機能することを示す、マーカーインターフェイスです。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IButton:mx.core:IButton:callLater"><apiName>callLater</apiName><shortdesc conref="mx.core.UIComponent#callLater()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="Function"/><apiDesc>後で実行されるメソッドへの参照です。
     
      </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>メソッドに渡す引数を表すオブジェクトの配列です。
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#callLater()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IButton:mx.core:IButton:emphasized:get"><apiName>emphasized</apiName><shortdesc conref="mx.controls.Button#emphasized">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.Button#emphasized">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFLoader"><apiName>ISWFLoader</apiName><shortdesc>
  ISWFLoader インターフェイスでは、互換性のあるアプリケーションと信頼されていないアプリケーションをロードするときに必要な特殊なプロパティおよびメソッドで、API を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFBridgeProvider</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ISWFLoader インターフェイスでは、互換性のあるアプリケーションと信頼されていないアプリケーションをロードするときに必要な特殊なプロパティおよびメソッドで、API を定義します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ISWFLoader:mx.core:ISWFLoader:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      ユーザーが画面で参照できる、ロードされたアプリケーションの境界を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このオブジェクトの可視部分を含む <codeph>Rectangle</codeph> です。矩形では、グローバル座標が使用されます。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>allApplications</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>可視矩形がこのアプリケーションの表示オブジェクトにのみ基づいて計算されるか、すべての親アプリケーションにも基づいて計算されるかを決定します。多くの親アプリケーションを含めると、返される表示可能領域が減少します。<codeph>true</codeph> の場合はすべてのアプリケーションを使用して可視領域が検索され、それ以外の場合は、このアプリケーションの表示オブジェクトのみ使用されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ユーザーが画面で参照できる、ロードされたアプリケーションの境界を取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ISWFLoader:mx.core:ISWFLoader:loadForCompatibility:get"><apiName>loadForCompatibility</apiName><shortdesc>
      異なるバージョンの Flex で構築されたアプリケーションと相互作用できるように、コンテンツがロードされるかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      異なるバージョンの Flex で構築されたアプリケーションと相互作用できるように、コンテンツがロードされるかどうかを示すフラグです。他の Flex アプリケーションとの互換性は、アプリケーションを兄弟 (またはピアー) ApplicationDomain にロードすることで実現されます。このフラグは、メインアプリケーションとは異なる SecurityDomain にサブアプリケーションがロードされる場合には無視されます。<codeph>true</codeph> の場合、コンテンツは、兄弟 ApplicationDomain にロードされます。<codeph>false</codeph> の場合、コンテンツは、子 ApplicationDomain にロードされます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UITextFormat"><apiName>UITextFormat</apiName><shortdesc>
  UITextFormat クラスは、UITextField クラスの文字フォーマット情報を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextFormat</apiBaseClassifier></apiClassifierDef><apiDesc>
  UITextFormat クラスは、UITextField クラスの文字フォーマット情報を表します。UITextField クラスは、多くの Flex 複合コンポーネントがテキストを表示するために使用するコンポーネントを定義します。
 
  <p>UITextFormat クラスは flash.text.TextFormat クラスを拡張して、テキスト測定メソッド <codeph>measureText()</codeph> および <codeph>measureHTMLText()</codeph> を追加し、フォントについての高度なアンチエイリアスを制御するためのプロパティを追加します。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UITextField"><linktext>mx.core.UITextField</linktext></link></related-links><apiConstructor id="mx.core:UITextFormat:UITextFormat"><apiName>UITextFormat</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>systemManager</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>SystemManager オブジェクトです。SystemManager はどのフォントが埋め込まれているのかを追跡します。通常、これは UIComponent の <codeph>systemManager</codeph> プロパティから取得された SystemManager です。
     
      </apiDesc></apiParam><apiParam><apiItemName>font</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>フォントの名前を指定するストリングです。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>size</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>フォントサイズを指定する数値です（ピクセル単位）。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>テキストの RGB カラーを指定する符号なし整数です。例えば、赤は 0xFF0000 です。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>bold</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>テキストが太字かどうかを指定する Boolean フラグです。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>italic</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>テキストがイタリック体かどうかを指定する Boolean フラグです。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>underline</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>テキストが下線付きかどうかを指定する Boolean フラグです。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>テキストのハイパーリンク先の URL を指定するストリングです。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>ハイパーリンク先の URL を表示するターゲットウィンドウを指定したストリングです。 ターゲットウィンドウが <codeph>null</codeph> または空のストリングである場合、ハイパーリンク先のページは同じブラウザーウィンドウに表示されます。 <codeph>urlString</codeph> パラメーターが <codeph>null</codeph> または空のストリングの場合、このプロパティは無効です。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>align</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>段落の配置の設定を flash.text.TextFormatAlign 値として指定するストリングです。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>leftMargin</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>段落の左マージンを指定する数値です（ピクセル単位）。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>rightMargin</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>段落の右マージンを指定する数値です（ピクセル単位）。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>indent</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>段落の左マージンから最初の文字までのインデントを指定する数値です（ピクセル単位）。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam><apiParam><apiItemName>leading</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>追加の行間を指定する数値です。<codeph>null</codeph> は、この UITextFormat がこのプロパティを指定していないことを示します。 このパラメーターはオプションであり、デフォルト値は <codeph>null</codeph> です。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.text.TextFormatAlign.xml"><linktext>flash.text.TextFormatAlign</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:UITextFormat:measureHTMLText"><apiName>measureHTMLText</apiName><shortdesc>
      指定された HTML テキストの寸法情報を返します。HTML テキストには &amp;lt;font&amp;gt; や &amp;lt;b&amp;gt; などの HTML タグが含まれる場合があります。単一行の UITextField に表示されるものとし、この UITextFormat オブジェクトを使用してテキストフォーマットを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>テキスト寸法を含む TextLineMetrics オブジェクトです。
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>htmlText</apiItemName><apiType value="String"/><apiDesc>測定する HTML テキストを指定するストリングです。
      
      </apiDesc></apiParam><apiParam><apiItemName>roundUp</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>幅と高さの測定値を最も近い整数に切り上げるかどうかを指定する Boolean フラグです。ほとんどの場合、切り上げるのが適切です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された HTML テキストの寸法情報を返します。HTML テキストには <codeph>&lt;font></codeph> や <codeph>&lt;b></codeph> などの HTML タグが含まれる場合があります。単一行の UITextField に表示されるものとし、この UITextFormat オブジェクトを使用してテキストフォーマットを定義します。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextFormat:measureText"><apiName>measureText</apiName><shortdesc>
      指定されたテキストの寸法情報を返します。単一行の UITextField コンポーネントに表示されるものとし、この UITextFormat オブジェクトを使用してテキストフォーマットを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>テキスト寸法を含む TextLineMetrics オブジェクトです。
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>測定するテキストを指定するストリングです。
      
      </apiDesc></apiParam><apiParam><apiItemName>roundUp</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>幅と高さの測定値を最も近い整数に切り上げるかどうかを指定する Boolean フラグです。ほとんどの場合、切り上げるのが適切です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたテキストの寸法情報を返します。単一行の UITextField コンポーネントに表示されるものとし、この UITextFormat オブジェクトを使用してテキストフォーマットを定義します。 
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiValue id="mx.core:UITextFormat:antiAliasType"><apiName>antiAliasType</apiName><shortdesc>
      UITextField クラスのアンチエイリアス設定を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"advanced"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      UITextField クラスのアンチエイリアス設定を定義します。 有効な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
      
      <p>デフォルト値は <codeph>"advanced"</codeph> であり、埋め込みフォントについて高度なアンチエイリアスが有効になります。 このプロパティを <codeph>"normal"</codeph> に設定すると、高度なアンチエイリアスが無効になります。</p>
      
      <p>このプロパティは、システムフォントには影響しません。</p>
      
      <p>このプロパティは、UITextField オブジェクトのすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:direction"><apiName>direction</apiName><shortdesc>
	  テキストの方向です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
	 
	  </apiDefaultValue></apiValueDef><apiDesc>
	  テキストの方向です。
	 
	  <p>使用できる値は、ラテン文字などの左から右のテキスト用の <codeph>"ltr"</codeph> と、アラビア文字やヘブライ文字などの右から左のテキスト用の <codeph>"rtl"</codeph> です。</p>
	 
	  <p>FTE と TLF は双方向テキストレイアウトアルゴリズムでこの値を使用し、Unicode 文字の順序を字形の順序にマッピングします。</p>
	 
	  <p>メモ：このスタイルは、UITextFormat が UITextField ではなく UIFTETextField と共に使用されたときにのみ適用されます。</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:gridFitType"><apiName>gridFitType</apiName><shortdesc>
      UITextField クラスのグリッドフィッティング設定を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"pixel"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      UITextField クラスのグリッドフィッティング設定を定義します。 有効な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>） および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
      
      <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
      
      <p>このプロパティは、システムフォントには影響しません。</p>
     
      <p>このプロパティは、UITextField オブジェクトのすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:locale"><apiName>locale</apiName><shortdesc>
	  テキストのロケールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
	 
	  </apiDefaultValue></apiValueDef><apiDesc>
	  テキストのロケールです。
	 
	  <p>FTE および TLF はこのロケールを使用して Unicode 文字をフォント字形にマッピングしたり、フォールバックフォントを検索したりします。</p>
	 
	  <p>メモ：このスタイルは、UITextFormat が UITextField ではなく UIFTETextField と共に使用されたときにのみ適用されます。</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:sharpness"><apiName>sharpness</apiName><shortdesc>
      UITextField クラスのシャープネス設定を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      UITextField クラスのシャープネス設定を定義します。 このプロパティは字形のエッジのシャープネスを指定します。有効な値は -400 ～ 400 までの数値です。 
      
      <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
      
      <p>このプロパティは、システムフォントには影響しません。</p>
     
      <p>このプロパティは、UITextField オブジェクトのすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:thickness"><apiName>thickness</apiName><shortdesc>
      UITextField クラスの太さ設定を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      UITextField クラスの太さ設定を定義します。 このプロパティは字形のエッジの太さを指定します。有効な値は -200 ～ 200 までの数値です。 
      
      <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
      
      <p>このプロパティは、システムフォントには影響しません。</p>
     
      <p>このプロパティは、UITextField オブジェクトのすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:useFTE"><apiName>useFTE</apiName><shortdesc>
      measureText() および measureHTMLText() メソッドによるテキスト測定方法を決定します。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>measureText()</codeph> および <codeph>measureHTMLText()</codeph> メソッドによるテキスト測定方法を決定します。
     
      <p><codeph>true</codeph> の場合は、Text Layout Framework の FTETextField クラスの offscreen インスタンスが使用されます。<codeph>false</codeph> の場合は、Flash Player の TextField クラスの offscreen インスタンスが使用されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      埋め込みフォント用の TextField を作成するために使用する moduleFactory です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      埋め込みフォント用の TextField を作成するために使用する moduleFactory です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredInstance"><apiName>IDeferredInstance</apiName><shortdesc>
  IDeferredInstance インターフェイスは、Flex 遅延インスタンスファクトリインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IDeferredInstance インターフェイスは、Flex 遅延インスタンスファクトリインターフェイスを定義します。 IDeferredInstance を実装すると、<codeph>getInstance()</codeph> メソッドが最初に呼び出されたときに特定のインスタンス値が作成され、その後 <codeph>getInstance()</codeph> メソッドが呼び出されたときにその値への参照が返されます。
 
  <p>Flex コンパイラーは、IDeferredInstance 型のプロパティに値を割り当てている MXML を検出すると、次の自動型変換を実行します。</p>
 
  <ol>
      <li>IDeferredInstance 型のプロパティに、コンポーネントタグなどのクラスを表す MXML 子タグの値を割り当てると、コンパイラーは IDeferredInstance 実装を作成します。その <codeph>getInstance()</codeph> メソッドは、MXML コードの指定に従って設定されたそのクラスのインスタンスを返します。 次の例はこの形式を示しています。この例で、MyComp は、IDeferredInstance タイプの myDeferredInstanceProperty という変数を持つカスタムコンポーネントです。 コンパイラーが作成する IDeferredInstance1 実装の <codeph>getInstance()</codeph> メソッドは、Label クラスのインスタンスを返します。そのテキストプロパティは "This is a deferred label" に設定されています。
          <pre>
          &lt;MyComp>
              &lt;myDeferredInstanceProperty>
                  &lt;Label text="This is a deferred label"/>
              &lt;/myDeferredInstanceProperty>
          &lt;/MyComp></pre>
      </li>
      <li>IDeferredInstance 型のプロパティにテキストストリングを割り当てると、コンパイラーはそのストリングを完全修飾クラス名として解釈し、IDeferredInstance 実装を作成します。この IDeferredInstance 実装の <codeph>getInstance()</codeph> メソッドは、指定されたクラスの新しいインスタンスを返します。 指定されたクラスにはパラメーターなしのコンストラクターを設定する必要があります。 次の例はこの形式を示しています。この例でコンパイラーが作成する IDeferredInstance1 実装の <codeph>getInstance()</codeph> メソッドは、MyClass クラスのインスタンスを返します。
          <pre>
          &lt;MyComp myDeferredInstanceProperty="myPackage.MyClass/></pre>
      </li>
  </ol>
 
  <p>IDeferredInstance インターフェイスは、ActionScript クラスがプロパティ値のインスタンス化を保留する場合に使用します。 ActionScript クラスが同じ値の複数のインスタンスを要求している場合は、IDeferredInstance は使用できません。そのような状況では、IFactory インターフェイスを使用します。</p>
  
  <p>states.AddChild クラスには、IDeferredInstance 型の <codeph>childFactory</codeph> プロパティがあります。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.states.xml#AddChild"><linktext>mx.states.AddChild</linktext></link></related-links><apiOperation id="mx.core:IDeferredInstance:mx.core:IDeferredInstance:getInstance"><apiName>getInstance</apiName><shortdesc>
      インスタンスがない場合は、クラスまたは関数からインスタンス Object を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>インスタンス Object。
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      インスタンスがない場合は、クラスまたは関数からインスタンス Object を作成します。
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
  SpriteAsset は、Flex アプリケーションに埋め込まれたベクターグラフィックイメージを表す flash.display.Sprite クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  SpriteAsset は、Flex アプリケーションに埋め込まれたベクターグラフィックイメージを表す flash.display.Sprite クラスのサブクラスです。 これにより IFlexDisplayObject インターフェイスが実装され、埋め込まれたベクターグラフィックイメージを Image コントロールで表示すること、またはコンテナの背景やコンポーネントスキンとして使用することが可能になります。
 
  <p>SVG ファイルのベクターグラフィックイメージを埋め込むことができます。Flash によって作成された SWF ファイルのスプライトシンボルを埋め込むこともできます。いずれの場合も、MXML コンパイラーは、埋め込まれたベクターグラフィックイメージを表すように SpriteAsset を拡張するクラスを自動生成します。</p>
 
  <p>通常は、Flex アプリケーションを作成するときに SpriteAsset クラスを直接使用する必要はありません。例えば、次のように記述すると、SWF ファイルからスプライトシンボルを埋め込み、Image コントロールに表示することができます。</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Assets.swf', symbol='Logo')"/></pre>
 
  <p>または、次のように記述することにより、CSS シンタックスの中でアプリケーションの背景イメージとして使用できます。</p>
 
  <pre>
  &lt;mx:Style>
      Application
      {
          backgroundImage: Embed(source="Assets.swf", symbol='Logo')
      }
  &lt;mx:Style/></pre>
 
  <p>MXML コンパイラーによって BitmapAsset のサブクラスが作成されたことを認識しておく必要はありません。</p>
 
  <p>ただし、ActionScript レベルで何が行われているのかを理解しておくことは有益です。 ベクターグラフィックイメージを ActionScript に埋め込むには、Class 型の変数を宣言し、この変数の前に <codeph>[Embed]</codeph> メタデータを挿入します。 例えば、次のようにして SWF ファイルからスプライトシンボルを埋め込みます。</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="Logo")]
  private var logoClass:Class;</pre>
 
  <p>MXML コンパイラーは、Assets.swf の Logo シンボルがスプライトであることを確認し、それを表す SpriteAsset クラスのサブクラスを自動生成し、この自動生成されたクラスへの参照を変数に設定します。 これにより、このクラス参照を使用して、<codeph>new</codeph> 演算子で SpriteAsset のインスタンスを作成できるようになります。また、作成したインスタンスで Sprite クラスの API を使用することもできます。</p>
 
  <pre>
  var logo:SpriteAsset = SpriteAsset(new logoClass());
  logo.rotation=45;</pre>
 
  <p>ただし、SpriteAsset インスタンスを自分で作成する必要はほとんどありません。イメージ関連のプロパティおよびスタイルをイメージ生成クラスに設定すると、コンポーネントが必要に応じてイメージインスタンスを作成します。 例えば、このベクターグラフィックイメージを Image コントロールに表示するために、Image の <codeph>source</codeph> プロパティを <codeph>logoClass</codeph> に設定することができます。 MXML では、次のようにします。</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SpriteAsset:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SpriteAsset:move"><apiName>move</apiName><shortdesc>
      
	  このオブジェクトを指定の x および y 座標に移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい x 位置です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい y 位置です。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  このオブジェクトを指定の x および y 座標に移動します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SpriteAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  このオブジェクトの実際のサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい幅です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい高さです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  このオブジェクトの実際のサイズを設定します。
	 
	  <p>このメソッドは主に <codeph>updateDisplayList()</codeph> メソッドの実装に使用されます。ここでオブジェクトの実際のサイズを、その明示的サイズ、親との相対（％）サイズ、および測定されたサイズに基づいて計算します。 次に <codeph>setActualSize()</codeph> を呼び出して、この実際のサイズをオブジェクトに適用します。</p>
	 
	  <p>その他の状況では、このメソッドを呼び出す代わりに、<codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph>、<codeph>percentHeight</codeph> などのプロパティを設定することになります。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SpriteAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      left、top、right、bottom の 4 つのプロパティを持つ、境界線の EdgeMetrics オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph>、<codeph>bottom</codeph> の 4 つのプロパティを持つ、境界線の EdgeMetrics オブジェクトを返します。 各プロパティの値は、境界線の 1 辺の太さをピクセル単位で表したものです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  このオブジェクトの測定した高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  このオブジェクトの測定した高さです。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  このオブジェクトの測定した幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  このオブジェクトの測定した幅です。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
  EdgeMetrics クラスは、ビジュアルコンポーネントの周りの 4 つのエッジ領域の幅をピクセル単位で指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  EdgeMetrics クラスは、ビジュアルコンポーネントの周りの 4 つのエッジ領域の幅をピクセル単位で指定します。
 
  <p>次の Flex プロパティは、EdgeMetrics オブジェクトの値を持ちます。</p>
 
  <ul>
  <li>mx.core.Container クラスおよび mx.skins.Border クラスの <codeph>borderMetrics</codeph> プロパティは、EdgeMetrics オブジェクトのプロパティ値の計算に境界線だけを含めます。</li>
 
  <li>mx.core.Container クラス、および Container クラスのサブクラスの <codeph>viewMetrics</codeph> プロパティは、存在する可能性のあるスクロールバーおよびコンテンツではないエレメント（Panel コンテナのヘッダー領域や ControlBar コンポーネントの領域など）を EdgeMetrics オブジェクトのプロパティ値の計算に含めます。</li>
 
  <li>mx.core.Container クラスの <codeph>viewMetricsAndPadding</codeph> プロパティは、<codeph>viewMetrics</codeph> プロパティ用としてリストされたアイテム、およびコンテナの余白によって決まる領域を、EdgeMetrics オブジェクトのプロパティ値の計算に含めます。</li>
  </ul>
 
  <p>この 3 つのプロパティはすべて、コンテナが測定とレイアウトに使用している同じ EdgeMetrics オブジェクトへの参照を返します。このオブジェクトのコピーは返しません。 コピーが必要な場合は、<codeph>clone()</codeph> メソッドを呼び出します。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="mx.skins.xml#Border"><linktext>mx.skins.Border</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links><apiConstructor id="mx.core:EdgeMetrics:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>left</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>左側エッジ領域の幅（ピクセル単位）です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>上側エッジ領域の高さ（ピクセル単位）です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>右側エッジ領域の幅（ピクセル単位）です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>下側エッジ領域の高さ（ピクセル単位）です。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  コンストラクターです。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:EdgeMetrics:clone"><apiName>clone</apiName><shortdesc>
	  この EdgeMetrics オブジェクトのコピーを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.core:EdgeMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  この EdgeMetrics オブジェクトのコピーを返します。
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:EdgeMetrics:EMPTY"><apiName>EMPTY</apiName><shortdesc>
	  left、top、right および bottom プロパティの値が 0 の EdgeMetrics オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
	  <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> プロパティの値が 0 の EdgeMetrics オブジェクトです。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:bottom"><apiName>bottom</apiName><shortdesc>
	  下側エッジ領域の高さ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  下側エッジ領域の高さ（ピクセル単位）です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:left"><apiName>left</apiName><shortdesc>
	  左側エッジ領域の幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  左側エッジ領域の幅（ピクセル単位）です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:right"><apiName>right</apiName><shortdesc>
	  右側エッジ領域の幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  右側エッジ領域の幅（ピクセル単位）です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:top"><apiName>top</apiName><shortdesc>
	  上側エッジ領域の高さ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  上側エッジ領域の高さ（ピクセル単位）です。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRepeater"><apiName>IRepeater</apiName><shortdesc>
  IRepeater インターフェイスは、Repeater オブジェクトの Repeater パブリック API 向けの API を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IRepeater インターフェイスは、Repeater オブジェクトの Repeater パブリック API 向けの API を定義します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeater:mx.core:IRepeater:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
      この Repeater が作成したすべての UIComponent へのバインディングを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      この Repeater が作成したすべての UIComponent へのバインディングを実行します。
	 
	  <p>このメソッドは、Flex フレームワークによって呼び出されます。開発者がこのメソッドを呼び出す必要はありません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IRepeater:mx.core:IRepeater:initializeRepeater"><apiName>initializeRepeater</apiName><shortdesc>
      新規の Repeater オブジェクトを初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.core:IContainer</apiOperationClassifier><apiDesc>この Repeater を含むコンテナであり、ここでこの Repeater が子を作成します。
	 
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>この Repeater がその子のすべての子孫を作成するかどうかを示す Boolean フラグです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      新規の Repeater オブジェクトを初期化します。
	 
	  <p>このメソッドは、Flex フレームワークによって呼び出されます。開発者がこのメソッドを呼び出す必要はありません。</p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeater:mx.core:IRepeater:container:get"><apiName>container</apiName><shortdesc>
      この Repeater を含むコンテナであり、ここでこの Repeater が子を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IContainer</apiValueClassifier></apiValueDef><apiDesc>
      この Repeater を含むコンテナであり、ここでこの Repeater が子を作成します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:count:get"><apiName>count</apiName><shortdesc>
      この Repeater を実行する回数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      この Repeater を実行する回数です。
	 
      <p>Repeater が実行中にデータプロバイダーの最後に達した場合、実際の実行回数は要求されたカウントよりも少なくなります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:currentIndex:get"><apiName>currentIndex</apiName><shortdesc>
      この Repeater の実行中、現在処理されている dataProvider 内のアイテムのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      この Repeater の実行中、現在処理されている <codeph>dataProvider</codeph> 内のアイテムのインデックスです。
	 
	  <p>Repeater が実行を終了した後は、このプロパティの値は <codeph>-1</codeph> になります。 ただし、繰り返しコンポーネントのインスタンスの <codeph>repeaterIndex</codeph> プロパティは、作成元の <codeph>dataProvider</codeph> アイテムのインデックスを記憶しています。 ネストされた Repeater の場合は、<codeph>repeaterIndices</codeph> 配列を使用できます。</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/repeaterIndex"><linktext>mx.core.UIComponent.repeaterIndex</linktext></link><link href="mx.core.xml#UIComponent/repeaterIndices"><linktext>mx.core.UIComponent.repeaterIndices</linktext></link><link href="mx.core.xml#UIComponent/instanceIndex"><linktext>mx.core.UIComponent.instanceIndex</linktext></link><link href="mx.core.xml#UIComponent/instanceIndices"><linktext>mx.core.UIComponent.instanceIndices</linktext></link></related-links></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:currentItem:get"><apiName>currentItem</apiName><shortdesc>
      この Repeater の実行中、現在処理されている dataProvider 内のアイテムです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      この Repeater の実行中、現在処理されている <codeph>dataProvider</codeph> 内のアイテムです。
	 
	  <p>Repeater が実行を終了した後は、このプロパティの値は <codeph>null</codeph> になります。 ただしこの場合は、繰り返しコンポーネントのインスタンスの <codeph>getRepeaterItem()</codeph> メソッドを呼び出して、作成元の <codeph>dataProvider</codeph> アイテムを取得できます。</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/getRepeaterItem()"><linktext>mx.core.UIComponent.getRepeaterItem()</linktext></link></related-links></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      この Repeater が、子の繰り返しインスタンスを作成するために使用するデータプロバイダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      この Repeater が、子の繰り返しインスタンスを作成するために使用するデータプロバイダーです。
	  
	  <p><codeph>dataProvider</codeph> プロパティを参照すると、常に ICollectionView オブジェクトか、または <codeph>null</codeph> が取得されます。 <codeph>dataProvider</codeph> プロパティを <codeph>null</codeph> 以外の値に設定すると、その値は以下の規則に従って ICollectionView オブジェクトに変換されます。</p>
	 
	  <ul>
	    <li>Array に設定すると、ArrayCollection に変換されます。</li>
	    <li>ICollectionView に設定すると、変換は実行されません。</li>
	    <li>IList に設定すると、ListCollectionView に変換されます。</li>
	    <li>XML または XMLList に設定すると、XMLListCollection に変換されます。</li>
	    <li>それ以外の場合は、単一エレメントの ArrayCollection に変換されます。</li>
	  </ul>
     
      <p>Repeater コンポーネントを実行するには、<codeph>dataProvider</codeph> プロパティの値を指定する必要があります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:recycleChildren:get"><apiName>recycleChildren</apiName><shortdesc>
      この Repeater が前に作成した子を再使用するのか、新しい子を作成するのかを示す Boolean フラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      この Repeater が前に作成した子を再使用するのか、新しい子を作成するのかを示す Boolean フラグです。
	 
	  <p><codeph>true</codeph> の場合、この Repeater の <codeph>dataProvider</codeph>、<codeph>startingIndex</codeph> または <codeph>count</codeph> が変更されると、新規データを既存の子にバインドすることにより、既存の子が再利用されます。 追加の子が必要な場合は、作成され、追加されます。 子が多すぎる場合には、余分な子が削除され、ガベージコレクションされます。</p>
     
      <p><codeph>false</codeph> の場合、この Repeater の <codeph>dataProvider</codeph>、<codeph>startingIndex</codeph> または <codeph>count</codeph> が変更されると、この Repeater は前に作成した子を削除し、新しいデータアイテムから新たに子を作成して、追加します。</p>
	 
	  <p>このプロパティのデフォルト値は <codeph>false</codeph> です。 <codeph>true</codeph> に設定するとパフォーマンスが向上しますが、この設定がどのような状況においても適切であるとは限りません。 例えば、前に作成した子がユーザー入力のテキストなどの状態情報を持っている場合、この状態は子が再使用されたときにリセットされません。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:startingIndex:get"><apiName>startingIndex</apiName><shortdesc>
      この Repeater が子の作成を開始する dataProvider へのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      この Repeater が子の作成を開始する <codeph>dataProvider</codeph> へのインデックスです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRectangularBorder"><apiName>IRectangularBorder</apiName><shortdesc>
  IRectangularBorder インターフェイスは、矩形の境界線のスキンで使用されるすべてのクラスに実装する必要があるインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IRectangularBorder インターフェイスは、矩形の境界線のスキンで使用されるすべてのクラスに実装する必要があるインターフェイスを定義します。
 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:layoutBackgroundImage"><apiName>layoutBackgroundImage</apiName><shortdesc conref="mx.skins.RectangularBorder#layoutBackgroundImage()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.RectangularBorder#layoutBackgroundImage()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:backgroundImageBounds:get"><apiName>backgroundImageBounds</apiName><shortdesc conref="mx.skins.RectangularBorder#backgroundImageBounds">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="mx.skins.RectangularBorder#backgroundImageBounds">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:hasBackgroundImage:get"><apiName>hasBackgroundImage</apiName><shortdesc conref="mx.skins.RectangularBorder#hasBackgroundImage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.skins.RectangularBorder#hasBackgroundImage">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MXMLObjectAdapter"><apiName>MXMLObjectAdapter</apiName><shortdesc>
  MXMLObjectAdapter クラスは、IMXMLObject インターフェイスのスタブ実装であるため、メソッドをすべて定義しなくてもインターフェイスを実装できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  MXMLObjectAdapter クラスは、IMXMLObject インターフェイスのスタブ実装であるため、メソッドをすべて定義しなくてもインターフェイスを実装できます。すべての実装が no-op と同等です。メソッドから値が返される場合は、null、0 または false です。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MXMLObjectAdapter:MXMLObjectAdapter"><apiName>MXMLObjectAdapter</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MXMLObjectAdapter:initialized"><apiName>initialized</apiName><shortdesc>
      
      実装オブジェクトが作成され、MXML タグに指定されたすべてのコンポーネントプロパティが初期化された後に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>このオブジェクトを作成した MXML ドキュメントです。
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc><codeph>document</codeph> がこのオブジェクトを参照するために使用する識別子です。 オブジェクトが <codeph>document</codeph> の deep プロパティである場合、<codeph>id</codeph> は null になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      実装オブジェクトが作成され、MXML タグに指定されたすべてのコンポーネントプロパティが初期化された後に呼び出されます。
	 
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:Application"><apiName>Application</apiName><shortdesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、アプリケーションにコンテンツを追加することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="direction"/><Alternative owner="mx.core:Application" replacement="spark.components.Application" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  アプリケーションの上境界線からコンテンツ領域までのピクセル数です。 
 
  </description>
<default>24
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  アプリケーションの下境界線からコンテンツ領域までのピクセル数です。  
 
  </description>
<default>24
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="backgroundGradientColors" owner="mx.core:Application" playerVersion="Flash9" theme="halo" type="Array">
<description>
  アプリケーションの背景グラデーションの塗りの着色で使用する色を指定します。これは、RGB カラーを指定する 2 つの uint 値から成る配列に設定する必要があります。エレメント 0 および 1 は、カラーグラデーションの開始値と終了値を指定します。 単色の背景の場合は、エレメント 0 と 1 に同じカラー値を設定します。 値 <codeph>undefined</codeph> は、<codeph>backgroundColor</codeph> プロパティに基づいて背景グラデーションが生成されることを示します。
 
  </description>
<default>undefined 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="backgroundGradientAlphas" owner="mx.core:Application" playerVersion="Flash9" theme="halo" type="Array">
<description>
  アプリケーションの背景グラデーションの塗りで使用されるアルファ透明度値を指定します。 これは、2 つの数値から成る配列に設定する必要があります。エレメント 0 および 1 は、アルファグラデーションの開始値と終了値を表します。
 
  </description>
<default>[ 1.0, 1.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="modalTransparencyDuration" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  モーダルウィンドウの開閉時に、モーダルの透明効果が再生される期間です（ミリ秒単位）。
 
  </description>
<default>100
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="modalTransparencyColor" owner="mx.core:Application" playerVersion="Flash9" type="uint">
<description>
  モーダルオーバーレイのレイヤーの色です。 このスタイルは、<codeph>modalTransparency</codeph> スタイルと共に、モーダルウィンドウを開いたときにアプリケーションに適用されるカラー化を決定するのに使用します。
 
  </description>
<default>#DDDDDD
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="modalTransparencyBlur" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  モーダルウィンドウが開いているとき、アプリケーションに適用されるぼかしです。 Blur エフェクトはイメージの細部をぼかします。 
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link></related-links></style><style inherit="yes" name="modalTransparency" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  PopUp Manager によって起動されたコンポーネントのモーダル性は、コンポーネントの真下に大きな透明オーバーレイを作成することによってシミュレートされます。透明オブジェクトのレンダリング上の理由により、オーバーレイの下のオブジェクトが少し薄く表示されることがあります。 効果的な透明性を設定するには、<codeph>modalTransparency</codeph> の値を 0.0（完全に透明）から 1.0（完全に不透明）の範囲で調整します。 <codeph>modalTransparencyColor</codeph> スタイルを設定してオーバーレイの色を変更することもできます。
 
  </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Application
    <strong>Properties</strong>
    application="<i>No default</i>"
    controlBar="null"
    frameRate="24"
    historyManagementEnabled="true|false"
    layout="vertical|horizontal|absolute"
    pageTitle"<i>No default</i>"
    preloader="<i>No default</i>"
    resetHistory="false|true"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    usePreloader="true|false"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
 
    <strong>Styles</strong> 
    backgroundGradientAlphas="[ 1.0, 1.0 ]"
    backgroundGradientColors="undefined"
    horizontalAlign="center|left|right"
    horizontalGap="8"
    modalTransparency="0.5"
    modalTransparencyBlur="3"
    modalTransparencyColor="#DDDDDD"
    modalTransparencyDuration="100"
    paddingBottom="24"
    paddingTop="24"
    verticalAlign="top|bottom|middle"
    verticalGap="6"
  
    <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:LayoutContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、アプリケーションにコンテンツを追加することができます。 このコンテナは、MXML アプリケーションファイルの最初のタグである <codeph>&lt;mx:Application></codeph> タグから作成されます。 Application コンテナを、アプリケーション内で使用する唯一のコンテナにした方が好都合のようにも思われますが、ほとんどの場合は、アプリケーションにコントロールを追加する前に、少なくとももう 1 つのコンテナを明示的に定義することになります。
 
  <p>アプリケーションは、白い背景を設定し、左揃えを行い、すべての余白を削除するという、あらかじめ定義された plain スタイルをサポートします。このスタイルを使用するには、次の操作を行います。</p>
 
  <pre>
    &lt;mx:Application styleName="plain" />
  </pre>
 
  <p>これは、次のスタイル属性を設定するのと同じです。</p>
 
  <pre>
    backgroundColor="0xFFFFFF"
    horizontalAlign="left"
    paddingLeft="0"
    paddingTop="0"
    paddingBottom="0"
    paddingRight="0"
  </pre>
 
  </apiDesc><example conref="SimpleApplicationExample.mxml"><swfblock conref="examples/SimpleApplicationExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.managers.xml#CursorManager"><linktext>mx.managers.CursorManager</linktext></link><link href="mx.managers.xml#LayoutManager"><linktext>mx.managers.LayoutManager</linktext></link><link href="mx.managers.xml#SystemManager"><linktext>mx.managers.SystemManager</linktext></link><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="mx.core:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  HTTPService 呼び出しが失敗したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  HTTPService 呼び出しが失敗したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  アプリケーションが初期化され、LayoutManager によって処理され、表示リストに追加された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  アプリケーションが初期化され、LayoutManager によって処理され、表示リストに追加された後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Application:Application"><apiName>Application</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Application:addToCreationQueue"><apiName>addToCreationQueue</apiName><shortdesc>
      Application の作成キューにコンテナを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="Object"/><apiDesc>キューに追加するコンテナの ID、またはコンテナ自体へのポインターです。
     
      </apiDesc></apiParam><apiParam><apiItemName>preferredIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>（オプション）キュー内でのコンテナの相対位置を決める正の整数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>callbackFunc</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>このパラメーターは無視されます。
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>このパラメーターは無視されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Application の作成キューにコンテナを追加します。
     
      <p>このメカニズムは、コンテナのコンテンツを特定の順序でインスタンス化して描画する場合に使用します。この関数が呼び出される前に、コンテナの <codeph>creationPolicy</codeph> プロパティが <codeph>"none"</codeph> に設定されている必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:Application:controlBar"><apiName>controlBar</apiName><shortdesc>
      このアプリケーションの ApplicationControlBar です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このアプリケーションの ApplicationControlBar です。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#ApplicationControlBar"><linktext>mx.containers.ApplicationControlBar</linktext></link></related-links></apiValue><apiValue id="mx.core:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        アプリケーションのフレームレートを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
      
      </apiDefaultValue></apiValueDef><apiDesc>
        アプリケーションのフレームレートを指定します。
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:historyManagementEnabled"><apiName>historyManagementEnabled</apiName><shortdesc>
      false の場合、History Manager は無効になります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>false</codeph> の場合、History Manager は無効になります。 BrowserManager を使用する場合は、false に設定することをお勧めします。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        ブラウザーのタイトルバーに表示されるストリングを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
        ブラウザーのタイトルバーに表示されるストリングを指定します。 このプロパティは、HTML の <codeph>&lt;title></codeph> タグと同じ機能を提供します。
     
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。MXML コードに設定されている値は、SDK に用意されている HTML テンプレートを更新するツールで使用できるように設計されています。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:preloader"><apiName>preloader</apiName><shortdesc>
        カスタムプログレスバーを定義する、SWC コンポーネントクラスまたは ActionScript コンポーネントクラスのパスを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
        カスタムプログレスバーを定義する、SWC コンポーネントクラスまたは ActionScript コンポーネントクラスのパスを指定します。SWC コンポーネントは、MXML ファイルが置かれているディレクトリ、または Flex Web アプリケーションの WEB-INF¥flex¥user_classes ディレクトリに置く必要があります。
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:preloaderChromeColor"><apiName>preloaderChromeColor</apiName><shortdesc>
        デフォルトのプリローダーコンポーネントで使用されるベースカラーを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
        デフォルトのプリローダーコンポーネントで使用されるベースカラーを指定します。このプロパティの効果は、Spark スキンで使用される <codeph>chromeColor</codeph> スタイルと同じです。通常、このプロパティは、アプリケーションで使用される <codeph>chromeColor</codeph> スタイルと同じ値に設定する必要があります。
        
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:resetHistory"><apiName>resetHistory</apiName><shortdesc>
      true の場合、アプリケーションがリロードされるたびに、アプリケーションの履歴状態が初期状態にリセットされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、アプリケーションがリロードされるたびに、アプリケーションの履歴状態が初期状態にリセットされます。 アプリケーションは、次のいずれかが発生するとリロードされます。
      <ul>
        <li>ユーザーがブラウザーの更新ボタンをクリックしたとき。</li>
        <li>ユーザーが別の Web ページに移動してから、ブラウザーの戻るボタンをクリックして Flex アプリケーションに戻ったとき。</li>
        <li>ユーザーがブラウザーのお気に入りメニューまたはブックマークメニューから Flex アプリケーションをロードしたとき。</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        Flash Player または AIR のコールスタックの最大の深さを指定します。この深さに達すると、Flash Player または AIR は停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Flash Player または AIR のコールスタックの最大の深さを指定します。この深さに達すると、Flash Player または AIR は停止します。 実質的なスタックオーバーフローの制限になります。
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        ActionScript イベントハンドラーの最大実行継続時間を秒で指定します。この時間を超えると、Flash Player または AIR はこのイベントハンドラーがハングアップしたと見なして、実行を中止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
      
      </apiDefaultValue></apiValueDef><apiDesc>
        ActionScript イベントハンドラーの最大実行継続時間を秒で指定します。この時間を超えると、Flash Player または AIR はこのイベントハンドラーがハングアップしたと見なして、実行を中止します。 設定できる最大許容値は 60 秒です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        true の場合、アプリケーションのプリローダーを表示することを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
        <codeph>true</codeph> の場合、アプリケーションのプリローダーを表示することを示します。
        <p>メモ：このプロパティは ActionScript コードでは設定できません。MXML コードで設定する必要があります。</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:application:get"><apiName>application</apiName><shortdesc>
      最上位のアプリケーションへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Object"/><apiDeprecated replacement="FlexGlobals.topLevelApplication" sinceVersion="4.0"/></apiValueDef><apiDesc>
      最上位のアプリケーションへの参照です。
     
      <p>通常、Application オブジェクトは階層を構成しています。これは、Application が SWFLoader コントロールを使用して、別の Application を動的にロードできるためです。 UIComponent の <codeph>parentApplication</codeph> プロパティを使用すると、この UIComponent が存在するサブアプリケーションにアクセスし、階層を上って最上位の Application にアクセスできます。</p>
      
      <p>このプロパティは、Flex4 から使用されなくなりました。このプロパティは、以前のバージョンと同じように、mx.core.Application タイプおよび mx.core.WindowedApplication タイプのアプリケーションを返します。 Flex 4 以降では、spark.components.Application タイプまたは spark.components.WindowedApplication タイプのアプリケーションも返されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      parameters プロパティは、この Application に渡されるパラメーターを表す名前と値のペアを含む Object を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      parameters プロパティは、この Application に渡されるパラメーターを表す名前と値のペアを含む Object を返します。
     
      <p>for-in ループを使用すると、パラメーター Object からすべての名前と値を抽出できます。</p>
     
      <p>パラメーターは、Application の URL のクエリストリングと、FlashVars HTML パラメーターの値の 2 つから提供されます。HTML パラメーターはメイン Application にのみ影響します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:url:get"><apiName>url</apiName><shortdesc>
      この Application の SWF ファイルがロードされた URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      この Application の SWF ファイルがロードされた URL です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      アプリケーションのソースを参照できる URL です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      アプリケーションのソースを参照できる URL です。このプロパティを設定すると、「ソースの表示」メニューアイテムがアプリケーションのデフォルトのコンテキストメニューに挿入されます。 このメニューアイテムを選択すると、新しいウィンドウに <codeph>viewSourceURL</codeph> が開きます。
     
      <p>次の例に示すように、<codeph>viewSourceURL</codeph> プロパティは、ActionScript ではなく MXML を使用して設定する必要があります。</p>
     
      <pre>
        &lt;mx:Application viewSourceURL="http://path/to/source">
          ...
        &lt;/mx:Application></pre>
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexModule"><apiName>IFlexModule</apiName><shortdesc>
  IFlexModule インターフェイスは、IFlexModuleFactory とのオプションの約束ごととして使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexModule インターフェイスは、IFlexModuleFactory とのオプションの約束ごととして使用します。IFlexModuleFactory で IFlexModule インスタンスが作成された後、ファクトリは自身への参照を格納します。
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:DesignLayer"><apiName>DesignLayer</apiName><shortdesc>
      DesignLayer クラスは、実行時に 1 つ以上の IVisualElement インスタンスに関連付けることができる可視性グループを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
      DesignLayer クラスは、実行時に 1 つ以上の IVisualElement インスタンスに関連付けることができる可視性グループを表します。DesignLayer インスタンスは <codeph>visible</codeph> プロパティおよびアルファプロパティをサポートしています。これらのプロパティの設定は、関連付けられている子レイヤーに伝播されます。
     
      </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:DesignLayer_mx.events.PropertyChangeEvent_layerPropertyChange"><apiName>layerPropertyChange</apiName><shortdesc>
      effectiveVisibility または effectiveAlpha のいずれかが変更されたときにレイヤーによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>mx.events.PropertyChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      <codeph>effectiveVisibility</codeph> または <codeph>effectiveAlpha</codeph> のいずれかが変更されたときにレイヤーによって送出されます。
      
      </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:DesignLayer:DesignLayer"><apiName>DesignLayer</apiName><shortdesc>
          コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          コンストラクターです。
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DesignLayer:addLayer"><apiName>addLayer</apiName><shortdesc>
          子 DesignLayer をこのレイヤーに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier><apiDesc>追加する子レイヤーです。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          子 DesignLayer をこのレイヤーに追加します。
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DesignLayer:getLayerAt"><apiName>getLayerAt</apiName><shortdesc>
          指定されたインデックスの位置にある子 DesignLayer を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>インデックスが 0 ～ (<codeph>numLayers</codeph> - 1)の間である場合は、指定された子 DesignLayer。インデックスが無効の場合、<codeph>null</codeph> を返します。
         
          </apiDesc><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>子 DesignLayer の 0 から始まるインデックスです。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          指定されたインデックスの位置にある子 DesignLayer を返します。
         
          <p>子 DesignLayer の順番は重要ではありません。<codeph>getLayerAt</codeph> メソッドは numLayers と共に使用することを意図しており、これにより子リストを反復します。</p> 
         
          </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.numLayers.xml"><linktext>numLayers</linktext></link></related-links></apiOperation><apiOperation id="mx.core:DesignLayer:removeLayer"><apiName>removeLayer</apiName><shortdesc>
          このレイヤーから子 DesignLayer を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier><apiDesc>削除する子レイヤー。
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          このレイヤーから子 DesignLayer を削除します。
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:DesignLayer:alpha:get"><apiName>alpha</apiName><shortdesc>
          このデザインレイヤーインスタンスのアルファです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          このデザインレイヤーインスタンスのアルファです。
         
          <p>更新されると、このレイヤーのすべての <codeph>layerPropertyChange</codeph> リスナーと、影響のある子孫レイヤー（ある場合）に <codeph>effectiveAlpha</codeph> の変更イベントが送出されます。</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:effectiveAlpha:get"><apiName>effectiveAlpha</apiName><shortdesc>
          このデザインレイヤーの有効なアルファを返すプロパティです（祖先レイヤーのアルファを掛け合わせたものをこのレイヤーのアルファと見なします）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>1.0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          このデザインレイヤーの有効なアルファを返すプロパティです（祖先レイヤーのアルファを掛け合わせたものをこのレイヤーのアルファと見なします）。  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:effectiveVisibility:get"><apiName>effectiveVisibility</apiName><shortdesc>
          このデザインレイヤーの有効な可視性を返します（このレイヤーの可視性を祖先レイヤーと同様に見なします）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>true
         
          </apiDefaultValue></apiValueDef><apiDesc>
          このデザインレイヤーの有効な可視性を返します（このレイヤーの可視性を祖先レイヤーと同様に見なします）。  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:id:get"><apiName>id</apiName><shortdesc>
          レイヤーコンポーネントの ID です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
          レイヤーコンポーネントの ID です。この値はレイヤーのインスタンス名になります。この値には、空白または特殊文字を含めないでください。 
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:numLayers:get"><apiName>numLayers</apiName><shortdesc>
          このレイヤーが持つ直接の子 DesignLayer の数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          このレイヤーが持つ直接の子 DesignLayer の数です。
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:parent:get"><apiName>parent</apiName><shortdesc>
          このレイヤーの親レイヤーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier><apiDefaultValue>null
         
          </apiDefaultValue></apiValueDef><apiDesc>
          このレイヤーの親レイヤーです。 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:visible:get"><apiName>visible</apiName><shortdesc>
          このデザインレイヤーインスタンスの可視性です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
         
          </apiDefaultValue></apiValueDef><apiDesc>
          このデザインレイヤーインスタンスの可視性です。
         
          <p>更新されると、このレイヤーのすべての <codeph>layerPropertyChange</codeph> リスナーと、影響のある子孫レイヤー（ある場合）に <codeph>effectiveVisibility</codeph> の変更イベントが送出されます。</p>
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexAsset"><apiName>IFlexAsset</apiName><shortdesc>
  IFlexAsset はマーカーインターフェイスであり、クラスが IFlexAsset の実装を宣言している場合、そのクラスは Flex アプリケーションに埋め込まれたビットマップ、フォント、サウンドなどのアセットを表すことを意味します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexAsset はマーカーインターフェイスであり、クラスが IFlexAsset の実装を宣言している場合、そのクラスは Flex アプリケーションに埋め込まれたビットマップ、フォント、サウンドなどのアセットを表すことを意味します。このインターフェイスは、そのクラスが実際に実装する必要のあるプロパティまたはメソッドを定義していません。
 
  <p>Player は ActionScript クラスを使用して、埋め込まれたアセット、および実行可能な ActionScript コードを表します。アセットを Flex アプリケーションに埋め込むと、MXML コンパイラーはそれを表すクラスを自動生成します。それらのクラスは IFlexAsset の実装を宣言するため、コードクラスと区別できます。</p>
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IBorder"><apiName>IBorder</apiName><shortdesc>
  IBorder インターフェイスは、境界線のスキンで使用されるすべてのクラスに実装する必要があるインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IBorder インターフェイスは、境界線のスキンで使用されるすべてのクラスに実装する必要があるインターフェイスを定義します。
 
  <p>境界線のスキンが IBorder を実装していなくても、エラーにはなりません。ただし、この場合、このスキンを使用するコンテナは境界線のメトリックを特定できません。したがって、コンテナは、左上隅を始点として、（追加スペースがある場合は調整して）コンテンツを配置します。 HaloBorder クラスの場合、通常は、<codeph>borderThickness</codeph> スタイルによって <codeph>borderMetrics</codeph> スタイルの値が決まります。 グラフィカルスキンクラスの場合、Flex では、<codeph>scale9Grid</codeph> プロパティを調べて、<codeph>borderMetrics</codeph> スタイルの値を特定します。</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IBorder:mx.core:IBorder:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      left、top、right、bottom の 4 つのプロパティを持つ、境界線の EdgeMetrics オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph>、<codeph>bottom</codeph> の 4 つのプロパティを持つ、境界線の EdgeMetrics オブジェクトを返します。 各プロパティの値は、境界線の 1 辺の太さをピクセル単位で表したものです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UIComponent"><apiName>UIComponent</apiName><shortdesc>
  UIComponent クラスは、インタラクティブおよび非インタラクティブのすべてのビジュアルコンポーネントの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><effects><effect event="removed" name="removedEffect" owner="mx.core:UIComponent">
<description>
  コンポーネントがコンテナから削除されたときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="added" name="addedEffect" owner="mx.core:UIComponent">
<description>
  コンポーネントがコンテナに子として追加されたときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="focusOut" name="focusOutEffect" owner="mx.core:UIComponent">
<description>
  コンポーネントがキーボードフォーカスを失ったときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="focusIn" name="focusInEffect" owner="mx.core:UIComponent">
<description>
  コンポーネントがキーボードフォーカスを取得したときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="rollOut" name="rollOutEffect" owner="mx.core:UIComponent">
<description>
  ユーザーがマウスを移動し、ポインターがコンポーネントから離れたときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="rollOver" name="rollOverEffect" owner="mx.core:UIComponent">
<description>
  ユーザーがマウスポインターをコンポーネント上に置いたときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="mouseUp" name="mouseUpEffect" owner="mx.core:UIComponent">
<description>
  ユーザーがコンポーネント上でマウスボタンを離したときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="mouseDown" name="mouseDownEffect" owner="mx.core:UIComponent">
<description>
  ユーザーがコンポーネント上でマウスボタンを押したときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="hide" name="hideEffect" owner="mx.core:UIComponent">
<description>
  コンポーネントが不可視状態になったときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="show" name="showEffect" owner="mx.core:UIComponent">
<description>
  コンポーネントが表示されたときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="resize" name="resizeEffect" owner="mx.core:UIComponent">
<description>
  コンポーネントのサイズが変更されたときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="move" name="moveEffect" owner="mx.core:UIComponent">
<description>
  コンポーネントが移動されたときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="creationComplete" name="creationCompleteEffect" owner="mx.core:UIComponent">
<description>
  コンポーネントが作成されたときに再生されます。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style format="Color" inherit="yes" name="themeColor" owner="mx.core:UIComponent" playerVersion="Flash9" theme="halo" type="uint">
<description>
  コンポーネントのテーマカラーです。このプロパティは、ハイライトの外観やコンポーネントが選択されたときの外観、およびその他の同様の視覚的なキューをコントロールしますが、コンポーネントの通常の境界線や背景色には影響を与えません。 推奨される値は、<codeph>haloGreen</codeph>、<codeph>haloBlue</codeph>、<codeph>haloOrange</codeph> および <codeph>haloSilver</codeph> です。ただし、任意の有効なカラー値を使用できます。
 
  <p><codeph>rollOverColor</codeph> および <codeph>selectionColor</codeph> スタイルのデフォルト値は <codeph>themeColor</codeph> の値に基づきます。</p>
 
  </description>
<default>"haloBlue"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="focusThickness" owner="mx.core:UIComponent" playerVersion="Flash9" type="Number">
<description>
  フォーカス矩形のアウトラインの幅（ピクセル単位）を表します。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusSkin" owner="mx.core:UIComponent" playerVersion="Flash9" type="Class">
<description>
  フォーカス矩形の描画に使用するスキンです。Halo コンポーネントのデフォルト値は、mx.skins.halo.HaloFocusRect です。Spark コンポーネントのデフォルト値は、spark.skins.spark.FocusSkin です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusBlendMode" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  フォーカス矩形で使用されるブレンドモードです。 詳細については、flash.display.DisplayObject クラスの <codeph>blendMode</codeph> プロパティを参照してください。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="errorColor" owner="mx.core:UIComponent" playerVersion="Flash9" type="uint">
<description>
  検証が失敗した場合のコンポーネントのハイライトの色です。 Flex では、検証が失敗した場合、コンポーネントの <codeph>borderColor</codeph> スタイルもこの <codeph>errorColor</codeph> に設定します。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="mx.core:UIComponent" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのメインカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalCenter" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  コンポーネントのコンテンツ領域の中心からコンポーネントの中心までの垂直距離（ピクセル単位）を表します。このスタイルが設定されている場合、コンポーネントの中心はそのコンテンツ領域の中心に対して固定されます。コンテナのサイズが変更されても、2 つの中心の垂直距離は維持されます。
 
  <p>このスタイルが有効なのは、Canvas コンテナのコンポーネントで使用する場合、または <codeph>layout</codeph> プロパティが <codeph>absolute</codeph> に設定されている Panel コンテナまたは Application コンテナのコンポーネントで使用する場合のみです。</p> 
 
  <p>デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="top" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  コントロールのコンテンツ領域の上端からコンポーネントの上端までの垂直距離（ピクセル単位）を表します。 このスタイルが設定されている場合、コンポーネントの上端はそのコンテンツ領域の上端に対して固定されます。コンテナのサイズが変更されても、2 つの上端の垂直距離は維持されます。
 
  <p>このスタイルが有効なのは、Canvas コンテナのコンポーネントで使用する場合、または <codeph>layout</codeph> プロパティが <codeph>absolute</codeph> に設定されている Panel コンテナまたは Application コンテナのコンポーネントで使用する場合のみです。</p> 
 
  <p>デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="right" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  コンポーネントの右端からコンテンツ領域の右端までの水平距離（ピクセル単位）を表します。 このスタイルが設定されている場合、コンポーネントの右端はそのコンテンツ領域の右端に対して固定されます。コンテナのサイズが変更されても、2 つの右端の水平距離は維持されます。
 
  <p>このスタイルが有効なのは、Canvas コンテナのコンポーネントで使用する場合、または <codeph>layout</codeph> プロパティが <codeph>absolute</codeph> に設定されている Panel コンテナまたは Application コンテナのコンポーネントで使用する場合のみです。</p> 
 
  <p>デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="left" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  コンポーネントのコンテンツ領域の左端からコンポーネントの左端までの水平距離（ピクセル単位）を表します。 このスタイルが設定されている場合、コンポーネントの左端はそのコンテンツ領域の左端に対して固定されます。コンテナのサイズが変更されても、2 つの左端の水平距離は維持されます。
 
  <p>このスタイルが有効なのは、Canvas コンテナのコンポーネントで使用する場合、または <codeph>layout</codeph> プロパティが <codeph>absolute</codeph> に設定されている Panel コンテナまたは Application コンテナのコンポーネントで使用する場合のみです。</p> 
 
  <p>デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalCenter" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  コンポーネントのコンテンツ領域の中心からコンポーネントの中心までの水平距離（ピクセル単位）を表します。 このスタイルが設定されている場合、コンポーネントの中心はそのコンテンツ領域の中心に対して固定されます。コンテナのサイズが変更されても、2 つの中心の水平距離は維持されます。
 
  <p>このスタイルが有効なのは、Canvas コンテナのコンポーネントで使用する場合、または <codeph>layout</codeph> プロパティが <codeph>absolute</codeph> に設定されている Panel コンテナまたは Application コンテナのコンポーネントで使用する場合のみです。</p> 
 
  <p>デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="bottom" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  コンポーネントの下端からコンテンツ領域の下端までの垂直距離（ピクセル単位）を表します。 このスタイルが設定されている場合、コンポーネントの下端はそのコンテンツ領域の下端に対して固定されます。コンテナのサイズが変更されても、2 つの下端の垂直距離は維持されます。
 
  <p>このスタイルが有効なのは、Canvas コンテナのコンポーネントで使用する場合、または <codeph>layout</codeph> プロパティが <codeph>absolute</codeph> に設定されている Panel コンテナまたは Application コンテナのコンポーネントで使用する場合のみです。</p> 
 
  <p>デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="baseline" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  コンテンツ領域の上端からコントロールのベースライン位置までの垂直距離（ピクセル単位）を表します。 このスタイルが設定されている場合、コンポーネントのベースラインはそのコンテンツ領域の上端に対して固定されます。コンテナのサイズが変更されても、コンポーネントのベースラインとそのコンテンツ領域の上端の垂直距離は維持されます。
 
  <p>このスタイルが有効なのは、Canvas コンテナのコンポーネントで使用する場合、または <codeph>layout</codeph> プロパティが <codeph>absolute</codeph> に設定されている Panel コンテナまたは Application コンテナのコンポーネントで使用する場合のみです。</p> 
 
  <p>デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>All user interface components in Flex extend the UIComponent class.
  Flex components inherit the following properties from the UIComponent
  class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
   <b>Properties </b>
    accessibilityDescription="null"
    accessibilityName="null"
    accessibilityShortcut="null"
    accessibilitySilent="true|false"
    automationName="null"
    cachePolicy="auto|on|off"
    currentState="null"
    doubleClickEnabled="false|true"
    enabled="true|false"
    explicitHeight="NaN"
    explicitMaxHeight="NaN"
    explicitMaxWidth="NaN"
    explicitMinHeight="NaN"
    explicitMinWidth="NaN"
    explicitWidth="NaN"
    focusEnabled="true|false"
    hasFocusableChildren="false|true"
    height="0"
    id=""
    includeInLayout="true|false"
    maxHeight="10000"
    maxWidth="10000"
    measuredHeight=
    measuredMinHeight=
    measuredMinWidth=
    measuredWidth=
    minHeight="0"
    minWidth="0"
    mouseFocusEnabled="true|false"
    percentHeight="NaN"
    percentWidth="NaN"
    scaleX="1.0"
    scaleY="1.0"
    states="null"
    styleName="undefined"
    toolTip="null"
    transitions=""
    validationSubField
    width="0"
    x="0"
    y="0"
 
  <b>Styles</b>
    bottom="undefined"
    errorColor="0xFF0000"
    focusBlendMode="normal"
    focusSkin="HaloFocusRect""
    focusThickness="2"
    horizontalCenter="undefined"
    left="undefined"
    right="undefined"
    themeColor="haloGreen"
    top="undefined"
    verticalCenter="undefined"
 
  <b>Effects</b>
    addedEffect="<i>No default</i>"
    creationCompleteEffect="<i>No default</i>"
    focusInEffect="<i>No default</i>"
    focusOutEffect="<i>No default</i>"
    hideEffect="<i>No default</i>"
    mouseDownEffect="<i>No default</i>"
    mouseUpEffect="<i>No default</i>"
    moveEffect="<i>No default</i>"
    removedEffect="<i>No default</i>"
    resizeEffect="<i>No default</i>"
    rollOutEffect="<i>No default</i>"
    rollOverEffect="<i>No default</i>"
    showEffect="<i>No default</i>"
 
  <b>Events</b>
    add="<i>No default</i>"
    creationComplete="<i>No default</i>"
    currentStateChange="<i>No default</i>"
    currentStateChanging="<i>No default</i>"
    dragComplete="<i>No default</i>"
    dragDrop="<i>No default</i>"
    dragEnter="<i>No default</i>"
    dragExit="<i>No default</i>"
    dragOver="<i>No default</i>"
    effectEnd="<i>No default</i>"
    effectStart="<i>No default</i>"
    enterState="<i>No default</i>"
    exitState="<i>No default</i>"
    hide="<i>No default</i>"
    initialize="<i>No default</i>"
    invalid="<i>No default</i>"
    mouseDownOutside="<i>No default</i>"
    mouseWheelOutside="<i>No default</i>"
    move="<i>No default</i>"
    preinitialize="<i>No default</i>"
    record="<i>No default</i>"
    remove="<i>No default</i>"
    resize="<i>No default</i>"
    show="<i>No default</i>"
    toolTipCreate="<i>No default</i>"
    toolTipEnd="<i>No default</i>"
    toolTipHide="<i>No default</i>"
    toolTipShow="<i>No default</i>"
    toolTipShown="<i>No default</i>"
    toolTipStart="<i>No default</i>"
    updateComplete="<i>No default</i>"
    valid="<i>No default</i>"
    valueCommit="<i>No default</i>"
  &gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IConstraintClient</apiBaseInterface><apiBaseInterface>mx.core:IDeferredInstantiationUIComponent</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IID</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.managers:ILayoutManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IPropertyChangeNotifier</apiBaseInterface><apiBaseInterface>mx.core:IRepeaterClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient</apiBaseInterface><apiBaseInterface>mx.styles:IAdvancedStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseInterface>mx.validators:IValidatorListener</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  UIComponent クラスは、インタラクティブおよび非インタラクティブのすべてのビジュアルコンポーネントの基本クラスです。
 
  <p>インタラクティブコンポーネントを使用すると、Tab キーなどを使用したキーボード上でのフォーカス操作や、キーボード入力やマウス入力などの下位レベルイベントの受け入れができます。また、これらの入力を受け入れないようにインタラクティブコンポーネントを無効にすることもできます。この点が、Label や ProgressBar のようなインタラクティブではないコンポーネントとは異なります。これらのコンポーネントは単なる表示機能を持つだけで、ユーザー側からは操作できません。</p>
  <p>UIComponent クラスは MXML タグとしては使用されず、他のクラスの基本クラスとして使用されます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_START_toolTipStart"><apiName>toolTipStart</apiName><shortdesc>
  toolTip プロパティが設定されているコンポーネント上にユーザーがマウスを移動すると同時に、そのコンポーネントによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_START</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>toolTip</codeph> プロパティが設定されているコンポーネント上にユーザーがマウスを移動すると同時に、そのコンポーネントによって送出されます。
 
  <p>ツールヒントイベントのシーケンスは、<codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> および <codeph>toolTipEnd</codeph> です。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_SHOWN_toolTipShown"><apiName>toolTipShown</apiName><shortdesc>
  コンポーネントのツールヒントが表示された後に、コンポーネントによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_SHOWN</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントのツールヒントが表示された後に、コンポーネントによって送出されます。
 
  <p><codeph>ToolTipManager.showEffect</codeph> プロパティを使用してエフェクトを指定すると、エフェクトの再生が停止した後にこのイベントが送出されます。</p>
 
  <p>ツールヒントイベントのシーケンスは、<codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> および <codeph>toolTipEnd</codeph> です。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_SHOW_toolTipShow"><apiName>toolTipShow</apiName><shortdesc>
  コンポーネントのツールヒントが表示される前に、コンポーネントによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_SHOW</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントのツールヒントが表示される前に、コンポーネントによって送出されます。
 
  <p><codeph>ToolTipManager.showEffect</codeph> プロパティを使用してエフェクトを指定すると、エフェクトの再生が開始される前にこのイベントが送出されます。 このイベントを使用すると、ツールヒントが表示される前にその内容を変更できます。</p>
 
  <p>ツールヒントイベントのシーケンスは、<codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> および <codeph>toolTipEnd</codeph> です。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_HIDE_toolTipHide"><apiName>toolTipHide</apiName><shortdesc>
  コンポーネントのツールヒントが非表示にされる前に、コンポーネントによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_HIDE</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントのツールヒントが非表示にされる前に、コンポーネントによって送出されます。
 
  <p><codeph>ToolTipManager.hideEffect</codeph> プロパティを使用してエフェクトを指定すると、エフェクトの再生が開始される前にこのイベントが送出されます。</p>
 
  <p>ツールヒントイベントのシーケンスは、<codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> および <codeph>toolTipEnd</codeph> です。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_END_toolTipEnd"><apiName>toolTipEnd</apiName><shortdesc>
  コンポーネントのツールヒントが非表示にされており、まもなく破棄されるときに、コンポーネントによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_END</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントのツールヒントが非表示にされており、まもなく破棄されるときに、コンポーネントによって送出されます。
 
  <p><codeph>ToolTipManager.hideEffect</codeph> プロパティを使用してエフェクトを指定すると、エフェクトの再生が停止した後にこのイベントが送出されます。</p>
 
  <p>ツールヒントイベントのシーケンスは、<codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> および <codeph>toolTipEnd</codeph> です。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_CREATE_toolTipCreate"><apiName>toolTipCreate</apiName><shortdesc>
  ツールヒントを作成するときにコンポーネントによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_CREATE</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ツールヒントを作成するときにコンポーネントによって送出されます。
 
  <p>独自の IToolTip オブジェクトを作成し、それに対する参照を、イベントオブジェクトの <codeph>toolTip</codeph> プロパティ（<codeph>toolTipCreate</codeph> ハンドラーに渡されます）に入れておくと、ToolTipManager によってそのカスタムツールヒントが表示されます。 それ以外の場合は、ToolTipManager が、表示する <codeph>ToolTipManager.toolTipClass</codeph> のインスタンスを作成します。</p>
 
  <p>ツールヒントイベントのシーケンスは、<codeph>toolTipStart</codeph>、<codeph>toolTipCreate</codeph>、<codeph>toolTipShow</codeph>、<codeph>toolTipShown</codeph>、<codeph>toolTipHide</codeph> および <codeph>toolTipEnd</codeph> です。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.EXIT_STATE_exitState"><apiName>exitState</apiName><shortdesc>
  コンポーネントがビューステートを終了する前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.EXIT_STATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントがビューステートを終了する前に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.ENTER_STATE_enterState"><apiName>enterState</apiName><shortdesc>
  コンポーネントがビューステートを移行した後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER_STATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントがビューステートを移行した後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.StateChangeEvent.CURRENT_STATE_CHANGE_currentStateChange"><apiName>currentStateChange</apiName><shortdesc>
  ビューステートの変更後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.StateChangeEvent.CURRENT_STATE_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.StateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ビューステートの変更後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.StateChangeEvent.CURRENT_STATE_CHANGING_currentStateChanging"><apiName>currentStateChanging</apiName><shortdesc>
  currentState プロパティが変更された後、ビューステートが変更される前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.StateChangeEvent.CURRENT_STATE_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.StateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>currentState</codeph> プロパティが変更された後、ビューステートが変更される前に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_END_effectEnd"><apiName>effectEnd</apiName><shortdesc>
  エフェクトの終了後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_END</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  エフェクトの終了後に送出されます。
 
  <p>このイベントが発行される前に、エフェクトによって最後の一連の視覚的変更が完了していますが、これらの変更はまだ画面に描画されていません。 したがって、これらの変更が画面に描画されてから追加の変更を行うように、<codeph>callLater()</codeph> メソッドを使用して追加の変更を延期することが必要になる場合があります。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_STOP_effectStop"><apiName>effectStop</apiName><shortdesc>
  エフェクトの停止後に送出されます。エフェクトで stop() を呼び出した場合のみ停止します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_STOP</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  エフェクトの停止後に送出されます。エフェクトで <codeph>stop()</codeph> を呼び出した場合のみ停止します。
 
  <p>次に、エフェクトが終了すると EFFECT_END イベントが送出されます。EFFECT_STOP イベントの目的は、エフェクトが、問題なく終了したり、<codeph>end()</codeph> の呼び出しの結果終了したのではない場合に、途中で終了したことをリスナーに通知することです。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_START_effectStart"><apiName>effectStart</apiName><shortdesc>
  エフェクトが開始される直前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_START</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  エフェクトが開始される直前に送出されます。
 
  <p>このイベントが発行されるまで、エフェクトによる視覚的な変更は開始されません。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_START_dragStart"><apiName>dragStart</apiName><shortdesc>
  ドラッグ操作を開始したときにドラッグイニシエータによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_START</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ドラッグ操作を開始したときにドラッグイニシエータによって送出されます。このイベントは、リストベースのコントロールによって内部的に使用されます。ドラッグ＆ドロップを実装するときにこのイベントを処理することはありません。 ドラッグ＆ドロップ操作の開始を制御する場合は、<codeph>mouseDown</codeph> イベントまたは <codeph>mouseMove</codeph> イベントを使用します。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_COMPLETE_dragComplete"><apiName>dragComplete</apiName><shortdesc>
  ドラッグ操作が完了したとき（ドラッグデータをドロップターゲットにドロップするか、ドロップを実行せずにドラッグ＆ドロップ操作を終了したときのいずれか）、ドラッグイニシエータ（ドラッグしたデータのソースであるコンポーネント）によって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ドラッグ操作が完了したとき（ドラッグデータをドロップターゲットにドロップするか、ドロップを実行せずにドラッグ＆ドロップ操作を終了したときのいずれか）、ドラッグイニシエータ（ドラッグしたデータのソースであるコンポーネント）によって送出されます。
 
  <p>このイベントは、ドラッグ＆ドロップ操作の最終的なクリーンアップを行うために使用できます。 例えば、List コントロールアイテムをあるリストから別のリストにドラッグする場合、List コントロールアイテムがそれ以降必要でなければソースから削除することができます。</p>
 
  <p>ある Tree コントロールから別の Tree コントロールにデータをドラッグするときに、<codeph>Event.preventDefault()</codeph> を Tree コントロールの <codeph>dragComplete</codeph> イベントのイベントハンドラーで呼び出すと、ドロップは行われません。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_DROP_dragDrop"><apiName>dragDrop</apiName><shortdesc>
  ユーザーがドロップターゲット上でマウスを離したとき、ドロップターゲットによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_DROP</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがドロップターゲット上でマウスを離したとき、ドロップターゲットによって送出されます。
 
  <p>このイベントハンドラーは、ドラッグデータをドロップターゲットに追加するために使用します。</p>
 
  <p>ある Tree コントロールから別の Tree コントロールにデータをドラッグするときに、<codeph>Event.preventDefault()</codeph> を Tree コントロールの <codeph>dragDrop</codeph> イベントのイベントハンドラーで呼び出すと、ドロップは行われません。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_EXIT_dragExit"><apiName>dragExit</apiName><shortdesc>
  ユーザーがデータをコンポーネントの外部にドラッグし、ターゲットにドロップしなかったとき、コンポーネントによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_EXIT</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーがデータをコンポーネントの外部にドラッグし、ターゲットにドロップしなかったとき、コンポーネントによって送出されます。
 
  <p>このイベントは、<codeph>dragEnter</codeph> または <codeph>dragOver</codeph> イベントの処理中にドロップターゲットの外観を変更した場合に、ドロップターゲットを通常の外観に復元するために使用します。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_OVER_dragOver"><apiName>dragOver</apiName><shortdesc>
  ドラッグ操作時に、コンポーネント上でマウスを移動したとき、コンポーネントによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_OVER</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ドラッグ操作時に、コンポーネント上でマウスを移動したとき、コンポーネントによって送出されます。Flash Player では、有効なドロップターゲット上にアイテムをドラッグしたときにこのイベントが送出されます。AIR では、コンポーネントが有効なドロップターゲットでない場合でも、そのコンポーネント上にアイテムをドラッグしたときにこのイベントが送出されます。
 
  <p>ハンドラー内では、コンポーネントがドラッグを受け付けることができることを示す視覚的なフィードバックをユーザーに提供するために、ドロップターゲットの外観を変更できます。例えば、ドロップターゲットの周囲に境界線を表示したり、ドロップターゲットにフォーカスを移すことができます。</p>
 
  <p>このイベントは、ドロップを許可する前に追加のロジックを実行するために使用します。追加のロジックの例としては、ドロップターゲット内の様々な場所にデータをドロップする、キーボード入力を読み取ってドラッグ＆ドロップアクションがドラッグデータの移動またはコピーのどちらであるかを判別する、ドラッグ＆ドロップアクションの種類に応じて視覚的なフィードバックを変えるなどがあります。</p>
 
  <p><codeph>DragManager.showFeedback()</codeph> メソッドを変更してドラッグアクションの種類を変更することもできます。 <codeph>action</codeph> プロパティのデフォルト値は <codeph>DragManager.MOVE</codeph> です。</p>
 
  </apiDesc></adobeApiEventDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_ENTER_dragEnter"><apiName>dragEnter</apiName><shortdesc>
  ドラッグ操作時に、コンポーネント上でマウスを移動したとき、コンポーネントによって送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_ENTER</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ドラッグ操作時に、コンポーネント上でマウスを移動したとき、コンポーネントによって送出されます。Flash Player で実行しているアプリケーションの場合、コンポーネント上にマウスを移動するたびに何度もこのイベントが送出されます。AIR で実行しているアプリケーションの場合、このイベントは 1 回だけ送出されます。
 
  <p>コンポーネントを有効なドロップターゲットとするには、このイベントのハンドラーを定義する必要があります。 ハンドラー内では、コンポーネントがドラッグを受け付けることができることを示す視覚的なフィードバックをユーザーに提供するために、ドロップターゲットの外観を変更できます。 例えば、ドロップターゲットの周囲に境界線を表示したり、ドロップターゲットにフォーカスを移すことができます。</p>
 
  <p>ドラッグを受け入れる場合は、<codeph>DragManager.acceptDragDrop()</codeph> メソッドを呼び出す必要があります。 <codeph>acceptDragDrop()</codeph> を呼び出さないと、他のドラッグイベントがすべて取得されなくなります。</p>
 
  <p>Flash Player では、<codeph>action</codeph> プロパティの値は、コピーの実行中も常に <codeph>DragManager.MOVE</codeph> です。 これは、Ctrl キーが押され、コピーが通知されたことをコントロールが認識する前に <codeph>dragEnter</codeph> イベントが発生するためです。<codeph>action</codeph> プロパティ（<codeph>dragOver</codeph> イベントのイベントオブジェクト）には、ドラッグ操作の種類を示した値が含まれています。 <codeph>DragManager.showFeedback()</codeph> メソッドを呼び出してドラッグアクションの種類を変更することもできます。</p>
 
  <p>AIR では、<codeph>action</codeph> プロパティのデフォルト値は <codeph>DragManager.COPY</codeph> です。</p>
 
  <p>Tree コントロールでは、データの構造化の方法が他とは異なるため、ドラッグ＆ドロップの処理方法が他のリストベースのコントロールとは異なります。 Tree コントロールの場合、<codeph>dragDrop</codeph> イベントのイベントハンドラーがアクションを実行するのは、ユーザーが同じ Tree コントロール内でデータを移動またはコピーするとき、または別の Tree コントロールにデータをコピーするときのみです。 ある Tree コントロールから別の Tree コントロールにデータをドラッグ＆ドロップして移動する場合、実際に宛先の Tree コントロールにデータを追加する作業を実行するのは、dragDrop イベントのイベントハンドラーではなく、<codeph>dragComplete</codeph> イベントのイベントハンドラーです。このイベントハンドラーは、ソース Tree コントロールからデータを削除する作業も実行します。 この削除作業が必要なのは、移動するデータの親を変更するには、先にソース Tree コントロールからそのデータを削除する必要があるためです。</p>
 
  </apiDesc></adobeApiEventDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.VALID_valid"><apiName>valid</apiName><shortdesc>
  Validator によってコンポーネントが監視されており、検証が成功した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALID</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Validator によってコンポーネントが監視されており、検証が成功した場合に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.INVALID_invalid"><apiName>invalid</apiName><shortdesc>
  Validator によってコンポーネントが監視されており、検証が失敗した場合に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.INVALID</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Validator によってコンポーネントが監視されており、検証が失敗した場合に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  プログラムまたはユーザー操作のいずれかによって、値が変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  プログラムまたはユーザー操作のいずれかによって、値が変更されたときに送出されます。
 
  <p>このイベントはプログラムによる変更によってトリガーされるため、<codeph>valueCommit</codeph> イベントハンドラーが値を変更し、別の <codeph>valueCommit</codeph> イベントを起動することがないようにする必要があります。 例えば、コントロールの <codeph>dataProvider</codeph> プロパティを <codeph>valueCommit</codeph> イベントハンドラーで変更しないようにしてください。 </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE_mouseWheelOutside"><apiName>mouseWheelOutside</apiName><shortdesc>
  PopUpManager を使用して開かれたコンポーネントの外側にユーザーがマウスホイールをスクロールしたときに、そのコンポーネントから送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  PopUpManager を使用して開かれたコンポーネントの外側にユーザーがマウスホイールをスクロールしたときに、そのコンポーネントから送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexMouseEvent.MOUSE_DOWN_OUTSIDE_mouseDownOutside"><apiName>mouseDownOutside</apiName><shortdesc>
  ユーザーが PopUpManager を使用して開いたコンポーネントの外側でマウスをクリックしたときに、そのコンポーネントから送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_DOWN_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  PopUpManager を使用して開かれたコンポーネントの外側でユーザーがマウスをクリックしたときに、そのコンポーネントから送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.SHOW_show"><apiName>show</apiName><shortdesc>
  オブジェクトの状態が不可視から可視に変化したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  オブジェクトの状態が不可視から可視に変化したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ResizeEvent.RESIZE_resize"><apiName>resize</apiName><shortdesc>
  コンポーネントのサイズが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ResizeEvent.RESIZE</apiEventType><adobeApiEventClassifier>mx.events.ResizeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントのサイズが変更されたときに送出されます。
 
  <p>コンポーネントのサイズを変更するには、<codeph>width</codeph> または <codeph>height</codeph> プロパティを設定するか、<codeph>setActualSize()</codeph> メソッドを呼び出します。あるいは、そのコンポーネントまたはその他のコンポーネントについて、LayoutManager がそのコンポーネントの <codeph>width</codeph> または <codeph>height</codeph> プロパティを変更することが必要になるように、次のプロパティの 1 つを設定します。</p>
 
  <ul>
    <li><codeph>minWidth</codeph></li>
    <li><codeph>minHeight</codeph></li>
    <li><codeph>maxWidth</codeph></li>
    <li><codeph>maxHeight</codeph></li>
    <li><codeph>explicitWidth</codeph></li>
    <li><codeph>explicitHeight</codeph></li>
  </ul>
 
  <p><codeph>resize</codeph> イベントは、プロパティが変更されるまで送出されません。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.REMOVE_remove"><apiName>remove</apiName><shortdesc>
  removeChild()、removeChildAt()、removeElement() または removeElementAt() メソッドを使用して、コンポーネントをコンテンツである子としてコンテナから削除したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REMOVE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>removeChild()</codeph>、<codeph>removeChildAt()</codeph>、<codeph>removeElement()</codeph> または <codeph>removeElementAt()</codeph> メソッドを使用して、コンポーネントをコンテンツである子としてコンテナから削除したときに送出されます。<codeph>rawChildren.removeChild()</codeph> または <codeph>rawChildren.removeChildAt()</codeph> メソッドを使用して、コンポーネントをコンテンツではない子としてコンテナから削除した場合、イベントは送出されません。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.PREINITIALIZE_preinitialize"><apiName>preinitialize</apiName><shortdesc>
  コンポーネントの初期化シーケンスの始めに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.PREINITIALIZE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントの初期化シーケンスの始めに送出されます。このイベントが送出されるとき、コンポーネントは未加工の状態にあります。Button コントロールなどの多くのコンポーネントは、内部子コンポーネントを作成して機能を実装します。例えば、Button コントロールは内部 UITextField コンポーネントを作成してラベルテキストを表現します。 Flex が <codeph>preinitialize</codeph> イベントを送出したとき、コンポーネントの子は、内部の子も含めて、まだ作成されていません。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.MoveEvent.MOVE_move"><apiName>move</apiName><shortdesc>
  オブジェクトが移動したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MoveEvent.MOVE</apiEventType><adobeApiEventClassifier>mx.events.MoveEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  オブジェクトが移動したときに送出されます。
 
  <p>コンポーネントを移動するには、<codeph>x</codeph> または <codeph>y</codeph> プロパティを設定するか、<codeph>move()</codeph> メソッドを呼び出します。あるいは、そのコンポーネントまたはその他のコンポーネントについて、LayoutManager がそのコンポーネントの <codeph>x</codeph> または <codeph>y</codeph> プロパティを変更することが必要になるように、次のプロパティの 1 つを設定します。</p>
 
  <ul>
    <li><codeph>minWidth</codeph></li>
    <li><codeph>minHeight</codeph></li>
    <li><codeph>maxWidth</codeph></li>
    <li><codeph>maxHeight</codeph></li>
    <li><codeph>explicitWidth</codeph></li>
    <li><codeph>explicitHeight</codeph></li>
  </ul>
 
  <p><codeph>move()</codeph> メソッドを呼び出すと、メソッドから制御が戻る前に <codeph>move</codeph> イベントが送出されます。 その他の状況では、<codeph>move</codeph> イベントは、プロパティが変更されるまで送出されません。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.INITIALIZE_initialize"><apiName>initialize</apiName><shortdesc>
  コンポーネントの構築と初期化プロパティの設定が完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.INITIALIZE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントの構築と初期化プロパティの設定が完了したときに送出されます。
 
  <p>初期化段階の後、プロパティの処理、コンポーネントの測定、レイアウト、描画が実行され、<codeph>creationComplete</codeph> イベントが送出されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.HIDE_hide"><apiName>hide</apiName><shortdesc>
  オブジェクトの状態が可視から不可視に変化したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.HIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  オブジェクトの状態が可視から不可視に変化したときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.UPDATE_COMPLETE_updateComplete"><apiName>updateComplete</apiName><shortdesc>
  オブジェクトの commitProperties()、measure() および updateDisplayList() メソッドが必要に応じて呼び出されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.UPDATE_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  オブジェクトの <codeph>commitProperties()</codeph>、<codeph>measure()</codeph> および <codeph>updateDisplayList()</codeph> メソッドが必要に応じて呼び出されたときに送出されます。
 
  <p>これは、コンポーネントが表示される前にコンポーネントを変更する最後の機会になります。 すべてのプロパティが確定し、コンポーネントが測定され、レイアウトされています。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.CREATION_COMPLETE_creationComplete"><apiName>creationComplete</apiName><shortdesc>
  コンポーネントの構築、プロパティ処理、測定、レイアウト、および描画が完了したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンポーネントの構築、プロパティ処理、測定、レイアウト、および描画が完了したときに送出されます。
 
  <p>この時点では、<codeph>visible</codeph> プロパティによってはコンポーネントが描画されても表示されない場合があります。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.ADD_add"><apiName>add</apiName><shortdesc>
  addChild()、addChildAt()、addElement() または addElementAt() メソッドを使用して、コンポーネントをコンテンツである子としてコンテナに追加したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ADD</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>addChild()</codeph>、<codeph>addChildAt()</codeph>、<codeph>addElement()</codeph> または <codeph>addElementAt()</codeph> メソッドを使用して、コンポーネントをコンテンツである子としてコンテナに追加したときに送出されます。<codeph>rawChildren.addChild()</codeph> または <codeph>rawChildren.addChildAt()</codeph> メソッドを使用して、コンポーネントをコンテンツではない子としてコンテナに追加した場合、イベントは送出されません。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:UIComponent:UIComponent"><apiName>UIComponent</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:UIComponent:protected:adjustFocusRect"><apiName>adjustFocusRect</apiName><shortdesc>
      フォーカス矩形を調整します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/><apiData>null</apiData><apiDesc>フォーカス矩形を変更するコンポーネントです。省略した場合のデフォルト値はこの UIComponent オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      フォーカス矩形を調整します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:applyComputedMatrix"><apiName>applyComputedMatrix</apiName><shortdesc>
      レイアウトマトリックスと、Flash の displayObject の変換への変換オフセットの組み合わせから計算されたマトリックスをコミットします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      レイアウトマトリックスと、Flash の displayObject の変換への変換オフセットの組み合わせから計算されたマトリックスをコミットします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
      これは、Flex フレームワークが Dissolve エフェクトをサポートするために使用する内部メソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      これは、Flex フレームワークが Dissolve エフェクトをサポートするために使用する内部メソッドです。このメソッドを呼び出す必要はなく、オーバーライドする必要もありません。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:callLater"><apiName>callLater</apiName><shortdesc>
      後で呼び出す関数をキューに格納します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="Function"/><apiDesc>後で実行されるメソッドへの参照です。
     
      </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>メソッドに渡す引数を表すオブジェクトの配列です。
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      後で呼び出す関数をキューに格納します。
     
      <p>画面を更新するたびに、Flash Player または AIR は更新が予定されている関数のセットをあらかじめ呼び出します。場合によっては、現在の更新に予定されている残りすべてのコードを実行するために、特定の関数を次の更新で呼び出す必要があります。エフェクトなど一部の機能では、その機能が完了するまで、キューに格納された関数の実行を遅らせることができます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:canSkipMeasurement"><apiName>canSkipMeasurement</apiName><shortdesc>
      measure() メソッドの呼び出しをスキップできるかどうかを決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc><codeph>measureSizes()</codeph> メソッドが <codeph>measure()</codeph> メソッドの呼び出しをスキップできる場合に <codeph>true</codeph> を返します。例えば、<codeph>explicitWidth</codeph> と <codeph>explicitHeight</codeph> の両方が設定されている場合、通常これは <codeph>true</codeph> になります。パスに関しては、パスの境界が変更されていない場合、これは <codeph>true</codeph> になります。
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>measure()</codeph> メソッドの呼び出しをスキップできるかどうかを決定します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:childrenCreated"><apiName>childrenCreated</apiName><shortdesc>
      子オブジェクトの作成後に行われる最終処理を実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      子オブジェクトの作成後に行われる最終処理を実行します。これは、UIComponent のサブクラスを作成するときにオーバーライド可能な高度なメソッドです。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:clearStyle"><apiName>clearStyle</apiName><shortdesc>
      このコンポーネントインスタンスからスタイルプロパティを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>スタイルプロパティの名前です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンポーネントインスタンスからスタイルプロパティを削除します。
     
      <p><codeph>getStyle()</codeph> メソッドは、必ずしも <codeph>undefined</codeph> を返すわけではありません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      コンポーネントに設定されたプロパティを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンポーネントに設定されたプロパティを処理します。これは、UIComponent のサブクラスを作成するときにオーバーライド可能な高度なメソッドです。
     
      <p>このメソッドは直接呼び出さないでください。<codeph>commitProperties()</codeph> メソッドは、<codeph>addChild()</codeph> メソッドを使用してコンポーネントがコンテナに追加されたとき、またはコンポーネントの <codeph>invalidateProperties()</codeph> メソッドが呼び出されたときに、Flex によって呼び出されます。<codeph>commitProperties()</codeph> メソッドの呼び出しは、<codeph>measure()</codeph> メソッドの呼び出しの前に実行されます。このため、<codeph>measure()</codeph> メソッドが使用する可能性のあるプロパティの値を設定することができます。</p>
     
      <p>一部のコンポーネントには、作成する必要のある子オブジェクトの数や種類に影響するプロパティがあります。また、<codeph>horizontalScrollPolicy</codeph> プロパティと <codeph>horizontalScrollPosition</codeph> プロパティのように相互に作用し合うプロパティを持つコンポーネントもあります。多くの場合、作業の重複を避けるため、起動時にこれらのプロパティを一度に処理することが最善です。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc>
      Point オブジェクトをコンテンツ座標からグローバル座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ステージからの相対座標を持つ Point オブジェクトです。
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>コンテンツ座標系における <i>x</i> 座標および <i>y</i> 座標をプロパティとして指定する Point オブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>Point</codeph> オブジェクトをコンテンツ座標からグローバル座標に変換します。コンテンツ座標では、コンポーネントのコンテンツの左上隅を基準としたピクセル位置を指定します。現在切り詰められていて、アクセスするにはコンポーネントをスクロールすることが必要な領域も含め、コンポーネントのすべてのコンテンツ領域を含みます。コンテンツ座標系は、絶対配置を使用するコンテナの子の位置を取得または設定するときに使用します。グローバル座標では、ステージの左上隅、つまりアプリケーションの最も外側の端を基準としたピクセル位置を指定します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/globalToContent()"><linktext>globalToContent()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:contentToLocal"><apiName>contentToLocal</apiName><shortdesc>
      Point オブジェクトをコンテンツ座標からローカル座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Point は、ローカル座標系を基準とした座標を持つ Point オブジェクトです。
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>コンテンツ座標系における <i>x</i> 座標および <i>y</i> 座標をプロパティとして指定する Point オブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>Point</codeph> オブジェクトをコンテンツ座標からローカル座標に変換します。コンテンツ座標では、コンポーネントのコンテンツの左上隅を基準としたピクセル位置を指定します。現在切り詰められていて、アクセスするにはコンポーネントをスクロールすることが必要な領域も含め、コンポーネントのすべてのコンテンツ領域を含みます。コンテンツ座標系は、絶対配置を使用するコンテナの子の位置を取得または設定するときに使用します。ローカル座標では、コンポーネントの左上隅を基準としたピクセル位置を指定します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToGlobal()"><linktext>contentToGlobal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:createAutomationIDPart"><apiName>createAutomationIDPart</apiName><shortdesc>
      
      このコンテナの子を識別するプロパティのセットを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンポーネントを解決するために後に使用できる、子を記述するプロパティのセットです。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier><apiDesc>ID を提供する対象の子です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      このコンテナの子を識別するプロパティのセットを返します。 アプリケーションの存続中は、これらの値を変更しないでください。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:createAutomationIDPartWithRequiredProperties"><apiName>createAutomationIDPartWithRequiredProperties</apiName><shortdesc>
      
      このコンテナの子を識別するプロパティのセットをオートメーション ID として返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンポーネントを解決するために後に使用できる、子を記述するプロパティのセットです。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier><apiDesc>ID を提供する対象の子です。
     
      </apiDesc></apiParam><apiParam><apiItemName>properties</apiItemName><apiType value="Array"/><apiDesc>ID の形成時に考慮されるものです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      このコンテナの子を識別するプロパティのセットをオートメーション ID として返します。アプリケーションの存続中は、これらの値を変更しないでください。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      コンポーネントの子オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンポーネントの子オブジェクトを作成します。これは、UIComponent のサブクラスを作成するときにオーバーライド可能な高度なメソッドです。
     
      <p>内部に他のコンポーネントやオブジェクトを作成するコンポーネントは、複合コンポーネントと呼ばれます。例えば、Flex の ComboBox コントロールは、実際には ComboBox のテキスト領域を定義する TextInput コントロールと ComboBox の矢印を定義する Button コントロールから構成されます。コンポーネントで <codeph>createChildren()</codeph> メソッドを実装するのは、コンポーネント内で他のコンポーネントなどの子オブジェクトを作成するためです。</p>
     
      <p><codeph>createChildren()</codeph> メソッドのオーバーライド内から <codeph>addChild()</codeph> メソッドを呼び出してそれぞれの子オブジェクトを追加します。 </p>
     
      <p>このメソッドは直接呼び出さないでください。<codeph>createChildren()</codeph> メソッドは、コンポーネントをその親に追加する <codeph>addChild()</codeph> メソッドの呼び出しに応じて呼び出されます。 </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createInFontContext"><apiName>createInFontContext</apiName><shortdesc>
      使用中の埋め込みフォントに基づくコンテキストで、新しいオブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>埋め込みフォントを所有する SWF のコンテキストで作成されたクラスのインスタンス。このオブジェクトが埋め込みフォントを使用していない場合、このオブジェクトのコンテキストでクラスが作成されます。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>classObj</apiItemName><apiType value="Class"/><apiDesc>作成するクラス。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用中の埋め込みフォントに基づくコンテキストで、新しいオブジェクトを作成します。
     
      <p>このメソッドは、フレームワークが RSL としてロードされた（RSL が独自の SWF コンテキストを持つ）場合に、アプリケーション SWF に埋め込まれたフォントへのアクセスに関する問題を解決するために使用します。埋め込みフォントは、作成元の SWF ファイルのコンテキストからのみアクセスできます。アプリケーション SWF のコンテキストを使用すると、RSL は、アプリケーションの埋め込みフォントにアクセスできる、アプリケーション SWF のコンテキストでオブジェクトを作成できます。</p>
     
      <p>このメソッドは、必ず、このオブジェクトのフォントスタイルを設定してから呼び出してください。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createInModuleContext"><apiName>createInModuleContext</apiName><shortdesc>
      指定された moduleFactory を使用して、オブジェクトを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>moduleFactory のコンテキストで作成されたオブジェクト。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiDesc>クラスを作成する moduleFactory です。null でもかまいません。
     
      </apiDesc></apiParam><apiParam><apiItemName>className</apiItemName><apiType value="String"/><apiDesc>作成するクラスの名前です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された moduleFactory を使用して、オブジェクトを作成します。moduleFactory が null の場合、または指定されたモジュールファクトリを使用してオブジェクトを作成できない場合は、代わりに systemManager を使用してオブジェクトが作成されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:createReferenceOnParentDocument"><apiName>createReferenceOnParentDocument</apiName><shortdesc>
      
      この IUIComponent オブジェクトへの id 参照を親ドキュメントオブジェクト上に作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>この IUIComponent オブジェクトの親です。 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      この IUIComponent オブジェクトへの <codeph>id</codeph> 参照を親ドキュメントオブジェクト上に作成します。 この関数は、b[2][4] のように Repeater 内にあるオブジェクトに対する多次元参照を作成できます。 インデックスが null の場合は、単純な、配列ではない参照を作成します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:deleteReferenceOnParentDocument"><apiName>deleteReferenceOnParentDocument</apiName><shortdesc>
      
      この IUIComponent オブジェクトへの id 参照を親ドキュメントオブジェクトから削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>この IUIComponent オブジェクトの親です。 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      この IUIComponent オブジェクトへの <codeph>id</codeph> 参照を親ドキュメントオブジェクトから削除します。 この関数は、b[2][4] のように Repeater 内にあるオブジェクトに対する多次元参照を削除できます。 インデックスが null の場合は、単純な、配列ではない参照を削除します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:determineTextFormatFromStyles"><apiName>determineTextFormatFromStyles</apiName><shortdesc>
      この UIComponent のテキストスタイルに対応する UITextFormat オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>この UIComponent のテキストスタイルに対応する UITextFormat オブジェクトです。
      
      </apiDesc><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      この UIComponent のテキストスタイルに対応する UITextFormat オブジェクトを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
      イベントをイベントフローに送出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>値が <codeph>true</codeph> の場合、イベントは正常に送出されました。値が <codeph>false</codeph> の場合、イベントの送出に失敗したか、イベントで <codeph>preventDefault()</codeph> メソッドが呼び出されたことを示しています。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントフローに送出されるイベントオブジェクトです。イベントが再度送出されると、イベントのクローンが自動的に作成されます。イベントが送出された後にそのイベントの <codeph>target</codeph> プロパティは変更できないため、再送出処理のためにはイベントの新しいコピーを作成する必要があります。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      イベントをイベントフローに送出します。イベントターゲットは EventDispatcher オブジェクトです。これに対して <codeph>dispatchEvent()</codeph> メソッドが呼び出されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:dispatchPropertyChangeEvent"><apiName>dispatchPropertyChangeEvent</apiName><shortdesc> 
      プロパティの更新時に PropertyChangeEvent を送出するためのヘルパーメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>prop</apiItemName><apiType value="String"/><apiDesc>変更されたプロパティの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value=""/><apiDesc>プロパティの古い値です。
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>プロパティの新しい値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      プロパティの更新時に PropertyChangeEvent を送出するためのヘルパーメソッドです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:drawFocus"><apiName>drawFocus</apiName><shortdesc>
      このコンポーネントを囲むフォーカスインジケーターを表示するか、または非表示にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isFocused</apiItemName><apiType value="Boolean"/><apiDesc>フォーカスインジケーターを表示するかどうかを決定します。 フォーカスインジケーターを表示するには、<codeph>true</codeph> に設定します。 非表示にするには、<codeph>false</codeph> に設定します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンポーネントを囲むフォーカスインジケーターを表示するか、または非表示にします。
     
      <p>UIComponent は、<codeph>focusSkin</codeph> スタイルに指定されたクラスのインスタンスを作成し、適切に配置することにより、これを実装します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:drawRoundRect"><apiName>drawRoundRect</apiName><shortdesc>
      このスキンの Graphics オブジェクトに矩形をプログラムにより描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>このスキン内の矩形の左上角の水平位置です。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>このスキンの矩形の左上角の垂直位置です。
     
      </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>ピクセル単位で表したボタンの幅です。
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>ピクセル単位で表したボタンの高さです。
     
      </apiDesc></apiParam><apiParam><apiItemName>r</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>矩形の角の丸みです。 <codeph>null</codeph>、Number または Object を指定できます。 <codeph>null</codeph> の場合、丸い角ではなく、直角の角を表します。 Number の場合、4 つの角すべてで同じ半径（ピクセル単位）を指定します。 Object の場合、<codeph>tl</codeph>、<codeph>tr</codeph>、<codeph>bl</codeph> および <codeph>br</codeph> という名前のプロパティを持ちます。それぞれの値は、左上、右上、左下、および右下の角の半径をピクセル単位で指定する Number です。 例えば、<codeph>{ tl: 5, tr: 5, bl: 0, br: 0 }</codeph> などのプレーンの Object を渡すことができます。 デフォルト値は null（直角の角）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>c</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>塗りの RGB カラーです。 <codeph>null</codeph>、uint または Array を指定できます。 <codeph>null</codeph> の場合、矩形は塗りつぶされません。 uint の場合、塗りの RGB カラーを指定します。 例えば、赤で塗りつぶす場合は <codeph>0xFF0000</codeph> を渡します。Array の場合は、グラデーションカラーを指定する uint を格納した配列になります。例えば、赤黄青のグラデーションで塗りつぶす場合は、<codeph>[ 0xFF0000, 0xFFFF00, 0x0000FF ]</codeph> を渡します。グラデーション内で最大 15 のカラーを指定できます。デフォルト値は null（塗りなし）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>塗りのアルファ値です。 null、Number または Array を指定できます。<codeph>color</codeph> が null の場合、この引数は無視されます。<codeph>color</codeph> が塗りの RGB カラーを指定する uint である場合、<codeph>alpha</codeph> は塗りの透明度を指定する Number になります。この場合、0.0 は完全に透明、1.0 は完全に不透明です。また、完全な不透明を指定するために、1.0 の代わりに null を渡すこともできます。<codeph>color</codeph> がグラデーションカラーを指定する Array である場合、<codeph>alpha</codeph> はグラデーションの対応するアルファ値を指定する、同じ長さの Number の Array になります。この場合、デフォルト値は <codeph>null</codeph>（完全に不透明）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>rot</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>グラデーションの塗りで使用する Matrix オブジェクトです。 ユーティリティメソッド <codeph>horizontalGradientMatrix()</codeph>、<codeph>verticalGradientMatrix()</codeph> および <codeph>rotatedGradientMatrix()</codeph> を使用して、このパラメーターの値を作成できます。
     
      </apiDesc></apiParam><apiParam><apiItemName>gradient</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>グラデーション塗りの種類です。 有効な値は <codeph>GradientType.LINEAR</codeph> または <codeph>GradientType.RADIAL</codeph> です （GradientType クラスは、パッケージ flash.display 内にあります）。
     
      </apiDesc></apiParam><apiParam><apiItemName>ratios</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>
      カラーの分布を指定します。項目数は、<codeph>color</codeph> パラメーターで定義された色の数と一致する必要があります。 各値は、100% でサンプリングされる色の幅の割合をパーセントで定義します。値 0 はグラデーションボックスの左の位置を表し、255 はグラデーションボックスの右の位置を表します。 
     
      </apiDesc></apiParam><apiParam><apiItemName>hole</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>別の不透明な角丸矩形の中央に彫り込む角丸矩形の空洞です。{x: #, y: #, w: #, h: #, r: # or {br: #, bl: #, tl: #, tr: #}}
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このスキンの Graphics オブジェクトに矩形をプログラムにより描画します。
     
      <p>矩形の角を丸くすることができます。 矩形の端は、Graphics オブジェクトの現在の線スタイルによりストロークを設定できます。 単色またはグラデーションの塗りを適用することもできますし、塗りを適用しなくても構いません。 単色の塗りには、アルファ透明度を適用できます。 グラデーションの塗りは線状または放射状にできます。 グラデーションに沿った指定の点で、最大 15 のカラーとアルファ値を指定できます。さらにグラデーションの回転角度または変換マトリックスを指定できます。 最後に、矩形には角丸矩形の空洞を彫り込むことができます。</p>
     
      <p>この多用途の矩形描画ルーチンは、様々なスキンで使用されます。 このルーチンでは、このスキンの Graphics オブジェクトに描画するために、（flash.display.Graphics クラス内の）<codeph>drawRect()</codeph> メソッドまたは <codeph>drawRoundRect()</codeph> メソッドを呼び出します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginGradientFill()"><linktext>flash.display.Graphics.beginGradientFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:effectFinished"><apiName>effectFinished</apiName><shortdesc>
      コンポーネントでの再生の停止時にエフェクトインスタンスによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInst</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>コンポーネントで再生されているエフェクトインスタンスオブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コンポーネントでの再生の停止時にエフェクトインスタンスによって呼び出されます。このメソッドを使用すると、エフェクトの終了時に、<codeph>effectStarted()</codeph> メソッドによってエフェクトの開始時に行われたコンポーネントに対する変更を復元すること、またはその他のアクションを実行することができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:effectStarted"><apiName>effectStarted</apiName><shortdesc>
      コンポーネントでの再生の開始時にエフェクトインスタンスによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInst</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>コンポーネントで再生されているエフェクトインスタンスオブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コンポーネントでの再生の開始時にエフェクトインスタンスによって呼び出されます。このメソッドを使用して、エフェクトの一部としてコンポーネントの変更を実行することができます。<codeph>effectFinished()</codeph> メソッドを使用して、エフェクトの終了時に変更を復元することができます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:endEffectsStarted"><apiName>endEffectsStarted</apiName><shortdesc>
      現在コンポーネントで再生中のすべてのエフェクトを終了します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      現在コンポーネントで再生中のすべてのエフェクトを終了します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:executeBindings"><apiName>executeBindings</apiName><shortdesc>
      UIComponent オブジェクトがターゲットであるすべてのバインディングを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>このコンポーネントの子に対して再帰的にバインディングを実行します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      UIComponent オブジェクトがターゲットであるすべてのバインディングを実行します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:finishPrint"><apiName>finishPrint</apiName><shortdesc>
      印刷の完了後に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>印刷前の状態に復元するコンポーネントのプロパティを含みます。
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>印刷が終了した直後のコンポーネントです。現在のコンポーネントか、その子の 1 つです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      印刷の完了後に呼び出されます。UIComponent クラスの場合、このメソッドはアクションを実行しません。Flex コンテナはこのメソッドをオーバーライドし、印刷の後にコンテナを復元します。
     
      <p>アプリケーション開発者は通常このメソッドを使用しません。 </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.printing.xml#FlexPrintJob"><linktext>mx.printing.FlexPrintJob</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:protected:focusInHandler"><apiName>focusInHandler</apiName><shortdesc>
      UIComponent オブジェクトがフォーカスを取得したときに呼び出されるイベントハンドラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>イベントオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      UIComponent オブジェクトがフォーカスを取得したときに呼び出されるイベントハンドラーです。 このメソッドをオーバーライドする場合は、必ず基本クラスのバージョンを呼び出してください。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc>
      UIComponent オブジェクトがフォーカスを失ったときに呼び出されるイベントハンドラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>イベントオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      UIComponent オブジェクトがフォーカスを失ったときに呼び出されるイベントハンドラーです。 このメソッドをオーバーライドする場合は、必ず基本クラスのバージョンを呼び出してください。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getAutomationChildAt"><apiName>getAutomationChildAt</apiName><shortdesc>
       
      指定されたインデックス位置でオートメーションオブジェクトを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたインデックス位置にある子です。
      
      </apiDesc><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>返される子のインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
      指定されたインデックス位置でオートメーションオブジェクトを提供します。 このリストには、組み合わされた子を入れないでください。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getAutomationChildren"><apiName>getAutomationChildren</apiName><shortdesc>
      
      オートメーションオブジェクトリストを提供します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>オートメーションの子です。
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      
      オートメーションオブジェクトリストを提供します。このリストには、組み合わされた子は含まれません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      
      エレメントの境界の x 座標を、指定したエレメントサイズで返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>エレメントの境界の幅、または推奨幅を使用するための NaN です。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>エレメントの境界の高さ、または推奨高さを使用するための NaN です。
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの左上隅の x 座標を返します。境界ボックスは、エレメントの親の座標空間内にあり、指定した境界サイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      エレメントの境界の x 座標を、指定したエレメントサイズで返します。このメソッドは通常、エレメントが特定のサイズに変更される場合にエレメントの位置を予測するために、measure() 時にレイアウトによって使用されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      
      エレメントの境界の y 座標を、指定したエレメントサイズで返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>エレメントの境界の幅、または推奨幅を使用するための NaN です。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>エレメントの境界の高さ、または推奨高さを使用するための NaN です。
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの左上隅の y 座標を返します。境界ボックスは、エレメントの親の座標空間内にあり、指定した境界サイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      エレメントの境界の y 座標を、指定したエレメントサイズで返します。このメソッドは通常、エレメントが特定のサイズに変更される場合にエレメントの位置を予測するために、measure() 時にレイアウトによって使用されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getClassStyleDeclarations"><apiName>getClassStyleDeclarations</apiName><shortdesc>
      この UIComponent インスタンスのタイプセレクターを探します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>この UIComponent インスタンスのタイプセレクターの配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      この UIComponent インスタンスのタイプセレクターを探します。 このアルゴリズムは、スーパークラスチェーンをたどります。例えば、MyButton クラスが Button を拡張するとします。MyButton インスタンスはまず MyButton タイプセレクターを探し、次に Button タイプセレクターを、さらに UIComponent タイプセレクターを探します （スーパークラスチェーンは、Object ではなく、UIComponent で停止すると見なされます）。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getConstraintValue"><apiName>getConstraintValue</apiName><shortdesc>
      レイアウト制約値を返します。これは、このコンポーネントの制約スタイルを取得することと同じです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>2 つの形式のいずれかで指定できるレイアウト制約値を返します。"10" などの数値ストリングとして指定するか、identifier:numeric ストリングとして指定できます。identifier:numeric ストリングの場合、identifier は ConstraintRow または ConstraintColumn の <codeph>id</codeph> です。例えば、"cc1:10" という値は、<codeph>id</codeph> "cc1" を持つ ConstraintColumn に値 10 を指定します。
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>制約スタイルの名前であり、left、right、top、bottom、verticalCenter、horizontalCenter、baseline のいずれかです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      レイアウト制約値を返します。これは、このコンポーネントの制約スタイルを取得することと同じです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc>
      明示的に指定された高さを使用するのか、それとも測定された高さを使用するのかを決定するための便利なメソッドです。
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>定義されている場合は数値 explicitHeight、定義されていない場合は数値 measuredHeight です。
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      明示された高さを使用するのか、それとも測定した高さを使用するのかを決定する便利なメソッドです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc>
      明示された幅を使用するのか、それとも測定した幅を使用するのかを決定する便利なメソッドです。
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>定義されている場合は数値 explicitWidth、定義されていない場合は数値 measuredWidth です。
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      明示的に指定された幅を使用するのか、それとも測定された幅を使用するのかを決定するための便利なメソッドです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getFocus"><apiName>getFocus</apiName><shortdesc>
      現在フォーカスを持っているオブジェクトを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>フォーカスを持っているオブジェクトです。
      
      </apiDesc><apiType value="flash.display:InteractiveObject"/></apiReturn></apiOperationDef><apiDesc>
      現在フォーカスを持っているオブジェクトを取得します。現在扱っているオブジェクトにはフォーカスがない可能性があります。ただし、必ずしもフォーカスを持っているコンポーネントが返されるとは限りません。フォーカスを持っているコンポーネントの内部サブコンポーネントが返されることがあります。フォーカスを持っているコンポーネントを取得するには、<codeph>focusManager.focus</codeph> プロパティを使用します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsHeight"><apiName>getLayoutBoundsHeight</apiName><shortdesc>
      
      エレメントのレイアウトの高さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの幅を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      エレメントのレイアウトの高さを返します。これは、画面に描画するためにエレメントで使用するサイズです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsWidth"><apiName>getLayoutBoundsWidth</apiName><shortdesc>
      
      エレメントのレイアウトの幅を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの幅を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      エレメントのレイアウトの幅を返します。これは、画面に描画するためにエレメントで使用するサイズです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsX"><apiName>getLayoutBoundsX</apiName><shortdesc>
      
      画面に描画するためにエレメントで使用する x 座標を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの左上隅の x 座標を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      画面に描画するためにエレメントで使用する x 座標を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsY"><apiName>getLayoutBoundsY</apiName><shortdesc>
      
      画面に描画するためにエレメントで使用する y 座標を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの左上隅の y 座標を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      画面に描画するためにエレメントで使用する y 座標を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutMatrix"><apiName>getLayoutMatrix</apiName><shortdesc>
      
      兄弟を基準としてコンポーネントのレイアウトを計算するために使用される変換マトリックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><p>このエレメントのレイアウト変換 Matrix を返します。戻り値を直接変更せずに、setLayoutMatrix を呼び出してください。</p>
     
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef><apiDesc>
      
      兄弟を基準としてコンポーネントのレイアウトを計算するために使用される変換マトリックスを返します。
     
      <p>このマトリックスは通常、コンポーネントの 2D プロパティで定義されます。プロパティには、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>rotation</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>transformX</codeph> および <codeph>transformY</codeph> などがあります。一部のコンポーネントには、追加の変換プロパティがある場合があります。これらのプロパティは、レイアウトマトリックスの上に適用され、最終的な計算されたマトリックスが決定されます。例えば、<codeph>UIComponent</codeph> では <codeph>offsets</codeph> プロパティが定義されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutMatrix3D"><apiName>getLayoutMatrix3D</apiName><shortdesc>
      
      このエレメントのレイアウト変換 Matrix3D を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><p>このエレメントのレイアウト変換 Matrix3D を返します。戻り値を直接変更せずに、setLayoutMatrix を呼び出してください。</p>
      
      </apiDesc><apiType value="flash.geom:Matrix3D"/></apiReturn></apiOperationDef><apiDesc>
      
      このエレメントのレイアウト変換 Matrix3D を返します。
     
      <p>このマトリックスは通常、コンポーネントの変換プロパティで定義されます。プロパティには、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>z</codeph>、<codeph>rotationX</codeph>、<codeph>rotationY</codeph>、<codeph>rotationZ</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>scaleZ</codeph>、<codeph>transformX</codeph> および <codeph>transformY</codeph> などがあります。一部のコンポーネントには、追加の変換プロパティがある場合があります。これらのプロパティは、レイアウトマトリックスの上に適用され、最終的な計算されたマトリックスが決定されます。例えば、<codeph>UIComponent</codeph> では <codeph>offsets</codeph> プロパティが定義されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMaxBoundsHeight"><apiName>getMaxBoundsHeight</apiName><shortdesc>
      
      エレメントの最大の高さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの高さを返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの最大サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      エレメントの最大の高さを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMaxBoundsWidth"><apiName>getMaxBoundsWidth</apiName><shortdesc>
      
      エレメントの最大の幅を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの幅を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの最大サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      エレメントの最大の幅を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMinBoundsHeight"><apiName>getMinBoundsHeight</apiName><shortdesc>
      
      エレメントの最小の高さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの高さを返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの最小サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      エレメントの最小の高さを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMinBoundsWidth"><apiName>getMinBoundsWidth</apiName><shortdesc>
      
      エレメントの最小の幅を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの幅を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの最小サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      エレメントの最小の幅を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getPreferredBoundsHeight"><apiName>getPreferredBoundsHeight</apiName><shortdesc>
      
      エレメントの推奨高さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エレメントの推奨高さを返します。推奨高さは通常、デフォルトのエレメントサイズと明示的なオーバーライドに基づきます。UIComponent の場合、この値は getExplicitOrMeasuredHeight() と同じです。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの高さを返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの推奨サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      エレメントの推奨高さを返します。  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getPreferredBoundsWidth"><apiName>getPreferredBoundsWidth</apiName><shortdesc>
      
      エレメントの推奨幅を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エレメントの推奨幅を返します。推奨幅は通常、デフォルトのエレメントサイズと明示的なオーバーライドに基づきます。UIComponent の場合、この値は getExplicitOrMeasuredWidth() と同じです。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの幅を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの推奨サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      エレメントの推奨幅を返します。   
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getRepeaterItem"><apiName>getRepeaterItem</apiName><shortdesc>
      指定された Repeater がこの Repeater を生成するために使用した dataProvider 内のアイテムを返します。この Repeater が繰り返されていない場合は、null を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>要求されたリピーターアイテムです。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>whichRepeater</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Repeater の番号を表します。一番外側から数え、0 から始まります。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された Repeater がこの Repeater を生成するために使用した <codeph>dataProvider</codeph> 内のアイテムを返します。この Repeater が繰り返されていない場合は、<codeph>null</codeph> を返します。引数 <codeph>whichRepeater</codeph> は、最も外側の Repeater が 0、次に内側の Repeater が 1 になり、以降も同様に続きます。<codeph>whichRepeater</codeph> が指定されていない場合は、最も内側の Repeater が使用されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getStyle"><apiName>getStyle</apiName><shortdesc>
      このコンポーネントのスタイル参照チェーンのいずれかの場所に設定されたスタイルプロパティを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>スタイル値です。
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>スタイルプロパティの名前です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンポーネントのスタイル参照チェーンのいずれかの場所に設定されたスタイルプロパティを取得します。
     
      <p>このメソッドは、あらゆる種類のスタイルプロパティの取得に使用されるため、戻り値は Boolean、String、Number、int、uint（RGB カラーの場合）、Class（スキンの場合）、または何らかのオブジェクトになります。したがって、戻り値の型は単に ~~ として指定されます。</p>
     
      <p>特定のスタイルプロパティを取得する場合は、その型がわかっていて、その型の変数に結果を格納することがよくあります。~~ からその型へのキャストは必要ありません。</p>
     
      <p>
      <codeph> var backgroundColor:uint = getStyle("backgroundColor"); </codeph>
      </p>
     
      <p>スタイルプロパティがスタイル参照チェーンのどこにも設定されていない場合は、<codeph>getStyle()</codeph> によって返される値は <codeph>undefined</codeph> になります。 <codeph>undefined</codeph> は特殊な値で、<codeph>false</codeph>、<codeph>""</codeph>、<codeph>NaN</codeph>、<codeph>0</codeph> または <codeph>null</codeph> と同じではありません。 有効なスタイル値が <codeph>undefined</codeph> になることはありません。値が設定されたかどうかをテストするには、メソッド <codeph>IStyleManager2.isValidStyleValue()</codeph> を使用します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:globalToContent"><apiName>globalToContent</apiName><shortdesc>
      Point オブジェクトをグローバル座標からコンテンツ座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Point は、コンポーネントを基準とした座標を持つ Point オブジェクトです。
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>グローバル（ステージ）座標系における <i>x</i> 座標および <i>y</i> 座標をプロパティとして指定する Point オブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>Point</codeph> オブジェクトをグローバル座標からコンテンツ座標に変換します。グローバル座標では、ステージの左上隅、つまりアプリケーションの最も外側の端を基準としたピクセル位置を指定します。コンテンツ座標では、コンポーネントのコンテンツの左上隅を基準としたピクセル位置を指定します。現在切り詰められていて、アクセスするにはコンポーネントをスクロールすることが必要な領域も含め、コンポーネントのすべてのコンテンツ領域を含みます。コンテンツ座標系は、絶対配置を使用するコンテナの子の位置を取得または設定するときに使用します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToGlobal()"><linktext>contentToGlobal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:hasState"><apiName>hasState</apiName><shortdesc conref="mx.core.IStateClient2#hasState()">
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>指定されたステートが定義されているかどうかを示します。 
      
      </apiDesc></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>検査するステートの名前。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.IStateClient2#hasState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:horizontalGradientMatrix"><apiName>horizontalGradientMatrix</apiName><shortdesc>
      水平方向のグラデーションを描画するときに rot パラメーターとして drawRoundRect() メソッドに渡すことのできるボックスの Matrix を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>水平方向のグラデーションの Matrix です。
      
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>グラデーションの左座標（ピクセル単位）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>グラデーションの上座標（ピクセル単位）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>グラデーションの幅（ピクセル単位）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>グラデーションの高さ（ピクセル単位）です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      水平方向のグラデーションを描画するときに <codeph>drawRoundRect()</codeph> メソッドに <codeph>rot</codeph> パラメーターとして渡すことのできるボックスの Matrix を返します。
     
      <p>パフォーマンス向上のため、Matrix は静的変数に保存され、<codeph>horizontalGradientMatrix()</codeph> および <codeph>verticalGradientMatrix()</codeph> に対するすべての呼び出しで再使用されます。 したがって、この Matrix を <codeph>drawRoundRect()</codeph> に先に渡し、その後で <codeph>horizontalGradientMatrix()</codeph> または <codeph>verticalGradientMatrix()</codeph> を再度呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initAdvancedLayoutFeatures"><apiName>initAdvancedLayoutFeatures</apiName><shortdesc>
      コンポーネントの使用頻度が低い一部の高度なレイアウト機能について実装および格納を初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンポーネントの使用頻度が低い一部の高度なレイアウト機能について実装および格納を初期化します。この関数は、AdvancedLayoutFeatures オブジェクトによって実装される機能を使用する前に呼び出します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initializationComplete"><apiName>initializationComplete</apiName><shortdesc>
      このコンポーネントの初期化を完了させます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントの初期化を完了させます。
     
      <p>このメソッドは、<codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> を使用してコンポーネントを初めて親に追加するときに最後に実行されるコードです。 <codeph>initialize</codeph> イベントの送出に関する定型作業を行います。 コンポーネントを記述しているときは、このメソッドをオーバーライドする必要はありません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:initialize"><apiName>initialize</apiName><shortdesc>
      このコンポーネントの内部構造を初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントの内部構造を初期化します。
     
      <p>UIComponent の初期化は、ビジュアルコンポーネントのインスタンス作成の 4 番目の手順であり、インスタンスが初めて親に追加されたときに自動的に行われます。 したがって、通常は <codeph>initialize()</codeph> を呼び出す必要はありません。このメソッドは、Flex フレームワークが UIComponent の <codeph>addChild()</codeph> および <codeph>addChildAt()</codeph> メソッドのオーバーライドから自動的に呼び出します。</p>
     
      <p>ビジュアルコンポーネントのインスタンス作成の最初の手順は、<codeph>new</codeph> 演算子を使用した作成です。</p>
     
      <pre>
      var okButton:Button = new Button();</pre>
     
      <p>作成後、新しい Button インスタンスは単独の DisplayObject になります。ラベルを表示する子として UITextField を持っておらず、親もありません。</p>
     
      <p>2 番目の手順では、適切なプロパティ、スタイル、イベントハンドラーを指定して、作成されたインスタンスを設定します。</p>
     
      <pre>
      okButton.label = "OK";
      okButton.setStyle("cornerRadius", 0);
      okButton.addEventListener(MouseEvent.CLICK, clickHandler);</pre>
     
      <p>3 番目の手順では、インスタンスを親に追加します。</p>
     
      <pre>
      someContainer.addChild(okButton);</pre>
     
      <p>コンポーネントを初めて親に追加するときに <codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> を呼び出すことによる副次的な作用は、<codeph>initialize</codeph> が自動的に呼び出されることです。</p>
     
      <p>このメソッドはまず <codeph>preinitialize</codeph> イベントを送出し、このコンポーネントを使用する開発者が、内部構造が作成される前にコンポーネントを変更できるようにします。 次に、<codeph>createChildren()</codeph> メソッドを呼び出してコンポーネントの内部構造を作成します。Button の場合、このメソッドはラベル用の UITextField を作成し、追加します。次に、<codeph>initialize</codeph> イベントを送出し、内部構造が作成された後に開発者がコンポーネントを変更できるようにします。</p>
     
      <p>内部構造作成のトリガーとなるのは、コンポーネントを初めて親に追加する行為です。 内部構造に他の UIComponent が含まれる場合、これは、DisplayObject のツリーが 1 リーフノードずつ増える反復的なプロセスになります。</p>
     
      <p>コンポーネントを記述しているときは、このメソッドをオーバーライドする必要はありません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initializeAccessibility"><apiName>initializeAccessibility</apiName><shortdesc>
      このコンポーネントのアクセシビリティコードを初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントのアクセシビリティコードを初期化します。
     
      <p>このメソッドは、mx.accessibility パッケージの別のクラスに置かれたコンポーネントのアクセシビリティコードをフックするために、<codeph>initialize()</codeph> メソッドから呼び出されます。アクセシビリティをサポートする各サブクラスは、このメソッドをオーバーライドする必要があります。フックプロセスでは、各サブクラスで異なる静的変数が使用されるためです。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      このコンポーネントの繰り返しインスタンスを追跡する各種プロパティを初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>このコンポーネントを作成した Repeater を格納している親オブジェクトです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンポーネントの繰り返しインスタンスを追跡する各種プロパティを初期化します。
     
      <p>MXML <codeph>&lt;mx:Repeater/></codeph> タグにより、コンポーネントの繰り返しインスタンスが Repeater のデータプロバイダーのアイテムごとに 1 つずつ作成されます。 UIComponent の <codeph>instanceIndices</codeph>、<codeph>repeaters</codeph> および <codeph>repeaterIndices</codeph> プロパティは、どのインスタンスがどのデータ項目およびどの Repeater から作成されているのかを追跡します。</p>
     
      <p>このメソッドは、Flex フレームワークによって自動的に呼び出される内部メソッドです。 このメソッドを呼び出す必要はなく、オーバーライドする必要もありません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      次の画面更新時に updateDisplayList() メソッドが呼び出されるように、コンポーネントをマークします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      次の画面更新時に <codeph>updateDisplayList()</codeph> メソッドが呼び出されるように、コンポーネントをマークします。
     
      <p>無効化は、後で画面が更新されるまでコンポーネントの変更処理を保留することで、作業の重複を解消する便利なメカニズムです。例えば、幅と高さを変更する場合、幅を変更した後にコンポーネントを更新し、次に高さを変更して再度更新するという処理は時間の浪費です。両方のプロパティを変更した後、新しいサイズでコンポーネントを一度に再描画する方が効率的です。</p>
     
      <p>無効化メソッドが呼び出されることはほとんどありません。一般的には、コンポーネントのプロパティを設定すると、適切な無効化メソッドが自動的に呼び出されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateLayering"><apiName>invalidateLayering</apiName><shortdesc>
      depth プロパティが変更されたことを示すために、コンポーネントのアイテムによって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.4"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>depth</codeph> プロパティが変更されたことを示すために、コンポーネントのアイテムによって呼び出されます。この関数は <codeph>UIComponent</codeph> で定義されますが、複雑なレイヤーのサポートを実装するのはサブクラスであることに注意してください。デフォルトで、<codeph>Group</codeph> および <codeph>DataGroup</codeph> のみが、子の任意のレイヤー化をサポートしています。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/depth"><linktext>depth</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:protected:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      このオブジェクトがレイアウトに影響を与える（includeInLayout が true である）場合に、親のサイズおよび表示リストを無効にするためのヘルパーメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このオブジェクトがレイアウトに影響を与える（includeInLayout が true である）場合に、親のサイズおよび表示リストを無効にするためのヘルパーメソッドです。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      後で画面更新時に commitProperties() メソッドが呼び出されるように、コンポーネントをマークします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      後で画面更新時に <codeph>commitProperties()</codeph> メソッドが呼び出されるように、コンポーネントをマークします。
     
      <p>無効化は、後で画面が更新されるまでコンポーネントの変更処理を保留することで、作業の重複を解消する便利なメカニズムです。例えば、テキストの色とサイズを変更する場合、色を変更した後、すぐに色を更新し、次にサイズを設定して、今度はサイズを更新するという処理は時間の浪費です。両方のプロパティを変更した後、新しいサイズと色でテキストを一度に再描画する方が効率的です。</p>
     
      <p>無効化メソッドが呼び出されることはほとんどありません。一般的には、コンポーネントのプロパティを設定すると、適切な無効化メソッドが自動的に呼び出されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      後で画面更新時に measure() メソッドが呼び出されるように、コンポーネントをマークします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      後で画面更新時に <codeph>measure()</codeph> メソッドが呼び出されるように、コンポーネントをマークします。
     
      <p>無効化は、後で画面が更新されるまでコンポーネントの変更処理を保留することで、作業の重複を解消する便利なメカニズムです。例えば、テキストとフォントサイズを変更する場合、テキストを変更した後、すぐにテキストを更新し、次にサイズを設定して、今度はサイズを更新するという処理は時間の浪費です。両方のプロパティを変更した後、新しいサイズでテキストを一度に再描画する方が効率的です。</p>
     
      <p>無効化メソッドが呼び出されることはほとんどありません。一般的には、コンポーネントのプロパティを設定すると、適切な無効化メソッドが自動的に呼び出されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:isOurFocus"><apiName>isOurFocus</apiName><shortdesc>
      通常、UITextField オブジェクトが含まれているコンポーネントのうち、UITextField オブジェクトがフォーカスを取得したコンポーネントによってオーバーライドされます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>UITextField オブジェクトがフォーカスを持つ場合は、<codeph>true</codeph> を返します。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>フォーカスを取得できる UITextField オブジェクトを含む UIComponent オブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通常、UITextField オブジェクトが含まれているコンポーネントのうち、UITextField オブジェクトがフォーカスを取得したコンポーネントによってオーバーライドされます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc>
      keyDown イベントに対して呼び出されるイベントハンドラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>イベントオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>keyDown</codeph> イベントに対して呼び出されるイベントハンドラーです。 このメソッドをオーバーライドする場合は、必ず基本クラスのバージョンを呼び出してください。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc>
      keyUp イベントに対して呼び出されたイベントハンドラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>イベントオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>keyUp</codeph> イベントに対して呼び出されたイベントハンドラーです。 このメソッドをオーバーライドする場合は、必ず基本クラスのバージョンを呼び出してください。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:localToContent"><apiName>localToContent</apiName><shortdesc>
      Point オブジェクトをローカル座標からコンテンツ座標に変換します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Point は、コンテンツ座標系を基準とした座標を持つ Point オブジェクトです。
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>ローカル座標系における <i>x</i> 座標および <i>y</i> 座標をプロパティとして指定する Point オブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>Point</codeph> オブジェクトをローカル座標からコンテンツ座標に変換します。ローカル座標では、コンポーネントの左上隅を基準としたピクセル位置を指定します。コンテンツ座標では、コンポーネントのコンテンツの左上隅を基準としたピクセル位置を指定します。現在切り詰められていて、アクセスするにはコンポーネントをスクロールすることが必要な領域も含め、コンポーネントのすべてのコンテンツ領域を含みます。コンテンツ座標系は、絶対配置を使用するコンテナの子の位置を取得または設定するときに使用します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToLocal()"><linktext>contentToLocal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:matchesCSSState"><apiName>matchesCSSState</apiName><shortdesc>
      このコンポーネントの現在の状態が CSS 擬似セレクターと一致するかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssState</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      このコンポーネントの現在の状態が CSS 擬似セレクターと一致するかどうかを判別します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:matchesCSSType"><apiName>matchesCSSType</apiName><shortdesc>
      このコンポーネントが、指定された CSS タイプに割り当て可能かどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssType</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      このコンポーネントが、指定された CSS タイプに割り当て可能かどうかを判別します。これは、高度な CSS スタイルとの一致を判別するために使用されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:measure"><apiName>measure</apiName><shortdesc>
      コンポーネントのデフォルトサイズを計算するほか、オプションでデフォルトの最小サイズを計算します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンポーネントのデフォルトサイズを計算するほか、オプションでデフォルトの最小サイズを計算します。これは、UIComponent のサブクラスを作成するときにオーバーライド可能な高度なメソッドです。
     
      <p>このメソッドは直接呼び出さないでください。<codeph>measure()</codeph> メソッドは、<codeph>addChild()</codeph> メソッドでコンポーネントがコンテナに追加されたとき、およびコンポーネントの <codeph>invalidateSize()</codeph> メソッドが呼び出されたときに、Flex によって呼び出されます。 </p>
     
      <p>コンポーネントに特定の高さと幅を設定するとき、Flex では <codeph>measure()</codeph> メソッドは呼び出されません。<codeph>invalidateSize()</codeph> メソッドを明示的に呼び出したとしても同様です。つまり、Flex が <codeph>measure()</codeph> メソッドを呼び出すのは、そのコンポーネントの <codeph>explicitWidth</codeph> プロパティまたは <codeph>explicitHeight</codeph> プロパティが NaN である場合のみです。 </p>
     
      <p>このメソッドのオーバーライド内で、<codeph>measuredWidth</codeph> プロパティおよび <codeph>measuredHeight</codeph> プロパティを設定してデフォルトのサイズを定義する必要があります。<codeph>measuredMinWidth</codeph> および <codeph>measuredMinHeight</codeph> プロパティを設定して、デフォルトの最小サイズをオプションで設定することもできます。</p>
     
      <p>ほとんどのコンポーネントは、表示しているコンテンツと、コンテンツ表示に影響するプロパティに基づいてこれらの値を計算します。一部のコンポーネントでは、ハードコードされたデフォルト値を使用するものもあります。 </p>
     
      <p><codeph>measure()</codeph> の概念ポイントは、コンポーネント独自のナチュラルサイズ、つまり本来のサイズをデフォルトとして指定するためのものです。このため、<codeph>measuredWidth</codeph> プロパティおよび <codeph>measuredHeight</codeph> プロパティは、以下のような要素に基づいて決定されます。</p>
      <ul>
         <li>コンポーネントで表示する必要があるテキストの量</li>
         <li>そのテキストのスタイル（<codeph>fontSize</codeph> など）</li>
         <li>コンポーネントで表示する JPEG イメージのサイズ</li>
         <li>コンポーネントの子の測定サイズまたは明示的なサイズ</li>
         <li>すべての境界線、余白、および間隔</li>
      </ul>
     
      <p>デフォルト値を決めるための固有の方法がない場合もあります。例えば、簡単な GreenCircle コンポーネントでは単に <codeph>measure()</codeph> メソッドに measuredWidth = 100 と measuredHeight = 100 を設定することで、適切なデフォルトサイズを指定することがあります。また、TextArea などの場合には、適切な計算処理（すべてのテキストを表示でき、黄金の矩形の縦横比を持つ正確な幅と高さを求めるなど）を行うと時間がかかりすぎる場合があります。</p>
     
      <p><codeph>measure()</codeph> のデフォルト実装では、<codeph>measuredWidth</codeph>、<codeph>measuredHeight</codeph>、<codeph>measuredMinWidth</codeph> および <codeph>measuredMinHeight</codeph> が <codeph>0</codeph> に設定されます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:measureHTMLText"><apiName>measureHTMLText</apiName><shortdesc>
      この UIComponent のスタイルで決定される UITextFormat を使用して単一行の UITextField に表示するものとして、&amp;lt;font&amp;gt; や &amp;lt;b&amp;gt; のような HTML タグが含まれる可能性のある、指定の HTML テキストを測定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>テキスト寸法を含む TextLineMetrics オブジェクトです。
      
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>htmlText</apiItemName><apiType value="String"/><apiDesc>測定する HTML テキストを指定するストリングです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この UIComponent のスタイルで決定される UITextFormat を使用して単一行の UITextField に表示するものとして、<codeph>&lt;font></codeph> や <codeph>&lt;b></codeph> のような HTML タグが含まれる可能性のある、指定の HTML テキストを測定します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:measureText"><apiName>measureText</apiName><shortdesc>
      この UIComponent のスタイルで決定される UITextFormat を使用して単一行の UITextField に表示するものとして、指定のテキストを測定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>テキスト寸法を含む TextLineMetrics オブジェクトです。
      
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>測定するテキストを指定するストリングです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この UIComponent のスタイルで決定される UITextFormat を使用して単一行の UITextField に表示するものとして、指定のテキストを測定します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:move"><apiName>move</apiName><shortdesc>
       親の内部の指定された位置にコンポーネントを移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>親の内部の、コンポーネントの左の位置です。
      
       </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>親の内部の、コンポーネントの上の位置です。
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       親の内部の指定された位置にコンポーネントを移動します。このメソッドを呼び出すことは、コンポーネントの <codeph>x</codeph> プロパティおよび <codeph>y</codeph> プロパティを設定することとまったく同じです。
      
       <p>カスタムコンポーネントで <codeph>updateDisplayList()</codeph> メソッドをオーバーライドする場合は、<codeph>move()</codeph> メソッドを呼び出してください（<codeph>x</codeph> プロパティと <codeph>y</codeph> プロパティを設定するのではなく）。この相違点は、<codeph>move()</codeph> メソッドは呼び出されたときにコンポーネントの場所を変更して、<codeph>move</codeph> イベントを送出するのに対し、<codeph>x</codeph> プロパティおよび <codeph>y</codeph> プロパティを設定した場合は、次回の画面更新時にコンポーネントの場所が変更され、そのイベントが送出されるという点です。</p>
      
       </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:nonDeltaLayoutMatrix"><apiName>nonDeltaLayoutMatrix</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:notifyStyleChangeInChildren"><apiName>notifyStyleChangeInChildren</apiName><shortdesc>
      スタイルの変更を子に通知します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>スタイルプロパティの名前を指定するストリングです。
     
      </apiDesc></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>このコンポーネントのすべての子に再帰的に通知します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      スタイルの変更を子に通知します。通常はこのメソッドを呼び出す必要はありません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:owns"><apiName>owns</apiName><shortdesc>
      owner プロパティのチェーンが child からこの UIComponent を指定している場合に、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>この UIComponent が子の親であるか、または子を所有している場合は <codeph>true</codeph> になります。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>UIComponent です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>true</codeph> を返すのは、<codeph>owner</codeph> プロパティのチェーンが <codeph>child</codeph> からこの UIComponent を指している場合です。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:parentChanged"><apiName>parentChanged</apiName><shortdesc>
      UIComponent オブジェクトを親に対して追加または削除したときに Flex によって呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>この UIComponent オブジェクトの親です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      UIComponent オブジェクトを親に対して追加または削除したときに Flex によって呼び出されます。 開発者は通常このメソッドを呼び出す必要はありません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:prepareToPrint"><apiName>prepareToPrint</apiName><shortdesc>
      印刷用の IFlexDisplayObject を準備します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>現在のコンポーネントを以前の状態に復元するために <codeph>finishPrint()</codeph> メソッドが必要とする、現在のコンポーネントのプロパティを含むオブジェクトです。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>印刷するコンポーネントです。現在のコンポーネントか、その子の 1 つです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      印刷用の IFlexDisplayObject を準備します。UIComponent クラスの場合、このメソッドはアクションを実行しません。Flex コンテナはこのメソッドをオーバーライドし、印刷出力からスクロールバーを除去するなど、印刷の準備をします。
     
      <p>アプリケーション開発者は通常このメソッドを使用しません。 </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.printing.xml#FlexPrintJob"><linktext>mx.printing.FlexPrintJob</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:regenerateStyleCache"><apiName>regenerateStyleCache</apiName><shortdesc>
      このコンポーネントの CSS スタイルキャッシュを作成または再作成します。recursive パラメーターが true の場合は、このコンポーネントのすべての子孫の CSS スタイルキャッシュも作成または再作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>このコンポーネントのすべての子のスタイルキャッシュを再帰的に再生成します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンポーネントの CSS スタイルキャッシュを作成または再作成します。<codeph>recursive</codeph> パラメーターが <codeph>true</codeph> の場合は、このコンポーネントのすべての子孫の CSS スタイルキャッシュも作成または再作成します。
     
      <p>Flex フレームワークは次のような状況でこのメソッドを呼び出します。</p>
     
      <ul>
        <li><codeph>addChild()</codeph> メソッドまたは <codeph>addChildAt()</codeph> メソッドを使用して UIComponent を親に追加するとき。</li>
        <li>UIComponent の <codeph>styleName</codeph> プロパティを変更するとき。</li>
        <li>CSSStyleDeclaration の <codeph>setStyle()</codeph> メソッドを使用して CSS セレクターでスタイルを設定するとき。</li>
      </ul>
     
      <p>スタイルキャッシュの構築は多くの計算を必要とする操作であるため、<codeph>styleName</codeph> の変更やセレクタースタイルの設定を不必要に行わないようにしてください。</p>
     
      <p>このメソッドは、UIComponent の <codeph>setStyle()</codeph> メソッドを呼び出してインスタンススタイルを設定する場合には呼び出されません。インスタンススタイルの設定は、セレクタースタイルの設定に比べて比較的高速です。</p>
     
      <p>このメソッドを呼び出す必要はなく、オーバーライドする必要もありません。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:registerEffects"><apiName>registerEffects</apiName><shortdesc>
      各エフェクトイベントごとに、EffectManager をイベントリスナーの 1 つとして登録します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>エフェクトイベントの名前です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      各エフェクトイベントごとに、EffectManager をイベントリスナーの 1 つとして登録します。通常はこのメソッドを呼び出す必要はありません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      
      指定されたイベントを再生します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>再生が正常に完了した場合は、<codeph>true</codeph> です。  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>再生するイベントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定されたイベントを再生します。 デフォルトの再生動作がスーパークラスで定義されている場合、コンポーネント作成者は super.replayAutomatableEvent を呼び出すはずです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:resolveAutomationIDPart"><apiName>resolveAutomationIDPart</apiName><shortdesc>
      
      提供された ID を使用して子を解決します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>条件と照合できる子の配列です。すべての子が解決できる場合は <codeph>null</codeph> です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>criteria</apiItemName><apiType value="Object"/><apiDesc>子を記述するプロパティのセットです。 条件には、正規表現の値を入れられるので、複数の子を条件に一致させられます。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      提供された ID を使用して子を解決します。 この ID は、<codeph>createAutomationIDPart()</codeph> メソッドが提供するプロパティのセットです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:resourcesChanged"><apiName>resourcesChanged</apiName><shortdesc>
      このメソッドは、UIComponent の作成時に呼び出されます。また、ローカライズされたリソースが何らかの方法で変更されたことを示すために、ResourceManager が "change" イベントを送出した時点で常に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このメソッドは、UIComponent の作成時に呼び出されます。また、ローカライズされたリソースが何らかの方法で変更されたことを示すために、ResourceManager が <codeph>"change"</codeph> イベントを送出した時点で常に呼び出されます。
     
      <p>このイベントは、ResourceManager の <codeph>localeChain</codeph> プロパティを設定した時点、リソースモジュールによるロードが終了した時点および ResourceManager の <codeph>update()</codeph> メソッドを呼び出した時点で送出されます。</p>
     
      <p>サブクラスでは、このメソッドをオーバーライドし、<codeph>super.resourcesChanged()</codeph> を呼び出した後、リソース値の変化に応じて必要となる処理を実行する必要があります。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:resumeBackgroundProcessing"><apiName>resumeBackgroundProcessing</apiName><shortdesc>
      suspendBackgroundProcessing() が呼び出された後、callLater() によってキューに入れられたメソッドのバックグラウンド処理を再開します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>callLater()</codeph> によってキューに入れられたメソッドのバックグラウンド処理を、<codeph>suspendBackgroundProcessing()</codeph> が呼び出された後に再開します。
     
      <p>詳細については、<codeph>suspendBackgroundProcessing()</codeph> の説明を参照してください。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      オブジェクトのサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>オブジェクトの幅を表します。
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>オブジェクトの高さを表します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      オブジェクトのサイズを設定します。<codeph>width</codeph> プロパティと <codeph>height</codeph> プロパティを直接設定する場合とは異なり、<codeph>setActualSize()</codeph> メソッドでは、<codeph>explictWidth</codeph> プロパティと <codeph>explicitHeight</codeph> プロパティは設定されません。このため、レイアウト計算によってオブジェクトが元のサイズに戻る可能性があります。このメソッドは、主に <codeph>updateDisplayList()</codeph> を実装するコンポーネントの開発者、Effect、および LayoutManager によって使用されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setConstraintValue"><apiName>setConstraintValue</apiName><shortdesc>
      レイアウト制約値を設定します。これは、このコンポーネントの制約スタイルを設定することと同じです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><value>The value of the constraint can be specified in either
      of two forms. It can be specified as a numeric string, for
      example, "10" or it can be specified as identifier:numeric
      string. For identifier:numeric string, identifier is the
      <code>id</code> of a ConstraintRow or ConstraintColumn. For
      example, a value of "cc1:10" specifies a value of 10 for the
      ConstraintColumn that has the <code>id</code> "cc1."
     
      
      </value></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>制約スタイルの名前であり、left、right、top、bottom、verticalCenter、horizontalCenter、baseline のいずれかです。
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/></apiParam></apiOperationDef><apiDesc>
      レイアウト制約値を設定します。これは、このコンポーネントの制約スタイルを設定することと同じです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setCurrentState"><apiName>setCurrentState</apiName><shortdesc>
      現在の状態を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>新しいビューステートの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>playTransition</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>true</codeph> の場合、ビューステートが変化したときに適切なトランジションが再生されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      現在の状態を設定します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/currentState"><linktext>currentState</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:setFocus"><apiName>setFocus</apiName><shortdesc>
      現在扱っているコンポーネントにフォーカスを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      現在扱っているコンポーネントにフォーカスを設定します。このとき、コンポーネントのサブコンポーネントにフォーカスが渡されることがあります。
     
      <p><b>メモ：</b>このメソッドでフォーカスを設定したときは、TextInput および TextArea コントロールだけがハイライトを表示します。すべてのコントロールは、ユーザーが Tab キーでコントロールを選択したときにハイライトを表示します。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutBoundsPosition"><apiName>setLayoutBoundsPosition</apiName><shortdesc>
      
      画面に描画するためにエレメントで使用する座標を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>postLayoutTransform が true の場合、エレメントは、境界ボックスの左上隅が (x, y) になるように配置されます。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。setLayoutSize を呼び出すとレイアウト位置に影響を与える可能性があるので、setLayoutPosition は setLayoutSize の後に呼び出す必要があります。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
      
      画面に描画するためにエレメントで使用する座標を設定します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutBoundsSize"><apiName>setLayoutBoundsSize</apiName><shortdesc>
      
      レイアウトサイズを指定したサイズに設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>ターゲットの幅です。
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>ターゲットの高さです。
     
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、指定したサイズは、エレメントの境界ボックスのサイズです。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      レイアウトサイズを指定したサイズに設定します。これは、画面に描画するためにエレメントで使用するサイズです。いずれかのサイズが指定されないまま（NaN）の場合、そのサイズは、他のサイズに合わせて最適なサイズになるように選択されます。これは、エレメントの幅と高さが相互に関連している場合など（テキスト、複雑な変換を持つコンポーネントなど）、呼び出し元がエレメントに制約を加え過ぎないようにする場合に役立ちます。両方のサイズが指定されないままの場合、エレメントのレイアウトサイズは推奨サイズに設定されます。<codeph>setLayoutSize</codeph> は、最小サイズまたは最大サイズを切り詰めません。setLayoutSize を呼び出すとレイアウト位置に影響を与える可能性があるため、setLayoutSize は setLayoutPosition の前に呼び出す必要があります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutMatrix"><apiName>setLayoutMatrix</apiName><shortdesc>
      
      兄弟を基準としてコンポーネントのレイアウトサイズおよび位置を計算するために使用される変換 Matrix を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix"/></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      
      兄弟を基準としてコンポーネントのレイアウトサイズおよび位置を計算するために使用される変換 Matrix を設定します。
     
      <p>このマトリックスは通常、コンポーネントの 2D プロパティで定義されます。プロパティには、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>rotation</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>transformX</codeph> および <codeph>transformY</codeph> などがあります。一部のコンポーネントには、追加の変換プロパティがある場合があります。これらのプロパティは、レイアウトマトリックスの上に適用され、最終的な計算されたマトリックスが決定されます。例えば、<codeph>UIComponent</codeph> では <codeph>offsets</codeph> が定義されます。</p>
      
      <p>レイアウト Matrix は、親の座標での計算時に getPreferredSize()、getMinSize()、getMaxSize()、getLayoutSize() に反映されます。また、親および子の座標での計算時に getLayoutPosition() に反映されます。変換マトリックスを計算するレイアウトは通常、このメソッドを明示的に呼び出し、子の座標でサイズを処理します。このメソッドを呼び出すレイアウトは、<codeph>invalidateLayout</codeph> に <codeph>false</codeph> を渡して、後続のレイアウトパスがトリガーされないようにします。</p>
     
      <p>このメソッドを直接呼び出す開発者は通常、<codeph>invalidateLayout</codeph> に <codeph>true</codeph> を渡して、子の再レイアウトが必要であることを親コンテナに通知するようにします。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutMatrix3D"><apiName>setLayoutMatrix3D</apiName><shortdesc>
      layoutMatrix3D プロパティと同様に、レイアウト Matrix3D を設定しますが、レイアウトのパスはトリガーしません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix3D"/></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      layoutMatrix3D プロパティと同様に、レイアウト Matrix3D を設定しますが、レイアウトのパスはトリガーしません。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:setStretchXY"><apiName>setStretchXY</apiName><shortdesc>
      水平方向および垂直方向の変換伸縮率を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stretchX</apiItemName><apiType value="Number"/><apiDesc>伸縮率の水平方向のコンポーネントです。
      </apiDesc></apiParam><apiParam><apiItemName>stretchY</apiItemName><apiType value="Number"/><apiDesc>伸縮率の垂直方向のコンポーネントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      水平方向および垂直方向の変換伸縮率を指定します。伸縮率は、計算されたマトリックスに対して他の変換前に適用されます。
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setStyle"><apiName>setStyle</apiName><shortdesc>
      このコンポーネントインスタンスのスタイルプロパティを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>スタイルプロパティの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value=""/><apiDesc>スタイルの新しい値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンポーネントインスタンスのスタイルプロパティを設定します。
     
      <p>これは、グローバル設定されたスタイルをオーバーライドできます。</p>
     
      <p><codeph>setStyle()</codeph> メソッドを呼び出すと、パフォーマンスが低下することがあります。これは必要な場合のみ使用してください。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setVisible"><apiName>setVisible</apiName><shortdesc>
      visible プロパティが変更されたときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc><codeph>visible</codeph> プロパティの新しい値です。 <codeph>true</codeph> を指定するとコンポーネントが表示され、<codeph>false</codeph> を指定すると非表示になります。
     
      </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合は、イベントは送出されません。 <codeph>false</codeph> の場合は、コンポーネントが表示されたときに <codeph>show</codeph> イベントが送出され、コンポーネントが非表示になったときに <codeph>hide</codeph> イベントが送出されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>visible</codeph> プロパティが変更されたときに呼び出されます。コンポーネントの表示と非表示を切り替えるには、このメソッドを直接呼び出す代わりに <codeph>visible</codeph> プロパティを設定してください。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:stateChanged"><apiName>stateChanged</apiName><shortdesc>
      このメソッドは、状態が変更された場合に呼び出され、状態固有のスタイルがこのコンポーネントに適用されるかどうかを確認します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>newState</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      このメソッドは、状態が変更された場合に呼び出され、状態固有のスタイルがこのコンポーネントに適用されるかどうかを確認します。CSS 擬似セレクターが現在の状態と一致する可能性がある場合は、このインスタンスに対して、および再帰パラメーターが true に設定されている場合はすべての子に対してスタイルのキャッシュを再生成する必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      スタイルプロパティの変更を検出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>スタイルプロパティの名前です。このコンポーネントのすべてのスタイルが変更された場合は、null になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      スタイルプロパティの変更を検出します。何らかのスタイルプロパティが設定されていると、Flex が <codeph>styleChanged()</codeph> メソッドを呼び出し、設定されているスタイルの名前を渡します。
     
      <p>これは、UIComponent のサブクラスを作成するときにオーバーライド可能な高度なメソッドです。カスタムコンポーネントを作成するときには、渡されたスタイル名をチェックし、その結果に従って変更内容を処理するよう、<codeph>styleChanged()</codeph> メソッドをオーバーライドできます。これにより、既存スタイルのデフォルト動作をオーバーライドできるだけでなく、独自のスタイルプロパティを追加することもできます。</p>
     
      <p>スタイルプロパティを処理する場合には、<codeph>styleChanged()</codeph> メソッドのオーバーライドで <codeph>invalidateDisplayList()</codeph> メソッドを呼び出して、次回の画面更新時に Flex がコンポーネントの <codeph>updateDisplayList()</codeph> メソッドを実行するようにします。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
      コンポーネントのスタイルを初めて初期化するとき、Flex は stylesInitialized() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンポーネントのスタイルを初めて初期化するとき、Flex は <codeph>stylesInitialized()</codeph> メソッドを呼び出します。
     
      <p>これは、UIComponent のサブクラスを作成するときにオーバーライド可能な高度なメソッドです。Flex は、コンポーネントの <codeph>measure</codeph> および <codeph>updateDisplayList</codeph> メソッドが初めて呼び出されるまでに、コンポーネントのスタイルが完全に初期化されることを保証します。ほとんどのコンポーネントでは、それで十分です。ただし、早い段階でスタイル値にアクセスする必要がある場合は、stylesInitialized() 関数をオーバーライドして、スタイルプロパティが初めて初期化されたときに直ちにアクセス可能にすることができます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:suspendBackgroundProcessing"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      resumeBackgroundProcessing() が呼び出されるまで、callLater() によってキューに入れられたメソッドのバックグラウンド処理をブロックします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>callLater()</codeph> によってキューに入れられたメソッドのバックグラウンド処理を、<codeph>resumeBackgroundProcessing()</codeph> が呼び出されるまでブロックします。
     
      <p>これらのメソッドは、中断なしに実行する必要のあるタイムクリティカルなコードを使用しているときに有効です。 例えば、エフェクトの <codeph>suspendBackgroundProcessing</codeph> プロパティを <codeph>true</codeph>に設定すると、アニメーションを滑らかにするために、再生の開始時に <codeph>suspendBackgroundProcessing()</codeph> が自動的に呼び出され、停止時に <codeph>resumeBackgroundProcessing</codeph> が呼び出されます。</p>
     
      <p>LayoutManager は <codeph>callLater()</codeph> を使用するため、<codeph>commitProperties()</codeph>、<codeph>measure()</codeph> および <codeph>updateDisplayList()</codeph> は、<codeph>suspendBackgroundProcessing()</codeph> の呼び出しと <codeph>resumeBackgroundProcessing()</codeph> の呼び出しの間には呼び出されません。</p>
     
      <p>外側のメソッドと内側のメソッド（外側のメソッドによって呼び出されるメソッド）の両方が <codeph>suspendBackgroundProcessing()</codeph> と <codeph>resumeBackgroundProcessing()</codeph> を呼び出すようにするほうが安全です。これらのメソッドは、バックグラウンド処理を実行するかどうかを決めるカウンターをインクリメントおよびデクリメントするためです。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:transformAround"><apiName>transformAround</apiName><shortdesc conref="mx.core.ILayoutElement#transformAround">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transformCenter</apiItemName><apiType value="flash.geom:Vector3D"/></apiParam><apiParam><apiItemName>scale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam><apiParam><apiItemName>rotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam><apiParam><apiItemName>translation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam><apiParam><apiItemName>postLayoutScale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam><apiParam><apiItemName>postLayoutRotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam><apiParam><apiItemName>postLayoutTranslation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc conref="mx.core.ILayoutElement#transformAround">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:transformPointToParent"><apiName>transformPointToParent</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><postLayoutPosition>A Vector3D point that will hold the post-layout
     result. If null, the parameter is ignored.
     
      </postLayoutPosition></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>localPosition</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>
     </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="flash.geom:Vector3D"/></apiParam><apiParam><apiItemName>postLayoutPosition</apiItemName><apiType value="flash.geom:Vector3D"/></apiParam></apiOperationDef><apiDesc>
     <codeph/><codeph/>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      オブジェクトの描画およびその子のサイズや位置の設定を行います。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      オブジェクトの描画およびその子のサイズや位置の設定を行います。これは、UIComponent のサブクラスを作成するときにオーバーライド可能な高度なメソッドです。
     
      <p>このメソッドは直接呼び出さないでください。<codeph>updateDisplayList()</codeph> メソッドは、<codeph>addChild()</codeph> メソッドでコンポーネントがコンテナに追加されたとき、およびコンポーネントの <codeph>invalidateDisplayList()</codeph> メソッドが呼び出されたときに、Flex によって呼び出されます。 </p>
     
      <p>コンポーネントに子がない場合は、このメソッドで <codeph>graphics.drawRect()</codeph> などコンポーネントの Graphics オブジェクトに対するメソッドをいくつか使用して、プログラムによる描画を実行することになります。</p>
     
      <p>コンポーネントに子がある場合は、このメソッドで、コンポーネントの子に対する <codeph>move()</codeph> メソッドおよび <codeph>setActualSize()</codeph> メソッドを呼び出すことになります。</p>
     
      <p>コンポーネントの中には、子がある場合でもプログラムによる描画を実行できるものがあります。いずれの場合でも、描画するときは、コンポーネントの <codeph>unscaledWidth</codeph> および <codeph>unscaledHeight</codeph> を境界として使用する必要があります。</p>
     
      <p><codeph>unscaledWidth</codeph> および <codeph>unscaledHeight</codeph> を、<codeph>width</codeph> プロパティおよび <codeph>height</codeph> プロパティの代わりに使用することが重要です。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      
      子の位置とサイズを検証し、その他のビジュアルオブジェクトを描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      子の位置とサイズを検証し、その他のビジュアルオブジェクトを描画します。 <codeph>LayoutManager.invalidateDisplayList()</codeph> メソッドがこの ILayoutManagerClient クライアントを指定して呼び出された場合、表示リストの更新時に <codeph>validateDisplayList()</codeph> メソッドが呼び出されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateNow"><apiName>validateNow</apiName><shortdesc>
      必要に応じて、このオブジェクトのプロパティとレイアウトを検証および更新し、それを再描画します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      必要に応じて、このオブジェクトのプロパティとレイアウトを検証および更新し、それを再描画します。相当量の計算を必要とするプロパティの処理は、通常はスクリプトの実行が終了するまで実行されません。例えば、<codeph>width</codeph> プロパティの設定は遅らされます。これは、オブジェクトの子または親の幅の再計算が必要になる可能性があるためです。処理を遅らせることにより、スクリプトで <codeph>width</codeph> プロパティが複数回設定されても、処理を何度も繰り返さずにすみます。このメソッドでは、この動作を手動でオーバーライドできます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      commitProperties() メソッドを呼び出してコンポーネントのプロパティを検証するために、レイアウトロジックによって使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      <codeph>commitProperties()</codeph> メソッドを呼び出してコンポーネントのプロパティを検証するために、レイアウトロジックによって使用されます。一般にサブクラスは、このメソッドではなく <codeph>commitProperties()</codeph> メソッドをオーバーライドすべきです。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateSize"><apiName>validateSize</apiName><shortdesc>
      
      コンポーネントの測定サイズを検証します。LayoutManager.invalidateSize() メソッドがこの ILayoutManagerClient を指定して呼び出された場合、測定の実行時に validateSize() メソッドが呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合、このメソッドをオブジェクトの子で呼び出します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      コンポーネントの測定サイズを検証します。<codeph>LayoutManager.invalidateSize()</codeph> メソッドがこの ILayoutManagerClient を指定して呼び出された場合、測定の実行時に <codeph>validateSize()</codeph> メソッドが呼び出されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validationResultHandler"><apiName>validationResultHandler</apiName><shortdesc>
      このコンポーネントに割り当てられたバリデーターからの valid と invalid の両方のイベントを処理します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier><apiDesc>検証用のイベントオブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンポーネントに割り当てられたバリデーターからの <codeph>valid</codeph> と <codeph>invalid</codeph> の両方のイベントを処理します。
     
      <p>通常、バリデーターにイベントリスナーを割り当てることで、バリデーターによって送出された <codeph>valid</codeph> イベントおよび <codeph>invalid</codeph> イベントを処理します。 検証中のコンポーネントで直接検証イベントを処理する場合は、このメソッドをオーバーライドすると <codeph>valid</codeph> イベントおよび <codeph>invalid</codeph> イベントを処理できます。通常はオーバーライド時に <codeph>super.validationResultHandler(event)</codeph> を呼び出します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:verticalGradientMatrix"><apiName>verticalGradientMatrix</apiName><shortdesc>
      垂直方向のグラデーションを描画するときに rot パラメーターとして drawRoundRect() メソッドに渡すことのできるボックスの Matrix を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>垂直方向のグラデーションの Matrix です。
      
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>グラデーションの左座標（ピクセル単位）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>グラデーションの上座標（ピクセル単位）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>グラデーションの幅（ピクセル単位）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>グラデーションの高さ（ピクセル単位）です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      垂直方向のグラデーションを描画するときに <codeph>drawRoundRect()</codeph> メソッドに <codeph>rot</codeph> パラメーターとして渡すことのできるボックスの Matrix を返します。
     
      <p>パフォーマンス向上のため、Matrix は静的変数に保存され、<codeph>horizontalGradientMatrix()</codeph> および <codeph>verticalGradientMatrix()</codeph> に対するすべての呼び出しで再使用されます。 したがって、この Matrix を <codeph>drawRoundRect()</codeph> に先に渡し、その後で <codeph>horizontalGradientMatrix()</codeph> または <codeph>verticalGradientMatrix()</codeph> を再度呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:UIComponent:DEFAULT_MAX_HEIGHT"><apiName>DEFAULT_MAX_HEIGHT</apiName><shortdesc>
      maxHeight プロパティのデフォルト値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>maxHeight</codeph> プロパティのデフォルト値です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MAX_WIDTH"><apiName>DEFAULT_MAX_WIDTH</apiName><shortdesc>
      maxWidth プロパティのデフォルト値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>maxWidth</codeph> プロパティのデフォルト値です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_HEIGHT"><apiName>DEFAULT_MEASURED_HEIGHT</apiName><shortdesc>
      measuredHeight プロパティのデフォルト値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>measuredHeight</codeph> プロパティのデフォルト値です。 ほとんどのコンポーネントは measuredHeight を計算しますが、一部はフローベースであり、妥当と思われる数値を選択する必要があります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_MIN_HEIGHT"><apiName>DEFAULT_MEASURED_MIN_HEIGHT</apiName><shortdesc>
      measuredMinHeight プロパティのデフォルト値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>measuredMinHeight</codeph> プロパティのデフォルト値です。 ほとんどのコンポーネントは measuredMinHeight を計算しますが、一部はフローベースであり、妥当と思われる数値を選択する必要があります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_MIN_WIDTH"><apiName>DEFAULT_MEASURED_MIN_WIDTH</apiName><shortdesc>
      measuredMinWidth プロパティのデフォルト値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>40</apiData><apiType value="Number"/><apiDefaultValue>40
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>measuredMinWidth</codeph> プロパティのデフォルト値です。 ほとんどのコンポーネントは measuredMinWidth を計算しますが、一部はフローベースであり、妥当と思われる数値を選択する必要があります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_WIDTH"><apiName>DEFAULT_MEASURED_WIDTH</apiName><shortdesc>
      measuredWidth プロパティのデフォルト値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>160</apiData><apiType value="Number"/><apiDefaultValue>160
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>measuredWidth</codeph> プロパティのデフォルト値です。 ほとんどのコンポーネントは measuredWidth を計算しますが、一部はフローベースであり、妥当と思われる数値を選択する必要があります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityDescription:get"><apiName>accessibilityDescription</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><public>
	  A convenience accessor for the 'description' property
	  in this UIComponent's accessibilityProperties object.
	 
	  The getter simply returns accessibilityProperties.description,
	  or "" if accessibilityProperties is null.
	  The setter first checks whether accessibilityProperties is null, and if it is,
	  sets it to a new AccessibilityProperties instance;
	  then it sets accessibilityProperties.description.
	 
  	  </public></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityEnabled:get"><apiName>accessibilityEnabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><public>
	  A convenience accessor for the 'silent' property
	  in this UIComponent's accessibilityProperties object.
	 
	  Note that accessibilityEnabled has the opposite sense from silent;
	  accessibilityEnabled is true when silent is false and vice versa.
	 
	  The getter simply returns accessibilityProperties.silent,
	  or true if accessibilityProperties is null.
	  The setter first checks whether accessibilityProperties is null, and if it is,
	  sets it to a new AccessibilityProperties instance;
	  then it sets accessibilityProperties.silent.
	 
      </public></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityName:get"><apiName>accessibilityName</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><public>
	  A convenience accessor for the 'name' property
	  in this UIComponent's accessibilityProperties object.
	 
	  The getter simply returns accessibilityProperties.name,
	  or "" if accessibilityProperties is null.
	  The setter first checks whether accessibilityProperties is null, and if it is,
	  sets it to a new AccessibilityProperties instance;
	  then it sets accessibilityProperties.name.
	 
	  </public></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityShortcut:get"><apiName>accessibilityShortcut</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><public>
	  A convenience accessor for the 'shortcut' property
	  in this UIComponent's accessibilityProperties object.
	 
	  The getter simply returns accessibilityProperties.shortcut,
	  or "" if accessibilityProperties is null.
	  The setter first checks whether accessibilityProperties is null, and if it is,
	  sets it to a new AccessibilityProperties instance;
	  then it sets accessibilityProperties.shortcut.
	 
	  </public></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:activeEffects:get"><apiName>activeEffects</apiName><shortdesc>
      EffectInstance インスタンスの配列として、現在コンポーネントで再生されているエフェクトのリスト。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      EffectInstance インスタンスの配列として、現在コンポーネントで再生されているエフェクトのリスト。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      オートメーション関連機能を処理する委譲オブジェクト。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      オートメーション関連機能を処理する委譲オブジェクト。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      
      このコンポーネントがオートメーション用に有効である場合は true、それ以外の場合は false です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      このコンポーネントがオートメーション用に有効である場合は true、それ以外の場合は false です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationName:get"><apiName>automationName</apiName><shortdesc>
      
      このオブジェクトの識別子として使用できる名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      このオブジェクトの識別子として使用できる名前です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      
      オートメーション目的で使用するこのコンポーネントのオーナーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      オートメーション目的で使用するこのコンポーネントのオーナーです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      
      オートメーション目的で使用するこのコンポーネントの親です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      オートメーション目的で使用するこのコンポーネントの親です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationTabularData:get"><apiName>automationTabularData</apiName><shortdesc>
      
      データ検索に使用できる IAutomationTabularData インターフェイスの実装です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      データ検索に使用できる <codeph>IAutomationTabularData</codeph> インターフェイスの実装です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationValue:get"><apiName>automationValue</apiName><shortdesc conref="mx.automation.IAutomationObject#automationValue">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.automation.IAutomationObject#automationValue">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      
      このコンポーネントがオートメーション用に可視である場合は true、それ以外の場合は false です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      このコンポーネントがオートメーション用に可視である場合は true、それ以外の場合は false です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:baseline:get"><apiName>baseline</apiName><shortdesc>
      
      アンカーターゲットからコントロールのベースライン位置までの垂直距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      アンカーターゲットからコントロールのベースライン位置までの垂直距離（ピクセル単位）です。デフォルトでは、アンカーターゲットはコンテナのコンテンツ領域の上端です。拡張制約が設定されたレイアウトでは、ターゲットを制約行にできます。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "anchorTargetName:value"（例："row1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      コンポーネントのテキストにおける 1 行目のベースラインの y 座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      コンポーネントのテキストにおける 1 行目のベースラインの y 座標です。
     
      <p>このプロパティは、<codeph>baseline</codeph> 制約スタイルを実装するために使用します。 また、FormItem のラベルを FormItem 内のコントロールに合わせて配置するためにも使用します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:bottom:get"><apiName>bottom</apiName><shortdesc>
      
      コンポーネントの下端からアンカーターゲットの下端までの垂直距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      コンポーネントの下端からアンカーターゲットの下端までの垂直距離（ピクセル単位）です。デフォルトでは、アンカーターゲットはコンテナのコンテンツ領域です。拡張制約が設定されたレイアウトでは、ターゲットを制約行にできます。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "anchorTargetName:value"（例："row1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:cachePolicy:get"><apiName>cachePolicy</apiName><shortdesc>
      このオブジェクトのビットマップキャッシュポリシーを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>UIComponentCachePolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このオブジェクトのビットマップキャッシュポリシーを指定します。 MXML で有効な値は、<codeph>"on"</codeph>、<codeph>"off"</codeph>、<codeph>"auto"</codeph>（デフォルト）です。
     
      <p>ActionScript で有効な値は、<codeph>UIComponentCachePolicy.ON</codeph>、<codeph>UIComponentCachePolicy.OFF</codeph>、<codeph>UIComponentCachePolicy.AUTO</codeph>（デフォルト）です。</p>
     
      <p><ul>
        <li>値が <codeph>UIComponentCachePolicy.ON</codeph> の場合、オブジェクトは常にビットマップとしてキャッシュされます。</li>
        <li>値が <codeph>UIComponentCachePolicy.OFF</codeph> の場合、オブジェクトはビットマップとしてキャッシュされません。</li>
        <li>値が <codeph>UIComponentCachePolicy.AUTO</codeph> の場合、フレームワークはヒューリスティックを使用して、オブジェクトをビットマップとしてキャッシュするかどうかを判断します。</li>
      </ul></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:className:get"><apiName>className</apiName><shortdesc>
      このインスタンスのクラス名です。例えば、"Button" などがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      このインスタンスのクラス名です。例えば、<codeph>"Button"</codeph> などがあります。
     
      <p>このストリングにはパッケージ名は含まれません。 パッケージ名も必要な場合は、flash.utils パッケージの <codeph>getQualifiedClassName()</codeph> メソッドを呼び出してください。 <codeph>"mx.controls::Button"</codeph> のようなストリングが返されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc>
      コンテンツ座標系におけるマウスの x 位置を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンテンツ座標系におけるマウスの <i>x</i> 位置を返します。コンテンツ座標では、コンポーネントのコンテンツの左上隅を基準としたピクセル位置を指定します。現在切り詰められていて、アクセスするにはコンポーネントをスクロールすることが必要な領域も含め、コンポーネントのすべてのコンテンツ領域を含みます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc>
      コンテンツ座標系におけるマウスの y 位置を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンテンツ座標系におけるマウスの <i>y</i> 位置を返します。コンテンツ座標では、コンポーネントのコンテンツの左上隅を基準としたピクセル位置を指定します。現在切り詰められていて、アクセスするにはコンポーネントをスクロールすることが必要な領域も含め、コンポーネントのすべてのコンテンツ領域を含みます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      CSS 擬似セレクターの照合時に使用されるステートです。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      CSS 擬似セレクターの照合時に使用されるステートです。デフォルトでは、これは currentState です。
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:currentState:get"><apiName>currentState</apiName><shortdesc>
      コンポーネントの現在のビューステートです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      コンポーネントの現在のビューステートです。 コンポーネントをベースステートにリセットするには、<codeph>""</codeph> または <codeph>null</codeph> に設定します。
     
      <p>このプロパティを使用してコンポーネントの状態を設定すると、Flex は定義されたトランジションを適用します。 <codeph>setCurrentState()</codeph> メソッドを使用して現在の状態を設定することもできます。このメソッドを使用して状態を変更する場合、オプションで、トランジションを適用しないことを指定できます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/setCurrentState()"><linktext>setCurrentState()</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:cursorManager:get"><apiName>cursorManager</apiName><shortdesc>
      このコンポーネントとそのピアーのカーソルを制御する CursorManager を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.managers:ICursorManager"/></apiValueDef><apiDesc>
      このコンポーネントとそのピアーのカーソルを制御する CursorManager を取得します。それぞれの最上位ウィンドウに CursorManager の独自のインスタンスがあります。間違いなく目的のオブジェクトを扱うためには、このメソッドを使用します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:depth:get"><apiName>depth</apiName><shortdesc>
      
      コンテナ内のアイテムのレンダリング順序を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      コンテナ内のアイテムのレンダリング順序を決定します。Spark コンテナ内のアイテムのレンダリング順序は、<codeph>depth</codeph> プロパティに基づいて決定されます。値が最も低い depth のアイテムは背景に配置され、高くなるほど前面に配置されます。奥行き値が同じアイテムは、コンテナに追加された順に表示されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:descriptor:get"><apiName>descriptor</apiName><shortdesc>
      この UIComponent インスタンスの作成のために createComponentFromDescriptor() メソッドで使用した UIComponentDescriptor への参照です（存在する場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:UIComponentDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      この UIComponent インスタンスの作成のために <codeph>createComponentFromDescriptor()</codeph> メソッドで使用した UIComponentDescriptor への参照です（存在する場合）。 この UIComponent インスタンスが記述子から作成されていない場合、このプロパティは null です。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:designLayer:get"><apiName>designLayer</apiName><shortdesc conref="mx.core.IVisualElement#designLayer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.IVisualElement#designLayer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:document:get"><apiName>document</apiName><shortdesc>
      この UIComponent に関連付けられたドキュメントオブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      この UIComponent に関連付けられたドキュメントオブジェクトへの参照です。ドキュメントオブジェクトは、Flex アプリケーション、MXML コンポーネント、または AS コンポーネントの階層の最上位にあるオブジェクトです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc>
      UIComponent オブジェクトが doubleClick イベントを受け取るかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      UIComponent オブジェクトが <codeph>doubleClick</codeph> イベントを受け取るかどうかを指定します。 デフォルト値は <codeph>false</codeph> です。これは、UIComponent オブジェクトが <codeph>doubleClick</codeph> イベントを受け取らないことを意味します。
     
      <p>また、<codeph>mouseEnabled</codeph> プロパティもデフォルト値の <codeph>true</codeph> に設定する必要があります。そうしないと、オブジェクトは <codeph>doubleClick</codeph> イベントを受け取ることができません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:enabled:get"><apiName>enabled</apiName><shortdesc conref="mx.core.IUIComponent#enabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.IUIComponent#enabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:errorString:get"><apiName>errorString</apiName><shortdesc>
      バリデーターによってコンポーネントを監視しているとき、検証が失敗した場合に、そのコンポーネントのエラーヒントに表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      バリデーターによってコンポーネントを監視しているとき、検証が失敗した場合に、そのコンポーネントのエラーヒントに表示されるテキストです。
     
      <p>Validator クラスを実際に使用しないでコンポーネントの検証エラーを表示するには、<codeph>errorString</codeph> プロパティを使用します。 <codeph>errorString</codeph> プロパティにストリング値を書き込むと、検証エラーを示すためにコンポーネントの周りに赤い境界線が描画されます。バリデーターが検証エラーを検出した場合と同様に、マウスポインターをコンポーネント上に重ねると、ツールヒントに検証エラーメッセージとしてそのストリングが表示されます。</p>
     
      <p>検証エラーをクリアするには、<codeph>errorString</codeph> プロパティに空のストリング（""）を指定します。</p>
     
      <p><codeph>errorString</codeph> プロパティに値を書き込んでも、valid または invalid イベントはトリガーされません。単に、境界線の色が変更され、検証エラーメッセージが表示されるだけです。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      コンポーネントの座標内におけるコンポーネントの明示的な高さ（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標内におけるコンポーネントの明示的な高さ（ピクセル単位）を指定する数値です。
     
      <p>この値は、コンポーネントのサイズと位置を計算するためにコンテナで使用されます。コンポーネントのデフォルトのサイズを決定するために、コンポーネント自体で使用されることはありません。したがって、Container、またはこのプロパティを計算に使用しないコンテナが親である場合、このプロパティは機能しません。 値はコンポーネント座標内におけるものなので、親に対する実際の <codeph>explicitHeight</codeph> は、<codeph>scaleY</codeph> プロパティの影響を受けます。</p>
      <p><codeph>height</codeph> プロパティを設定すると、このプロパティも、指定された高さの値に設定されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      レイアウト中に親によって考慮されるコンポーネントの最大推奨高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      レイアウト中に親によって考慮されるコンポーネントの最大推奨高さです。この値は、ピクセル単位でのコンポーネント座標内にあります。
     
      <p>アプリケーション開発者は、通常は explicitMaxHeight プロパティを設定しません。代わりに、explicitMaxHeight プロパティを設定する maxHeight プロパティの値を設定します。maxHeight の値は変化しません。</p>
     
      <p>レイアウト時に、maxHeight がアプリケーション開発者によって明示的に設定された場合は、explicitMaxHeight の値が使用されます。それ以外の場合は、maxHeight のデフォルト値が使用されます。</p>
     
      <p>この値は、コンポーネントのサイズと位置を計算するためにコンテナで使用されます。コンポーネントのデフォルトのサイズを決定するために、コンポーネント自体で使用されることはありません。したがって、Container、またはこのプロパティを計算に使用しないコンテナが親である場合、このプロパティは機能しません。 値はコンポーネント座標内におけるものなので、親に対する実際の <codeph>maxHeight</codeph> は、<codeph>scaleY</codeph> プロパティの影響を受けます。 高さに理論上の制限を持たないコンポーネントもあります。 そのようなコンポーネントの場合、<codeph>maxHeight</codeph> は <codeph>UIComponent.DEFAULT_MAX_HEIGHT</codeph> に設定されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      レイアウト中に親によって考慮されるコンポーネントの最大推奨幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      レイアウト中に親によって考慮されるコンポーネントの最大推奨幅です。この値は、ピクセル単位でのコンポーネント座標内にあります。
     
      <p>アプリケーション開発者は、通常は explicitMaxWidth プロパティを設定しません。代わりに、explicitMaxWidth プロパティを設定する maxWidth プロパティの値を設定します。maxWidth の値は変化しません。</p>
     
      <p>レイアウト時に、maxWidth がアプリケーション開発者によって明示的に設定された場合は、explicitMaxWidth の値が使用されます。それ以外の場合は、maxWidth のデフォルト値が使用されます。</p>
     
      <p>この値は、コンポーネントのサイズと位置を計算するためにコンテナで使用されます。コンポーネントのデフォルトのサイズを決定するために、コンポーネント自体で使用されることはありません。したがって、Container、またはこのプロパティを計算に使用しないコンテナが親である場合、このプロパティは機能しません。 値はコンポーネント座標内におけるものなので、親に対する実際の <codeph>maxWidth</codeph> は、<codeph>scaleX</codeph> プロパティの影響を受けます。 幅に理論上の制限を持たないコンポーネントもあります。 そのようなコンポーネントの場合、<codeph>maxWidth</codeph> は <codeph>UIComponent.DEFAULT_MAX_WIDTH</codeph> に設定されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc>
      レイアウト中に親によって考慮されるコンポーネントの最小推奨高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      レイアウト中に親によって考慮されるコンポーネントの最小推奨高さです。この値は、ピクセル単位でのコンポーネント座標内にあります。
     
      <p>アプリケーション開発者は、通常は explicitMinHeight プロパティを設定しません。代わりに、explicitMinHeight プロパティを設定する minHeight プロパティの値を設定します。minHeight の値は変化しません。</p>
     
      <p>レイアウト時に、minHeight がアプリケーション開発者によって明示的に設定された場合は、explicitMinHeight の値が使用されます。それ以外の場合は、measuredMinHeight の値が使用されます。</p>
     
      <p>この値は、コンポーネントのサイズと位置を計算するためにコンテナで使用されます。コンポーネントのデフォルトのサイズを決定するために、コンポーネント自体で使用されることはありません。したがって、Container、またはこのプロパティを計算に使用しないコンテナが親である場合、このプロパティは機能しません。 値はコンポーネント座標内におけるものなので、親に対する実際の <codeph>minHeight</codeph> は、<codeph>scaleY</codeph> プロパティの影響を受けます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc>
      レイアウト中に親によって考慮されるコンポーネントの最小推奨幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      レイアウト中に親によって考慮されるコンポーネントの最小推奨幅です。この値は、ピクセル単位でのコンポーネント座標内にあります。
     
      <p>アプリケーション開発者は、通常は explicitMinWidth プロパティを設定しません。代わりに、explicitMinWidth プロパティを設定する minWidth プロパティの値を設定します。minWidth の値は変化しません。</p>
     
      <p>レイアウト時に、minWidth がアプリケーション開発者によって明示的に設定された場合は、explicitMinWidth の値が使用されます。それ以外の場合は、measuredMinWidth の値が使用されます。</p>
     
      <p>この値は、コンポーネントのサイズと位置を計算するためにコンテナで使用されます。コンポーネントのデフォルトのサイズを決定するために、コンポーネント自体で使用されることはありません。したがって、Container、またはこのプロパティを計算に使用しないコンテナが親である場合、このプロパティは機能しません。 値はコンポーネント座標内におけるものなので、親に対する実際の <codeph>minWidth</codeph> は、<codeph>scaleX</codeph> プロパティの影響を受けます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      コンポーネントの座標内におけるコンポーネントの明示的な幅（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標内におけるコンポーネントの明示的な幅（ピクセル単位）を指定する数値です。
     
      <p>この値は、コンポーネントのサイズと位置を計算するためにコンテナで使用されます。コンポーネントのデフォルトのサイズを決定するために、コンポーネント自体で使用されることはありません。したがって、Container、またはこのプロパティを計算に使用しないコンテナが親である場合、このプロパティは機能しません。 値はコンポーネント座標内におけるものなので、親に対する実際の <codeph>explicitWidth</codeph> は、<codeph>scaleX</codeph> プロパティの影響を受けます。</p>
      <p><codeph>width</codeph> プロパティを設定すると、このプロパティも、指定された幅の値に設定されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:flexContextMenu:get"><apiName>flexContextMenu</apiName><shortdesc>
      この UIComponent のコンテキストメニューです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:IFlexContextMenu</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      この UIComponent のコンテキストメニューです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusEnabled:get"><apiName>focusEnabled</apiName><shortdesc>
      コンポーネントが、タブで選択されたときにフォーカスを受け付けることができるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンポーネントが、タブで選択されたときにフォーカスを受け付けることができるかどうかを示します。 UIComponent を他のコンポーネントのサブコンポーネントとして使用する場合には、外側のコンポーネントをフォーカス可能なエンティティにするために、<codeph>focusEnabled</codeph> を <codeph>false</codeph> に設定できます。 このプロパティが <codeph>false</codeph> の場合、フォーカスは <codeph>focusEnable</codeph> が <codeph>true</codeph> に設定された最初の親に転送されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusManager:get"><apiName>focusManager</apiName><shortdesc>
      このコンポーネントとそのピアーに対するフォーカスを制御する FocusManager を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc>
      このコンポーネントとそのピアーに対するフォーカスを制御する FocusManager を取得します。ポップアップは、それぞれ独自のフォーカスループを持ち、その結果、それぞれ FocusManager の独自のインスタンスを持ちます。間違いなく目的のオブジェクトを扱うためには、このメソッドを使用します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      このオブジェクトに関連付けられたフォーカスペインです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      このオブジェクトに関連付けられたフォーカスペインです。オブジェクトの子のいずれにフォーカスがあると、オブジェクトはフォーカスペインを持ちます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:hasComplexLayoutMatrix:get"><apiName>hasComplexLayoutMatrix</apiName><shortdesc>
      UIComponent に平行移動ではない (x,y) 変換プロパティがある場合、true を返します。
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      UIComponent に平行移動ではない (x,y) 変換プロパティがある場合、true を返します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:hasFocusableChildren:get"><apiName>hasFocusableChildren</apiName><shortdesc>
      子オブジェクトがフォーカスを取得できるかどうかを示すフラグです。Flash Player で使用される tabChildren プロパティと似ています。通常このプロパティは false です。ほとんどのコンポーネントは自身がフォーカスを取得するか、単一の内部サブコンポーネントにフォーカスを委譲し、あたかもコンポーネントにフォーカスがあるように表示を行うためです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      子オブジェクトがフォーカスを取得できるかどうかを示すフラグ
     
      <p>Flash Player で使用される <codeph>tabChildren</codeph> プロパティと似ています。</p>
     
      <p>通常このプロパティは <codeph>false</codeph> です。ほとんどのコンポーネントは自身がフォーカスを取得するか、単一の内部サブコンポーネントにフォーカスを委譲し、あたかもコンポーネントにフォーカスがあるように表示を行うためです。例えば、TextInput コンテナにフォーカスを取得できる子 RichEditableText コントロールが含まれている場合、フォーカスを実際に取得するのが RichEditableText サブコンポーネントであっても、フォーカスは TextInput にあるように表示されます。TextInput がフォーカスのあるコンポーネントとして見なされるので、TextInput の <codeph>hasFocusableChildren</codeph> は <codeph>false</codeph> に設定されます。この内部構造は抽象です。</p>
     
      <p>一般に、このフラグが <codeph>true</codeph> に設定されるのは、TabNavigator や Accordion などのナビゲーターコンポーネントのみです。これらのコンポーネントでは、フォーカスをタブに取得しますが、フォーカスは下位のタブの子コンテナのコンポーネントのものです。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:hasLayoutMatrix3D:get"><apiName>hasLayoutMatrix3D</apiName><shortdesc>
      
      エレメントが 3D マトリックスを持つ場合は True です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      エレメントが 3D マトリックスを持つ場合は True です。エレメントが 2D でも有効なマトリックスが返されるので、<codeph> getLayoutMatrix3D()</codeph> を呼び出して値を確認する代わりに、<codeph>hasLayoutMatrix3D</codeph> を使用します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:height:get"><apiName>height</apiName><shortdesc>
      親の座標内におけるコンポーネントの高さ（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      親の座標内におけるコンポーネントの高さ（ピクセル単位）を指定する数値です。デフォルト値は 0 ですが、このプロパティは、Flex がアプリケーション内のコンポーネントのサイズ設定を行った後、実際のコンポーネントの高さになります。
     
      <p>メモ： MXML の <codeph>height</codeph> 属性には <codeph>height="100%"</codeph> のようにパーセンテージ値を指定できますが、ActionScript の <codeph>height</codeph> プロパティにはパーセンテージ値を使用できません。このプロパティの代わりに、<codeph>percentHeight</codeph> プロパティを使用してください。</p>
     
      <p>このプロパティを設定すると、<codeph>resize</codeph> イベントが送出されます。このイベントがどのような場合に送出されるかについては、<codeph>resize</codeph> イベントの説明を参照してください。 コンポーネントの <codeph>scaleY</codeph> プロパティが 100 以外の場合は、コンポーネントの内部座標における高さとは一致しません。 例えば、<codeph>scaleY</codeph> が 200 で高さが 100 ピクセルのコンポーネントは、親においては 100 ピクセルを占めますが、内部では高さ 50 ピクセルと見なされます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:horizontalCenter:get"><apiName>horizontalCenter</apiName><shortdesc>
      
      コンポーネントの中心からアンカーターゲットのコンテンツ領域の中心までの水平距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      コンポーネントの中心からアンカーターゲットのコンテンツ領域の中心までの水平距離（ピクセル単位）です。デフォルトのアンカーターゲットはコンテナ自体です。拡張制約が設定されたレイアウトでは、アンカーターゲットを制約列にできます。この場合、コンテンツ領域は、先行する列（またはコンテナ側）とターゲット列の間隔になります。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "constraintColumnId:value"（例："col1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:id:get"><apiName>id</apiName><shortdesc>
      コンポーネントの ID です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      コンポーネントの ID です。 この値はオブジェクトのインスタンス名になります。この値には、空白または特殊文字を含めないでください。 アプリケーション全体で、各コンポーネントが固有の ID を持つ必要があります。
     
      <p>サードパーティー製のツールを使用してアプリケーションをテストする場合は、各コンポーネントに意味のある ID を与えます。テストツールはスクリプトの中で ID を使用してコントロールを表すため、意味のある名前を付けておくとスクリプトが読みやすくなります。 たとえば、ボタンの値には、b1 や button1 ではなく、submit_button を使用します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc>
      このコンポーネントを親コンテナのレイアウトに含めるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンポーネントを親コンテナのレイアウトに含めるかどうかを指定します。 <codeph>true</codeph> の場合、オブジェクトは、親コンテナのレイアウトに含められます。オブジェクトのサイズと位置は、親コンテナによって、そのレイアウト規則に従って決定されます。<codeph>false</codeph> の場合、オブジェクトのサイズと位置は、親コンテナのレイアウトの影響を受けません。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      このコンポーネントの継承スタイルのチェーンの始まりです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      このコンポーネントの継承スタイルのチェーンの始まりです。 <codeph>getStyle()</codeph> メソッドは単に <codeph>inheritingStyles[styleName]</codeph> にアクセスして、プロトタイプリンクのチェーン全体を検索します。 このオブジェクトは <codeph>initProtoChain()</codeph> によって設定されます。 開発者は通常このプロパティに直接アクセスする必要はありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:initialized:get"><apiName>initialized</apiName><shortdesc>
      オブジェクトがレイアウトの 3 つの段階（処理、測定、レイアウト）すべてを完了したものであるかどうかを示すフラグです（いずれかが必須であった場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      オブジェクトがレイアウトの 3 つの段階（処理、測定、レイアウト）すべてを完了したものであるかどうかを示すフラグです（いずれかが必須であった場合）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:instanceIndex:get"><apiName>instanceIndex</apiName><shortdesc>
      繰り返しコンポーネントのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      繰り返しコンポーネントのインデックスです。コンポーネントが Repeater 内にない場合、この値は -1 になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      この UIComponent オブジェクトを親ドキュメントから参照するために必要なインデックスを含む配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      この UIComponent オブジェクトを親ドキュメントから参照するために必要なインデックスを含む配列です。この UIComponent オブジェクトが Repeater に含まれていない限り、この配列は空です。最初のエレメントが最も外側の Repeater を表します。例えば、ID が "b" で instanceIndices が [2,4] の場合、親のドキュメント上で b[2][4] として参照します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:is3D:get"><apiName>is3D</apiName><shortdesc>
      
      エレメントが 3D の場合は True です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      エレメントが 3D の場合は True です。
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:isDocument:get"><apiName>isDocument</apiName><shortdesc>
      この UIComponent インスタンスがドキュメントオブジェクトであるか、つまり Flex アプリケーション、MXML コンポーネント、または ActionScript コンポーネントの階層の最上位に位置するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      この UIComponent インスタンスがドキュメントオブジェクトであるか、つまり Flex アプリケーション、MXML コンポーネント、または ActionScript コンポーネントの階層の最上位に位置するかどうかを指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:isPopUp:get"><apiName>isPopUp</apiName><shortdesc>
      コンポーネントがポップアップされたことを示すため、PopUpManager によって true に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントがポップアップされたことを示すため、PopUpManager によって <codeph>true</codeph> に設定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:left:get"><apiName>left</apiName><shortdesc>
      
      コンポーネントの左端からアンカーターゲットの左端までの水平距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      コンポーネントの左端からアンカーターゲットの左端までの水平距離（ピクセル単位）です。デフォルトでは、アンカーターゲットはコンテナのコンテンツ領域です。拡張制約が設定されたレイアウトでは、ターゲットを制約列にできます。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "anchorTargetName:value"（例："col1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:maxHeight:get"><apiName>maxHeight</apiName><shortdesc>
      レイアウト中に親によって考慮されるコンポーネントの最大推奨高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      レイアウト中に親によって考慮されるコンポーネントの最大推奨高さです。この値は、ピクセル単位でのコンポーネント座標内にあります。このプロパティのデフォルト値は、コンポーネント開発者によって設定されます。
     
      <p>コンポーネント開発者は、このプロパティを使用して、コンポーネントの高さの上限を設定します。</p>
     
      <p>アプリケーション開発者が maxHeight のデフォルト値をオーバーライドした場合は、新しい値が explicitMaxHeight に格納されます。maxHeight のデフォルト値は変化しません。その結果、レイアウト時に、アプリケーション開発者によって maxHeight が明示的に設定された場合は、explicitMaxHeight の値がコンポーネントの最大推奨高さに使用されます。maxHeight がユーザーによって明示的に設定されない場合は、デフォルト値が使用されます。</p>
     
      <p>この値は、コンポーネントのサイズと位置を計算するためにコンテナで使用されます。コンポーネントのデフォルトのサイズを決定するために、コンポーネント自体で使用されることはありません。したがって、Container、またはこのプロパティを計算に使用しないコンテナが親である場合、このプロパティは機能しません。 値はコンポーネント座標内におけるものなので、親に対する実際の <codeph>maxHeight</codeph> は、<codeph>scaleY</codeph> プロパティの影響を受けます。 高さに理論上の制限を持たないコンポーネントもあります。 そのようなコンポーネントの場合、<codeph>maxHeight</codeph> は <codeph>UIComponent.DEFAULT_MAX_HEIGHT</codeph> に設定されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:maxWidth:get"><apiName>maxWidth</apiName><shortdesc>
      レイアウト中に親によって考慮されるコンポーネントの最大推奨幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      レイアウト中に親によって考慮されるコンポーネントの最大推奨幅です。この値は、ピクセル単位でのコンポーネント座標内にあります。このプロパティのデフォルト値は、コンポーネント開発者によって設定されます。
     
      <p>コンポーネント開発者は、このプロパティを使用して、コンポーネントの幅の上限を設定します。</p>
     
      <p>アプリケーション開発者が maxWidth のデフォルト値をオーバーライドした場合は、新しい値が explicitMaxWidth に格納されます。maxWidth のデフォルト値は変化しません。その結果、レイアウト時にアプリケーション開発者によって maxWidth が明示的に設定された場合は、explicitMaxWidth の値がコンポーネントの最大推奨幅に使用されます。maxWidth がユーザーによって明示的に設定されない場合は、デフォルト値が使用されます。</p>
     
      <p>この値は、コンポーネントのサイズと位置を計算するためにコンテナで使用されます。コンポーネントのデフォルトのサイズを決定するために、コンポーネント自体で使用されることはありません。したがって、Container、またはこのプロパティを計算に使用しないコンテナが親である場合、このプロパティは機能しません。 値はコンポーネント座標内におけるものなので、親に対する実際の <codeph>maxWidth</codeph> は、<codeph>scaleX</codeph> プロパティの影響を受けます。 幅に理論上の制限を持たないコンポーネントもあります。 そのようなコンポーネントの場合、<codeph>maxWidth</codeph> は <codeph>UIComponent.DEFAULT_MAX_WIDTH</codeph> に設定されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      コンポーネントのデフォルトの高さ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントのデフォルトの高さ（ピクセル単位）です。 この値は <codeph>measure()</codeph> メソッドによって設定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc>
      コンポーネントのデフォルトの最小の高さ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントのデフォルトの最小の高さ（ピクセル単位）です。 この値は <codeph>measure()</codeph> メソッドによって設定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc>
      コンポーネントのデフォルトの最小の幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントのデフォルトの最小幅（ピクセル単位）です。 この値は <codeph>measure()</codeph> メソッドによって設定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      コンポーネントのデフォルトの幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントのデフォルトの幅（ピクセル単位）です。 この値は <codeph>measure()</codeph> メソッドによって設定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:minHeight:get"><apiName>minHeight</apiName><shortdesc>
      レイアウト中に親によって考慮されるコンポーネントの最小推奨高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      レイアウト中に親によって考慮されるコンポーネントの最小推奨高さです。この値は、ピクセル単位でのコンポーネント座標内にあります。デフォルト値は、コンポーネントの実装に依存します。
     
      <p>アプリケーション開発者が minHeight の値を設定した場合は、新しい値が explicitMinHeight に格納されます。minHeight のデフォルト値は変化しません。その結果、レイアウト時に、アプリケーション開発者によって minHeight が明示的に設定された場合は、explicitMinHeight の値がコンポーネントの最小推奨高さに使用されます。minHeight がアプリケーション開発者によって明示的に設定されていない場合は、measuredMinHeight の値が使用されます。</p>
     
      <p>この値は、コンポーネントのサイズと位置を計算するためにコンテナで使用されます。コンポーネントのデフォルトのサイズを決定するために、コンポーネント自体で使用されることはありません。したがって、Container、またはこのプロパティを計算に使用しないコンテナが親である場合、このプロパティは機能しません。 値はコンポーネント座標内におけるものなので、親に対する実際の <codeph>minHeight</codeph> は、<codeph>scaleY</codeph> プロパティの影響を受けます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:minWidth:get"><apiName>minWidth</apiName><shortdesc>
      レイアウト中に親によって考慮されるコンポーネントの最小推奨幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      レイアウト中に親によって考慮されるコンポーネントの最小推奨幅です。この値は、ピクセル単位でのコンポーネント座標内にあります。デフォルト値は、コンポーネントの実装に依存します。
     
      <p>アプリケーション開発者が minWidth の値を設定した場合は、新しい値が explicitMinWidth に格納されます。minWidth のデフォルト値は変化しません。その結果、レイアウト時にアプリケーション開発者によって minWidth が明示的に設定された場合は、explicitMinWidth の値がコンポーネントの最小推奨幅に使用されます。minWidth がアプリケーション開発者によって明示的に設定されていない場合は、measuredMinWidth の値が使用されます。</p>
     
      <p>この値は、コンポーネントのサイズと位置を計算するためにコンテナで使用されます。コンポーネントのデフォルトのサイズを決定するために、コンポーネント自体で使用されることはありません。したがって、Container、またはこのプロパティを計算に使用しないコンテナが親である場合、このプロパティは機能しません。 値はコンポーネント座標内におけるものなので、親に対する実際の <codeph>minWidth</codeph> は、<codeph>scaleX</codeph> プロパティの影響を受けます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      モジュールファクトリは、埋め込みフォントの使用時や、このコンポーネントのスタイル制御を行うスタイルマネージャーの検出時に、コンテキストとして使用されるものです。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:mouseFocusEnabled:get"><apiName>mouseFocusEnabled</apiName><shortdesc>
      クリックしたとき、フォーカスを取得できるかどうかを示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      クリックしたとき、フォーカスを取得できるかどうかを示します。 <codeph>false</codeph> の場合、フォーカスは <codeph>mouseFocusEnable</codeph> が <codeph>true</codeph> に設定された最初の親に転送されます。 例えば、Button コントロールでこのプロパティを <codeph>false</codeph> に設定すると、Tab キーを使用してフォーカスを Button コントロールに移動することはできますが、このコントロールをクリックしても、フォーカスはこのコントロールに移動されません。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:nestLevel:get"><apiName>nestLevel</apiName><shortdesc>
      オブジェクト階層におけるこのオブジェクトの深度を表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      オブジェクト階層におけるこのオブジェクトの深度を表します。この数値は、測定およびレイアウトコードによって使用されます。このコンポーネントが DisplayList でない場合、この値は 0 になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      このコンポーネントの非継承スタイルのチェーンの始まりです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      このコンポーネントの非継承スタイルのチェーンの始まりです。 <codeph>getStyle()</codeph> メソッドは単に <codeph>nonInheritingStyles[styleName]</codeph> にアクセスして、プロトタイプリンクのチェーン全体を検索します。 このオブジェクトは <codeph>initProtoChain()</codeph> によって設定されます。 開発者は通常このプロパティに直接アクセスする必要はありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:numAutomationChildren:get"><apiName>numAutomationChildren</apiName><shortdesc>
      
      このコンテナに含まれるオートメーションの子の数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      このコンテナに含まれるオートメーションの子の数です。 この合計には、オートメーション階層で重要でない子は含まれますが、組み合わされた子が含まれることはありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:owner:get"><apiName>owner</apiName><shortdesc conref="mx.core.IVisualElement#owner">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#owner">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parent:get"><apiName>parent</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parentApplication:get"><apiName>parentApplication</apiName><shortdesc>
      この UIComponent インスタンスを含む Application オブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      この UIComponent インスタンスを含む Application オブジェクトへの参照です。この Application オブジェクトが別の Application の SWFLoader コントロールに存在する、というつながりが続く形で、Application オブジェクトのチェーンを作成できます。このチェーンは、parentApplication を使用して移動することができます。 Application オブジェクトの <codeph>parentApplication</codeph> プロパティはそれ自体の参照になることはなく、ロード先の Application オブジェクトか、または null（最上位レベルの Application の場合）となります。 <codeph>parentApplication</codeph> プロパティを使用してアプリケーションチェーン内を移動する操作は、<codeph>parentDocument</codeph> プロパティを使用してドキュメントチェーン内を移動する操作に似ています。 最上位のアプリケーションにアクセスするには、Application クラスの <codeph>application</codeph> プロパティを使用します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parentDocument:get"><apiName>parentDocument</apiName><shortdesc>
      この UIComponent に対する親ドキュメントオブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      この UIComponent に対する親ドキュメントオブジェクトへの参照です。ドキュメントオブジェクトは、Flex アプリケーション、MXML コンポーネント、または AS コンポーネントの階層の最上位にある UIComponent です。 Application オブジェクトの場合、<codeph>parentDocument</codeph> プロパティは null です。 このプロパティは、MXML スクリプトで、ドキュメントオブジェクトチェーンの上のレベルに移動するのに役立ちます。 <codeph>parentDocument.parentDocument</codeph> のような形で使用して、このチェーン内を移動できます。 parentObject は Object 型なので、作成者はキャストすることなく、祖先ドキュメントオブジェクトのプロパティおよびメソッドにアクセスできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      コンポーネントの高さを親のサイズに対する比率（パーセンテージ）で指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの高さを親のサイズに対する比率（パーセンテージ）で指定する数値です。 指定できる値は 0 ～ 100 です。 デフォルト値は NaN です。 <codeph>height</codeph> プロパティまたは <codeph>explicitHeight</codeph> プロパティを設定すると、このプロパティが NaN にリセットされます。
     
      <p>このプロパティは、前に設定されている場合にのみ数値を返します。コンポーネントの正確なサイズをパーセンテージで示しているわけではありません。</p>
     
      <p>UITextField コントロールの場合、このプロパティは常に NaN に設定されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      コンポーネントの幅を親のサイズに対する比率（パーセンテージ）で指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの幅を親のサイズに対する比率（パーセンテージ）で指定する数値です。指定できる値は 0 ～ 100 です。デフォルト値は NaN です。 <codeph>width</codeph> プロパティまたは <codeph>explicitWidth</codeph> プロパティを設定すると、このプロパティが NaN にリセットされます。
     
      <p>このプロパティは、前に設定されている場合にのみ数値を返します。コンポーネントの正確なサイズをパーセンテージで示しているわけではありません。</p>
     
      <p>UITextField コントロールの場合、このプロパティは常に NaN に設定されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:postLayoutTransformOffsets:get"><apiName>postLayoutTransformOffsets</apiName><shortdesc conref="mx.core.ILayoutElement#postLayoutTransformOffsets">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.geom:TransformOffsets</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.ILayoutElement#postLayoutTransformOffsets">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc>
      子をすぐに生成するか、遅延生成した後、このいずれかの発生に応じて、true に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      子をすぐに生成するか、遅延生成した後、このいずれかの発生に応じて、<codeph>true</codeph> に設定されます。 Container オブジェクトの場合、<codeph>true</codeph> に設定されるのは、<codeph>createComponentsFromDescriptors()</codeph> メソッドの終了時、つまり、Container オブジェクトが子の記述子から子を作成した後です。
     
      <p>例えば、Accordion コンテナが遅延インスタンス化を使用する場合、Accordion コンテナの 2 番目のペインの <codeph>processedDescriptors</codeph> プロパティは、ユーザーがそのペインまでナビゲートし、ペインがその子を作成するまで <codeph>true</codeph> になりません。 ただし、Accordion が <codeph>creationPolicy</codeph> プロパティを <codeph>"all"</codeph> に設定している場合、その 2 番目のペインの <codeph>processedDescriptors</codeph> プロパティはアプリケーションの起動中に <codeph>true</codeph> に設定されます。</p>
     
      <p>コンテナではないクラスには記述子がなく、この場合、このプロパティが <codeph>true</codeph> に設定されるのは、<codeph>createChildren()</codeph> メソッドが内部コンポーネントの子を作成した後です。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeater:get"><apiName>repeater</apiName><shortdesc>
      この UIComponent を作成した Repeater オブジェクト（親ドキュメント内にある）への参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IRepeater</apiValueClassifier></apiValueDef><apiDesc>
      この UIComponent を作成した Repeater オブジェクト（親ドキュメント内にある）への参照です。 UIComponent が 1 つの Repeater オブジェクトによって作成される場合は、<codeph>repeaters</codeph> プロパティではなく、このプロパティを使用します。 この UIComponent がネストされた Repeater オブジェクトによって作成される場合は、<codeph>repeaters</codeph> プロパティを使用します。
     
      <p>この UIComponent が Repeater によって作成されない場合、このプロパティは <codeph>null</codeph> に設定されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaterIndex:get"><apiName>repeaterIndex</apiName><shortdesc>
      この UIComponent を作成した Repeater のデータプロバイダー内にあるアイテムのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      この UIComponent を作成した Repeater のデータプロバイダー内にあるアイテムのインデックスです。 UIComponent が 1 つの Repeater オブジェクトによって作成される場合は、<codeph>repeaterIndices</codeph> プロパティではなく、このプロパティを使用します。 この UIComponent がネストされた Repeater オブジェクトによって作成される場合は、<codeph>repeaterIndices</codeph> プロパティを使用します。
     
      <p>この UIComponent が Repeater によって作成されない場合、このプロパティは -1 に設定されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      この UIComponent を生成した、親ドキュメント内にある Repeater のデータプロバイダーに含まれるアイテムのインデックスを含む配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      この UIComponent を生成した、親ドキュメント内にある Repeater のデータプロバイダーに含まれるアイテムのインデックスを含む配列です。 この UIComponent が Repeater に含まれていない限り、この配列は空です。
     
      <p>配列の最初のエレメントが最も外側の Repeater を表します。 例えば、<codeph>repeaterIndices</codeph> が [2,4] の場合は、外側のリピーターがアイテム <codeph>dataProvider[2]</codeph> を使用し、内側のリピーターがアイテム <codeph>dataProvider[4]</codeph> を使用したことを意味します。</p>
     
      <p>このプロパティは、<codeph>instanceIndices</codeph> プロパティと異なる場合があります。これに該当するのは、いずれかの Repeater の <codeph>startingIndex</codeph> プロパティが 0 以外の場合です。 例えば、Repeater が <codeph>dataProvider[4]</codeph> から開始する場合でも、最初の繰り返しオブジェクトのドキュメント参照は b[4] ではなく b[0] です。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      この UIComponent を作成した Repeater オブジェクト（親ドキュメント内にある）への参照を含む配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      この UIComponent を作成した Repeater オブジェクト（親ドキュメント内にある）への参照を含む配列です。この UIComponent が Repeater に含まれていない限り、この配列は空です。最初のエレメントが最も外側の Repeater オブジェクトを表します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:resourceManager:get"><apiName>resourceManager</apiName><shortdesc>
      アプリケーションのローカライズされたすべてのリソースを管理するオブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.resources:IResourceManager</apiValueClassifier></apiValueDef><apiDesc>
      アプリケーションのローカライズされたすべてのリソースを管理するオブジェクトへの参照です。これは、IResourceManager インターフェイスを実装するシングルトンインスタンスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:right:get"><apiName>right</apiName><shortdesc>
      
      コンポーネントの右端からアンカーターゲットの右端までの水平距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      コンポーネントの右端からアンカーターゲットの右端までの水平距離（ピクセル単位）です。デフォルトでは、アンカーターゲットはコンテナのコンテンツ領域です。拡張制約が設定されたレイアウトでは、ターゲットを制約列にできます。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "anchorTargetName:value"（例："col1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotation:get"><apiName>rotation</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationX:get"><apiName>rotationX</apiName><shortdesc>
     DisplayObject インスタンスの 3D 親コンテナを基準にした元の位置からの x 軸の回転角を度単位で示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     DisplayObject インスタンスの 3D 親コンテナを基準にした元の位置からの x 軸の回転角を度単位で示します。時計回りに回転させる場合は 0 ～ 180 の値を指定します。反時計回りに回転させる場合は 0 ～ -180 の値を指定します。この範囲を超える値は、360 に加算または 360 から減算され、範囲内に収まる値になるように調整されます。このプロパティは、Flex の 2D レイアウトによる計算時には無視されます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationY:get"><apiName>rotationY</apiName><shortdesc>
     DisplayObject インスタンスの 3D 親コンテナを基準にした元の位置からの y 軸の回転角を度単位で示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     DisplayObject インスタンスの 3D 親コンテナを基準にした元の位置からの y 軸の回転角を度単位で示します。時計回りに回転させる場合は 0 ～ 180 の値を指定します。反時計回りに回転させる場合は 0 ～ -180 の値を指定します。この範囲を超える値は、360 に加算または 360 から減算され、範囲内に収まる値になるように調整されます。このプロパティは、Flex の 2D レイアウトによる計算時には無視されます。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationZ:get"><apiName>rotationZ</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleX:get"><apiName>scaleX</apiName><shortdesc>
      水平方向の伸縮率を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平方向の伸縮率を指定する数値です。
     
      <p>デフォルト値は 1.0 で、オブジェクトは伸縮されていない状態です。 <codeph>scaleX</codeph> が 2.0 の場合は、オブジェクトが 2 倍に拡大されています。<codeph>scaleX</codeph> が 0.5 の場合は、オブジェクトが 2 分の 1 に縮小されています。</p>
     
      <p>値 0.0 は無効です。 コンポーネントを非表示にするには、0.0 に設定するのではなく、小さい値に設定するか、<codeph>visible</codeph> プロパティを <codeph>false</codeph> に設定します。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleY:get"><apiName>scaleY</apiName><shortdesc>
      垂直方向の伸縮率を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直方向の伸縮率を指定する数値です。
     
      <p>デフォルト値は 1.0 で、オブジェクトは伸縮されていない状態です。 <codeph>scaleY</codeph> が 2.0 の場合は、オブジェクトが 2 倍に拡大されています。<codeph>scaleY</codeph> が 0.5 の場合は、オブジェクトが 2 分の 1 に縮小されています。</p>
     
      <p>値 0.0 は無効です。 コンポーネントを非表示にするには、0.0 に設定するのではなく、小さい値に設定するか、<codeph>visible</codeph> プロパティを <codeph>false</codeph> に設定します。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleZ:get"><apiName>scaleZ</apiName><shortdesc>
      z 軸方向の伸縮率を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      z 軸方向の伸縮率を指定する数値です。
     
      <p>z 軸方向の拡大 / 縮小は、z=0 の平面上に配置される一般的なコンポーネントには影響を与えません。3D 変換が適用されている子を持つコンポーネント、または transformZ がゼロ以外のコンポーネントが影響を受けます。</p>
      
      <p>デフォルト値は 1.0 で、オブジェクトは伸縮されていない状態です。</p>
     
      <p>このプロパティは、Flex の 2D レイアウトによる計算時には無視されます。 </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:screen:get"><apiName>screen</apiName><shortdesc>
      このオブジェクトの基本的な描画面のサイズと位置を含むオブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      このオブジェクトの基本的な描画面のサイズと位置を含むオブジェクトを返します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:showInAutomationHierarchy:get"><apiName>showInAutomationHierarchy</apiName><shortdesc>
       
      オートメーションオブジェクトがオートメーション階層に表示されているかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       
      オートメーションオブジェクトがオートメーション階層に表示されているかどうかを示すフラグです。 階層に表示されないコンテナの子は、次に高いレベルで表示される親の子として表示されます。 通常、ボックスや Canvas のようなレイアウトに使用されるコンテナは階層に表示されません。
     
      <p>必要に応じて子を階層に表示させるコントロールもあります。 例えば、List は、ボックスなどのアイテムレンダラーを必ず階層に表示させます。 インプリメンタでは、このプロパティを <codeph>true</codeph> に設定することをサポートする必要があります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:states:get"><apiName>states</apiName><shortdesc>
      このコンポーネントに対して定義されたビューステート。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      このコンポーネントに対して定義されたビューステート。 <codeph>states</codeph> プロパティを指定できるのは、アプリケーションのルートまたは MXML コンポーネントのルートタグに限られます。 このプロパティをそれ以外のコントロールに指定すると、コンパイルエラーになります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleDeclaration:get"><apiName>styleDeclaration</apiName><shortdesc>
      このオブジェクトのインラインの継承スタイルの記憶域です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:CSSStyleDeclaration</apiValueClassifier></apiValueDef><apiDesc>
      このオブジェクトのインラインの継承スタイルの記憶域です。 この CSSStyleDeclaration は、継承スタイルを設定するためにこのコンポーネントで初めて <codeph>setStyle()</codeph> メソッドが呼び出されたときに作成されます。 開発者は通常このプロパティに直接アクセスする必要はありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleName:get"><apiName>styleName</apiName><shortdesc>
      このコンポーネントで使用するクラススタイル。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンポーネントで使用するクラススタイル。 ストリング、CSSStyleDeclaration、IStyleClient のいずれかを使用できます。
     
      <p>ストリングの場合、この値は <codeph>mx:Style</codeph> タグまたは CSS ファイル内にある空白区切りのクラス宣言の名前です。<codeph>styleName</codeph> にはピリオドを含めません。 例えば、<codeph>".bigText"</codeph> という名前のクラススタイルの場合は、<codeph>styleName</codeph> プロパティを <codeph>"bigText"</codeph>（ピリオドなし）に設定します。</p>
     
      <p>これが IStyleClient（通常は UIComponent）の場合は、<codeph>styleName</codeph> オブジェクト内のすべてのスタイルがこのコンポーネントに使用されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleParent:get"><apiName>styleParent</apiName><shortdesc>
      コンポーネントの親は、子孫のセレクターを評価するために使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.styles:IAdvancedStyleClient</apiValueClassifier></apiValueDef><apiDesc>
      コンポーネントの親は、子孫のセレクターを評価するために使用されます。高度なスタイル宣言に対応するには、親も IAdvancedStyleClient である必要があります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:systemManager:get"><apiName>systemManager</apiName><shortdesc>
      このコンポーネントで使用する SystemManager オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      このコンポーネントで使用する SystemManager オブジェクトを返します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:tabFocusEnabled:get"><apiName>tabFocusEnabled</apiName><shortdesc>
      このオブジェクトが TAB キーを使用してフォーカスを取得できるかどうかを示すフラグです。Flash Player で使用される tabEnabled プロパティと似ています。一般に、キーボード入力を処理するコンポーネントの場合は true ですが、コントロールバー内のコンポーネントの中には、エディターなどの他のコンポーネントからフォーカスを取得するべきではないという理由から、false を設定するものもあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このオブジェクトが TAB キーを使用してフォーカスを取得できるかどうかを示すフラグ
     
      <p>Flash Player で使用される <codeph>tabEnabled</codeph> プロパティと似ています。</p>
     
      <p>一般に、キーボード入力を処理するコンポーネントの場合は <codeph>true</codeph> ですが、コントロールバー内のコンポーネントの中には、エディターなどの他のコンポーネントからフォーカスを取得するべきではないという理由から、<codeph>false</codeph> を設定するものもあります。
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:toolTip:get"><apiName>toolTip</apiName><shortdesc>
      ツールヒントに表示するテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ツールヒントに表示するテキストです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:top:get"><apiName>top</apiName><shortdesc>
      
      コンポーネントの上端からアンカーターゲットの上端までの垂直距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      コンポーネントの上端からアンカーターゲットの上端までの垂直距離（ピクセル単位）です。デフォルトでは、アンカーターゲットはコンテナのコンテンツ領域です。拡張制約が設定されたレイアウトでは、ターゲットを制約行にできます。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "anchorTargetName:value"（例："row1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:transformX:get"><apiName>transformX</apiName><shortdesc>
      コンポーネントの変換の中心となる x 座標を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの変換の中心となる x 座標を設定します。
     
      <p>このコンポーネントが Spark 変換エフェクトのターゲットである場合、<codeph>AnimateTransform.autoCenterTransform</codeph> プロパティを設定してこのプロパティをオーバーライドできます。<codeph>autoCenterTransform</codeph> が <codeph>false</codeph> の場合、変換の中心は、エフェクトターゲットの <codeph>transformX</codeph>、<codeph>transformY</codeph> および <codeph>transformZ</codeph> プロパティで決定されます。<codeph>autoCenterTransform</codeph> が <codeph>true</codeph> の場合、ターゲットの中心 <codeph>(width/2, height/2)</codeph> を中心にしてエフェクトが適用されます。</p>
     
      <p>Spark エフェクトクラスにこのプロパティを設定すると、ターゲットコンポーネントの設定がオーバーライドされます。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformX"><linktext>spark.effects.AnimateTransform.transformX</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transformY:get"><apiName>transformY</apiName><shortdesc>
      コンポーネントの変換の中心となる y 座標を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの変換の中心となる y 座標を設定します。
     
      <p>このコンポーネントが Spark 変換エフェクトのターゲットである場合、<codeph>AnimateTransform.autoCenterTransform</codeph> プロパティを設定してこのプロパティをオーバーライドできます。<codeph>autoCenterTransform</codeph> が <codeph>false</codeph> の場合、変換の中心は、エフェクトターゲットの <codeph>transformX</codeph>、<codeph>transformY</codeph> および <codeph>transformZ</codeph> プロパティで決定されます。<codeph>autoCenterTransform</codeph> が <codeph>true</codeph> の場合、ターゲットの中心 <codeph>(width/2, height/2)</codeph> を中心にしてエフェクトが適用されます。</p>
     
      <p>Spark エフェクトクラスにこのプロパティを設定すると、ターゲットコンポーネントの設定がオーバーライドされます。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformY"><linktext>spark.effects.AnimateTransform.transformY</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transformZ:get"><apiName>transformZ</apiName><shortdesc>
      コンポーネントの変換の中心となる z 座標を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの変換の中心となる z 座標を設定します。
     
      <p>このコンポーネントが Spark 変換エフェクトのターゲットである場合、<codeph>AnimateTransform.autoCenterTransform</codeph> プロパティを設定してこのプロパティをオーバーライドできます。<codeph>autoCenterTransform</codeph> が <codeph>false</codeph> の場合、変換の中心は、エフェクトターゲットの <codeph>transformX</codeph>、<codeph>transformY</codeph> および <codeph>transformZ</codeph> プロパティで決定されます。<codeph>autoCenterTransform</codeph> が <codeph>true</codeph> の場合、ターゲットの中心 <codeph>(width/2, height/2)</codeph> を中心にしてエフェクトが適用されます。</p>
     
      <p>Spark エフェクトクラスにこのプロパティを設定すると、ターゲットコンポーネントの設定がオーバーライドされます。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformZ"><linktext>spark.effects.AnimateTransform.transformZ</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transitions:get"><apiName>transitions</apiName><shortdesc>
      Transition オブジェクトの配列です。各 Transition オブジェクトには、ビューステートが変化したときに再生されるエフェクトのセットが定義されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Transition オブジェクトの配列です。各 Transition オブジェクトには、ビューステートが変化したときに再生されるエフェクトのセットが定義されます。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.states.xml#Transition"><linktext>mx.states.Transition</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc>
      このオブジェクトに対して現在トゥイーンされているプロパティの配列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      このオブジェクトに対して現在トゥイーンされているプロパティの配列。
     
      <p>このオブジェクトの一部のプロパティがトゥイーンされることを EffectManager に警告して、EffectManger が同じプロパティのアニメーション化を試みないようにします。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:uid:get"><apiName>uid</apiName><shortdesc>
      オブジェクトの一意の識別子です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      オブジェクトの一意の識別子です。Flex データ駆動型コントロールは、List クラスのサブクラスであるすべてのコントロールも含めて、UID を使用してデータプロバイダーのアイテムを追跡します。
     
      <p>Flex は UID を自動的に作成および管理できます。 ただし、IUID インターフェイスを実装して独自の <codeph>uid</codeph> プロパティを提供しなければならない場合や、独自の <codeph>uid</codeph> プロパティを提供することで処理効率が向上する場合があります。 ほとんどの場合、Flex で使用される UID は全体的に一意である必要はありません。 例外はデータサービスによって送信されるメッセージの場合です。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IUID"><linktext>IUID</linktext></link><link href="mx.utils.xml#UIDUtil"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:protected:unscaledHeight:get"><apiName>unscaledHeight</apiName><shortdesc>
      伸縮されていないコンポーネントの高さを求めるために使用する便利なメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      伸縮されていないコンポーネントの高さを求めるために使用する便利なメソッドです。 コンポーネントの描画および子のレイアウトはすべて、この高さの四角い枠内で行う必要があります。また、この値は <codeph>updateDisplayList()</codeph> に引数として渡されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:unscaledWidth:get"><apiName>unscaledWidth</apiName><shortdesc>
      伸縮されていないコンポーネントの幅を求めるために使用する便利なメソッドです。コンポーネントの描画および子のレイアウトはすべて、この幅の四角い枠内で行う必要があります。また、この値は updateDisplayList() に引数として渡されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      伸縮されていないコンポーネントの幅を求めるために使用する便利なメソッドです。コンポーネントの描画および子のレイアウトはすべて、この幅の四角い枠内で行う必要があります。また、この値は <codeph>updateDisplayList()</codeph> に引数として渡されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      オブジェクトが 3 段階のレイアウト検証を完了したものであるかどうかを示すフラグです（いずれかの検証が必須であった場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      オブジェクトが 3 段階のレイアウト検証を完了したものであるかどうかを示すフラグです（いずれかの検証が必須であった場合）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:validationSubField:get"><apiName>validationSubField</apiName><shortdesc>
      このコンポーネントにサブフィールドを関連付けるためにバリデーターによって使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      このコンポーネントにサブフィールドを関連付けるためにバリデーターによって使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:verticalCenter:get"><apiName>verticalCenter</apiName><shortdesc>
      
      コンポーネントの中心からアンカーターゲットのコンテンツ領域の中心までの垂直距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      コンポーネントの中心からアンカーターゲットのコンテンツ領域の中心までの垂直距離（ピクセル単位）です。デフォルトのアンカーターゲットはコンテナ自体です。拡張制約が設定されたレイアウトでは、アンカーターゲットを制約行にできます。この場合、コンテンツ領域は、先行する行（またはコンテナ側）とターゲット行の間隔になります。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "constraintColumnId:value"（例："row1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:visible:get"><apiName>visible</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:width:get"><apiName>width</apiName><shortdesc>
      親の座標内におけるコンポーネントの幅（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      親の座標内におけるコンポーネントの幅（ピクセル単位）を指定する数値です。デフォルト値は 0 ですが、このプロパティは、Flex がアプリケーション内のコンポーネントのサイズ設定を行った後、実際のコンポーネント幅になります。
     
      <p>メモ： MXML の <codeph>width</codeph> 属性には <codeph>width="100%"</codeph> のようにパーセンテージ値を指定できますが、ActionScript の <codeph>width</codeph> プロパティではパーセンテージ値は使用できません。 このプロパティの代わりに、<codeph>percentWidth</codeph> プロパティを使用してください。</p>
     
      <p>このプロパティを設定すると、<codeph>resize</codeph> イベントが送出されます。このイベントがどのような場合に送出されるかについては、<codeph>resize</codeph> イベントの説明を参照してください。 コンポーネントの <codeph>scaleX</codeph> プロパティが 1.0 以外の場合は、コンポーネントの内部座標における幅とは一致しません。 例えば、<codeph>scaleX</codeph> が 2 で幅が 100 ピクセルのコンポーネントは、親においては 100 ピクセルを占めますが、内部では幅 50 ピクセルと見なされます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:x:get"><apiName>x</apiName><shortdesc>
      親コンテナ内におけるコンポーネントの水平位置（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      親コンテナ内におけるコンポーネントの水平位置（ピクセル単位）を指定する数値です。
     
      <p>コンポーネントの親が HBox、Grid、Form などのレイアウトコンテナである場合、このプロパティを直接または <codeph>move()</codeph> の呼び出しにより設定しても、効果がないか、または一時的にしか有効になりません。これは、これらのコンテナの <codeph>x</codeph> 位置が、レイアウト計算によって設定されるためです。 ただし、親が Canvas などの絶対配置コンテナである場合は、デフォルト値が 0 であるため、<codeph>x</codeph> プロパティを常に設定する必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:y:get"><apiName>y</apiName><shortdesc>
      親コンテナ内におけるコンポーネントの垂直位置（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      親コンテナ内におけるコンポーネントの垂直位置（ピクセル単位）を指定する数値です。
     
      <p>コンポーネントの親が HBox、Grid、Form などのレイアウトコンテナである場合、このプロパティを直接または <codeph>move()</codeph> の呼び出しにより設定しても、効果がないか、または一時的にしか有効になりません。これは、これらのコンテナの <codeph>x</codeph> 位置が、レイアウト計算によって設定されるためです。 ただし、親が Canvas などの絶対配置コンテナである場合は、デフォルト値が 0 であるため、<codeph>x</codeph> プロパティを常に設定する必要があります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:z:get"><apiName>z</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:cacheHeuristic:set"><apiName>cacheHeuristic</apiName><shortdesc>
      オブジェクトのビットマップキャッシュを促すために Flex によって使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      オブジェクトのビットマップキャッシュを促すために Flex によって使用されます。 <codeph>cachePolicy</codeph> が <codeph>UIComponentCachePolicy.AUTO</codeph> の場合、<codeph>cacheHeuristic</codeph> を使用してオブジェクトの <codeph>cacheAsBitmap</codeph> プロパティがコントロールされます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:layoutMatrix3D:set"><apiName>layoutMatrix3D</apiName><shortdesc>
      兄弟を基準としてコンポーネントのレイアウトを計算するために使用される変換マトリックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      兄弟を基準としてコンポーネントのレイアウトを計算するために使用される変換マトリックスです。このマトリックスは、コンポーネントの 3D プロパティで定義されます。これには、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>rotation</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>transformX</codeph>、<codeph>transformY</codeph> などの 2D プロパティのほか、<codeph>rotationX</codeph>、<codeph>rotationY</codeph>、<codeph>scaleZ</codeph>、<codeph>z</codeph> および <codeph>transformZ</codeph> が含まれます。
      
      <p>ほとんどのコンポーネントで、3D 変換プロパティは設定されません。</p>
      
      <p>このレイアウトマトリックスが <codeph>postLayoutTransformOffsets</codeph> プロパティの値と組み合わされて、コンポーネントの最終的な計算後マトリックスが決定されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.xml#layoutMatrix3D/postLayoutTransformOffsets"><linktext>postLayoutTransformOffsets</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:maintainProjectionCenter:set"><apiName>maintainProjectionCenter</apiName><shortdesc>
      true の場合、コンポーネントは、境界ボックスの中央の位置に投影マトリックスを保持します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      true の場合、コンポーネントは、境界ボックスの中央の位置に投影マトリックスを保持します。コンポーネントで投影マトリックスが定義されていない場合は、自動的に追加されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
  BitmapAsset は、Flex アプリケーションに埋め込まれたビットマップイメージを表す flash.display.Bitmap クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexBitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  BitmapAsset は、Flex アプリケーションに埋め込まれたビットマップイメージを表す flash.display.Bitmap クラスのサブクラスです。 これにより IFlexDisplayObject インターフェイスが実装され、埋め込まれたビットマップイメージを Image コントロールで表示すること、またはコンテナの背景やコンポーネントスキンとして使用することが可能になります。
 
  <p>JPEG、GIF、PNG ファイルのビットマップイメージを埋め込むことができます。Flash によって作成された SWF ファイルのビットマップイメージを埋め込むこともできます。いずれの場合も、MXML コンパイラーは、埋め込まれたビットマップイメージを表すように BitmapAsset を拡張するクラスを自動生成します。</p>
 
  <p>通常は、Flex アプリケーションを作成するときに BitmapAsset クラスを直接使用する必要はありません。例えば、次のように記述すると、GIF ファイルを埋め込み、Image コントロールにイメージを表示することができます。</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Logo.gif')"/></pre>
 
  <p>または、次のように記述することにより、CSS シンタックスの中でアプリケーションの背景イメージとして使用できます。</p>
 
  <pre>
  &lt;mx:Style>
      Application
      {
          backgroundImage: Embed(source="Logo.gif")
      }
  &lt;mx:Style/></pre>
 
  <p>MXML コンパイラーによって BitmapAsset のサブクラスが作成されたことを認識しておく必要はありません。</p>
 
  <p>ただし、ActionScript レベルで何が行われているのかを理解しておくことは有益です。 ビットマップイメージを ActionScript に埋め込むには、Class 型の変数を宣言し、この変数の前に <codeph>[Embed]</codeph> メタデータを挿入します。 例えば、次のようにして GIF ファイルを埋め込みます。</p>
 
  <pre>
  [Bindable]
  [Embed(source="Logo.gif")]
  private var logoClass:Class;</pre>
 
  <p>MXML コンパイラーは、拡張子 .gif を確認し、GIF データを Player が使用するビットマップ形式にトランスコードして、BitmapAsset クラスのサブクラスを自動生成し、この自動生成されたクラスへの参照を変数に設定します。 これにより、このクラス参照を使用して <codeph>new</codeph> 演算子で BitmapAsset のインスタンスを作成し、作成したインスタンスで BitmapAsset クラスの API を使用できるようになります。</p>
 
  <pre>
  var logo:BitmapAsset = BitmapAsset(new logoClass());
  logo.bitmapData.noise(4);</pre>
 
  <p>ただし、BitmapAsset インスタンスを自分で作成する必要はほとんどありません。イメージ関連のプロパティおよびスタイルをイメージ生成クラスに設定すると、コンポーネントが必要に応じてイメージインスタンスを作成します。 例えば、このイメージを Image コントロールに表示するために、Image の <codeph>source</codeph> プロパティを <codeph>logoClass</codeph> に設定することができます。 MXML では、次のようにします。</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:BitmapAsset:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>ビットマップイメージのデータです。 
     
      </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>ビットマップが最も近いピクセルに吸着されるかどうかを示します。
     
      </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>ビットマップを伸縮するときにスムージングするかどうかを示します。 
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:BitmapAsset:move"><apiName>move</apiName><shortdesc>
      
	  このオブジェクトを指定の x および y 座標に移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい x 位置です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい y 位置です。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  このオブジェクトを指定の x および y 座標に移動します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:BitmapAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  このオブジェクトの実際のサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい幅です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい高さです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  このオブジェクトの実際のサイズを設定します。
	 
	  <p>このメソッドは主に <codeph>updateDisplayList()</codeph> メソッドの実装に使用されます。ここでオブジェクトの実際のサイズを、その明示的サイズ、親との相対（％）サイズ、および測定されたサイズに基づいて計算します。 次に <codeph>setActualSize()</codeph> を呼び出して、この実際のサイズをオブジェクトに適用します。</p>
	 
	  <p>その他の状況では、このメソッドを呼び出す代わりに、<codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph>、<codeph>percentHeight</codeph> などのプロパティを設定することになります。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:BitmapAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  このオブジェクトの測定した高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  このオブジェクトの測定した高さです。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:BitmapAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  このオブジェクトの測定した幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  このオブジェクトの測定した幅です。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFBridgeProvider"><apiName>ISWFBridgeProvider</apiName><shortdesc>
  ISWFBridgeProvider の実装者によって、異なるセキュリティサンドボックス内のアプリケーション、または異なるバージョンの Flex コンパイラーでコンパイルされ、別の ApplicationDomain で実行されているアプリケーションへのブリッジが提供されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ISWFBridgeProvider の実装者によって、異なるセキュリティサンドボックス内のアプリケーション、または異なるバージョンの Flex コンパイラーでコンパイルされ、別の ApplicationDomain で実行されているアプリケーションへのブリッジが提供されます。このインターフェイスを使用して、呼び出し元はそのアプリケーションへのブリッジを取得できます。呼び出し元は、ブリッジを取得した後で、アプリケーションにイベントを送出できます。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
      子が親に、子の表示オブジェクトへのアクセスまたは子で生成されたメッセージの監視を許可するかどうかをテストします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      子が親に、子の表示オブジェクトへのアクセスまたは子で生成されたメッセージの監視を許可するかどうかをテストします。アクセスが許可されている場合は <codeph>true</codeph>、許可されていない場合は <codeph>false</codeph> です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc>
      親が子に、親の表示オブジェクトへのアクセスまたは親で生成されたメッセージの監視を許可するかどうかをテストします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      親が子に、親の表示オブジェクトへのアクセスまたは親で生成されたメッセージの監視を許可するかどうかをテストします。アクセスが許可されている場合は <codeph>true</codeph>、許可されていない場合は <codeph>false</codeph> です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:swfBridge:get"><apiName>swfBridge</apiName><shortdesc>
      このインターフェイスの実装者に関連付けられているアプリケーションへのブリッジです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      このインターフェイスの実装者に関連付けられているアプリケーションへのブリッジです。異なる ApplicationDomain または異なるサンドボックス内のアプリケーションにイベントを送信するために使用できる IEventDispatcher です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ClassFactory"><apiName>ClassFactory</apiName><shortdesc>
  ClassFactory インスタンスは、同じプロパティを持つ別のクラスのインスタンスを作成するために Flex が使用する「ファクトリオブジェクト」です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFactory</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ClassFactory インスタンスは、同じプロパティを持つ別のクラスのインスタンスを作成するために Flex が使用する「ファクトリオブジェクト」です。
 
  <p>ファクトリオブジェクトを作成するときには、<codeph>generator</codeph> クラスを指定します。 次に、ファクトリオブジェクトに <codeph>properties</codeph> プロパティを設定します。 Flex はファクトリオブジェクトを使用し、ファクトリオブジェクト の <codeph>newInstance()</codeph> メソッドを呼び出すことによってインスタンスを作成します。</p>
 
  <p><codeph>newInstance()</codeph> メソッドは、<codeph>generator</codeph> クラスの新しいインスタンスを作成し、そのインスタンスの <codeph>properties</codeph> に指定されたプロパティを設定します。 作成されたインスタンスをさらにカスタマイズする必要がある場合は、<codeph>newInstance()</codeph> メソッドをオーバーライドできます。</p>
 
  <p>ClassFactory クラスは IFactory インターフェイスを実装します。 したがって、List コントロールの <codeph>itemRenderer</codeph> プロパティや DataGrid コントロールの <codeph>itemEditor</codeph> プロパティのように、IFactory 型のプロパティに代入できるオブジェクトを作成できます。</p>
 
  <p>例えば、ProductRenderer という名前のアイテムレンダラークラスを作成し、その <codeph>showProductImage</codeph> プロパティを <codeph>true</codeph> または <codeph>false</codeph> に設定できるとします。 List コントロールでこのレンダラーを使用し、各レンダラーインスタンスで製品の画像を表示する場合は、次のようなコードを作成します。</p>
 
  <pre>
  var productRenderer:ClassFactory = new ClassFactory(ProductRenderer);
  productRenderer.properties = { showProductImage: true };
  myList.itemRenderer = productRenderer;</pre>
 
  <p>List コントロールは、<codeph>newInstance()</codeph> メソッドを <codeph>itemRenderer</codeph> で呼び出し、ProductRenderer の個々のインスタンスを作成します。各インスタンスの <codeph>showProductImage</codeph> プロパティは <codeph>true</codeph> に設定されます。 製品の画像を除外した別のコントロールが必要な場合は、ProductRenderer クラスを使用して、<codeph>properties</codeph> プロパティを <codeph>{ showProductImage: false }</codeph> に設定した別の ClassFactory を作成します。</p>
 
  <p><codeph>properties</codeph> プロパティを使用してインスタンスを設定する方法は、1 つのジェネレータークラスを様々な方法で使用できるため便利です。 ただし、通常はプロパティを設定する必要のない非設定ジェネレータークラスを作成します。 そのため、MXML では次のシンタックスを使用できます。 </p>
 
  <pre>
  &lt;mx:List id="myList" itemRenderer="ProductRenderer"></pre>
 
  <p>MXML コンパイラーが自動的に ClassFactory インスタンスを作成します。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#IFactory"><linktext>mx.core.IFactory</linktext></link><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links><apiConstructor id="mx.core:ClassFactory:ClassFactory"><apiName>ClassFactory</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>このファクトリオブジェクトからオブジェクトを作成するために、<codeph>newInstance()</codeph> メソッドが使用するクラスです。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ClassFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  properties に指定されたプロパティを使用して、generator クラスの新しいインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>作成された新しいインスタンスです。
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  <codeph>generator</codeph> クラスの新しいインスタンスを、<codeph>properties</codeph> に指定されたプロパティを使用して作成します。
	 
	  <p>このメソッドは、IFactory インターフェイスの <codeph>newInstance()</codeph> メソッドを実装します。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ClassFactory:generator"><apiName>generator</apiName><shortdesc>
      このファクトリオブジェクトからオブジェクトを作成するために、newInstance() メソッドが使用するクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      このファクトリオブジェクトからオブジェクトを作成するために、<codeph>newInstance()</codeph> メソッドが使用するクラスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ClassFactory:properties"><apiName>properties</apiName><shortdesc>
	 このオブジェクトの名前と値のペアによって指定されるプロパティが、newInstance() メソッドによって作成される各オブジェクトに設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	 このオブジェクトの名前と値のペアによって指定されるプロパティが、<codeph>newInstance()</codeph> メソッドによって作成される各オブジェクトに設定されます。
	 
	  <p>例えば、<codeph>properties</codeph> を <codeph>{ text: "Hello", width: 100 }</codeph> に設定した場合、<codeph>generator</codeph> クラスの各インスタンス（<codeph>newInstance()</codeph> を呼び出して作成したもの）は、<codeph>text</codeph> が <codeph>"Hello"</codeph> に設定され、<codeph>width</codeph> が <codeph>100</codeph> に設定されます。</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IUITextField"><apiName>IUITextField</apiName><shortdesc>
  IUITextField インターフェイスは、UITextField インスタンスの API の基本セットを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IUITextField インターフェイスは、UITextField インスタンスの API の基本セットを定義します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:appendText"><apiName>appendText</apiName><shortdesc conref="flash.text.TextField#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newText</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#appendText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getCharBoundaries"><apiName>getCharBoundaries</apiName><shortdesc conref="flash.text.TextField#getCharBoundaries()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getCharBoundaries()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getCharIndexAtPoint"><apiName>getCharIndexAtPoint</apiName><shortdesc conref="flash.text.TextField#getCharIndexAtPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getCharIndexAtPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getFirstCharInParagraph"><apiName>getFirstCharInParagraph</apiName><shortdesc conref="flash.text.TextField#getFirstCharInParagraph()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getFirstCharInParagraph()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getImageReference"><apiName>getImageReference</apiName><shortdesc conref="flash.text.TextField#getImageReference()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getImageReference()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineIndexAtPoint"><apiName>getLineIndexAtPoint</apiName><shortdesc conref="flash.text.TextField#getLineIndexAtPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineIndexAtPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineIndexOfChar"><apiName>getLineIndexOfChar</apiName><shortdesc conref="flash.text.TextField#getLineIndexOfChar()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineIndexOfChar()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineLength"><apiName>getLineLength</apiName><shortdesc conref="flash.text.TextField#getLineLength()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineLength()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc conref="flash.text.TextField#getLineMetrics()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineMetrics()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineOffset"><apiName>getLineOffset</apiName><shortdesc conref="flash.text.TextField#getLineOffset()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineOffset()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineText"><apiName>getLineText</apiName><shortdesc conref="flash.text.TextField#getLineText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getParagraphLength"><apiName>getParagraphLength</apiName><shortdesc conref="flash.text.TextField#getParagraphLength()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getParagraphLength()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UITextField#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>スタイル値です。
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>スタイルプロパティの名前です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getTextFormat"><apiName>getTextFormat</apiName><shortdesc conref="flash.text.TextField#getTextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text:TextFormat"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getTextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getUITextFormat"><apiName>getUITextFormat</apiName><shortdesc conref="mx.core.UITextField#getUITextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier><apiDesc>このコンポーネントのフォーマット情報を持つオブジェクトです。
     
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UITextField#getUITextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:replaceSelectedText"><apiName>replaceSelectedText</apiName><shortdesc conref="flash.text.TextField#replaceSelectedText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#replaceSelectedText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:replaceText"><apiName>replaceText</apiName><shortdesc conref="flash.text.TextField#replaceText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>newText</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#replaceText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setColor"><apiName>setColor</apiName><shortdesc conref="mx.core.UITextField#setColor()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>新しいフォントカラーです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#setColor()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setFocus"><apiName>setFocus</apiName><shortdesc conref="mx.core.UITextField#setFocus()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UITextField#setFocus()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setSelection"><apiName>setSelection</apiName><shortdesc conref="flash.text.TextField#setSelection()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#setSelection()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setTextFormat"><apiName>setTextFormat</apiName><shortdesc conref="flash.text.TextField#setTextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flash.text:TextFormat"/></apiParam><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#setTextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:truncateToFit"><apiName>truncateToFit</apiName><shortdesc conref="mx.core.UITextField#truncateToFit()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>テキストの切り詰めが必要になった場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiReturn><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>切り詰めの後に追加されるテキストです。 <codeph>null</codeph> を渡すと、<codeph>"..."</codeph> のようなローカライズ可能なストリングが使用されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#truncateToFit()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IUITextField:mx.core:IUITextField:alwaysShowSelection:get"><apiName>alwaysShowSelection</apiName><shortdesc conref="flash.text.TextField#alwaysShowSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#alwaysShowSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:antiAliasType:get"><apiName>antiAliasType</apiName><shortdesc conref="flash.text.TextField#antiAliasType">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#antiAliasType">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:autoSize:get"><apiName>autoSize</apiName><shortdesc conref="flash.text.TextField#autoSize">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#autoSize">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:background:get"><apiName>background</apiName><shortdesc conref="flash.text.TextField#background">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#background">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc conref="flash.text.TextField#backgroundColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#backgroundColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:border:get"><apiName>border</apiName><shortdesc conref="flash.text.TextField#border">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#border">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:borderColor:get"><apiName>borderColor</apiName><shortdesc conref="flash.text.TextField#borderColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#borderColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:bottomScrollV:get"><apiName>bottomScrollV</apiName><shortdesc conref="flash.text.TextField#bottomScrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#bottomScrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:caretIndex:get"><apiName>caretIndex</apiName><shortdesc conref="flash.text.TextField#caretIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#caretIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc conref="flash.text.TextField#condenseWhite">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#condenseWhite">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:defaultTextFormat:get"><apiName>defaultTextFormat</apiName><shortdesc conref="flash.text.TextField#defaultTextFormat">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:TextFormat"/></apiValueDef><apiDesc conref="flash.text.TextField#defaultTextFormat">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:embedFonts:get"><apiName>embedFonts</apiName><shortdesc conref="flash.text.TextField#embedFonts">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#embedFonts">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:focusRect:get"><apiName>focusRect</apiName><shortdesc conref="flash.display.InteractiveObject#focusRect"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#focusRect"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:gridFitType:get"><apiName>gridFitType</apiName><shortdesc conref="flash.text.TextField#gridFitType">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#gridFitType">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:htmlText:get"><apiName>htmlText</apiName><shortdesc conref="flash.text.TextField#htmlText">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#htmlText">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:ignorePadding:get"><apiName>ignorePadding</apiName><shortdesc conref="mx.core.UITextField#ignorePadding">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UITextField#ignorePadding">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc conref="mx.core.UITextField#inheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UITextField#inheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:length:get"><apiName>length</apiName><shortdesc conref="flash.text.TextField#length">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#length">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxScrollH:get"><apiName>maxScrollH</apiName><shortdesc conref="flash.text.TextField#maxScrollH">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxScrollH">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxScrollV:get"><apiName>maxScrollV</apiName><shortdesc conref="flash.text.TextField#maxScrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxScrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:mouseWheelEnabled:get"><apiName>mouseWheelEnabled</apiName><shortdesc conref="flash.text.TextField#mouseWheelEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#mouseWheelEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:multiline:get"><apiName>multiline</apiName><shortdesc conref="flash.text.TextField#multiline">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#multiline">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UITextField#nestLevel">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UITextField#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc conref="mx.core.UITextField#nonInheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UITextField#nonInheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nonZeroTextHeight:get"><apiName>nonZeroTextHeight</apiName><shortdesc conref="mx.core.UITextField#nonZeroTextHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UITextField#nonZeroTextHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:numLines:get"><apiName>numLines</apiName><shortdesc conref="flash.text.TextField#numLines">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#numLines">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:scrollH:get"><apiName>scrollH</apiName><shortdesc conref="flash.text.TextField#scrollH">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#scrollH">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:scrollV:get"><apiName>scrollV</apiName><shortdesc conref="flash.text.TextField#scrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#scrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectable:get"><apiName>selectable</apiName><shortdesc conref="flash.text.TextField#selectable">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#selectable">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc conref="flash.text.TextField#selectionBeginIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#selectionBeginIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc conref="flash.text.TextField#selectionEndIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#selectionEndIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:sharpness:get"><apiName>sharpness</apiName><shortdesc conref="flash.text.TextField#sharpness">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#sharpness">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:styleSheet:get"><apiName>styleSheet</apiName><shortdesc conref="flash.text.TextField#styleSheet">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:StyleSheet"/></apiValueDef><apiDesc conref="flash.text.TextField#styleSheet">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:tabEnabled:get"><apiName>tabEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#tabEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:tabIndex:get"><apiName>tabIndex</apiName><shortdesc conref="flash.display.InteractiveObject#tabIndex"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabIndex"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:text:get"><apiName>text</apiName><shortdesc conref="flash.text.TextField#text">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#text">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textColor:get"><apiName>textColor</apiName><shortdesc conref="flash.text.TextField#textColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#textColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textHeight:get"><apiName>textHeight</apiName><shortdesc conref="flash.text.TextField#textHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#textHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textWidth:get"><apiName>textWidth</apiName><shortdesc conref="flash.text.TextField#textWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#textWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:thickness:get"><apiName>thickness</apiName><shortdesc conref="flash.text.TextField#thickness">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#thickness">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:type:get"><apiName>type</apiName><shortdesc conref="flash.text.TextField#type">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#type">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:useRichTextClipboard:get"><apiName>useRichTextClipboard</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:wordWrap:get"><apiName>wordWrap</apiName><shortdesc conref="flash.text.TextField#wordWrap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#wordWrap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UIComponentCachePolicy"><apiName>UIComponentCachePolicy</apiName><shortdesc>
  ContainerCreationPolicy クラスは、UIComponent クラスの cachePolicy プロパティの定数値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ContainerCreationPolicy クラスは、UIComponent クラスの <codeph>cachePolicy</codeph> プロパティの定数値を定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent/cachePolicy"><linktext>mx.core.UIComponent.cachePolicy</linktext></link></related-links><apiValue id="mx.core:UIComponentCachePolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
      Flex フレームワークが、ヒューリスティックを使用してオブジェクトをビットマップとしてキャッシュするかどうかを判断するように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Flex フレームワークが、ヒューリスティックを使用してオブジェクトをビットマップとしてキャッシュするかどうかを判断するように指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentCachePolicy:OFF"><apiName>OFF</apiName><shortdesc>
      Flex フレームワークがオブジェクトをビットマップとしてキャッシュしないように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Flex フレームワークがオブジェクトをビットマップとしてキャッシュしないように指定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentCachePolicy:ON"><apiName>ON</apiName><shortdesc>
      Flex フレームワークが常にオブジェクトをビットマップとしてキャッシュするように指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Flex フレームワークが常にオブジェクトをビットマップとしてキャッシュするように指定します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
  FlexSprite は Player の Sprite クラスのサブクラスで、UIComponent のスーパークラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Sprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexSprite は Player の Sprite クラスのサブクラスで、UIComponent のスーパークラスです。 <codeph>toString()</codeph> メソッドをオーバーライドして、アプリケーション内の DisplayObject の階層におけるオブジェクトの位置を示したストリングを返します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSprite:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
	 
	  <p><codeph>name</codeph> プロパティを、mx.utils.NameUtils クラスの <codeph>createUniqueName()</codeph> メソッドから返されたストリングに設定します。</p>
	 
	  <p>このストリングは、<codeph>"Button17"</codeph> のように、オブジェクトのクラス名と、アプリケーション内で一意の整数が連結された形になります。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSprite:toString"><apiName>toString</apiName><shortdesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject の階層におけるこのオブジェクトの位置を示したストリングです。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。 このストリングは、<codeph>"MyApp0.HBox5.Button17"</codeph> などの形式であり、mx.utils.NameUtils クラスの <codeph>displayObjectToString()</codeph> メソッドによって、このオブジェクトおよびその先祖の <codeph>name</codeph> プロパティから作成されます。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IConstraintClient"><apiName>IConstraintClient</apiName><shortdesc>
  IConstraintClient インターフェイスは、レイアウト制約をサポートするコンポーネント用のインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IConstraintClient インターフェイスは、レイアウト制約をサポートするコンポーネント用のインターフェイスを定義します。このインターフェイスは、制約ベースのレイアウトの実装でのみ使用されます。 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IConstraintClient:mx.core:IConstraintClient:getConstraintValue"><apiName>getConstraintValue</apiName><shortdesc>
      指定された制約値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>制約値です。制約値が定義されていない場合は null です。
     
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>制約値の名前です。 制約パラメーターには、"<codeph>baseline</codeph>"、"<codeph>bottom</codeph>"、"<codeph>horizontalCenter</codeph>"、"<codeph>left</codeph>"、"<codeph>right</codeph>"、"<codeph>top</codeph>" および "<codeph>verticalCenter</codeph>" があります。
     
      <p>これらのパラメーターの詳細については、Canvas コンテナ、Panel コンテナおよび Styles Metadata AnchorStyles を参照してください。</p>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された制約値を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.containers.xml#Canvas"><linktext>mx.containers.Canvas</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IConstraintClient:mx.core:IConstraintClient:setConstraintValue"><apiName>setConstraintValue</apiName><shortdesc>
      指定された制約値を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>制約値の名前です。 制約パラメーターには、"<codeph>baseline</codeph>"、"<codeph>bottom</codeph>"、"<codeph>horizontalCenter</codeph>"、"<codeph>left</codeph>"、"<codeph>right</codeph>"、"<codeph>top</codeph>" および "<codeph>verticalCenter</codeph>" があります。
     
      <p>これらのパラメーターの詳細については、Canvas コンテナ、Panel コンテナおよび Styles Metadata AnchorStyles を参照してください。</p>
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>制約の新しい値を表します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された制約値を設定します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.containers.xml#Canvas"><linktext>mx.containers.Canvas</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:ISelectableList"><apiName>ISelectableList</apiName><shortdesc>
  ISelectableList インターフェイスは、selectedIndex プロパティをサポートする IList エレメントがインプリメンターであることを表しています。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ISelectableList インターフェイスは、<codeph>selectedIndex</codeph> プロパティをサポートする IList エレメントがインプリメンターであることを表しています。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:ISelectableList_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  selectedIndex プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>selectedIndex</codeph> プロパティが変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:ISelectableList_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  selectedIndex プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>selectedIndex</codeph> プロパティが変更されたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiValue id="mx.core:ISelectableList:mx.core:ISelectableList:selectedIndex:set"><apiName>selectedIndex</apiName><shortdesc>
      選択されている IList アイテムのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      選択されている IList アイテムのインデックスです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContextualClassFactory"><apiName>ContextualClassFactory</apiName><shortdesc>
  クラスの作成先コンテキストのシステムマネージャーを提供するクラスファクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:ClassFactory</apiBaseClassifier></apiClassifierDef><apiDesc>
  クラスの作成先コンテキストのシステムマネージャーを提供するクラスファクトリです。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ContextualClassFactory:ContextualClassFactory"><apiName>ContextualClassFactory</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>このファクトリオブジェクトからオブジェクトを作成するために、<codeph>newInstance()</codeph> メソッドが使用するクラスです。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>オブジェクトの作成先コンテキストのシステムマネージャーです。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  コンストラクターです。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ContextualClassFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  properties に指定されたプロパティを使用して、generator クラスの新しいインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>作成された新しいインスタンスです。
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  <codeph>generator</codeph> クラスの新しいインスタンスを、<codeph>properties</codeph> に指定されたプロパティを使用して作成します。
	 
	  <p>このメソッドは、IFactory インターフェイスの <codeph>newInstance()</codeph> メソッドを実装します。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ContextualClassFactory:moduleFactory"><apiName>moduleFactory</apiName><shortdesc>
	  オブジェクトの作成先コンテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  オブジェクトの作成先コンテキストです。
	 
	  <p>このメソッドは、フレームワークが RSL としてロードされた（RSL が独自の SWF コンテキストを持つ）場合に、アプリケーション SWF の埋め込みフォントを使用して解決するために使用します。埋め込みフォントは、作成元の SWF ファイルのコンテキストからのみアクセスできます。 アプリケーション SWF の <codeph>systemManager</codeph> を使用すると、RSL は、アプリケーションの埋め込みフォントにアクセスできる、アプリケーション SWF のコンテキストでオブジェクトを作成できます。 <codeph>moduleFactory</codeph> は <codeph>create()</codeph> を呼び出して、<codeph>moduleFactory</codeph> のコンテキストでオブジェクトを作成します。</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IID"><apiName>IID</apiName><shortdesc>
  IID インターフェイスでは、識別子が必要なオブジェクトのインターフェイスが定義されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IID インターフェイスでは、識別子が必要なオブジェクトのインターフェイスが定義されます。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IID:mx.core:IID:id:get"><apiName>id</apiName><shortdesc>
      このオブジェクトの ID です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      このオブジェクトの ID です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:Container"><apiName>Container</apiName><shortdesc>
  Container クラスは、コンポーネントの抽象基本クラスであり、子コンポーネントのレイアウト特性を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのシンボルのカラーです。CheckBox のチェックマークや ScrollBar ボタンの矢印などがあります。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  コンテナの上境界線と、コンテンツ領域の上部との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  コンテナの下境界線と、コンテンツ領域の下部との間のピクセル数です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalScrollBarStyleName" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  垂直スクロールバーのスタイルの名前です。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalScrollBarStyleName" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  水平スクロールバーのスタイルの名前です。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントにフォーカスがある場合のフォーカスリングのカラーです。
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledOverlayAlpha" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  無効になったコンテナの上に配置されるオーバーレイのアルファ値です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのコンテンツ領域のカラーです。
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAttachment" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  背景イメージが指定されている場合、このスタイルによって、イメージがビューポートに対して固定（<codeph>"fixed"</codeph>）されているか、コンテンツと共にスクロールするか（<codeph>"scroll"</codeph>）を指定します。
 
  </description>
<default>"scroll"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
   
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:Container" playerVersion="Flash10" type="Class">
<description>
  IUITextField を実装するクラスです。このクラスはテキストをレンダリングするためにこのコンポーネントで使用されます。
 
  <p>mx.core.UITextField クラス（Flash Player に組み込まれている標準の TextField を使用する場合）または mx.core.UIFTETextField クラス（Text Layout Framework を使用して、双方向レイアウトなどの向上したテキストレンダリングを取得する場合）のいずれかに設定できます。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 有効な値は、<codeph>"left"</codeph>、<codeph>"right"</codeph> または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコンポーネントのデフォルト値は <codeph>"left"</codeph> です。 FormItem コンポーネントの場合、デフォルト値は <codeph>"right"</codeph> です。 Button、LinkButton および AccordionHeader コンポーネントでは、デフォルト値は <codeph>"center"</codeph> です。このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合のみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:Container" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストのロケールです。
 
  <p>FTE および TLF はこのロケールを使用して Unicode 文字をフォント字形にマッピングしたり、フォールバックフォントを検索したりします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:Container" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>）か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込みフォントに対してのみサポートされています。Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 有効な値は <codeph>normal</codeph> と <codeph>bold</codeph> です。 Button コントロールのデフォルト値は <codeph>bold</codeph> です。 他のすべてのコントロールのデフォルト値は <codeph>normal</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 有効な値は -200 ～ 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 有効な値は -400 ～ 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 有効な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>） および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 有効な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> であり、フォントについて高度なアンチエイリアスが有効になります。 <codeph>"normal"</codeph> に設定すると、高度なアンチエイリアスが無効になります。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:Container" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:Container" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストの方向です。
 
  <p>使用できる値は、ラテン文字などの左から右のテキスト用の <codeph>"ltr"</codeph> と、アラビア文字やヘブライ文字などの右から左のテキスト用の <codeph>"rtl"</codeph> です。</p>
 
  <p>FTE と TLF は双方向テキストレイアウトアルゴリズムでこの値を使用し、Unicode 文字の順序を字形の順序にマッピングします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  <p><codeph>direction</codeph> は、TLFTextField の境界内のテキストの整列にも影響します。ただし、コンポーネント内の TLFTextField の配置には影響しません。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:Container" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  コンポーネントの右境界線からコンテンツ領域の右端までのピクセル数です。
  <p>デフォルト値は 0 です。</p>
  <p/>
  <p>ComboBox コントロールのデフォルト値は 5 です。</p>
  <p>Form コンテナのデフォルト値は 16 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  コンポーネントの左境界線からコンテンツ領域の左端までのピクセル数です。
  <p>デフォルト値は 0 です。</p>
  <p/>
  <p>ComboBox コントロールのデフォルト値は 5 です。</p>
  <p>Form コンテナのデフォルト値は 16 です。</p>
  <p>Tree コントロールのデフォルト値は 2 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  コンポーネントの背景色です。 <codeph>backgroundColor</codeph> と <codeph>backgroundImage</codeph> の両方を設定できます。 一部のコンポーネントには背景色がありません。 DataGrid コントロールでは、このスタイル設定は無視されます。 デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。 このスタイルと <codeph>backgroundImage</codeph> スタイルの両方が <codeph>undefined</codeph> である場合、コンポーネントは透明な背景を持ちます。
 
  <p>Application コンテナの場合、このスタイルはアプリケーションのロード時の背景色と、アプリケーションの実行時の背景のグラデーションを指定します。 指定された色よりもわずかに濃い色とわずかに薄い色の間でグラデーションパターンが計算されます。</p>
 
  <p>ほとんどの Flex コントロールのデフォルトスキンは、部分的に透明です。この結果、コンテナの背景色が、そのコンテナの中のコントロールに部分的ににじみ出るように表示されます。 コントロールの <codeph>fillAlphas</codeph> プロパティのアルファ値を 1 に設定することで、これを避けることができます。次に例を示します。
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  <codeph>backgroundColor</codeph> プロパティで定義されている、<codeph>backgroundImage</codeph> スタイルで定義されているイメージまたは SWF ファイルの背景色のアルファレベルです。 有効な値の範囲は、0.0 ～ 1.0 です。ほとんどのコントロールではデフォルト値は 1.0 ですが、ToolTip コントロールの場合デフォルト値は 0.95 であり、Alert コントロールの場合デフォルト値は 0.9 です。
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Number">
<description>
  ドロップシャドウの幅です。このプロパティを負の値に設定すると、シャドウはコンポーネントの上に表示されます。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  ドロップシャドウの方向です。 有効な値は <codeph>"left"</codeph>、<codeph>"center"</codeph> および <codeph>"right"</codeph> です。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  ドロップシャドウの色です。
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  コンポーネントのドロップシャドウの表示または非表示を指定するブール型プロパティです。 デフォルト値は <codeph>false</codeph> です。
 
  <p><b>メモ：</b>ドロップシャドウをコンテナに表示するには、<codeph>contentBackgroundColor</codeph> プロパティを設定します。 設定しない場合、コンテナのデフォルトの背景は透明なので、シャドウはコンテナの背後に表示されます。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  コンポーネントのドロップシャドウの表示または非表示を指定するブール型プロパティです。 このスタイルは <codeph>borderStyle="solid"</codeph> と共に使用します。 デフォルト値は <codeph>false</codeph> です。
 
  <p><b>メモ：</b>ドロップシャドウをコンテナに表示するには、<codeph>backgroundColor</codeph> プロパティまたは <codeph>backgroundImage</codeph> プロパティを設定します。 設定しない場合、コンテナのデフォルトの背景は透明なので、シャドウはコンテナの背後に表示されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  コンポーネントの角に付いている丸みの半径です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  境界線の可視性です。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Number">
<description>
  境界ボックスの境界線の幅です。 <codeph>borderStyle</codeph> が <codeph>"solid"</codeph> に設定されている場合にのみ使用されます。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  境界ボックスのスタイルです。 有効な値は <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> および <codeph>"outset"</codeph> です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は、<codeph>"inset"</codeph> になります。 ほとんどの Container のデフォルト値は <codeph>"none"</codeph> です。halo テーマで使用できる値は <codeph>"inset"</codeph> と <codeph>"outset"</codeph> のみです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.core:Container" playerVersion="Flash9" type="Class">
<description>
  コンポーネントの境界線のスキンクラスです。 <codeph/><codeph/><codeph/><codeph/>コンポーネントのデフォルト値を確認するには、default.css ファイルを参照してください。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  境界ボックスの境界線のうち、どれが表示されるかを示します。表示する境界線をスペース区切りのストリングで指定します。 ストリングには、<codeph>"left"</codeph>、<codeph>"top"</codeph>、<codeph>"right"</codeph> および <codeph>"bottom"</codeph> を任意の順序で指定できます。 デフォルト値は <codeph>"left top right bottom"</codeph> です。この場合、4 辺すべてを表示します。 このスタイルは、borderStyle が <codeph>"solid"</codeph> の場合にのみ使用されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  境界線の色です。 <codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Number">
<description>
  境界線のアルファです。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  <codeph>backgroundImage</codeph> で指定されているイメージを、元のサイズとは異なるサイズに拡大および縮小します。 <codeph>"100%"</codeph> に設定すると、コンポーネント全体に収まるサイズにイメージを伸縮します。 パーセント値で指定する場合は、パーセント記号（%）付きで指定する必要があります。 Application コンテナのデフォルトは <codeph>100%</codeph> です。 他のすべてのコンテナのデフォルト値は <codeph>auto</codeph> で、イメージの元のサイズが維持されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Object">
<description>
  コンポーネントの背景イメージです。 これには、絶対 URL、相対 URL、絶対クラス、または相対クラスを指定できます。 <codeph>backgroundColor</codeph> または <codeph>backgroundImage</codeph> のいずれかを設定できます。背景色の前面に背景イメージを表示します。 デフォルト値は <codeph>undefined</codeph> で、「未定義」であることを意味します。 このスタイルと <codeph>backgroundColor</codeph> スタイルの両方が undefined である場合、コンポーネントは透明な背景を持ちます。
 
  <p>ほとんどの Flex コントロールのデフォルトスキンは、部分的に透明です。 この結果、コンテナの背景イメージが、そのコンテナの中のコントロールに部分的ににじみ出るように表示されます。 コントロールの <codeph>fillAlphas</codeph> プロパティのアルファ値を 1 に設定することで、これを避けることができます。次に例を示します。
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  コンポーネントが無効になっている場合のコンポーネント背景色です。 グローバルデフォルト値は <codeph>undefined</codeph> です。 List コントロールのデフォルト値は、<codeph>0xDDDDDD</codeph>（明るい灰色）です。 コンテナが無効になっている場合は、背景がグレー表示されます。このグレー表示の度合いは、<codeph>disabledOverlayAlpha</codeph> スタイルで制御します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  ProgressBar の色を特定します。ProgressBar は、この色とそれを基に計算されるより明るい色の垂直方向のグラデーションで塗りつぶされます。このスタイルは、他のコンポーネントに対して無効ですが、コンテナに対して設定することで、コンテナ内部にあるすべてのプログレスバーの外観を制御できます。 デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。 この場合は、代わりに <codeph>themeColor</codeph> スタイルプロパティが使用されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  Flex Framework containers inherit the following attributes from the Container
  class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    <strong>Properties</strong>
    autoLayout="true|false"
    clipContent="true|false"
    creationIndex="undefined"
    creationPolicy="auto|all|queued|none"
    defaultButton="<i>No default</i>"
    horizontalLineScrollSize="5"
    horizontalPageScrollSize="0"
    horizontalScrollBar="null"
    horizontalScrollPolicy="auto|on|off"
    horizontalScrollPosition="0"
    icon="undefined"
    label=""
    verticalLineScrollSize="5"
    verticalPageScrollSize="0"
    verticalScrollBar="null"
    verticalScrollPolicy="auto|on|off"
    verticalScrollPosition="0"
 
    <strong>Styles</strong>
    backgroundAlpha="1.0"
    backgroundAttachment="scroll"
    backgroundColor="undefined"
    backgroundDisabledColor="undefined"
    backgroundImage="undefined"
    backgroundSize="auto" 
    <i>    For the Application container only,</i> backgroundSize="100%"
    barColor="undefined"
    borderColor="0xAAB3B3"
    borderSides="left top right bottom"
    borderSkin="mx.skins.halo.HaloBorder"
    borderStyle="inset"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    disbledOverlayAlpha="undefined"
    dropShadowColor="0x000000"
    dropShadowEnabled="false"
    fontAntiAliasType="advanced"
    fontfamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0""
    fontSize="10"
    fontStyle="normal"
    fontThickness="0"
    fontWeight="normal"
    horizontalScrollBarStyleName="undefined"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    shadowDirection="center"
    shadowDistance="2"
    textAlign="left"
    textDecoration="none|underline"
    textIndent="0"
    verticalScrollBarStyleName="undefined"
 
    <strong>Events</strong>
    childAdd="<i>No default</i>"
    childIndexChange="<i>No default</i>"
    childRemove="<i>No default</i>"
    dataChange="<i>No default</i>"
    scroll="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:<i>tagname</i>&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IContainer</apiBaseInterface><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IRawChildrenContainer</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Container クラスは、コンポーネントの抽象基本クラスであり、子コンポーネントのレイアウト特性を制御します。 アプリケーションでは、Container のインスタンスを作成しません。代わりに、Container のいずれかのサブクラス（Canvas や HBox など）のインスタンスを作成します。
 
  <p>Container クラスには、スクロール、切り取り、およびダイナミックなインスタンス化のためのロジックが含まれています。また、子コンテナを追加および削除するためのメソッドが含まれています。 <codeph>getChildAt()</codeph> メソッド、およびコンテナの背景と境界線を描画するためのロジックも含まれています。</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:Container_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  ユーザーが手動でコンテナをスクロールしたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  ユーザーが手動でコンテナをスクロールしたときに送出されます。
 
  <p>このイベントは、マウス（スクロールバーの下向きボタンをクリックしたときなど）またはキーボード（下矢印キーを押したときなど）を使用してスクロール位置が変更されたときに送出されます。 ただし、このイベントは、スクロール位置がプログラムによって変更された場合は送出されません（<codeph>horizontalScrollPosition</codeph> プロパティ値を設定した場合など）。 <codeph>viewChanged</codeph> イベントは、手動によるかプログラムによるかを問わず、スクロール位置が変更されるたびに発行されます。</p>
 
  <p>このイベントが送出された時点では、スクロールバーは新しい位置に更新されていますが、コンテナの子オブジェクトは新しいスクロール位置を反映するようにシフトしていません。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  data プロパティが変更されたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  <codeph>data</codeph> プロパティが変更されたときに送出されます。
 
  <p>コンテナが List または他のコンポーネントでレンダラーとして使用されている場合、表示するデータをコンテナに渡すために <codeph>data</codeph> プロパティが使用されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.ChildExistenceChangedEvent.CHILD_REMOVE_childRemove"><apiName>childRemove</apiName><shortdesc>
  コンテナの子が削除される前に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_REMOVE</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテナの子が削除される前に送出されます。
 
  <p>このイベントは、<codeph>removeChild()</codeph>、<codeph>removeChildAt()</codeph> または <codeph>removeAllChildren()</codeph> メソッドが呼び出されたときに送出されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE_childIndexChange"><apiName>childIndexChange</apiName><shortdesc>
  コンテナのいずれかの子のインデックスが変更された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテナのいずれかの子のインデックスが変更された後に送出されます。 このイベントは、<codeph>setChildIndex()</codeph> メソッドへの引数として指定された子についてのみ送出されます。<codeph>setChildIndex()</codeph> メソッドの呼び出しによる副次的な作用としてインデックスが変更されたそれ以外の子については送出されません。
 
  <p>子のインデックスは、<codeph>setChildIndex()</codeph> メソッドが呼び出されたときに変更されます。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.ChildExistenceChangedEvent.CHILD_ADD_childAdd"><apiName>childAdd</apiName><shortdesc>
  コンテナに子が追加された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_ADD</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテナに子が追加された後に送出されます。
 
  <p>childAdd イベントは、<codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> メソッドが呼び出されたときに送出されます。 コンテナが最初に作成されたとき、MXML ファイルで宣言されているそれぞれの子コンポーネントについて、<codeph>addChild()</codeph> メソッドが自動的に呼び出されます。 <codeph>addChildAt()</codeph> メソッドは、Repeater オブジェクトが子オブジェクトを追加または削除したときに自動的に呼び出されます。 アプリケーション開発者が、これらのメソッドを手動で呼び出して新しい子を追加することもできます。</p>
 
  <p>このイベントが送信された時点では、子オブジェクトは初期化されていますが、その幅と高さはまだ計算されておらず、子は画面に描画されていません。 子が完全に初期化されてレンダリングされたときに通知を受けるには、子の <codeph>creationComplete</codeph> イベントのリスナーとして登録します。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Container:Container"><apiName>Container</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Container:addChild"><apiName>addChild</apiName><shortdesc>
      このコンテナに子 DisplayObject を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして追加された子です。通常は戻り値を UIComponent、または追加されるコンポーネントの型にキャストします。
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>このコンテナの子として追加する DisplayObject です。IUIComponent インターフェイスを実装する必要があります。
     
      </apiDesc></apiParam><apiTipTexts><apiTipText>このコンテナに子オブジェクトを追加します。
      
      </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
      このコンテナに子 DisplayObject を追加します。子は、他の既存の子の後に追加されるため、追加される最初の子のインデックスは 0、次の子のインデックスは 1 になります。
     
      <p><b>メモ：</b>メソッドに対する <codeph>child</codeph> パラメーターは DisplayObject 型として指定されますが、このパラメーターがコンテナの子として追加されるためには、IUIComponent インターフェイスを実装する必要があります。 Flex コンポーネントはすべてこのインターフェイスを実装しています。</p>
     
      <p>子は、背面から前面に重ねられます。つまり、子が重なった場合、インデックス 0 の子が最も奥に、インデックス <codeph>numChildren - 1</codeph> の子が最前面に置かれます。このように、新しく追加される子は既存の子の上に重ねられます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#IUIComponent"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:addChildAt"><apiName>addChildAt</apiName><shortdesc>
      このコンテナに子 DisplayObject を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして追加された子です。通常は戻り値を UIComponent、または追加されるコンポーネントの型にキャストします。
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>このコンテナの子として追加する DisplayObject です。IUIComponent インターフェイスを実装する必要があります。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>子を追加するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンテナに子 DisplayObject を追加します。子は、指定されたインデックス位置に追加されます。
     
      <p><b>メモ：</b>メソッドに対する <codeph>child</codeph> パラメーターは DisplayObject 型として指定されますが、このパラメーターがコンテナの子として追加されるためには、IUIComponent インターフェイスを実装する必要があります。 Flex コンポーネントはすべてこのインターフェイスを実装しています。</p>
     
      <p>子は、背面から前面に重ねられます。つまり、子が重なった場合、インデックス 0 の子が最も奥に、インデックス <codeph>numChildren - 1</codeph> の子が最前面に置かれます。このように、新しく追加される子は既存の子の上に重ねられます。</p>
     
      <p>他の子によってすでに占有されているインデックスに新しい子を追加する場合、古い子は置き換えられません。古い子とそれ以降のすべての子がスライドし、それぞれのインデックスが 1 ずつ増やされます。例えば、コンテナに子 (A, B, C) があり、D をインデックス 1 に追加するとします。この場合、コンテナの中は (A, D, B, C) になります。古い子を置き換えたい場合は、その子を削除した後に新しい子を追加する必要があります。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#IUIComponent"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:addElement"><apiName>addElement</apiName><shortdesc>
      
      ビジュアルエレメントをこのコンテナに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>追加されたエレメントです。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>このコンテナの子として追加するビジュアルエレメントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      ビジュアルエレメントをこのコンテナに追加します。エレメントは、他のすべてのエレメントを追加した後で、それらの上に追加されます。特定のインデックス位置にビジュアルエレメントを追加する場合は、<codeph>addElementAt()</codeph> メソッドを使用します。
     
      <p>既に異なるコンテナを親に持つビジュアルエレメントを追加する場合は、もう一方のコンテナからそのエレメントが削除されます。</p>  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      
      ビジュアルエレメントをこのコンテナに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>追加されたエレメントです。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>このビジュアルコンテナの子として追加するエレメントです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>エレメントを追加するインデックス位置です。既にオブジェクトが置かれているインデックス位置を指定すると、その位置にある子とその上に位置するすべての子が、子リスト内で 1 つ上の位置に移動します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      ビジュアルエレメントをこのコンテナに追加します。エレメントは、指定されたインデックス位置に追加されます。インデックス 0 は表示リストの最初のエレメントを表します。
     
      <p>既に異なるコンテナを親に持つビジュアルエレメントを追加する場合は、もう一方のコンテナからそのエレメントが削除されます。</p>  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
      Dissolve エフェクトでコンテナのクロムにオーバーレイを追加するときに内部的に使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Dissolve エフェクトでコンテナのクロムにオーバーレイを追加するときに内部的に使用されます。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc conref="mx.core.UIComponent#contentToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/><apiDesc>ステージからの相対座標を持つ Point オブジェクトです。
     
      </apiDesc></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>コンテンツ座標系における <i>x</i> 座標および <i>y</i> 座標をプロパティとして指定する Point オブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:contentToLocal"><apiName>contentToLocal</apiName><shortdesc conref="mx.core.UIComponent#contentToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/><apiDesc>Point は、ローカル座標系を基準とした座標を持つ Point オブジェクトです。
     
      </apiDesc></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>コンテンツ座標系における <i>x</i> 座標および <i>y</i> 座標をプロパティとして指定する Point オブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      コンテナの境界線のスキンが存在しない場合、必要に応じてスキンを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンテナの境界線のスキンが存在しない場合、必要に応じてスキンを作成します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:createComponentFromDescriptor"><apiName>createComponentFromDescriptor</apiName><shortdesc>
      単一の UIComponentDescriptor を指定すると、対応するコンポーネントが作成され、このコンテナの子としてコンポーネントが追加されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>descriptor</apiItemName><apiOperationClassifier>mx.core:ComponentDescriptor</apiOperationClassifier><apiDesc>作成されるコンポーネントの UIComponentDescriptor です。この引数は、UIComponentDescriptor オブジェクトか、コンテナの子のインデックスである 0 ～ n-1 の整数（n はこのコンテナの子の総数）です。
     
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc><codeph>false</codeph> の場合、このコンポーネントは作成されますが、子は作成されません。 <codeph>true</codeph> の場合、Flex はコンポーネントを作成した後、<codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出し、コンポーネントの <codeph>creationPolicy</codeph> プロパティ値に基づいて、すべての子または一部の子を作成します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      単一の UIComponentDescriptor を指定すると、対応するコンポーネントが作成され、このコンテナの子としてコンポーネントが追加されます。
      
      <p>このメソッドにより、新しいオブジェクトがインスタンス化されますが、表示リストには追加されないため、デフォルトではそのオブジェクトは画面に表示されません。新しいオブジェクトを表示リストに追加するには、次の例のように、コンテナの <codeph>validateNow()</codeph> メソッドの呼び出しを、<codeph>createComponentFromDescriptor()</codeph> メソッドの呼び出しの後に行います。
      <pre>
      myVBox.createComponentFromDescriptor(myVBox.childDescriptors[0],false);
      myVBox.validateNow();
      </pre>
      </p>
      
      <p>別の方法として、そのコンテナで <codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出してすべてのコンポーネントを一度に作成することもできます。この場合は、<codeph>validateNow()</codeph> メソッドの呼び出しを、<codeph>createComponentsFromDescriptors()</codeph> メソッドの呼び出しの後に行う必要はありません。</p>
      
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:createComponentsFromDescriptors"><apiName>createComponentsFromDescriptors</apiName><shortdesc>
      childDescriptors の配列を繰り返し処理し、配列の各要素に対して createComponentFromDescriptor() メソッドを呼び出します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc><codeph>true</codeph> の場合、再帰的にコンポーネントを作成します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>childDescriptors</codeph> の配列を繰り返し処理し、配列の各要素に対して <codeph>createComponentFromDescriptor()</codeph> メソッドを呼び出します。
      
      <p>コンテナの <codeph>creationPolicy</codeph> プロパティの値が <codeph>ContainerCreationPolicy.ALL</codeph> の場合、このメソッドは初期化シーケンスの間に自動的に呼び出されます。</p>
      
      <p>コンテナの <codeph>creationPolicy</codeph> の値が <codeph>ContainerCreationPolicy.AUTO</codeph> の場合、このメソッドは、コンテナの子が表示されるときに自動的に呼び出されます。</p>
      
      <p>コンテナの <codeph>creationPolicy</codeph> プロパティの値が <codeph>ContainerCreationPolicy.NONE</codeph> の場合、このコンテナの子を作成するときにこの関数を呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      遅延インスタンス化をサポートする IDeferredContentOwner インターフェイスが実装されたコンテナに対し、createComponentsFromDescriptors(true) メソッドを呼び出すのと同等のアクションを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      遅延インスタンス化をサポートする IDeferredContentOwner インターフェイスが実装されたコンテナに対し、<codeph>createComponentsFromDescriptors(true)</codeph> メソッドを呼び出すのと同等のアクションを実行します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>createComponentsFromDescriptors()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:executeBindings"><apiName>executeBindings</apiName><shortdesc>
      このコンテナのすべてのデータバインディングを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>false</codeph> の場合は、このコンテナのバインディングのみ実行されます。<codeph>true</codeph> の場合は、このコンテナの子、孫、ひ孫などについてもバイディングが実行されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンテナのすべてのデータバインディングを実行します。Flex は、Container が作成されたらこのメソッドを自動的に呼び出し、その中にバインド先のあるデータバインディングをすべて実行します。MXML コンテナとバインディングの問題（177074）を回避するには、BindingManager.executeBindings() の呼び出しで、parentDocument ではなく descriptor.document を優先するように、Container.executeBindings() をオーバーライドします。こうすると、記述子によって作成されたインスタンスは常に正常に動作し、手続き上作成されたインスタンスも元の動作になるはずです。 ただし、後者の場合は、バグが発生することがあります。 アップデータ 1 では、非 DI およびリペアレントコンポーネントのシナリオでの正常な動作を保証する、より完成度の高い解決策の提供を予定しています。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
      この Container の子 UIComponent オブジェクトへのバインディングを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc><codeph>false</codeph> の場合、この Container の直下の子についてのみバインディングが実行されます。 <codeph>true</codeph> の場合は、このコンテナの孫、ひ孫などについてもバイディングが実行されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この Container の子 UIComponent オブジェクトへのバインディングを実行します。 このメソッドは、Container が作成されたときに自動的に呼び出されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildAt"><apiName>getChildAt</apiName><shortdesc>
      n 番目の子コンポーネントオブジェクトを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとしての子への参照です。通常は戻り値を UIComponent、または ComboBox や TextArea などの特定の Flex コントロールの型にキャストします。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>0 ～ (numChildren - 1) までの数値です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <i>n</i> 番目の子コンポーネントオブジェクトを取得します。
     
      <p>このメソッドから返される子には、MXML で宣言された子、および <codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> メソッドを使用して追加された子が含まれます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildByName"><apiName>getChildByName</apiName><shortdesc>
      指定したストリングの name プロパティを持つ子を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして子を表す DisplayObject です。通常は戻り値を UIComponent、または ComboBox や TextArea などの特定の Flex コントロールの型にキャストします。指定した名前の子が存在しない場合は、ランタイムエラーがスローされます。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>子の識別子です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定したストリングの <codeph>name</codeph> プロパティを持つ子を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
      特定の子の 0 から始まるインデックスを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>0 ～ (numChildren - 1) の間の数値です。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>インデックスを取得する子への参照です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      特定の子の 0 から始まるインデックスを取得します。
     
      <p>コンテナの最初の子（つまり、MXML 宣言で最初に現れる子タグ）のインデックスは 0、2 番目の子のインデックスは 1 になり、以降も同様に続きます。コンテナの子のインデックスにより、レイアウトされる順番が決まります。例えば、VBox ではインデックス 0 の子が一番上に、インデックス 1 の子がその下にレイアウトされます。</p>
     
      <p><codeph>addChild()</codeph> メソッドを呼び出すことによって子を追加すると、新しい子のインデックスは、既存の子の中で最大のインデックスに 1 を足した値に等しくなります。 <codeph>addChildAt()</codeph> メソッドを使用して、指定したインデックス位置に子を挿入できます。その場合、そのインデックス以降の位置にあった子はインデックスが 1 ずつ増やされ、すべてのインデックスが 0 ～ <codeph>(numChildren - 1)</codeph> の範囲に収まります。</p>
     
      <p><codeph>removeChild()</codeph> または <codeph>removeChildAt()</codeph> メソッドを呼び出して子を削除すると、残りの子のインデックスが 0 ～ <codeph>(numChildren - 1)</codeph> までになるように調整されます。</p>
     
      <p><codeph>myView.getChildIndex(myChild)</codeph> が 5 を返した場合、<codeph>myView.getChildAt(5)</codeph> は myChild を返します。</p>
     
      <p>子のインデックスは、<codeph>setChildIndex()</codeph> メソッドを呼び出すことによって変更できます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildren"><apiName>getChildren</apiName><shortdesc>
      コンテナのコンテンツである子で構成された DisplayObject オブジェクトの配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンテナのコンテンツである子で構成された DisplayObject オブジェクトの配列です。
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      コンテナのコンテンツである子で構成された DisplayObject オブジェクトの配列を返します。この配列には、コンテナの境界線や背景イメージなど、コンテナの表示エレメントを実装する DisplayObject は<b>含まれません</b>。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#Container/rawChildren"><linktext>rawChildren</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      
      指定されたインデックス位置にあるビジュアルエレメントを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたインデックス位置にあるエレメントです。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>取得するエレメントのインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定されたインデックス位置にあるビジュアルエレメントを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      
      ビジュアルエレメントのインデックス位置を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>コンテナ内でのエレメントのインデックス位置です。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>ビジュアルエレメントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      ビジュアルエレメントのインデックス位置を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:globalToContent"><apiName>globalToContent</apiName><shortdesc conref="mx.core.UIComponent#globalToContent()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/><apiDesc>Point は、コンポーネントを基準とした座標を持つ Point オブジェクトです。
     
      </apiDesc></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>グローバル（ステージ）座標系における <i>x</i> 座標および <i>y</i> 座標をプロパティとして指定する Point オブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#globalToContent()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      サイズ変更に応答して、このコンテナの境界線の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サイズ変更に応答して、このコンテナの境界線の位置およびサイズを設定します。これは、Container のサブクラスを作成するときにオーバーライド可能な高度なメソッドです。
     
      <p>Flex が <codeph>layoutChrome()</codeph> メソッドを呼び出すのは、<codeph>addChild()</codeph> メソッドでコンテナが親コンテナに追加されたとき、およびコンテナの <codeph>invalidateDisplayList()</codeph> メソッドが呼び出されたときです。</p>
     
      <p><codeph>Container.layoutChrome()</codeph> メソッドは <codeph>autoLayout</codeph> プロパティの値に関係なく呼び出されます。</p>
     
      <p><codeph>Container.layoutChrome()</codeph> メソッドは、Container コンテナの境界線の位置とサイズを設定します。Container のすべてのサブクラスでは、境界線の位置を適切に設定するために、サブクラスの <codeph>layoutChrome()</codeph> メソッドで <codeph>super.layoutChrome()</codeph> メソッドを呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:localToContent"><apiName>localToContent</apiName><shortdesc conref="mx.core.UIComponent#localToContent()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/><apiDesc>Point は、コンテンツ座標系を基準とした座標を持つ Point オブジェクトです。
     
      </apiDesc></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>ローカル座標系における <i>x</i> 座標および <i>y</i> 座標をプロパティとして指定する Point オブジェクトです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#localToContent()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
      このコンテナの子リストからすべての子を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンテナの子リストからすべての子を削除します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      
      コンテナからすべてのビジュアルエレメントを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      コンテナからすべてのビジュアルエレメントを削除します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeChild"><apiName>removeChild</apiName><shortdesc>
      このコンテナの子リストから子 DisplayObject を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして削除された子です。通常は戻り値を UIComponent、または削除されるコンポーネントの型にキャストします。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>削除する DisplayObject です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンテナの子リストから子 DisplayObject を削除します。削除された子の <codeph>parent</codeph> プロパティは null に設定されます。削除された子は、明示的に破棄されない限り存在し続けます。その子を別のコンテナに追加した場合、その最後の状態が保持されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
      このコンテナの子リストから、指定されたインデックス位置にある子 DisplayObject を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject 型のオブジェクトとして削除された子です。通常は戻り値を UIComponent、または削除されるコンポーネントの型にキャストします。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>削除するDisplayObject の子インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンテナの子リストから、指定されたインデックス位置にある子 DisplayObject を削除します。削除された子の <codeph>parent</codeph> プロパティは null に設定されます。削除された子は、明示的に破棄されない限り存在し続けます。その子を別のコンテナに追加した場合、その最後の状態が保持されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeElement"><apiName>removeElement</apiName><shortdesc>
      
      このコンテナの子リストから、指定されたビジュアルエレメントを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>削除されたエレメントです。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>コンテナから削除されるエレメントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      このコンテナの子リストから、指定されたビジュアルエレメントを削除します。このビジュアルコンテナのエレメントより上位にあるエレメントのインデックス位置は 1 つ減少します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      
      コンテナ内の指定されたインデックス位置からビジュアルエレメントを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>削除されたエレメントです。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>削除するエレメントのインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      コンテナ内の指定されたインデックス位置からビジュアルエレメントを削除します。このビジュアルコンテナのエレメントより上位にあるエレメントのインデックス位置は 1 つ減少します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:scrollChildren"><apiName>scrollChildren</apiName><shortdesc>
      horizontalScrollPosition プロパティと verticalScrollPosition プロパティの値に基づいて、表示可能領域を基準とするコンテナのコンテンツ領域の相対的な位置を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      horizontalScrollPosition プロパティと verticalScrollPosition プロパティの値に基づいて、表示可能領域を基準とするコンテナのコンテンツ領域の相対的な位置を設定します。表示可能領域に表示されないコンテンツは切り詰められます。このメソッドは、スクロール可能なクロムをコンテンツ領域内に持つサブクラスでオーバーライドしてください。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
      特定の子のインデックスを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>インデックスを設定する子への参照です。
     
      </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>新規インデックスを示す数値です。0 ～ (numChildren - 1) の整数であることが必要です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      特定の子のインデックスを設定します。子のインデックスの詳細については、<codeph>getChildIndex()</codeph> メソッドを参照してください。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      
      ビジュアルコンテナ内の既存のビジュアルエレメントの位置を変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>インデックス番号を変更するエレメントです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>エレメントの結果のインデックス番号です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      ビジュアルコンテナ内の既存のビジュアルエレメントの位置を変更します。
     
      <p><codeph>setElementIndex()</codeph> メソッドを呼び出して、既に占有されているインデックス位置を指定した場合は、エレメントの前の位置と新しい位置の間にある位置だけが変化します。その他は変化しません。</p>
     
      <p>現在のインデックスよりも小さいインデックスにビジュアルエレメントを移動すると、その間のすべてのエレメントのインデックスが 1 増加します。現在のインデックスよりも大きいインデックスにエレメントを移動すると、その間のすべてのエレメントのインデックスが 1 減少します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:swapElements"><apiName>swapElements</apiName><shortdesc>
      
      指定された 2 つのビジュアルエレメントのインデックスを入れ替えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>最初のビジュアルエレメントです。
     
      </apiDesc></apiParam><apiParam><apiItemName>element2</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>2 番目のビジュアルエレメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定された 2 つのビジュアルエレメントのインデックスを入れ替えます。他のすべてのエレメントは同じインデックス位置に残されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      
      コンテナ内の指定された 2 つのインデックス位置にあるビジュアルエレメントを入れ替えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/><apiDesc>最初のエレメントのインデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/><apiDesc>2 番目のエレメントのインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      コンテナ内の指定された 2 つのインデックス位置にあるビジュアルエレメントを入れ替えます。他のすべてのビジュアルエレメントは同じインデックス位置に残されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      サイズ変更に反応して、このコンテナの子の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位によりコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サイズ変更に反応して、このコンテナの子の位置およびサイズを設定します。
     
      <p><codeph>UIComponent.updateDisplayList()</codeph> メソッドを参照して、<codeph>updateDisplayList()</codeph> メソッドの詳細を確認してください。</p>
     
      <p><codeph>Container.updateDisplayList()</codeph> メソッドは、Container コンテナの境界線の位置とサイズを設定します。境界線の位置が適切に決定されるためには、Container のすべてのサブクラスで、そのサブクラスの <codeph>updateDisplayList()</codeph> メソッドが <codeph>super.updateDisplayList()</codeph> メソッドを呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links></apiOperation><apiValue id="mx.core:Container:protected:actualCreationPolicy"><apiName>actualCreationPolicy</apiName><shortdesc>
      このコンテナの作成ポリシーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      このコンテナの作成ポリシーです。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      true の場合、子の位置またはサイズが変更されたときに測定とレイアウトが実行されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、子の位置またはサイズが変更されたときに測定とレイアウトが実行されます。 <codeph>false</codeph> の場合、測定とレイアウトは、子がコンテナに追加されたとき、またはコンテナから削除されたときに、一度だけ実行されます。
     
      <p>Move エフェクトを使用する場合、移動するコンポーネントの周囲のレイアウトは、Move エフェクトがアニメーション化するものに収まるように再調整されません。 コンテナの <codeph>autoLayout</codeph> プロパティを <codeph>true</codeph> に設定しても、この動作には影響しません。</p>
     
      <p><codeph>autoLayout</codeph> プロパティが <codeph>false</codeph> の場合、Zoom エフェクトは有効になりません。</p>
     
      <p><codeph>autoLayout</codeph> プロパティは、Accordion または ViewStack コンテナには適用されません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      left、top、right、bottom の 4 つのプロパティを持つ EdgeMetrics オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つ EdgeMetrics オブジェクトを返します。 各プロパティの値は、境界線の 1 辺の太さをピクセル単位で表したものです。
     
      <p><codeph/></p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:childDescriptors:get"><apiName>childDescriptors</apiName><shortdesc>
      MXML コンパイラーによって生成される UIComponentDescriptor オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      MXML コンパイラーによって生成される UIComponentDescriptor オブジェクトの配列です。
     
      <p>各 UIComponentDescriptor オブジェクトには、コンテナの MXML タグの、子 MXML タグの 1 つで指定される情報が含まれます。配列内での UIComponentDescriptor オブジェクトの順序は、子タグの順序と同一です。初期化時には、子の記述子を使用して、コンテナの子 UIComponent オブジェクトとその Repeater オブジェクトが作成され、これらに MXML で指定された初期プロパティ値やイベントハンドラー、エフェクトなどが設定されます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:clipContent:get"><apiName>clipContent</apiName><shortdesc>
      このコンテナの子の位置やサイズが、このコンテナの境界線を超えるように変更された場合に、クリップマスクを適用するかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナの子の位置やサイズが、このコンテナの境界線を超えるように変更された場合に、クリップマスクを適用するかどうかを指定します。 <codeph>false</codeph> の場合、このコンテナの子は、移動やサイズ変更によってこのコンテナの外部に出た場合も、表示されたままになります。 <codeph>true</codeph> の場合、このコンテナの子は切り詰められます。
     
      <p><codeph>clipContent</codeph> が <codeph>false</codeph> の場合、このコンテナのスクロールが無効になり、スクロールバーが表示されません。 <codeph>clipContent</codeph> が true の場合、コンテナの子がコンテナの外部に拡張されると、通常はスクロールバーが表示されます。 スクロールバーの表示の制御については、<codeph>horizontalScrollPolicy</codeph> および <codeph>verticalScrollPolicy</codeph> を参照してください。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc conref="mx.core.UIComponent#contentMouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc conref="mx.core.UIComponent#contentMouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc>
      コンテナは、内部コンテンツペインを使用してスクロールを制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンテナは、内部コンテンツペインを使用してスクロールを制御します。 コンテナでコンテンツペインを作成している間は <codeph>creatingContentPane</codeph> が <codeph>true</codeph> になるため、いくつかのイベントを無視またはブロックできます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creationIndex:get"><apiName>creationIndex</apiName><shortdesc>
      コンテナの子をインスタンス化して描画する順序を指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンテナの子をインスタンス化して描画する順序を指定します。
     
      <p>このプロパティは、<codeph>creationPolicy</codeph> プロパティが <codeph>ContainerCreationPolicy.QUEUED</codeph> に設定されている場合にのみ有効です。 それ以外の場合は無視されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      このコンテナの子作成ポリシーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      このコンテナの子作成ポリシーです。 有効な ActionScript 値は <codeph>ContainerCreationPolicy.AUTO</codeph>、<codeph>ContainerCreationPolicy.ALL</codeph>、<codeph>ContainerCreationPolicy.NONE</codeph> または <codeph>ContainerCreationPolicy.QUEUED</codeph> です。 有効な MXML 値は、<codeph>"auto"</codeph>、<codeph>"all"</codeph>、<codeph>"none"</codeph> または <codeph>"queued"</codeph> です。
     
      <p>コンテナに <codeph>creationPolicy</codeph> が指定されていない場合、そのコンテナは親の <codeph>creationPolicy</codeph> を継承します。 Application に <codeph>creationPolicy</codeph> が指定されていない場合、デフォルトは <codeph>ContainerCreationPolicy.AUTO</codeph> になります。</p>
     
      <p><codeph>creationPolicy</codeph> が <codeph>ContainerCreationPolicy.AUTO</codeph> の場合、必要になるまでコンテナの一部またはすべての子孫の作成が遅延されます（<i>遅延インスタンス化</i>）。 このポリシーを使用した場合、最初に作成される UIComponent が少なくなるため、起動時間が最短になります。 ただし、ユーザーがアプリケーションの別の部分に初めて移動するとき、ナビゲーションの遅延が生じます。 Accordion、TabNavigator、ViewStack などのナビゲーターコンテナは、すべての子を直ちに作成することによって <codeph>ContainerCreationPolicy.AUTO</codeph> ポリシーを実装しますが、ある子がそのナビゲーターコンテナの選択された子になるまでは、その子の子孫を作成しません。</p>
     
      <p><codeph>creationPolicy</codeph> が <codeph>ContainerCreationPolicy.ALL</codeph> である場合、ナビゲーターコンテナは、子が選択されるまで待たずに各子の子孫を直ちに作成します。 VBox コンテナなどの単一ビューコンテナについては、<codeph>ContainerCreationPolicy.AUTO</codeph> ポリシーと <codeph>ContainerCreationPolicy.ALL</codeph> ポリシーに違いはありません。</p>
     
      <p><codeph>creationPolicy</codeph> が <codeph>ContainerCreationPolicy.QUEUED</codeph> である場合、コンテナが直ちにインスタンス化および描画されず、作成キューに追加されます。 アプリケーションがキューに格納されたコンテナを処理すると、そのコンテナの子が作成されます。アプリケーションは、これらの子が作成されるまで、作成キュー内の次のコンテナに進みません。</p>
     
      <p><codeph>creationPolicy</codeph> が <codeph>ContainerCreationPolicy.NONE</codeph> である場合、コンテナは子を作成しません。 この場合は、MXML 作成者が、<codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出すことによって子を作成します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:data:get"><apiName>data</apiName><shortdesc>
      アイテムレンダラーまたはアイテムエディターで data プロパティを使用すると、コンポーネントに値を渡すことができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      アイテムレンダラーまたはアイテムエディターで <codeph>data</codeph> プロパティを使用すると、コンポーネントに値を渡すことができます。 通常、データバインディングを使用して、<codeph>data</codeph> プロパティのフィールドをこのコンポーネントのプロパティにバインドします。
     
      <p>MXML でこのプロパティを設定することはありません。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      コンテナのデフォルトボタンとして指定された Button コントロールです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンテナのデフォルトボタンとして指定された Button コントロールです。 コンテナ内のコントロールにフォーカスがあるときは、Enter キーを押すことと、この Button コントロールをクリックすることが同義です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      processedDescriptors に相当する IDeferredContentOwner のプロパティ
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      processedDescriptors に相当する IDeferredContentOwner のプロパティ
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/processedDescriptors"><linktext>UIComponent.processedDescriptors</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:horizontalLineScrollSize:get"><apiName>horizontalLineScrollSize</apiName><shortdesc>
      水平スクロールバーの左矢印ボタンまたは右矢印ボタンがクリックされたときに移動するピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平スクロールバーの左矢印ボタンまたは右矢印ボタンがクリックされたときに移動するピクセル数です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalPageScrollSize:get"><apiName>horizontalPageScrollSize</apiName><shortdesc>
      水平スクロールバーのトラックがクリックされたときに移動するピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平スクロールバーのトラックがクリックされたときに移動するピクセル数です。 値が 0 の場合は、全画面表示にするためのページサイズが計算されることを意味します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollBar:get"><apiName>horizontalScrollBar</apiName><shortdesc>
      このコンテナで使用する水平スクロールバーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      このコンテナで使用する水平スクロールバーです。現在表示されている水平スクロールバーがない場合、このプロパティは null です。一般に、このプロパティに直接アクセスすることはありません。 <codeph>horizontalScrollPolicy</codeph> および <codeph>horizontalScrollPosition</codeph> プロパティを操作することで、このスクロールバーを適切に制御できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      水平スクロールバーが常に表示されるか、常に非表示か、または必要に応じて自動的に追加されるかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平スクロールバーが常に表示されるか、常に非表示か、または必要に応じて自動的に追加されるかを指定します。 有効な ActionScript 値は、<codeph>ScrollPolicy.ON</codeph>、<codeph>ScrollPolicy.OFF</codeph> および <codeph>ScrollPolicy.AUTO</codeph> です。 有効な MXML 値は、<codeph>"on"</codeph>、<codeph>"off"</codeph> および <codeph>"auto"</codeph> です。
     
      <p>このプロパティを <codeph>ScrollPolicy.OFF</codeph> に設定した場合も、<codeph>horizontalScrollPosition</codeph> プロパティが無効になります。</p>
     
      <p>メモ：このプロパティは ControlBar コンテナには適用されません。</p>
     
      <p><codeph>horizontalScrollPolicy</codeph> が <codeph>ScrollPolicy.AUTO</codeph> の場合、水平スクロールバーは、次のすべての条件が満たされるときに表示されます。</p>
      <ul>
        <li>コンテナの子の 1 つが、コンテナの左端または右端の外にはみ出している。</li>
        <li><codeph>clipContent</codeph> プロパティが <codeph>true</codeph> である。</li>
        <li>コンテナには、スクロールバーを表示するのに十分な幅および高さがある。</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      水平スクロールバーの現在の位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平スクロールバーの現在の位置です。 これは、スクロールバーサーフェスの左端から、現在表示されているサーフェスの左端部分までの距離（ピクセル単位）と同じです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:icon:get"><apiName>icon</apiName><shortdesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるアイコンのクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるアイコンのクラスです。
     
      <p>例えば、この Container が TabNavigator の子である場合、対応するタブにこのアイコンが表示されます。この Container が Accordion の子である場合、対応するヘッダーにこのアイコンが表示されます。</p>
     
      <p>SWF ファイルにアイコンを埋め込むには、次の @Embed() MXML コンパイラーディレクティブを使用します。</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>イメージには JPEG、GIF、PNG、SVG、または SWF ファイルを使用できます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:label:get"><apiName>label</apiName><shortdesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンテナを表すために、一部のナビゲーターコンテナによって表示されるテキストです。
     
      <p>例えば、この Container が TabNavigator の子である場合、対応するタブにこのストリングが表示されます。この Container が Accordion の子である場合、対応するヘッダーにこのストリングが表示されます。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      horizontalScrollPosition プロパティの有効な最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      <codeph>horizontalScrollPosition</codeph> プロパティの有効な最大値です。 水平スクロールバーが存在しない場合、デフォルトは 0 です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
      verticalScrollPosition プロパティの有効な最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      <codeph>verticalScrollPosition</codeph> プロパティの有効な最大値です。 垂直スクロールバーが存在しない場合、デフォルトは 0 です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:numChildren:get"><apiName>numChildren</apiName><shortdesc>
      このコンテナの子コンポーネントの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      このコンテナの子コンポーネントの数です。
     
      <p>子の数は、最初は MXML で宣言された子の数に等しくなります。 実行時には、<codeph>addChild()</codeph> または <codeph>addChildAt()</codeph> の呼び出しによって新しい子が追加されたり、<codeph>removeChild()</codeph>、<codeph>removeChildAt()</codeph> または <codeph>removeAllChildren()</codeph> の呼び出しによって既存の子が削除される可能性があります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:numElements:get"><apiName>numElements</apiName><shortdesc>
      
      このコンテナ内のビジュアルエレメントの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      このコンテナ内のビジュアルエレメントの数です。ビジュアルエレメントには、UIComponent や GraphicElement のサブクラスなど、IVisualElement インターフェイスを実装したクラスが含まれます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
      通常、コンテナには、Container.getChildAt() メソッドおよび Container.numChildren プロパティを使用して列挙できる子コンポーネントが含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      通常、コンテナには、<codeph>Container.getChildAt()</codeph> メソッドおよび <codeph>Container.numChildren</codeph> プロパティを使用して列挙できる子コンポーネントが含まれます。 さらに、コンテナには、境界線や背景などのスタイルエレメントおよびスキンが入ることがあります。 Flash Player と AIR では、描画される子コンポーネントとスキンに違いはありません。 子コンポーネントとスキンはすべて、Player の <codeph>getChildAt()</codeph> メソッドおよび <codeph>numChildren</codeph> プロパティを使用してアクセスできます。 ただし、Container クラスは <codeph>getChildAt()</codeph> メソッドおよび <codeph>numChildren</codeph> プロパティ（およびその他のいくつかのメソッド）をオーバーライドして、コンテナの子が唯一の子コンポーネントと見なされるような効果を作成します。
     
      <p>コンテナのすべての子（コンテンツである子とスキンの両方）にアクセスする必要がある場合は、通常の Container のメソッドの代わりに、<codeph>rawChildren</codeph> プロパティのメソッドとプロパティを使用します。 例えば、<codeph>Container.rawChildren.getChildAt())</codeph> メソッドを使用します。 ただし、コンテナが子の ContentPane Sprite オブジェクトを作成する場合、<codeph>rawChildren</codeph> プロパティ値は ContentPane だけをカウントし、コンテナの子はカウントしません。 コンテナがいつ ContentPane を持つのかを判断することが常に可能であるとは限りません。</p>
     
      <p><b>メモ：</b> <codeph>addChild</codeph> メソッドまたは <codeph>addChildAt</codeph> メソッドを <codeph>rawChildren</codeph> オブジェクトに対して呼び出す場合は、追加したコンポーネントで <codeph>tabFocusEnabled = false</codeph> を設定してください。 そうすると、ユーザーは追加された表示専用コンポーネントをタブで選択できなくなります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalLineScrollSize:get"><apiName>verticalLineScrollSize</apiName><shortdesc>
      垂直スクロールバーの上矢印ボタンまたは下矢印ボタンがクリックされるか、マウスホイールが使用されたときにスクロールするピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直スクロールバーの上矢印ボタンまたは下矢印ボタンがクリックされるか、マウスホイールが使用されたときにスクロールするピクセル数です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalPageScrollSize:get"><apiName>verticalPageScrollSize</apiName><shortdesc>
      垂直スクロールバーのトラックがクリックされたときにスクロールするピクセル数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直スクロールバーのトラックがクリックされたときにスクロールするピクセル数です。 値が 0 の場合は、全画面表示にするためのページサイズが計算されることを意味します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollBar:get"><apiName>verticalScrollBar</apiName><shortdesc>
      このコンテナで使用する垂直スクロールバーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      このコンテナで使用する垂直スクロールバーです。現在表示されている垂直スクロールバーがない場合、このプロパティは null です。一般に、このプロパティに直接アクセスすることはありません。 <codeph>verticalScrollPolicy</codeph> および <codeph>verticalScrollPosition</codeph> プロパティを操作することで、このスクロールバーを適切に制御できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      垂直スクロールバーが常に表示されるか、常に非表示か、または必要に応じて自動的に追加されるかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直スクロールバーが常に表示されるか、常に非表示か、または必要に応じて自動的に追加されるかを指定します。 有効な値は <codeph>ScrollPolicy.ON</codeph>、<codeph>ScrollPolicy.OFF</codeph> および <codeph>ScrollPolicy.AUTO</codeph> です。 有効な MXML 値は、<codeph>"on"</codeph>、<codeph>"off"</codeph> および <codeph>"auto"</codeph> です。
     
      <p>このプロパティを <codeph>ScrollPolicy.OFF</codeph> に設定すると、<codeph>verticalScrollPosition</codeph> プロパティが無効になります。</p>
     
      <p>メモ：このプロパティは ControlBar コンテナには適用されません。</p>
     
      <p><codeph>verticalScrollPolicy</codeph> が <codeph>ScrollPolicy.AUTO</codeph> の場合、垂直スクロールバーは、次のすべての条件が満たされるときに表示されます。</p>
      <ul>
        <li>コンテナの子の 1 つが、コンテナの上端または下端の外にはみ出している。</li>
        <li><codeph>clipContent</codeph> プロパティが <codeph>true</codeph> である。</li>
        <li>コンテナには、スクロールバーを表示するのに十分な幅および高さがある。</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      垂直スクロールバーの現在の位置です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直スクロールバーの現在の位置です。 これは、スクロールバーサーフェスの上端から、現在表示されているサーフェスの上端部分までの距離（ピクセル単位）と同じです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
      left、top、right および bottom の 4 つのプロパティを持つオブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つオブジェクトを返します。 各プロパティの値は、コンテナの端の周囲にあるクロム（ビジュアルエレメント）の幅と等しくなります。 
     
      <p>クロムには境界線の幅が含まれます。 <codeph>horizontalScrollPolicy</codeph> または <codeph>verticalScrollPolicy</codeph> プロパティ値が <codeph>ScrollPolicy.ON</codeph> の場合、クロムには対応するスクロールバーの幅も含まれます。 スクロールポリシーが <codeph>ScrollPolicy.AUTO</codeph> の場合は、スクロールバーが表示されていても、クロムの測定にスクロールバーの幅は含まれません。</p>
     
      <p>Container のサブクラスでは、Container の子の位置を決める際に他のクロムが考慮されるように、このメソッドをオーバーライドしてください。 例えば、Panel クラスの <codeph>viewMetrics</codeph> プロパティは、Panel コンテナのタイトルバーの幅を <codeph>top</codeph> プロパティで示しているオブジェクトを返す必要があります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:viewMetricsAndPadding:get"><apiName>viewMetricsAndPadding</apiName><shortdesc>
      left、top、right および bottom の 4 つのプロパティを持つオブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つオブジェクトを返します。 各プロパティの値は、コンテナの端の周囲にあるクロム（ビジュアルエレメント）の幅にオブジェクトの余白の幅を加えた値と等しくなります。
     
      <p>クロムには境界線の幅が含まれます。 <codeph>horizontalScrollPolicy</codeph> または <codeph>verticalScrollPolicy</codeph> プロパティ値が <codeph>ScrollPolicy.ON</codeph> の場合、クロムには対応するスクロールバーの幅も含まれます。 スクロールポリシーが <codeph>ScrollPolicy.AUTO</codeph> の場合は、スクロールバーが表示されていても、クロムの測定にスクロールバーの幅は含まれません。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IProgrammaticSkin"><apiName>IProgrammaticSkin</apiName><shortdesc>
  IProgrammaticSkin インターフェイスは、スキンクラスがスキンインターフェイスの name プロパティを使用する場合に実装する必要があるインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IProgrammaticSkin インターフェイスは、スキンクラスがスキンインターフェイスの <codeph>name</codeph> プロパティを使用する場合に実装する必要があるインターフェイスを定義します。 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IProgrammaticSkin:mx.core:IProgrammaticSkin:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc conref="mx.skins.ProgrammaticSkin#validateDisplayList()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.ProgrammaticSkin#validateDisplayList()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IProgrammaticSkin:mx.core:IProgrammaticSkin:validateNow"><apiName>validateNow</apiName><shortdesc conref="mx.skins.ProgrammaticSkin#validateNow()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.ProgrammaticSkin#validateNow()">
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
  ByteArrayAsset は、Flex アプリケーションに埋め込まれたバイトデータの任意のシーケンスを表す flash.utils.ByteArray クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.utils:ByteArray</apiBaseClassifier></apiClassifierDef><apiDesc>
  ByteArrayAsset は、Flex アプリケーションに埋め込まれたバイトデータの任意のシーケンスを表す flash.utils.ByteArray クラスのサブクラスです。
 
  <p>埋め込むバイトデータは任意の種類のファイルに格納されたものでよく、必ずファイル全体が埋め込まれます。SWF ファイル全体を埋め込むことはできますが、SWF ファイル内の特定のアセットのバイトを埋め込むことはできません。</p>
 
  <p>MXML コンパイラーは、埋め込まれたデータを表すように ByteArrayAsset を拡張するクラスを自動生成します。</p>
 
  <p>任意のファイルを埋め込むには、Class 型の変数を宣言し、この変数の前に <codeph>[Embed]</codeph> メタデータ（MIME タイプ <codeph>application/octet-stream</codeph> を使用）を挿入します。 例えば、次のようにしてテキストファイルを埋め込みます。</p>
 
  <pre>
  [Bindable]
  [Embed(source="Story.txt", mimeType="application/octet-stream")]
  private var storyClass:Class;
  </pre>
 
  <p>コンパイラーは ByteArrayAsset クラスのサブクラスを自動生成し、この自動生成されたクラスへの参照を変数に設定します。 これにより、このクラス参照を使用して、<codeph>new</codeph> 演算子で ByteArrayAsset のインスタンスを作成できるようになります。また、ByteArray クラスのメソッドを使用して、バイト配列から情報を抽出することもできます。</p>
 
  <pre>
  var storyByteArray:ByteArrayAsset = ByteArrayAsset(new storyClass());
  var story:String = storyByteArray.readUTFBytes(storyByteArray.length);
  </pre>
 
  <p>埋め込みに使用する MIME タイプは <codeph>application/octet-stream</codeph> として指定する必要があります。これにより、バイトデータは、解釈されずにそのまま埋め込まれます。 また、自動生成されたクラスが、別のアセットクラスではなく、ByteArrayAsset を拡張するようになります。</p>
 
  <p>例えば、この MIME タイプを指定しないで PNG ファイルを埋め込んだ場合、PNG データが Player で使用されるビットマップ形式に自動的にトランスコードされ、これを表すために BitmapAsset のサブクラスが自動生成されます。 しかし、MIME タイプを <codeph>application/octet-stream</codeph> として指定した場合、トランスコードは行われず、PNG データはそのまま埋め込まれ、自動生成されたクラスは ByteArrayAsset を拡張します。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ByteArrayAsset:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:UIComponentDescriptor"><apiName>UIComponentDescriptor</apiName><shortdesc>
  UIComponentDescriptor インスタンスは、ビジュアルコンポーネントのインスタンスの MXML タグに指定された情報をカプセル化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:ComponentDescriptor</apiBaseClassifier></apiClassifierDef><apiDesc>
  UIComponentDescriptor インスタンスは、ビジュアルコンポーネントのインスタンスの MXML タグに指定された情報をカプセル化します。
 
  <p>MXML ファイル内のほとんどのタグは、UIComponent オブジェクトのツリーを記述するものです。 例えば、<codeph>&lt;mx:Application></codeph> タグは UIComponent オブジェクトを表し、その子コンテナとコントロールもすべて UIComponent オブジェクトです。</p>
 
  <p>MXML コンパイラーは、それぞれの MXML タグを UIComponentDescriptor インスタンスにコンパイルします。 厳密には、MXML コンパイラーは ActionScript データ構造を自動生成します。これは、UIComponentDescriptor オブジェクトのツリーになります。</p>
 
  <p>実行時に、Container クラスの <codeph>createComponentsFromDescriptors()</codeph> メソッドは、コンテナの <codeph>childDescriptors</codeph> 配列の UIComponentDescriptor オブジェクト内の情報を使用して、コンテナの子である実際の UIComponent オブジェクト、およびその子孫を作成します。 コンテナの <codeph>creationPolicy</codeph> プロパティの値によっては、アプリケーションの起動時にコンポーネントの一部が表示されるとき、またはアプリケーションの開発者が手動で <codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出したときに、子孫が作成されることがあります。</p>
 
  <p>通常、UIComponentDescriptor インスタンスを自分で作成することはありません。Container クラスの <codeph>childDescriptors</codeph> 配列を経由して、MXML コンパイラーが自動生成したインスタンスにアクセスできます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container/childDescriptors"><linktext>mx.core.Container.childDescriptors</linktext></link><link href="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link><link href="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>mx.core.Container.createComponentsFromDescriptors()</linktext></link></related-links><apiConstructor id="mx.core:UIComponentDescriptor:UIComponentDescriptor"><apiName>UIComponentDescriptor</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>descriptorProperties</apiItemName><apiType value="Object"/><apiDesc>UIComponentDescriptor オブジェクトのプロパティ（<codeph>type</codeph>、<codeph>id</codeph>、<codeph>propertiesFactory</codeph>、<codeph>events</codeph>、<codeph>stylesFactory</codeph>、<codeph>effects</codeph> など）の名前と値のペアを含むオブジェクトです。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:UIComponentDescriptor:effects"><apiName>effects</apiName><shortdesc>
      MXML に指定された、コンポーネントのエフェクトを含む配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      MXML に指定された、コンポーネントのエフェクトを含む配列です。
     
      <p>例えば、次のようなコードを作成するとします。</p>
	 
      <pre>
	  &lt;mx:TextInput showEffect="Fade" hideEffect="Fade"/></pre>
	 
      <p>記述子の <codeph>effects</codeph> プロパティは配列 <codeph>[ "showEffect", "hideEffect" ]</codeph> です。</p>
     
      <p>コンポーネントに MXML エフェクトが指定されていない場合、<codeph>effects</codeph> プロパティは <codeph>null</codeph> になります。</p>
	 
	  <p>このプロパティにはエフェクト属性の値は指定されていません。 エフェクトはスタイルのように扱われるため、<codeph>stylesFactory</codeph> プロパティに含まれます。 <codeph>effect</codeph> 配列は、<codeph>stylesFactory</codeph> のどのスタイルが実際にエフェクトになるのかを追跡するだけです。</p>
	 
      <p>Container の <codeph>createComponentsFromDescriptors()</codeph> メソッドは、このプロパティを使用して EffectManager にエフェクトを登録します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentDescriptor:stylesFactory"><apiName>stylesFactory</apiName><shortdesc>
      MXML に指定された、コンポーネントのインスタンススタイルの名前と値のペアを含むオブジェクトを作成する関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      MXML に指定された、コンポーネントのインスタンススタイルの名前と値のペアを含むオブジェクトを作成する関数です。
	 
	  <p>例えば、次のようなコードを作成するとします。</p>
	 
      <pre>
	  &lt;mx:TextInput borderColor="0x888888" color="0xDDDDDD"/></pre>
	 
	  <p>この場合、記述子の <codeph>stylesFactory</codeph> プロパティは次の関数です。</p>
	 
      <pre>
	  function():void { this.borderColor = 0x888888; this.color = 0xDDDDDD };</pre>
	 
      <p>コンポーネントインスタンスに MXML スタイルが指定されていない場合、<codeph>stylesFactory</codeph> プロパティは <codeph>null</codeph> になります。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
  FlexLoader は Player の Loader クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Loader</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexLoader は Player の Loader クラスのサブクラスです。<codeph>toString()</codeph> メソッドをオーバーライドして、アプリケーション内の DisplayObject の階層におけるオブジェクトの位置を示したストリングを返します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexLoader:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      <p><codeph>name</codeph> プロパティを、mx.utils.NameUtils クラスの <codeph>createUniqueName()</codeph> メソッドから返されたストリングに設定します。</p>
      <p>このストリングは、<codeph>"FlexLoader13"</codeph> のように、オブジェクトのクラスと、アプリケーション内で一意の整数が連結された名前になります。</p>
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/createUniqueName()"><linktext>mx.utils.NameUtils.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexLoader:toString"><apiName>toString</apiName><shortdesc>
      アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject の階層におけるこのオブジェクトの位置を示したストリングです。 
     
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。 このストリングは、<codeph>"MyApp0.HBox5.FlexLoader13"</codeph> のように、mx.utils.NameUtils クラスの <codeph>displayObjectToString()</codeph> メソッドによって、このオブジェクトおよびその先祖の <codeph>name</codeph> プロパティから作成されます。
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/displayObjectToString()"><linktext>mx.utils.NameUtils.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IUID"><apiName>IUID</apiName><shortdesc>
  IUID インターフェイスは、オブジェクトを一意に識別する一意識別子（UID）を持つオブジェクトに対するインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IUID インターフェイスは、オブジェクトを一意に識別する一意識別子（UID）を持つオブジェクトに対するインターフェイスを定義します。ほとんどの場合、Flex で使用される UID は全体的に一意である必要はありません。例外はデータサービスによって送信されるメッセージの場合です。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IUID:mx.core:IUID:uid:get"><apiName>uid</apiName><shortdesc>
	  このオブジェクトの一意の ID です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  このオブジェクトの一意の ID です。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexShape"><apiName>FlexShape</apiName><shortdesc>
  FlexShape は Player の Shape クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Shape</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexShape は Player の Shape クラスのサブクラスです。 <codeph>toString()</codeph> メソッドをオーバーライドして、アプリケーション内の DisplayObject の階層におけるオブジェクトの位置を示したストリングを返します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexShape:FlexShape"><apiName>FlexShape</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
	 
	  <p><codeph>name</codeph> プロパティに、mx.utils.NameUtils クラスの <codeph>createUniqueName()</codeph> メソッドから返されたストリングを設定します。</p>
	 
	  <p>このストリングは、<codeph>"FlexShape15"</codeph> のように、オブジェクトのクラスと、アプリケーション内で一意の整数が連結された名前です。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexShape:toString"><apiName>toString</apiName><shortdesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject の階層におけるこのオブジェクトの位置を示したストリングです。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。 このストリングは、<codeph>"MyApp0.HBox5.FlexShape15"</codeph> のように、mx.utils.NameUtils クラスの <codeph>displayObjectToString()</codeph> メソッドによって、このオブジェクトおよびその先祖の <codeph>name</codeph> プロパティから作成されます。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:INavigatorContent"><apiName>INavigatorContent</apiName><shortdesc>
  INavigatorContent インターフェイスは、コンテナをナビゲーターコンテナの子として使用するために実装する必要があるインターフェイスを定義します。ナビゲーターコンテナには、ViewStack、TabNavigator、Accordion などがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  INavigatorContent インターフェイスは、コンテナをナビゲーターコンテナの子として使用するために実装する必要があるインターフェイスを定義します。ナビゲーターコンテナには、ViewStack、TabNavigator、Accordion などがあります。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Accordion"><linktext>mx.containers.Accordion</linktext></link><link href="mx.containers.xml#TabNavigator"><linktext>mx.containers.TabNavigator</linktext></link><link href="mx.containers.xml#ViewStack"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiValue id="mx.core:INavigatorContent:mx.core:INavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      ナビゲーターコンテナによって表示されるこのコンテナ用のアイコンです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      ナビゲーターコンテナによって表示されるこのコンテナ用のアイコンです。アイコンは Accordion コンテナのボタン領域と TabNavigator コンテナのタブ領域に表示されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:INavigatorContent:mx.core:INavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      ナビゲーターコンテナによって表示されるこのコンテナ用のテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      ナビゲーターコンテナによって表示されるこのコンテナ用のテキストです。例えば、Accordion コンテナのボタン領域と TabNavigator コンテナのタブ領域に表示されるテキストです。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FontAsset"><apiName>FontAsset</apiName><shortdesc>
  FontAsset は、Flex アプリケーションに埋め込まれたフォントを表す flash.text.Font クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.text:Font</apiBaseClassifier></apiClassifierDef><apiDesc>
  FontAsset は、Flex アプリケーションに埋め込まれたフォントを表す flash.text.Font クラスのサブクラスです。
 
  <p>TrueType (TTF) または OpenType (OTF) いずれかのフォントを埋め込むことができます。システムフォントまたは Flash によって作成された SWF ファイルのフォントを埋め込むこともできます。いずれの場合も、MXML コンパイラーは、埋め込まれたフォントを表すように FontAsset を拡張するクラスを自動生成します。</p>
 
  <p>通常、Flex アプリケーションを作成するときに FontAsset クラスは直接使用しません。 例えば、MXML コンパイラーによって FontAsset のサブクラスが作成されることを理解していなくても、<codeph>font-face</codeph> CSS セレクターを使用してフォントを埋め込むことができます。</p>
 
  <p>ただし、ActionScript レベルで何が行われているのかを理解しておくことは有益です。 フォントを ActionScript に埋め込むには、Class 型の変数を宣言し、この変数の前に <codeph>[Embed]</codeph> メタデータを挿入します。 例えば、次のようにして TTF ファイルを埋め込みます。</p>
 
  <pre>
  [Embed(source="Fancy.ttf", fontName="Fancy")] 
  var fancyClass:Class;
  </pre>
 
  <p>MXML コンパイラーは、TTF データを Player が使用するフォント形式にトランスコードし、FontAsset クラスのサブクラスを自動生成して、この自動生成されたクラスへの参照を変数に設定します。 これにより、このクラス参照を使用して、<codeph>new</codeph> 演算子で FontAsset のインスタンスを作成できるようになります。また、作成したインスタンスで、例えば Font クラスの API を使用できます。</p>
 
  <pre>
  var fancyFont:FontAsset = FontAsset(new fancyClass());
  var hasDigits:Boolean = fancyFont.hasGlyphs("0123456789");
  </pre>
 
  <p>ただし、フォントを参照する場合は、使用する <codeph>fontName</codeph> を <codeph>[Embed]</codeph> メタデータ内に指定するため、FontAsset インスタンスを自分で作成する必要はほとんどありません。例えば、<codeph>fontFamily</codeph> CSS スタイルにフォント名を設定し（この例では、<codeph>"Fancy"</codeph>）、<codeph>fancyFont</codeph> などの FontAsset インスタンスや <codeph>fancyClass</codeph> クラス参照は設定しません。 次に実際の使用例を示します。</p>
 
  <pre>
  &lt;mx:Label text="Thank you for your order." fontFamily="Fancy"/>
  </pre>
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.Font.xml"><linktext>flash.text.Font</linktext></link></related-links><apiConstructor id="mx.core:FontAsset:FontAsset"><apiName>FontAsset</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
  Container クラスと ScrollControlBase クラスの horizontalScrollPolicy および verticalScrollPolicy プロパティの値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Container クラスと ScrollControlBase クラスの <codeph>horizontalScrollPolicy</codeph> および <codeph>verticalScrollPolicy</codeph> プロパティの値です。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="mx.core.xml#ScrollControlBase"><linktext>mx.core.ScrollControlBase</linktext></link></related-links><apiValue id="mx.core:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
	  子がオーナーのサイズを超えた場合にスクロールバーを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  子がオーナーのサイズを超えた場合にスクロールバーを表示します。オーナーのサイズは、表示されるスクロールバーに応じて調整されることはありません。このため、スクロールバーによってコントロールやコンテナの内容が覆い隠されることがあります。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc>
	  スクロールバーを表示しません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  スクロールバーを表示しません。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc>
	  常にスクロールバーを表示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  常にスクロールバーを表示します。明示的にサイズが指定されていない場合は、オーナーの内容のサイズにスクロールバーのサイズが自動的に加算され、オーナーのサイズが判断されます。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IStateClient"><apiName>IStateClient</apiName><shortdesc>
  IStateClient インターフェイスは、ビューステートをサポートするためにコンポーネントに実装する必要のあるインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IStateClient インターフェイスは、ビューステートをサポートするためにコンポーネントに実装する必要のあるインターフェイスを定義します。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IStateClient:mx.core:IStateClient:currentState:get"><apiName>currentState</apiName><shortdesc>
      現在のビューステートです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      現在のビューステートです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IVisualElement"><apiName>IVisualElement</apiName><shortdesc>
  IVisualElement インターフェイスは、Spark コンテナにレイアウトして表示するビジュアルエレメントに必要な最低限のプロパティとメソッドを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ILayoutElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IVisualElement インターフェイスは、Spark コンテナにレイアウトして表示するビジュアルエレメントに必要な最低限のプロパティとメソッドを定義します。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:depth:get"><apiName>depth</apiName><shortdesc>
      コンテナ内のアイテムのレンダリング順序を決定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
           </apiDefaultValue></apiValueDef><apiDesc>
      コンテナ内のアイテムのレンダリング順序を決定します。Spark コンテナ内のアイテムのレンダリング順序は、<codeph>depth</codeph> プロパティに基づいて決定されます。値が最も低い depth のアイテムは背景に配置され、高くなるほど前面に配置されます。奥行き値が同じアイテムは、コンテナに追加された順に表示されます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:designLayer:get"><apiName>designLayer</apiName><shortdesc>
      このビジュアルエレメントに関連付けるオプションの DesignLayer インスタンスを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このビジュアルエレメントに関連付けるオプションの DesignLayer インスタンスを指定します。  
           <p>DesignLayer が割り当てられたビジュアルエレメントは、関連の DisplayObject（ある場合）に自身の有効な可視性またはアルファを最終的にコミットする際、親レイヤーの可視性とアルファを考慮する必要があります。</p>
           <p>ビジュアルエレメントは、関連付けられている親レイヤーからの <codeph>layerPropertyChange</codeph> 通知をリッスンする必要があります。レイヤーの <codeph>effectiveAlpha</codeph> または <codeph>effectiveVisibility</codeph> が変更された場合、エレメントは自身の有効な可視性（アルファ）を計算して、適宜適用する必要があります。</p>
           <p>このプロパティは MXML 内に直接設定することはできません。</p>
      
      <p><codeph>designLayer</codeph> プロパティは z 順序のコントロールには使用できません。<codeph>depth</codeph> を参照してください。</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IVisualElement/depth"><linktext>depth</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:is3D:get"><apiName>is3D</apiName><shortdesc>
      エレメントが 3D の場合は True です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      エレメントが 3D の場合は True です。
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IVisualElement/postLayoutTransformOffsets"><linktext>postLayoutTransformOffsets</linktext></link><link href="mx.core.xml#ILayoutElement/hasLayoutMatrix3D"><linktext>mx.core.ILayoutElement.hasLayoutMatrix3D</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:owner:get"><apiName>owner</apiName><shortdesc>
      この IVisualElement オブジェクトのオーナーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      この IVisualElement オブジェクトのオーナーです。デフォルトは、この IVisualElement オブジェクトの親です。ただし、この IVisualElement オブジェクトが、ComboBox コントロールのドロップダウンリストのように、親によってポップアップされた子コンポーネントである場合は、この IVisualElement オブジェクトをポップアップしたコンポーネントがオーナーになります。
           <p>このプロパティは、Flex ではなく、各コンポーネントによって管理されます。 したがって、<codeph>PopUpManger.createPopUp()</codeph> メソッドまたは <codeph>PopUpManger.addPopUp()</codeph> メソッドを使用して子コンポーネントをポップアップする場合、子コンポーネントの <codeph>owner</codeph> プロパティは、それをポップアップしたコンポーネントに設定する必要があります。</p>
           <p>デフォルト値は、<codeph>parent</codeph> プロパティの値です。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:parent:get"><apiName>parent</apiName><shortdesc>
      このコンポーネントの親コンテナまたは親コンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      このコンポーネントの親コンテナまたは親コンポーネントです。<codeph>parent</codeph> プロパティを持つのはビジュアルエレメントのみです。ビジュアル以外のアイテムは、別のプロパティを使用して、所属するオブジェクトを参照します。慣例により、ビジュアル以外のオブジェクトは、<codeph>owner</codeph> プロパティを使用して、所属するオブジェクトを参照します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:postLayoutTransformOffsets:get"><apiName>postLayoutTransformOffsets</apiName><shortdesc>
      親のレイアウトに影響を与えない方法で、オブジェクトの変換に適用できる一連の調整を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.geom:TransformOffsets</apiValueClassifier></apiValueDef><apiDesc>
      親のレイアウトに影響を与えない方法で、オブジェクトの変換に適用できる一連の調整を定義します。例えば、90°回転するオブジェクトに合わせてレイアウトを調整する場合は、オブジェクトの <codeph>rotation</codeph> プロパティを設定します。回転するオブジェクトに合わせてレイアウトを調整 <i>しない</i> 場合は、<codeph>postLayoutTransformOffsets.rotationZ</codeph> プロパティを設定します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:visible:get"><apiName>visible</apiName><shortdesc>
      このビジュアルエレメントの可視性を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      このビジュアルエレメントの可視性を制御します。<codeph>true</codeph> の場合、オブジェクトは可視です。
     
      <p>オブジェクトが非表示でも <codeph>includeInLayout</codeph> プロパティが <codeph>true</codeph> に設定されている場合、オブジェクトは非表示ですがコンテナ内のスペースを占めます。</p>
     
      <p><codeph>visible</codeph> が <codeph>true</codeph> に設定されている場合、コンテナクリッピングが有効であるかどうかに関係なく、サイズが原因でオブジェクトが表示されないことがあります。</p>
     
      <p><codeph>visible</codeph> を <codeph>false</codeph> に設定すると、コンポーネントはフォーカスを取得できなくなります。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ILayoutElement/includeInLayout"><linktext>ILayoutElement.includeInLayout</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
  FlexSimpleButton は Player の SimpleButton クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:SimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexSimpleButton は Player の SimpleButton クラスのサブクラスです。 <codeph>toString()</codeph> メソッドをオーバーライドして、アプリケーション内の DisplayObject の階層におけるオブジェクトの位置を示したストリングを返します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSimpleButton:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
	 
	  <p><codeph>name</codeph> プロパティを、mx.utils.NameUtils クラスの <codeph>createUniqueName()</codeph> メソッドから返されたストリングに設定します。</p>
	 
	  <p>このストリングは、<codeph>"FlexSimpleButton16"</codeph> のように、オブジェクトのクラスと、アプリケーション内で一意の整数が連結された名前になります。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSimpleButton:toString"><apiName>toString</apiName><shortdesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject の階層におけるこのオブジェクトの位置を示したストリングです。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。 このストリングは、<codeph>"MyApp0.HBox5.FlexSimpleButton16"</codeph> のように、mx.utils.NameUtils クラスの <codeph>displayObjectToString()</codeph> メソッドによって、このオブジェクトおよびその先祖の <codeph>name</codeph> プロパティから作成されます。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IContainer"><apiName>IContainer</apiName><shortdesc>
  IContainer は、mx.core.Container を拡張または模倣するコンポーネントを示すインターフェイスです。
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IContainer は、mx.core.Container を拡張または模倣するコンポーネントを示すインターフェイスです。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link></related-links><apiOperation id="mx.core:IContainer:mx.core:IContainer:addChild"><apiName>addChild</apiName><shortdesc conref="flash.display.DisplayObjectContainer#addChild()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#addChild()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:addChildAt"><apiName>addChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#addChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#addChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:areInaccessibleObjectsUnderPoint"><apiName>areInaccessibleObjectsUnderPoint</apiName><shortdesc conref="flash.display.DisplayObjectContainer#areInaccessibleObjectsUnderPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#areInaccessibleObjectsUnderPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:contains"><apiName>contains</apiName><shortdesc conref="flash.display.DisplayObjectContainer#contains()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#contains()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildAt"><apiName>getChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildByName"><apiName>getChildByName</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildByName()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildByName()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildIndex"><apiName>getChildIndex</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getObjectsUnderPoint"><apiName>getObjectsUnderPoint</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getObjectsUnderPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getObjectsUnderPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:removeChild"><apiName>removeChild</apiName><shortdesc conref="flash.display.DisplayObjectContainer#removeChild()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#removeChild()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:removeChildAt"><apiName>removeChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#removeChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#removeChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:setChildIndex"><apiName>setChildIndex</apiName><shortdesc conref="flash.display.DisplayObjectContainer#setChildIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#setChildIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:startDrag"><apiName>startDrag</apiName><shortdesc conref="flash.display.Sprite#startDrag()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>lockCenter</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Sprite#startDrag()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:stopDrag"><apiName>stopDrag</apiName><shortdesc conref="flash.display.Sprite#stopDrag()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Sprite#stopDrag()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:swapChildren"><apiName>swapChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#swapChildren()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child1</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>child2</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#swapChildren()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:swapChildrenAt"><apiName>swapChildrenAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#swapChildrenAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#swapChildrenAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IContainer:mx.core:IContainer:buttonMode:get"><apiName>buttonMode</apiName><shortdesc conref="flash.display.Sprite#buttonMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.Sprite#buttonMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc conref="mx.core.Container#creatingContentPane">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.Container#creatingContentPane">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:defaultButton:get"><apiName>defaultButton</apiName><shortdesc conref="mx.core.Container#defaultButton">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.Container#defaultButton">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:dropTarget:get"><apiName>dropTarget</apiName><shortdesc conref="flash.display.Sprite#dropTarget">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.Sprite#dropTarget">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:focusManager:get"><apiName>focusManager</apiName><shortdesc conref="mx.core.UIComponent#focusManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#focusManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:focusRect:get"><apiName>focusRect</apiName><shortdesc conref="flash.display.InteractiveObject#focusRect"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#focusRect"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:graphics:get"><apiName>graphics</apiName><shortdesc conref="flash.display.Sprite#graphics">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Graphics"/></apiValueDef><apiDesc conref="flash.display.Sprite#graphics">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:hitArea:get"><apiName>hitArea</apiName><shortdesc conref="flash.display.Sprite#hitArea">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc conref="flash.display.Sprite#hitArea">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="mx.core.Container#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.Container#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:mouseChildren:get"><apiName>mouseChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:numChildren:get"><apiName>numChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#numChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#numChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:soundTransform:get"><apiName>soundTransform</apiName><shortdesc conref="flash.display.Sprite#soundTransform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.media:SoundTransform"/></apiValueDef><apiDesc conref="flash.display.Sprite#soundTransform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabChildren:get"><apiName>tabChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#tabChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#tabChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabEnabled:get"><apiName>tabEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#tabEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabIndex:get"><apiName>tabIndex</apiName><shortdesc conref="flash.display.InteractiveObject#tabIndex"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabIndex"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:textSnapshot:get"><apiName>textSnapshot</apiName><shortdesc conref="flash.display.DisplayObjectContainer#textSnapshot">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.text:TextSnapshot"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#textSnapshot">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:useHandCursor:get"><apiName>useHandCursor</apiName><shortdesc conref="flash.display.Sprite#useHandCursor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.Sprite#useHandCursor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="mx.core.Container#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.Container#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc conref="mx.core.Container#viewMetrics">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.Container#viewMetrics">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
  TextFieldAsset は、Flash によって作成された SWF ファイルから Flex アプリケーションに埋め込まれた TextField シンボルを表す、flash.text.TextField クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextFieldAsset は、Flash によって作成された SWF ファイルから Flex アプリケーションに埋め込まれた TextField シンボルを表す、flash.text.TextField クラスのサブクラスです。 これにより IFlexDisplayObject インターフェイスが実装され、TextFieldAsset を Image コントロールで表示すること、またはコンテナの背景やコンポーネントスキンとして使用することが可能になります。
 
  <p>このクラスは完全を期すために Flex に含まれています。これにより、Flash によって作成された SWF ファイルに含まれるすべての種類のシンボルを Flex アプリケーションに埋め込むことが可能になります。ただし、Flex アプリケーションは通常、埋め込まれた TextField を使用しません。Flex における埋め込みアセットの動作の詳細については、一般的に使用される BitmapAsset などのアセットクラスを参照してください。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:TextFieldAsset:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:TextFieldAsset:move"><apiName>move</apiName><shortdesc>
      
	  このオブジェクトを指定の x および y 座標に移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい x 位置です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい y 位置です。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  このオブジェクトを指定の x および y 座標に移動します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:TextFieldAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  このオブジェクトの実際のサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい幅です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい高さです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  このオブジェクトの実際のサイズを設定します。
	 
	  <p>このメソッドは主に <codeph>updateDisplayList()</codeph> メソッドの実装に使用されます。ここでオブジェクトの実際のサイズを、その明示的サイズ、親との相対（％）サイズ、および測定されたサイズに基づいて計算します。 次に <codeph>setActualSize()</codeph> を呼び出して、この実際のサイズをオブジェクトに適用します。</p>
	 
	  <p>その他の状況では、このメソッドを呼び出す代わりに、<codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph>、<codeph>percentHeight</codeph> などのプロパティを設定することになります。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:TextFieldAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  このオブジェクトの測定した高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  このオブジェクトの測定した高さです。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:TextFieldAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  このオブジェクトの測定した幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  このオブジェクトの測定した幅です。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContainerLayout"><apiName>ContainerLayout</apiName><shortdesc>
  ContainerLayout クラスは、コンテナクラスの layout プロパティの定数値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ContainerLayout クラスは、コンテナクラスの <codeph>layout</codeph> プロパティの定数値を定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Panel/layout"><linktext>mx.containers.Panel.layout</linktext></link><link href="mx.core.xml#Application/layout"><linktext>mx.core.Application.layout</linktext></link></related-links><apiValue id="mx.core:ContainerLayout:ABSOLUTE"><apiName>ABSOLUTE</apiName><shortdesc>
	  このコンテナのコンテンツに対して絶対配置レイアウトを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>absolute</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  このコンテナのコンテンツに対して絶対配置レイアウトを使用します。子ごとに位置を明示的に指定する必要があります。
	 
	  <p>これを最も簡単に行うには、子ごとに <codeph>x</codeph>、<codeph>y</codeph>、<codeph>width</codeph> および <codeph>height</codeph> を指定します。</p>
	 
	  <p>MXML では、<codeph>width</codeph> と <codeph>height</codeph> はパーセンテージ値として指定できます。 ActionScript では、<codeph>percentWidth</codeph> プロパティと <codeph>percentHeight</codeph> プロパティを設定する必要があります。</p>
	 
	  <p>子の <codeph>width</codeph> または <codeph>percentWidth</codeph> を指定しなかった場合は、<codeph>measuredWidth</codeph>（<codeph>measure()</codeph> メソッドによって自動的に決定される）が使用されます。 高さについても同様です。</p>
	 
	  <p>レイアウトを行うもう 1 つの方法として、アンカースタイル <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph>、<codeph>bottom</codeph>、<codeph>horizontalCenter</codeph> および <codeph>verticalCenter</codeph> を使用して、子をコンテナの上下左右または中央に固定することができます。</p>
	 
	  <p>絶対配置レイアウトを使用する場合、コンテナの <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph>、<codeph>paddingBottom</codeph>、<codeph>horizontalGap</codeph>、<codeph>verticalGap</codeph>、<codeph>horizontalAlign</codeph> および <codeph>verticalAlign</codeph> スタイルは無視されます。</p> 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerLayout:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  このコンテナのコンテンツに対して水平レイアウトを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  このコンテナのコンテンツに対して水平レイアウトを使用します。コンテナでは子が自動的に 1 行に配置されます。
	 
	  <p>子の <codeph>width</codeph> または <codeph>percentWidth</codeph> を指定しなかった場合は、<codeph>measuredWidth</codeph>（<codeph>measure()</codeph> メソッドによって自動的に決定される）が使用されます。 高さについても同様です。</p>
	 
	  <p>子と子の間の間隔は <codeph>horizontalGap</codeph> スタイルで、子の配置は <codeph>verticalAlign</codeph> スタイルで制御できます。 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> および <codeph>paddingBottom</codeph> スタイルにより、コンテナの境界線と子の間の間隔を制御します。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerLayout:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  このコンテナのコンテンツに対して垂直レイアウトを使用します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  このコンテナのコンテンツに対して垂直レイアウトを使用します。コンテナでは子が自動的に 1 列に配置されます。
	 
	  <p>子の <codeph>width</codeph> または <codeph>percentWidth</codeph> を指定しなかった場合は、<codeph>measuredWidth</codeph>（<codeph>measure()</codeph> メソッドによって自動的に決定される）が使用されます。 高さについても同様です。</p>
	 
	  <p>子と子の間の間隔は <codeph>verticalGap</codeph> スタイルで、子の配置は <codeph>horizontalAlign</codeph> スタイルで制御できます。 <codeph>paddingLeft</codeph>、<codeph>paddingTop</codeph>、<codeph>paddingRight</codeph> および <codeph>paddingBottom</codeph> スタイルにより、コンテナの境界線と子の間の間隔を制御します。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IInvalidating"><apiName>IInvalidating</apiName><shortdesc>
  IInvalidating インターフェイスは、プロパティの処理、測定、描画、およびレイアウトを直ちに行わずに、無効化を使用して遅らせるコンポーネントのインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IInvalidating インターフェイスは、プロパティの処理、測定、描画、およびレイアウトを直ちに行わずに、無効化を使用して遅らせるコンポーネントのインターフェイスを定義します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
	  このメソッドを呼び出すと、表示リストがレンダリングされる前に、コンポーネントの validateDisplayList() メソッドが呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  このメソッドを呼び出すと、表示リストがレンダリングされる前に、コンポーネントの <codeph>validateDisplayList()</codeph> メソッドが呼び出されます。
	 
	  <p>UIComponent を拡張するコンポーネントの場合は、<codeph>updateDisplayList()</codeph> が呼び出されることになります。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
	  このメソッドを呼び出すと、表示リストがレンダリングされる前にコンポーネントの validateProperties() メソッドが呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  このメソッドを呼び出すと、表示リストがレンダリングされる前にコンポーネントの <codeph>validateProperties()</codeph> メソッドが呼び出されます。
	 
	  <p>UIComponent を拡張するコンポーネントの場合は、<codeph>commitProperties()</codeph> が呼び出されることになります。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  このメソッドを呼び出すと、表示リストがレンダリングされる前に、コンポーネントの validateSize() メソッドが呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  このメソッドを呼び出すと、表示リストがレンダリングされる前に、コンポーネントの <codeph>validateSize()</codeph> メソッドが呼び出されます。
	 
	  <p>UIComponent を拡張するコンポーネントの場合は、<codeph>measure()</codeph> が呼び出されることになります（ただし、コンポーネントに <codeph>explicitWidth</codeph> と <codeph>explicitHeight</codeph> の両方が設定されている場合を除く）。</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:validateNow"><apiName>validateNow</apiName><shortdesc>
      必要に応じて、validateProperties()、validateSize() および validateDisplayList() を直ちに呼び出して、このオブジェクトのプロパティとレイアウトを検証および更新します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      必要に応じて、<codeph>validateProperties()</codeph>、<codeph>validateSize()</codeph> および <codeph>validateDisplayList()</codeph> を直ちに呼び出して、このオブジェクトのプロパティとレイアウトを検証および更新します。
     
      <p>プロパティが変更された場合、新しい値は通常、コンポーネントに対して即時に有効になりません。 通常は、その時点で実行する必要のあるすべてのアプリケーションコードが実行されます。 次に、LayoutManager が、検証の必要性と、表示リストオブジェクトの階層における深度に基づいて、コンポーネントで <codeph>validateProperties()</codeph>、<codeph>validateSize()</codeph> および <codeph>validateDisplayList()</codeph> メソッドの呼び出しを開始します。</p>
	 
      <p>例えば、<codeph>width</codeph> プロパティの設定は遅らされます。これは、オブジェクトの子または親の幅の再計算が必要になる可能性があるためです。 処理を遅らせることにより、アプリケーションコードで <codeph>width</codeph> プロパティが複数回設定されても、処理を何度も繰り返さずにすみます。このメソッドでは、この動作を手動でオーバーライドできます。</p>
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:IChildList"><apiName>IChildList</apiName><shortdesc>
  IChildList インターフェイスは、DisplayObjectContainer の子のサブセットである子リストにアクセスし、操作するためのプロパティとメソッドを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IChildList インターフェイスは、DisplayObjectContainer の子のサブセットである子リストにアクセスし、操作するためのプロパティとメソッドを定義します。
 
  <p>例として、Container クラスを挙げることができます。 このクラスは、中に置かれたコントロールやその他のコンテナである「コンテンツ」の子のみにアクセスするために使用する <codeph>numChildren</codeph> メソッドや <codeph>getChildAt()</codeph> メソッドなどの DisplayObjectContainer の API をオーバーライドします。 ただし、Container は、背景または境界線のスキンやスクロールバーなど、フレームワークによって自動的に作成される他の子を持つことがあります。 そのため、Container は IChildList 型の <codeph>rawChildren</codeph> と呼ばれるプロパティを公開し、コンテンツである子だけでなくすべての子にアクセスできるようにします。</p>
 
  <p>もう 1 つの例として挙げる SystemManager クラスは、子が様々なレイヤーに分割されている DisplayObjectContainer です。最下層はアプリケーションのような通常の子、その上がポップアップ、さらにその上がツールヒント、最上層がカーソルになります。 SystemManager クラスには、<codeph>popUpChildren</codeph>、<codeph>toolTipChildren</codeph>、<codeph>cursorChildren</codeph> という名前のプロパティがあり、それらを使用して各レイヤーにアクセスできます。それぞれのプロパティの型は IChildList です。 したがって、<codeph>systemManager.popUpChildren.numChildren</codeph> プロパティを使用してポップアップの数をカウントし、<codeph>systemManager.toolTipChildren.addChild()</codeph> メソッドを使用して別の DisplayObject をツールヒントレイヤーに挿入することができます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container/rawChildren"><linktext>mx.core.Container.rawChildren</linktext></link><link href="mx.managers.xml#SystemManager/rawChildren"><linktext>mx.managers.SystemManager.rawChildren</linktext></link><link href="mx.managers.xml#SystemManager/popUpChildren"><linktext>mx.managers.SystemManager.popUpChildren</linktext></link><link href="mx.managers.xml#SystemManager/toolTipChildren"><linktext>mx.managers.SystemManager.toolTipChildren</linktext></link><link href="mx.managers.xml#SystemManager/cursorChildren"><linktext>mx.managers.SystemManager.cursorChildren</linktext></link></related-links><apiOperation id="mx.core:IChildList:mx.core:IChildList:addChild"><apiName>addChild</apiName><shortdesc>
      この子リストの末尾に子 DisplayObject を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>追加された子です。これは、渡された引数と同じです。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>子として追加する DisplayObject です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この子リストの末尾に子 DisplayObject を追加します。
     
	  <p><codeph>childList.addChild(child)</codeph> の呼び出しは、<codeph>childList.addChild(child, childList.numChildren)</codeph> の呼び出しと同じです。追加された新しい子のインデックスは、<codeph>(child.numChildren - 1)</codeph> になります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:addChildAt"><apiName>addChildAt</apiName><shortdesc>
      この子リストの指定されたインデックス位置に子 DisplayObject を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>追加された子です。これは、渡された <codeph>child</codeph> 引数と同じです。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>子として追加する DisplayObject です。
	 
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>子を追加するインデックス位置です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この子リストの指定されたインデックス位置に子 DisplayObject を追加します。インデックス 0 は DisplayList の先頭を、インデックス <codeph>numChildren</codeph> は最後を表します。
	 
	  <p>子リストの最後以外の場所に子を追加すると、そのインデックス位置以降にあった子のインデックスが 1 つずつ増やされます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:contains"><apiName>contains</apiName><shortdesc>
	  DisplayObject がこの子リスト内にあるか、またはこの子リストに含まれる子の子孫であるかを判定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>DisplayObject がこの子リストにあるか、またはこの子リスト内の子の子孫である場合は <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> になります。
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>テストする DisplayObject です。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  DisplayObject がこの子リスト内にあるか、またはこの子リストに含まれる子の子孫であるかを判定します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildAt"><apiName>getChildAt</apiName><shortdesc>
	  この子リスト内の指定されたインデックスにある子 DisplayObject を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたインデックス位置にある子です。
	  
	  </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>この子リスト内の子のインデックスを指定する 0 ～ <codeph>(numChildren - 1)</codeph> の整数です。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  この子リスト内の指定されたインデックス位置にある子 DisplayObject を取得します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildByName"><apiName>getChildByName</apiName><shortdesc>
      この子リスト内の指定された名前の子 DisplayObject を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定された名前を持つ子。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>返される子の名前。
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この子リスト内の指定された名前の子 DisplayObject を取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
	  この子リスト内の特定の子のインデックスを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>子のインデックス。0 ～ <codeph>(numChildren - 1)</codeph> の整数です。
	  
	  </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>インデックスを取得する子です。
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  この子リスト内の特定の子のインデックスを取得します。
	 
	  <p>子リストの最初の子はインデックス 0、2 番目の子はインデックス 1、最後の子はインデックス <codeph>(numChildren - 1)</codeph> になります。</p>
	 
	  <p><codeph>getChildIndex(myChild)</codeph> が 5 を返した場合、<codeph>myView.getChildAt(5)</codeph> は <codeph>myChild</codeph> を返します。</p>
	 
	  <p><codeph>addChild()</codeph> メソッドを呼び出すことによって子を追加すると、新しい子のインデックスは、既存の子の中で最大のインデックスに 1 を足した値に等しくなります。</p>
	 
	  <p><codeph>addChildAt()</codeph> メソッドを使用して、指定したインデックス位置に子を挿入できます。その場合、そのインデックス位置以降にあった子はインデックスが 1 ずつ増やされ、すべての子が 0 ～ <codeph>(numChildren - 1)</codeph> の値でインデックス付けされます。</p>
	 
	  <p><codeph>removeChild()</codeph> メソッドまたは <codeph>removeChildAt()</codeph> メソッドを呼び出して子を削除すると、それよりも大きいインデックスを持つ子はインデックスが 1 ずつ減らされ、すべての子が 0 ～ <codeph>(numChildren - 1)</codeph> の値でインデックス付けされます。</p>
	 
	  <p><codeph>setChildIndex()</codeph> メソッドを呼び出して子のインデックスを変更すると、古いインデックスと新しいインデックスの間にある子のインデックスが調整され、すべての子が 0 ～ <codeph>(numChildren - 1)</codeph> の値でインデックス付けされます。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getObjectsUnderPoint"><apiName>getObjectsUnderPoint</apiName><shortdesc>
      指定されたポイントの下にあり、この子リスト内にある DisplayObject の配列を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたポイントの下にあり、このコンテナの子であるオブジェクトの配列です。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>基準となるポイントです。
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたポイントの下にあり、この子リスト内にある DisplayObject の配列を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:removeChild"><apiName>removeChild</apiName><shortdesc>
      この子リストから指定された子 DisplayObject を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>削除された子です。これは、渡された引数と同じです。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>削除する DisplayObject です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この子リストから指定された子 DisplayObject を削除します。
	 
	  <p>子リストの最後以外の場所から子を削除すると、そのインデックス位置以降にあった子のインデックスが 1 つずつ減らされます。</p>
     
	  <p>削除された子は、親が null に設定され、他に参照がない場合はガベージコレクションの対象になります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
      この子リスト内の指定されたインデックス位置にある子 DisplayObject を削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>削除された子です。
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>削除するDisplayObject の子インデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この子リスト内の指定されたインデックス位置にある子 DisplayObject を削除します。
	 
	  <p>子リストの最後以外の場所から子を削除すると、そのインデックス位置以降にあった子のインデックスが 1 つずつ減らされます。</p>
     
      <p>削除された子は、親が null に設定され、他に参照がない場合はガベージコレクションの対象になります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
	  この子リスト内の特定の子のインデックスを変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>インデックスを設定する子です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>指定された子の新しいインデックスです。 0 ～ <codeph>(numChildren - 1)</codeph> の整数であることが必要です。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  この子リスト内の特定の子のインデックスを変更します。 子のインデックスの詳細については、<codeph>getChildIndex()</codeph> メソッドを参照してください。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IChildList:mx.core:IChildList:numChildren:get"><apiName>numChildren</apiName><shortdesc>
	  この子リストに含まれる子の数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
	  この子リストに含まれる子の数です。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredContentOwner"><apiName>IDeferredContentOwner</apiName><shortdesc>
  IDeferredContentOwner インターフェイスは、遅延インスタンス化に使用するプロパティとメソッドを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IDeferredContentOwner インターフェイスは、遅延インスタンス化に使用するプロパティとメソッドを定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.SkinnableContainer.xml"><linktext>spark.components.SkinnableContainer</linktext></link><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="mx.core.xml#INavigatorContent"><linktext>mx.core.INavigatorContent</linktext></link></related-links><adobeApiEvent id="mx.core:IDeferredContentOwner_mx.events.FlexEvent_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  このコンポーネントのコンテンツが作成された後に送信されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  このコンポーネントのコンテンツが作成された後に送信されます。遅延インスタンス化の場合、コンポーネントの作成後長時間が経過してからコンポーネントのコンテンツが作成される可能性があります。
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      このコンポーネントのコンテンツを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントのコンテンツを作成します。creationPolicy が「auto」または「all」である場合、この関数は Flex フレームワークによって呼び出されます。creationPolicy が "none" の場合、この関数を呼び出してコンポーネントのコンテンツを作成する必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      このコンポーネントのコンテンツ作成ポリシーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このコンポーネントのコンテンツ作成ポリシーです。
           <p>有効な値は次のとおりです。
        <ul>
          <li>auto - 必要となる直前にコンテンツを自動的に作成します。</li>
          <li>all - 親コンポーネントが作成されるとすぐにコンテンツを作成します。起動時間が長くなるため、このオプションは最後の手段としてのみ使用する必要があります。</li>
          <li>none - createDeferredContent() メソッドを呼び出すことによって、コンテンツを手動で作成する必要があります。</li>
        </ul>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      遅延コンテンツが作成されたかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      遅延コンテンツが作成されたかどうかを示すフラグです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ITransientDeferredInstance"><apiName>ITransientDeferredInstance</apiName><shortdesc>
  ITransientDeferredInstance インターフェイスは、IDeferredInstance を拡張し、ユーザーが遅延インスタンスファクトリーを初期状態にリセット（通常これは、インスタンスを参照する所有ドキュメントプロパティを null に設定するなど、コンポーネントへの既知の参照を解放することを意味します）できる機能を追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredInstance</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ITransientDeferredInstance インターフェイスは、IDeferredInstance を拡張し、ユーザーが遅延インスタンスファクトリーを初期状態にリセット（通常これは、インスタンスを参照する所有ドキュメントプロパティを null に設定するなど、コンポーネントへの既知の参照を解放することを意味します）できる機能を追加します。この追加の機能は、ステートが適用されなくなったときにステート固有のエレメントを破棄する必要がある場合、AddItems ステートのオーバーライドによって使用されます。Flex コンパイラーでは、IDeferredInstance と同じ自動型変換規則が使用されます。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.states.xml#AddItems"><linktext>mx.states.AddItems</linktext></link><link href="mx.core.xml#IDeferredInstance"><linktext>mx.core.IDeferredInstance</linktext></link></related-links><apiOperation id="mx.core:ITransientDeferredInstance:mx.core:ITransientDeferredInstance:reset"><apiName>reset</apiName><shortdesc>
      ファクトリーを初期状態にリセットし、キャッシュされたインスタンスへの参照をクリアします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ファクトリーを初期状態にリセットし、キャッシュされたインスタンスへの参照をクリアします。
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
  ButtonAsset は、Flash によって作成された SWF ファイルから Flex アプリケーションに埋め込まれたボタンシンボルを表す、flash.display.SimpleButton クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexSimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonAsset は、Flash によって作成された SWF ファイルから Flex アプリケーションに埋め込まれたボタンシンボルを表す、flash.display.SimpleButton クラスのサブクラスです。 これにより IFlexDisplayObject インターフェイスが実装され、SimpleButtonAsset を Image コントロールで表示すること、またはコンテナの背景やコンポーネントスキンとして使用することが可能になります。
 
  <p>このクラスは完全を期すために Flex に含まれています。これにより、Flash によって作成された SWF ファイルに含まれるすべての種類のシンボルを Flex アプリケーションに埋め込むことが可能になります。ただし、Flex アプリケーションは通常、埋め込まれた SimpleButton を使用しません。Flex における埋め込みアセットの動作の詳細については、一般的に使用される BitmapAsset などのアセットクラスを参照してください。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ButtonAsset:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ButtonAsset:move"><apiName>move</apiName><shortdesc>
      
	  このオブジェクトを指定の x および y 座標に移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい x 位置です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい y 位置です。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  このオブジェクトを指定の x および y 座標に移動します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ButtonAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  このオブジェクトの実際のサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい幅です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい高さです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  このオブジェクトの実際のサイズを設定します。
	 
	  <p>このメソッドは主に <codeph>updateDisplayList()</codeph> メソッドの実装に使用されます。ここでオブジェクトの実際のサイズを、その明示的サイズ、親との相対（％）サイズ、および測定されたサイズに基づいて計算します。 次に <codeph>setActualSize()</codeph> を呼び出して、この実際のサイズをオブジェクトに適用します。</p>
	 
	  <p>その他の状況では、このメソッドを呼び出す代わりに、<codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph>、<codeph>percentHeight</codeph> などのプロパティを設定することになります。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ButtonAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  このオブジェクトの測定した高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  このオブジェクトの測定した高さです。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ButtonAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  このオブジェクトの測定した幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  このオブジェクトの測定した幅です。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
  MovieClipLoaderAsset は、Flex アプリケーションに埋め込まれた SWF ファイルを表す MovieClipAsset クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:MovieClipAsset</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipLoaderAsset は、Flex アプリケーションに埋め込まれた SWF ファイルを表す MovieClipAsset クラスのサブクラスです。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:MovieClipLoaderAsset_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  SWF アセットが完全にロードされた後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  SWF アセットが完全にロードされた後に送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:MovieClipLoaderAsset:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialHeight"><apiName>initialHeight</apiName><shortdesc>
	  measuredHeight プロパティの補助記憶領域です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  <codeph>measuredHeight</codeph> プロパティの補助記憶領域です。 サブクラスはコンストラクターでこの値を設定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialWidth"><apiName>initialWidth</apiName><shortdesc>
	  measuredWidth プロパティの補助記憶領域です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  <codeph>measuredWidth</codeph> プロパティの補助記憶領域です。 サブクラスはコンストラクターでこの値を設定します。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:movieClipData:get"><apiName>movieClipData</apiName><shortdesc>
	  内部コンテンツを含む ByteArray です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:ByteArray"/></apiValueDef><apiDesc>
	  内部コンテンツを含む ByteArray です。サブクラスでオーバーライドされます。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IPropertyChangeNotifier"><apiName>IPropertyChangeNotifier</apiName><shortdesc>
  IPropertyChangeNotifier インターフェイスは、マーカーインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IUID</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  <codeph>IPropertyChangeNotifier</codeph> インターフェイスは、マーカーインターフェイスを定義します。 このインターフェイスをサポートするクラスは、特殊な方法でのイベントの伝播のサポートを宣言します。 このインターフェイスを実装するクラスは、このクラスのプロパティごと、およびプロパティとして公開されているネストされたクラスのプロパティごとにイベントを送出する必要があります。匿名の（複雑で、厳密に型指定されていない）プロパティの場合は、実装するクラスがカスタムサポートを提供するか、ObjectProxy クラスを直接使用します。 このインターフェイスの実装者は、<codeph>PropertyChangeEvent.createUpdateEvent()</codeph> メソッドを使用して、送出する適切な更新イベントを作成する必要があります。
  </apiDesc><example>
  <codeph><pre>
   
 function set myProperty(value:Object):void
 {
    var oldValue:IPropertyChangeNotifier = _myProperty;
    var newValue:IPropertyChangeNotifier = value;
    
    // Need to ensure to dispatch changes on the new property.
    // Listeners use the source property to determine which object 
    // actually originated the event.
    // In their event handler code, they can tell if an event has been 
    // propagated from deep within the object graph by comparing 
    // event.target and event.source. If they are equal, then the property
    // change is at the surface of the object. If they are not equal, the
    // property change is somewhere deeper in the object graph.
    newValue.addEventListener(
                PropertyChangeEvent.PROPERTY_CHANGE, 
                dispatchEvent);
 
    // need to stop listening for events from the old property
    oldValue.removeEventListener(
                PropertyChangeEvent.PROPERTY_CHANGE,
                dispatchEvent);
 
    _myProperty = newValue;
 
    // now notify anyone that is listening
    if (dispatcher.hasEventListener(PropertyChangeEvent.PROPERTY_CHANGE))
    {
         var event:PropertyChangeEvent = 
                         PropertyChangeEvent.createUpdateEvent(
                                                       this,
                                                       "myProperty",
                                                       newValue,
                                                       oldValue);
        dispatchEvent(event);
     }
  }
 
      
  </pre></codeph>
  
  </example></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IRepeaterClient"><apiName>IRepeaterClient</apiName><shortdesc>
  IRepeaterClient インターフェイスは、Repeater によって作成された複数のインスタンスを保持できるコンポーネントの API を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IRepeaterClient インターフェイスは、Repeater によって作成された複数のインスタンスを保持できるコンポーネントの API を定義します。IRepeaterClient インターフェイスは、UIComponent クラスによって実装され、すべての Flex フレームワークのコントロールおよびコンテナによって継承されます。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      instanceIndices、repeaterIndices および repeaters プロパティを初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>このコンポーネントを作成した親 Repeater です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>instanceIndices</codeph>、<codeph>repeaterIndices</codeph> および <codeph>repeaters</codeph> プロパティを初期化します。
     
      <p>このメソッドは、Flex フレームワークによって呼び出されます。 開発者がこのメソッドを呼び出す必要はありません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      繰り返しコンポーネントのインスタンスをそのドキュメントから参照するために必要なインデックスを含む配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      繰り返しコンポーネントのインスタンスをそのドキュメントから参照するために必要なインデックスを含む配列です。コンポーネントが Repeater の中にない限り、この配列は空です。最初のエレメントが最も外側の Repeater を表します。 例えば、<codeph>id</codeph> が <codeph>"b"</codeph> で <codeph>instanceIndices</codeph> が <codeph>[ 2, 4 ]</codeph> の場合、ドキュメント上で <codeph>b[2][4]</codeph> として参照します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:isDocument:get"><apiName>isDocument</apiName><shortdesc conref="mx.core.UIComponent#isDocument">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isDocument">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      コンポーネントを生成した Repeater のデータプロバイダー内のアイテムのインデックスを含む配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      コンポーネントを生成した Repeater のデータプロバイダー内のアイテムのインデックスを含む配列です。 コンポーネントが Repeater の中にない限り、この配列は空です。最初のエレメントが最も外側の Repeater コンポーネントを表します。 例えば、<codeph>repeaterIndices</codeph> が <codeph>[ 2, 4 ]</codeph> の場合、外側の Repeater コンポーネントではデータアイテム <codeph>dataProvider[2]</codeph> が使用され、内側の Repeater コンポーネントではデータアイテム <codeph>dataProvider[4]</codeph> が使用されます。
     
      <p>このプロパティは、<codeph>instanceIndices</codeph> とは異なる場合があります。これに該当するのは、いずれかの Repeater コンポーネントの <codeph>startingIndex</codeph> が 0 以外の場合です。 例えば、Repeater コンポーネントが <codeph>dataProvider</codeph> アイテム 4 から開始する場合でも、最初の繰り返しコンポーネントのドキュメント参照は <codeph>b[0]</codeph> であり、<codeph>b[4]</codeph> ではありません。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      コンポーネントの周りを囲む Repeater を含む配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      コンポーネントの周りを囲む Repeater を含む配列です。コンポーネントが Repeater の中にない限り、この配列は空です。最初のエレメントが最も外側の Repeater を表します。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IVisualElementContainer"><apiName>IVisualElementContainer</apiName><shortdesc>
  IVisualElementContainer インターフェイスは、表示する Spark コンポーネントをコンテナが管理するのに必要な最低限のプロパティとメソッドを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IVisualElementContainer インターフェイスは、表示する Spark コンポーネントをコンテナが管理するのに必要な最低限のプロパティとメソッドを定義します。
 
  <p>Spark SkinnableDataContainer と DataGroup コンテナはこのインターフェイスを実装していません。これらのコンテナは自身の子を <codeph>dataProvider</codeph> プロパティを使用して管理します。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#IVisualElement"><linktext>mx.core.IVisualElement</linktext></link></related-links><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElement"><apiName>addElement</apiName><shortdesc>
      ビジュアルエレメントをこのコンテナに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>エレメントがビジュアルコンテナと同じ場合にスローされます。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>追加されたエレメントです。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>このコンテナの子として追加するビジュアルエレメントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ビジュアルエレメントをこのコンテナに追加します。エレメントは、他のすべてのエレメントを追加した後で、それらの上に追加されます。特定のインデックス位置にビジュアルエレメントを追加する場合は、<codeph>addElementAt()</codeph> メソッドを使用します。
     
      <p>既に異なるコンテナを親に持つビジュアルエレメントを追加する場合は、もう一方のコンテナからそのエレメントが削除されます。</p>  
     
      </apiDesc></apiOperationDetail><adobeApiEvent id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElement_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>エレメントが子リストに追加された場合に送出されます。
     
      </apiDesc></adobeApiEventDetail><shortdesc>エレメントが子リストに追加された場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      ビジュアルエレメントをこのコンテナに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>エレメントがコンテナと同じ場合にスローされます。
     
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>インデックス位置が子リストに存在しない場合にスローされます。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>追加されたエレメントです。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>このビジュアルコンテナの子として追加するエレメントです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>エレメントを追加するインデックス位置です。既にオブジェクトが置かれているインデックス位置を指定すると、その位置にある子とその上に位置するすべての子が、子リスト内で 1 つ上の位置に移動します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ビジュアルエレメントをこのコンテナに追加します。エレメントは、指定されたインデックス位置に追加されます。インデックス 0 は表示リストの最初のエレメントを表します。
     
      <p>既に異なるコンテナを親に持つビジュアルエレメントを追加する場合は、もう一方のコンテナからそのエレメントが削除されます。</p>  
     
      </apiDesc></apiOperationDetail><adobeApiEvent id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElementAt_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>エレメントが子リストに追加された場合に送出されます。
     
      </apiDesc></adobeApiEventDetail><shortdesc>エレメントが子リストに追加された場合に送出されます。</shortdesc></adobeApiEvent></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      指定されたインデックス位置にあるビジュアルエレメントを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックス位置が子リストに存在しない場合にスローされます。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>指定されたインデックス位置にあるエレメントです。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>取得するエレメントのインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたインデックス位置にあるビジュアルエレメントを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      ビジュアルエレメントのインデックス位置を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>エレメントがこのビジュアルコンテナの子でない場合にスローされます。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>コンテナ内でのエレメントのインデックス位置です。
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>ビジュアルエレメントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ビジュアルエレメントのインデックス位置を返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      コンテナからすべてのビジュアルエレメントを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      コンテナからすべてのビジュアルエレメントを削除します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      このコンテナの子リストから、指定されたビジュアルエレメントを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>エレメントパラメーターがこのビジュアルコンテナの子でない場合にスローされます。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>削除されたエレメントです。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>コンテナから削除されるエレメントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      このコンテナの子リストから、指定されたビジュアルエレメントを削除します。このビジュアルコンテナのエレメントより上位にあるエレメントのインデックス位置は 1 つ減少します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      コンテナ内の指定されたインデックス位置からビジュアルエレメントを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスが子リストに存在しない場合にスローされます。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>削除されたエレメントです。
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>削除するエレメントのインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コンテナ内の指定されたインデックス位置からビジュアルエレメントを削除します。このビジュアルコンテナのエレメントより上位にあるエレメントのインデックス位置は 1 つ減少します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      ビジュアルコンテナ内の既存のビジュアルエレメントの位置を変更します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスが子リストに存在しない場合にスローされます。
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>エレメントパラメーターがこのビジュアルコンテナの子でない場合にスローされます。
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>インデックス番号を変更するエレメントです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>エレメントの結果のインデックス番号です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ビジュアルコンテナ内の既存のビジュアルエレメントの位置を変更します。
     
      <p><codeph>setElementIndex()</codeph> メソッドを呼び出して、既に占有されているインデックス位置を指定した場合は、エレメントの前の位置と新しい位置の間にある位置だけが変化します。その他は変化しません。</p>
     
      <p>現在のインデックスよりも小さいインデックスにビジュアルエレメントを移動すると、その間のすべてのエレメントのインデックスが 1 増加します。現在のインデックスよりも大きいインデックスにエレメントを移動すると、その間のすべてのエレメントのインデックスが 1 減少します。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      指定された 2 つのビジュアルエレメントのインデックスを入れ替えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>最初のビジュアルエレメントです。
     
      </apiDesc></apiParam><apiParam><apiItemName>element2</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>2 番目のビジュアルエレメントです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定された 2 つのビジュアルエレメントのインデックスを入れ替えます。他のすべてのエレメントは同じインデックス位置に残されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      コンテナ内の指定された 2 つのインデックス位置にあるビジュアルエレメントを入れ替えます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>インデックスがビジュアルコンテナに存在しない場合にスローされます。
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/><apiDesc>最初のエレメントのインデックスです。
     
      </apiDesc></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/><apiDesc>2 番目のエレメントのインデックスです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コンテナ内の指定された 2 つのインデックス位置にあるビジュアルエレメントを入れ替えます。他のすべてのビジュアルエレメントは同じインデックス位置に残されます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      このコンテナ内のビジュアルエレメントの数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      このコンテナ内のビジュアルエレメントの数です。ビジュアルエレメントには、UIComponent や GraphicElement のサブクラスなど、IVisualElement インターフェイスを実装したクラスが含まれます。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDataRenderer"><apiName>IDataRenderer</apiName><shortdesc>
  IDataRenderer インターフェイスは、data プロパティを持つコンポーネントのインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IDataRenderer インターフェイスは、<codeph>data</codeph> プロパティを持つコンポーネントのインターフェイスを定義します。
 
  <p>リストコントロール（List、HorizontalList、TileList、DataGrid、Tree コントロールなど）内のアイテムレンダラーまたはアイテムエディターで使用されるコンポーネント、またはチャート内でレンダラーとして使用されるコンポーネントに、<codeph>data</codeph> プロパティを使用して、レンダリングまたは編集するデータが渡されます。 コンポーネントは、ホストコンポーネントがこの情報を渡すことができるように、IDataRenderer を実装する必要があります。 すべての Flex コンテナおよび多くの Flex コンポーネントは IDataRenderer および <codeph>data</codeph> プロパティを実装します。</p>
 
  <p>リストコントロール内で、Flex はアイテムレンダラーまたはアイテムエディターの <codeph>data</codeph> プロパティを、レンダリングまたは編集対象のアイテムに対応するデータプロバイダーのエレメントに設定します。 DataGrid コントロールの場合、<codeph>data</codeph> プロパティは、そのアイテムだけでなく、DataGrid コントロールの行全体に対するデータプロバイダーエレメントを含みます。</p>
 
  <p>このインターフェイスを実装するには、<codeph>data</codeph> プロパティを実装するための setter および getter メソッドを定義します。 通常、setter メソッドは <codeph>data</codeph> プロパティの値を内部変数に書き込んで <codeph>dataChange</codeph> イベントを送出し、getter メソッドは内部変数の現在の値を返します。次の例を参照してください。</p>
  
  <pre>
    // Internal variable for the property value.
    private var _data:Object;
    
    // Make the data property bindable.
    [Bindable("dataChange")]
    
    // Define the getter method.
    public function get data():Object {
        return _data;
    }
    
    // Define the setter method, and dispatch an event when the property
    // changes to support data binding.
    public function set data(value:Object):void {
        _data = value;
    
        dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
    }
  </pre>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IDataRenderer:mx.core:IDataRenderer:data:get"><apiName>data</apiName><shortdesc>
	  レンダリングまたは編集するデータです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  レンダリングまたは編集するデータです。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ITextInput"><apiName>ITextInput</apiName><shortdesc>
  解説は現在利用できません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  解説は現在利用できません。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ITextInput:mx.core:ITextInput:selectRange"><apiName>selectRange</apiName><shortdesc>
      パラメーターで指定された範囲のテキストを選択します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      パラメーターで指定された範囲のテキストを選択します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ITextInput:mx.core:ITextInput:showBorderAndBackground"><apiName>showBorderAndBackground</apiName><shortdesc>
      TextInput の境界線と背景が表示されるかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      TextInput の境界線と背景が表示されるかどうかを判別します。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ITextInput:mx.core:ITextInput:editable:get"><apiName>editable</apiName><shortdesc>
	  解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  解説は現在利用できません。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      解説は現在利用できません。
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:maxChars:get"><apiName>maxChars</apiName><shortdesc>
	  解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
	  解説は現在利用できません。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:mouseChildren:get"><apiName>mouseChildren</apiName><shortdesc>
	  解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  解説は現在利用できません。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc>
	  解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  解説は現在利用できません。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:parentDrawsFocus:get"><apiName>parentDrawsFocus</apiName><shortdesc>
	  解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  解説は現在利用できません。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:restrict:get"><apiName>restrict</apiName><shortdesc>
	  解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  解説は現在利用できません。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectable:get"><apiName>selectable</apiName><shortdesc>
	  解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  解説は現在利用できません。
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      解説は現在利用できません。
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      解説は現在利用できません。
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:text:get"><apiName>text</apiName><shortdesc>
	  解説は現在利用できません。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  解説は現在利用できません。
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexDisplayObject"><apiName>IFlexDisplayObject</apiName><shortdesc>
  IFlexDisplayObject インターフェイスは、スキンエレメントのインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.display:IBitmapDrawable</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexDisplayObject インターフェイスは、スキンエレメントのインターフェイスを定義します。 少なくとも、スキンは DisplayObject でなければならず、このインターフェイスを実装している必要があります。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getBounds"><apiName>getBounds</apiName><shortdesc conref="flash.display.DisplayObject#getBounds()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getBounds()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getRect"><apiName>getRect</apiName><shortdesc conref="flash.display.DisplayObject#getRect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getRect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:globalToLocal"><apiName>globalToLocal</apiName><shortdesc conref="flash.display.DisplayObject#globalToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#globalToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestObject"><apiName>hitTestObject</apiName><shortdesc conref="flash.display.DisplayObject#hitTestObject()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestObject()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestPoint"><apiName>hitTestPoint</apiName><shortdesc conref="flash.display.DisplayObject#hitTestPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>shapeFlag</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:localToGlobal"><apiName>localToGlobal</apiName><shortdesc conref="flash.display.DisplayObject#localToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#localToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:move"><apiName>move</apiName><shortdesc>
	  このオブジェクトを指定の x および y 座標に移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい x 位置です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい y 位置です。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  このオブジェクトを指定の x および y 座標に移動します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:setActualSize"><apiName>setActualSize</apiName><shortdesc>
	  このオブジェクトの実際のサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい幅です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい高さです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  このオブジェクトの実際のサイズを設定します。
	 
	  <p>このメソッドは主に <codeph>updateDisplayList()</codeph> メソッドの実装に使用されます。ここでオブジェクトの実際のサイズを、その明示的サイズ、親との相対（％）サイズ、および測定されたサイズに基づいて計算します。 次に <codeph>setActualSize()</codeph> を呼び出して、この実際のサイズをオブジェクトに適用します。</p>
	 
	  <p>その他の状況では、このメソッドを呼び出す代わりに、<codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph>、<codeph>percentHeight</codeph> などのプロパティを設定することになります。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:accessibilityProperties:get"><apiName>accessibilityProperties</apiName><shortdesc conref="flash.display.DisplayObject#accessibilityProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.accessibility:AccessibilityProperties"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#accessibilityProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:blendMode:get"><apiName>blendMode</apiName><shortdesc conref="flash.display.DisplayObject#blendMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#blendMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:cacheAsBitmap:get"><apiName>cacheAsBitmap</apiName><shortdesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:filters:get"><apiName>filters</apiName><shortdesc conref="flash.display.DisplayObject#filters">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#filters">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:loaderInfo:get"><apiName>loaderInfo</apiName><shortdesc conref="flash.display.DisplayObject#loaderInfo">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#loaderInfo">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mask:get"><apiName>mask</apiName><shortdesc conref="flash.display.DisplayObject#mask">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mask">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
	  このオブジェクトの測定した高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  このオブジェクトの測定した高さです。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
	  このオブジェクトの測定した幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  このオブジェクトの測定した幅です。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseX:get"><apiName>mouseX</apiName><shortdesc conref="flash.display.DisplayObject#mouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseY:get"><apiName>mouseY</apiName><shortdesc conref="flash.display.DisplayObject#mouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:name:get"><apiName>name</apiName><shortdesc conref="flash.display.DisplayObject#name">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#name">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:opaqueBackground:get"><apiName>opaqueBackground</apiName><shortdesc conref="flash.display.DisplayObject#opaqueBackground">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#opaqueBackground">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:parent:get"><apiName>parent</apiName><shortdesc conref="flash.display.DisplayObject#parent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#parent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:root:get"><apiName>root</apiName><shortdesc conref="flash.display.DisplayObject#root">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#root">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:rotation:get"><apiName>rotation</apiName><shortdesc conref="flash.display.DisplayObject#rotation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#rotation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scale9Grid:get"><apiName>scale9Grid</apiName><shortdesc conref="flash.display.DisplayObject#scale9Grid">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scale9Grid">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleX:get"><apiName>scaleX</apiName><shortdesc conref="flash.display.DisplayObject#scaleX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleY:get"><apiName>scaleY</apiName><shortdesc conref="flash.display.DisplayObject#scaleY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scrollRect:get"><apiName>scrollRect</apiName><shortdesc conref="flash.display.DisplayObject#scrollRect">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scrollRect">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:stage:get"><apiName>stage</apiName><shortdesc conref="flash.display.DisplayObject#stage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#stage">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:transform:get"><apiName>transform</apiName><shortdesc conref="flash.display.DisplayObject#transform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Transform"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#transform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:visible:get"><apiName>visible</apiName><shortdesc conref="flash.display.DisplayObject#visible">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#visible">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EventPriority"><apiName>EventPriority</apiName><shortdesc>
  EventPriority クラスは、EventDispatcher の addEventListener() メソッドの priority 引数の定数値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  EventPriority クラスは、<codeph>priority</codeph> 引数の定数値（EventDispatcher の <codeph>addEventListener()</codeph> メソッド）を定義します。
 
  <p>数値が大きくなるほどイベントリスナーの優先度が高くなります。 優先度が <codeph>N</codeph> のすべてのリスナーは、優先度が <codeph>N - 1</codeph> のリスナーよりも前に処理されます。 複数のリスナーに対して同じ優先度が設定されている場合は、追加された順番でリスナーが処理されます。</p>
 
  <p>優先度には、正数、0、または負数を指定できます。デフォルトの優先度は 0 です。</p>
 
  <p>これらの定数の数値に依存したコードを記述しないでください。これらの数値は Flex の将来のバージョンで変更される可能性があります。</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:EventPriority:BINDING"><apiName>BINDING</apiName><shortdesc>
	  データバインディング式を評価する自動生成のイベントハンドラーは他のイベントハンドラーよりも前に実行する必要があるため、デフォルトより高い優先度が設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>100</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  データバインディング式を評価する自動生成のイベントハンドラーは他のイベントハンドラーよりも前に実行する必要があるため、デフォルトより高い優先度が設定されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:CURSOR_MANAGEMENT"><apiName>CURSOR_MANAGEMENT</apiName><shortdesc>
	  CursorManager のマウスイベントハンドラーは、他のマウスイベントハンドラーよりも前に実行する必要があるため、高い優先度が設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>200</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  CursorManager のマウスイベントハンドラーは、他のマウスイベントハンドラーよりも前に実行する必要があるため、高い優先度が設定されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
	  コンポーネントインスタンスのイベントハンドラーは、デフォルトの優先度 0 で実行されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  コンポーネントインスタンスのイベントハンドラーは、デフォルトの優先度 <codeph>0</codeph> で実行されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:DEFAULT_HANDLER"><apiName>DEFAULT_HANDLER</apiName><shortdesc>
	  一部のコンポーネントは、送出したイベントを自分自身でリッスンし、他のリスナーが preventDefault() メソッドを呼び出して、デフォルトのアクションを実行しないようにそのコンポーネントに通知できるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-50</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  一部のコンポーネントは送出したイベントを自分自身でリッスンし、他のリスナーが <codeph>preventDefault()</codeph> メソッドを呼び出して、デフォルトのアクションを実行しないようにそのコンポーネントに通知できるようにします。 このようなコンポーネントは、他のハンドラーが先に実行され、<codeph>preventDefault()</codeph> を呼び出すことができるように、デフォルトよりも低い優先度でリッスンする必要があります。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:EFFECT"><apiName>EFFECT</apiName><shortdesc>
	  エフェクトをトリガーする自動生成のイベントハンドラーは、コンポーネントインスタンスの他のイベントハンドラーよりも後に実行されるため、デフォルトより低い優先度が設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-100</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  エフェクトをトリガーする自動生成のイベントハンドラーは、コンポーネントインスタンスの他のイベントハンドラーよりも後に実行されるため、デフォルトより低い優先度が設定されます。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFactory"><apiName>IFactory</apiName><shortdesc>
  IFactory インターフェイスは、ClassFactory などのファクトリクラスが実装する必要のあるインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFactory インターフェイスは、ClassFactory などのファクトリクラスが実装する必要のあるインターフェイスを定義します。IFactory 型のオブジェクトは、同じプロパティを持つ別のクラスの複数のインスタンスを作成するために Flex が使用する「ファクトリオブジェクト」です。
 
  <p>例えば、DataGridColumn は IFactory 型の <codeph>itemRenderer</codeph> を持ちます。これは、<codeph>itemRenderer.newInstance()</codeph> を呼び出し、DataGrid の特定の列のセルを作成します。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#ClassFactory"><linktext>mx.core.ClassFactory</linktext></link></related-links><apiOperation id="mx.core:IFactory:mx.core:IFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  IFactory を実装しているクラスによって決められたクラスのインスタンスを作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>新しく作成されたインスタンスです。
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  IFactory を実装しているクラスによって決められたクラスのインスタンスを作成します。
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:DeferredInstanceFromClass"><apiName>DeferredInstanceFromClass</apiName><shortdesc>
  指定されたクラスのインスタンスを作成して返す遅延インスタンスファクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ITransientDeferredInstance</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  指定されたクラスのインスタンスを作成して返す遅延インスタンスファクトリです。 アプリケーションは <codeph>getInstance()</codeph> メソッドを使用して、クラスのインスタンスが初めて必要になったときにそれを作成し、それ以降はインスタンスへの参照を取得します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DeferredInstanceFromFunction"><linktext>DeferredInstanceFromFunction</linktext></link></related-links><apiConstructor id="mx.core:DeferredInstanceFromClass:DeferredInstanceFromClass"><apiName>DeferredInstanceFromClass</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiDesc><codeph>getInstance()</codeph> メソッドは、このクラスのインスタンスを作成して返します。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DeferredInstanceFromClass:getInstance"><apiName>getInstance</apiName><shortdesc>
	 DeferredInstanceFromClass コンストラクターに指定されたクラスのインスタンスが存在しない場合、作成して返します。存在する場合は、そのクラスインスタンスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>DeferredInstanceFromClass コンストラクターに指定されたクラスのインスタンスです。
	  
	  </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
	 DeferredInstanceFromClass コンストラクターに指定されたクラスのインスタンスが存在しない場合、作成して返します。存在する場合は、そのクラスインスタンスを返します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DeferredInstanceFromClass:reset"><apiName>reset</apiName><shortdesc>
      ファクトリーの状態を最初の初期化されていない状態にリセットします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ファクトリーの状態を最初の初期化されていない状態にリセットします。キャッシュされたインスタンスへの参照がクリアされます。
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
  FlexMovieClip は Player の MovieClip クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:MovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexMovieClip は Player の MovieClip クラスのサブクラスです。 <codeph>toString()</codeph> メソッドをオーバーライドして、アプリケーション内の DisplayObject の階層におけるオブジェクトの位置を示したストリングを返します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexMovieClip:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
	 
	  <p><codeph>name</codeph> プロパティを、mx.utils.NameUtils クラスの <codeph>createUniqueName()</codeph> メソッドから返されたストリングに設定します。</p>
	 
	  <p>このストリングは、<codeph>"FlexMovieClip14"</codeph> のように、オブジェクトのクラスと、アプリケーション内で一意の整数が連結された名前になります。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexMovieClip:toString"><apiName>toString</apiName><shortdesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject の階層におけるこのオブジェクトの位置を示したストリングです。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。 このストリングは、<codeph>"MyApp0.HBox5.FlexMovieClip14"</codeph> などの形式であり、mx.utils.NameUtils クラスの <codeph>displayObjectToString()</codeph> メソッドによって、このオブジェクトおよびその先祖の <codeph>name</codeph> プロパティから作成されます。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IUIComponent"><apiName>IUIComponent</apiName><shortdesc>
  IUIComponent インターフェイスは、Flex コンテナまたはリストの子を作成するために実装する必要のある API の基本セットを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IUIComponent インターフェイスは、Flex コンテナまたはリストの子を作成するために実装する必要のある API の基本セットを定義します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>定義されている場合は数値 explicitHeight、定義されていない場合は数値 measuredHeight です。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>定義されている場合は数値 explicitWidth、定義されていない場合は数値 measuredWidth です。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:initialize"><apiName>initialize</apiName><shortdesc>
      オブジェクトを初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      オブジェクトを初期化します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/initialize()"><linktext>mx.core.UIComponent.initialize()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:owns"><apiName>owns</apiName><shortdesc conref="mx.core.UIComponent#owns()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>この UIComponent が子の親であるか、または子を所有している場合は <codeph>true</codeph> になります。
      
      </apiDesc></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>UIComponent です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#owns()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:parentChanged"><apiName>parentChanged</apiName><shortdesc conref="mx.core.UIComponent#parentChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>この UIComponent オブジェクトの親です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#parentChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:setVisible"><apiName>setVisible</apiName><shortdesc conref="mx.core.UIComponent#setVisible()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc><codeph>visible</codeph> プロパティの新しい値です。 <codeph>true</codeph> を指定するとコンポーネントが表示され、<codeph>false</codeph> を指定すると非表示になります。
     
      </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> の場合は、イベントは送出されません。 <codeph>false</codeph> の場合は、コンポーネントが表示されたときに <codeph>show</codeph> イベントが送出され、コンポーネントが非表示になったときに <codeph>hide</codeph> イベントが送出されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#setVisible()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      コンポーネントのテキストにおける 1 行目のベースラインの y 座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントのテキストにおける 1 行目のベースラインの y 座標です。
     
      <p>このプロパティは、<codeph>baseline</codeph> 制約スタイルを実装するために使用します。 また、FormItem のラベルを FormItem 内のコントロールに合わせて配置するためにも使用します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:document:get"><apiName>document</apiName><shortdesc>
      このコンポーネントに関連付けられたドキュメントオブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      このコンポーネントに関連付けられたドキュメントオブジェクトへの参照です。ドキュメントオブジェクトは、Flex アプリケーション、MXML コンポーネント、または ActionScript コンポーネントの階層の最上位にあるオブジェクトです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:enabled:get"><apiName>enabled</apiName><shortdesc>
      コンポーネントがユーザーの操作を受け入れることができるかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントがユーザーの操作を受け入れることができるかどうかを指定します。 <codeph>enabled</codeph> プロパティを <codeph>false</codeph> に設定した後でも、一部のコンポーネントは mouseOver などのマウス操作に応答します。 そのため、UIComponent を完全に無効にするには、<codeph>mouseEnabled</codeph> プロパティの値も <codeph>false</codeph> に設定する必要があります。 あるコンテナに対して <codeph>enabled</codeph> プロパティを <codeph>false</codeph> に設定すると、そのコンテナとそのすべての子がグレー表示になり、それらのコンテナと子には入力できなくなります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      コンポーネントの座標として明示的に指定されたコンポーネントの高さ（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標として明示的に指定されたコンポーネントの高さ（ピクセル単位）です。 高さが明示的に指定されていない場合、この値は <codeph>NaN</codeph> になります。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitHeight"><linktext>mx.core.UIComponent.explicitHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      コンポーネントの座標としてコンポーネントの最大の高さ（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標としてコンポーネントの最大の高さ（ピクセル単位）を指定する数値です。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxHeight"><linktext>mx.core.UIComponent.explicitMaxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      コンポーネントの座標としてコンポーネントの最大の幅（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標としてコンポーネントの最大の幅（ピクセル単位）を指定する数値です。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxWidth"><linktext>mx.core.UIComponent.explicitMaxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc>
      コンポーネントの座標としてコンポーネントの最小の高さ（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標としてコンポーネントの最小の高さ（ピクセル単位）を指定する数値です。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMinHeight"><linktext>mx.core.UIComponent.explicitMinHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc>
      コンポーネントの座標としてコンポーネントの最小の幅（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標としてコンポーネントの最小の幅（ピクセル単位）を指定する数値です。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMinWidth"><linktext>mx.core.UIComponent.explicitMinWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      コンポーネントの座標として明示的に指定されたコンポーネントの幅（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標として明示的に指定されたコンポーネントの幅（ピクセル単位）です。 幅が明示的に指定されていない場合、この値は <codeph>NaN</codeph> になります。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitWidth"><linktext>mx.core.UIComponent.explicitWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      複数のコンポーネント間で共有され、フォーカスインジケーター描画のオーバーレイとして使用される単一の Sprite オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      複数のコンポーネント間で共有され、フォーカスインジケーター描画のオーバーレイとして使用される単一の Sprite オブジェクトです。コンポーネントは、親がフォーカスの設定されたコンポーネントの場合にこのオブジェクトを共有します。コンポーネントが IFocusManagerComponent インターフェイスを実装している場合には共有しません。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/focusPane"><linktext>mx.core.UIComponent.focusPane</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:isPopUp:get"><apiName>isPopUp</apiName><shortdesc conref="mx.core.UIComponent#isPopUp">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isPopUp">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:maxHeight:get"><apiName>maxHeight</apiName><shortdesc>
      コンポーネントの座標としてコンポーネントの最大の高さ（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標としてコンポーネントの最大の高さ（ピクセル単位）を指定する数値です。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/maxHeight"><linktext>mx.core.UIComponent.maxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:maxWidth:get"><apiName>maxWidth</apiName><shortdesc>
      コンポーネントの座標としてコンポーネントの最大の幅（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標としてコンポーネントの最大の幅（ピクセル単位）を指定する数値です。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/maxWidth"><linktext>mx.core.UIComponent.maxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:minHeight:get"><apiName>minHeight</apiName><shortdesc>
      コンポーネントの座標としてコンポーネントの最小の高さ（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標としてコンポーネントの最小の高さ（ピクセル単位）を指定する数値です。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/minHeight"><linktext>mx.core.UIComponent.minHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:minWidth:get"><apiName>minWidth</apiName><shortdesc>
      コンポーネントの座標としてコンポーネントの最小の幅（ピクセル単位）を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの座標としてコンポーネントの最小の幅（ピクセル単位）を指定する数値です。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/minWidth"><linktext>mx.core.UIComponent.minWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:owner:get"><apiName>owner</apiName><shortdesc conref="mx.core.IVisualElement#owner">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#owner">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      コンポーネントの高さを親のサイズに対する比率（パーセンテージ）で指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの高さを親のサイズに対する比率（パーセンテージ）で指定する数値です。 指定できる値は 0 ～ 100 です。     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      コンポーネントの幅を親のサイズに対する比率（パーセンテージ）で指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントの幅を親のサイズに対する比率（パーセンテージ）で指定する数値です。 指定できる値は 0 ～ 100 です。     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:systemManager:get"><apiName>systemManager</apiName><shortdesc>
      このコンポーネントの SystemManager オブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      このコンポーネントの SystemManager オブジェクトへの参照です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc>
      EffectManager によって使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      EffectManager によって使用されます。 コンポーネントが Tween を実行するために EffectManager を使用していない場合は、null 以外の値を返します。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
  FlexTextField は Player の TextField クラスのサブクラスで、UITextField のスーパークラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexTextField は Player の TextField クラスのサブクラスで、UITextField のスーパークラスです。 <codeph>toString()</codeph> メソッドをオーバーライドして、アプリケーション内の DisplayObject の階層におけるオブジェクトの位置を示したストリングを返します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexTextField:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
	 
	  <p><codeph>name</codeph> プロパティを、mx.utils.NameUtils クラスの <codeph>createUniqueName()</codeph> メソッドから返されたストリングに設定します。</p>
	 
	  <p>このストリングは、<codeph>"UITextField18"</codeph> のように、オブジェクトのクラスと、アプリケーション内で一意の整数が連結された名前になります。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexTextField:toString"><apiName>toString</apiName><shortdesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject の階層におけるこのオブジェクトの位置を示したストリングです。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。 このストリングは、<codeph>"MyApp0.HBox5.UITextField18"</codeph> などの形式であり、mx.utils.NameUtils クラスの <codeph>displayObjectToString()</codeph> メソッドによって、このオブジェクトおよびその先祖の <codeph>name</codeph> プロパティから作成されます。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:DragSource"><apiName>DragSource</apiName><shortdesc>
  DragSource クラスには、ドラッグされるデータが格納されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  DragSource クラスには、ドラッグされるデータが格納されます。ドラッグを開始したコントロールのタイプに応じて、データを複数の形式にすることができます。
 
  <p>データの各形式は、ストリングで識別されます。<codeph>hasFormat()</codeph> メソッドを使用して、オブジェクトにその形式のデータがあるかどうかを調べます。 <codeph>dataForFormat()</codeph> メソッドを使用して、指定した形式のデータを取得します。</p>
 
  <p>データを直接追加するには <codeph>addData()</codeph> メソッドを、間接的に追加するには <codeph>addHandler()</codeph> メソッドを使用します。 <codeph>addHandler()</codeph> メソッドは、データが要求された場合に呼び出されるコールバックを登録します。 これは、大規模な計算や変換が必要な、ネイティブでない形式のデータを追加する場合に有効です。 例えば、未処理のサウンドデータがある場合には、MP3 形式ハンドラーを追加できます。 MP3 変換は、MP3 データが要求された場合にのみ実行されます。</p>
  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:DragSource:DragSource"><apiName>DragSource</apiName><shortdesc>
	  コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  コンストラクターです。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DragSource:addData"><apiName>addData</apiName><shortdesc>
	  データ、および対応する形式のストリングをドラッグソースに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>ドラッグデータを指定するオブジェクトです。String、DataProvider など、任意のオブジェクトを使用できます。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>このデータの形式を記述するラベルを指定するストリングです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  データ、および対応する形式のストリングをドラッグソースに追加します。このメソッドは値を返しません。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:addHandler"><apiName>addHandler</apiName><shortdesc>
	  指定した形式のデータが要求されたときに呼び出されるハンドラーを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>handler</apiItemName><apiType value="Function"/><apiDesc>データを要求するために呼び出されるハンドラーを指定する関数です。 この関数では、指定された形式のデータが返される必要があります。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>このデータの形式を指定するストリングです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  指定した形式のデータが要求されたときに呼び出されるハンドラーを追加します。 これは、大量のデータがドラッグされる場合に有効です。このハンドラーは、データが要求された場合にのみ呼び出されます。 このメソッドは値を返しません。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:dataForFormat"><apiName>dataForFormat</apiName><shortdesc>
	  指定された形式のデータを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>要求された形式のデータを含むオブジェクトです。複数のアイテムをドラッグすると、戻り値は配列になります。リストベースコントロールの場合は、含まれるのが 1 つのアイテムのみであっても、戻り値は常に配列になります。
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>返すデータの形式を記述するラベルを指定するストリングです。<codeph>addData()</codeph> メソッドでカスタムドロップターゲットを作成する場合は、このストリングをカスタム値にすることができます。 
	  <p>リストベースコントロールには、<codeph>format</codeph> パラメーターの定義済みの値があります。ドラッグ操作を開始したコントロールがツリーの場合、形式は "treeItems" であり、アイテムは ITreeDataProvider インターフェイスを実装します。ビルトインドラッグ &amp; ドロップがサポートされている他のすべてのリストベースコントロールでは、形式は "items" であり、アイテムは IDataProvider インターフェイスを実装します。</p>
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  指定された形式のデータを取得します。データが <codeph>addData()</codeph> メソッドによって追加された場合は、データが直接返されます。データが <codeph>addHandler()</codeph> メソッドによって追加された場合は、データを返すためにハンドラー関数が呼び出されます。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:hasFormat"><apiName>hasFormat</apiName><shortdesc>
	  要求された形式がデータソースに含まれる場合は true を返し、それ以外の場合は false を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>要求された形式がデータソースに含まれる場合は <codeph>true</codeph> を返します。
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>データの形式を記述するラベルを指定するストリングです。 
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  要求された形式がデータソースに含まれる場合は <codeph>true</codeph> を返し、それ以外の場合は <codeph>false</codeph> を返します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:DragSource:formats:get"><apiName>formats</apiName><shortdesc>
	  ドラッグデータの形式が、ストリングの配列として含まれます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
	  ドラッグデータの形式が、ストリングの配列として含まれます。 このプロパティは、<codeph>addData()</codeph> または <codeph>addHandler()</codeph> メソッドを使用して設定します。 デフォルト値は DragSource オブジェクトに追加されるデータに依存します。
	 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRawChildrenContainer"><apiName>IRawChildrenContainer</apiName><shortdesc>
  IRawChildrenContainer インターフェイスは、すべての子を表した IChildList を返すことができるコンテナの API を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IRawChildrenContainer インターフェイスは、すべての子を表した IChildList を返すことができるコンテナの API を定義します。 このインターフェイスを実装する必要があるのは、実際の子のサブセットだけを管理するために、<codeph>numChildren</codeph> メソッドや <codeph>addChild()</codeph> メソッドなどの IChildList API をオーバーライドしているコンテナです。 例えば、mx.core.Container クラスは、コンテンツである子の他に、コンテンツでない子（境界線、タイトルバー、仕切りなど）を持っています。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link></related-links><apiValue id="mx.core:IRawChildrenContainer:mx.core:IRawChildrenContainer:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
	  すべての子を表した IChildList を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  すべての子を表した IChildList を返します。FocusManager はこれを使用して、依然としてフォーカスを取得している可能性のある、コンテンツでない子を見つけます（例えば、ControlBar のコンポーネントなど）。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
  FlexBitmap は Player の Bitmap クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Bitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexBitmap は Player の Bitmap クラスのサブクラスです。 <codeph>toString()</codeph> メソッドをオーバーライドして、アプリケーション内の DisplayObject の階層におけるオブジェクトの位置を示したストリングを返します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexBitmap:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>ビットマップのデータです。 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>ビットマップが最も近いピクセルに吸着されるかどうかを示します。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>ビットマップを伸縮するときにスムージングするかどうかを示します。 
	 
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
	 
	  <p><codeph>name</codeph> プロパティを、mx.utils.NameUtils クラスの <codeph>createUniqueName()</codeph> メソッドから返されたストリングに設定します。 このストリングは、<codeph>"FlexBitmap12"</codeph> のように、オブジェクトのクラスと、アプリケーション内で一意の整数が連結された名前になります。</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexBitmap:toString"><apiName>toString</apiName><shortdesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject の階層におけるこのオブジェクトの位置を示したストリングです。 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  アプリケーションの DisplayObject の階層におけるこのオブジェクトの位置を示すストリングを返します。 このストリングは、<codeph>"MyApp0.HBox5.FlexBitmap12"</codeph> などの形式であり、mx.utils.NameUtils クラスの <codeph>displayObjectToString()</codeph> メソッドによって、このオブジェクトおよびその先祖の <codeph>name</codeph> プロパティから作成されます。
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IMXMLObject"><apiName>IMXMLObject</apiName><shortdesc>
  IMXMLObject インターフェイスは、MXML コンパイラーを正しく機能させるためにビジュアルではないコンポーネントが 実装する必要のある API を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IMXMLObject インターフェイスは、MXML コンパイラーを正しく機能させるためにビジュアルではないコンポーネントが 実装する必要のある API を定義します。 現時点ではサポートされているメソッドは、<codeph>initialized()</codeph> メソッドのみです。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IMXMLObject:mx.core:IMXMLObject:initialized"><apiName>initialized</apiName><shortdesc>
      実装オブジェクトが作成され、MXML タグに指定されたすべてのコンポーネントプロパティが初期化された後に呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>このオブジェクトを作成した MXML ドキュメントです。
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc><codeph>document</codeph> がこのオブジェクトを参照するために使用する識別子です。 オブジェクトが <codeph>document</codeph> の deep プロパティである場合、<codeph>id</codeph> は null になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      実装オブジェクトが作成され、MXML タグに指定されたすべてのコンポーネントプロパティが初期化された後に呼び出されます。
	 
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:FlexVersion"><apiName>FlexVersion</apiName><shortdesc> 
  このクラスは、フレームワークの後方互換性を制御します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
  このクラスは、フレームワークの後方互換性を制御します。新しくリリースされるたびに、動作、スタイル、デフォルト設定など、アプリケーションに影響を与える可能性のあるフレームワークのいくつかの特性が変更されます。 <codeph>compatibilityVersion</codeph> プロパティを設定することで、以前のリリースに適合するように動作を変更できます。 これは "グローバル" フラグです。あるバージョンを 1 つのコンポーネントまたはコンポーネントのグループに適用し、さらに異なるバージョンを別のコンポーネントまたはコンポーネントのグループに適用することはできません。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:FlexVersion:CURRENT_VERSION"><apiName>CURRENT_VERSION</apiName><shortdesc> 
      uint としてエンコードされた Flex SDK の現在のリリースバージョンです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      uint としてエンコードされた Flex SDK の現在のリリースバージョンです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_2_0"><apiName>VERSION_2_0</apiName><shortdesc> 
      uint として数値でエンコードされた Flex 2.0 の compatibilityVersion 値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex 2.0 の <codeph>compatibilityVersion</codeph> 値です（<codeph>uint</codeph> として数値でエンコードしたもの）。 コードでこの定数を <codeph>compatibilityVersion</codeph> と比較して、バージョン固有の動作を実装できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_2_0_1"><apiName>VERSION_2_0_1</apiName><shortdesc> 
      uint として数値でエンコードされた Flex 2.0.1 の compatibilityVersion 値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000001</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex 2.0.1 の <codeph>compatibilityVersion</codeph> 値です（<codeph>uint</codeph> として数値でエンコードしたもの）。 コードでこの定数を <codeph>compatibilityVersion</codeph> と比較して、バージョン固有の動作を実装できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_3_0"><apiName>VERSION_3_0</apiName><shortdesc> 
      uint として数値でエンコードされた Flex 3.0 の compatibilityVersion 値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x03000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex 3.0 の <codeph>compatibilityVersion</codeph> 値です（<codeph>uint</codeph> として数値でエンコードしたもの）。 コードでこの定数を <codeph>compatibilityVersion</codeph> と比較して、バージョン固有の動作を実装できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_0"><apiName>VERSION_4_0</apiName><shortdesc> 
      uint として数値でエンコードされた Flex 4.0 の compatibilityVersion 値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Flex 4.0 の <codeph>compatibilityVersion</codeph> 値です（<codeph>uint</codeph> として数値でエンコードしたもの）。 コードでこの定数を <codeph>compatibilityVersion</codeph> と比較して、バージョン固有の動作を実装できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_ALREADY_READ"><apiName>VERSION_ALREADY_READ</apiName><shortdesc>
      互換性バージョンが既に読み取られている場合、compatibilityErrorFunction() メソッドにパラメーターとして渡されるストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>versionAlreadyRead</apiData><apiType value="String"/></apiValueDef><apiDesc>
      互換性バージョンが既に読み取られている場合、<codeph>compatibilityErrorFunction()</codeph> メソッドにパラメーターとして渡されるストリングです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_ALREADY_SET"><apiName>VERSION_ALREADY_SET</apiName><shortdesc>
      互換性バージョンが既に設定されている場合、compatibilityErrorFunction() メソッドにパラメーターとして渡されるストリングです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>versionAlreadySet</apiData><apiType value="String"/></apiValueDef><apiDesc>
      互換性バージョンが既に設定されている場合、<codeph>compatibilityErrorFunction()</codeph> メソッドにパラメーターとして渡されるストリングです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityErrorFunction:get"><apiName>compatibilityErrorFunction</apiName><shortdesc> 
      互換性バージョンが複数回設定された場合、または読み込んだ後に設定された場合に呼び出される関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      互換性バージョンが複数回設定された場合、または読み込んだ後に設定された場合に呼び出される関数です。この関数が設定されていない場合、SDK は例外をスローします。設定されている場合、ファイルでこの関数が呼び出されますが、その呼び出しを処理する方法は開発者が指定する必要があります。この関数は、関数が複数回設定された場合にも呼び出されます。 この関数は 2 つのパラメーターを受け取ります。1 つ目は <codeph>uint</codeph> であり、設定しようとしたバージョンを表します。2 つ目は失敗した理由を示すストリングで、<codeph>VERSION_ALREADY_SET</codeph> または <codeph>VERSION_ALREADY_READ</codeph> になります。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityVersion:get"><apiName>compatibilityVersion</apiName><shortdesc> 
      フレームワークが互換性を維持している現在のバージョンです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="uint"/><apiDefaultValue>FlexVersion.CURRENT_VERSION
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      フレームワークが互換性を維持している現在のバージョンです。 デフォルトは <codeph>CURRENT_VERSION</codeph> です。 変更は 1 回だけ可能です。2 回目の変更を試みると、すでに存在する場合は <codeph>compatibilityErrorFunction()</codeph> メソッドが呼び出され、それ以外の場合はランタイムエラーが発生します。 <codeph>compatibilityVersion</codeph> プロパティが読み取られた後で変更すると、そのバージョンに依存するコードが既に実行されているため、エラーが発生します。 通知はありません。一度だけ設定すること、およびそのバージョンに依存するコードがまだ実行されていないような早い時期に設定することが前提となります。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityVersionString:get"><apiName>compatibilityVersionString</apiName><shortdesc> 
      "X.X.X" の形式のストリングで表した互換性バージョンです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      "X.X.X" の形式のストリングで表した互換性バージョンです。 これは <codeph>compatibilityVersion</codeph> プロパティに渡され、数値から、もっとわかりやすいストリングバージョンに変換されます。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IToolTip"><apiName>IToolTip</apiName><shortdesc>
  IToolTip インターフェイスは、ツールヒントに似たコンポーネントが ToolTipManager を使用するために実装する必要のある API を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IToolTip インターフェイスは、ツールヒントに似たコンポーネントが ToolTipManager を使用するために実装する必要のある API を定義します。 ToolTip クラスはこのインターフェイスを実装します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link></related-links><apiValue id="mx.core:IToolTip:mx.core:IToolTip:screen:get"><apiName>screen</apiName><shortdesc>
	  このツールヒントの基本的な描画面のサイズと位置を指定する矩形です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
	  このツールヒントの基本的な描画面のサイズと位置を指定する矩形です。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IToolTip:mx.core:IToolTip:text:get"><apiName>text</apiName><shortdesc>
	  ツールヒントに表示するテキストです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  ツールヒントに表示するテキストです。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IStateClient2"><apiName>IStateClient2</apiName><shortdesc>
  IStateClient2 インターフェイスは、Flex 4 ビューステートのセマンティックをサポートするためにコンポーネントに実装する必要のあるインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IStateClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IStateClient2 インターフェイスは、Flex 4 ビューステートのセマンティックをサポートするためにコンポーネントに実装する必要のあるインターフェイスを定義します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IStateClient2:mx.core:IStateClient2:hasState"><apiName>hasState</apiName><shortdesc>
      指定されたステートがこの UIComponent で定義されているかどうかを判別します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定されたステートが定義されているかどうかを示します。 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>検査するステートの名前。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定されたステートがこの UIComponent で定義されているかどうかを判別します。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IStateClient2:mx.core:IStateClient2:states:get"><apiName>states</apiName><shortdesc>
      ビューステートオブジェクトのセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      ビューステートオブジェクトのセットです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IStateClient2:mx.core:IStateClient2:transitions:get"><apiName>transitions</apiName><shortdesc>
      ビューステートトランジションのセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      ビューステートトランジションのセットです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:LayoutContainer"><apiName>LayoutContainer</apiName><shortdesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、モジュールまたはアプリケーションにコンテンツを追加することができます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="direction"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  上境界線とコンテンツ領域との間のピクセル数です。 
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  下境界線とコンテンツ領域との間のピクセル数です。  
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  子同士の垂直方向の間隔を示すピクセル数です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  子同士の水平方向の間隔を示すピクセル数です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の垂直方向の配置です。 有効な値は、<codeph>"top"</codeph>、<codeph>"middle"</codeph> および <codeph>"bottom"</codeph> です。 デフォルト値は <codeph>"top"</codeph> ですが、ButtonBar、ControlBar、LinkBar、ToggleButtonBar のようにこれ以外のデフォルト値になるコンテナもあります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="String">
<description>
  このコンテナに含まれる子の水平方向の配置です。 有効な値は <codeph>"left"</codeph>、<codeph>"center"</codeph> および <codeph>"right"</codeph> です。 デフォルト値は <codeph>"left"</codeph> ですが、ButtonBar や ToggleButtonBar のようにこれ以外のデフォルト値になるコンテナもあります。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Application
    <strong>Properties</strong>
    layout="vertical|horizontal|absolute"
    xmlns:<i>No default</i>="<i>No default</i>"
 
    <strong>Styles</strong> 
    horizontalAlign="center|left|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|bottom|middle"
    verticalGap="6"
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex ではデフォルトのコンテナ（Application コンテナ）が定義されるため、別のコンテナを明示的に定義することなく、モジュールまたはアプリケーションにコンテンツを追加することができます。 このコンテナは、MXML アプリケーションファイルの最初のタグである <codeph>&lt;mx:Application></codeph> タグ、または MXML モジュールファイルの最初のタグである <codeph>&lt;mx:Module></codeph> タグから作成されます。 Application または Module コンテナを、アプリケーション内で使用する唯一のコンテナにした方が好都合のようにも思われますが、ほとんどの場合は、アプリケーションまたはモジュールにコントロールを追加する前に、少なくとももう 1 つのコンテナを明示的に定義することになります。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><apiConstructor id="mx.core:LayoutContainer:LayoutContainer"><apiName>LayoutContainer</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:LayoutContainer:protected:boxLayoutClass"><apiName>boxLayoutClass</apiName><shortdesc>
      レイアウトを行う mx.containers.utilityClasses.Layout サブクラスです。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      レイアウトを行う mx.containers.utilityClasses.Layout サブクラスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:protected:canvasLayoutClass"><apiName>canvasLayoutClass</apiName><shortdesc>
      レイアウトを行う mx.containers.utilityClasses.Layout サブクラスです。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      レイアウトを行う mx.containers.utilityClasses.Layout サブクラスです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:layout:get"><apiName>layout</apiName><shortdesc>
      このアプリケーションに使用されるレイアウトメカニズムを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"vertical"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      このアプリケーションに使用されるレイアウトメカニズムを指定します。 アプリケーションでは、<codeph>"vertical"</codeph>、<codeph>"horizontal"</codeph> または <codeph>"absolute"</codeph> の配置を使用できます。 vertical の配置では、アプリケーションの上部から下部へ垂直に、指定された順序で各子コンポーネントをレイアウトします。 horizontal の配置では、アプリケーションの左から右へ水平に、指定された順序で各子コンポーネントをレイアウトします。absolute の配置では、自動レイアウトは行われないので、各子コンポーネントの位置を明示的に定義する必要があります。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DeferredInstanceFromFunction"><apiName>DeferredInstanceFromFunction</apiName><shortdesc>
  ジェネレーター関数を使用して、必要なオブジェクトのインスタンスを作成する遅延インスタンスファクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ITransientDeferredInstance</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ジェネレーター関数を使用して、必要なオブジェクトのインスタンスを作成する遅延インスタンスファクトリです。 アプリケーションは <codeph>getInstance()</codeph> メソッドを使用して、オブジェクトのインスタンスが初めて必要になったときにそれを作成し、それ以降はオブジェクトへの参照を取得します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DeferredInstanceFromClass"><linktext>DeferredInstanceFromClass</linktext></link></related-links><apiConstructor id="mx.core:DeferredInstanceFromFunction:DeferredInstanceFromFunction"><apiName>DeferredInstanceFromFunction</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Function"/><apiDesc>必要なオブジェクトのインスタンスを作成して返す関数です。
      
      </apiDesc></apiParam><apiParam><apiItemName>destructor</apiItemName><apiType value="Function"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DeferredInstanceFromFunction:getInstance"><apiName>getInstance</apiName><shortdesc>
	 必要なオブジェクトのインスタンスへの参照を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>オブジェクトのインスタンスです。
	  
	  </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
	 必要なオブジェクトのインスタンスへの参照を返します。必要なオブジェクトのインスタンスがない場合は、このクラスの <codeph>generator</codeph> コンストラクターパラメーターに指定された関数を呼び出します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DeferredInstanceFromFunction:reset"><apiName>reset</apiName><shortdesc>
      ファクトリーの状態を最初の初期化されていない状態にリセットします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      ファクトリーの状態を最初の初期化されていない状態にリセットします。キャッシュされたインスタンスへの参照がクリアされます。
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:SWFBridgeGroup"><apiName>SWFBridgeGroup</apiName><shortdesc>
  SWFBridgeGroup は、アプリケーションが親および子と通信するために必要なすべてのサンドボックスブリッジを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFBridgeGroup</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  SWFBridgeGroup は、アプリケーションが親および子と通信するために必要なすべてのサンドボックスブリッジを表します。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SWFBridgeGroup:SWFBridgeGroup"><apiName>SWFBridgeGroup</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>owner</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>このグループを所有する DisplayObject です。これは、アプリケーションの SystemManager である必要があります。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SWFBridgeGroup:addChildBridge"><apiName>addChildBridge</apiName><shortdesc>
	  
      新しいブリッジをポッドに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>子コンテンツと通信するためのブリッジです。
     
      </apiDesc></apiParam><apiParam><apiItemName>bridgeProvider</apiItemName><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier><apiDesc>ブリッジで表されるコンテンツをロードした DisplayObject です。通常、これは SWFLoader クラスのインスタンスになります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      新しいブリッジをポッドに追加します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:containsBridge"><apiName>containsBridge</apiName><shortdesc>
	  
      特定のブリッジがこのグループのサンドボックスブリッジの 1 つであるかどうかをテストします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ハンドルが見つかった場合には <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> になります。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>テストするブリッジです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      特定のブリッジがこのグループのサンドボックスブリッジの 1 つであるかどうかをテストします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:getChildBridgeProvider"><apiName>getChildBridgeProvider</apiName><shortdesc>
	  
      ブリッジの所有者と、子をロードした DisplayObject も取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>子をロードしたオブジェクトです。 
      
      </apiDesc><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>ターゲットブリッジです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      ブリッジの所有者と、子をロードした DisplayObject も取得します。このメソッドは、イベントが受信され、<codeph>event.target</codeph> がブリッジの場合に役立ちます。ブリッジは、所有している DisplayObject に変換できます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:getChildBridges"><apiName>getChildBridges</apiName><shortdesc>
	  
      このグループ内のすべての子ブリッジを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このグループ内のすべての子ブリッジの配列です。配列内の各オブジェクトは、<codeph>IEventDispatcher</codeph> 型です。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
	  
      このグループ内のすべての子ブリッジを取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc>
	  
      子ブリッジを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>削除するブリッジです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      子ブリッジを削除します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SWFBridgeGroup:parentBridge:get"><apiName>parentBridge</apiName><shortdesc>
      親が異なるサンドボックスにある場合に、親との通信を許可します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      親が異なるサンドボックスにある場合に、親との通信を許可します。親が同じサンドボックスにあるか、これが最上位レベルのルートアプリケーションの場合は、<codeph>null</codeph> になることがあります。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IIMESupport"><apiName>IIMESupport</apiName><shortdesc>
  IIMESupport インターフェイスは、IME（入力メソッドエディター）をサポートするあらゆるコンポーネントに対するインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IIMESupport インターフェイスは、IME（入力メソッドエディター）をサポートするあらゆるコンポーネントに対するインターフェイスを定義します。 IME を使用すると、中国語、日本語、および韓国語の文字を入力できます。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.system.IME.xml"><linktext>flash.system.IME</linktext></link></related-links><apiValue id="mx.core:IIMESupport:mx.core:IIMESupport:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      このコンポーネントにフォーカスがあるときに IME を有効にするかどうかを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      このコンポーネントにフォーカスがあるときに IME を有効にするかどうかを指定します。コンポーネントが IME を使用する場合でも、すべての設定に IME が含まれるとは限りません。例えば、<codeph>editable</codeph> が <codeph>false</codeph> に設定されている TextArea では、enableIME が false に設定されます。これは、その設定で入力が許可されていないからです。同様に、DataGrid は enableIME を常に false に設定します。DataGrid が ItemEditor を提示する場合、そのエディターの <codeph>enableIME</codeph> は <codeph>true</codeph> に設定されます。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IIMESupport:mx.core:IIMESupport:imeMode:get"><apiName>imeMode</apiName><shortdesc>
	  コンポーネントの IME モードです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  コンポーネントの IME モードです。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredInstantiationUIComponent"><apiName>IDeferredInstantiationUIComponent</apiName><shortdesc>
  IDeferredInstantiationUIComponent インターフェイスは、インスタンス化を保留するコンポーネントまたはオブジェクトのためのインターフェイスを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IDeferredInstantiationUIComponent インターフェイスは、インスタンス化を保留するコンポーネントまたはオブジェクトのためのインターフェイスを定義します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:createReferenceOnParentDocument"><apiName>createReferenceOnParentDocument</apiName><shortdesc>
      この IUIComponent オブジェクトへの id 参照を親ドキュメントオブジェクト上に作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>この IUIComponent オブジェクトの親です。 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      この IUIComponent オブジェクトへの <codeph>id</codeph> 参照を親ドキュメントオブジェクト上に作成します。 この関数は、b[2][4] のように Repeater 内にあるオブジェクトに対する多次元参照を作成できます。 インデックスが null の場合は、単純な、配列ではない参照を作成します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:deleteReferenceOnParentDocument"><apiName>deleteReferenceOnParentDocument</apiName><shortdesc>
      この IUIComponent オブジェクトへの id 参照を親ドキュメントオブジェクトから削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>この IUIComponent オブジェクトの親です。 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      この IUIComponent オブジェクトへの <codeph>id</codeph> 参照を親ドキュメントオブジェクトから削除します。 この関数は、b[2][4] のように Repeater 内にあるオブジェクトに対する多次元参照を削除できます。 インデックスが null の場合は、単純な、配列ではない参照を削除します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:executeBindings"><apiName>executeBindings</apiName><shortdesc conref="mx.core.UIComponent#executeBindings()">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>このコンポーネントの子に対して再帰的にバインディングを実行します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#executeBindings()">
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:registerEffects"><apiName>registerEffects</apiName><shortdesc>
	  エフェクトイベントごとに、イベントリスナーの 1 つとして EffectManager を登録します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>エフェクト名のストリングの配列です。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  エフェクトイベントごとに、イベントリスナーの 1 つとして EffectManager を登録します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:cachePolicy:get"><apiName>cachePolicy</apiName><shortdesc conref="mx.core.UIComponent#cachePolicy">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#cachePolicy">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:descriptor:get"><apiName>descriptor</apiName><shortdesc conref="mx.core.UIComponent#descriptor">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:UIComponentDescriptor</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#descriptor">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:id:get"><apiName>id</apiName><shortdesc conref="mx.core.UIComponent#id">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#id">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:cacheHeuristic:set"><apiName>cacheHeuristic</apiName><shortdesc conref="mx.core.UIComponent#cacheHeuristic">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#cacheHeuristic">
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:Repeater"><apiName>Repeater</apiName><shortdesc>
  Repeater クラスは &amp;lt;mx:Repeater&amp;gt; タグに対応するランタイムオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The &lt;Repeater&gt; class has the following properties:</p>
 
  <pre>
  &lt;mx:Repeater
    <strong>Properties</strong>
    id="<i>No default</i>"
    childDescriptors="<i>No default</i>"
    count="<i>No default</i>"
    dataProvider="<i>No default</i>"
    recycleChildren="false|true"
    startingIndex="0"
 
    <strong>Events</strong>
    repeat="<i>No default</i>"
    repeatEnd="<i>No default</i>"
    repeatStart="<i>No default</i>"
  &gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IRepeater</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Repeater クラスは <codeph>&lt;mx:Repeater></codeph> タグに対応するランタイムオブジェクトです。 このクラスは、その dataProvider に基づいて、自分のサブコンポーネントの複数のインスタンスを作成します。 標準またはカスタムの任意のコントロールまたはコンテナを、コンポーネントとして繰り返し使用できます。
 
  <p><codeph>&lt;mx:Repeater></codeph> タグは、コントロールタグまたはコンテナタグを記述できる場所ならどこにでも使用できます（<codeph>&lt;mx:Application></codeph> コンテナタグを除く）。 ユーザーインターフェイスコンポーネントを繰り返し使用するには、タグを <codeph>&lt;mx:Repeater></codeph> タグの中に置きます。 MXML ドキュメントでは、複数の <codeph>&lt;mx:Repeater></codeph> タグを使用できます。 <codeph>&lt;mx:Repeater></codeph> タグをネストすることも可能です。</p>
 
  <p>UIComponent クラスを拡張していないオブジェクトに <codeph>&lt;mx:Repeater></codeph> タグを使用することはできません。</p>
 
  </apiDesc><example conref="RepeaterExample.mxml"><swfblock conref="examples/RepeaterExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_START_repeatStart"><apiName>repeatStart</apiName><shortdesc>
  Flex が dataProvider プロパティの処理を開始し、指定されたサブコンポーネントの作成を開始したときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT_START</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Flex が <codeph>dataProvider</codeph> プロパティの処理を開始し、指定されたサブコンポーネントの作成を開始したときに送出されます。 このイベントは、<codeph>dataProvider</codeph> プロパティが空または <codeph>null</codeph> の場合でもトリガーされます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_END_repeatEnd"><apiName>repeatEnd</apiName><shortdesc>
  Repeater のすべてのサブコンポーネントが作成された後に送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT_END</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Repeater のすべてのサブコンポーネントが作成された後に送出されます。 このイベントは、<codeph>dataProvider</codeph> プロパティが空または <codeph>null</codeph> の場合でもトリガーされます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_repeat"><apiName>repeat</apiName><shortdesc>
  アイテムが処理され、currentIndex および currentItem プロパティが更新されるたびに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  アイテムが処理され、<codeph>currentIndex</codeph> および <codeph>currentItem</codeph> プロパティが更新されるたびに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Repeater:Repeater"><apiName>Repeater</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Repeater:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
     
      この Repeater が作成したすべての UIComponent へのバインディングを実行します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      この Repeater が作成したすべての UIComponent へのバインディングを実行します。
	 
	  <p>このメソッドは、Flex フレームワークによって呼び出されます。開発者がこのメソッドを呼び出す必要はありません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Repeater:initializeRepeater"><apiName>initializeRepeater</apiName><shortdesc>
     
      新規の Repeater オブジェクトを初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.core:IContainer</apiOperationClassifier><apiDesc>この Repeater を含むコンテナであり、ここでこの Repeater が子を作成します。
	 
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>この Repeater がその子のすべての子孫を作成するかどうかを示す Boolean フラグです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      新規の Repeater オブジェクトを初期化します。
	 
	  <p>このメソッドは、Flex フレームワークによって呼び出されます。開発者がこのメソッドを呼び出す必要はありません。</p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:Repeater:childDescriptors"><apiName>childDescriptors</apiName><shortdesc>
      この Repeater の子に対する UIComponentDescriptor オブジェクトの配列です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      この Repeater の子に対する UIComponentDescriptor オブジェクトの配列です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:container:get"><apiName>container</apiName><shortdesc>
      この Repeater を含むコンテナです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IContainer</apiValueClassifier></apiValueDef><apiDesc>
      この Repeater を含むコンテナです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:count:get"><apiName>count</apiName><shortdesc>
     
      この Repeater を実行する回数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
     
      この Repeater を実行する回数です。
	 
      <p>Repeater が実行中にデータプロバイダーの最後に達した場合、実際の実行回数は要求されたカウントよりも少なくなります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:currentIndex:get"><apiName>currentIndex</apiName><shortdesc>
     
      この Repeater の実行中、現在処理されている dataProvider 内のアイテムのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
     
      この Repeater の実行中、現在処理されている <codeph>dataProvider</codeph> 内のアイテムのインデックスです。
	 
	  <p>Repeater が実行を終了した後は、このプロパティの値は <codeph>-1</codeph> になります。 ただし、繰り返しコンポーネントのインスタンスの <codeph>repeaterIndex</codeph> プロパティは、作成元の <codeph>dataProvider</codeph> アイテムのインデックスを記憶しています。 ネストされた Repeater の場合は、<codeph>repeaterIndices</codeph> 配列を使用できます。</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:currentItem:get"><apiName>currentItem</apiName><shortdesc>
     
      この Repeater の実行中、現在処理されている dataProvider 内のアイテムです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
     
      この Repeater の実行中、現在処理されている <codeph>dataProvider</codeph> 内のアイテムです。
	 
	  <p>Repeater が実行を終了した後は、このプロパティの値は <codeph>null</codeph> になります。 ただしこの場合は、繰り返しコンポーネントのインスタンスの <codeph>getRepeaterItem()</codeph> メソッドを呼び出して、作成元の <codeph>dataProvider</codeph> アイテムを取得できます。</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
     
      この Repeater が、子の繰り返しインスタンスを作成するために使用するデータプロバイダーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
     
      この Repeater が、子の繰り返しインスタンスを作成するために使用するデータプロバイダーです。
	  
	  <p><codeph>dataProvider</codeph> プロパティを参照すると、常に ICollectionView オブジェクトか、または <codeph>null</codeph> が取得されます。 <codeph>dataProvider</codeph> プロパティを <codeph>null</codeph> 以外の値に設定すると、その値は以下の規則に従って ICollectionView オブジェクトに変換されます。</p>
	 
	  <ul>
	    <li>Array に設定すると、ArrayCollection に変換されます。</li>
	    <li>ICollectionView に設定すると、変換は実行されません。</li>
	    <li>IList に設定すると、ListCollectionView に変換されます。</li>
	    <li>XML または XMLList に設定すると、XMLListCollection に変換されます。</li>
	    <li>それ以外の場合は、単一エレメントの ArrayCollection に変換されます。</li>
	  </ul>
     
      <p>Repeater コンポーネントを実行するには、<codeph>dataProvider</codeph> プロパティの値を指定する必要があります。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:recycleChildren:get"><apiName>recycleChildren</apiName><shortdesc>
     
      この Repeater が前に作成した子を再使用するのか、新しい子を作成するのかを示す Boolean フラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     
      この Repeater が前に作成した子を再使用するのか、新しい子を作成するのかを示す Boolean フラグです。
	 
	  <p><codeph>true</codeph> の場合、この Repeater の <codeph>dataProvider</codeph>、<codeph>startingIndex</codeph> または <codeph>count</codeph> が変更されると、新規データを既存の子にバインドすることにより、既存の子が再利用されます。 追加の子が必要な場合は、作成され、追加されます。 子が多すぎる場合には、余分な子が削除され、ガベージコレクションされます。</p>
     
      <p><codeph>false</codeph> の場合、この Repeater の <codeph>dataProvider</codeph>、<codeph>startingIndex</codeph> または <codeph>count</codeph> が変更されると、この Repeater は前に作成した子を削除し、新しいデータアイテムから新たに子を作成して、追加します。</p>
	 
	  <p>このプロパティのデフォルト値は <codeph>false</codeph> です。 <codeph>true</codeph> に設定するとパフォーマンスが向上しますが、この設定がどのような状況においても適切であるとは限りません。 例えば、前に作成した子がユーザー入力のテキストなどの状態情報を持っている場合、この状態は子が再使用されたときにリセットされません。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:startingIndex:get"><apiName>startingIndex</apiName><shortdesc>
     
      この Repeater が子の作成を開始する dataProvider へのインデックスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
     
      この Repeater が子の作成を開始する <codeph>dataProvider</codeph> へのインデックスです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFontContextComponent"><apiName>IFontContextComponent</apiName><shortdesc>
  コンポーネントでフォントコンテキストプロパティをサポートできるようにします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  コンポーネントでフォントコンテキストプロパティをサポートできるようにします。このプロパティは、表示リストに子が追加されたときに、フレームワークによってコンポーネントに対して設定されます。フォントコンテキストは、埋め込みフォントを使用して flash.text.TextField オブジェクトを作成するコンポーネントにおいて重要です。Font.registerFont() を使用して埋め込みフォントが登録されていない場合、TextField オブジェクトは、埋め込みフォントのコンテキストで作成されていないと、埋め込みフォントを使用できません。このインターフェイスは、コンポーネントのフォントコンテキストを追跡できるようにします。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IFontContextComponent:mx.core:IFontContextComponent:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      このコンポーネントのフォントコンテキストを提供するモジュールファクトリです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      このコンポーネントのフォントコンテキストを提供するモジュールファクトリです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFBridgeGroup"><apiName>ISWFBridgeGroup</apiName><shortdesc>
  サンドボックスブリッジグループは、このアプリケーションが通信できるアプリケーションを表すブリッジのグループです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  サンドボックスブリッジグループは、このアプリケーションが通信できるアプリケーションを表すブリッジのグループです。このアプリケーションは、グループ内の他のアプリケーションとのメモリの共有や、他のアプリケーションへのアクセスはできず、ブリッジを使用してこれらのアプリケーションと通信します。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:addChildBridge"><apiName>addChildBridge</apiName><shortdesc>
      新しいブリッジをポッドに追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>子コンテンツと通信するためのブリッジです。
     
      </apiDesc></apiParam><apiParam><apiItemName>bridgeProvider</apiItemName><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier><apiDesc>ブリッジで表されるコンテンツをロードした DisplayObject です。通常、これは SWFLoader クラスのインスタンスになります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      新しいブリッジをポッドに追加します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:containsBridge"><apiName>containsBridge</apiName><shortdesc>
      特定のブリッジがこのグループのサンドボックスブリッジの 1 つであるかどうかをテストします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>ハンドルが見つかった場合には <codeph>true</codeph>、それ以外の場合は <codeph>false</codeph> になります。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>テストするブリッジです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      特定のブリッジがこのグループのサンドボックスブリッジの 1 つであるかどうかをテストします。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:getChildBridgeProvider"><apiName>getChildBridgeProvider</apiName><shortdesc>
      ブリッジの所有者と、子をロードした DisplayObject も取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>子をロードしたオブジェクトです。 
      
      </apiDesc><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>ターゲットブリッジです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      ブリッジの所有者と、子をロードした DisplayObject も取得します。このメソッドは、イベントが受信され、<codeph>event.target</codeph> がブリッジの場合に役立ちます。ブリッジは、所有している DisplayObject に変換できます。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:getChildBridges"><apiName>getChildBridges</apiName><shortdesc>
      このグループ内のすべての子ブリッジを取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このグループ内のすべての子ブリッジの配列です。配列内の各オブジェクトは、<codeph>IEventDispatcher</codeph> 型です。
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      このグループ内のすべての子ブリッジを取得します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc>
      子ブリッジを削除します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>削除するブリッジです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      子ブリッジを削除します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:parentBridge:get"><apiName>parentBridge</apiName><shortdesc>
      このグループの親アプリケーションとの通信に使用されるブリッジです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      このグループの親アプリケーションとの通信に使用されるブリッジです。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ILayoutElement"><apiName>ILayoutElement</apiName><shortdesc>
  ILayoutElement インターフェイスは、GroupBase ベースのコンテナのエレメントを照会、サイズ設定および位置設定するために、主にレイアウトクラスで使用されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  ILayoutElement インターフェイスは、GroupBase ベースのコンテナのエレメントを照会、サイズ設定および位置設定するために、主にレイアウトクラスで使用されます。
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      エレメントの境界の x 座標を、指定したエレメントサイズで返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>エレメントの境界の幅、または推奨幅を使用するための NaN です。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>エレメントの境界の高さ、または推奨高さを使用するための NaN です。
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの左上隅の x 座標を返します。境界ボックスは、エレメントの親の座標空間内にあり、指定した境界サイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントの境界の x 座標を、指定したエレメントサイズで返します。このメソッドは通常、エレメントが特定のサイズに変更される場合にエレメントの位置を予測するために、measure() 時にレイアウトによって使用されます。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutBoundsSize"><linktext>setLayoutBoundsSize</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutPositionX"><linktext>getLayoutPositionX</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      エレメントの境界の y 座標を、指定したエレメントサイズで返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>エレメントの境界の幅、または推奨幅を使用するための NaN です。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>エレメントの境界の高さ、または推奨高さを使用するための NaN です。
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの左上隅の y 座標を返します。境界ボックスは、エレメントの親の座標空間内にあり、指定した境界サイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントの境界の y 座標を、指定したエレメントサイズで返します。このメソッドは通常、エレメントが特定のサイズに変更される場合にエレメントの位置を予測するために、measure() 時にレイアウトによって使用されます。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutBoundsSize"><linktext>setLayoutBoundsSize</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutPositionY"><linktext>getLayoutPositionY</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsHeight"><apiName>getLayoutBoundsHeight</apiName><shortdesc>
      エレメントのレイアウトの高さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの幅を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントのレイアウトの高さを返します。これは、画面に描画するためにエレメントで使用するサイズです。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutWidth"><linktext>getLayoutWidth</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsWidth"><apiName>getLayoutBoundsWidth</apiName><shortdesc>
      エレメントのレイアウトの幅を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの幅を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントのレイアウトの幅を返します。これは、画面に描画するためにエレメントで使用するサイズです。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutHeight"><linktext>getLayoutHeight</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsX"><apiName>getLayoutBoundsX</apiName><shortdesc>
      画面に描画するためにエレメントで使用する x 座標を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの左上隅の x 座標を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      画面に描画するためにエレメントで使用する x 座標を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutPositionY"><linktext>getLayoutPositionY</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsY"><apiName>getLayoutBoundsY</apiName><shortdesc>
      画面に描画するためにエレメントで使用する y 座標を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの左上隅の y 座標を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      画面に描画するためにエレメントで使用する y 座標を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutPositionX"><linktext>getLayoutPositionX</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutMatrix"><apiName>getLayoutMatrix</apiName><shortdesc>
      兄弟を基準としてコンポーネントのレイアウトを計算するために使用される変換マトリックスを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><p>このエレメントのレイアウト変換 Matrix を返します。戻り値を直接変更せずに、setLayoutMatrix を呼び出してください。</p>
     
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef><apiDesc>
      兄弟を基準としてコンポーネントのレイアウトを計算するために使用される変換マトリックスを返します。
     
      <p>このマトリックスは通常、コンポーネントの 2D プロパティで定義されます。プロパティには、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>rotation</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>transformX</codeph> および <codeph>transformY</codeph> などがあります。一部のコンポーネントには、追加の変換プロパティがある場合があります。これらのプロパティは、レイアウトマトリックスの上に適用され、最終的な計算されたマトリックスが決定されます。例えば、<codeph>UIComponent</codeph> では <codeph>offsets</codeph> プロパティが定義されます。</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutMatrix"><linktext>setLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D"><linktext>setLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/offsets"><linktext>mx.core.UIComponent.offsets</linktext></link><link href="" invalidHref="mx.graphics.baseClasses.xml#GraphicElement/offsets"><linktext>mx.graphics.baseClasses.GraphicElement.offsets</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutMatrix3D"><apiName>getLayoutMatrix3D</apiName><shortdesc>
      このエレメントのレイアウト変換 Matrix3D を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><p>このエレメントのレイアウト変換 Matrix3D を返します。戻り値を直接変更せずに、setLayoutMatrix を呼び出してください。</p>
      
      </apiDesc><apiType value="flash.geom:Matrix3D"/></apiReturn></apiOperationDef><apiDesc>
      このエレメントのレイアウト変換 Matrix3D を返します。
     
      <p>このマトリックスは通常、コンポーネントの変換プロパティで定義されます。プロパティには、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>z</codeph>、<codeph>rotationX</codeph>、<codeph>rotationY</codeph>、<codeph>rotationZ</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>scaleZ</codeph>、<codeph>transformX</codeph> および <codeph>transformY</codeph> などがあります。一部のコンポーネントには、追加の変換プロパティがある場合があります。これらのプロパティは、レイアウトマトリックスの上に適用され、最終的な計算されたマトリックスが決定されます。例えば、<codeph>UIComponent</codeph> では <codeph>offsets</codeph> プロパティが定義されます。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix"><linktext>setLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D"><linktext>setLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/offsets"><linktext>mx.core.UIComponent.offsets</linktext></link><link href="" invalidHref="mx.graphics.baseClasses.xml#GraphicElement/offsets"><linktext>mx.graphics.baseClasses.GraphicElement.offsets</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMaxBoundsHeight"><apiName>getMaxBoundsHeight</apiName><shortdesc>
      エレメントの最大の高さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの高さを返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの最大サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントの最大の高さを返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMaxWidth"><linktext>getMaxWidth</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMaxBoundsWidth"><apiName>getMaxBoundsWidth</apiName><shortdesc>
      エレメントの最大の幅を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの幅を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの最大サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントの最大の幅を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMaxHeight"><linktext>getMaxHeight</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMinBoundsHeight"><apiName>getMinBoundsHeight</apiName><shortdesc>
      エレメントの最小の高さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの高さを返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの最小サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントの最小の高さを返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMinWidth"><linktext>getMinWidth</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMinBoundsWidth"><apiName>getMinBoundsWidth</apiName><shortdesc>
      エレメントの最小の幅を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの幅を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの最小サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントの最小の幅を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMinHeight"><linktext>getMinHeight</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getPreferredBoundsHeight"><apiName>getPreferredBoundsHeight</apiName><shortdesc>
      エレメントの推奨高さを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エレメントの推奨高さを返します。推奨高さは通常、デフォルトのエレメントサイズと明示的なオーバーライドに基づきます。UIComponent の場合、この値は getExplicitOrMeasuredHeight() と同じです。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの高さを返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの推奨サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントの推奨高さを返します。  
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getPreferredWidth"><linktext>getPreferredWidth</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getPreferredBoundsWidth"><apiName>getPreferredBoundsWidth</apiName><shortdesc>
      エレメントの推奨幅を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>エレメントの推奨幅を返します。推奨幅は通常、デフォルトのエレメントサイズと明示的なオーバーライドに基づきます。UIComponent の場合、この値は getExplicitOrMeasuredWidth() と同じです。
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、このメソッドは、エレメントの境界ボックスの幅を返します。境界ボックスは、エレメントの親の座標空間内にあり、エレメントの推奨サイズおよびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      エレメントの推奨幅を返します。   
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getPreferredHeight"><linktext>getPreferredHeight</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutBoundsPosition"><apiName>setLayoutBoundsPosition</apiName><shortdesc>
      画面に描画するためにエレメントで使用する座標を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>postLayoutTransform が true の場合、エレメントは、境界ボックスの左上隅が (x, y) になるように配置されます。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。setLayoutSize を呼び出すとレイアウト位置に影響を与える可能性があるので、setLayoutPosition は setLayoutSize の後に呼び出す必要があります。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
      画面に描画するためにエレメントで使用する座標を設定します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutSize"><linktext>setLayoutSize</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutBoundsSize"><apiName>setLayoutBoundsSize</apiName><shortdesc>
      レイアウトサイズを指定したサイズに設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>ターゲットの幅です。
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>ターゲットの高さです。
     
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>postLayoutTransform が true の場合、指定したサイズは、エレメントの境界ボックスのサイズです。境界ボックスは、エレメントの親の座標空間内にあり、エレメントのレイアウトサイズ、レイアウト位置およびレイアウト変換マトリックスから計算されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      レイアウトサイズを指定したサイズに設定します。これは、画面に描画するためにエレメントで使用するサイズです。いずれかのサイズが指定されないまま（NaN）の場合、そのサイズは、他のサイズに合わせて最適なサイズになるように選択されます。これは、エレメントの幅と高さが相互に関連している場合など（テキスト、複雑な変換を持つコンポーネントなど）、呼び出し元がエレメントに制約を加え過ぎないようにする場合に役立ちます。両方のサイズが指定されないままの場合、エレメントのレイアウトサイズは推奨サイズに設定されます。<codeph>setLayoutSize</codeph> は、最小サイズまたは最大サイズを切り詰めません。setLayoutSize を呼び出すとレイアウト位置に影響を与える可能性があるため、setLayoutSize は setLayoutPosition の前に呼び出す必要があります。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutPosition"><linktext>setLayoutPosition</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutMatrix"><apiName>setLayoutMatrix</apiName><shortdesc>
      兄弟を基準としてコンポーネントのレイアウトサイズおよび位置を計算するために使用される変換 Matrix を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix"/></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      兄弟を基準としてコンポーネントのレイアウトサイズおよび位置を計算するために使用される変換 Matrix を設定します。
     
      <p>このマトリックスは通常、コンポーネントの 2D プロパティで定義されます。プロパティには、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>rotation</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>transformX</codeph> および <codeph>transformY</codeph> などがあります。一部のコンポーネントには、追加の変換プロパティがある場合があります。これらのプロパティは、レイアウトマトリックスの上に適用され、最終的な計算されたマトリックスが決定されます。例えば、<codeph>UIComponent</codeph> では <codeph>offsets</codeph> が定義されます。</p>
      
      <p>レイアウト Matrix は、親の座標での計算時に getPreferredSize()、getMinSize()、getMaxSize()、getLayoutSize() に反映されます。また、親および子の座標での計算時に getLayoutPosition() に反映されます。変換マトリックスを計算するレイアウトは通常、このメソッドを明示的に呼び出し、子の座標でサイズを処理します。このメソッドを呼び出すレイアウトは、<codeph>invalidateLayout</codeph> に <codeph>false</codeph> を渡して、後続のレイアウトパスがトリガーされないようにします。</p>
     
      <p>このメソッドを直接呼び出す開発者は通常、<codeph>invalidateLayout</codeph> に <codeph>true</codeph> を渡して、子の再レイアウトが必要であることを親コンテナに通知するようにします。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D"><linktext>setLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/offsets"><linktext>mx.core.UIComponent.offsets</linktext></link><link href="" invalidHref="mx.graphics.baseClasses.xml#GraphicElement/offsets"><linktext>mx.graphics.baseClasses.GraphicElement.offsets</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutMatrix3D"><apiName>setLayoutMatrix3D</apiName><shortdesc>
      兄弟を基準としてコンポーネントのレイアウトサイズおよび位置を計算するために使用される変換 Matrix3D を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix3D"/></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      兄弟を基準としてコンポーネントのレイアウトサイズおよび位置を計算するために使用される変換 Matrix3D を設定します。
     
      <p>このマトリックスは通常、コンポーネントの変換プロパティで定義されます。プロパティには、<codeph>x</codeph>、<codeph>y</codeph>、<codeph>z</codeph>、<codeph>rotationX</codeph>、<codeph>rotationY</codeph>、<codeph>rotationZ</codeph>、<codeph>scaleX</codeph>、<codeph>scaleY</codeph>、<codeph>scaleZ</codeph>、<codeph>transformX</codeph> および <codeph>transformY</codeph> などがあります。一部のコンポーネントには、追加の変換プロパティがある場合があります。これらのプロパティは、レイアウトマトリックスの上に適用され、最終的な計算されたマトリックスが決定されます。例えば、<codeph>UIComponent</codeph> では <codeph>offsets</codeph> プロパティが定義されます。</p>
      
      <p>レイアウト Matrix3D は、親の座標での計算時に getPreferredSize()、getMinSize()、getMaxSize()、getLayoutSize() に反映されます。また、親および子の座標での計算時に getLayoutPosition() に反映されます。変換マトリックスを計算するレイアウトは通常、このメソッドを明示的に呼び出し、子の座標でサイズを処理します。このメソッドを呼び出すレイアウトは、<codeph>invalidateLayout</codeph> に <codeph>false</codeph> を渡して、後続のレイアウトパスがトリガーされないようにします。</p>
     
      <p>このメソッドを直接呼び出す開発者は通常、<codeph>invalidateLayout</codeph> に <codeph>true</codeph> を渡して、子の再レイアウトが必要であることを親コンテナに通知するようにします。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix"><linktext>setLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/offsets"><linktext>mx.core.UIComponent.offsets</linktext></link><link href="" invalidHref="mx.graphics.baseClasses.xml#GraphicElement/offsets"><linktext>mx.graphics.baseClasses.GraphicElement.offsets</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:transformAround"><apiName>transformAround</apiName><shortdesc>
     コンポーネントの独自の座標空間内で指定され、親の座標空間内に固定される、特定のポイントを保持して変換の回転、拡大 / 縮小および平行移動を更新するためのユーティリティメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transformCenter</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>親との相対位置を固定したままにするための、コンポーネントの独自の座標内のポイントです。
     </apiDesc></apiParam><apiParam><apiItemName>scale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>変換の拡大 / 縮小の新しい値です。
     </apiDesc></apiParam><apiParam><apiItemName>rotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>変換の回転の新しい値です。
     </apiDesc></apiParam><apiParam><apiItemName>translation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>変換の平行移動の新しい値です。
     </apiDesc></apiParam><apiParam><apiItemName>postLayoutScale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>変換のレイアウト後の拡大 / 縮小に使用する新しい値です。
     </apiDesc></apiParam><apiParam><apiItemName>postLayoutRotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>変換のレイアウト後の回転に使用する新しい値です。
     </apiDesc></apiParam><apiParam><apiItemName>postLayoutTranslation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>変換のレイアウト後の平行移動に使用する新しい値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     コンポーネントの独自の座標空間内で指定され、親の座標空間内に固定される、特定のポイントを保持して変換の回転、拡大 / 縮小および平行移動を更新するためのユーティリティメソッドです。この関数は、指定された回転、拡大 / 縮小および平行移動の値を割り当てた後、変換の中心を固定したままにするために、必要に応じて x/y/z プロパティを更新します。
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:baseline:get"><apiName>baseline</apiName><shortdesc>
      アンカーターゲットからコントロールのベースライン位置までの垂直距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      アンカーターゲットからコントロールのベースライン位置までの垂直距離（ピクセル単位）です。デフォルトでは、アンカーターゲットはコンテナのコンテンツ領域の上端です。拡張制約が設定されたレイアウトでは、ターゲットを制約行にできます。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "anchorTargetName:value"（例："row1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      コンポーネントのテキストにおける 1 行目のベースラインの y 座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      コンポーネントのテキストにおける 1 行目のベースラインの y 座標です。
     
      <p>このプロパティは、<codeph>baseline</codeph> 制約スタイルを実装するために使用します。 また、FormItem のラベルを FormItem 内のコントロールに合わせて配置するためにも使用します。</p>
     
      <p>このプロパティは、各コンポーネントによってオーバーライドされます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:bottom:get"><apiName>bottom</apiName><shortdesc>
      コンポーネントの下端からアンカーターゲットの下端までの垂直距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンポーネントの下端からアンカーターゲットの下端までの垂直距離（ピクセル単位）です。デフォルトでは、アンカーターゲットはコンテナのコンテンツ領域です。拡張制約が設定されたレイアウトでは、ターゲットを制約行にできます。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "anchorTargetName:value"（例："row1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:hasLayoutMatrix3D:get"><apiName>hasLayoutMatrix3D</apiName><shortdesc>
      エレメントが 3D マトリックスを持つ場合は True です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      エレメントが 3D マトリックスを持つ場合は True です。エレメントが 2D でも有効なマトリックスが返されるので、<codeph> getLayoutMatrix3D()</codeph> を呼び出して値を確認する代わりに、<codeph>hasLayoutMatrix3D</codeph> を使用します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:horizontalCenter:get"><apiName>horizontalCenter</apiName><shortdesc>
      コンポーネントの中心からアンカーターゲットのコンテンツ領域の中心までの水平距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンポーネントの中心からアンカーターゲットのコンテンツ領域の中心までの水平距離（ピクセル単位）です。デフォルトのアンカーターゲットはコンテナ自体です。拡張制約が設定されたレイアウトでは、アンカーターゲットを制約列にできます。この場合、コンテンツ領域は、先行する列（またはコンテナ側）とターゲット列の間隔になります。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "constraintColumnId:value"（例："col1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:left:get"><apiName>left</apiName><shortdesc>
      コンポーネントの左端からアンカーターゲットの左端までの水平距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンポーネントの左端からアンカーターゲットの左端までの水平距離（ピクセル単位）です。デフォルトでは、アンカーターゲットはコンテナのコンテンツ領域です。拡張制約が設定されたレイアウトでは、ターゲットを制約列にできます。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "anchorTargetName:value"（例："col1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      コンポーネントの高さを親のサイズに対する比率（パーセンテージ）で指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンポーネントの高さを親のサイズに対する比率（パーセンテージ）で指定する数値です。 指定できる値は 0 ～ 100 です。 <codeph>height</codeph> プロパティまたは <codeph>explicitHeight</codeph> プロパティを設定すると、このプロパティが NaN にリセットされます。
     
      <p>このプロパティは、前に設定されている場合にのみ数値を返します。コンポーネントの正確なサイズをパーセンテージで示しているわけではありません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      コンポーネントの幅を親のサイズに対する比率（パーセンテージ）で指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンポーネントの幅を親のサイズに対する比率（パーセンテージ）で指定する数値です。指定できる値は 0 ～ 100 です。<codeph>width</codeph> プロパティまたは <codeph>explicitWidth</codeph> プロパティを設定すると、このプロパティが NaN にリセットされます。
     
      <p>このプロパティは、前に設定されている場合にのみ数値を返します。コンポーネントの正確なサイズをパーセンテージで示しているわけではありません。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:right:get"><apiName>right</apiName><shortdesc>
      コンポーネントの右端からアンカーターゲットの右端までの水平距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンポーネントの右端からアンカーターゲットの右端までの水平距離（ピクセル単位）です。デフォルトでは、アンカーターゲットはコンテナのコンテンツ領域です。拡張制約が設定されたレイアウトでは、ターゲットを制約列にできます。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "anchorTargetName:value"（例："col1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:top:get"><apiName>top</apiName><shortdesc>
      コンポーネントの上端からアンカーターゲットの上端までの垂直距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンポーネントの上端からアンカーターゲットの上端までの垂直距離（ピクセル単位）です。デフォルトでは、アンカーターゲットはコンテナのコンテンツ領域です。拡張制約が設定されたレイアウトでは、ターゲットを制約行にできます。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "anchorTargetName:value"（例："row1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:verticalCenter:get"><apiName>verticalCenter</apiName><shortdesc>
      コンポーネントの中心からアンカーターゲットのコンテンツ領域の中心までの垂直距離（ピクセル単位）です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      コンポーネントの中心からアンカーターゲットのコンテンツ領域の中心までの垂直距離（ピクセル単位）です。デフォルトのアンカーターゲットはコンテナ自体です。拡張制約が設定されたレイアウトでは、アンカーターゲットを制約行にできます。この場合、コンテンツ領域は、先行する行（またはコンテナ側）とターゲット行の間隔になります。このプロパティに数値または「10」のような数値文字列を設定すると、デフォルトのアンカーターゲットの使用方法を指定できます。アンカーターゲットを指定するには、プロパティ値に文字列を "constraintColumnId:value"（例："row1:10"）という形式で設定します。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContainerCreationPolicy"><apiName>ContainerCreationPolicy</apiName><shortdesc>
  ContainerCreationPolicy クラスは、Container クラスの creationPolicy プロパティの定数値を定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ContainerCreationPolicy クラスは、Container クラスの <codeph>creationPolicy</codeph> プロパティの定数値を定義します。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link></related-links><apiValue id="mx.core:ContainerCreationPolicy:ALL"><apiName>ALL</apiName><shortdesc>
	  すべての子孫を直ちに作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  すべての子孫を直ちに作成します。
	 
	  <p>アプリケーションの起動時間が長引くため、この <codeph>creationPolicy</codeph> は使用しないでください。 通常、ユーザーが見ることができないコンポーネントを起動時に作成するための妥当な理由はありません。 起動時に非表示のコンポーネントにデータを「プッシュ」できるようにこのポリシーを使用している場合は、データ変数にデータを格納し、後で作成されるコンポーネントがデータバインディングまたは <codeph>initialize</codeph> ハンドラーによってこのデータを取り込むようにアプリケーションの設計を変更してください。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
	  一部またはすべての子孫の作成を、それらが必要になるまで保留にします。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  一部またはすべての子孫の作成を、それらが必要になるまで保留にします。
	 
	  <p>例えば、TabNavigator などのナビゲーターコンテナがこの <codeph>creationPolicy</codeph> を持つ場合、すべての子、および初期状態で選択されている子の子孫を直ちに作成します。 ただし、それ以外の子の子孫については、ユーザーが使用するまで作成を保留します。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:NONE"><apiName>NONE</apiName><shortdesc>
	  子を作成しません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  子を作成しません。
	 
	  <p>この <codeph>creationPolicy</codeph> を使用する場合、プログラムで親コンテナの <codeph>createComponentsFromDescriptors()</codeph> を呼び出し、UIComponentDescriptor から子を作成するのは開発者の責任になります。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:QUEUED"><apiName>QUEUED</apiName><shortdesc>
	  作成キューにコンテナを追加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>queued</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  作成キューにコンテナを追加します。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UITextField"><apiName>UITextField</apiName><shortdesc>
  UITextField クラスは、多くの Flex コンポーネントがテキストを表示するために使用するコンポーネントを定義します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="yes" name="textIndent" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:UITextField" playerVersion="Flash10" type="Class">
<description>
  IUITextField を実装するクラスです。このクラスはテキストをレンダリングするためにこのコンポーネントで使用されます。
 
  <p>mx.core.UITextField クラス（Flash Player に組み込まれている標準の TextField を使用する場合）または mx.core.UIFTETextField クラス（Text Layout Framework を使用して、双方向レイアウトなどの向上したテキストレンダリングを取得する場合）のいずれかに設定できます。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 有効な値は、<codeph>"left"</codeph>、<codeph>"right"</codeph> または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコンポーネントのデフォルト値は <codeph>"left"</codeph> です。 FormItem コンポーネントの場合、デフォルト値は <codeph>"right"</codeph> です。 Button、LinkButton および AccordionHeader コンポーネントでは、デフォルト値は <codeph>"center"</codeph> です。このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合のみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:UITextField" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストのロケールです。
 
  <p>FTE および TLF はこのロケールを使用して Unicode 文字をフォント字形にマッピングしたり、フォールバックフォントを検索したりします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:UITextField" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>）か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込みフォントに対してのみサポートされています。Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 有効な値は <codeph>normal</codeph> と <codeph>bold</codeph> です。 Button コントロールのデフォルト値は <codeph>bold</codeph> です。 他のすべてのコントロールのデフォルト値は <codeph>normal</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 有効な値は -200 ～ 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 有効な値は -400 ～ 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 有効な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>） および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 有効な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> であり、フォントについて高度なアンチエイリアスが有効になります。 <codeph>"normal"</codeph> に設定すると、高度なアンチエイリアスが無効になります。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:UITextField" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:UITextField" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストの方向です。
 
  <p>使用できる値は、ラテン文字などの左から右のテキスト用の <codeph>"ltr"</codeph> と、アラビア文字やヘブライ文字などの右から左のテキスト用の <codeph>"rtl"</codeph> です。</p>
 
  <p>FTE と TLF は双方向テキストレイアウトアルゴリズムでこの値を使用し、Unicode 文字の順序を字形の順序にマッピングします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  <p><codeph>direction</codeph> は、TLFTextField の境界内のテキストの整列にも影響します。ただし、コンポーネント内の TLFTextField の配置には影響しません。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:UITextField" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  コンポーネントの右境界線からコンテンツ領域の右端までのピクセル数です。
  <p>デフォルト値は 0 です。</p>
  <p/>
  <p>ComboBox コントロールのデフォルト値は 5 です。</p>
  <p>Form コンテナのデフォルト値は 16 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  コンポーネントの左境界線からコンテンツ領域の左端までのピクセル数です。
  <p>デフォルト値は 0 です。</p>
  <p/>
  <p>ComboBox コントロールのデフォルト値は 5 です。</p>
  <p>Form コンテナのデフォルト値は 16 です。</p>
  <p>Tree コントロールのデフォルト値は 2 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  追加の行間を表します。
 
  <p>デフォルト値は 2 です。</p>
  <p>ComboBox コントロールのデフォルト値は 0 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUITextField</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  UITextField クラスは、多くの Flex コンポーネントがテキストを表示するために使用するコンポーネントを定義します。 例えば、mx.controls.Button コントロールは、UITextField コンポーネントを使用して Button コントロールのラベル領域を定義します。 
 
  <p>UITextField クラスは flash.text.TextField クラスを拡張し、CSS スタイル、無効化／測定／レイアウト、有効化／無効化、ツールヒント、中国語、日本語、韓国語テキスト入力のための IME（Input Method Editor）サポートなど、Flex が必要とする追加機能をサポートします。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="mx.core.xml#UITextFormat"><linktext>mx.core.UITextFormat</linktext></link></related-links><apiConstructor id="mx.core:UITextField:UITextField"><apiName>UITextField</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:UITextField:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>定義されている場合は数値 explicitHeight、定義されていない場合は数値 measuredHeight です。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>定義されている場合は数値 explicitWidth、定義されていない場合は数値 measuredWidth です。
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UIComponent#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>スタイル値です。
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>スタイルプロパティの名前です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getTextStyles"><apiName>getTextStyles</apiName><shortdesc>
      この UITextField オブジェクトの文字フォーマット情報を表す TextFormat オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>TextFormat オブジェクト。 
     
      </apiDesc><apiType value="flash.text:TextFormat"/></apiReturn></apiOperationDef><apiDesc>
      この UITextField オブジェクトの文字フォーマット情報を表す TextFormat オブジェクトを返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextFormat.xml"><linktext>flash.text.TextFormat</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:getUITextFormat"><apiName>getUITextFormat</apiName><shortdesc>
      このコンポーネントのフォーマット情報を含む UITextFormat オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>このコンポーネントのフォーマット情報を持つオブジェクトです。
     
      </apiDesc><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントのフォーマット情報を含む UITextFormat オブジェクトを返します。このメソッドは、flash.text.TextField クラスの <codeph>getTextFormat()</codeph> メソッドに似ていますが、TextFormat オブジェクトではなく UITextFormat オブジェクトを返します。
     
      <p>UITextFormat クラスは TextFormat クラスを拡張し、テキスト測定メソッドの <codeph>measureText()</codeph> および <codeph>measureHTMLText()</codeph> を追加します。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UITextFormat"><linktext>mx.core.UITextFormat</linktext></link><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:initialize"><apiName>initialize</apiName><shortdesc>
      このコンポーネントを初期化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントを初期化します。
     
      <p>これは IUIComponent インターフェイスが必要とするメソッドですが、UITextField に対しては実際には何もしません。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc conref="mx.core.UIComponent#invalidateDisplayList()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateDisplayList()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc conref="mx.core.UIComponent#invalidateProperties()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateSize"><apiName>invalidateSize</apiName><shortdesc conref="mx.core.UIComponent#invalidateSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateSize()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:move"><apiName>move</apiName><shortdesc conref="mx.core.UIComponent#move()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>親の内部の、コンポーネントの左の位置です。
      
       </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>親の内部の、コンポーネントの上の位置です。
       
       </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#move()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:owns"><apiName>owns</apiName><shortdesc>
      子の親がこのオブジェクトである場合、または子がこのオブジェクトに所有されている場合に、true を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>UITextField オブジェクトが子の親であるか、子を所有している場合は <codeph>true</codeph> になります。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>子の DisplayObject です。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      子の親がこのオブジェクトである場合、または子がこのオブジェクトに所有されている場合に、<codeph>true</codeph> を返します。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UITextField/owner"><linktext>owner</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:parentChanged"><apiName>parentChanged</apiName><shortdesc>
      この関数は、UITextField オブジェクトに親が割り当てられたときに呼び出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>この UITextField オブジェクトの親です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この関数は、UITextField オブジェクトに親が割り当てられたときに呼び出されます。通常はこのメソッドを呼び出す必要はありません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      
      指定されたイベントを再生します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>再生が正常に完了した場合は、<codeph>true</codeph> です。  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>再生するイベントです。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      指定されたイベントを再生します。 デフォルトの再生動作がスーパークラスで定義されている場合、コンポーネント作成者は super.replayAutomatableEvent を呼び出すはずです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setActualSize"><apiName>setActualSize</apiName><shortdesc conref="mx.core.UIComponent#setActualSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>オブジェクトの幅を表します。
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>オブジェクトの高さを表します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#setActualSize()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setColor"><apiName>setColor</apiName><shortdesc>
      テキストのフォントの色を設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>新しいフォントカラーです。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      テキストのフォントの色を設定します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setFocus"><apiName>setFocus</apiName><shortdesc conref="mx.core.UIComponent#setFocus()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#setFocus()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setStyle"><apiName>setStyle</apiName><shortdesc>
      何もしません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>スタイルプロパティの名前です。
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>スタイルの新しい値です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      何もしません。UITextField にはインラインスタイルは定義できません。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setVisible"><apiName>setVisible</apiName><shortdesc>
      この UITextField オブジェクトの visible プロパティを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph> にするとこの UITextField は可視になり、<codeph>false</codeph> にすると不可視になります。
     
      </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> にすると、可視性を変更したときにイベントの生成が抑制されます。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この UITextField オブジェクトの <codeph>visible</codeph> プロパティを設定します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:styleChanged"><apiName>styleChanged</apiName><shortdesc conref="mx.core.UIComponent#styleChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>スタイルプロパティの名前です。このコンポーネントのすべてのスタイルが変更された場合は、null になります。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#styleChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:truncateToFit"><apiName>truncateToFit</apiName><shortdesc>
      コントロールに定義された領域に水平方向に収まるようテキストを切り詰めて、省略記号つまり 3 つのピリオド（...）をテキストに付加します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>テキストの切り詰めが必要になった場合は <codeph>true</codeph> になります。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>切り詰めの後に追加されるテキストです。 <codeph>null</codeph> を渡すと、<codeph>"..."</codeph> のようなローカライズ可能なストリングが使用されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      コントロールに定義された領域に水平方向に収まるようテキストを切り詰めて、省略記号つまり 3 つのピリオド（...）をテキストに付加します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:validateNow"><apiName>validateNow</apiName><shortdesc conref="mx.core.UIComponent#validateNow()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#validateNow()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:UITextField:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      オートメーション関連機能を処理する委譲オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      オートメーション関連機能を処理する委譲オブジェクトです。
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      
      このコンポーネントがオートメーション用に有効である場合は true、それ以外の場合は false です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      このコンポーネントがオートメーション用に有効である場合は true、それ以外の場合は false です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationName:get"><apiName>automationName</apiName><shortdesc>
      
      このオブジェクトの識別子として使用できる名前です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      このオブジェクトの識別子として使用できる名前です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      
      オートメーション目的で使用するこのコンポーネントのオーナーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      オートメーション目的で使用するこのコンポーネントのオーナーです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      
      オートメーション目的で使用するこのコンポーネントの親です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      オートメーション目的で使用するこのコンポーネントの親です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationValue:get"><apiName>automationValue</apiName><shortdesc>
      
      この値はオブジェクトのレンダリング表示に対応しています。また、アプリケーションでの視覚表示と同じにするために、識別子とオブジェクトを関連付けるのに使用できます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      この値はオブジェクトのレンダリング表示に対応しています。また、アプリケーションでの視覚表示と同じにするために、識別子とオブジェクトを関連付けるのに使用できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      
      このコンポーネントがオートメーション用に可視である場合は true、それ以外の場合は false です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      このコンポーネントがオートメーション用に可視である場合は true、それ以外の場合は false です。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      テキストの 1 行目のベースラインの y 座標です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      テキストの 1 行目のベースラインの y 座標です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:className:get"><apiName>className</apiName><shortdesc>
      このインスタンスのクラス名です。例えば、"DataGridItemRenderer" などがあります。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      このインスタンスのクラス名です。例えば、<codeph>"DataGridItemRenderer"</codeph> などがあります。
     
      <p>このストリングにはパッケージ名は含まれません。 パッケージ名も必要な場合は、flash.utils パッケージの <codeph>getQualifiedClassName()</codeph> メソッドを呼び出してください。 <codeph>"mx.controls.dataGridClasses::DataGridItemRenderer"</codeph> のようなストリングが返されます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:document:get"><apiName>document</apiName><shortdesc>
      この UITextField オブジェクトに関連付けられたドキュメントオブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      この UITextField オブジェクトに関連付けられたドキュメントオブジェクトへの参照です。ドキュメントオブジェクトは、Flex アプリケーション、MXML コンポーネント、または AS コンポーネントの階層の最上位にあるオブジェクトです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      コンポーネントがフォーカスを得たときに、IME を有効にするかどうかを指定するフラグです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:enabled:get"><apiName>enabled</apiName><shortdesc>
      コンポーネントが有効になっているかどうかを示すブール値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      コンポーネントが有効になっているかどうかを示すブール値です。 このプロパティはテキストの色のみに影響し、UITextField が編集可能かどうかには影響しません。 編集可能かどうかを制御するには、<codeph>flash.text.TextField.type</codeph> プロパティを使用します。
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc conref="mx.core.UIComponent#explicitHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      maxHeight プロパティが設定されている場合に、コンポーネントの座標内におけるコンポーネントの最大の高さ (ピクセル単位) を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      maxHeight プロパティが設定されている場合に、コンポーネントの座標内におけるコンポーネントの最大の高さ (ピクセル単位) を指定する数値です。maxHeight は読み取り専用であるため、このメソッドは NaN を返します。このプロパティを使用するには、このメソッドをオーバーライドし、setter を追加する必要があります。
      
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxHeight"><linktext>mx.core.UIComponent.explicitMaxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      maxWidth プロパティが設定されている場合に、コンポーネントの座標内におけるコンポーネントの最大の幅 (ピクセル単位) を指定する数値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      maxWidth プロパティが設定されている場合に、コンポーネントの座標内におけるコンポーネントの最大の幅 (ピクセル単位) を指定する数値です。maxWidth は読み取り専用であるため、このメソッドは NaN を返します。このプロパティを使用するには、このメソッドをオーバーライドし、setter を追加する必要があります。
      
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxWidth"><linktext>mx.core.UIComponent.explicitMaxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc conref="mx.core.UIComponent#explicitMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc conref="mx.core.UIComponent#explicitMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc conref="mx.core.UIComponent#explicitWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      
      複数のコンポーネント間で共有され、フォーカスインジケーター描画のオーバーレイとして使用される単一の Sprite オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      複数のコンポーネント間で共有され、フォーカスインジケーター描画のオーバーレイとして使用される単一の Sprite オブジェクトです。コンポーネントは、親がフォーカスの設定されたコンポーネントの場合にこのオブジェクトを共有します。コンポーネントが IFocusManagerComponent インターフェイスを実装している場合には共有しません。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:ignorePadding:get"><apiName>ignorePadding</apiName><shortdesc>
      true の場合、paddingLeft および paddingRight スタイルはコンポーネントのテキストの周囲にスペースを追加しません。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>true</codeph> の場合、<codeph>paddingLeft</codeph> および <codeph>paddingRight</codeph> スタイルはコンポーネントのテキストの周囲にスペースを追加しません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      IME（入力メソッドエディター）のモードを指定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      IME（入力メソッドエディター）のモードを指定します。 IME を使用することによって、ユーザーは中国語、日本語、および韓国語のテキストを入力できます。Flex では、コントロールにフォーカスが置かれたときに、IME を指定されたモードに設定し、コントロールからフォーカスが離れたときに、元のモードに戻します。
     
     <p>flash.system.IMEConversionMode クラスで、このプロパティの有効な値の定数を定義します。IME を指定しない場合は、<codeph>null</codeph> を指定します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      この UITextField の継承スタイルのチェーンの先頭です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      この UITextField の継承スタイルのチェーンの先頭です。 <codeph>getStyle()</codeph> メソッドは <codeph>inheritingStyles[styleName]</codeph> にアクセスして、プロトタイプリンクのチェーン全体を検索します。 このオブジェクトは <codeph>initProtoChain()</codeph> メソッドによって設定されます。 通常はこのプロパティに直接アクセスする必要はありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:initialized:get"><apiName>initialized</apiName><shortdesc>
      オブジェクトが 3 段階のレイアウト検証を完了したものであるかどうかを示すフラグです（いずれかの検証が必須であった場合）。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      オブジェクトが 3 段階のレイアウト検証を完了したものであるかどうかを示すフラグです（いずれかの検証が必須であった場合）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:isPopUp:get"><apiName>isPopUp</apiName><shortdesc conref="mx.core.UIComponent#isPopUp">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isPopUp">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:maxHeight:get"><apiName>maxHeight</apiName><shortdesc conref="mx.core.UIComponent#maxHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#maxHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:maxWidth:get"><apiName>maxWidth</apiName><shortdesc conref="mx.core.UIComponent#maxWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#maxWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:minHeight:get"><apiName>minHeight</apiName><shortdesc conref="mx.core.UIComponent#minHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#minHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:minWidth:get"><apiName>minWidth</apiName><shortdesc conref="mx.core.UIComponent#minWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#minWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      TextField を正しい SWF コンテキストで作成するために使用する moduleFactory です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      TextField を正しい SWF コンテキストで作成するために使用する moduleFactory です。これは、埋め込みフォントを機能させるために必要です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UIComponent#nestLevel">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UIComponent#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      この UITextField の非継承スタイルのチェーンの先頭です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      この UITextField の非継承スタイルのチェーンの先頭です。 <codeph>getStyle()</codeph> メソッドは <codeph>nonInheritingStyles[styleName]</codeph> メソッドにアクセスして、プロトタイプリンクのチェーン全体を検索します。 このオブジェクトは <codeph>initProtoChain()</codeph> メソッドによって設定されます。 通常はこのプロパティに直接アクセスする必要はありません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nonZeroTextHeight:get"><apiName>nonZeroTextHeight</apiName><shortdesc>
      textHeight と異なり、これはテキストが空の場合でもゼロ以外の値を返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      textHeight と異なり、これはテキストが空の場合でもゼロ以外の値を返します。この場合、テキストが空でなかったときの textHeight の値を返します。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:owner:get"><apiName>owner</apiName><shortdesc>
      デフォルトでは、このオブジェクトの親コンテナに設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      デフォルトでは、このオブジェクトの親コンテナに設定されます。ただし、このオブジェクトが、ComboBox コントロールのドロップダウンリストのように、親によってポップアップされた子コンポーネントである場合は、このオブジェクトをポップアップしたコンポーネントがオーナーになります。 
     
      <p>このプロパティは、Flex ではなく、各コンポーネントによって管理されます。 したがって、<codeph>PopUpManger.createPopUp()</codeph> メソッドまたは <codeph>PopUpManger.addPopUp()</codeph> メソッドを使用して子コンポーネントをポップアップする場合、子コンポーネントの <codeph>owner</codeph> プロパティは、それをポップアップしたコンポーネントに設定する必要があります。</p>
     
      <p>デフォルト値は、<codeph>parent</codeph> プロパティの値です。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:parent:get"><apiName>parent</apiName><shortdesc>
      このコンポーネントの親コンテナまたは親コンポーネントです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      このコンポーネントの親コンテナまたは親コンポーネントです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:percentHeight:get"><apiName>percentHeight</apiName><shortdesc conref="mx.core.UIComponent#percentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#percentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:percentWidth:get"><apiName>percentWidth</apiName><shortdesc conref="mx.core.UIComponent#percentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#percentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc>
      createChildren() メソッドによって内部的なコンポーネントの子が作成された後、true に設定されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      <codeph>createChildren()</codeph> メソッドによって内部的なコンポーネントの子が作成された後、<codeph>true</codeph> に設定されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:styleName:get"><apiName>styleName</apiName><shortdesc conref="mx.core.UIComponent#styleName">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UIComponent#styleName">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:systemManager:get"><apiName>systemManager</apiName><shortdesc conref="mx.core.UIComponent#systemManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#systemManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:toolTip:get"><apiName>toolTip</apiName><shortdesc conref="mx.core.UIComponent#toolTip">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#toolTip">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc conref="mx.core.UIComponent#tweeningProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.core.UIComponent#tweeningProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      オブジェクトが 3 段階のレイアウト検証を完了したものであるかどうかを示すフラグです（いずれかの検証が必須であった場合）。
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      オブジェクトが 3 段階のレイアウト検証を完了したものであるかどうかを示すフラグです（いずれかの検証が必須であった場合）。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
  MovieClipAsset は、Flash によって作成された SWF ファイルから Flex アプリケーションに埋め込まれたムービークリップシンボルを表す、flash.display.MovieClip クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier>mx.core:FlexMovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipAsset は、Flash によって作成された SWF ファイルから Flex アプリケーションに埋め込まれたムービークリップシンボルを表す、flash.display.MovieClip クラスのサブクラスです。 これにより IFlexDisplayObject インターフェイスが実装され、MovieClip を Image コントロールで表示すること、またはコンテナの背景やコンポーネントスキンとして使用することが可能になります。
 
  <p>埋め込む MovieClip は、SWF ファイル内にあるムービークリップシンボルであることが必要です。埋め込まれたムービークリップを使用するのは、一般に、Flash でフレームベースのアニメーションを作成し、それを Flex アプリケーションで使用することが多いためです。MXML コンパイラーは、埋め込まれたアニメーションを表すように MovieClipAsset を拡張するクラスを自動生成します。</p>
 
  <p>通常は、Flex アプリケーションを作成するときに MovieClipAsset クラスを直接使用する必要はありません。例えば、次のように記述することにより、ムービークリップアニメーションをアプリケーションの背景イメージとして使用できます。</p>
 
  <pre>
  &lt;mx:Application backgroundImage="@Embed(source='Assets.swf', symbol='BackgroundAnimation')"/></pre>
 
  <p>または</p>
 
  <pre>
  &lt;mx:Style>
      Application
      {
          backgroundImage: Embed(source="Assets.swf", symbol="BackgroundAnimation")
      }
  &lt;mx:Style/></pre>
 
  <p>MXML コンパイラーによって MovieClipAsset のサブクラスが作成されたことを認識しておく必要はありません。</p>
 
  <p>ただし、ActionScript レベルで何が行われているのかを理解しておくことは有益です。 ムービークリップを ActionScript に埋め込むには、Class 型の変数を宣言し、この変数の前に <codeph>[Embed]</codeph> メタデータを挿入します。 次に実際の使用例を示します。</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="BackgroundAnimation")]
  private var backgroundAnimationClass:Class;</pre>
 
  <p>MXML コンパイラーは、Assets.swf の BackgroundAnimation シンボルがムービークリップであることを確認し、それを表す MovieClipAsset クラスのサブクラスを自動生成し、この自動生成されたクラスへの参照を変数に設定します。 これにより、このクラス参照を使用して、<codeph>new</codeph> 演算子で MovieClipAsset のインスタンスを作成できるようになります。また、作成したインスタンスで MovieClip クラスの API を使用することもできます。</p>
 
  <pre>
  var backgroundAnimation:MovieClipAsset =
      MovieClipAsset(new backgroundAnimationClass());
  var n:int = backgroundAnimation.totalFrames;</pre>
 
  <p>ただし、MovieClipAsset インスタンスを自分で作成する必要はほとんどありません。イメージ関連のプロパティおよびスタイルをイメージ生成クラスに設定すると、コンポーネントが必要に応じてインスタンスを作成します。 例えば、次のように記述するだけで、アプリケーションの背景をこのアニメーションに設定できます。</p>
 
  <pre>
  &lt;mx:Application backgroundImage="{backgroundAnimationClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MovieClipAsset:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MovieClipAsset:move"><apiName>move</apiName><shortdesc>
      
	  このオブジェクトを指定の x および y 座標に移動します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい x 位置です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい y 位置です。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  このオブジェクトを指定の x および y 座標に移動します。
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:MovieClipAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  このオブジェクトの実際のサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい幅です。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>このオブジェクトの新しい高さです。
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  このオブジェクトの実際のサイズを設定します。
	 
	  <p>このメソッドは主に <codeph>updateDisplayList()</codeph> メソッドの実装に使用されます。ここでオブジェクトの実際のサイズを、その明示的サイズ、親との相対（％）サイズ、および測定されたサイズに基づいて計算します。 次に <codeph>setActualSize()</codeph> を呼び出して、この実際のサイズをオブジェクトに適用します。</p>
	 
	  <p>その他の状況では、このメソッドを呼び出す代わりに、<codeph>width</codeph>、<codeph>height</codeph>、<codeph>percentWidth</codeph>、<codeph>percentHeight</codeph> などのプロパティを設定することになります。</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:MovieClipAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      left、top、right、bottom の 4 つのプロパティを持つ、境界線の EdgeMetrics オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph>、<codeph>bottom</codeph> の 4 つのプロパティを持つ、境界線の EdgeMetrics オブジェクトを返します。 各プロパティの値は、境界線の 1 辺の太さをピクセル単位で表したものです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  このオブジェクトの測定した高さです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  このオブジェクトの測定した高さです。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  このオブジェクトの測定した幅です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  このオブジェクトの測定した幅です。
	 
	  <p>この数字は単なるグラフィックのピクセル数であるため、グラフィカルスキンの場合、これは通常ハードコードになります。 コードスキンの場合も、一定のサイズで描画する場合はハードコードにできます。 プロパティに応じてサイズが変わる場合は、ILayoutManagerClient により、適切なタイミングで <codeph>measure()</codeph> メソッドを呼び出して、<codeph>measuredHeight</codeph> を計算することもできます。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
  SoundAsset は、Flex アプリケーションに埋め込まれたサウンドを表す flash.media.Sound クラスのサブクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.media:Sound</apiBaseClassifier></apiClassifierDef><apiDesc>
  SoundAsset は、Flex アプリケーションに埋め込まれたサウンドを表す flash.media.Sound クラスのサブクラスです。
 
  <p>MP3 ファイルのサウンドを埋め込むことができます。Flash によって作成された SWF ファイルのサウンドシンボルを埋め込むこともできます。いずれの場合も、MXML コンパイラーは、埋め込まれたサウンドデータを表すように SoundAsset を拡張するクラスを自動生成します。</p>
 
  <p>通常は、Flex アプリケーションを作成するときに SoundAsset クラスを直接使用する必要はありません。例えば、次のように記述するだけで、MP3 ファイルを埋め込み、SoundEffect で使用することができます。</p>
 
  <pre>
  &lt;mx:SoundEffect id="beep" source="@Embed(source='Beep.mp3')"/></pre>
 
  <p>MXML コンパイラーによって SoundAsset のサブクラスが作成されたことを認識しておく必要はありません。</p>
 
  <p>ただし、ActionScript レベルで何が行われているのかを理解しておくことは有益です。 ビットマップを ActionScript に埋め込むには、Class 型の変数を宣言し、この変数の前に <codeph>[Embed]</codeph> メタデータを挿入します。 例えば、次のようにして MP3 ファイルを埋め込みます。</p>
 
  <pre>
  [Bindable]
  [Embed(source="Beep.mp3")]
  private var beepClass:Class;</pre>
 
  <p>MXML コンパイラーは、拡張子 .mp3 を確認し、MP3 データを Player が使用するサウンド形式にトランスコードして、SoundAsset クラスのサブクラスを自動生成し、この自動生成されたクラスへの参照を変数に設定します。 これにより、このクラス参照を使用して、<codeph>new</codeph> 演算子で SoundAsset のインスタンスを作成できるようになります。また、作成されたインスタンスで Sound クラスの API を使用できます。</p>
 
  <pre>
    var beepSound:SoundAsset = SoundAsset(new beepClass());
    beepSound.play();</pre>
 
  <p>ただし、SoundAsset インスタンスを自分で作成する必要はほとんどありません。サウンド関連のプロパティおよびスタイルをサウンド生成クラスに設定すると、コンポーネントが必要に応じてサウンドインスタンスを作成します。 例えば、このサウンドを SoundEffect で再生するために、SoundEffect の <codeph>source</codeph> プロパティを <codeph>beepClass</codeph> に設定することができます。 MXML では、次のようにします。</p>
 
  <pre>
  &lt;mx:SoundEffect id="beepEffect" source="{beepClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SoundAsset:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:IFlexModuleFactory"><apiName>IFlexModuleFactory</apiName><shortdesc>
  IFlexModuleFactory インターフェイスは、Flex アプリケーションおよび動的にロードされるモジュールを起動するのに必要な約束ごとを表します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexModuleFactory インターフェイスは、Flex アプリケーションおよび動的にロードされるモジュールを起動するのに必要な約束ごとを表します。
 
  <p><codeph>info()</codeph> メソッドは、<codeph>complete</codeph> イベントを送出した直後に呼び出すことができます。</p>
 
  <p>正常な動作のモジュールでは、<codeph>ready</codeph> イベントが送出されます（<codeph>create()</codeph> メソッドを呼び出しても問題がない場合）。</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      この IFlexModuleFactory に関連付けられている SWF に加え、この IFlexModuleFactory によってプリロードされた RSL に関連付けられているすべての SWF に対して Security.allowDomain() を呼び出します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      この IFlexModuleFactory に関連付けられている SWF に加え、この IFlexModuleFactory によってプリロードされた RSL に関連付けられているすべての SWF に対して Security.allowDomain() を呼び出します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      この IFlexModuleFactory に関連付けられている SWF に加え、この IFlexModuleFactory によってプリロードされた RSL に関連付けられているすべての SWF に対して Security.allowInsecureDomain() を呼び出します。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      この IFlexModuleFactory に関連付けられている SWF に加え、この IFlexModuleFactory によってプリロードされた RSL に関連付けられているすべての SWF に対して Security.allowInsecureDomain() を呼び出します。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:callInContext"><apiName>callInContext</apiName><shortdesc>
      この IFlexModuleFactory のコンテキストでメソッドを呼び出す方法
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>関数から返されるものすべて（返された場合）
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/><apiDesc>呼び出す関数またはメソッド
      </apiDesc></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/><apiDesc>関数の this ポインター
      </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/><apiDesc>関数の引数
      </apiDesc></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>true の場合、関数は値を返します
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      この IFlexModuleFactory のコンテキストでメソッドを呼び出す方法
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="Function.apply.xml"><linktext>Function.apply</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:create"><apiName>create</apiName><shortdesc>
      モジュールが認識している定義のインスタンスを要求するファクトリメソッドです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>モジュールのインスタンス、または <codeph>null</codeph> です。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>parameters</apiItemName><apiType value="restParam"/><apiDesc>パラメーターのオプションのリストです。 パラメーターはいくつでも渡すことができ、渡されたパラメーターは <codeph>parameters</codeph> という名前の配列に格納されます。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      モジュールが認識している定義のインスタンスを要求するファクトリメソッドです。
     
      <p>作成ファクトリにパラメーターのオプションのセットを渡して、この入力を基に、作成されるインスタンスに変更を加えることができます。 <codeph>null</codeph> を渡すと、可能な場合はデフォルトの定義が作成されます。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:getImplementation"><apiName>getImplementation</apiName><shortdesc>
      インターフェイスの実装を取得します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      インターフェイスの実装を取得します。Singleton.getInstance と似ていますが、IFlexModuleFactory ごとです。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:info"><apiName>info</apiName><shortdesc>
      モジュールが認識している静的データを保持するキーと値のペアのブロックを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>キーと値のペアを持つオブジェクトです。通常このオブジェクトには、このファクトリによって作成されたモジュールに関する次のような情報が含まれます。
     
      <pre>
      return {"description": "This module returns 42."};
      </pre>
      
      返されるオブジェクトが持つ一般的な値には次のような値があります。
      <ul>
       <li><codeph>fonts</codeph>： 埋め込みフォントのリストです。</li>
       <li><codeph>rsls</codeph>： ランタイム共有ライブラリのリストです。</li>
       <li><codeph>mixins</codeph>： 起動時に初期化されるクラスのリストです。</li>
      </ul>
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      モジュールが認識している静的データを保持するキーと値のペアのブロックを返します。 このメソッドは常に成功しますが、空のオブジェクトを返すことがあります。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:registerImplementation"><apiName>registerImplementation</apiName><shortdesc>
      インターフェイスの実装を登録します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>impl</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      インターフェイスの実装を登録します。Singleton.registerClass と似ていますが、IFlexModuleFactory ごとであり、クラスではなく、インスタンスを取ります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      アプリケーションが起動する前にこの IFlexModuleFactory によってロードされた RSL です。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      アプリケーションが起動する前にこの IFlexModuleFactory によってロードされた RSL です。アプリケーションによってロードされた RSL はこのリストには含まれません。preloadedRSLs に関する情報は、Dictionary に格納されます。キーは RSL の LoaderInfo です。値は RSL のロード元の URL です。
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexGlobals"><apiName>FlexGlobals</apiName><shortdesc>
  同じ ApplicationDomain 内のすべてのアプリケーションに適用できる変数が含まれるクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  同じ ApplicationDomain 内のすべてのアプリケーションに適用できる変数が含まれるクラスです。
 
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:FlexGlobals:topLevelApplication"><apiName>topLevelApplication</apiName><shortdesc>
      ApplicationDomain で実行される最初のアプリケーションは、最上位のアプリケーションです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiType value="Object"/></apiValueDef><apiDesc>
      ApplicationDomain で実行される最初のアプリケーションは、最上位のアプリケーションです。このプロパティは、最上位のアプリケーションのコンストラクターにある最上位アプリケーションへの参照に設定されます。各 ApplicationDomain が独自の <codeph>topLevelApplication</codeph> を持つことになります。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ComponentDescriptor"><apiName>ComponentDescriptor</apiName><shortdesc>
  ComponentDescriptor は、UIComponentDescriptor クラスの基本クラスです。UIComponentDescriptor クラスは、ビジュアルコンポーネントのインスタンスの MXML タグに指定された情報をカプセル化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ComponentDescriptor は、UIComponentDescriptor クラスの基本クラスです。UIComponentDescriptor クラスは、ビジュアルコンポーネントのインスタンスの MXML タグに指定された情報をカプセル化します。Flex では、ビジュアルではないコンポーネントは別に扱われ、記述子を持ちませんが、将来のバージョンでは、それらのコンポーネントについても ComponentDescriptor 基本クラスが使用されるようになる可能性があります。
 
  <p>MXML ファイル内のほとんどのタグは、UIComponent オブジェクトのツリーを記述するものです。 例えば、<codeph>&lt;mx:Application></codeph> タグは UIComponent オブジェクトを表し、その子コンテナとコントロールもすべて UIComponent オブジェクトです。</p>
 
  <p>MXML コンパイラーは、それぞれの MXML タグを UIComponentDescriptor インスタンスにコンパイルします。 厳密には、MXML コンパイラーは ActionScript データ構造を自動生成します。これは、UIComponentDescriptor オブジェクトのツリーになります。</p>
 
  <p>実行時に、Container クラスの <codeph>createComponentsFromDescriptors()</codeph> メソッドは、コンテナの <codeph>childDescriptors</codeph> 配列の UIComponentDescriptor オブジェクト内の情報を使用して、コンテナの子である実際の UIComponent オブジェクト、およびその子孫を作成します。 コンテナの <codeph>creationPolicy</codeph> プロパティの値によっては、アプリケーションの起動時にコンポーネントの一部が表示されるとき、またはアプリケーションの開発者が手動で <codeph>createComponentsFromDescriptors()</codeph> メソッドを呼び出したときに、子孫が作成されることがあります。</p>
 
  <p>通常、ComponentDescriptor または UIComponentDescriptor インスタンスを自分で作成することはありません。Container クラスの <codeph>childDescriptors</codeph> 配列を経由して、MXML コンパイラーが自動生成したインスタンスにアクセスできます。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link><link href="mx.core.xml#Container/childDescriptors"><linktext>mx.core.Container.childDescriptors</linktext></link><link href="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link><link href="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>mx.core.Container.createComponentsFromDescriptors()</linktext></link></related-links><apiConstructor id="mx.core:ComponentDescriptor:ComponentDescriptor"><apiName>ComponentDescriptor</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>descriptorProperties</apiItemName><apiType value="Object"/><apiDesc>ComponentDescriptor オブジェクトのプロパティ (<codeph>type</codeph>、<codeph>id</codeph>、<codeph>propertiesFactory</codeph>、<codeph>events</codeph> など) の名前と値のペアを含むオブジェクトです。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      コンストラクターです。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ComponentDescriptor:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      キャッシュされた properties プロパティを無効化します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      キャッシュされた <codeph>properties</codeph> プロパティを無効化します。次に <codeph>properties</codeph> プロパティを読み込むときに、<codeph>propertiesFactory</codeph> プロパティの値に指定された関数からプロパティが再生成されます。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ComponentDescriptor:toString"><apiName>toString</apiName><shortdesc>
      "ComponentDescriptor_" および id プロパティの値を含むストリングを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>"ComponentDescriptor_" および <codeph>id</codeph> プロパティの値を含むストリングです。
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      "ComponentDescriptor_" および <codeph>id</codeph> プロパティの値を含むストリングを返します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ComponentDescriptor:document"><apiName>document</apiName><shortdesc>
      コンポーネントが作成されるドキュメントオブジェクトへの参照です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      コンポーネントが作成されるドキュメントオブジェクトへの参照です。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IUIComponent/document"><linktext>mx.core.IUIComponent.document</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:events"><apiName>events</apiName><shortdesc>
      MXML に指定された、コンポーネントのイベントハンドラーの名前と値のペアを含むオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      MXML に指定された、コンポーネントのイベントハンドラーの名前と値のペアを含むオブジェクトです。
     
      <p>例えば、次のようなコードを作成するとします。</p>
     
      <pre>
      &lt;mx:DataGrid id="dg" initialize="fetchData(); initDataGrid();"  change="changeHandler(event);"/>
      </pre>
     
      <p>この場合、記述子の <codeph>events</codeph> プロパティは次のオブジェクトです。</p>
     
      <pre>
      { initialize: "__dg_initialize", change: "__dg_change" }
      </pre>
     
      <p>コンポーネントに MXML イベントハンドラーが指定されていない場合、<codeph>event</codeph> プロパティは <codeph>null</codeph> になります。</p>
     
      <p>ストリング <codeph>"__dg_initialize"</codeph> および <codeph>"__dg_change"</codeph> は、MXML コンパイラーが自動生成するイベントハンドラーメソッドの名前です。 これらのメソッドの本体には、イベント属性の値として指定された ActionScript ステートメントが入ります。 例えば、自動生成された <codeph>initialize</codeph> ハンドラーは次のようになります。</p>
     
      <pre>
      public function __dg_initialize(event:mx.events.FlexEvent):void
      {
          fetchData();
          initDataGrid();
      }
      </pre>
     
      <p>自動生成されたイベントハンドラーが常に名前で指定されると想定しないでください。これは、Flex の将来のバージョンで変更される可能性があります。</p>
      
      <p>Container の <codeph>createComponentsFromDescriptors()</codeph> メソッドはこのプロパティを使用して、<codeph>addEventListener()</codeph> メソッドにより自動生成されたイベントハンドラーを登録します。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ComponentDescriptor:id"><apiName>id</apiName><shortdesc>
      MXML に指定されたコンポーネントの識別子です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      MXML に指定されたコンポーネントの識別子です。 
     
      <p>例えば、次のようなコードを作成するとします。</p>
     
      <pre>
      &lt;mx:TextInput id="firstName" text="Enter your first name here"/>
      </pre>
     
      <p>この場合、記述子の <codeph>id</codeph> プロパティはストリング <codeph>"firstName"</codeph> です。</p>
     
      <p>コンポーネントに MXML ID が指定されていない場合、<codeph>id</codeph> プロパティは <codeph>null</codeph> になります。</p>
     
      <p><codeph>id</codeph> プロパティの値は、MXML コンパイラーによって自動生成された MXML ドキュメントオブジェクトのパブリック変数の名前になります。 この変数の値は、この記述子から作成された UIComponent オブジェクトへの参照です。 これにより、例えば TextInput コントロールの <codeph>text</codeph> プロパティを、この TextInput インスタンスを含むドキュメント内の任意の場所から <codeph>firstName.text</codeph> として参照できます。</p>
     
      <p><codeph>id</codeph> が指定されていて、空のストリングではない場合、それは DisplayObject オブジェクトの <codeph>name</codeph> になります。 <codeph>id</codeph> が指定されていないか空の場合、DisplayObject オブジェクトの <codeph>name</codeph> は、<codeph>"Button3"</codeph> のような自動生成されたストリングのままです。これは、<codeph>NameUtil.createUniqueName()</codeph> メソッドから返されたものと同じです。 この <codeph>name</codeph> は、<codeph>toString()</codeph> メソッドから返されるストリングの生成に使用されます。 これを指定して <codeph>getChildByName()</codeph> を呼び出すことにより、親からコンポーネントを見つけることもできます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:propertiesFactory"><apiName>propertiesFactory</apiName><shortdesc>
      MXML に指定された、コンポーネントのプロパティの名前と値のペアを含むオブジェクトを返す関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      MXML に指定された、コンポーネントのプロパティの名前と値のペアを含むオブジェクトを返す関数です。
     
      <p>例えば、次のようなコードを作成するとします。</p>
      
      <pre>
      &lt;mx:TextInput width="150" text="Hello">
      </pre>
     
      <p>この場合、記述子の <codeph>propertiesFactory</codeph> プロパティは次の関数です。</p>
     
      <pre>
      function():Object { return { width: 150, text: "Hello" }; }
      </pre>
     
      <p>コンポーネントに MXML プロパティが指定されていない場合、<codeph>propertiesFactory</codeph> プロパティは <codeph>null</codeph> になります。 この場合、コンポーネントはデフォルトのプロパティ値を使用します。</p>
     
      <p><codeph>propertyFactory</codeph> が実際のオブジェクトではなく、オブジェクトを返す関数であるのは、ComponentDescriptor オブジェクトのツリーを段階的に「展開」できるようにするためです。 ドキュメントの記述子ツリーのすべての記述子が起動時に作成されると、起動時間が長くなります。</p>
     
      <p><codeph>properties</codeph> プロパティは、このファクトリ関数によって作成された、キャッシュされたオブジェクトを返します。</p>
      
      <p>メモ： <codeph>click="doSomething();"</codeph> などのイベントハンドラーは、<codeph>events</codeph> オブジェクト（<codeph>properties</codeph> オブジェクトではない）に含められます。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ComponentDescriptor/properties"><linktext>properties</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:type"><apiName>type</apiName><shortdesc>
      MXML に指定されたコンポーネントのクラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      MXML に指定されたコンポーネントのクラスです。
     
      <p>例えば、次のようなコードを作成するとします。</p>
     
      <pre>
      &lt;mx:TextInput/>
      </pre>
     
      <p>この場合、記述子の <codeph>type</codeph> プロパティはクラス mx.controls.TextInput です。</p>
     
      <p>MXML コンパイラーによって作成された ComponentDescriptor オブジェクトの場合、すべての MXML タグが mx:TextInput のようなタグ名を持つため、プロパティは <codeph>null</codeph> になりません。</p>
     
      <p>MXML タグとその対応クラスのマッピングは、XML 名前空間とその名前空間に関連付けられた「マニフェストファイル」（存在する場合）によって決まります。 例えば、接頭辞 mx: によって表される標準 Flex 名前空間 <codeph>http://www.adobe.com/2006/mxml</codeph> は、（flex-config.xml ファイルで）マニフェストファイル mxml-manifest.xml に関連付けられており、このファイルは次のタグを持ちます。</p>
     
      <pre>
      &lt;component id="TextInput" class="mx.controls.TextInput"/>
      </pre>
     
      <p>これは、タグ名 mx:TextInput をクラス mx.controls.TextInput にマップします。マニフェストファイルを使用することにより、単一の XML 名前空間のコンポーネントを複数の ActionScript パッケージのクラスにマップできます。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ComponentDescriptor:properties:get"><apiName>properties</apiName><shortdesc>
      MXML に指定された、コンポーネントのプロパティの名前と値のペアを含むオブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      MXML に指定された、コンポーネントのプロパティの名前と値のペアを含むオブジェクトです。
     
      <p>例えば、次のようなコードを作成するとします。</p>
     
      <pre>
      &lt;mx:TextInput width="150" text="Hello"/>
      </pre>
     
      <p>この場合、記述子の <codeph>properties</codeph> プロパティはこのオブジェクトです。</p>
     
      <pre>
      { width: 150, text: "Hello" }
      </pre>
     
      <p>コンポーネントに MXML プロパティが指定されていない場合、<codeph>properties</codeph> プロパティは <codeph>null</codeph> になります。 この場合、コンポーネントはデフォルトのプロパティ値を使用します。</p>
     
      <p> このオブジェクトは、<codeph>propertiesFactory</codeph> プロパティに指定された関数を呼び出すことによって作成され、以降のアクセスのためにキャッシュされます。 ただし、Repeater が同じ記述子から複数のコンポーネントインスタンスを作成するときは、コンポーネントインスタンスごとに <codeph>properties</codeph> オブジェクトの最新コピーを作成し、コンポーネントインスタンスが配列またはオブジェクト参照のプロパティ値を共有しないようにする必要があります。 Repeater は、記述子に対して <codeph>invalidateProperties()</codeph> メソッドを呼び出すことによってこれを実現します。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ComponentDescriptor/propertiesFactory"><linktext>propertiesFactory</linktext></link><link href="mx.core.xml#ComponentDescriptor/invalidateProperties()"><linktext>invalidateProperties()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:IToggleButton"><apiName>IToggleButton</apiName><shortdesc>
  IToggleButton インターフェイスは、コンポーネントが切り替え可能なボタンとして機能することを示す、マーカーインターフェイスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IToggleButton インターフェイスは、コンポーネントが切り替え可能なボタンとして機能することを示す、マーカーインターフェイスです。主に、フレームワークのデフォルトボタンのロジックによってフィルターとして使用されます。<b/>
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:ScrollControlBase"><apiName>ScrollControlBase</apiName><shortdesc>
  ScrollControlBase クラスは、スクロールバーを持つコントロールの基本クラスです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="verticalScrollBarStyleName" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  垂直スクロールバーのスタイル名です。これにより、スクロールバーの外観をより詳細に制御できます。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのシンボルのカラーです。CheckBox のチェックマークや ScrollBar ボタンの矢印などがあります。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalScrollBarStyleName" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  水平スクロールバーのスタイル名です。これにより、スクロールバーの外観をより詳細に制御できます。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントにフォーカスがある場合のフォーカスリングのカラーです。
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのコンテンツ領域のカラーです。
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  このコンポーネントのコンテンツの背景のアルファです。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="chromeColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  コンポーネントのメインカラーです。
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
   
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  テキストの 1 行目のコンテナ左端からのオフセット（ピクセル単位）です。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="Class">
<description>
  IUITextField を実装するクラスです。このクラスはテキストをレンダリングするためにこのコンポーネントで使用されます。
 
  <p>mx.core.UITextField クラス（Flash Player に組み込まれている標準の TextField を使用する場合）または mx.core.UIFTETextField クラス（Text Layout Framework を使用して、双方向レイアウトなどの向上したテキストレンダリングを取得する場合）のいずれかに設定できます。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  テキストに下線を表示するかどうかを指定します。 可能な値は、<codeph>"none"</codeph> および <codeph>"underline"</codeph> です。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  コンテナ内のテキストの整列。 有効な値は、<codeph>"left"</codeph>、<codeph>"right"</codeph> または <codeph>"center"</codeph> です。
 
  <p>ほとんどのコンポーネントのデフォルト値は <codeph>"left"</codeph> です。 FormItem コンポーネントの場合、デフォルト値は <codeph>"right"</codeph> です。 Button、LinkButton および AccordionHeader コンポーネントでは、デフォルト値は <codeph>"center"</codeph> です。このプロパティは <codeph>labelPlacement</codeph> プロパティが <codeph>"left"</codeph> または <codeph>"right"</codeph> に設定されている場合のみ認識されます。 <codeph>labelPlacement</codeph> が <codeph>"top"</codeph> または <codeph>"bottom"</codeph> に設定されている場合は、テキストおよびアイコンが中央に配置されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストのロケールです。
 
  <p>FTE および TLF はこのロケールを使用して Unicode 文字をフォント字形にマッピングしたり、フォールバックフォントを検索したりします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  各文字間に表示される追加のピクセル数。 正の値を指定すると文字間隔が通常より広くなり、負の値を指定すると文字間隔が通常より狭くなります。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Boolean">
<description>
  カーニングが有効（<codeph>true</codeph>）か無効（<codeph>false</codeph>）かを示すブール値です。カーニングでは、読みやすくするために、特定の文字ペア間の間隔を調整します。ただし、カーニングは見出しを大きなフォントにする場合など、必要な場合に限って使用してください。 カーニングは、埋め込みフォントに対してのみサポートされています。Verdana や、Courier New などの等幅フォントなど、特定のフォントではカーニングはサポートされていません。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  テキストをボールド体にするかどうかを指定します。 有効な値は <codeph>normal</codeph> と <codeph>bold</codeph> です。 Button コントロールのデフォルト値は <codeph>bold</codeph> です。 他のすべてのコントロールのデフォルト値は <codeph>normal</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>thickness</codeph> プロパティを設定します。 このプロパティは字形のエッジの太さを指定します。 有効な値は -200 ～ 200 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルは、システムフォントには影響を与えません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  テキストをイタリック体にするかどうかを指定します。 認識される値は <codeph>"normal"</codeph> と <codeph>"italic"</codeph> です。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  テキストの高さ（ピクセル単位）です。 
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>sharpness</codeph> プロパティを設定します。 このプロパティは字形のエッジのシャープネスを指定します。 有効な値は -400 ～ 400 までの数値です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Flex コントロール内のテキストを表す内部 TextField の <codeph>gridFitType</codeph> プロパティを設定します。 有効な値は、<codeph>"none"</codeph>（<codeph>flash.text.GridFitType.NONE</codeph>）、<codeph>"pixel"</codeph>（<codeph>flash.text.GridFitType.PIXEL</codeph>） および <codeph>"subpixel"</codeph>（<codeph>flash.text.GridFitType.SUBPIXEL</codeph>）です。 
  
  <p>このプロパティが適用されるのは、埋め込みフォントを使用していて、<codeph>fontAntiAliasType</codeph> プロパティが <codeph>"advanced"</codeph> に設定されている場合のみです。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
 
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  使用するフォントの名前です。 完全な CSS 実装と異なり、カンマ区切りリストはサポートされません。 任意のフォントファミリ名を使用できます。 汎用フォント名を指定した場合、適切なデバイスフォントに置換されます。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  内部 TextField の <codeph>antiAliasType</codeph> プロパティを設定します。 有効な値は、<codeph>"normal"</codeph>（<codeph>flash.text.AntiAliasType.NORMAL</codeph>）および <codeph>"advanced"</codeph>（<codeph>flash.text.AntiAliasType.ADVANCED</codeph>）です。 
  
  <p>デフォルト値は <codeph>"advanced"</codeph> であり、フォントについて高度なアンチエイリアスが有効になります。 <codeph>"normal"</codeph> に設定すると、高度なアンチエイリアスが無効になります。</p>
  
  <p>このスタイルはシステムフォントには影響しません。</p>
  
  <p>このスタイルは TextField サブコントロール内のすべてのテキストに適用されます。一部の文字だけに適用することはできません。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="uint">
<description>
  コンポーネントが無効な場合のテキストの色です。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="String">
<description>
  このコンポーネントで表示されるテキストの方向です。
 
  <p>使用できる値は、ラテン文字などの左から右のテキスト用の <codeph>"ltr"</codeph> と、アラビア文字やヘブライ文字などの右から左のテキスト用の <codeph>"rtl"</codeph> です。</p>
 
  <p>FTE と TLF は双方向テキストレイアウトアルゴリズムでこの値を使用し、Unicode 文字の順序を字形の順序にマッピングします。</p>
 
  <p>メモ：このスタイルは、MX コンポーネントで、<codeph>textFieldClass</codeph> として UIFTETextField が指定されている場合にのみ適用されます。</p>
 
  <p><codeph>direction</codeph> は、TLFTextField の境界内のテキストの整列にも影響します。ただし、コンポーネント内の TLFTextField の配置には影響しません。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="uint">
<description>
  コンポーネントのラベルを含めたコンポーネント内のテキストの色です。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  追加の行間を表します。
 
  <p>デフォルト値は 2 です。</p>
  <p>ComboBox コントロールのデフォルト値は 0 です。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  フォーカス矩形のどの角を丸くするかを指定します。 この値は、スペースで区切られた String です。<codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> および <codeph>"br"</codeph> の任意の組み合わせを含めることができます。 例えば、右の角を丸くし、左の角を直角にするように指定するには、<codeph>"tr br"</codeph> とします。 <codeph>cornerRadius</codeph> スタイルプロパティは、角の丸みの半径を指定します。 デフォルト値は、コンポーネントのクラスによって異なります。クラスでオーバーライドされていない場合、デフォルト値は <codeph>"tl tr bl br"</codeph> です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  フォーカススキンのアルファ透明度値を指定します。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  ドロップシャドウの幅です。このプロパティを負の値に設定すると、シャドウはコンポーネントの上に表示されます。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  ドロップシャドウの方向です。 有効な値は <codeph>"left"</codeph>、<codeph>"center"</codeph> および <codeph>"right"</codeph> です。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  ドロップシャドウの色です。
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  コンポーネントのドロップシャドウの表示または非表示を指定するブール型プロパティです。 デフォルト値は <codeph>false</codeph> です。
 
  <p><b>メモ：</b>ドロップシャドウをコンテナに表示するには、<codeph>contentBackgroundColor</codeph> プロパティを設定します。 設定しない場合、コンテナのデフォルトの背景は透明なので、シャドウはコンテナの背後に表示されます。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  コンポーネントのドロップシャドウの表示または非表示を指定するブール型プロパティです。 このスタイルは <codeph>borderStyle="solid"</codeph> と共に使用します。 デフォルト値は <codeph>false</codeph> です。
 
  <p><b>メモ：</b>ドロップシャドウをコンテナに表示するには、<codeph>backgroundColor</codeph> プロパティまたは <codeph>backgroundImage</codeph> プロパティを設定します。 設定しない場合、コンテナのデフォルトの背景は透明なので、シャドウはコンテナの背後に表示されます。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  コンポーネントの角に付いている丸みの半径です。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  境界線の可視性です。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  境界ボックスの境界線の幅です。 <codeph>borderStyle</codeph> が <codeph>"solid"</codeph> に設定されている場合にのみ使用されます。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  境界ボックスのスタイルです。 有効な値は <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> および <codeph>"outset"</codeph> です。 デフォルト値はコンポーネントのクラスに応じて異なります。クラスでオーバーライドされない場合は、<codeph>"inset"</codeph> になります。 ほとんどの Container のデフォルト値は <codeph>"none"</codeph> です。halo テーマで使用できる値は <codeph>"inset"</codeph> と <codeph>"outset"</codeph> のみです。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Class">
<description>
  コンポーネントの境界線のスキンクラスです。 <codeph/><codeph/><codeph/><codeph/>コンポーネントのデフォルト値を確認するには、default.css ファイルを参照してください。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  境界ボックスの境界線のうち、どれが表示されるかを示します。表示する境界線をスペース区切りのストリングで指定します。 ストリングには、<codeph>"left"</codeph>、<codeph>"top"</codeph>、<codeph>"right"</codeph> および <codeph>"bottom"</codeph> を任意の順序で指定できます。 デフォルト値は <codeph>"left top right bottom"</codeph> です。この場合、4 辺すべてを表示します。 このスタイルは、borderStyle が <codeph>"solid"</codeph> の場合にのみ使用されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  境界線の色です。 <codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  境界線のアルファです。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  <codeph>backgroundImage</codeph> で指定されているイメージを、元のサイズとは異なるサイズに拡大および縮小します。 <codeph>"100%"</codeph> に設定すると、コンポーネント全体に収まるサイズにイメージを伸縮します。 パーセント値で指定する場合は、パーセント記号（%）付きで指定する必要があります。 Application コンテナのデフォルトは <codeph>100%</codeph> です。 他のすべてのコンテナのデフォルト値は <codeph>auto</codeph> で、イメージの元のサイズが維持されます。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Object">
<description>
  コンポーネントの背景イメージです。 これには、絶対 URL、相対 URL、絶対クラス、または相対クラスを指定できます。 <codeph>backgroundColor</codeph> または <codeph>backgroundImage</codeph> のいずれかを設定できます。背景色の前面に背景イメージを表示します。 デフォルト値は <codeph>undefined</codeph> で、「未定義」であることを意味します。 このスタイルと <codeph>backgroundColor</codeph> スタイルの両方が undefined である場合、コンポーネントは透明な背景を持ちます。
 
  <p>ほとんどの Flex コントロールのデフォルトスキンは、部分的に透明です。 この結果、コンテナの背景イメージが、そのコンテナの中のコントロールに部分的ににじみ出るように表示されます。 コントロールの <codeph>fillAlphas</codeph> プロパティのアルファ値を 1 に設定することで、これを避けることができます。次に例を示します。
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  コンポーネントが無効になっている場合のコンポーネント背景色です。 グローバルデフォルト値は <codeph>undefined</codeph> です。 List コントロールのデフォルト値は、<codeph>0xDDDDDD</codeph>（明るい灰色）です。 コンテナが無効になっている場合は、背景がグレー表示されます。このグレー表示の度合いは、<codeph>disabledOverlayAlpha</codeph> スタイルで制御します。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  コンポーネントの背景色です。 <codeph>backgroundColor</codeph> と <codeph>backgroundImage</codeph> の両方を設定できます。 一部のコンポーネントには背景色がありません。 DataGrid コントロールでは、このスタイル設定は無視されます。 デフォルト値は <codeph>undefined</codeph> で、未定義であることを意味します。 このスタイルと <codeph>backgroundImage</codeph> スタイルの両方が <codeph>undefined</codeph> である場合、コンポーネントは透明な背景を持ちます。
 
  <p>Application コンテナの場合、このスタイルはアプリケーションのロード時の背景色と、アプリケーションの実行時の背景のグラデーションを指定します。 指定された色よりもわずかに濃い色とわずかに薄い色の間でグラデーションパターンが計算されます。</p>
 
  <p>ほとんどの Flex コントロールのデフォルトスキンは、部分的に透明です。この結果、コンテナの背景色が、そのコンテナの中のコントロールに部分的ににじみ出るように表示されます。 コントロールの <codeph>fillAlphas</codeph> プロパティのアルファ値を 1 に設定することで、これを避けることができます。次に例を示します。
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  <codeph>backgroundColor</codeph> プロパティで定義されている、<codeph>backgroundImage</codeph> スタイルで定義されているイメージまたは SWF ファイルの背景色のアルファレベルです。 有効な値の範囲は、0.0 ～ 1.0 です。ほとんどのコントロールではデフォルト値は 1.0 ですが、ToolTip コントロールの場合デフォルト値は 0.95 であり、Alert コントロールの場合デフォルト値は 0.9 です。
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;ScrollControlBase&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
  <b>Properties</b>
  border="<i>object of border skin style</i>"
  horizontalScrollPolicy="off|on|auto"
  horizontalScrollPosition="0"
  liveScrolling="true|false"
  maxHorizontalScrollPosition="NaN"
  maxVerticalScrollPosition="NaN"
  scrollTipFunction="undefined"
  showScrollTips="false|true"
  verticalScrollPolicy="auto|off|on"
  verticalScrollPosition="0" 
  <b>Styles</b>
  backgroundAlpha="1.0"
  backgroundColor="undefined"
  backgroundImage="undefined"
  backgroundSize="auto"
  borderColor="0xAAB3B3"
  borderSides="left top right bottom"
  borderSkin="ClassReference('mx.skins.halo.HaloBorder')"
  borderStyle="inset"
  borderThickness="1"
  color="0x0B333C"
  cornerRadius="0"
  disabledColor="0xAAB3B3"
  dropShadowColor="0x000000"
  dropShadowEnabled="false"
  fontFamily="Verdana"
  fontSize="10"
  fontStyle="normal|italic"
  fontWeight="normal|bold"
  horizontalScrollBarStyleName=""
  leading="2"
  shadowDirection="center"
  shadowDistance="2"
  textAlign="<i>value; see detail.</i>"
  textDecoration="none|underline"
  textIndent="0"
  verticalScrollBarStyleName=""
 
  <b>Events</b>
  scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>スクロールをサポートするビューとコンテナの基本クラス
  
  </apiTipText></apiTipTexts><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ScrollControlBase クラスは、スクロールバーを持つコントロールの基本クラスです。スクロールバーはユーザーが操作し、表示可能領域を変更するメソッドおよびプロパティには開発者がアクセスします。 ScrollControlBase が持つ子オブジェクトは 1 つのみで、そのオブジェクトを配置およびマスクするか、またはサイズ変更して、表示可能なコンテンツを表示します。スクロールするアイテムは、このコンテンツオブジェクトの子であることが必要です。
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:ScrollControlBase_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  コンテンツがスクロールされたときに送出されます。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3269
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  コンテンツがスクロールされたときに送出されます。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:ScrollControlBase:ScrollControlBase"><apiName>ScrollControlBase</apiName><shortdesc>
      コンストラクターです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      コンストラクターです。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ScrollControlBase:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      このコンポーネントの境界線を作成します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      このコンポーネントの境界線を作成します。境界線は通常 <codeph>borderStyle</codeph> スタイルと <codeph>borderSkin</codeph> スタイルによって決まります。border プロパティを境界線のインスタンスに設定する必要があります。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      この ScrollControlBase の子であるオブジェクトを作成します。ここでは境界線とマスクです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      この ScrollControlBase の子であるオブジェクトを作成します。ここでは境界線とマスクです。このメソッドは、ScrollControlBase が最初に作成されたときに呼び出されます。サブクラスがこのメソッドをオーバーライドする場合は、サブクラスで <codeph>super.createChildren()</codeph> メソッドを呼び出して、<codeph>ScrollControlBase.createChildren()</codeph> メソッドのロジックを実行します。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      サイズ変更に応答して、このコントロールの境界線の位置およびサイズを設定します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      サイズ変更に応答して、このコントロールの境界線の位置およびサイズを設定します。
     
      <p><codeph>ScrollControlBase.layoutChrome()</codeph> メソッドは、ScrollControlBase の境界線の位置とサイズを設定します。ScrollControlBase のすべてのサブクラスでは、境界線の位置を適切に設定するために、サブクラスの <codeph>layoutChrome()</codeph> メソッドで <codeph>super.layoutChrome()</codeph> メソッドを呼び出す必要があります。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc>
      マウスホイールスクロールイベントのイベントハンドラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>イベントオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      マウスホイールスクロールイベントのイベントハンドラーです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:roomForScrollBar"><apiName>roomForScrollBar</apiName><shortdesc>
      特定のスクロールバーを表示するための十分な領域がこのコンポーネントにあるかどうかを判断します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>スクロールバー用の十分な領域がある場合は true を返します。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bar</apiItemName><apiOperationClassifier>mx.controls.scrollClasses:ScrollBar</apiOperationClassifier><apiDesc>スクロールバー
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleX</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの幅を指定します。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>コンポーネントの <codeph>scaleY</codeph> プロパティの値にかかわらず、コンポーネントの座標内でピクセル単位でコンポーネントの高さを指定します。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      特定のスクロールバーを表示するための十分な領域がこのコンポーネントにあるかどうかを判断します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:scrollHandler"><apiName>scrollHandler</apiName><shortdesc>
      scroll イベントのデフォルトのイベントハンドラーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>イベントオブジェクト。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>scroll</codeph> イベントのデフォルトのイベントハンドラーです。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:setScrollBarProperties"><apiName>setScrollBarProperties</apiName><shortdesc>
      渡されたパラメーターに基づいて、スクロールバーを表示するよう、または非表示にするよう ScrollControlBase に指示します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>totalColumns</apiItemName><apiType value="int"/><apiDesc>表示する必要のある水平単位の数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>visibleColumns</apiItemName><apiType value="int"/><apiDesc>一度に表示できる水平単位の数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>totalRows</apiItemName><apiType value="int"/><apiDesc>表示する必要のある垂直単位の数です。
     
      </apiDesc></apiParam><apiParam><apiItemName>visibleRows</apiItemName><apiType value="int"/><apiDesc>一度に表示できる垂直単位の数です。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      渡されたパラメーターに基づいて、スクロールバーを表示するよう、または非表示にするよう ScrollControlBase に対して指示します。TextArea に 100 ピクセル幅で 5 行のテキストしか表示できないにもかかわらず、表示する実際のテキストが 200 ピクセル幅で 30 行の場合には、<codeph>setScrollBarProperties()</codeph> メソッドを <codeph>setScrollBarProperties(200, 100, 30, 5)</codeph> として呼び出します。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ScrollControlBase:protected:border"><apiName>border</apiName><shortdesc>
      境界線オブジェクトです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc>
      境界線オブジェクトです。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:horizontalScrollBar"><apiName>horizontalScrollBar</apiName><shortdesc>
      水平スクロールバーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      水平スクロールバーです。現在表示されている水平スクロールバーがない場合、このプロパティは null です。一般に、このプロパティに直接アクセスすることはありません。 <codeph>horizontalScrollPolicy</codeph> および <codeph>horizontalScrollPosition</codeph> プロパティを操作することで、このスクロールバーを適切に制御できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:liveScrolling"><apiName>liveScrolling</apiName><shortdesc>
      サムの移動に合わせてスクロールするか、サムが離されるまで表示を更新しないかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      サムの移動に合わせてスクロールするか、サムが離されるまで表示を更新しないかを示すフラグです。 デフォルト値は <codeph>true</codeph> です。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:maskShape"><apiName>maskShape</apiName><shortdesc>
      マスクです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Shape"/></apiValueDef><apiDesc>
      マスクです。スクロールバーが現在表示されていない場合や、別のマスクメカニズムを持つサブクラスでは、このプロパティが未定義になることがあります。マスクによって、表示可能オブジェクトの表示可能領域が定義されています。そのため、このマスクを使用して、コンテンツの現在表示可能ではない部分を非表示にします。一般に、このプロパティに直接アクセスすることはありません。 <codeph>horizontalScrollPolicy</codeph>、<codeph>verticalScrollPolicy</codeph>、<codeph>horizontalScrollPosition</codeph> および <codeph>verticalScrollPosition</codeph> プロパティを操作することで、このマスクを適切に制御できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:scrollAreaChanged"><apiName>scrollAreaChanged</apiName><shortdesc>
      スクロールバーの表示または非表示のため、スクロール領域が変更されたことを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      スクロールバーの表示または非表示のため、スクロール領域が変更されたことを示すフラグです。スクロールプロパティを再調整するために、ほとんどのレイアウトメソッドによって使用されます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:showScrollTips"><apiName>showScrollTips</apiName><shortdesc>
      スクロールサムをドラッグしたときに、その近くにツールヒントを表示するかどうかを示すフラグです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      スクロールサムをドラッグしたときに、その近くにツールヒントを表示するかどうかを示すフラグです。 デフォルト値は <codeph>false</codeph> であり、ツールヒントは表示されません。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:verticalScrollBar"><apiName>verticalScrollBar</apiName><shortdesc>
      垂直スクロールバーです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      垂直スクロールバーです。現在表示されている垂直スクロールバーがない場合、このプロパティは null です。一般に、このプロパティに直接アクセスすることはありません。 <codeph>verticalScrollPolicy</codeph> および <codeph>verticalScrollPosition</codeph> プロパティを操作することで、このスクロールバーを適切に制御できます。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      left、top、right、bottom の 4 つのプロパティを持つ EdgeMetrics オブジェクトを返します。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> および <codeph>bottom</codeph> の 4 つのプロパティを持つ EdgeMetrics オブジェクトを返します。 各プロパティの値は、境界線の 1 辺の太さをピクセル単位で表したものです。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      水平スクロールバーを常にオンにするか、常にオフにするか、または setScrollBarProperties() メソッドに渡されるパラメーターに基づいて自動的に変更するかを示すプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.OFF
      
      </apiDefaultValue></apiValueDef><apiDesc>
      水平スクロールバーを常にオンにするか、常にオフにするか、または <codeph>setScrollBarProperties()</codeph> メソッドに渡されるパラメーターに基づいて自動的に変更するかを示すプロパティです。 有効な値は <codeph>ScrollPolicy.ON</codeph>、<codeph>ScrollPolicy.OFF</codeph> および <codeph>ScrollPolicy.AUTO</codeph> です。 有効な MXML 値は <codeph>"on"</codeph>、<codeph>"off"</codeph> および <codeph>"auto"</codeph> です。
     
      <p>ListBase サブクラスでこのプロパティを <codeph>ScrollPolicy.OFF</codeph> に設定しても、<codeph>horizontalScrollPosition</codeph> プロパティは影響を受けません。引き続き、コンテンツをプログラムでスクロールできます。</p>
     
      <p>このポリシーは、コンポーネントの測定サイズに影響を与える場合があります。ポリシーが <codeph>ScrollPolicy.AUTO</codeph> の場合、スクロールバーは測定サイズに反映されません。 この設定により、スクロールバーが表示されたときにレイアウトが再計算されなくなります。 スクロールバーに十分なデータが供給されることがわかっている場合は、このポリシーを <codeph>ScrollPolicy.ON</codeph> に設定してください。 それが不確かなときに、スクロールバーを後で表示できるように、コンポーネントの幅と高さを明示的に設定することが必要になります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      左端からコンテンツへのオフセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      左端からコンテンツへのオフセットです。 これは、一部のサブクラスではピクセルのオフセットですが、DataGrid では列の数、HorizontalList または TileList ではアイテムの数など、他のメトリックも使用できます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      horizontalScrollPosition プロパティの最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      <codeph>horizontalScrollPosition</codeph> プロパティの最大値です。 <codeph>maxHorizontalScrollPosition</codeph> プロパティはコンテンツの幅から表示可能な領域の幅を引いたものです。したがって、これはコンテンツの幅ではありません。
     
      <p>ほとんどのコンポーネントで、<codeph>maxHorizontalScrollPosition</codeph> プロパティの値は、コンポーネントのデータおよびサイズから計算されます。アプリケーションコードで設定しないようにしてください。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
      verticalScrollPosition プロパティの最大値です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      <codeph>verticalScrollPosition</codeph> プロパティの最大値です。 <codeph>maxVerticalScrollPosition</codeph> プロパティはコンテンツの高さから表示可能な領域の高さを引いたものです。したがって、これはコンテンツの高さではありません。
     
      <p><codeph>maxVerticalScrollPosition</codeph> プロパティの値は、コンポーネントのデータとサイズから計算されます。アプリケーションコードで設定しないでください。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:scrollTipFunction:get"><apiName>scrollTipFunction</apiName><shortdesc>
      ScrollTip として表示するストリングを計算する関数です。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      ScrollTip として表示するストリングを計算する関数です。 この関数は、<codeph>showScrollTips</codeph> プロパティに <codeph>true</codeph> が設定されているときに、スクロールサムがドラッグされた場合に呼び出されます。 この関数は、ScrollTip として使用されたストリングを返します。 この関数は 2 つのパラメーターを受け取ります。 第 1 パラメーターはスクロールバーの <codeph>direction</codeph> です。 第 2 パラメーターは <codeph>scrollPosition</codeph> です。次の例を参照してください。
      
      <pre>
      function scrollTipFunction(direction:String, position:Number):String 
      {
        if (direction == "vertical") return myToolTips[position];
        else return "";
      }</pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      垂直スクロールバーを常にオンにするか、常にオフにするか、または setScrollBarProperties() メソッドに渡されるパラメーターに基づいて自動的に変更するかを示すプロパティです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      垂直スクロールバーを常にオンにするか、常にオフにするか、または <codeph>setScrollBarProperties()</codeph> メソッドに渡されるパラメーターに基づいて自動的に変更するかを示すプロパティです。 有効な値は <codeph>ScrollPolicy.ON</codeph>、<codeph>ScrollPolicy.OFF</codeph> および <codeph>ScrollPolicy.AUTO</codeph> です。 有効な MXML 値は <codeph>"on"</codeph>、<codeph>"off"</codeph> および <codeph>"auto"</codeph> です。
     
      <p>ListBase サブクラスでこのプロパティを <codeph>ScrollPolicy.OFF</codeph> に設定しても、<codeph>verticalScrollPosition</codeph> プロパティは影響を受けません。引き続き、コンテンツをプログラムでスクロールできます。</p>
     
      <p>このポリシーは、コンポーネントの測定サイズに影響を与える場合があります。ポリシーが <codeph>ScrollPolicy.AUTO</codeph> の場合、スクロールバーは測定サイズに反映されません。 この設定により、スクロールバーが表示されたときにレイアウトが再計算されなくなります。 スクロールバーに十分なデータが供給されることがわかっている場合は、このポリシーを <codeph>ScrollPolicy.ON</codeph> に設定してください。 それが不確かなときに、スクロールバーを後で表示できるように、コンポーネントの幅と高さを明示的に設定することが必要になります。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      上端からコンテンツへのオフセットです。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      上端からコンテンツへのオフセットです。 これは、一部のサブクラスではピクセルのオフセットですが、List では行数、TileList リストではタイルの数など、他のメトリックも使用できます。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
      スクロールバーを考慮する EdgeMetrics オブジェクト（可視の場合）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      スクロールバーを考慮する EdgeMetrics オブジェクト（可視の場合）。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>