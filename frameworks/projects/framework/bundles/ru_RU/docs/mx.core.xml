<?xml version="1.0"?>
<apiPackage id="mx.core"><apiName>mx.core</apiName><apiDetail/><apiClassifier id="mx.core:IButton"><apiName>IButton</apiName><shortdesc>
  Интерфейс IButton является интерфейсом маркера, указывающего на то, что компонент функционирует как кнопка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IButton является интерфейсом маркера, указывающего на то, что компонент функционирует как кнопка.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IButton:mx.core:IButton:callLater"><apiName>callLater</apiName><shortdesc conref="mx.core.UIComponent#callLater()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="Function"/><apiDesc>Ссылка на метод, который будет выполнен позже.
     
      </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Массив объектов, представляющих аргументы для перехода в метод.
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#callLater()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IButton:mx.core:IButton:emphasized:get"><apiName>emphasized</apiName><shortdesc conref="mx.controls.Button#emphasized">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.Button#emphasized">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFLoader"><apiName>ISWFLoader</apiName><shortdesc>
  Интерфейс ISWFLoader определяет API посредством специальных свойств и методов, необходимых при загрузке совместимых и ненадежных приложений.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFBridgeProvider</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс ISWFLoader определяет API посредством специальных свойств и методов, необходимых при загрузке совместимых и ненадежных приложений.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ISWFLoader:mx.core:ISWFLoader:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      Получает пределы загруженного приложения, видимые пользователем на экране.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>Rectangle</codeph>, который включает видимую часть этого объекта. Этот прямоугольник находится в глобальных координатах.
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>allApplications</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет способ вычисления видимого прямоугольника: только на основе объектов отображения в этом приложении или с помощью всех вышестоящих приложений. Включение большего количества вышестоящих приложений может вызвать сокращение возвращаемой видимой области. Если значение равно <codeph>true</codeph>, для поиска видимой области используются все приложения. В противном случае используются только экранные объекты в этом приложении.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Получает пределы загруженного приложения, видимые пользователем на экране.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ISWFLoader:mx.core:ISWFLoader:loadForCompatibility:get"><apiName>loadForCompatibility</apiName><shortdesc>
      Флаг, указывающий на то, загружено ли содержимое для его использования в приложениях, созданных при помощи другой версии Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Флаг, указывающий на то, загружено ли содержимое для его использования в приложениях, созданных при помощи другой версии Flex. Совместимость с другими приложениями Flex обеспечивается путем загрузки приложения в одноуровневый (или одноранговый) элемент ApplicationDomain. Этот флаг игнорируется в случае, если подчиненное приложение загружено в отличный от главного приложения SecurityDomain. Если значение равно <codeph>true</codeph>, содержимое загружается в одноуровневый элемент ApplicationDomain. Если значение равно <codeph>false</codeph>, содержимое загружается в нижестоящий элемент ApplicationDomain.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UITextFormat"><apiName>UITextFormat</apiName><shortdesc>
  Класс UITextFormat представляет данные форматирования символов класса UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextFormat</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс UITextFormat представляет данные форматирования символов класса UITextField. Класс UITextField определяет компонент, используемый многими составными компонентами Flex для отображения текста.
 
  <p>Класс UITextFormat расширяет класс flash.text.TextFormat для загрузки методов измерения текста <codeph>measureText()</codeph> и <codeph>measureHTMLText()</codeph>, а также для добавления свойств, контролирующих расширенное сглаживание шрифтов.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UITextField"><linktext>mx.core.UITextField</linktext></link></related-links><apiConstructor id="mx.core:UITextFormat:UITextFormat"><apiName>UITextFormat</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>systemManager</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>Объект SystemManager. SystemManager отслеживает встроенные шрифты. Обычно этот объект SystemManager получается из свойства <codeph>systemManager</codeph> для UIComponent.
     
      </apiDesc></apiParam><apiParam><apiItemName>font</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Строка, указывающая имя шрифта или значение <codeph>null</codeph>, указывающее на то, что значение UITextFormat не указывает данное свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>size</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Число, указывающее размер шрифта в пикселях или значение <codeph>null</codeph>, если UITextFormat не содержит это свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Целое число без знака, указывающее цвет текста в формате RGB (например, 0xFF0000 для красного цвета) или значение <codeph>null</codeph>, если UITextFormat не указывает это свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>bold</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Логический флаг, указывающий наличие текста, выделенного жирным шрифтом, или значение <codeph>null</codeph>, если UITextFormat не содержит это свойство Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>italic</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Флаг с логическим значением, указывающий на курсив в тексте, или значение <codeph>null</codeph>, если UITextFormat не указывает это свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>underline</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Флаг с логическим значением, указывающий на подчеркивание в тексте, или значение <codeph>null</codeph>, если UITextFormat не указывает это свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Строка, указывающая URL-адрес гиперссылки текста, или значение <codeph>null</codeph>, если UITextFormat не указывает это свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Строка, указывающая целевое окно, в котором отображается URL-адрес гиперссылки. Если целевое окно представлено значением <codeph>null</codeph> или пустой строкой, то ссылочная страница отображается в то же окне браузера. Если параметр <codeph>urlString</codeph> имеет значение <codeph>null</codeph> или равен пустой строке, то свойство не действует. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>align</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Строка, указывающая выравнивание абзаца со значением flash.text.TextFormatAlign, или <codeph>null</codeph>, если UITextFormat не указывает это свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>leftMargin</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Число, указывающее левое поле абзаца в пикселях, или значение <codeph>null</codeph>, если UITextFormat не указывает это свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>rightMargin</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Число, указывающее правое поле абзаца в пикселях, или значение <codeph>null</codeph>, если UITextFormat не указывает это свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>indent</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Число, указывающее отступ от левого поля до первого символа абзаца в пикселях, или значение <codeph>null</codeph>, если UITextFormat не указывает это свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>leading</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Число, указывающее размер дополнительного вертикального пространства между строками, или значение <codeph>null</codeph>, если UITextFormat не указывает это свойство. Это дополнительный параметр, по умолчанию его значением является <codeph>null</codeph>.
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.text.TextFormatAlign.xml"><linktext>flash.text.TextFormatAlign</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:UITextFormat:measureHTMLText"><apiName>measureHTMLText</apiName><shortdesc>
      Возвращает данные измерения для указанного текста HTML, который может содержать HTML-теги, например &amp;lt;font&amp;gt; и &amp;lt;b&amp;gt;. При этом предполагается, что текст отображается в однострочном поле UITextField при помощи объекта UITextFormat, определяющего его формат.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект TextLineMetrics, содержащий измерения текста.
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>htmlText</apiItemName><apiType value="String"/><apiDesc>Строка, определяющая измеряемый HTML-текст.
      
      </apiDesc></apiParam><apiParam><apiItemName>roundUp</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Флаг с логическим значением, определяющий необходимость округления измеренной ширины и высоты до ближайшего целого числа. Округление допустимо в большинстве случаев.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает данные измерения для указанного текста HTML, который может содержать HTML-теги, например <codeph>&lt;font></codeph> и <codeph>&lt;b></codeph>. При этом предполагается, что текст отображается в однострочном поле UITextField при помощи объекта UITextFormat, определяющего его формат.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextFormat:measureText"><apiName>measureText</apiName><shortdesc>
      Возвращает данные измерения для указанного текста. При этом предполагается, что текст отображается в однострочном поле UITextField при помощи объекта UITextFormat, определяющего его формат.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект TextLineMetrics, содержащий измерения текста.
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Строка, содержащая измеряемый текст.
      
      </apiDesc></apiParam><apiParam><apiItemName>roundUp</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Флаг с логическим значением, определяющий необходимость округления измеренной ширины и высоты до ближайшего целого числа. Округление допустимо в большинстве случаев.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает данные измерения для указанного текста. При этом предполагается, что текст отображается в однострочном поле UITextField при помощи объекта UITextFormat, определяющего его формат. 
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiValue id="mx.core:UITextFormat:antiAliasType"><apiName>antiAliasType</apiName><shortdesc>
      Определяет параметры сглаживания для класса UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"advanced"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет параметры сглаживания для класса UITextField. Возможными значениями являются <codeph>normal</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) и <codeph>advanced</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
      
      <p>Значение по умолчанию равно <codeph>advanced</codeph> и обеспечивает расширенное сглаживание для встроенного шрифта. Установите значение <codeph>normal</codeph> для отключения расширенного сглаживания.</p>
      
      <p>Это свойство не влияет на системные шрифты.</p>
      
      <p>Этот стиль применяется ко всему тексту в объекте UITextField, и его невозможно применить выборочно только к некоторым символам.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:direction"><apiName>direction</apiName><shortdesc>
	  Направленность текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
	 
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Направленность текста.
	 
	  <p>Допустимые значения – <codeph>ltr</codeph> для текста, записываемого слева направо, как в гарнитурах латинского стиля, и <codeph>rtl</codeph> для текста, записываемого справа налево, как в арабском и иврите.</p>
	 
	  <p>FTE и TLF используют это значение в алгоритме двухстороннего макета текста, который сопоставляет последовательность символов «Юникод» с последовательностью глифов.</p>
	 
	  <p>Примечание. Этот стиль применяется только в том случае, если этот формат UITextFormat используется с UIFTETextField, а не с UITextField.</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:gridFitType"><apiName>gridFitType</apiName><shortdesc>
      Определяет параметр подгонки к сетке для класса UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>"pixel"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет параметр подгонки к сетке для класса UITextField. Допустимыми значениями являются <codeph>none</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>pixel</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) и <codeph>subpixel</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
      
      <p>Это свойство применяется только при использовании вложенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
      
      <p>Это свойство не влияет на системные шрифты.</p>
     
      <p>Этот стиль применяется ко всему тексту в объекте UITextField, и его невозможно применить выборочно только к некоторым символам.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:locale"><apiName>locale</apiName><shortdesc>
	  Языковой стандарт текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
	 
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Языковой стандарт текста.
	 
	  <p>FTE и TLF используют этот языковой стандарт для сопоставления символов «Юникод» с глифами шрифтов и поиска резервных шрифтов.</p>
	 
	  <p>Примечание. Этот стиль применяется только в том случае, если этот формат UITextFormat используется с UIFTETextField, а не с UITextField.</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:sharpness"><apiName>sharpness</apiName><shortdesc>
      Определяет параметр резкости для класса UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет параметр резкости для класса UITextField. Это свойство указывает резкость краев глифа. Возможными значениями являются числа от -400 до 400. 
      
      <p>Это свойство применяется только при использовании вложенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
      
      <p>Это свойство не влияет на системные шрифты.</p>
     
      <p>Этот стиль применяется ко всему тексту в объекте UITextField, и его невозможно применить выборочно только к некоторым символам.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:thickness"><apiName>thickness</apiName><shortdesc>
      Определяет параметр толщины для класса UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>0
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет параметр толщины для класса UITextField. Это свойство указывает толщину границ глифов. Возможные значения – числа от -200 до 200. 
      
      <p>Это свойство применяется только при использовании вложенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
      
      <p>Это свойство не влияет на системные шрифты.</p>
     
      <p>Этот стиль применяется ко всему тексту в объекте UITextField, и его невозможно применить выборочно только к некоторым символам.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextFormat:useFTE"><apiName>useFTE</apiName><shortdesc>
      Определяет способ измерения текста для методов measureText() и measureHTMLText().</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      Определяет способ измерения текста для методов <codeph>measureText()</codeph> и <codeph>measureHTMLText()</codeph>.
     
      <p>Если значение равно <codeph>true</codeph>, то используется внеэкранный экземпляр класса FTETextField в Text Layout Framework. Если значение равно <codeph>false</codeph>, то используется внеэкранный экземпляр класса TextField в Flash Player.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextFormat:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Объект moduleFactory, использованный для создания полей TextField для встроенных шрифтов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Объект moduleFactory, использованный для создания полей TextField для встроенных шрифтов.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredInstance"><apiName>IDeferredInstance</apiName><shortdesc>
  Интерфейс IDeferredInstance определяет интерфейс фабрики экземпляров Flex с отложенным созданием.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IDeferredInstance определяет интерфейс фабрики экземпляров Flex с отложенным созданием. Реализация IDeferredInstance создает определенное значение экземпляра, если сначала вызывается метод <codeph>getInstance()</codeph> и возвращает ссылку на это значение, если затем вызывается метод <codeph>getInstance()</codeph>.
 
  <p>Компилятор Flex выполняет следующие автоматические преобразования при обнаружении MXML, который назначает значение свойству с типом IDeferredInstance:</p>
 
  <ol>
      <li>При назначении свойства типа IDeferredInstance, которое является нижестоящим тегом MXML, представляющим класс, например, тег компонента, компилятор создает реализацию IDeferredInstance, метод <codeph>getInstance()</codeph> которой возвращает экземпляр класса, настроенный, как указано в коде MXML. В следующем примере представлен этот формат; в этом примере MyComp является пользовательским компонентом, который имеет переменную myDeferredInstanceProperty типа IDeferredInstance. Компилятор создает реализацию IDeferredInstance1, метод <codeph>getInstance()</codeph> которой возвращает экземпляр класса Label со свойством текста, установленным на «Отложенная метка»:
          <pre>
          &lt;MyComp>
              &lt;myDeferredInstanceProperty>
                  &lt;Label text="This is a deferred label"/>
              &lt;/myDeferredInstanceProperty>
          &lt;/MyComp></pre>
      </li>
      <li>При назначении текстовой строки свойству типа IDeferredInstance, компилятор интерпретирует строку как полное имя класса и создает реализацию IDeferredInstance, метод <codeph>getInstance()</codeph> которой возвращает новый экземпляр указанного класса. Указанный класс должен содержать конструктор без аргументов. В следующем примере представлен этот формат; в этом примере компилятор создает реализацию IDeferredInstance1, метод <codeph>getInstance()</codeph> которой возвращает экземпляр класс MyClass:
          <pre>
          &lt;MyComp myDeferredInstanceProperty="myPackage.MyClass/></pre>
      </li>
  </ol>
 
  <p>Используйте интерфейс IDeferredInstance, когда класс ActionScript задерживает реализацию значения свойства. Невозможно использовать IDeferredInstance, если класс ActionScript требует несколько экземпляров с тем же самым значением. В этих ситуациях используйте интерфейс IFactory.</p>
  
  <p>Класс states.AddChild включает свойство <codeph>childFactory</codeph> с типом IDeferredInstance.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.states.xml#AddChild"><linktext>mx.states.AddChild</linktext></link></related-links><apiOperation id="mx.core:IDeferredInstance:mx.core:IDeferredInstance:getInstance"><apiName>getInstance</apiName><shortdesc>
      Создает объект экземпляра из класса или функции, если экземпляр еще не существует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект экземпляра.
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Создает объект экземпляра из класса или функции, если экземпляр еще не существует.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
  SpriteAsset является подклассом класса flash.display.Spite, представляющего векторные графические изображения, встраиваемые в приложение Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  SpriteAsset является подклассом класса flash.display.Spite, представляющего векторные графические изображения, встраиваемые в приложение Flex. Он реализует интерфейс IFlexDisplayObject, который позволяет встроенному векторному графическому изображению отображаться в элементе управления Image или использоваться в качестве фона контейнера или темы оформления компонента.
 
  <p>Встраиваемое векторное графическое изображение может находиться в файле SVG. Можно также встроить символ спрайта, расположенный в SWF-файле, созданном Flash. В обоих случаях, компилятор MXML автоматически создает класс, который расширяет класс SpriteAsset для представления встроенного векторного графического изображения.</p>
 
  <p>Класс SpriteAsset, как правило, не используется напрямую при создании приложения Flex. Например, можно встроить символ спрайта из SWF-файла и отобразить его в элементе управления Image при помощи следующего кода:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Assets.swf', symbol='Logo')"/></pre>
 
  <p>Или используйте его как фоновое изображение приложения в синтаксисе CSS при помощи следующего кода:</p>
 
  <pre>
  &lt;mx:Style>
      Application
      {
          backgroundImage: Embed(source="Assets.swf", symbol='Logo')
      }
  &lt;mx:Style/></pre>
 
  <p>Для этого необязательно учитывать, что компилятор MXML создал подкласс BitmapAsset.</p>
 
  <p>При этом понимание процессов на уровне ActionScript может оказаться полезным. Для встраивания векторного графического изображения в ActionScript объявляется переменная типа Class, в которой размещаются метаданные <codeph>[Embed]</codeph>. Например, встраивание символа спрайта из SWF-файла осуществляется следующим образом:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="Logo")]
  private var logoClass:Class;</pre>
 
  <p>Компилятор MXML определяет, что символ Logo в файле Assets.swf является спрайтом, автоматически создает представляющий его подкласс класса SpriteAsset и настраивает переменную, которая становится ссылкой на этот автоматически созданный класс. Это ссылку класса затем можно использовать для создания экземпляров SpriteAsset с помощью оператора <codeph>new</codeph> и применения интерфейса API класса Sprite:</p>
 
  <pre>
  var logo:SpriteAsset = SpriteAsset(new logoClass());
  logo.rotation=45;</pre>
 
  <p>Однако самостоятельное создание экземпляров SpriteAsset необходимо в редких случаях, так как свойства и стили изображения могут быть установлены в классе, порождающем изображение, а его компоненты создадут все необходимые экземпляры. Например, для отображения этого векторного графического изображения в элементе управления Image можно установить свойство Image <codeph>source</codeph> на <codeph>logoClass</codeph>. В MXML это выполняется следующим образом:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SpriteAsset:SpriteAsset"><apiName>SpriteAsset</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SpriteAsset:move"><apiName>move</apiName><shortdesc>
      
	  Перемещает этот объект по указанным координатам осей x и y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси x для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси y для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Перемещает этот объект по указанным координатам осей x и y.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SpriteAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Устанавливает фактический размер для этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Новая ширина для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Новая высота для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Устанавливает фактический размер для этого объекта.
	 
	  <p>Этот метод главным образом используется в реализации метода <codeph>updateDisplayList()</codeph>, в котором вы вычисляете фактический размер этого объекта, основанный на его явном размере, размере по отношению к вышестоящему элементу (процент от его размера), а также измеренный размер. Далее путем вызова метода <codeph>setActualSize()</codeph> вы применяете этот фактический размер к объекту.</p>
	 
	  <p>В других ситуациях вместо вызова этого метода требуется установка свойств, например, <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> или <codeph>percentHeight</codeph>.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SpriteAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      Возвращает объект EdgeMetrics для границы с четырьмя свойствами: left, top, right и bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      Возвращает объект EdgeMetrics для границы с четырьмя свойствами: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> и <codeph>bottom</codeph>. Значение каждого свойства равно толщине одной стороны границы в пикселях.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Рассчитанная высота этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Рассчитанная высота этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в нужное время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:SpriteAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Измеренная ширина этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Измеренная ширина этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в требуемое время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
  Класс EdgeMetrics указывает толщину четырех краевых областей вокруг визуального компонента в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс EdgeMetrics указывает толщину четырех краевых областей вокруг визуального компонента в пикселях.
 
  <p>Следующие свойства Flex имеют значения, которые являются объектами EdgeMetrics:</p>
 
  <ul>
  <li>Свойство <codeph>borderMetrics</codeph> классов mx.core.Container и mx.skins.Border включают при вычислениях значений свойств объекта EdgeMetrics только границу.</li>
 
  <li>Свойство <codeph>viewMetrics</codeph> класса mx.core.Container и подклассов класса Container включает возможные полосы прокрутки и элементы, не включенные в область содержимого: например, область верхнего колонтитула контейнера Panel и область компонента ControlBar, – в вычислениях значений свойств объекта EdgeMetrics.</li>
 
  <li>Свойство <codeph>viewMetricsAndPadding</codeph> класса mx.core.Container включает элементы, перечисленные для свойства <codeph>viewMetrics</codeph>, а также области, определяемые полями контейнера в вычислениях значений свойств объекта EdgeMetrics.</li>
  </ul>
 
  <p>Эти три свойства возвращают ссылку для объекта EdgeMetrics, используемого Container для измерения и макета; они не возвращают копию этого объекта. Если требуется копия, вызовите метод <codeph>clone()</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="mx.skins.xml#Border"><linktext>mx.skins.Border</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links><apiConstructor id="mx.core:EdgeMetrics:EdgeMetrics"><apiName>EdgeMetrics</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>left</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Ширина левой краевой области в пикселях.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Высота верхней краевой области в пикселях.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Ширина правой области края в пикселях.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>Высота нижней области края в пикселях.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:EdgeMetrics:clone"><apiName>clone</apiName><shortdesc>
	  Возвращает копию этого объекта EdgeMetrics.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.core:EdgeMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  Возвращает копию этого объекта EdgeMetrics.
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:EdgeMetrics:EMPTY"><apiName>EMPTY</apiName><shortdesc>
	  Объект EdgeMetrics со значением, равным нулю, для свойств left, top, right и bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
	  Объект EdgeMetrics со значением, равным нулю, для свойств <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> и <codeph>bottom</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:bottom"><apiName>bottom</apiName><shortdesc>
	  Высота нижней области края в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Высота нижней области края в пикселях.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:left"><apiName>left</apiName><shortdesc>
	  Ширина левой краевой области в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Ширина левой краевой области в пикселях.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:right"><apiName>right</apiName><shortdesc>
	  Ширина правой области края в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Ширина правой области края в пикселях.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EdgeMetrics:top"><apiName>top</apiName><shortdesc>
	  Высота верхней краевой области в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  Высота верхней краевой области в пикселях.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRepeater"><apiName>IRepeater</apiName><shortdesc>
  Интерфейс IRepeater определяет APIs для открытых API Repeater объекта Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IRepeater определяет APIs для открытых API Repeater объекта Repeater.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeater:mx.core:IRepeater:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
      Добавляет привязки во все UIComponents, созданные этим повторителем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Добавляет привязки во все UIComponents, созданные этим повторителем.
	 
	  <p>Этот метод вызывается инфраструктурой Flex. Как правило, разработчикам вызывать этот метод не требуется.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IRepeater:mx.core:IRepeater:initializeRepeater"><apiName>initializeRepeater</apiName><shortdesc>
      Инициализирует новый объект Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.core:IContainer</apiOperationClassifier><apiDesc>Контейнер, содержащий повторитель, который создаст в нем нижестоящие элементы.
	 
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Логический флаг, указывающий на необходимость создания нижестоящих элементов для всех нижестоящих узлов.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Инициализирует новый объект Repeater.
	 
	  <p>Этот метод вызывается инфраструктурой Flex. Как правило, разработчикам вызывать этот метод не требуется.</p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeater:mx.core:IRepeater:container:get"><apiName>container</apiName><shortdesc>
      Контейнер, содержащий этот повторитель, который создаст в нем нижестоящие элементы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IContainer</apiValueClassifier></apiValueDef><apiDesc>
      Контейнер, содержащий этот повторитель, который создаст в нем нижестоящие элементы.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:count:get"><apiName>count</apiName><shortdesc>
      Необходимое число выполнений этого повторителя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Необходимое число выполнений этого повторителя.
	 
      <p>При достижении повторителем во время выполнения окончания поставщика данных фактическое число выполнений будет меньше запрашиваемого.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:currentIndex:get"><apiName>currentIndex</apiName><shortdesc>
      Индекс элемента в dataProvider обрабатывается во время данного выполнения повторителя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Индекс элемента в <codeph>dataProvider</codeph> обрабатывается во время данного выполнения повторителя.
	 
	  <p>По завершении выполнения повторителя данное свойство будет иметь значение <codeph>-1</codeph>. Однако свойство <codeph>repeaterIndex</codeph> повторяемого экземпляра компонента запоминает индекс элемента <codeph>dataProvider</codeph>, из которого он был создан. В случае вложенных повторителей можно использовать массив <codeph>repeaterIndices</codeph>.</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/repeaterIndex"><linktext>mx.core.UIComponent.repeaterIndex</linktext></link><link href="mx.core.xml#UIComponent/repeaterIndices"><linktext>mx.core.UIComponent.repeaterIndices</linktext></link><link href="mx.core.xml#UIComponent/instanceIndex"><linktext>mx.core.UIComponent.instanceIndex</linktext></link><link href="mx.core.xml#UIComponent/instanceIndices"><linktext>mx.core.UIComponent.instanceIndices</linktext></link></related-links></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:currentItem:get"><apiName>currentItem</apiName><shortdesc>
      Элемент в dataProvider обрабатывается во время выполнения данного повторителя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Элемент в <codeph>dataProvider</codeph> обрабатывается во время выполнения данного повторителя.
	 
	  <p>По завершении выполнения повторителя это свойство будет иметь значение <codeph>null</codeph>. Однако в этом случае можно вызвать метод <codeph>getRepeaterItem()</codeph> повторяемого экземпляра компонента для получения элемента <codeph>dataProvider</codeph>, из которого он был создан.</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/getRepeaterItem()"><linktext>mx.core.UIComponent.getRepeaterItem()</linktext></link></related-links></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      Поставщик данных, используемый этим повторителем для создания повторяемых экземпляров нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Поставщик данных, используемый этим повторителем для создания повторяемых экземпляров нижестоящих элементов.
	  
	  <p>При чтении свойства <codeph>dataProvider</codeph> всегда будет получен объект ICollectionView или <codeph>null</codeph>. При установке свойства <codeph>dataProvider</codeph> не на <codeph>null</codeph> оно преобразуется в объект ICollectionView согласно следующим правилам:</p>
	 
	  <ul>
	    <li>При установке свойства на Array оно преобразуется в ArrayCollection.</li>
	    <li>При установке свойства на ICollectionView преобразование не выполняется.</li>
	    <li>При установке свойства на IList оно преобразуется в ListCollectionView.</li>
	    <li>При установке свойства на XML или XMLList оно преобразуется в XMLListCollection.</li>
	    <li>В противном случае оно преобразуется в отдельный элемент ArrayCollection.</li>
	  </ul>
     
      <p>Необходимо указать значение для свойства <codeph>dataProvider</codeph>, в противном случае компонент повторителя выполняться не будет.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:recycleChildren:get"><apiName>recycleChildren</apiName><shortdesc>
      Логический флаг, указывающий необходимость повторного использования повторителем ранее созданных нижестоящих элементов или создания новых.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Логический флаг, указывающий необходимость повторного использования повторителем ранее созданных нижестоящих элементов или создания новых.
	 
	  <p>Если при изменении <codeph>dataProvider</codeph>, <codeph>startingIndex</codeph> или <codeph>count</codeph> этого повторителя установлено значение <codeph>true</codeph>, они будут повторно использованы при привязке новых данных к нижестоящим элементам. Если требуется большее число нижестоящих элементов, выполняется их создание и добавление. Если требуется меньшее число нижестоящих элементов, выполняется удаление дополнительных элементов и «сборка мусора».</p>
     
      <p>Если при изменении <codeph>dataProvider</codeph>, <codeph>startingIndex</codeph>, или <codeph>count</codeph> этого повторителя установлено значение <codeph>false</codeph>, все предыдущие созданные нижестоящие элементы будут удалены, и затем будут созданы и добавлены новые нижестоящие элементы из новых элементов данных.</p>
	 
	  <p>Это свойство имеет значение <codeph>false</codeph> по умолчанию. Установка значения на <codeph>true</codeph> может увеличить производительность, но не применима во всех ситуациях. Так, если предварительно созданные нижестоящие элементы содержат информацию о состоянии, например, в виде текста, введенного пользователем, то при удалении нижестоящих элементов это состояние будет невозможно восстановить.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeater:mx.core:IRepeater:startingIndex:get"><apiName>startingIndex</apiName><shortdesc>
      Индекс в dataProvider, с которого начинается создание нижестоящих элементов повторителем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Индекс в <codeph>dataProvider</codeph>, с которого начинается создание нижестоящих элементов повторителем.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRectangularBorder"><apiName>IRectangularBorder</apiName><shortdesc>
  Интерфейс IRectangularBorder определяет интерфейс, реализуемый всеми классами, используемыми для темы оформления прямоугольной границы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IRectangularBorder определяет интерфейс, реализуемый всеми классами, используемыми для темы оформления прямоугольной границы.
 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:layoutBackgroundImage"><apiName>layoutBackgroundImage</apiName><shortdesc conref="mx.skins.RectangularBorder#layoutBackgroundImage()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.RectangularBorder#layoutBackgroundImage()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:backgroundImageBounds:get"><apiName>backgroundImageBounds</apiName><shortdesc conref="mx.skins.RectangularBorder#backgroundImageBounds">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="mx.skins.RectangularBorder#backgroundImageBounds">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRectangularBorder:mx.core:IRectangularBorder:hasBackgroundImage:get"><apiName>hasBackgroundImage</apiName><shortdesc conref="mx.skins.RectangularBorder#hasBackgroundImage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.skins.RectangularBorder#hasBackgroundImage">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MXMLObjectAdapter"><apiName>MXMLObjectAdapter</apiName><shortdesc>
  Класс MXMLObjectAdapter является реализацией заглушки для интерфейса IMXMLObject, что позволяет реализовать интерфейс без определения всех методов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс MXMLObjectAdapter является реализацией заглушки для интерфейса IMXMLObject, что позволяет реализовать интерфейс без определения всех методов. Все реализации являются эквивалентом пустых команд. Если метод должен возвращать значение, то возвращается null, 0 или false.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MXMLObjectAdapter:MXMLObjectAdapter"><apiName>MXMLObjectAdapter</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MXMLObjectAdapter:initialized"><apiName>initialized</apiName><shortdesc>
      
      Вызывается после создания объекта реализации и инициализации всех свойств компонентов, указанных в теге MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Документ MXML, создавший этот объект.
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Идентификатор, используемый <codeph>document</codeph> в качестве ссылки на этот объект. Если объект представляет собой глубокое свойство <codeph>document</codeph>, идентификатор <codeph>id</codeph> равен null.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Вызывается после создания объекта реализации и инициализации всех свойств компонентов, указанных в теге MXML.
	 
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:Application"><apiName>Application</apiName><shortdesc>
  Flex определяет контейнер по умолчанию или приложение, позволяющее добавлять содержимое в приложение без явного определения другого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="direction"/><Alternative owner="mx.core:Application" replacement="spark.components.Application" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между верхней границей приложения и его областью содержимого. 
 
  </description>
<default>24
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между нижней границей приложения и его областью содержимого.  
 
  </description>
<default>24
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="backgroundGradientColors" owner="mx.core:Application" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Указывает цвета, используемые для определения оттенка градиентной заливки фона приложения. Данный параметр следует установить равным массиву из двух значений uint, определяющих цвета RGB. Элементы 0 и 1 указывают начальное и конечное значения для цветового градиента. Для фона со сплошным цветом следует установить одинаковое значение цвета для элементов 0 и 1. Значение <codeph>undefined</codeph> указывает на то, что градиент фона создается на основе свойства <codeph>backgroundColor</codeph>.
 
  </description>
<default>undefined 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="backgroundGradientAlphas" owner="mx.core:Application" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Определяет значения прозрачности альфа-канала, используемые для градиентной заливки фона приложения. Следует установить массив из двух чисел. Элементы 0 и 1 определяют начальное и конечное значения для градиента альфа-канала.
 
  </description>
<default>[ 1.0, 1.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="yes" name="modalTransparencyDuration" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Продолжительность (в миллисекундах) эффекта модальной прозрачности, который воспроизводится при открытии или закрытии модального окна.
 
  </description>
<default>100
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="modalTransparencyColor" owner="mx.core:Application" playerVersion="Flash9" type="uint">
<description>
  Цвет уровня модального перекрытия. Этот стиль используется совместно со стилем <codeph>modalTransparency</codeph> для определения окраски приложения, если модальное окно является открытым.
 
  </description>
<default>#DDDDDD
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="modalTransparencyBlur" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Размытие, применяемое для приложения, если модальное окно является открытым. Эффект размытия смягчает контуры изображения. 
  
  </description>
<default>3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.filters.BlurFilter.xml"><linktext>flash.filters.BlurFilter</linktext></link></related-links></style><style inherit="yes" name="modalTransparency" owner="mx.core:Application" playerVersion="Flash9" type="Number">
<description>
  Модальность компонентов, запущенных PopUp Manager, моделируется посредством создания большой прозрачной области перекрытия под компонентом. Вследствие визуализации прозрачных объектов может появиться небольшое затемнение объектов при перекрытии. Эффективную прозрачность можно установить путем изменения значения <codeph>modalTransparency</codeph> от 0,0 (полная прозрачность) до 1,0 (полная непрозрачность). Можно также установить цвет области перекрытия путем изменения стиля <codeph>modalTransparencyColor</codeph>.
 
  </description>
<default>0.5
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Application
    <strong>Properties</strong>
    application="<i>No default</i>"
    controlBar="null"
    frameRate="24"
    historyManagementEnabled="true|false"
    layout="vertical|horizontal|absolute"
    pageTitle"<i>No default</i>"
    preloader="<i>No default</i>"
    resetHistory="false|true"
    scriptRecursionLimit="1000"
    scriptTimeLimit="60"
    usePreloader="true|false"
    viewSourceURL=""
    xmlns:<i>No default</i>="<i>No default</i>"
 
    <strong>Styles</strong> 
    backgroundGradientAlphas="[ 1.0, 1.0 ]"
    backgroundGradientColors="undefined"
    horizontalAlign="center|left|right"
    horizontalGap="8"
    modalTransparency="0.5"
    modalTransparencyBlur="3"
    modalTransparencyColor="#DDDDDD"
    modalTransparencyDuration="100"
    paddingBottom="24"
    paddingTop="24"
    verticalAlign="top|bottom|middle"
    verticalGap="6"
  
    <strong>Events</strong>
    applicationComplete="<i>No default</i>"
    error="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:LayoutContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex определяет контейнер по умолчанию или приложение, позволяющее добавлять содержимое в приложение без явного определения другого контейнера. Flex создает этот контейнер из тега <codeph>&lt;mx:Application></codeph>, который является первым тегом в файле приложения MXML. Несмотря на то, что контейнер Application удобно использовать в качестве единственного контейнера в приложении, в большинстве случаев перед добавлением элементов управления в приложение явным образом определяется по крайней мере еще один контейнер.
 
  <p>Приложения поддерживают предварительно определенный стандартный стиль, задающий белый фон и выравнивание слева, а также удаляющий все поля. Для использования этого стиля выполните следующие действия:</p>
 
  <pre>
    &lt;mx:Application styleName="plain" />
  </pre>
 
  <p>Это соответствует установке следующих атрибутов стиля:</p>
 
  <pre>
    backgroundColor="0xFFFFFF"
    horizontalAlign="left"
    paddingLeft="0"
    paddingTop="0"
    paddingBottom="0"
    paddingRight="0"
  </pre>
 
  </apiDesc><example conref="SimpleApplicationExample.mxml"><swfblock conref="examples/SimpleApplicationExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.managers.xml#CursorManager"><linktext>mx.managers.CursorManager</linktext></link><link href="mx.managers.xml#LayoutManager"><linktext>mx.managers.LayoutManager</linktext></link><link href="mx.managers.xml#SystemManager"><linktext>mx.managers.SystemManager</linktext></link><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="mx.core:Application_flash.events.ErrorEvent.ERROR_error"><apiName>error</apiName><shortdesc>
  Отправляется в случае сбоя вызова службы HTTPService.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ErrorEvent.ERROR</apiEventType><adobeApiEventClassifier>flash.events.ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется в случае сбоя вызова службы HTTPService.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Application_mx.events.FlexEvent.APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><shortdesc>
  Отправляется после инициализации приложения, обрабатывается LayoutManager и прикрепляется к списку отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после инициализации приложения, обрабатывается LayoutManager и прикрепляется к списку отображения.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Application:Application"><apiName>Application</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Application:addToCreationQueue"><apiName>addToCreationQueue</apiName><shortdesc>
      Добавьте контейнер в очередь создания объекта Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="Object"/><apiDesc>Идентификатор контейнера, добавляемого в очередь, или указатель на сам контейнер
     
      </apiDesc></apiParam><apiParam><apiItemName>preferredIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>(необязательно) Положительное целое число, которое определяет расположение контейнера в очереди по отношению к другим контейнерам, находящимся в очереди.
     
      </apiDesc></apiParam><apiParam><apiItemName>callbackFunc</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>Этот параметр игнорируется.
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Этот параметр игнорируется.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавьте контейнер в очередь создания объекта Application.
     
      <p>Используйте этот способ для создания экземпляра и визуализации содержимого контейнера в упорядоченном виде. Перед вызовом этой функции следует установить свойство контейнера <codeph>creationPolicy</codeph> равным <codeph>none</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:Application:controlBar"><apiName>controlBar</apiName><shortdesc>
      ApplicationControlBar для этого приложения Application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ApplicationControlBar для этого приложения Application. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.containers.xml#ApplicationControlBar"><linktext>mx.containers.ApplicationControlBar</linktext></link></related-links></apiValue><apiValue id="mx.core:Application:frameRate"><apiName>frameRate</apiName><shortdesc>
        Указывает частоту кадров для приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>24
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Указывает частоту кадров для приложения.
        <p>Примечание. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:historyManagementEnabled"><apiName>historyManagementEnabled</apiName><shortdesc>
      Если значение равно false, то History Manager будет отключен.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение равно <codeph>false</codeph>, то History Manager будет отключен. Установка значения false рекомендуется при использовании BrowserManager.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:pageTitle"><apiName>pageTitle</apiName><shortdesc>
        Определяет строку, появляющуюся в строке заголовка браузера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Определяет строку, появляющуюся в строке заголовка браузера. Это свойство обеспечивает те же функциональные возможности, что и тег HTML <codeph>&lt;title></codeph>.
     
        <p>Примечание. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML. Значение, заданное кодом MXML, предназначено для использования средством с целью обновления шаблонов HTML с SDK.</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:preloader"><apiName>preloader</apiName><shortdesc>
        Указывает путь к классу компонентов SWC или классу компонентов ActionScript, определяющим пользовательский индикатор выполнения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
        Указывает путь к классу компонентов SWC или классу компонентов ActionScript, определяющим пользовательский индикатор выполнения. Компонент SWC должен находиться в том же каталоге, что и MXML-файл, или в каталоге WEB-INF/flex/user_classes web-приложения Flex.
        <p>Примечание. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:preloaderBaseColor"><apiName>preloaderBaseColor</apiName><shortdesc>
        Определяет основной цвет, используемый компонентом предварительного загрузчика по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
        Определяет основной цвет, используемый компонентом предварительного загрузчика по умолчанию. Это свойство равноценно стилю <codeph>baseColor</codeph>, используемому темами оформления Spark. Обычно это свойство должно иметь такое же значение, как стиль <codeph>baseColor</codeph>, используемый приложением.
        
        <p>Примечание. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:resetHistory"><apiName>resetHistory</apiName><shortdesc>
      Если значение равно true, то состояние истории приложения сбрасывается в начальное состояние при повторной загрузке приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение равно <codeph>true</codeph>, то состояние истории приложения сбрасывается в начальное состояние при повторной загрузке приложения. Повторная загрузка приложений осуществляется в следующих случаях:
      <ul>
        <li>Пользователь нажимает кнопку браузера «Обновить».</li>
        <li>Пользователь переходит на другую web-страницу, а затем нажимает клавишу «Назад» для возврата в приложение Flex.</li>
        <li>Пользователь загружает приложение Flex из меню браузера «Избранное» или «Закладки».</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:scriptRecursionLimit"><apiName>scriptRecursionLimit</apiName><shortdesc>
        Определяет максимальную глубину стека вызовов Flash Player или AIR до остановки проигрывателя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>1000
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Определяет максимальную глубину стека вызовов Flash Player или AIR до остановки проигрывателя. Определяется граница переполнения стека.
        <p>Примечание. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:scriptTimeLimit"><apiName>scriptTimeLimit</apiName><shortdesc>
        Определяет максимальную продолжительность (в секундах) работы обработчика событий ActionScript, превышение которой вызывает зависание Flash Player или AIR и прерывание их работы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/><apiDefaultValue>60
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Определяет максимальную продолжительность (в секундах) работы обработчика событий ActionScript, превышение которой вызывает зависание Flash Player или AIR и прерывание их работы. Максимальное допустимое значение для определения: 60 секунд.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:usePreloader"><apiName>usePreloader</apiName><shortdesc>
        Если значение равно true, определяется отображение предварительного загрузчика приложений.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
        Если значение равно <codeph>true</codeph>, определяется отображение предварительного загрузчика приложений.
        <p>Примечание. Это свойство не может быть определено кодом ActionScript; оно должно быть задано с помощью кода MXML.</p>
     
        </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:application:get"><apiName>application</apiName><shortdesc>
      Ссылка на приложение верхнего уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiType value="Object"/><apiDeprecated replacement="FlexGlobals.topLevelApplication" sinceVersion="4.0"/></apiValueDef><apiDesc>
      Ссылка на приложение верхнего уровня.
     
      <p>Обычно возможно наличие иерархии объектов Application, так как приложение может использовать элемент управления SWFLoader для динамической загрузки другого приложения. Свойство <codeph>parentApplication</codeph> компонента UIComponent может использоваться для доступа к подчиненному приложений, в котором находится UIComponent, а также для перемещения по иерархии до приложения верхнего уровня.</p>
      
      <p>Это свойство устарело в Flex4. Обратите внимание, что это свойство все еще будет возвращать приложения типа mx.core.Application и mx.core.WindowedApplication, как в предыдущих версиях. С версии Flex 4 оно также будет возвращать приложения типа spark.components.Application или spark.components.WindowedApplication.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:parameters:get"><apiName>parameters</apiName><shortdesc>
      Свойство parameters возвращает объект, содержащий пары «значение - имя», представляющие параметры для приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Свойство parameters возвращает объект, содержащий пары «значение - имя», представляющие параметры для приложения.
     
      <p>Можно использовать цикл for-in для извлечения всех имен и значений из объекта параметров.</p>
     
      <p>Существует два источника параметров: строка запроса в URL-адресе приложения и значения HTML-параметра FlashVars (оно затрагивает только главное приложение).</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:url:get"><apiName>url</apiName><shortdesc>
      URL-адрес, с которого был загружен файл этого приложения SWF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      URL-адрес, с которого был загружен файл этого приложения SWF.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Application:viewSourceURL:get"><apiName>viewSourceURL</apiName><shortdesc>
      URL-адрес для просмотра кода приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      URL-адрес для просмотра кода приложения. Определение этого свойства добавляет пункт меню «Отобразить код» в контекстное меню по умолчанию для приложения. При выборе этого пункта меню <codeph>viewSourceURL</codeph> открывается в новом окне.
     
      <p>Свойство <codeph>viewSourceURL</codeph> следует определить с использованием MXML, а не ActionScript, как показано в следующем примере:</p>
     
      <pre>
        &lt;mx:Application viewSourceURL="http://path/to/source">
          ...
        &lt;/mx:Application></pre>
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexModule"><apiName>IFlexModule</apiName><shortdesc>
  Интерфейс IFlexModule используется в качестве дополнительного соглашения с IFlexModuleFactory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IFlexModule используется в качестве дополнительного соглашения с IFlexModuleFactory. Если экземпляр IFlexModule создается с помощью IFlexModuleFactory, то фабрика после создания сохранит ссылку на себя.
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:DesignLayer"><apiName>DesignLayer</apiName><shortdesc>
      Класс DesignLayer представляет группу видимости, которая может быть связана с одним или несколькими экземплярами IVisualElement во время выполнения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
      Класс DesignLayer представляет группу видимости, которая может быть связана с одним или несколькими экземплярами IVisualElement во время выполнения. Экземпляры DesignLayer поддерживают свойство <codeph>visible</codeph> и alpha, при установке которого оно распространяется на связанные нижестоящие элементы слоя.
     
      </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:DesignLayer_mx.events.PropertyChangeEvent_layerPropertyChange"><apiName>layerPropertyChange</apiName><shortdesc>
      Отправляется по слою, когда изменяется effectiveVisibility или effectiveAlpha.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>mx.events.PropertyChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
      Отправляется по слою, когда изменяется <codeph>effectiveVisibility</codeph> или <codeph>effectiveAlpha</codeph>.
      
      </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:DesignLayer:DesignLayer"><apiName>DesignLayer</apiName><shortdesc>
          Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
          Конструктор.
          
          </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DesignLayer:addLayer"><apiName>addLayer</apiName><shortdesc>
          Добавляет нижестоящий элемент DesignLayer к этому слою.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier><apiDesc>Добавляемый нижестоящий элемент слоя.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Добавляет нижестоящий элемент DesignLayer к этому слою.
         
          </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DesignLayer:getLayerAt"><apiName>getLayerAt</apiName><shortdesc>
          Возвращает нижестоящий элемент DesignLayer с заданной позицией индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Указанный нижестоящий элемент DesignLayer, если индекс в диапазоне от 0 до <codeph>numLayers</codeph> - 1. Возвращает <codeph>null</codeph>, если индекс является недействительным.
         
          </apiDesc><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Отсчитываемый от нуля индекс нижестоящего элемента DesignLayer.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Возвращает нижестоящий элемент DesignLayer с заданной позицией индекса.
         
          <p>Обратите внимание, что порядок нижестоящих элементов DesignLayer является незначащим. Метод <codeph>getLayerAt</codeph>, используемый вместе с numLayers для итерации в списке нижестоящих элементов.</p> 
         
          </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="mx.core.numLayers.xml"><linktext>numLayers</linktext></link></related-links></apiOperation><apiOperation id="mx.core:DesignLayer:removeLayer"><apiName>removeLayer</apiName><shortdesc>
          Удаляет нижестоящий элемент DesignLayer из этого слоя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>mx.core:DesignLayer</apiOperationClassifier><apiDesc>Удаляемый нижестоящий элемент слоя.
         
          </apiDesc></apiParam></apiOperationDef><apiDesc>
          Удаляет нижестоящий элемент DesignLayer из этого слоя.
         
          </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:DesignLayer:alpha:get"><apiName>alpha</apiName><shortdesc>
          Альфа-канал для этого экземпляра слоя разработки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Альфа-канал для этого экземпляра слоя разработки.
         
          <p>Если выполнено обновление, соответствующее событие изменения для <codeph>effectiveAlpha</codeph> отправляется всем прослушивателям <codeph>layerPropertyChange</codeph> этого слоя, а также прослушивателям задействованных последующих слоев, если таковые есть.</p>
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:effectiveAlpha:get"><apiName>effectiveAlpha</apiName><shortdesc>
          Свойство, возвращающее эффективное значение альфа-канала этого слоя разработки (в котором учитывается значение альфа-канала этого слоя, умноженное на значение альфа-канала предшествующих слоев).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>1.0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Свойство, возвращающее эффективное значение альфа-канала этого слоя разработки (в котором учитывается значение альфа-канала этого слоя, умноженное на значение альфа-канала предшествующих слоев).  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:effectiveVisibility:get"><apiName>effectiveVisibility</apiName><shortdesc>
          Возвращает эффективное значение видимости этого слоя разработки (в котором учитывается видимость этого слоя, а также видимость предшествующих слоев).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>true
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Возвращает эффективное значение видимости этого слоя разработки (в котором учитывается видимость этого слоя, а также видимость предшествующих слоев).  
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:id:get"><apiName>id</apiName><shortdesc>
          Идентификатор компонента слоя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
          Идентификатор компонента слоя. Это значение становится именем экземпляра слоя и в этом качестве не должно содержать символов пробела или специальных символов. 
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:numLayers:get"><apiName>numLayers</apiName><shortdesc>
          Число нижестоящих элементов DesignLayer по отношению к этому слою.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Число нижестоящих элементов DesignLayer по отношению к этому слою.
         
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:parent:get"><apiName>parent</apiName><shortdesc>
          Вышестоящий слой этого слоя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier><apiDefaultValue>null
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Вышестоящий слой этого слоя. 
          
          </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:DesignLayer:visible:get"><apiName>visible</apiName><shortdesc>
          Видимость для этого экземпляра слоя разработки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
         
          </apiDefaultValue></apiValueDef><apiDesc>
          Видимость для этого экземпляра слоя разработки.
         
          <p>Если выполнено обновление, соответствующее событие изменения для <codeph>effectiveVisibility</codeph> отправляется всем прослушивателям <codeph>layerPropertyChange</codeph> этого слоя, а также прослушивателям задействованных последующих слоев, если таковые есть.</p>
         
          </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexAsset"><apiName>IFlexAsset</apiName><shortdesc>
  IFlexAsset является интерфейсом маркера со следующим значением: если класс объявляет, что он реализует IFlexAsset, то этот класс представляет ресурс, например, растровое изображение, шрифт, или звук, который был встроен в приложении Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexAsset является интерфейсом маркера со следующим значением: если класс объявляет, что он реализует IFlexAsset, то этот класс представляет ресурс, например, растровое изображение, шрифт, или звук, который был встроен в приложении Flex. Этот интерфейс не определяет свойства или методы, которые фактически класс должен реализовать.
 
  <p>Проигрыватель использует классы ActionScript для представления вложенных ресурсов, а также выполняемый код ActionScript. При встраивании ресурсов в приложение Flex компилятор MXML автоматически создает класс для его представления, и все подобные классы объявляют, что они выполняют реализацию IFlexAsset таким образом, чтобы их можно отличить от классов кода.</p>
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IBorder"><apiName>IBorder</apiName><shortdesc>
  Интерфейс IBorder определяет интерфейс, реализуемый всеми классами, которые используются для тем оформления границ.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IBorder определяет интерфейс, реализуемый всеми классами, которые используются для тем оформления границ.
 
  <p>Не является ошибкой, если тема оформления границы не реализует IBorder. Однако в этом случае контейнер, использующий тему оформления, не может определить метрики границы. Поэтому контейнер размещает содержимое начиная с верхнего левого края (регулируется при возможном заполнении). Стиль <codeph>borderThickness</codeph> обычно определяет значение стиля <codeph>borderMetrics</codeph> для класса HaloBorder. Flex анализирует свойство <codeph>scale9Grid</codeph> классов графических тем оформления для определения значения стиля <codeph>borderMetrics</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IBorder:mx.core:IBorder:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Возвращает объект EdgeMetrics для границы с четырьмя свойствами: left, top, right и bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Возвращает объект EdgeMetrics для границы с четырьмя свойствами: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> и <codeph>bottom</codeph>. Значение каждого свойства равно толщине одной стороны границы в пикселях.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UIComponent"><apiName>UIComponent</apiName><shortdesc>
  Класс UIComponent является базовым классом для всех визуальных компонентов, как интерактивных, так и неинтерактивных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><effects><effect event="removed" name="removedEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится при удалении компонента из контейнера.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="added" name="addedEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится при добавлении компонента в качестве нижестоящего элемента к контейнеру.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="focusOut" name="focusOutEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится, когда компонент теряет фокус клавиатуры.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="focusIn" name="focusInEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится, когда компонент перемещается в фокус клавиатуры.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="rollOut" name="rollOutEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится, когда пользователь убирает курсор мыши с компонента.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="rollOver" name="rollOverEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится при наведении курсора мыши на компонент.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="mouseUp" name="mouseUpEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится, когда пользователь отпускает кнопку мыши над компонентом.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="mouseDown" name="mouseDownEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится при нажатии на кнопку мыши над компонентом.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="hide" name="hideEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится при изменении состояния компонента на «Невидимый».
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="show" name="showEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится при изменении состояния компонента на «Видимый».
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="resize" name="resizeEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится при изменении размеров компонента.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="move" name="moveEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится при перемещении компонента.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect><effect event="creationComplete" name="creationCompleteEffect" owner="mx.core:UIComponent">
<description>
  Воспроизводится при создании компонента.
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style format="Color" inherit="yes" name="themeColor" owner="mx.core:UIComponent" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Цвет темы компонента. Это свойство управляет внешним видом выделения, внешним видом при выборе компонента и подобными визуальными средствами, но оно не распространяется на стандартные границы или цвет фона компонента. Предпочтительными значениями являются значения <codeph>haloGreen</codeph>, <codeph>haloBlue</codeph>, <codeph>haloOrange</codeph> и <codeph>haloSilver</codeph>, при этом можно использовать любое допустимое значение цвета.
 
  <p>Значения по умолчанию стилей <codeph>rollOverColor</codeph> и <codeph>selectionColor</codeph> основаны на значении <codeph>themeColor</codeph>.</p>
 
  </description>
<default>"haloBlue"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="focusThickness" owner="mx.core:UIComponent" playerVersion="Flash9" type="Number">
<description>
  Толщина контура прямоугольника фокусировки в пикселях.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusSkin" owner="mx.core:UIComponent" playerVersion="Flash9" type="Class">
<description>
  Тема оформления для рисования прямоугольника фокусировки. Значением по умолчанию для компонентов Halo является mx.skins.halo.HaloFocusRect. Значением по умолчанию для компонентов Spark является spark.skins.spark.FocusSkin.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusBlendMode" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Режим наложения, используемый прямоугольником фокусировки. Для получения дополнительной информации см. свойство <codeph>blendMode</codeph> класса flash.display.DisplayObject.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="errorColor" owner="mx.core:UIComponent" playerVersion="Flash9" type="uint">
<description>
  Цвет выделения компонента при неудачном выполнении проверки. Flex также устанавливает стиль <codeph>borderColor</codeph> компонента для <codeph>errorColor</codeph> в случае сбоя при проверке. <codeph/> <codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="baseColor" owner="mx.core:UIComponent" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Основной цвет компонента.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalCenter" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Расстояние по вертикали в пикселях от центра области содержимого компонента до центра компонента. При установке этого стиля центр компонента прикрепляется к центру области его содержимого; при изменении размеров контейнера эти центры сохраняют вертикальное разделение.
 
  <p>Этот стиль действует только при использовании для компонента в контейнере Canvas или в контейнерах Panel или Application, свойство <codeph>layout</codeph> которых установлено на <codeph>absolute</codeph>.</p> 
 
  <p>Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что свойство не установлено.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="top" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Расстояние по вертикали от верхнего края области содержимого элемента управления до верхнего края компонента в пикселях. При установке этого стиля верхний край компонента прикрепляется к верхнему краю области его содержимого; при изменении размеров контейнера эти края сохраняют разделение.
 
  <p>Этот стиль действует только при использовании для компонента в контейнере Canvas или в контейнерах Panel или Application, свойство <codeph>layout</codeph> которых установлено на <codeph>absolute</codeph>.</p> 
 
  <p>Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что свойство не установлено.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="right" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Расстояние по горизонтали от правого края компонента до правого края области его содержимого в пикселях. При установке этого стиля правый край компонента прикрепляется к правому краю области его содержимого; при изменении размеров контейнера, эти края сохраняют разделение.
 
  <p>Этот стиль действует только при использовании для компонента в контейнере Canvas или в контейнерах Panel или Application, свойство <codeph>layout</codeph> которых установлено на <codeph>absolute</codeph>.</p> 
 
  <p>Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что свойство не установлено.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="left" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Расстояние по горизонтали от левого края области содержимого компонента до левого края компонента в пикселях. При установке этого стиля левый край компонента прикрепляется к левому краю области его содержимого; при изменении размеров контейнера оба края сохраняют разделение.
 
  <p>Этот стиль действует только при использовании для компонента в контейнере Canvas или в контейнерах Panel или Application, свойство <codeph>layout</codeph> которых установлено на <codeph>absolute</codeph>.</p> 
 
  <p>Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что свойство не установлено.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalCenter" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Горизонтальное расстояние в пикселях от центра области содержимого компонента до центра компонента. При установке этого стиля центр компонента прикрепляется к центру области его содержимого; при изменении размеров контейнера эти центры сохраняют разделение по горизонтали.
 
  <p>Этот стиль действует только при использовании для компонента в контейнере Canvas или в контейнерах Panel или Application, свойство <codeph>layout</codeph> которых установлено на <codeph>absolute</codeph>.</p> 
 
  <p>Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что свойство не установлено.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="bottom" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Расстояние по горизонтали от нижнего края компонента до нижнего края области его содержимого в пикселях. При установке этого стиля нижний край компонента прикрепляется к нижнему краю области его содержимого; при изменении размеров контейнера, эти края сохраняют разделение.
 
  <p>Этот стиль действует только при использовании для компонента в контейнере Canvas или в контейнерах Panel или Application, свойство <codeph>layout</codeph> которых установлено на <codeph>absolute</codeph>.</p> 
 
  <p>Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что свойство не установлено.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="baseline" owner="mx.core:UIComponent" playerVersion="Flash9" type="String">
<description>
  Расстояние по вертикали от верхнего края области содержимого до положения базовой линии элемента управления в пикселях. При установке этого стиля базовая линия компонента прикрепляется к верхнему краю области его содержимого; при изменении размеров контейнера оба края сохраняют разделение.
 
  <p>Этот стиль действует только при использовании для компонента в контейнере Canvas или в контейнерах Panel или Application, свойство <codeph>layout</codeph> которых установлено на <codeph>absolute</codeph>.</p> 
 
  <p>Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что свойство не установлено.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>All user interface components in Flex extend the UIComponent class.
  Flex components inherit the following properties from the UIComponent
  class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
   <b>Properties </b>
    accessibilityDescription="null"
    accessibilityName="null"
    accessibilityShortcut="null"
    accessibilitySilent="true|false"
    automationName="null"
    cachePolicy="auto|on|off"
    currentState="null"
    doubleClickEnabled="false|true"
    enabled="true|false"
    explicitHeight="NaN"
    explicitMaxHeight="NaN"
    explicitMaxWidth="NaN"
    explicitMinHeight="NaN"
    explicitMinWidth="NaN"
    explicitWidth="NaN"
    focusEnabled="true|false"
    hasFocusableChildren="false|true"
    height="0"
    id=""
    includeInLayout="true|false"
    maxHeight="10000"
    maxWidth="10000"
    measuredHeight=
    measuredMinHeight=
    measuredMinWidth=
    measuredWidth=
    minHeight="0"
    minWidth="0"
    mouseFocusEnabled="true|false"
    percentHeight="NaN"
    percentWidth="NaN"
    scaleX="1.0"
    scaleY="1.0"
    states="null"
    styleName="undefined"
    toolTip="null"
    transitions=""
    validationSubField
    width="0"
    x="0"
    y="0"
 
  <b>Styles</b>
    bottom="undefined"
    errorColor="0xFF0000"
    focusBlendMode="normal"
    focusSkin="HaloFocusRect""
    focusThickness="2"
    horizontalCenter="undefined"
    left="undefined"
    right="undefined"
    themeColor="haloGreen"
    top="undefined"
    verticalCenter="undefined"
 
  <b>Effects</b>
    addedEffect="<i>No default</i>"
    creationCompleteEffect="<i>No default</i>"
    focusInEffect="<i>No default</i>"
    focusOutEffect="<i>No default</i>"
    hideEffect="<i>No default</i>"
    mouseDownEffect="<i>No default</i>"
    mouseUpEffect="<i>No default</i>"
    moveEffect="<i>No default</i>"
    removedEffect="<i>No default</i>"
    resizeEffect="<i>No default</i>"
    rollOutEffect="<i>No default</i>"
    rollOverEffect="<i>No default</i>"
    showEffect="<i>No default</i>"
 
  <b>Events</b>
    add="<i>No default</i>"
    creationComplete="<i>No default</i>"
    currentStateChange="<i>No default</i>"
    currentStateChanging="<i>No default</i>"
    dragComplete="<i>No default</i>"
    dragDrop="<i>No default</i>"
    dragEnter="<i>No default</i>"
    dragExit="<i>No default</i>"
    dragOver="<i>No default</i>"
    effectEnd="<i>No default</i>"
    effectStart="<i>No default</i>"
    enterState="<i>No default</i>"
    exitState="<i>No default</i>"
    hide="<i>No default</i>"
    initialize="<i>No default</i>"
    invalid="<i>No default</i>"
    mouseDownOutside="<i>No default</i>"
    mouseWheelOutside="<i>No default</i>"
    move="<i>No default</i>"
    preinitialize="<i>No default</i>"
    record="<i>No default</i>"
    remove="<i>No default</i>"
    resize="<i>No default</i>"
    show="<i>No default</i>"
    toolTipCreate="<i>No default</i>"
    toolTipEnd="<i>No default</i>"
    toolTipHide="<i>No default</i>"
    toolTipShow="<i>No default</i>"
    toolTipShown="<i>No default</i>"
    toolTipStart="<i>No default</i>"
    updateComplete="<i>No default</i>"
    valid="<i>No default</i>"
    valueCommit="<i>No default</i>"
  &gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IConstraintClient</apiBaseInterface><apiBaseInterface>mx.core:IDeferredInstantiationUIComponent</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IID</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.managers:ILayoutManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IPropertyChangeNotifier</apiBaseInterface><apiBaseInterface>mx.core:IRepeaterClient</apiBaseInterface><apiBaseInterface>mx.core:IStateClient</apiBaseInterface><apiBaseInterface>mx.styles:IAdvancedStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseInterface>mx.validators:IValidatorListener</apiBaseInterface><apiBaseInterface>mx.core:IVisualElement</apiBaseInterface><apiBaseClassifier>mx.core:FlexSprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс UIComponent является базовым классом для всех визуальных компонентов, как интерактивных, так и неинтерактивных.
 
  <p>Интерактивный компонент может участвовать в табулировании и других видах управления фокусом ввода, принимать события начального уровня, например, ввод при помощи клавиатуры или мыши, и отключаться, не получая события ввода при помощи мыши или клавиатуры. Неинтерактивные компоненты, например, Label и ProgressBar, в отличие от интерактивных, только отображают содержимое и не управляются пользователем.</p>
  <p>Класс UIComponent не используется как тег MXML, но используется в качестве базового класса для других классов.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_START_toolTipStart"><apiName>toolTipStart</apiName><shortdesc>
  Передается компонентом с установленным свойством toolTip при наведении пользователем курсора мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_START</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается компонентом с установленным свойством <codeph>toolTip</codeph> при наведении пользователем курсора мыши.
 
  <p>Последовательность событий ToolTip: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> и <codeph>toolTipEnd</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_SHOWN_toolTipShown"><apiName>toolTipShown</apiName><shortdesc>
  Передается компонентом при появлении его всплывающей подсказки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_SHOWN</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается компонентом при появлении его всплывающей подсказки.
 
  <p>Если эффект задается с помощью свойства <codeph>ToolTipManager.showEffect</codeph>, это событие передается после окончания действия эффекта.</p>
 
  <p>Последовательность событий ToolTip: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> и <codeph>toolTipEnd</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_SHOW_toolTipShow"><apiName>toolTipShow</apiName><shortdesc>
  Передается компонентом перед появлением его всплывающей подсказки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_SHOW</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается компонентом перед появлением его всплывающей подсказки.
 
  <p>Если эффект задается с помощью свойства <codeph>ToolTipManager.showEffect</codeph>, это событие передается до начала действия эффекта. Это событие используется для изменения всплывающей подсказки до ее появления.</p>
 
  <p>Последовательность событий ToolTip: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> и <codeph>toolTipEnd</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_HIDE_toolTipHide"><apiName>toolTipHide</apiName><shortdesc>
  Передается компонентом перед скрытием его всплывающей подсказки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_HIDE</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается компонентом перед скрытием его всплывающей подсказки.
 
  <p>Если эффект задается с использованием свойства <codeph>ToolTipManager.hideEffect</codeph>, это событие отправляется до начала действия эффекта.</p>
 
  <p>Последовательность событий ToolTip: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> и <codeph>toolTipEnd</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_END_toolTipEnd"><apiName>toolTipEnd</apiName><shortdesc>
  Передается компонентом после скрытия его всплывающей подсказки перед ее удалением.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_END</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается компонентом после скрытия его всплывающей подсказки перед ее удалением.
 
  <p>Если эффект задается с использованием свойства <codeph>ToolTipManager.hideEffect</codeph>, это событие передается после прекращения действия эффекта.</p>
 
  <p>Последовательность событий ToolTip: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> и <codeph>toolTipEnd</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ToolTipEvent.TOOL_TIP_CREATE_toolTipCreate"><apiName>toolTipCreate</apiName><shortdesc>
  Передается компонентом перед созданием всплывающей подсказки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ToolTipEvent.TOOL_TIP_CREATE</apiEventType><adobeApiEventClassifier>mx.events.ToolTipEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается компонентом перед созданием всплывающей подсказки.
 
  <p>При создании собственного объекта IToolTip и помещении ссылки на него в свойство объекта события <codeph>toolTip</codeph>, передаваемое обработчику <codeph>toolTipCreate</codeph>, ToolTipManager отображает пользовательскую всплывающую подсказку. В противном случае ToolTipManager создает для отображения экземпляр <codeph>ToolTipManager.toolTipClass</codeph>.</p>
 
  <p>Последовательность событий ToolTip: <codeph>toolTipStart</codeph>, <codeph>toolTipCreate</codeph>, <codeph>toolTipShow</codeph>, <codeph>toolTipShown</codeph>, <codeph>toolTipHide</codeph> и <codeph>toolTipEnd</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.EXIT_STATE_exitState"><apiName>exitState</apiName><shortdesc>
  Отправляется непосредственно перед выходом компонента из состояния представления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.EXIT_STATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется непосредственно перед выходом компонента из состояния представления.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.ENTER_STATE_enterState"><apiName>enterState</apiName><shortdesc>
  Отправляется после входа компонента в состояние представления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER_STATE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после входа компонента в состояние представления.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.StateChangeEvent.CURRENT_STATE_CHANGE_currentStateChange"><apiName>currentStateChange</apiName><shortdesc>
  Передается после изменения состояния представления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.StateChangeEvent.CURRENT_STATE_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.StateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается после изменения состояния представления.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.StateChangeEvent.CURRENT_STATE_CHANGING_currentStateChanging"><apiName>currentStateChanging</apiName><shortdesc>
  Передается после изменения свойства currentState, но перед изменением состояния представления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.StateChangeEvent.CURRENT_STATE_CHANGING</apiEventType><adobeApiEventClassifier>mx.events.StateChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается после изменения свойства <codeph>currentState</codeph>, но перед изменением состояния представления.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_END_effectEnd"><apiName>effectEnd</apiName><shortdesc>
  Отправляется по завершении эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_END</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется по завершении эффекта.
 
  <p>Эффект выполняет последний набор визуальных изменений до запуска события, но эти изменения не будут отображены на экране. Поэтому, возможно, будет необходимо использовать метод <codeph>callLater()</codeph> для задержки остальных изменений, которые требуется выполнить после отображения изменений на экране.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_STOP_effectStop"><apiName>effectStop</apiName><shortdesc>
  Отправляется после завершения эффекта, которое выполняется только после вызова метода stop().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_STOP</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после завершения эффекта, которое выполняется только после вызова метода <codeph>stop()</codeph>.
 
  <p>По завершении эффект отправит событие EFFECT_END. Цель события EFFECT_STOP состоит в том, чтобы уведомить прослушиватели о том, что эффект был завершен преждевременно, а не естественным образом или в результате вызова <codeph>end()</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.EffectEvent.EFFECT_START_effectStart"><apiName>effectStart</apiName><shortdesc>
  Отправляется непосредственно перед запуском эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.EffectEvent.EFFECT_START</apiEventType><adobeApiEventClassifier>mx.events.EffectEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется непосредственно перед запуском эффекта.
 
  <p>Эффект не начинает изменение визуальных эффектов, пока это событие не запущено.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_START_dragStart"><apiName>dragStart</apiName><shortdesc>
  Отправляется инициатором перетаскивания после начала операции перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_START</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется инициатором перетаскивания после начала операции перетаскивания. Это событие используется внутренним образом элементами управления на основе списка; оно не обрабатывается при реализации перетаскивания. При необходимости управлять запуском операции перетаскивания используйте событие <codeph>mouseDown</codeph> или <codeph>mouseMove</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_COMPLETE_dragComplete"><apiName>dragComplete</apiName><shortdesc>
  Передается инициатором перетаскивания (компонентом, который является источником перетаскиваемых данных) по завершении операции перетаскивания, либо после опускания перетаскиваемых данных на целевой объект, либо по завершении операции перетаскивания без опускания данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается инициатором перетаскивания (компонентом, который является источником перетаскиваемых данных) по завершении операции перетаскивания, либо после опускания перетаскиваемых данных на целевой объект, либо по завершении операции перетаскивания без опускания данных.
 
  <p>Это событие используется для выполнения окончательной очистки функции перетаскивания. Например, при перетаскивании элемента управления List из одного списка в другой можно удалить элемент управления List из источника, если он там больше не требуется.</p>
 
  <p>При выполнении вызова <codeph>Event.preventDefault()</codeph> в обработчике событий для события <codeph>dragComplete</codeph> элемента управления Tree при перетаскивании данных из одного элемента управления Tree в другой отпускание данных не выполняется.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_DROP_dragDrop"><apiName>dragDrop</apiName><shortdesc>
  Передается целевым объектом перетаскивания, когда пользователь отпускает на нем кнопку мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_DROP</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается целевым объектом перетаскивания, когда пользователь отпускает на нем кнопку мыши.
 
  <p>Этот обработчик событий используется для добавления перетаскиваемых данных к целевому объекту перетаскивания.</p>
 
  <p>При выполнении вызова <codeph>Event.preventDefault()</codeph> в обработчике событий для события <codeph>dragDrop</codeph> элемента управления Tree при перетаскивании данных из одного элемента управления Tree в другой опускание данных не выполняется.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_EXIT_dragExit"><apiName>dragExit</apiName><shortdesc>
  Передается компонентом, когда пользователь перетаскивает данные за пределы компонента, но не опускает их на целевой объект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent DRAG_EXIT</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается компонентом, когда пользователь перетаскивает данные за пределы компонента, но не опускает их на целевой объект.
 
  <p>Это событие используется для возвращения целевого объекта перетаскивания к его обычному виду, если он был изменен в результате обработки события <codeph>dragEnter</codeph> или <codeph>dragOver</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_OVER_dragOver"><apiName>dragOver</apiName><shortdesc>
  Передается компонентом при перемещении пользователем курсора мыши при нахождении над компонентом в процессе операции перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_OVER</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается компонентом при перемещении пользователем курсора мыши при нахождении над компонентом в процессе операции перетаскивания. В Flash Player событие отправляется при перетаскивании элемента в допустимый целевой объект. В AIR событие отправляется при перетаскивании элемента в любой компонент, даже если компонент не является допустимым целевым объектом.
 
  <p>В обработчике можно изменять вид целевого объекта перетаскивания для обеспечения визуальной обратной связи с пользователем, позволяющей определить, что компонент может принять перетаскиваемые данные. Например, можно нарисовать рамку вокруг целевого объекта перетаскивания, или переместить на него фокус.</p>
 
  <p>Перед разрешением опускания необходимо настроить это событие на выполнение дополнительных логических операций, например, опускание данных в различные местоположения целевого объекта перетаскивания, чтение ввода с клавиатуры для определения, является ли действие перетаскивания перемещением или копированием данных, или обеспечение различных типов визуальной обратной связи на основе типа действия перетаскивания.</p>
 
  <p>Также можно изменять тип действия перетаскивания путем изменения метода <codeph>DragManager.showFeedback()</codeph>. Значением свойства <codeph>action</codeph> по умолчанию является <codeph>DragManager.MOVE</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.DragEvent.DRAG_ENTER_dragEnter"><apiName>dragEnter</apiName><shortdesc>
  Передается компонентом при перемещении пользователем курсора мыши над компонентом в процессе операции перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DragEvent.DRAG_ENTER</apiEventType><adobeApiEventClassifier>mx.events.DragEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается компонентом при перемещении пользователем курсора мыши над компонентом в процессе операции перетаскивания. В приложении, работающем в Flash Player, событие отправляется многократно при перемещении курсора мыши в любой компонент. В приложении, работающем в AIR, событие отправляется однократно.
 
  <p>Для обеспечения действующего целевого объекта перетаскивания следует определить обработчик для этого события. В обработчике можно изменять вид целевого объекта перетаскивания для обеспечения визуальной обратной связи с пользователем, позволяющей определить, что компонент может принять перетаскиваемые данные. Например, можно нарисовать рамку вокруг целевого объекта перетаскивания, или переместить на него фокус.</p>
 
  <p>Если требуется принять перетаскивание, необходимо вызвать метод <codeph>DragManager.acceptDragDrop()</codeph>. Если вызов <codeph>acceptDragDrop()</codeph> не будет выполнен, то ни одно их перетаскиваемых событий не будет получено.</p>
 
  <p>В Flash Player значение свойства <codeph>action</codeph> всегда <codeph>DragManager.MOVE</codeph>, даже в случае копирования. Причиной является то, что событие <codeph>dragEnter</codeph> происходит, прежде чем элемент управления распознает, что клавиша Ctrl нажата как сигнал к копированию. Свойство <codeph>action</codeph> объекта события <codeph>dragOver</codeph> действительно содержит значение, означающее тип операции перетаскивания. Изменить тип действия перетаскивания можно с помощью вызова метода <codeph>DragManager.showFeedback()</codeph>.</p>
 
  <p>В AIR значением по умолчанию свойства<codeph>action</codeph> является <codeph>DragManager.COPY</codeph>.</p>
 
  <p>Из-за способа структурирования данных в элементе управления Tree, данный элемент управления иначе обрабатывает операцию перетаскивания из других элементов управления на основе списка. В случае элемента управления Tree обработчик событий для события <codeph>dragDrop</codeph> выполняет операцию только при перемещении или копировании данных в том же элементе управления Tree или при копировании данных в другой элемент управления Tree. При перетаскивании данных из одного элемента управления Tree в другой элемент управления Tree для перемещения данных обработчик событий для события <codeph>dragComplete</codeph> (не обработчик событий для события dragDrop) фактически выполняет добавление данных к целевому элементу управления Tree, а также удаляет данные из исходного элемента управления Tree. Это необходимо, так как для переподчинения перемещаемых данных Flex требуется сначала удалить их из исходного элемента управления Tree.</p>
 
  </apiDesc></adobeApiEventDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.VALID_valid"><apiName>valid</apiName><shortdesc>
  Отправляется, когда компонент контролируется средством проверки, и проверка успешно выполнена.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALID</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, когда компонент контролируется средством проверки, и проверка успешно выполнена.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.INVALID_invalid"><apiName>invalid</apiName><shortdesc>
  Отправляется, когда компонент контролируется средством проверки, и при проверке произошел сбой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.INVALID</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, когда компонент контролируется средством проверки, и при проверке произошел сбой.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Отправляется при изменении значений программным способом или в результате действий пользователя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при изменении значений программным способом или в результате действий пользователя.
 
  <p>Поскольку программное изменение инициирует это событие, убедитесь, что ни один обработчик события <codeph>valueCommit</codeph> не изменяет значение, вызывающее другое событие <codeph>valueCommit</codeph>. Например, не изменяйте свойство элемента управления <codeph>dataProvider</codeph> в обработчике событий <codeph>valueCommit</codeph>. </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE_mouseWheelOutside"><apiName>mouseWheelOutside</apiName><shortdesc>
  Передается из компонента, открытого с помощью PopUpManager, при прокручивании пользователем колеса мыши вне его пределов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_WHEEL_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается из компонента, открытого с помощью PopUpManager, при прокручивании пользователем колеса мыши вне его пределов.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexMouseEvent.MOUSE_DOWN_OUTSIDE_mouseDownOutside"><apiName>mouseDownOutside</apiName><shortdesc>
  Передается из компонента, открытого с использованием PopUpManager, когда пользователь щелкает кнопкой мыши вне его пределов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexMouseEvent.MOUSE_DOWN_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexMouseEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается из компонента, открытого с использованием PopUpManager, когда пользователь щелкает кнопкой мыши вне его пределов.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.SHOW_show"><apiName>show</apiName><shortdesc>
  Передается при изменении состояния объекта с «Невидимый» на «Видимый».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении состояния объекта с «Невидимый» на «Видимый».
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.ResizeEvent.RESIZE_resize"><apiName>resize</apiName><shortdesc>
  Отправляется при изменении размеров компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ResizeEvent.RESIZE</apiEventType><adobeApiEventClassifier>mx.events.ResizeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при изменении размеров компонента.
 
  <p>Размеры компонента можно изменить путем установки свойств <codeph>width</codeph> или <codeph>height</codeph>, вызовом метода <codeph>setActualSize()</codeph> или установки одного из следующих свойств либо для этого компонента, либо для других компонентов таким образом, что LayoutManager потребуется изменить свойства <codeph>width</codeph> или <codeph>height</codeph> этого компонента:</p>
 
  <ul>
    <li><codeph>minWidth</codeph></li>
    <li><codeph>minHeight</codeph></li>
    <li><codeph>maxWidth</codeph></li>
    <li><codeph>maxHeight</codeph></li>
    <li><codeph>explicitWidth</codeph></li>
    <li><codeph>explicitHeight</codeph></li>
  </ul>
 
  <p>Событие <codeph>resize</codeph> не передается до окончания изменения свойства.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.REMOVE_remove"><apiName>remove</apiName><shortdesc>
  Передается при удалении компонента из контейнера как нижестоящего элемента содержимого с помощью метода removeChild(), removeChildAt(), removeElement() или removeElementAt().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REMOVE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при удалении компонента из контейнера как нижестоящего элемента содержимого с помощью метода <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph>, <codeph>removeElement()</codeph> или <codeph>removeElementAt()</codeph>. Если компонент удален из контейнера как неудовлетворительный нижестоящий элемент с помощью метода <codeph>rawChildren.removeChild()</codeph> или <codeph>rawChildren.removeChildAt()</codeph>, событие не передается.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.PREINITIALIZE_preinitialize"><apiName>preinitialize</apiName><shortdesc>
  Передается в начале последовательности инициализации компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.PREINITIALIZE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается в начале последовательности инициализации компонента. При передаче этого события компонент находится в незавершенном состоянии. Многие компоненты, например, элемент управления Button, создают внутренние нижестоящие компоненты для реализации функциональных возможностей; например, элемент управления Button создает внутренний компонент UITextField для представления своего текста метки. Когда Flex передает событие <codeph>preinitialize</codeph>, нижестоящие элементы, включая внутренние нижестоящие элементы компонента, еще не созданы.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.MoveEvent.MOVE_move"><apiName>move</apiName><shortdesc>
  Передается при перемещении объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MoveEvent.MOVE</apiEventType><adobeApiEventClassifier>mx.events.MoveEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при перемещении объекта.
 
  <p>Переместить компонент можно путем установки свойств <codeph>x</codeph> или <codeph>y</codeph>, вызова метода <codeph>move()</codeph> или установки одного из следующих свойств либо для этого компонента, либо для других компонентов таким образом, что LayoutManager должен будет изменить свойства <codeph>x</codeph> или <codeph>y</codeph> этого компонента:</p>
 
  <ul>
    <li><codeph>minWidth</codeph></li>
    <li><codeph>minHeight</codeph></li>
    <li><codeph>maxWidth</codeph></li>
    <li><codeph>maxHeight</codeph></li>
    <li><codeph>explicitWidth</codeph></li>
    <li><codeph>explicitHeight</codeph></li>
  </ul>
 
  <p>При вызове метода <codeph>move()</codeph> событие <codeph>move</codeph> передается перед возвратом этого метода. Во всех других ситуациях событие <codeph>move</codeph> не передается до окончания изменений свойства.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.INITIALIZE_initialize"><apiName>initialize</apiName><shortdesc>
  Передается по окончании создания компонента и установки всех свойств инициализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.INITIALIZE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается по окончании создания компонента и установки всех свойств инициализации.
 
  <p>По завершении фазы инициализации выполняется обработка свойств, измерение, размещение и отображение компонента, после чего отправляется событие <codeph>creationComplete</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.HIDE_hide"><apiName>hide</apiName><shortdesc>
  Возникает при изменении состояния объекта с «Видимый» на «Невидимый».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.HIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Возникает при изменении состояния объекта с «Видимый» на «Невидимый».
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.UPDATE_COMPLETE_updateComplete"><apiName>updateComplete</apiName><shortdesc>
  Отправляется при вызове объектом методов commitProperties(), measure() и updateDisplayList() (при необходимости).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.UPDATE_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при вызове объектом методов <codeph>commitProperties()</codeph>, <codeph>measure()</codeph> и <codeph>updateDisplayList()</codeph> (при необходимости).
 
  <p>Это последняя возможность изменить компонент до его отображения. Передача всех свойств выполнена, а для компонента выполнены измерение и размещение.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.CREATION_COMPLETE_creationComplete"><apiName>creationComplete</apiName><shortdesc>
  Отправляется по завершении создания компонента, и обработки, измерения, размещения и отображения свойств.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется по завершении создания компонента, и обработки, измерения, размещения и отображения свойств.
 
  <p>На этом этапе, в зависимости от свойства компонента <codeph>visible</codeph>, он может быть невидимым даже в случае его вывода на экран.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:UIComponent_mx.events.FlexEvent.ADD_add"><apiName>add</apiName><shortdesc>
  Передается при добавлении компонента к контейнеру как нижестоящего элемента содержимого с помощью метода addChild(), addChildAt(), addElement() или addElementAt().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ADD</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при добавлении компонента к контейнеру как нижестоящего элемента содержимого с помощью метода <codeph>addChild()</codeph>, <codeph>addChildAt()</codeph>, <codeph>addElement()</codeph> или <codeph>addElementAt()</codeph>. Если компонент добавляется к контейнеру как нижестоящий элемент, не включаемый в область содержимого, с помощью метода <codeph>rawChildren.addChild()</codeph> или <codeph>rawChildren.addChildAt()</codeph>, событие не передается.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:UIComponent:UIComponent"><apiName>UIComponent</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:UIComponent:protected:adjustFocusRect"><apiName>adjustFocusRect</apiName><shortdesc>
      Отрегулируйте прямоугольник фокусировки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/><apiData>null</apiData><apiDesc>компонент, прямоугольник фокусировки которого необходимо изменить. При опущении значения значением по умолчанию является этот объект UIComponent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Отрегулируйте прямоугольник фокусировки.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:applyComputedMatrix"><apiName>applyComputedMatrix</apiName><shortdesc>
      Передает вычисленную матрицу, созданную из комбинации матрицы макета и смещений преобразования flash displayObject.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Передает вычисленную матрицу, созданную из комбинации матрицы макета и смещений преобразования flash displayObject.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
      Это внутренний метод, используемый инфраструктурой Flex для поддержки эффекта Dissolve.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Это внутренний метод, используемый инфраструктурой Flex для поддержки эффекта Dissolve. Его не требуется вызывать или переопределять.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:callLater"><apiName>callLater</apiName><shortdesc>
      Ставит в очередь функцию для последующего вызова.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>method</apiItemName><apiType value="Function"/><apiDesc>Ссылка на метод, который будет выполнен позже.
     
      </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>Массив объектов, представляющих аргументы для перехода в метод.
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Ставит в очередь функцию для последующего вызова.
     
      <p>Перед обновлением экрана, Flash Player или AIR вызывает набор функций, запланированных для обновления. Иногда функцию необходимо вызывать при следующем обновлении для выполнения остальной части кода, запланированной для текущего обновления. Некоторые функции, такие как эффекты, могут вызвать задержку поставленных в очередь функций до завершения выполнения функции.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:canSkipMeasurement"><apiName>canSkipMeasurement</apiName><shortdesc>
      Определяет, может ли быть пропущен вызов метода measure().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Возвращает <codeph>true</codeph>, если метод <codeph>measureSizes()</codeph> может выполняться без вызова метода <codeph>measure()</codeph>. Например, обычно используется <codeph>true</codeph>, когда заданы одновременно <codeph>explicitWidth</codeph> и <codeph>explicitHeight</codeph>. Для путей используется <codeph>true</codeph>, когда границы пути остались неизменными.
      
      </apiDesc><apiType value="Boolean"/></apiReturn></apiOperationDef><apiDesc>
      Определяет, может ли быть пропущен вызов метода <codeph>measure()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:childrenCreated"><apiName>childrenCreated</apiName><shortdesc>
      Выполняет окончательную обработку после создания нижестоящих объектов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Выполняет окончательную обработку после создания нижестоящих объектов. Это усовершенствованный метод, который можно переопределить при создании подкласса UIComponent.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:clearStyle"><apiName>clearStyle</apiName><shortdesc>
      Удаляет свойство style для экземпляра компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя свойства стиля.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет свойство style для экземпляра компонента.
     
      <p>Это не обязательно приводит к тому, что метод <codeph>getStyle()</codeph> возвращает значение <codeph>undefined</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      Обрабатывает свойства, установленные в компоненте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Обрабатывает свойства, установленные в компоненте. Это усовершенствованный метод, который можно отменить при создании подкласса UIComponent.
     
      <p>Вызов этого метода напрямую не выполняется. Метод <codeph>commitProperties()</codeph> вызывается программой Flex при использовании метода <codeph>addChild()</codeph> для добавления компонента к контейнеру или при вызове метода <codeph>invalidateProperties()</codeph> для компонента. Вызовы метода <codeph>commitProperties()</codeph> осуществляются перед вызовами метода <codeph>measure()</codeph>. Это позволяет устанавливать значения свойств, которые могли бы использоваться методом <codeph>measure()</codeph>.</p>
     
      <p>Некоторые компоненты имеют свойства, оказывающие влияние на количество или виды нижестоящих объектов, которые они должны создать, либо обладают свойствами, взаимодействующими друг с другом, такими как свойства <codeph>horizontalScrollPolicy</codeph> и <codeph>horizontalScrollPosition</codeph>. Зачастую в момент запуска целесообразно обработать все эти свойства сразу и избежать дублирования работы.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc>
      Преобразует объект Point из координат содержимого в глобальные координаты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект Point с координатами относительно рабочей области.
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Объект Point, указывающий координаты <i>x</i> и <i>y</i> в системе координат содержимого в качестве свойств.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Преобразует объект <codeph>Point</codeph> из координат содержимого в глобальные координаты. Координаты содержимого указывают позицию пикселя относительно верхнего левого угла содержимого компонента и включают всю область содержимого компонента, включая области, которые в настоящее время отсечены, и доступ к которым возможен при прокрутке компонента. Система координат содержимого используется для установки и получения позиций нижестоящих элементов контейнера с абсолютным позиционированием. Глобальные координаты указывают позицию пикселя относительно верхнего левого угла рабочей области, самой крайней позиции приложения.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/globalToContent()"><linktext/></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:contentToLocal"><apiName>contentToLocal</apiName><shortdesc>
      Преобразует объект Point из координат содержимого в локальные координаты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Point: объект Point с координатами относительно локальной системы координат.
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Объект Point, указывающий координаты <i>x</i> и <i>y</i> в системе координат содержимого в качестве свойств.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Преобразует объект <codeph>Point</codeph> из координат содержимого в локальные координаты. Координаты содержимого указывают позицию пикселя относительно верхнего левого угла содержимого компонента и включают всю область содержимого компонента, включая области, которые в настоящее время отсечены, и доступ к которым возможен при прокрутке компонента. Система координат содержимого используется для установки и получения позиций нижестоящих элементов контейнера с абсолютным позиционированием. Локальные координаты указывают позицию пикселя относительно верхнего левого угла компонента.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToGlobal()"><linktext>contentToGlobal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:createAutomationIDPart"><apiName>createAutomationIDPart</apiName><shortdesc>
      
      Возвращает набор свойств, которые идентифицируют нижестоящий элемент в рамках этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Наборы свойств, описывающих нижестоящий элемент, которые можно использовать в дальнейшем для определения компонента.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier><apiDesc>Нижестоящий элемент, для которого следует предоставить идентификатор.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает набор свойств, которые идентифицируют нижестоящий элемент в рамках этого контейнера. Эти значения не должны изменяться во время срока действия приложения.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:createAutomationIDPartWithRequiredProperties"><apiName>createAutomationIDPartWithRequiredProperties</apiName><shortdesc>
      
      Возвращает набор свойств в виде идентификатора автоматизации, который идентифицируют нижестоящий элемент в рамках этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Наборы свойств, описывающих нижестоящий элемент, которые можно использовать в дальнейшем для определения компонента.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier><apiDesc>Нижестоящий элемент, для которого следует предоставить идентификатор.
     
      </apiDesc></apiParam><apiParam><apiItemName>properties</apiItemName><apiType value="Array"/><apiDesc>который необходимо учитывать при формировании идентификатора.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает набор свойств в виде идентификатора автоматизации, который идентифицируют нижестоящий элемент в рамках этого контейнера. Эти значения не должны изменяться во время срока действия приложения
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      Создайте нижестоящие объекты для компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Создайте нижестоящие объекты для компонента. Это усовершенствованный метод, который можно отменить при создании подкласса UIComponent.
     
      <p>Компонент, обеспечивающий создание других компонентов или объектов внутри них, называется составным компонентом. Например, элемент управления ComboBox Flex фактически создается из элемента управления TextInput для определения текстовой области элемента ComboBox и элемента управления Button для определения стрелки элемента ComboBox. Компоненты обеспечивают реализацию метода <codeph>createChildren()</codeph> для создания нижестоящих объектов (например, других компонентов) внутри компонента.</p>
     
      <p>При перезаписи метода <codeph>createChildren()</codeph>, метод <codeph>addChild()</codeph> вызывается для добавления каждого нижестоящего объекта. </p>
     
      <p>Вызов этого метода напрямую не выполняется. Метод <codeph>createChildren()</codeph> вызывается программой Flex в ответ на вызов метода <codeph>addChild()</codeph> для добавления компонентов к вышестоящему элементу. </p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createInFontContext"><apiName>createInFontContext</apiName><shortdesc>
      Создает новый объект, использующий контекст, основанный на использованном встроенном шрифте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Экземпляр класса, созданный в контексте SWF, использующего встроенный шрифт. Если этот объект не использует встроенный шрифт, класс создается в контексте этого объекта.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>classObj</apiItemName><apiType value="Class"/><apiDesc>Создаваемый класс.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Создает новый объект, использующий контекст, основанный на использованном встроенном шрифте.
     
      <p>Этот метод применяется для использования встроенных шрифтов в приложении SWF, если инфраструктура загружена в виде RSL (RSL имеет собственный контекст SWF). Доступ к встроенным шрифтам осуществляется только из контекста SWF-файла, в котором они были созданы. Использование контекста SWF-приложения позволяет RSL создавать объекты в контексте SWF-приложения, которые будут иметь доступ к встроенным шрифтам приложения.</p>
     
      <p>Этот метод вызывается только после установки стилей шрифтов для этого объекта.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:createInModuleContext"><apiName>createInModuleContext</apiName><shortdesc>
      Создает объект с помощью указанной moduleFactory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Объект создан в контексте moduleFactory.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiDesc>ModuleFactory, в которой следует создать класс; может иметь значение null.
     
      </apiDesc></apiParam><apiParam><apiItemName>className</apiItemName><apiType value="String"/><apiDesc>Имя создаваемого нижестоящего элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Создает объект с помощью указанной moduleFactory. Если moduleFactory имеет значение null или если объект не может быть создан с помощью фабрики модулей, следует вернуться к созданию объекта с помощью systemManager.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:createReferenceOnParentDocument"><apiName>createReferenceOnParentDocument</apiName><shortdesc>
      
      Создает ссылку на id этого объекта IUIComponent в вышестоящем объекте документа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Вышестоящий элемент данного объекта IUIComponent. 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Создает ссылку на <codeph>id</codeph> этого объекта IUIComponent в вышестоящем объекте документа. Эта функция может создавать многомерную ссылку, например, b [2] [4], на объекты в одном или нескольких повторителях. Если индексы имеют значение null, создается простая ссылка на не массив.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:deleteReferenceOnParentDocument"><apiName>deleteReferenceOnParentDocument</apiName><shortdesc>
      
      Удаляет ссылку на id этого объекта IUIComponent в вышестоящем объекте документа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Вышестоящий элемент данного объекта IUIComponent. 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Удаляет ссылку на <codeph>id</codeph> этого объекта IUIComponent в вышестоящем объекте документа. Эта функция может удалить из многомерных ссылок, например, b [2] [4], объекты в одном или нескольких повторителях. Если индексы имеют значение null, удаляется простая ссылка на не массив.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:determineTextFormatFromStyles"><apiName>determineTextFormatFromStyles</apiName><shortdesc>
      Возвращается к объекту UITextFormat, соответствующему текстовым стилям для этого UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект UITextFormat, соответствующий текстовым стилям для этого UIComponent.
      
      </apiDesc><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Возвращается к объекту UITextFormat, соответствующему текстовым стилям для этого UIComponent.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
      Посылает событие в поток событий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Значение <codeph>true</codeph> в случае успешной передачи события. Значение <codeph>false</codeph> указывает на ошибку, или на то, что для события был вызван метод<codeph>preventDefault()</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект Event, передаваемый в поток событий. Если осуществляется повторная отправка события, автоматически создается его клон. После отправки события нельзя изменить его свойство <codeph>target</codeph>, поэтому необходимо создать новую копию события, чтобы обеспечить правильное выполнение повторной отправки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Посылает событие в поток событий. Целью события является объект EventDispatcher, для которого вызывается метод <codeph>dispatchEvent()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:dispatchPropertyChangeEvent"><apiName>dispatchPropertyChangeEvent</apiName><shortdesc> 
      Вспомогательные методы для отправки PropertyChangeEvent при обновлении свойства.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>prop</apiItemName><apiType value="String"/><apiDesc>Имя изменяемого свойства.
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value=""/><apiDesc>Старое значение свойства.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>Новое значение свойства.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      Вспомогательные методы для отправки PropertyChangeEvent при обновлении свойства.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:drawFocus"><apiName>drawFocus</apiName><shortdesc>
      Отображает или скрывает индикатор фокуса вокруг этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>isFocused</apiItemName><apiType value="Boolean"/><apiDesc>Определяет, требуется ли отобразить индикатор фокуса. Значение <codeph>true</codeph> устанавливается для отображения индикатора. Значение <codeph>false</codeph> устанавливается для его скрытия.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Отображает или скрывает индикатор фокуса вокруг этого компонента.
     
      <p>UIComponent реализует эту функцию, создавая экземпляр класса, определяемый стилем <codeph>focusSkin</codeph>, и размещая его соответствующим образом.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:drawRoundRect"><apiName>drawRoundRect</apiName><shortdesc>
      Обеспечивает отображение прямоугольника в объекте Graphics указанной темы оформления программным способом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Горизонтальная координата верхнего левого угла прямоугольника в указанной теме оформления.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Вертикальная координата верхнего левого угла прямоугольника в указанной теме оформления.
     
      </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Ширина прямоугольника в пикселях.
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Высота прямоугольника в пикселях.
     
      </apiDesc></apiParam><apiParam><apiItemName>r</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Радиус/радиусы скругления углов прямоугольника. Может принимать значение <codeph>null</codeph>, являться числом или объектом. Значение <codeph>null</codeph> указывает на то, что углы должны быть прямыми, а не скругленными. Числовое значение указывает на одинаковый радиус в пикселях для всех четырех углов. Если используется объект, он должен обладать свойствами с именами <codeph>tl</codeph>, <codeph>tr</codeph>, <codeph>bl</codeph> и <codeph>br</codeph>, значениями которых являются числа, характеризующие радиус в пикселях для левого верхнего, правого верхнего, левого нижнего и правого нижнего углов. Например, можно передать простой объект в виде <codeph>{ tl: 5, tr: 5, bl: 0, br: 0 }</codeph>. По умолчанию используется значение null (квадратные углы).
     
      </apiDesc></apiParam><apiParam><apiItemName>c</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Цвет заливки в модели RGB. Может принимать значение <codeph>null</codeph>, являться параметром uint или массивом. Если значение равно <codeph>null</codeph>, заливка прямоугольника не осуществляется. Параметр uint определяет цвет заливки в модели RGB. Например, для заливки красным цветом передается значение <codeph>0xFF0000</codeph>. Если значением является массив, он должен содержать элементы uint, определяющие цвета градиента. Например, для заполнения с использованием градиента «красный-желтый-синий» передается значение <codeph>[0xFF0000, 0xFFFF00, 0x0000FF]</codeph>. В градиенте можно указать до 15 цветов. По умолчанию применяется значение null (нет заливки).
     
      </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Значение альфа-канала для заливки. Может принимать значение null, являться числом или массивом. Если значением свойства <codeph>color</codeph> является null, этот аргумент игнорируется. Если в качестве значения свойства <codeph>color</codeph> задан элемент uint, указывающий цвет заливки в модели RGB, то значением свойства <codeph>alpha</codeph> должно являться целое число, определяющее прозрачность заливки, для которого 0,0 соответствует полной прозрачности, а 1,0 – полной непрозрачности. Для указания полной непрозрачности вместо значения 1,0 также можно передать значение null. Если значением свойства <codeph>color</codeph> является массив, задающий цвета градиента, то свойство <codeph>alpha</codeph> должно содержать массив числовых значений с той же длиной, указывающий соответствующие значения альфа-фактора для градиента. В этом случае, значением по умолчанию является <codeph>null</codeph> (полностью непрозрачно).
     
      </apiDesc></apiParam><apiParam><apiItemName>rot</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Объект матрицы, используемый для градиентной заливки. Для создания значения этого параметра применяются служебные методы <codeph>horizontalGradientMatrix()</codeph>, <codeph>verticalGradientMatrix()</codeph> и <codeph>rotatedGradientMatrix()</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>gradient</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Тип градиентной заливки. Возможные значения: <codeph>GradientType.LINEAR</codeph> или <codeph>GradientType.RADIAL</codeph>. (Класс GradientType находится в пакете flash.display.)
     
      </apiDesc></apiParam><apiParam><apiItemName>ratios</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>
      Указывает распределение цветов. Количество значений должно соответствовать числу цветов, определенных в параметре <codeph>color</codeph>. Каждое значение определяет процентное значение ширины, на которой цвет представлен на 100 %. Значение 0 обозначает левую позицию окна градиента, а 255 - правую. 
     
      </apiDesc></apiParam><apiParam><apiItemName>hole</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Прямоугольное отверстие со скругленными углами, которое должно быть выделено в середине прямоугольника со скругленными углами и сплошной заливкой { x: #, y: #, w: #, h: #, r: # или { br: #, bl: #, tl: #, tr: # } }
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает отображение прямоугольника в объекте Graphics указанной темы оформления программным способом.
     
      <p>Прямоугольник может иметь скругленные углы. Его края отображаются штрихами с использованием текущего стиля линии объекта Graphics. Он может быть залит одним цветом, градиентом или не иметь заливки. Для сплошной заливки может существовать значение прозрачности альфа-канала. Градиентная заливка может быть линейной или радиальной. В определенных точках градиента можно указать до 15 значений цветов и значений альфа-фактора. Кроме того, существует возможность задать угол поворота и матрицу преобразования градиента. Наконец, прямоугольник может включать прямоугольное отверстие со скругленными углами, выделенное в его середине.</p>
     
      <p>Эта универсальная подпрограмма отображения прямоугольника применяется многими темами оформления. Она обеспечивает вызов методов <codeph>drawRect()</codeph> или <codeph>drawRoundRect()</codeph> (в классе flash.display.Graphics) для рисования данного объекта Graphics темы оформления.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#Graphics/beginGradientFill()"><linktext>flash.display.Graphics.beginGradientFill()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:effectFinished"><apiName>effectFinished</apiName><shortdesc>
      Вызывается экземпляром эффекта по завершении воспроизведения эффекта в компоненте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInst</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Воспроизведение объекта экземпляра эффекта в компоненте.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается экземпляром эффекта по завершении воспроизведения эффекта в компоненте. Можно использовать этот метод для восстановления изменения компонента, выполненного методом <codeph>effectStarted()</codeph> при запуске эффекта, или выполнить другое действие по окончании эффекта.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:effectStarted"><apiName>effectStarted</apiName><shortdesc>
      Вызывается экземпляром эффекта при запуске воспроизведения эффекта в компоненте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effectInst</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiDesc>Воспроизведение объекта экземпляра эффекта в компоненте.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается экземпляром эффекта при запуске воспроизведения эффекта в компоненте. Можно использовать этот метод для выполнения изменения компонента как части эффекта. Можно использовать метод <codeph>effectFinished()</codeph> для восстановления изменения по окончании эффекта.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:endEffectsStarted"><apiName>endEffectsStarted</apiName><shortdesc>
      Завершает все воспроизводимые в настоящее время эффекты на компоненте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Завершает все воспроизводимые в настоящее время эффекты на компоненте.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:executeBindings"><apiName>executeBindings</apiName><shortdesc>
      Выполняет все привязки, для которых объект UIComponent является адресом назначения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Выполняются рекурсивные привязки для нижестоящих элементов этого компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполняет все привязки, для которых объект UIComponent является адресом назначения.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:finishPrint"><apiName>finishPrint</apiName><shortdesc>
      Вызывается после завершения печати.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="Object"/><apiDesc>Содержит свойства компонента, которые восстановление его до состояния перед печатью.
     
      </apiDesc></apiParam><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Компонент, только что завершивший печать. Это может быть текущий компонент или один из его нижестоящих компонентов.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается после завершения печати. Для класса UIComponent метод не выполняет каких-либо действий. Контейнеры Flex переопределяют метод для восстановления контейнера после печати.
     
      <p>Как правило, этот класс не используется разработчиками приложений. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.printing.xml#FlexPrintJob"><linktext>mx.printing.FlexPrintJob</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:protected:focusInHandler"><apiName>focusInHandler</apiName><shortdesc>
      Обработчик события вызывается, если объект UIComponent получает фокус.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Объект события.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обработчик события вызывается, если объект UIComponent получает фокус. Если выполняется переопределение этого метода, убедитесь, что вызывается версия базового класса.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:focusOutHandler"><apiName>focusOutHandler</apiName><shortdesc>
      Обработчик события вызывается, если объект UIComponent теряет фокус.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:FocusEvent"/><apiDesc>Объект события.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обработчик события вызывается, если объект UIComponent теряет фокус. Если выполняется переопределение этого метода, убедитесь, что вызывается версия базового класса.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getAutomationChildAt"><apiName>getAutomationChildAt</apiName><shortdesc>
       
      Предоставляет объект автоматизации с указанным индексом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Нижестоящий элемент с указанным индексом.
      
      </apiDesc><apiOperationClassifier>mx.automation:IAutomationObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс возвращаемого нижестоящего элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
       
      Предоставляет объект автоматизации с указанным индексом. В этом списке не должно быть составных нижестоящих элементов.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getAutomationChildren"><apiName>getAutomationChildren</apiName><shortdesc>
      
      Обеспечивает список объектов автоматизации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>нижестоящие элементы автоматизации.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      
      Обеспечивает список объектов автоматизации. В этом списке отсутствуют составные нижестоящие элементы.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      
      Возвращает координату Х границ элемента для указанного размера элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Ширина границ элемента или NaN, если требуется использовать предпочтительную ширину.
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Высота границ элемента или NaN, если требуется использовать предпочтительную высоту.
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает координату Х верхнего левого угла ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе указанных размеров границ, позиции макета и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает координату Х границ элемента для указанного размера элемента. Этот метод, как правило, используется макетами при выполнении метода measure() для предварительного определения позиции элемента в случае изменения размеров элемента в соответствии с определенной размерностью.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      
      Возвращает координату Y границ элемента при указанном размере элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Ширина границ элемента или NaN, если требуется использовать предпочтительную ширину.
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Высота границ элемента или NaN, если требуется использовать предпочтительную высоту.
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает координату Y верхнего левого угла ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе указанных размеров границ, позиции макета и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает координату Y границ элемента при указанном размере элемента. Этот метод, как правило, используется макетами при выполнении метода measure() для предварительного определения позиции элемента в случае изменения размеров элемента в соответствии с определенной размерностью.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getClassStyleDeclarations"><apiName>getClassStyleDeclarations</apiName><shortdesc>
      Выполняет поиск селекторов типа для этого экземпляра UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив селекторов типа для этого экземпляра UIComponent.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Выполняет поиск селекторов типа для этого экземпляра UIComponent. Алгоритм перемещается по цепочке суперклассов. Например, предположим, что класс MyButton применяется для расширения компонента Button. Сначала экземпляр MyButton выполняет поиск селектора типа MyButton, а затем селектора типа Button. затем выполняет поиск селектора типа UIComponent. (Предполагается, что цепочка суперклассов останавливается на UIComponent, а не на объекте.)
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getConstraintValue"><apiName>getConstraintValue</apiName><shortdesc>
      Возвращает значение ограничения макета, идентичное значению получения стиля ограничения для этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает значение ограничения макета, которое может быть указано в одной из двух форм. Оно может быть указано в виде числовой строки, например, «10», или в виде строки identifier:numeric. Для identifier:numeric string идентификатор является <codeph>id</codeph> ConstraintRow или ConstraintColumn. Например, значение «cc1:10» указывает значение 10 для ConstraintColumn, <codeph>id</codeph> которого является «cc1».
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>Имя стиля ограничения, которое может быть одним из следующих: left, right, top, bottom, verticalCenter, horizontalCenter, baseline
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает значение ограничения макета, идентичное значению получения стиля ограничения для этого компонента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc>
      Удобный метод определения, использовать ли явную или измеренную высоту
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Число, являющееся значением свойства explicitHeight, если это свойство задано, или свойства measuredHeight в противном случае.
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Удобный метод определения, использовать ли явную или измеренную высоту
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc>
      Удобный метод определения, использовать ли явную или измеренную ширину
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Число, являющееся значением свойства explicitWidth, если это свойство определено, или свойства measuredWidth в противном случае.
      
      </apiDesc><apiType value="Number"/></apiReturn></apiOperationDef><apiDesc>
      Удобный метод определения, использовать ли явную или измеренную ширину
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getFocus"><apiName>getFocus</apiName><shortdesc>
      Получает объект, который в настоящее время имеет фокус.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект, который имеет фокус.
      
      </apiDesc><apiType value="flash.display:InteractiveObject"/></apiReturn></apiOperationDef><apiDesc>
      Получает объект, который в настоящее время имеет фокус. Это может быть не данный объект. Учтите, что этот метод не обязательно возвращает компонент, находящийся в фокусе. Он может вернуть внутренний субкомпонент компонента в фокусе. Чтобы определить компонент, находящийся в фокусе, воспользуйтесь свойством <codeph>focusManager.focus</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsHeight"><apiName>getLayoutBoundsHeight</apiName><shortdesc>
      
      Возвращает высоту макета элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает ширину ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает высоту макета элемента. Размер, используемый элементом для отображения на экране.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsWidth"><apiName>getLayoutBoundsWidth</apiName><shortdesc>
      
      Возвращает ширину макета элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает ширину ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает ширину макета элемента. Размер, используемый элементом для отображения на экране.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsX"><apiName>getLayoutBoundsX</apiName><shortdesc>
      
      Возвращает координату Х, используемую элементом для отображения на экране.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает координату Х верхнего левого угла ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента, позиции макета и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает координату Х, используемую элементом для отображения на экране.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutBoundsY"><apiName>getLayoutBoundsY</apiName><shortdesc>
      
      Возвращает координату Y, используемую элементом для отображения на экране.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает координату Y верхнего левого угла ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента, позиции макета и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает координату Y, используемую элементом для отображения на экране.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutMatrix"><apiName>getLayoutMatrix</apiName><shortdesc>
      
      Возвращает матрицу преобразования, используемую для определения макета компонента относительно соответствующих элементов одного уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><p>Возвращает матрицу преобразования макета для этого элемента. Непосредственно изменять возвращаемое значение не следует, вместо этого необходимо вызвать метод setLayoutMatrix.</p>
     
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef><apiDesc>
      
      Возвращает матрицу преобразования, используемую для определения макета компонента относительно соответствующих элементов одного уровня.
     
      <p>Эта матрица, как правило, определяется двумерными свойствами компонента, такими как <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> и <codeph>transformY</codeph>. Некоторые компоненты могут иметь дополнительные свойства преобразования, которые применяются в дополнение к матрице макета для определения ее окончательного вида при вычислении. Например, <codeph>UIComponent</codeph> определяет свойство <codeph>offsets</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getLayoutMatrix3D"><apiName>getLayoutMatrix3D</apiName><shortdesc>
      
      Возвращает преобразование макета Matrix3D для этого элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><p>Возвращает преобразование макета Matrix3D для этого элемента. Непосредственно изменять возвращаемое значение не следует, вместо этого необходимо вызвать метод setLayoutMatrix.</p>
      
      </apiDesc><apiType value="flash.geom:Matrix3D"/></apiReturn></apiOperationDef><apiDesc>
      
      Возвращает преобразование макета Matrix3D для этого элемента.
     
      <p>Эта матрица, как правило, определяется свойствами преобразования компонента, такими как <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> и <codeph>transformY</codeph>. Некоторые компоненты могут иметь дополнительные свойства преобразования, которые применяются в дополнение к матрице макета для определения ее окончательного вида при вычислении. Например, <codeph>UIComponent</codeph> определяет свойство <codeph>offsets</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMaxBoundsHeight"><apiName>getMaxBoundsHeight</apiName><shortdesc>
      
      Возвращает максимальную высоту элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает высоту ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе максимального размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает максимальную высоту элемента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMaxBoundsWidth"><apiName>getMaxBoundsWidth</apiName><shortdesc>
      
      Возвращает максимальную ширину элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает ширину ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе максимального размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает максимальную ширину элемента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMinBoundsHeight"><apiName>getMinBoundsHeight</apiName><shortdesc>
      
      Возвращает минимальную высоту элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает высоту ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе минимального размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает минимальную высоту элемента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getMinBoundsWidth"><apiName>getMinBoundsWidth</apiName><shortdesc>
      
      Возвращает минимальную ширину элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает ширину ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе минимального размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает минимальную ширину элемента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getPreferredBoundsHeight"><apiName>getPreferredBoundsHeight</apiName><shortdesc>
      
      Возвращает предпочтительную высоту элемента. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает предпочтительную высоту элемента. Как правило, предпочтительная высота основывается на размере элемента по умолчанию и любом явном переопределении. Для UIComponent она совпадает с getExplicitOrMeasuredHeight().
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает высоту ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе предпочтительного размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает предпочтительную высоту элемента.   
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getPreferredBoundsWidth"><apiName>getPreferredBoundsWidth</apiName><shortdesc>
      
      Возвращает предпочтительную ширину элемента. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает предпочтительную ширину элемента. Как правило, предпочтительная ширина основывается на размере элемента по умолчанию и любом явном переопределении. Для UIComponent она совпадает с getExplicitOrMeasuredWidth().
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает ширину ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе предпочтительного размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает предпочтительную ширину элемента.    
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getRepeaterItem"><apiName>getRepeaterItem</apiName><shortdesc>
      Возвращает элемент в dataProvider, использованный указанным Repeater для создания этого Repeater, или null, если повторение этого Repeater не выполнено.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Запрашиваемый элемент повторителя.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>whichRepeater</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Число повторителей, рассчитываемое от самого крайнего, начиная от 0.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает элемент в <codeph>dataProvider</codeph>, использованный указанным Repeater для создания этого Repeater, или <codeph>null</codeph>, если повторение этого Repeater не выполнено. Аргумент <codeph>whichRepeater</codeph> является 0 для самого крайнего Repeater, 1 для следующего внутреннего Repeater и т. д. Если <codeph>whichRepeater</codeph> не определен, используется ближайший к центру Repeater.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:getStyle"><apiName>getStyle</apiName><shortdesc>
      Получает свойство style, которое было установлено в любом месте в пределах цепочки поиска стиля этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение стиля.
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя свойства стиля.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Получает свойство style, которое было установлено в любом месте в пределах цепочки поиска стиля этого компонента.
     
      <p>Один и тот же метод используется для получения свойства style любого типа, таким образом, возвращаемое значение может являться Boolean, String, Number, int, uint (для цвета RGB), Class (для темы оформления) или объектом любого типа. Поэтому вид возврата указывается как ~~.</p>
     
      <p>При получении определенного свойства style появляется информация о его типе, и часто требуется сохранить результат в переменной этого типа. Приведение от ~~ до этого типа не требуется.</p>
     
      <p>
      <codeph> var backgroundColor:uint = getStyle("backgroundColor"); </codeph>
      </p>
     
      <p>Если свойство style не были установлено в любом месте цепочки поиска стиля, то значение, возвращаемое методом <codeph>getStyle()</codeph>, является <codeph>undefined</codeph>. Учтите, что <codeph>undefined</codeph> является особым значением, не идентичным значениям <codeph>false</codeph>, <codeph>""</codeph>, <codeph>NaN</codeph>, <codeph>0</codeph> или <codeph>null</codeph>. Значение действительного стиля не может быть <codeph>undefined</codeph>. Для проверки того, было ли задано значение, можно использовать метод <codeph>IStyleManager2.isValidStyleValue()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:globalToContent"><apiName>globalToContent</apiName><shortdesc>
      Преобразует объект Point из глобальных координат в координаты содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Point: объект Point с координатами относительно компонента.
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Объект Point, указывающий координаты <i>x</i> и <i>y</i> в глобальной системе координат (рабочая область) в качестве свойств.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Преобразует объект <codeph>Point</codeph> из глобальных координат в координаты содержимого. Глобальные координаты указывают позицию пикселя относительно верхнего левого угла рабочей области, самой крайней позиции приложения. Координаты содержимого указывают позицию пикселя относительно верхнего левого угла содержимого компонента и включают всю область содержимого компонента, включая области, которые в настоящее время отсечены, и доступ к которым возможен при прокрутке компонента. Система координат содержимого используется для установки и получения позиций нижестоящих элементов контейнера с абсолютным позиционированием.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToGlobal()"><linktext>contentToGlobal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:hasState"><apiName>hasState</apiName><shortdesc conref="mx.core.IStateClient2#hasState()">
      </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Определяет, было ли задано указанное состояние 
      
      </apiDesc></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>Имя проверяемого состояния. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.IStateClient2#hasState()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:horizontalGradientMatrix"><apiName>horizontalGradientMatrix</apiName><shortdesc>
      Возвращает матрицу прямоугольника, которая может быть передана в метод drawRoundRect() метод как параметр rot при рисовании горизонтального градиента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Матрица для горизонтального градиента.
      
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Координата левого края градиента в пикселях.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Координата верхнего края градиента в пикселях.
     
      </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Ширина градиента в пикселях.
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Высота градиента в пикселях.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает матрицу прямоугольника, которая может быть передана в метод <codeph>drawRoundRect()</codeph> метод как параметр <codeph>rot</codeph> при рисовании горизонтального градиента.
     
      <p>В целях повышения производительности матрица сохраняется в статической переменной, которая повторно при каждом вызове <codeph>horizontalGradientMatrix()</codeph> и <codeph>verticalGradientMatrix()</codeph>. Поэтому необходимо повторно передать итоговую матрицу в <codeph>drawRoundRect()</codeph> перед вызовом <codeph>horizontalGradientMatrix()</codeph> или <codeph>verticalGradientMatrix()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initAdvancedLayoutFeatures"><apiName>initAdvancedLayoutFeatures</apiName><shortdesc>
      Инициализирует реализацию и хранение некоторых из менее часто используемых расширенных функций макета компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Инициализирует реализацию и хранение некоторых из менее часто используемых расширенных функций макета компонента. Эта функция вызывается перед попыткой использовать любую функцию, реализуемую объектом AdvancedLayoutFeatures.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initializationComplete"><apiName>initializationComplete</apiName><shortdesc>
      Завершает инициализацию компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Завершает инициализацию компонента.
     
      <p>Этот метод представляет собой код, выполняемый последним при первом добавлении компонента к вышестоящему элементу с помощью <codeph>addChild()</codeph> или <codeph>addChildAt()</codeph>. Он выполняет служебные действия, связанные с отправкой события <codeph>initialize</codeph>. При записи компонента не следует переопределять этот метод.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:initialize"><apiName>initialize</apiName><shortdesc>
      Инициализирует внутреннюю структуру этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Инициализирует внутреннюю структуру этого компонента.
     
      <p>Инициализация UIComponent является четвертым шагом в создании экземпляра визуального компонента. Она выполняется автоматически при первом добавлении экземпляра к вышестоящему элементу. Следовательно, не требуется выполнять вызов <codeph>initialize()</codeph>; инфраструктура Flex выполняет вызов автоматически из переопределения методов <codeph>addChild()</codeph> и <codeph>addChildAt()</codeph> UIComponent.</p>
     
      <p>Первым шагом в создании экземпляра визуального компонента является создание с помощью оператора <codeph>new</codeph>:</p>
     
      <pre>
      var okButton:Button = new Button();</pre>
     
      <p>После создания новый экземпляр Button является отдельным DisplayObject; он еще не имеет UITextField в качестве нижестоящего элемента для отображения его метки, а также не имеет вышестоящего узла.</p>
     
      <p>Вторым шагом является настройка созданного экземпляра с соответствующими свойствами, стилями и обработчиками событий:</p>
     
      <pre>
      okButton.label = "OK";
      okButton.setStyle("cornerRadius", 0);
      okButton.addEventListener(MouseEvent.CLICK, clickHandler);</pre>
     
      <p>Третьим шагом является добавление экземпляра к вышестоящему узлу:</p>
     
      <pre>
      someContainer.addChild(okButton);</pre>
     
      <p>Побочным эффектом вызова <codeph>addChild()</codeph> или <codeph>addChildAt()</codeph> при первом добавлении компонента к вышестоящему узлу является автоматический вызов <codeph>initialize</codeph>.</p>
     
      <p>Сначала этот метод отправляет событие <codeph>preinitialize</codeph>, что позволяет разработчикам с помощью этого компонента воздействовать на него перед созданием его внутренней структуры. Далее выполняется вызов метода <codeph>createChildren()</codeph> для создания внутренней структуры компонента; для Button этот метод создает и добавляет UITextField для метки. Затем отправляется событие <codeph>initialize</codeph>, что позволяет разработчикам воздействовать на компонент после создания его внутренней структуры.</p>
     
      <p>Следует отметить, что это действие является действием первого присоединения компонента к вышестоящему узлу, которое инициирует создание его внутренней структуры. Если его внутренняя структура включает другие UIComponents, то выполняется рекурсивный процесс, когда к дереву DisplayObjects в конкретный момент времени добавляется один конечный узел.</p>
     
      <p>При записи компонента не следует переопределять этот метод.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:initializeAccessibility"><apiName>initializeAccessibility</apiName><shortdesc>
      Инициализирует код доступности этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Инициализирует код доступности этого компонента.
     
      <p>Этот метод вызывается методом <codeph>initialize()</codeph> для получения кода доступности компонента, который содержится в отдельном классе в коллекции mx.accessibility. Каждый подкласс, поддерживающий доступность, должен переопределять этот метод, поскольку процесс получения использует разные статические переменные в каждом подклассе.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      Инициализирует разные свойства, которые отслеживают повторенные экземпляры этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>Вышестоящий объект, содержащий Repeater, создавший этот компонент.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Инициализирует разные свойства, которые отслеживают повторенные экземпляры этого компонента.
     
      <p>MXML-тег <codeph>&lt;mx:Repeater/></codeph> может инициировать создание экземпляров компонента; создается один экземпляр для каждого элемента в провайдере данных Repeater. Свойства <codeph>instanceIndices</codeph>, <codeph>repeaters</codeph> и <codeph>repeaterIndices</codeph> UIComponent отслеживают, какой элемент данных происходит из какого экземпляра и из какого Repeater.</p>
     
      <p>Этот метод является внутренним методом, автоматически вызываемым инфраструктурой Flex. Вызывать или переопределять этот метод не требуется.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
      Отмечает компонент с целью вызова его метода updateDisplayList() во время последующего обновления экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Отмечает компонент с целью вызова его метода <codeph>updateDisplayList()</codeph> во время последующего обновления экрана.
     
      <p>Механизм недействительности позволяет исключить дублирование операций за счет задержки обработки изменений компонента до момента последующего обновления экрана. Например, при необходимости изменения ширины и высоты нерационально обновлять компонент сразу же после изменения ширины, а затем выполнять новое обновление после изменения высоты. Более эффективным подходом является изменение обоих свойств с последующим выполнением визуализации компонента с учетом его новых размеров.</p>
     
      <p>Методы недействительности вызываются достаточно редко. Как правило, при установке свойств компонента задается автоматическое выполнение вызова соответствующего метода недействительности.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateLayering"><apiName>invalidateLayering</apiName><shortdesc>
      Вызывается элементами компонента для указания, что свойство depth было изменено.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.4"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Вызывается элементами компонента для указания, что свойство <codeph>depth</codeph> было изменено. Следует отметить, что в то время как эта функция определяется в <codeph>UIComponent</codeph>, она должна реализовать поддержку для комплексного иерархического представления вплоть до подклассов. По умолчанию только <codeph>Group</codeph> и <codeph>DataGroup</codeph> поддерживают произвольное иерархическое представление своих нижестоящих элементов.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/depth"><linktext>depth</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:protected:invalidateParentSizeAndDisplayList"><apiName>invalidateParentSizeAndDisplayList</apiName><shortdesc>
      Вспомогательный метод, делающий недействительными размер и список отображения вышестоящего элемента, если этот объект оказывает влияние на соответствующий макет (значение includeInLayout равно true).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Вспомогательный метод, делающий недействительными размер и список отображения вышестоящего элемента, если этот объект оказывает влияние на соответствующий макет (значение includeInLayout равно true).
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      Отмечает компонент с целью вызова его метода commitProperties() во время последующего обновления экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Отмечает компонент с целью вызова его метода <codeph>commitProperties()</codeph> во время последующего обновления экрана.
     
      <p>Механизм недействительности позволяет исключить дублирование операций за счет задержки обработки изменений компонента до момента последующего обновления экрана. Например, при необходимости изменения цвета и размера текста нерационально обновлять цвет сразу после его изменения, а затем выполнять обновление размера после его установки. Более эффективным подходом является изменение обоих свойств с последующим выполнением визуализации текста с учетом изменений размера и текста.</p>
     
      <p>Методы недействительности вызываются достаточно редко. Как правило, при установке свойств компонента задается автоматическое выполнение вызова соответствующего метода недействительности.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
      Отмечает компонент с целью вызова его метода measure() во время последующего обновления экрана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Отмечает компонент с целью вызова его метода <codeph>measure()</codeph> во время последующего обновления экрана.
     
      <p>Механизм недействительности позволяет исключить дублирование операций за счет задержки обработки изменений компонента до момента последующего обновления экрана. Например, при необходимости изменения текста и размера шрифта нерационально обновлять текст сразу же после его изменения, а затем выполнять обновление размера после его установки. Более эффективным подходом является изменение обоих свойств с последующим выполнением визуализации текста с учетом изменений размера</p>
     
      <p>Методы недействительности вызываются достаточно редко. Как правило, при установке свойств компонента задается автоматическое выполнение вызова соответствующего метода недействительности.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:isOurFocus"><apiName>isOurFocus</apiName><shortdesc>
      Как правило, переопределяется с помощью компонентов, содержащих объекты UITextField, где объект UITextField получает фокус.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Возвращает <codeph>true</codeph>, если объект UITextField имеет фокус.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Объект UIComponent, содержащий объект UITextField, который может получать фокус.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Как правило, переопределяется с помощью компонентов, содержащих объекты UITextField, где объект UITextField получает фокус.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:keyDownHandler"><apiName>keyDownHandler</apiName><shortdesc>
      Обработчик события, вызываемый для события keyDown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Объект события.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обработчик события, вызываемый для события <codeph>keyDown</codeph>. Если выполняется переопределение этого метода, убедитесь, что вызывается версия базового класса.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:keyUpHandler"><apiName>keyUpHandler</apiName><shortdesc>
      Обработчик события, вызываемый для события keyUp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:KeyboardEvent"/><apiDesc>Объект события.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обработчик события, вызываемый для события <codeph>keyUp</codeph>. Если выполняется переопределение этого метода, убедитесь, что вызывается версия базового класса.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:localToContent"><apiName>localToContent</apiName><shortdesc>
      Преобразует объект Point из координат содержимого в локальные координаты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Point: объект Point с координатами относительно систем координат содержимого.
     
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Объект Point, указывающий координаты <i>x</i> и <i>y</i> в локальной системе координат в качестве свойств.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Преобразует объект <codeph>Point</codeph> из координат содержимого в локальные координаты. Локальные координаты указывают позицию пикселя относительно верхнего левого угла компонента. Координаты содержимого указывают позицию пикселя относительно верхнего левого угла содержимого компонента и включают всю область содержимого компонента, включая области, которые в настоящее время отсечены, и доступ к которым возможен при прокрутке компонента. Система координат содержимого используется для установки и получения позиций нижестоящих элементов контейнера с абсолютным позиционированием.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/contentToLocal()"><linktext>contentToLocal()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:matchesCSSState"><apiName>matchesCSSState</apiName><shortdesc>
      Определяет, соответствует ли текущее состояние этого компонента псевдоселектору CSS.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssState</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      Определяет, соответствует ли текущее состояние этого компонента псевдоселектору CSS.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:matchesCSSType"><apiName>matchesCSSType</apiName><shortdesc>
      Определяет, можно ли назначить этот компонент указанному типу CSS.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>cssType</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      Определяет, можно ли назначить этот компонент указанному типу CSS. Эта функция используется для определения соответствия расширенных стилей CSS.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:measure"><apiName>measure</apiName><shortdesc>
      Вычисляет размер по умолчанию и дополнительно минимальный размер по умолчанию для компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Вычисляет размер по умолчанию и дополнительно минимальный размер по умолчанию для компонента. Это усовершенствованный метод, который можно отменить при создании подкласса UIComponent.
     
      <p>Вызов этого метода напрямую не выполняется. Метод <codeph>measure()</codeph> вызывается программой Flex при добавлении компонента к контейнеру с использованием метода <codeph>addChild()</codeph> и при вызове метода <codeph>invalidateSize()</codeph> компонента. </p>
     
      <p>При установке заданной высоты и ширины компонента вызов метода <codeph>measure()</codeph> в программе Flex не осуществляется даже в случае явного вызова метода <codeph>invalidateSize()</codeph>. Таким образом, метод <codeph>measure()</codeph> вызывается, только если свойство компонента <codeph>explicitWidth</codeph> или свойство компонента <codeph>explicitHeight</codeph> имеет значение NaN. </p>
     
      <p>Для перезаписи этого метода необходимо настроить свойства <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph> для определения размера по умолчанию. Свойства <codeph>measuredMinWidth</codeph> и <codeph>measuredMinHeight</codeph> можно дополнительно настроить для определения минимального размера по умолчанию.</p>
     
      <p>В большинстве компонентов эти значения вычисляются на основе отображаемого содержимого и свойств, оказывающих влияние на отображение содержимого. В нескольких компонентах существуют жестко закодированные значения по умолчанию. </p>
     
      <p>Концептуальное отличие метода <codeph>measure()</codeph> для компонента заключается в предоставлении его собственного естественного или свойственного ему размера в качестве значения по умолчанию. Поэтому свойства <codeph>measuredWidth</codeph> и <codeph>measuredHeight</codeph> должны определяться на основе таких факторов, как перечисленные ниже.</p>
      <ul>
         <li>Объем текста, который должен быть отображен в компоненте.</li>
         <li>Стили этого текста, например <codeph>fontSize</codeph>.</li>
         <li>Размер изображения JPEG, отображаемого в компоненте.</li>
         <li>Измеренные или явные размеры нижестоящих элементов компонента.</li>
         <li>Любые границы, поля и промежутки.</li>
      </ul>
     
      <p>В некоторых случаях встроенный метод для определения значений по умолчанию отсутствует. Например, для простого компонента GreenCircle можно просто установить значение свойств measuredWidth = 100 и measuredHeight = 100 в методе <codeph>measure()</codeph> для предоставления приемлемого размера по умолчанию. В других случаях, например, для элемента TextArea, соответствующее вычисление (например, поиск требуемого значения ширины и высоты, при которых будет отображен весь текст, а элемент будет иметь соотношение размеров, присущее золотому сечению) может занять слишком много времени и поэтому не является целесообразным.</p>
     
      <p>В реализации метода <codeph>measure()</codeph> по умолчанию для свойств <codeph>measuredWidth</codeph>, <codeph>measuredHeight</codeph>, <codeph>measuredMinWidth</codeph> и <codeph>measuredMinHeight</codeph> устанавливается значение, равное <codeph>0</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:measureHTMLText"><apiName>measureHTMLText</apiName><shortdesc>
      Выполняет измерения для указанного текста HTML, который может содержать HTML-теги, например, &amp;lt;font&amp;gt; и &amp;lt;b&amp;gt;. При этом предполагается, что текст отображается в однострочном поле UITextField при помощи объекта UITextFormat, определяемого стилями этого UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект TextLineMetrics, содержащий измерения текста.
      
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>htmlText</apiItemName><apiType value="String"/><apiDesc>Строка, определяющая измеряемый HTML-текст.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполняет измерения для указанного текста HTML, который может содержать HTML-теги, например, <codeph>&lt;font></codeph> и <codeph>&lt;b></codeph>. При этом предполагается, что текст отображается в однострочном поле UITextField при помощи объекта UITextFormat, определяемого стилями этого UIComponent.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:measureText"><apiName>measureText</apiName><shortdesc>
      Выполняет измерения для указанного текста. При этом предполагается, что текст отображается в однострочном поле UITextField при помощи объекта UITextFormat, определяемого стилями этого UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект TextLineMetrics, содержащий измерения текста.
      
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>Строка, содержащая измеряемый текст.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполняет измерения для указанного текста. При этом предполагается, что текст отображается в однострочном поле UITextField при помощи объекта UITextFormat, определяемого стилями этого UIComponent.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:move"><apiName>move</apiName><shortdesc>
       Перемещает компонент в указанное положение в пределах его вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Положение компонента слева внутри вышестоящего элемента.
      
       </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Положение компонента внутри вышестоящего элемента.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc>
       Перемещает компонент в указанное положение в пределах его вышестоящего элемента. Вызов этого метода эквивалентен установке свойств компонента <codeph>x</codeph> и <codeph>y</codeph>.
      
       <p>При переопределении метода <codeph>updateDisplayList()</codeph> в пользовательском компоненте следует вызвать метод <codeph>move()</codeph> вместо установки свойств <codeph>x</codeph> и <codeph>y</codeph>. Разница заключается в том, что метод <codeph>move()</codeph> изменяет местоположение компонента и затем при вызове метода отправляет событие <codeph>move</codeph>, в то время как при установке свойств <codeph>x</codeph> и <codeph>y</codeph> изменяется местоположение компонента, и событие отправляется при следующем обновлении экрана.</p>
      
       </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:nonDeltaLayoutMatrix"><apiName>nonDeltaLayoutMatrix</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:notifyStyleChangeInChildren"><apiName>notifyStyleChangeInChildren</apiName><shortdesc>
      Обеспечивает распространение изменений стиля для нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Строка, определяющая имя свойства стиля.
     
      </apiDesc></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Отсылает рекурсивные сообщения всем нижестоящим элементам этого компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает распространение изменений стиля для нижестоящих элементов. Этот метод обычно не вызывается.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:owns"><apiName>owns</apiName><shortdesc>
      Возвращает значение true, если цепочка свойств owner направлена от child к этому UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Содержит значение <codeph>true</codeph>, если нижестоящий элемент принадлежит этому UIComponent.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>A UIComponent.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает значение <codeph>true</codeph>, если цепочка свойств <codeph>owner</codeph> направлена от <codeph>child</codeph> к этому UIComponent.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:parentChanged"><apiName>parentChanged</apiName><shortdesc>
      Вызывается Flex при добавлении или удалении объекта UIComponent из вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Вышестоящий элемент этого объекта UIComponent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается Flex при добавлении или удалении объекта UIComponent из вышестоящего элемента. Как правило, этот метод не вызывается разработчиками непосредственно.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:prepareToPrint"><apiName>prepareToPrint</apiName><shortdesc>
      Готовит IFlexDisplayObject к печати.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект, содержащий свойства текущего компонента, запрашиваемого методом <codeph>finishPrint()</codeph> для восстановления это предыдущего состояния.
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Компонент, который следует распечатать. Это может быть текущий компонент или один из его нижестоящих компонентов.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Готовит IFlexDisplayObject к печати. Для класса UIComponent метод не выполняет каких-либо действий. Контейнеры Flex переопределяют метод для подготовки к печати; например, из выводимого на печать удаляются полосы прокрутки.
     
      <p>Как правило, этот класс не используется разработчиками приложений. </p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.printing.xml#FlexPrintJob"><linktext>mx.printing.FlexPrintJob</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:regenerateStyleCache"><apiName>regenerateStyleCache</apiName><shortdesc>
      Создает или восстанавливает кэш стиля CSS для этого компонента и, если параметр recursive является true, также для всех нижестоящих элементов этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiDesc>Обеспечивает рекурсивное восстановление кэша стиля для всех нижестоящих элементов данного компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Создает или восстанавливает кэш стиля CSS для этого компонента и, если параметр <codeph>recursive</codeph> является <codeph>true</codeph>, также для всех нижестоящих элементов этого компонента.
     
      <p>Инфраструктура Flex вызывает этот метод в следующих ситуациях:</p>
     
      <ul>
        <li>При добавлении UIComponent к вышестоящему элементу с помощью методов <codeph>addChild()</codeph> или <codeph>addChildAt()</codeph>.</li>
        <li>При изменении свойства <codeph>styleName</codeph> UIComponent.</li>
        <li>При настройке стиля в селекторе CSS с помощью метода <codeph>setStyle()</codeph> CSSStyleDeclaration.</li>
      </ul>
     
      <p>Создание кэша стиля является операцией большой вычислительной мощности, поэтому не следует изменять <codeph>styleName</codeph> или устанавливать стили селектора без необходимости.</p>
     
      <p>Этот метод не вызывается при установке стиля экземпляра посредством вызова метода <codeph>setStyle()</codeph> UIComponent. Установка стиля экземпляра является относительно быстро выполняемой операцией по сравнению с установкой стиля селектора.</p>
     
      <p>Не требуется вызывать или переопределять этот метод.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:registerEffects"><apiName>registerEffects</apiName><shortdesc>
      Обеспечить регистрацию EffectManager в качестве одного из прослушивателей события для каждого события эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>Имена событий эффекта.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечить регистрацию EffectManager в качестве одного из прослушивателей события для каждого события эффекта. Этот метод обычно не вызывается.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      
      Воспроизводит указанное событие.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при успешном воспроизведении.  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Воспроизводимое событие.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Воспроизводит указанное событие. Автор компонента должен вызвать super.replayAutomatableEvent в случае, если поведение воспроизведения по умолчанию определено в суперклассе.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:resolveAutomationIDPart"><apiName>resolveAutomationIDPart</apiName><shortdesc>
      
      Определяет нижестоящий элемент с помощью предоставленного идентификатора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив нижестоящих элементов, которые соответствуют критериям, или значение <codeph>null</codeph>, если соответствующие нижестоящие элементы не определены.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>criteria</apiItemName><apiType value="Object"/><apiDesc>Набор свойств, описывающих нижестоящий элемент. Критерии могут содержать обычные значения выражений, которым могут соответствовать несколько нижестоящих элементов.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Определяет нижестоящий элемент с помощью предоставленного идентификатора. Этот идентификатор представляет собой набор свойств, предоставляемых методом <codeph>createAutomationIDPart()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:resourcesChanged"><apiName>resourcesChanged</apiName><shortdesc>
      Этот метод вызывается при создании UIComponent и далее при каждой передаче события change для указания какого-либо изменения локализованных ресурсов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Этот метод вызывается при создании UIComponent и далее при каждой передаче события <codeph>change</codeph> для указания какого-либо изменения локализованных ресурсов.
     
      <p>Это событие передается при установке значения для свойства ResourceManager <codeph>localeChain</codeph> после завершения загрузки модуля ресурсов и при вызове метода ResourceManager <codeph>update()</codeph>.</p>
     
      <p>Подклассы должны отменять этот метод и после вызова <codeph>super.resourcesChanged()</codeph> выполнять соответствующую операцию в ответ на получение новых значений ресурсов.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:resumeBackgroundProcessing"><apiName>resumeBackgroundProcessing</apiName><shortdesc>
      Возобновляет фоновую обработку методов, поставленных в очередь callLater() после вызова suspendBackgroundProcessing().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Возобновляет фоновую обработку методов, поставленных в очередь <codeph>callLater()</codeph> после вызова <codeph>suspendBackgroundProcessing()</codeph>.
     
      <p>Для получения дополнительной информации см. описание <codeph>suspendBackgroundProcessing()</codeph>.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      Размеры объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Ширина объекта.
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Высота объекта.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Размеры объекта. В отличие от прямой установки свойств <codeph>width</codeph> и <codeph>height</codeph> при вызове метода <codeph>setActualSize()</codeph> свойства <codeph>explictWidth</codeph> и <codeph>explicitHeight</codeph> не устанавливаются. Таким образом, при вычислении макета в дальнейшем может произойти возвращение объекта к предыдущему размеру. Этот метод используется, прежде всего, разработчиками компонентов, реализующими метод <codeph>updateDisplayList()</codeph> с помощью Effects и LayoutManager.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setConstraintValue"><apiName>setConstraintValue</apiName><shortdesc>
      Устанавливает значение ограничения макета, совпадающее со значением стиля ограничения для этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><value>The value of the constraint can be specified in either
      of two forms. It can be specified as a numeric string, for
      example, "10" or it can be specified as identifier:numeric
      string. For identifier:numeric string, identifier is the
      <code>id</code> of a ConstraintRow or ConstraintColumn. For
      example, a value of "cc1:10" specifies a value of 10 for the
      ConstraintColumn that has the <code>id</code> "cc1."
     
      
      </value></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>Имя стиля ограничения, которое может быть одним из следующих: left, right, top, bottom, verticalCenter, horizontalCenter, baseline
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/></apiParam></apiOperationDef><apiDesc>
      Устанавливает значение ограничения макета, совпадающее со значением стиля ограничения для этого компонента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setCurrentState"><apiName>setCurrentState</apiName><shortdesc>
      Установить текущее состояние.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>Имя нового состояния представления.
     
      </apiDesc></apiParam><apiParam><apiItemName>playTransition</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если <codeph>true</codeph>, при изменении состояния представления следует воспроизвести соответствующий переход.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Установить текущее состояние.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/currentState"><linktext>currentState</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:setFocus"><apiName>setFocus</apiName><shortdesc>
      Задает фокус на этот компонент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Задает фокус на этот компонент. Компонент может, в свою очередь, поместить в фокус субкомпонент.
     
      <p><b>Примечание. </b> Только элементы управления TextInput и TextArea отображают выделение при установке фокуса с помощью этого метода. Все элементы управления отображают выделение при переходе пользователя к элементу управления.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutBoundsPosition"><apiName>setLayoutBoundsPosition</apiName><shortdesc>
      
      Устанавливает координаты, используемые элементом для отображения на экране.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Если postLayoutTransform имеет значение true, элемент позиционируется таким образом, что верхний левый угол его ограничительной рамки имеет координаты (x, y). Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента, позиции макета и матрицы преобразования макета. Следует отметить, что вызовы метода setLayoutSize могут повлиять на позицию макета, таким образом, метод setLayoutPosition должен вызываться после метода setLayoutSize.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
      
      Устанавливает координаты, используемые элементом для отображения на экране.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutBoundsSize"><apiName>setLayoutBoundsSize</apiName><shortdesc>
      
      Устанавливает величину макета в соответствии с указанными размерами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Целевая ширина.
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Целевая высота.
     
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, указанные размеры совпадают с размерами ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента, позиции макета и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Устанавливает величину макета в соответствии с указанными размерами. Размер, используемый элементом для отображения на экране. Если один из размеров остается неопределенным (NaN), величина элемента устанавливается с учетом максимального соответствия другому размеру. Этот подход целесообразно использовать в том случае, когда пользователю, выполняющему вызов, требуется сохранить пропорции элемента, например, если ширина элемента взаимосвязана с его высотой (текст, компоненты со сложными преобразованиями и т.д.) Если оба размера остаются неопределенными, то задаваемый размер элемента будет совпадать с его предпочтительным размером. Метод <codeph>setLayoutSize</codeph> не выполняет обрезку в соответствии с минимальными или максимальными размерами. Следует отметить, что вызовы метода setLayoutSize могут повлиять на позицию макета, таким образом, метод setLayoutSize должен вызываться перед методом setLayoutPosition.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutMatrix"><apiName>setLayoutMatrix</apiName><shortdesc>
      
      Устанавливает матрицу преобразования, используемую для определения размера макета компонента и его позиции относительно соответствующих элементов одного уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix"/></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      
      Устанавливает матрицу преобразования, используемую для определения размера макета компонента и его позиции относительно соответствующих элементов одного уровня.
     
      <p>Эта матрица, как правило, определяется двумерными свойствами компонента, такими как <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> и <codeph>transformY</codeph>. Некоторые компоненты могут иметь дополнительные свойства преобразования, которые применяются в дополнение к матрице макета для определения ее окончательного вида при вычислении. Например, <codeph>UIComponent</codeph> определяет свойство <codeph>offsets</codeph>.</p>
      
      <p>Следует отметить, что матрица макета факторизуется методами getPreferredSize(), getMinSize(), getMaxSize(), getLayoutSize() при вычислении в координатах вышестоящего элемента, а также методом getLayoutPosition() – в координатах как вышестоящего, так и нижестоящего элемента. Макеты, для которых матрица преобразования вычисляется явным образом, как правило, вызывают этот метод и используют размеры в координатах нижестоящего элемента. Макеты, вызывающие этот метод, передают значение <codeph>false</codeph> в <codeph>invalidateLayout</codeph> таким образом, чтобы избежать инициирования последующей передачи макета.</p>
     
      <p>Разработчики, напрямую вызывающие этот метод, как правило, передают значение <codeph>true</codeph> в <codeph>invalidateLayout</codeph>, чтобы вышестоящий контейнер получал уведомления о необходимости переформатирования своих нижестоящих элементов.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setLayoutMatrix3D"><apiName>setLayoutMatrix3D</apiName><shortdesc>
      Подобно свойству layoutMatrix3D устанавливает Matrix3D макета, но не инициирует передачу макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix3D"/></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      Подобно свойству layoutMatrix3D устанавливает Matrix3D макета, но не инициирует передачу макета. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:setStretchXY"><apiName>setStretchXY</apiName><shortdesc>
      Определяет коэффициент растягивания по горизонтали и вертикали.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>stretchX</apiItemName><apiType value="Number"/><apiDesc>Горизонтальный компонент коэффициента растягивания.
      </apiDesc></apiParam><apiParam><apiItemName>stretchY</apiItemName><apiType value="Number"/><apiDesc>Вертикальный компонент коэффициента растягивания.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Определяет коэффициент растягивания по горизонтали и вертикали. Коэффициент растягивания применяется к вычисленной матрице перед любым другим преобразованием.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setStyle"><apiName>setStyle</apiName><shortdesc>
      Задает свойство style для экземпляра компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя свойства стиля.
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value=""/><apiDesc>Новое значение стиля.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Задает свойство style для экземпляра компонента.
     
      <p>Оно может переопределить стиль, который был задан на глобальном уровне.</p>
     
      <p>Вызов метода <codeph>setStyle()</codeph> может привести к снижению производительности. Используйте его только в случае необходимости.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:setVisible"><apiName>setVisible</apiName><shortdesc>
      Вызывается при изменении свойства visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>Новое значение свойства <codeph>visible</codeph>. Укажите значение <codeph>true</codeph> для отображения компонентов, и <codeph>false</codeph> для их скрытия.
     
      </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если значение равно <codeph>true</codeph>, передавать событие не следует. Если значение равно <codeph>false</codeph>, то, когда компонент становится видимым, передается событие <codeph>show</codeph>, а когда компонент становится невидимым – событие <codeph>hide</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается при изменении свойства <codeph>visible</codeph>. Для отображения или скрытия компонента вместо непосредственного вызова этого метода следует использовать свойство <codeph>visible</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:stateChanged"><apiName>stateChanged</apiName><shortdesc>
      Этот метод вызывается при изменении состояния для проверки, применяются ли специфичные для состояния стили к этому компоненту.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldState</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>newState</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      Этот метод вызывается при изменении состояния для проверки, применяются ли специфичные для состояния стили к этому компоненту. Если есть вероятность соответствия псевдоселектора CSS для текущего состояния, кэш стиля должен быть восстановлен для этого экземпляра и потенциально для всех нижестоящих элементов, если параметр recursive установлен на true.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      Обеспечивает обнаружение изменений в свойствах стиля.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя свойства стиля или значение null, если все стили для этого компонента были изменены.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает обнаружение изменений в свойствах стиля. После установки любого свойства стиля в программе Flex выполняется вызов метода <codeph>styleChanged()</codeph> и передача в него имени установленного стиля.
     
      <p>Это усовершенствованный метод, который можно отменить при создании подкласса UIComponent. При создании пользовательского компонента можно отменить проверку имени стиля, передаваемого в метод <codeph>styleChanged()</codeph>, и соответствующим образом обработать изменение. Это позволяет отменить заданное по умолчанию поведение существующего стиля или добавить собственные пользовательские свойства стиля.</p>
     
      <p>При обработке свойства стиля отмена метода <codeph>styleChanged()</codeph> станет причиной вызова метода <codeph>invalidateDisplayList()</codeph>, что обеспечит вызов метода <codeph>updateDisplayList()</codeph> программой Flex при последующем обновлении экрана.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:stylesInitialized"><apiName>stylesInitialized</apiName><shortdesc>
      Метод stylesInitialized() вызывается программой Flex при первой инициализации стиля компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Метод <codeph>stylesInitialized()</codeph> вызывается программой Flex при первой инициализации стиля компонента.
     
      <p>Это усовершенствованный метод, который можно переопределить при создании подкласса UIComponent. Flex обеспечивает полную инициализацию стилей компонента перед первым вызовом методов компонента <codeph>measure</codeph> и <codeph>updateDisplayList</codeph>. Этого достаточно для большинства компонентов. Однако если требуется получить преждевременный доступ к значениям стиля, необходимо изменить функцию stylesInitialized() и получить доступ к свойствам стиля при первой их инициализации.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:suspendBackgroundProcessing"><apiName>suspendBackgroundProcessing</apiName><shortdesc>
      Блокирует фоновую обработку методов, поставленных в очередь callLater() до вызова resumeBackgroundProcessing().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Блокирует фоновую обработку методов, поставленных в очередь <codeph>callLater()</codeph> до вызова <codeph>resumeBackgroundProcessing()</codeph>.
     
      <p>Эти методы целесообразно использовать в ситуациях, когда требуется выполнить ограниченный по времени код без прерывания. Например, при установке свойства <codeph>suspendBackgroundProcessing</codeph> эффекта на <codeph>true</codeph> <codeph>suspendBackgroundProcessing()</codeph> автоматически вызывается в начале воспроизведения, а <codeph>resumeBackgroundProcessing</codeph> вызывается при остановке воспроизведения. Это позволяет обеспечить сглаженность мультипликации.</p>
     
      <p>Так как LayoutManager использует <codeph>callLater()</codeph>, <codeph>commitProperties()</codeph>, <codeph>measure()</codeph> и <codeph>updateDisplayList()</codeph> не вызываются в промежутках между вызовами <codeph>suspendBackgroundProcessing()</codeph> и <codeph>resumeBackgroundProcessing()</codeph>.</p>
     
      <p>Вызов <codeph>suspendBackgroundProcessing()</codeph> и <codeph>resumeBackgroundProcessing()</codeph> является безопасным как для внешних, так и для внутренних методов, так как эти методы непосредственно увеличивают и уменьшают значения счетчика, определяющего, выполняется ли фоновая обработка.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:transformAround"><apiName>transformAround</apiName><shortdesc conref="mx.core.ILayoutElement#transformAround">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transformCenter</apiItemName><apiType value="flash.geom:Vector3D"/></apiParam><apiParam><apiItemName>scale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam><apiParam><apiItemName>rotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam><apiParam><apiItemName>translation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam><apiParam><apiItemName>postLayoutScale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam><apiParam><apiItemName>postLayoutRotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam><apiParam><apiItemName>postLayoutTranslation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc conref="mx.core.ILayoutElement#transformAround">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:transformPointToParent"><apiName>transformPointToParent</apiName><shortdesc>
     </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata><asCustoms><postLayoutPosition>A Vector3D point that will hold the post-layout
     result. If null, the parameter is ignored.
     
      </postLayoutPosition></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>localPosition</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>
     </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="flash.geom:Vector3D"/></apiParam><apiParam><apiItemName>postLayoutPosition</apiItemName><apiType value="flash.geom:Vector3D"/></apiParam></apiOperationDef><apiDesc>
      <codeph/><codeph/>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Обеспечивает отображение объекта и/или определение размеров и положения его нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Указывает ширину компонента, в пикселях, в координатах компонента вне зависимости от значения свойства <codeph>scaleX</codeph> компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Указывает высоту компонента, в пикселях, в координатах компонента вне зависимости от значения свойства <codeph>scaleY</codeph> компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обеспечивает отображение объекта и/или определение размеров и положения его нижестоящих элементов. Это усовершенствованный метод, который можно отменить при создании подкласса UIComponent.
     
      <p>Вызов этого метода напрямую не выполняется. Метод <codeph>updateDisplayList()</codeph> вызывается программой Flex при добавлении компонента к контейнеру с использованием метода <codeph>addChild()</codeph>, а также при вызове метода <codeph>invalidateDisplayList()</codeph> компонента. </p>
     
      <p>Если компонент не имеет нижестоящих элементов, именно в этом методе необходимо осуществить программируемое отображение с использованием методов объекта Graphics компонента, например, <codeph>graphics.drawRect()</codeph>.</p>
     
      <p>Если компонент имеет нижестоящие элементы, в этом методе необходимо выполнить вызов методов <codeph>move()</codeph> и <codeph>setActualSize()</codeph> для его нижестоящих элементов.</p>
     
      <p>Программируемое отображение может осуществляться в компонентах даже при наличии у них нижестоящих элементов. В выполнении этого действия также необходимо использовать свойства <codeph>unscaledWidth</codeph> и <codeph>unscaledHeight</codeph> компонента в качестве его пределов.</p>
     
      <p>Важным является использование свойств <codeph>unscaledWidth</codeph> и <codeph>unscaledHeight</codeph> вместо свойств <codeph>width</codeph> и <codeph>height</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc>
      
      Проверяет правильность расположения и размера нижестоящих элементов и отображает различные визуальные эффекты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Проверяет правильность расположения и размера нижестоящих элементов и отображает различные визуальные эффекты. Если совместно с ILayoutManagerClient вызван метод <codeph>LayoutManager.invalidateDisplayList()</codeph>, то при обновлении списка отображения будет вызван метод<codeph>validateDisplayList()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateNow"><apiName>validateNow</apiName><shortdesc>
      Проверяет и обновляет свойства и макет этого объекта, а также перерисовывает его в случае необходимости.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Проверяет и обновляет свойства и макет этого объекта, а также перерисовывает его в случае необходимости. Обработка свойств, требующих значительного объема вычислений, обычно не выполняется до окончания выполнения сценария. Например, установка свойства <codeph>width</codeph> отложена, так как для этого действия может потребоваться перерасчет ширины нижестоящих элементов и вышестоящих элементов объектов. Задержка обработки предотвращает множественное повторение свойства, если код приложения выполняет установку свойства <codeph>width</codeph> несколько раз. Этот метод позволяет отменить вручную подобное поведение.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateProperties"><apiName>validateProperties</apiName><shortdesc>
      Используется в логике макета для проверки свойств компонента посредством вызова метода commitProperties().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Используется в логике макета для проверки свойств компонента посредством вызова метода <codeph>commitProperties()</codeph>. Как правило, подклассы должны переопределять метод <codeph>commitProperties()</codeph>, но не данный метод.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validateSize"><apiName>validateSize</apiName><shortdesc>
      
      Проверяет правильность измеренного размера компонента. Если совместно с данным IlayoutManagerClient вызван метод LayoutManager.invalidateSize(), то при измерении будет вызван метод validateSize().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recursive</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если значение <codeph>true</codeph>, то необходимо вызвать этот метод для нижестоящих элементов объекта.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Проверяет правильность измеренного размера компонента. Если совместно с данным IlayoutManagerClient вызван метод <codeph>LayoutManager.invalidateSize()</codeph>, то при измерении будет вызван метод <codeph>validateSize()</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UIComponent:validationResultHandler"><apiName>validationResultHandler</apiName><shortdesc>
      Обрабатывает события valid и invalid из средства проверки, назначенного этому компоненту.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:ValidationResultEvent</apiOperationClassifier><apiDesc>Объект события для проверки.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обрабатывает события <codeph>valid</codeph> и <codeph>invalid</codeph> из средства проверки, назначенного этому компоненту.
     
      <p>Обычно обрабатываются события <codeph>valid</codeph> и <codeph>invalid</codeph>, передаваемые средству проверки путем присвоения прослушивателей событий средствам проверки. Если требуется обработка событий проверки непосредственно в проверяемом компоненте, этот метод можно переопределить для обработки событий <codeph>valid</codeph> и <codeph>invalid</codeph>. Как правило, при перезаписи выполняется вызов <codeph>super.validationResultHandler(event)</codeph>.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ValidationResultEvent"><linktext>mx.events.ValidationResultEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UIComponent:verticalGradientMatrix"><apiName>verticalGradientMatrix</apiName><shortdesc>
      Возвращает матрицу прямоугольника, которая может быть передана передать в drawRoundRect() как параметр rot при рисовании вертикального градиента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Матрица для вертикального градиента.
      
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Координата левого края градиента в пикселях.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Координата верхнего края градиента в пикселях.
     
      </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Ширина градиента в пикселях.
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Высота градиента в пикселях.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает матрицу прямоугольника, которая может быть передана передать в <codeph>drawRoundRect()</codeph> как параметр <codeph>rot</codeph> при рисовании вертикального градиента.
     
      <p>В целях повышения производительности матрица сохраняется в статической переменной, которая повторно при каждом вызове <codeph>horizontalGradientMatrix()</codeph> и <codeph>verticalGradientMatrix()</codeph>. Поэтому необходимо повторно передать итоговую матрицу в <codeph>drawRoundRect()</codeph> перед вызовом <codeph>horizontalGradientMatrix()</codeph> или <codeph>verticalGradientMatrix()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:UIComponent:DEFAULT_MAX_HEIGHT"><apiName>DEFAULT_MAX_HEIGHT</apiName><shortdesc>
      Значение по умолчанию свойства maxHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение по умолчанию свойства <codeph>maxHeight</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MAX_WIDTH"><apiName>DEFAULT_MAX_WIDTH</apiName><shortdesc>
      Значение по умолчанию свойства maxWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>10000</apiData><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение по умолчанию свойства <codeph>maxWidth</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_HEIGHT"><apiName>DEFAULT_MEASURED_HEIGHT</apiName><shortdesc>
      Значение по умолчанию свойства measuredHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение по умолчанию свойства <codeph>measuredHeight</codeph>. Большинство компонентов выполняют вычисление measuredHeight, однако некоторые компоненты основываются на потоке и должны выполнить выбор целесообразного числа.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_MIN_HEIGHT"><apiName>DEFAULT_MEASURED_MIN_HEIGHT</apiName><shortdesc>
      Значение по умолчанию свойства measuredMinHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение по умолчанию свойства <codeph>measuredMinHeight</codeph>. Большинство компонентов выполняют вычисление measuredMinHeight, однако некоторые компоненты основываются на потоке и должны выполнить выбор целесообразного числа.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_MIN_WIDTH"><apiName>DEFAULT_MEASURED_MIN_WIDTH</apiName><shortdesc>
      Значение по умолчанию свойства measuredMinWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>40</apiData><apiType value="Number"/><apiDefaultValue>40
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение по умолчанию свойства <codeph>measuredMinWidth</codeph>. Большинство компонентов выполняют вычисление measuredMinWidth, однако некоторые компоненты основываются на потоке и должны выполнить выбор целесообразного числа.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:DEFAULT_MEASURED_WIDTH"><apiName>DEFAULT_MEASURED_WIDTH</apiName><shortdesc>
      Значение по умолчанию свойства measuredWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>160</apiData><apiType value="Number"/><apiDefaultValue>160
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Значение по умолчанию свойства <codeph>measuredWidth</codeph>. Большинство компонентов выполняют вычисление measuredWidth, однако некоторые компоненты основываются на потоке и должны выполнить выбор целесообразного числа.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityDescription:get"><apiName>accessibilityDescription</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><public>
	  A convenience accessor for the 'description' property
	  in this UIComponent's accessibilityProperties object.
	 
	  The getter simply returns accessibilityProperties.description,
	  or "" if accessibilityProperties is null.
	  The setter first checks whether accessibilityProperties is null, and if it is,
	  sets it to a new AccessibilityProperties instance;
	  then it sets accessibilityProperties.description.
	 
  	  </public></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityEnabled:get"><apiName>accessibilityEnabled</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><public>
	  A convenience accessor for the 'silent' property
	  in this UIComponent's accessibilityProperties object.
	 
	  Note that accessibilityEnabled has the opposite sense from silent;
	  accessibilityEnabled is true when silent is false and vice versa.
	 
	  The getter simply returns accessibilityProperties.silent,
	  or true if accessibilityProperties is null.
	  The setter first checks whether accessibilityProperties is null, and if it is,
	  sets it to a new AccessibilityProperties instance;
	  then it sets accessibilityProperties.silent.
	 
      </public></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityName:get"><apiName>accessibilityName</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><public>
	  A convenience accessor for the 'name' property
	  in this UIComponent's accessibilityProperties object.
	 
	  The getter simply returns accessibilityProperties.name,
	  or "" if accessibilityProperties is null.
	  The setter first checks whether accessibilityProperties is null, and if it is,
	  sets it to a new AccessibilityProperties instance;
	  then it sets accessibilityProperties.name.
	 
	  </public></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:accessibilityShortcut:get"><apiName>accessibilityShortcut</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><public>
	  A convenience accessor for the 'shortcut' property
	  in this UIComponent's accessibilityProperties object.
	 
	  The getter simply returns accessibilityProperties.shortcut,
	  or "" if accessibilityProperties is null.
	  The setter first checks whether accessibilityProperties is null, and if it is,
	  sets it to a new AccessibilityProperties instance;
	  then it sets accessibilityProperties.shortcut.
	 
	  </public></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:activeEffects:get"><apiName>activeEffects</apiName><shortdesc>
      Список эффектов, в настоящее время воспроизводимых в компоненте, например, массив экземпляров EffectInstance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Список эффектов, в настоящее время воспроизводимых в компоненте, например, массив экземпляров EffectInstance.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      Объект-делегат, выполняющий обработку функций, связанных с автоматизацией.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Объект-делегат, выполняющий обработку функций, связанных с автоматизацией.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      
      Значение true, если этот компонент доступен для автоматизации; в противном случае – false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Значение true, если этот компонент доступен для автоматизации; в противном случае – false.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationName:get"><apiName>automationName</apiName><shortdesc>
      
      Имя, которое можно использовать в качестве идентификатора этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      Имя, которое можно использовать в качестве идентификатора этого объекта.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      
      Владелец этого компонента в целях автоматизации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Владелец этого компонента в целях автоматизации.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      
      Вышестоящий элемент этого компонента в целях автоматизации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Вышестоящий элемент этого компонента в целях автоматизации.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationTabularData:get"><apiName>automationTabularData</apiName><shortdesc>
      
      Реализация интерфейса IAutomationTabularData, который можно использовать для извлечения данных.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Реализация интерфейса <codeph>IAutomationTabularData</codeph>, который можно использовать для извлечения данных.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationValue:get"><apiName>automationValue</apiName><shortdesc conref="mx.automation.IAutomationObject#automationValue">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.automation.IAutomationObject#automationValue">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      
      Значение true, если этот компонент является видимым для автоматизации; в противном случае – false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Значение true, если этот компонент является видимым для автоматизации; в противном случае – false.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:baseline:get"><apiName>baseline</apiName><shortdesc>
      
      Вертикальное смещение в пикселях от целевого объекта привязки к положению базовой линии элемента управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Вертикальное смещение в пикселях от целевого объекта привязки к положению базовой линии элемента управления. По умолчанию целевым объектом привязки является верхний край области содержимого контейнера. В макетах с расширенными ограничениями, целевой объект может быть строкой ограничений. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате anchorTargetName:value, например, row1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      
      Координата Y базовой линии первой строки текста компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      Координата Y базовой линии первой строки текста компонента.
     
      <p>Это свойство используется для реализации стиля ограничения <codeph>baseline</codeph>. Это свойство также используется для выравнивания метки FormItem относительно элементов управления в FormItem.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:bottom:get"><apiName>bottom</apiName><shortdesc>
      
      Вертикальное смещение в пикселях от нижнего края компонента к нижнему краю целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Вертикальное смещение в пикселях от нижнего края компонента к нижнему краю целевого объекта привязки. По умолчанию целевым объектом привязки является область содержимого контейнера. В макетах с расширенными ограничениями, целевой объект может быть строкой ограничений. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате anchorTargetName:value, например, row1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:cachePolicy:get"><apiName>cachePolicy</apiName><shortdesc>
      Определяет политику кэширования растровых изображений для этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>UIComponentCachePolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет политику кэширования растровых изображений для этого объекта. Возможными значениями в MXML являются <codeph>on</codeph>, <codeph>off</codeph> и <codeph>auto</codeph> (по умолчанию).
     
      <p>Возможными значениями в ActionScript являются <codeph>UIComponentCachePolicy.ON</codeph>, <codeph>UIComponentCachePolicy.OFF</codeph> и <codeph>UIComponentCachePolicy.AUTO</codeph> (по умолчанию).</p>
     
      <p><ul>
        <li>Значение <codeph>UIComponentCachePolicy.ON</codeph> означает, что объект всегда кэшируется как растровое изображение.</li>
        <li>Значение <codeph>UIComponentCachePolicy.OFF</codeph> означает, что объект никогда не кэшируется как растровое изображение.</li>
        <li>Значение <codeph>UIComponentCachePolicy.AUTO</codeph> означает, что вопрос о том, должен ли объект кэшироваться как растровое изображение, в инфраструктуре решается эвристическим путем.</li>
      </ul></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:className:get"><apiName>className</apiName><shortdesc>
      Имя класса этого экземпляра, например, Button.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Имя класса этого экземпляра, например, <codeph>Button</codeph>.
     
      <p>Эта строка не включает имя пакета. Если требуется включить также и имя пакета, выполняется вызов метода <codeph>getQualifiedClassName()</codeph> из пакета flash.utils. Этот метод вернет строку, например, <codeph>mx.controls::Button</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc>
      Возвращает координату x положения курсора мыши в текущей системе координат.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Возвращает координату <i>x</i> положения курсора мыши в текущей системе координат. Координаты содержимого указывают позицию пикселя относительно верхнего левого угла содержимого компонента и включают всю область содержимого компонента, включая области, которые в настоящее время отсечены, и доступ к которым возможен при прокрутке компонента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc>
      Возвращает координату y положения курсора мыши в текущей системе координат.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Возвращает координату <i>y</i> положения курсора мыши в текущей системе координат. Координаты содержимого указывают позицию пикселя относительно верхнего левого угла содержимого компонента и включают всю область содержимого компонента, включая области, которые в настоящее время отсечены, и доступ к которым возможен при прокрутке компонента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:currentCSSState:get"><apiName>currentCSSState</apiName><shortdesc>
      Состояние, используемое при сопоставлении псевдоселекторов CSS.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Состояние, используемое при сопоставлении псевдоселекторов CSS. По умолчанию используется currentState.
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:currentState:get"><apiName>currentState</apiName><shortdesc>
      Текущее состояние представления компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Текущее состояние представления компонента. Установить на <codeph>""</codeph> или <codeph>null</codeph> для сброса компонента до базового состояния.
     
      <p>При использовании этого свойства для установки состояния компонента Flex применяет любой определенный переход. Можно также использовать метод <codeph>setCurrentState()</codeph> для установки текущего состояния; этот метод может при необходимости изменять состояния, не применяя переход.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/setCurrentState()"><linktext>setCurrentState()</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:cursorManager:get"><apiName>cursorManager</apiName><shortdesc>
      Получает FocusManager, управляющий курсором для этого компонента и компонентов, находящихся на том же уровне иерархии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="mx.managers:ICursorManager"/></apiValueDef><apiDesc>
      Получает FocusManager, управляющий курсором для этого компонента и компонентов, находящихся на том же уровне иерархии. Каждое окно верхнего уровня имеет собственный экземпляр CursorManager; используйте этот метод для обращения к гарантировано верному экземпляру.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:depth:get"><apiName>depth</apiName><shortdesc>
      
      Определяет порядок отображения элементов внутри контейнеров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      
      Определяет порядок отображения элементов внутри контейнеров. Элементы в Groups упорядочиваются на основании свойства <codeph>depth</codeph>, при этом элементы с самой большой «глубиной» отображаются на заднем плане, а с меньшей – на переднем. Элементы с одинаковой «глубиной» отобразятся в порядке добавления к контейнеру.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:descriptor:get"><apiName>descriptor</apiName><shortdesc>
      Ссылка на UIComponentDescriptor (при его наличии), использованный методом createComponentFromDescriptor() для создания этого экземпляра UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:UIComponentDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      Ссылка на UIComponentDescriptor (при его наличии), использованный методом <codeph>createComponentFromDescriptor()</codeph> для создания этого экземпляра UIComponent. Если этот экземпляр UIComponent не создавался из дескриптора, то значение этого свойства равно null.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:designLayer:get"><apiName>designLayer</apiName><shortdesc conref="mx.core.IVisualElement#designLayer">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.IVisualElement#designLayer">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:document:get"><apiName>document</apiName><shortdesc>
      Ссылка на объект документа, связанный с этим UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ссылка на объект документа, связанный с этим UIComponent. Объект документа представляет собой объект на самом верху иерархии приложения Flex, компонента MXML или компонента AS.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc>
      Определяет, получает ли объект UIComponent события doubleClick.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет, получает ли объект UIComponent события <codeph>doubleClick</codeph>. Значением по умолчанию является <codeph>false</codeph>. Это означает, что объект UIComponent не получает события <codeph>doubleClick</codeph>.
     
      <p>Свойство <codeph>mouseEnabled</codeph> должно быть также установлено на <codeph>true</codeph>. Это значение по умолчанию для объекта, получающего события <codeph>doubleClick</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:enabled:get"><apiName>enabled</apiName><shortdesc conref="mx.core.IUIComponent#enabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.IUIComponent#enabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:errorString:get"><apiName>errorString</apiName><shortdesc>
      Текст, отображаемый рекомендацией ошибки компонента при контроле компонента классом Validator и сбое проверки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Текст, отображаемый рекомендацией ошибки компонента при контроле компонента классом Validator и сбое проверки.
     
      <p>Можно использовать свойство <codeph>errorString</codeph> для определения ошибки при проверке для компонента без фактического использования класса Validator. При записи строкового значения в свойство <codeph>errorString</codeph> Flex выводит красную рамку вокруг компонента для индикации ошибки при проверке, а при наведении курсора мыши на компонент строка появляется во всплывающей подсказке как сообщение об ошибке при проверке, как при обнаружении средством проверки ошибки при проверке.</p>
     
      <p>Для удаления ошибки при проверке запишите пустую строку «» в свойство <codeph>errorString</codeph>.</p>
     
      <p>Обратите внимание, что запись значения в свойство <codeph>errorString</codeph> не запускает событие valid или invalid; изменяется только цвет границы и появляется сообщение об ошибке при проверке.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      Число, указывающее явную высоту компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее явную высоту компонента в пикселях в виде координат компонента.
     
      <p>Это значение используется контейнером при вычислении размера и позиции компонента. Оно не используется самим компонентом при определении его размера по умолчанию. Таким образом, это свойство может не оказывать влияния, если оно является нижестоящим для контейнера или контейнеров, которые не применяют коэффициент в этом свойстве. Поскольку значение находится в координатах компонента, свойство <codeph>scaleY</codeph> влияет на значение true <codeph>explicitHeight</codeph> относительно его вышестоящего элемента.</p>
      <p>При установке свойства <codeph>height</codeph> для этого свойство также устанавливается указанное значение высоты.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      Рекомендованная максимальная высота компонента, принимаемая вышестоящим элементом при создании макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Рекомендованная максимальная высота компонента, принимаемая вышестоящим элементом при создании макета. Это значение представлено в координатах компонента в пикселях.
     
      <p>Как правило, разработчики не устанавливают свойство explicitMaxHeight. Вместо этого они устанавливают значение свойства maxHeight, которое устанавливает свойство explicitMaxHeight. Значение maxHeight не изменяется.</p>
     
      <p>Если в ходе создания макета свойство maxHeight установлено разработчиком приложения явно, используется значение explicitMaxHeight. В противном случае используется значение по умолчанию для maxHeight.</p>
     
      <p>Это значение используется контейнером при вычислении размера и позиции компонента. Оно не используется самим компонентом при определении его размера по умолчанию. Таким образом, это свойство может не оказывать влияния, если оно является нижестоящим для контейнера или контейнеров, которые не применяют коэффициент в этом свойстве. Поскольку значение находится в координатах компонента, свойство <codeph>scaleY</codeph> влияет на значение true <codeph>maxHeight</codeph> относительно его вышестоящего элемента. Некоторые компоненты не имеют теоретической границы по высоте. В таких случаях их значение <codeph>maxHeight</codeph> будет установлено на <codeph>UIComponent.DEFAULT_MAX_HEIGHT</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      Рекомендованная максимальная ширина компонента, принимаемая вышестоящим элементом при создании макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Рекомендованная максимальная ширина компонента, принимаемая вышестоящим элементом при создании макета. Это значение представлено в координатах компонента в пикселях.
     
      <p>Как правило, разработчики приложений не устанавливают свойство explicitMaxWidth. Вместо этого они устанавливают значение свойства maxWidth, которое устанавливает свойство explicitMaxWidth. Значение maxWidth не изменяется.</p>
     
      <p>Если в ходе создания макета свойство maxWidth образом установлено разработчиком приложения явно, используется значение explicitMaxWidth. В противном случае используется значение по умолчанию для maxWidth.</p>
     
      <p>Это значение используется контейнером при вычислении размера и позиции компонента. Оно не используется самим компонентом при определении его размера по умолчанию. Таким образом, это свойство может не оказывать влияния, если оно является нижестоящим для контейнера или контейнеров, которые не применяют коэффициент в этом свойстве. Поскольку значение находится в координатах компонента, свойство <codeph>scaleX</codeph> влияет на значение true <codeph>maxWidth</codeph> относительно его вышестоящего элемента. Некоторые компоненты не имеют теоретической границы по ширине. В таких случаях их значение <codeph>maxWidth</codeph> будет установлено на <codeph>UIComponent.DEFAULT_MAX_WIDTH</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc>
      Рекомендованная минимальная высота компонента, принимаемая вышестоящим элементом при создании макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Рекомендованная минимальная высота компонента, принимаемая вышестоящим элементом при создании макета. Это значение представлено в координатах компонента в пикселях.
     
      <p>Как правило, разработчики приложений не устанавливают свойство explicitMinHeight. Вместо этого они устанавливают значение свойства minHeight, которое устанавливает свойство explicitMinHeight. Значение minHeight не изменяется.</p>
     
      <p>Если в ходе создания макета свойство minHeight установлено разработчиком приложения явно, используется значение explicitMinHeight. В противном случае используется значение по умолчанию measuredMinHeight.</p>
     
      <p>Это значение используется контейнером при вычислении размера и позиции компонента. Оно не используется самим компонентом при определении его размера по умолчанию. Таким образом, это свойство может не оказывать влияния, если оно является нижестоящим для контейнера или контейнеров, которые не применяют коэффициент в этом свойстве. Поскольку значение находится в координатах компонента, свойство <codeph>scaleY</codeph> влияет на значение true <codeph>minHeight</codeph> относительно его вышестоящего элемента.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc>
      Рекомендованная минимальная ширина компонента, принимаемая вышестоящим элементом при создании макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Рекомендованная минимальная ширина компонента, принимаемая вышестоящим элементом при создании макета. Это значение представлено в координатах компонента в пикселях.
     
      <p>Как правило, разработчики приложений не устанавливают свойство explicitMinWidth. Вместо этого они устанавливают значение свойства minWidth, которое устанавливают свойство explicitMinWidth. Значение minWidth не изменяется.</p>
     
      <p>Если в ходе создания макета свойство minWidth установлено разработчиком приложения явно, используется значение explicitMinWidth. В противном случае используется значение measuredMinWidth.</p>
     
      <p>Это значение используется контейнером при вычислении размера и позиции компонента. Оно не используется самим компонентом при определении его размера по умолчанию. Таким образом, это свойство может не оказывать влияния, если оно является нижестоящим для контейнера или контейнеров, которые не применяют коэффициент в этом свойстве. Поскольку значение находится в координатах компонента, свойство <codeph>scaleX</codeph> влияет на значение true <codeph>minWidth</codeph> относительно его вышестоящего элемента.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      Число, указывающее явную ширину компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее явную ширину компонента в пикселях в виде координат компонента.
     
      <p>Это значение используется контейнером при вычислении размера и позиции компонента. Оно не используется самим компонентом при определении его размера по умолчанию. Таким образом, это свойство может не оказывать влияния, если оно является нижестоящим для контейнера или контейнеров, которые не применяют коэффициент в этом свойстве. Поскольку значение находится в координатах компонента, свойство <codeph>scaleX</codeph> влияет на значение true <codeph>explicitWidth</codeph> относительно его вышестоящего элемента.</p>
      <p>При установке свойства <codeph>width</codeph> это свойство также устанавливается на указанное значение.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:flexContextMenu:get"><apiName>flexContextMenu</apiName><shortdesc>
      Контекстное меню для этого UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:IFlexContextMenu</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Контекстное меню для этого UIComponent.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusEnabled:get"><apiName>focusEnabled</apiName><shortdesc>
      Указывает, может ли компонент получить фокус при выборе вкладки с ним.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, может ли компонент получить фокус при выборе вкладки с ним. Можно установить <codeph>focusEnabled</codeph> на <codeph>false</codeph>, если UIComponent используется в качестве подчиненного компонента для другого компонента так, чтобы внешний компонент стал сущностью, которая может получить фокус. Если это свойство имеет значение <codeph>false</codeph>, фокус будет передан в первый вышестоящий элемент, в котором <codeph>focusEnable</codeph> установлено на <codeph>true</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusManager:get"><apiName>focusManager</apiName><shortdesc>
      Получает FocusManager, управляющий фокусом для этого компонента и компонентов, находящихся на том же уровне иерархии.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc>
      Получает FocusManager, управляющий фокусом для этого компонента и компонентов, находящихся на том же уровне иерархии. Каждый всплывающий элемент имеет собственный цикл фокуса и, соответственно, собственный экземпляр FocusManager. С помощью этого метода можно удостовериться, что выполняется обращение к верному экземпляру.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      Область фокусировки, связанная с этим объектом</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      Область фокусировки, связанная с этим объектом Объект имеет область фокусировки, если один из его нижестоящих элементов имеет фокус.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:hasComplexLayoutMatrix:get"><apiName>hasComplexLayoutMatrix</apiName><shortdesc>
      Возвращает значение true, если UIComponent имеет какое-либо свойство transform, отличное от перемещения (x, y)
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Возвращает значение true, если UIComponent имеет какое-либо свойство transform, отличное от перемещения (x, y)
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:hasFocusableChildren:get"><apiName>hasFocusableChildren</apiName><shortdesc>
      Флаг, который указывает, могут ли нижестоящие объекты получить фокус. Это аналогично свойству tabChildren, используемому в Flash Player. Обычно это значение – false, потому что большинство компонентов получает фокус непосредственно на себя или делегирует фокус на отдельный внутренний подчиненный компонент и отображаются так, как будто фокус наведен на этот компонент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Флаг, который указывает, могут ли нижестоящие объекты получить фокус
     
      <p>Это аналогично свойству <codeph>tabChildren</codeph>, используемому в Flash Player.</p>
     
      <p>Обычно это значение – <codeph>false</codeph>, потому что большинство компонентов получает фокус непосредственно на себя или делегирует фокус на отдельный внутренний подчиненный компонент и отображаются так, как будто фокус наведен на этот компонент. Например, TextInput содержит фокусируемый нижестоящий элемент управления RichEditableText, но когда на подчиненный компонент RichEditableText фактически наводится фокус, он отображается так, как будто фокус наведен на TextInput. TextInput устанавливает <codeph>hasFocusableChildren</codeph> на значение <codeph>false</codeph>, потому что TextInput считается компонентом, у которого есть фокус. Его внутренняя структура – абстракция.</p>
     
      <p>Обычно только компоненты навигатора, например, TabNavigator и Accordion, имеют этот флаг со значением <codeph>true</codeph>, потому что они получают фокус при нажатии на клавишу Tab. Фокус переходит на компоненты в нижестоящих контейнерах при дальнейших нажатиях на клавишу Tab.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:hasLayoutMatrix3D:get"><apiName>hasLayoutMatrix3D</apiName><shortdesc>
      
      True, если элемент имеет трехмерную матрицу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      True, если элемент имеет трехмерную матрицу. Используйте <codeph>hasLayoutMatrix3D</codeph> вместо вызова и исследования значения <codeph>getLayoutMatrix3D()</codeph>, так как этот метод возвращает действительную матрицу, даже если элемент используется в двухмерной графике.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:height:get"><apiName>height</apiName><shortdesc>
      Число, указывающее высоту компонента в координатах вышестоящего контейнера в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее высоту компонента в координатах вышестоящего контейнера в пикселях. По умолчанию используется значение 0, однако это свойство будет содержать фактическую высоту компонента после того, как Flex завершит установку размеров компонентов в приложении.
     
      <p>Примечание. Можно указать процентное значение в атрибуте MXML <codeph>height</codeph>, например, <codeph>height=100%</codeph>, но нельзя использовать процентное значение в свойстве <codeph>height</codeph> в ActionScript. Вместо этого используйте свойство <codeph>percentHeight</codeph>.</p>
     
      <p>Настройка этого свойства приводит к отправке события <codeph>resize</codeph>. Для получения дополнительной информации о моменте отправки этого события см. событие <codeph>resize</codeph>. Если свойство компонента <codeph>scaleY</codeph> имеет значение не равное 100, то высота компонента относительно внутренних координат будет отличаться. Так, компонент с шириной 100 пикселей и значением <codeph>scaleY</codeph> равным 200 составит 100 пикселей в вышестоящем узле, но для внутреннего использования высота будет приравнена к 50 пикселям.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:horizontalCenter:get"><apiName>horizontalCenter</apiName><shortdesc>
      
      Горизонтальное смещение в пикселях от центра компонента к центру области содержимого целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Горизонтальное смещение в пикселях от центра компонента к центру области содержимого целевого объекта привязки. Целевым объектом привязки по умолчанию является сам контейнер. В макетах с расширенными ограничениями целевым объектом привязки может быть столбец ограничения. В этом случае областью содержимого является пространство между предыдущим столбцом (или стороной контейнера) и целевым столбцом. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для указания целевого объекта привязки установите в качестве значения свойства строку в формате constraintColumnId:value, например, col1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:id:get"><apiName>id</apiName><shortdesc>
      Идентификатор компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Идентификатор компонента. Это значение становится именем экземпляра объекта и не должно содержать символов пробела или специальных символов. Каждый компонент во всем приложении должен иметь уникальный идентификатор.
     
      <p>Если приложение будет тестироваться инструментальными средствами третьей стороны, каждому компоненту необходимо присвоить значимый идентификатор. Инструменты тестирования используют идентификаторы для представления элементов управления в своих сценариях, и значимое имя поможет сценариям стать более удобочитаемыми. Например, установите для кнопки значение submit_button, а не b1 или button1.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc>
      Указывает, включается ли этот компонент в макет вышестоящего контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает, включается ли этот компонент в макет вышестоящего контейнера. Если значение <codeph>true</codeph>, объект включается в макет соответствующего вышестоящего контейнера, и его размер и расположение определяются вышестоящим контейнером в соответствии с правилами его макета. Если значение <codeph>false</codeph>, размер и расположение объекта не зависят от макета соответствующего вышестоящего контейнера.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      Начало этой цепочки компонентов с ненаследуемыми стилями.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Начало этой цепочки компонентов с ненаследуемыми стилями. Метод <codeph>getStyle()</codeph> имеет доступ к <codeph>inheritingStyles[styleName]</codeph> для поиска всей связанной с прототипом цепочки. Этот объект настраивается <codeph>initProtoChain()</codeph>. Как правило, разработчикам не требуется вызывать это свойство напрямую.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:initialized:get"><apiName>initialized</apiName><shortdesc>
      Флаг, определяющий, прошел ли объект все три фазы создания макета: обязательство, измерение и создание макета (при условии, что все они требовались).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, определяющий, прошел ли объект все три фазы создания макета: обязательство, измерение и создание макета (при условии, что все они требовались).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:instanceIndex:get"><apiName>instanceIndex</apiName><shortdesc>
      Индекс повторяемого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Индекс повторяемого компонента. Если компонент отсутствует в Repeater, значение равно -1.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      Массив, содержащий индексы, требуемые для создания ссылки на этот UIComponent из собственного документа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив, содержащий индексы, требуемые для создания ссылки на этот UIComponent из собственного документа. Массив является пустым, пока этот объект UIComponent находится внутри одного или нескольких Repeater. Первый элемент соответствует самому крайнему Repeater. Например, если id является b, а instanceIndices является [2,4], ссылкой в вышестоящем документе будет b[2][4].
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:is3D:get"><apiName>is3D</apiName><shortdesc>
      
      True, если элемент является представлен в трехмерной графике.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      True, если элемент является представлен в трехмерной графике. 
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:isDocument:get"><apiName>isDocument</apiName><shortdesc>
      Определяет, является ли этот экземпляр UIComponent объектом документа, то есть расположен ли он в верхней части иерархии приложения Flex, компонента MXML или компонента ActionScript.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Определяет, является ли этот экземпляр UIComponent объектом документа, то есть расположен ли он в верхней части иерархии приложения Flex, компонента MXML или компонента ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:isPopUp:get"><apiName>isPopUp</apiName><shortdesc>
      Установите значение true в PopUpManager для указания того, что компонент имеет всплывающую подсказку.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Установите значение <codeph>true</codeph> в PopUpManager для указания того, что компонент имеет всплывающую подсказку.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:left:get"><apiName>left</apiName><shortdesc>
      
      Горизонтальное смещение в пикселях от левого края компонента к левому краю целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Горизонтальное смещение в пикселях от левого края компонента к левому краю целевого объекта привязки. По умолчанию целевым объектом привязки является область содержимого контейнера. В макетах с расширенными ограничениями целевым объектом может быть столбец ограничений. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате anchorTargetName:value, например, col1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:maxHeight:get"><apiName>maxHeight</apiName><shortdesc>
      Рекомендованная максимальная высота компонента, принимаемая вышестоящим элементом при создании макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Рекомендованная максимальная высота компонента, принимаемая вышестоящим элементом при создании макета. Это значение представлено в координатах компонента в пикселях. Для этого свойства разработчиком компонента установлено значение по умолчанию.
     
      <p>Разработчик компонента использует это свойство для установки верхней границы для высоты компонента.</p>
     
      <p>Если разработчик приложения изменяет значение по умолчанию maxHeight, новое значение сохраняется в explicitMaxHeight. Значение maxHeight по умолчанию не изменяется. В итоге, если в ходе создания макета свойство maxHeight установлено разработчиком приложения явно, значение explicitMaxHeight используется как рекомендованное для компонента максимальное значение высоты. Если maxHeight не установлено пользователем явно, используется значение по умолчанию.</p>
     
      <p>Это значение используется контейнером при вычислении размера и позиции компонента. Оно не используется самим компонентом при определении его размера по умолчанию. Таким образом, это свойство может не оказывать влияния, если оно является нижестоящим для контейнера или контейнеров, которые не применяют коэффициент в этом свойстве. Поскольку значение находится в координатах компонента, свойство <codeph>scaleY</codeph> влияет на значение true <codeph>maxHeight</codeph> относительно его вышестоящего элемента. Некоторые компоненты не имеют теоретической границы по высоте. В таких случаях их значение <codeph>maxHeight</codeph> будет установлено на <codeph>UIComponent.DEFAULT_MAX_HEIGHT</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:maxWidth:get"><apiName>maxWidth</apiName><shortdesc>
      Рекомендованная максимальная ширина компонента, принимаемая вышестоящим элементом при создании макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10000
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Рекомендованная максимальная ширина компонента, принимаемая вышестоящим элементом при создании макета. Это значение представлено в координатах компонента в пикселях. Для этого свойства разработчиком компонента установлено значение по умолчанию.
     
      <p>Разработчик компонента использует это свойство для установки верхней границы для ширины компонента.</p>
     
      <p>Если разработчик приложения изменяет значение по умолчанию maxWidth, новое значение сохранятся в explicitMaxWidth. Значение maxWidth по умолчанию не изменяется. В итоге, если в ходе создания макета свойство maxWidth установлено разработчиком приложения явно, значение explicitMaxWidth используется как рекомендованное для компонента максимальное значение ширины. Если maxWidth не установлено пользователем явно, используется значение по умолчанию.</p>
     
      <p>Это значение используется контейнером при вычислении размера и позиции компонента. Оно не используется самим компонентом при определении его размера по умолчанию. Таким образом, это свойство может не оказывать влияния, если оно является нижестоящим для контейнера или контейнеров, которые не применяют коэффициент в этом свойстве. Поскольку значение находится в координатах компонента, свойство <codeph>scaleX</codeph> влияет на значение true <codeph>maxWidth</codeph> относительно его вышестоящего элемента. Некоторые компоненты не имеют теоретической границы по ширине. В таких случаях их значение <codeph>maxWidth</codeph> будет установлено на <codeph>UIComponent.DEFAULT_MAX_WIDTH</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      Высота компонента в пикселях по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Высота компонента в пикселях по умолчанию. Это значение устанавливается посредством метода <codeph>measure()</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc>
      Минимальная высота компонента по умолчанию в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Минимальная высота компонента по умолчанию в пикселях. Это значение устанавливается посредством метода <codeph>measure()</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc>
      Минимальная ширина компонента по умолчанию в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Минимальная ширина компонента по умолчанию в пикселях. Это значение устанавливается посредством метода <codeph>measure()</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      Ширина компонента в пикселях по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Ширина компонента в пикселях по умолчанию. Это значение устанавливается посредством метода <codeph>measure()</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:minHeight:get"><apiName>minHeight</apiName><shortdesc>
      Рекомендованная минимальная высота компонента, принимаемая вышестоящим элементом при создании макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Рекомендованная минимальная высота компонента, принимаемая вышестоящим элементом при создании макета. Это значение представлено в координатах компонента в пикселях. Значение по умолчанию зависит от реализации компонента.
     
      <p>Если разработчик приложения устанавливает значение minHeight, новое значение сохраняется в explicitMinHeight. Значение по умолчанию minHeight не изменяется. В итоге, если в ходе создания макета свойство minHeight явным образом установлено разработчиком приложения, значение explicitMinHeight используется как рекомендованное для компонента минимальное значение высоты. Если свойство minHeight не установлено разработчиком приложения явно, используется значение measuredMinHeight.</p>
     
      <p>Это значение используется контейнером при вычислении размера и позиции компонента. Оно не используется самим компонентом при определении его размера по умолчанию. Таким образом, это свойство может не оказывать влияния, если оно является нижестоящим для контейнера или контейнеров, которые не применяют коэффициент в этом свойстве. Поскольку значение находится в координатах компонента, свойство <codeph>scaleY</codeph> влияет на значение true <codeph>minHeight</codeph> относительно его вышестоящего элемента.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:minWidth:get"><apiName>minWidth</apiName><shortdesc>
      Рекомендованная минимальная ширина компонента, принимаемая вышестоящим элементом при создании макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Рекомендованная минимальная ширина компонента, принимаемая вышестоящим элементом при создании макета. Это значение представлено в координатах компонента в пикселях. Значение по умолчанию зависит от реализации компонента.
     
      <p>Если разработчик приложения устанавливает значение minWidth, новое значение сохраняется в explicitMinWidth. Значение по умолчанию minWidth не изменяется. В итоге, если в ходе создания макета свойство minWidth явным образом установлено разработчиком приложения, значение explicitMinWidth используется как рекомендованное для компонента минимальное значение ширины. Если в ходе создания макета свойство minWidth не установлено разработчиком приложения явно, используется значение measuredMinWidth.</p>
     
      <p>Это значение используется контейнером при вычислении размера и позиции компонента. Оно не используется самим компонентом при определении его размера по умолчанию. Таким образом, это свойство может не оказывать влияния, если оно является нижестоящим для контейнера или контейнеров, которые не применяют коэффициент в этом свойстве. Поскольку значение находится в координатах компонента, свойство <codeph>scaleX</codeph> влияет на значение true <codeph>minWidth</codeph> относительно его вышестоящего элемента.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Фабрика модулей применяется в качестве контекста для использования встроенных шрифтов и для поиска менеджера стиля, который управляет стилями этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Фабрика модулей применяется в качестве контекста для использования встроенных шрифтов и для поиска менеджера стиля, который управляет стилями этого компонента. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:mouseFocusEnabled:get"><apiName>mouseFocusEnabled</apiName><shortdesc>
      Можно ли получить фокус при нажатии элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Можно ли получить фокус при нажатии элемента. Если значение <codeph>false</codeph>, то фокус получит первый вышестоящий элемент, <codeph>mouseFocusEnabled</codeph>, установленный на значение <codeph>true</codeph>. Например, можно установить это свойство на <codeph>false</codeph> для элемента управления Button так, чтобы можно было использовать клавишу Tab для перемещения фокуса управления на элемент управления, но чтобы элемент управления не получил фокус при нажатии на него.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:nestLevel:get"><apiName>nestLevel</apiName><shortdesc>
      Глубина этого объекта в иерархии включения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Глубина этого объекта в иерархии включения. Это число используется кодом макета и измерения. Значение – 0, если этот компонент не находится в DisplayList.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      Начало цепочки этого компонента с ненаследуемыми стилями.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Начало цепочки этого компонента с ненаследуемыми стилями. Метод <codeph>getStyle()</codeph> имеет доступ к <codeph>nonInheritingStyles[styleName]</codeph> для поиска всей связанной с прототипом цепочки. Этот объект настраивается <codeph>initProtoChain()</codeph>. Как правило, разработчикам не требуется вызывать это свойство напрямую.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:numAutomationChildren:get"><apiName>numAutomationChildren</apiName><shortdesc>
      
      Число нижестоящих элементов автоматизации, содержащихся в этом контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Число нижестоящих элементов автоматизации, содержащихся в этом контейнере. Эта сумма не должна включать составных нижестоящих элементов, несмотря на то, что включает нижестоящие элементы, незначительные в рамках иерархии автоматизации.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:owner:get"><apiName>owner</apiName><shortdesc conref="mx.core.IVisualElement#owner">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#owner">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parent:get"><apiName>parent</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parentApplication:get"><apiName>parentApplication</apiName><shortdesc>
      Ссылка на объект приложения, содержащего этот экземпляр UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ссылка на объект приложения, содержащего этот экземпляр UIComponent. Этот объект приложения мог бы существовать в элементе управления SWFLoader в другом приложении и т.д. и создавать цепочку объектов приложения, которые можно просмотреть с помощью parentApplication. Свойство <codeph>parentApplication</codeph> приложения никогда не существует отдельно; либо оно загружено в приложение, либо имеет значение null (для приложения верхнего уровня). Просмотр цепочки приложения с помощью <codeph>parentApplication</codeph> аналогичен просмотру цепочки документа с помощью свойства <codeph>parentDocument</codeph>. Можно получить доступ к приложению верхнего уровня с помощью свойства <codeph>application</codeph> класса Application.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:parentDocument:get"><apiName>parentDocument</apiName><shortdesc>
      Ссылка на вышестоящий объект документа для этого UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ссылка на вышестоящий объект документа для этого UIComponent. Объект документа является UIComponent в верхней части иерархии приложения Flex, компонента MXML или компонента ActionScript. Для объекта приложения свойство <codeph>parentDocument</codeph> имеет значение null. Это свойство рекомендуется в сценариях MXML для перехода на уровень выше в цепочке объектов документа. Оно может использоваться для просмотра цепочки <codeph>parentDocument.parentDocument</codeph> и т.д. Свойство введено в качестве объекта так, что авторы могут получить доступ к свойствам и методам в объектах документа предшествующего элемента без преобразования.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      Число, указывающее высоту компонента в виде процента от размера вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее высоту компонента в виде процента от размера вышестоящего элемента. Допустимые значения: 0 – 100 По умолчанию используется значение NaN. Определение свойства <codeph>height</codeph> или <codeph>explicitHeight</codeph> приводит к установке для этого свойства значения NaN.
     
      <p>Это свойство возвращает числовое значение только в том случае, если свойство было задано предварительно; однако оно не отражает точный размер компонента в процентах.</p>
     
      <p>Это свойство для элемента управления UITextField всегда устанавливается на NaN.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      Число, указывающее ширину компонента в процентах от размера его вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее ширину компонента в процентах от размера его вышестоящего элемента. Допустимые значения: 0 – 100 По умолчанию используется значение NaN. Задание свойств <codeph>width</codeph> или <codeph>explicitWidth</codeph> приводит к сбросу значения этого свойства в значение NaN.
     
      <p>Это свойство возвращает числовое значение только в том случае, если свойство было задано предварительно; однако оно не отражает точный размер компонента в процентах.</p>
     
      <p>Это свойство для элемента управления UITextField всегда устанавливается на NaN.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:postLayoutTransformOffsets:get"><apiName>postLayoutTransformOffsets</apiName><shortdesc conref="mx.core.ILayoutElement#postLayoutTransformOffsets">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.geom:TransformOffsets</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.ILayoutElement#postLayoutTransformOffsets">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc>
      Установлено на true после немедленного или отложенного создания нижестоящих элементов в зависимости от выполняемого действия.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Установлено на <codeph>true</codeph> после немедленного или отложенного создания нижестоящих элементов в зависимости от выполняемого действия. Для контейнерного объекта значение устанавливается на <codeph>true</codeph> в конце метода <codeph>createComponentsFromDescriptors()</codeph>, что предполагает, что контейнерный объект создает нижестоящие записи из собственных нижестоящих дескрипторов.
     
      <p>Например, если контейнер Accordion использует отложенную реализацию, свойство <codeph>processedDescriptors</codeph> для второй панели контейнера Accordion не приобретает значение <codeph>true</codeph> до перехода пользователя к этой панели и создания нижестоящих элементов самой панелью. Однако если контейнером Accordion установлено свойство <codeph>creationPolicy</codeph> на <codeph>all</codeph>, свойство <codeph>processedDescriptors</codeph> для второй панели устанавливается на <codeph>true</codeph> в течение запуска приложения.</p>
     
      <p>Для классов, которые не являются контейнерами, не имеющими дескрипторы, свойство устанавливается на <codeph>true</codeph> после того, как метод <codeph>createChildren()</codeph> создаст любые внутренние нижестоящие элементы компонента.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeater:get"><apiName>repeater</apiName><shortdesc>
      Ссылка на объект Repeater в вышестоящем документе, создающем этот UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IRepeater</apiValueClassifier></apiValueDef><apiDesc>
      Ссылка на объект Repeater в вышестоящем документе, создающем этот UIComponent. Используйте это свойство, а не свойство <codeph>repeaters</codeph> при создании UIComponent одним объектом Repeater. Используйте свойство <codeph>repeaters</codeph> при создании этого UIComponent вложенными объектами Repeater.
     
      <p>Свойство устанавливается на <codeph>null</codeph>, если этот UIComponent не создан Repeater.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaterIndex:get"><apiName>repeaterIndex</apiName><shortdesc>
      Индекс элемента в поставщике данных Repeater, создавшего этот UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Индекс элемента в поставщике данных Repeater, создавшего этот UIComponent. Используйте это свойство, а не свойство <codeph>repeaterIndices</codeph>, если UIComponent создан одним объектом Repeater. Используйте свойство <codeph>repeaterIndices</codeph>, если этот UIComponent создан вложенными объектами Repeater.
     
      <p>Это свойство устанавливается на -1, если этот UIComponent не создан Repeater.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      Массив, содержащий индексы элементов в поставщике данных Repeater в вышестоящем документе, создавшем этот UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив, содержащий индексы элементов в поставщике данных Repeater в вышестоящем документе, создавшем этот UIComponent. Массив является пустым, пока этот UIComponent находится внутри одного или нескольких Repeater.
     
      <p>Первый элемент в массиве соответствует самому крайнему Repeater. Например, если значением <codeph>repeaterIndices</codeph> является [2,4], это означает, что внешним повторителем использован элемент <codeph>dataProvider[2]</codeph>, а внутренним повторителем использован элемент <codeph>dataProvider[4]</codeph>.</p>
     
      <p>Следует отметить, что эти свойства отличаются от свойства <codeph>instanceIndices</codeph>, если значение свойства <codeph>startingIndex</codeph> любого из Repeater не равно нулю. Например, даже если Repeater запускается в <codeph>dataProvider [4]</codeph>, ссылка на документ для первого повторяемого объекта является b [0], не b [4].</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      Массив, содержащий ссылки на объекты Repeater в вышестоящем документе, создавшем этот UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив, содержащий ссылки на объекты Repeater в вышестоящем документе, создавшем этот UIComponent. Массив является пустым, пока этот UIComponent находится внутри одного или нескольких Repeater. Первый элемент соответствует самому крайнему объекту Repeater.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:resourceManager:get"><apiName>resourceManager</apiName><shortdesc>
      Ссылка на объект, управляющий всеми локализованными ресурсами приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.resources:IResourceManager</apiValueClassifier></apiValueDef><apiDesc>
      Ссылка на объект, управляющий всеми локализованными ресурсами приложения. Это одиночный экземпляр единичного предмета, реализующий интерфейс IResourceManager.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:right:get"><apiName>right</apiName><shortdesc>
      
      Горизонтальное смещение в пикселях от правого края компонента к правому краю целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Горизонтальное смещение в пикселях от правого края компонента к правому краю целевого объекта привязки. По умолчанию целевым объектом привязки является область содержимого контейнера. В макетах с расширенными ограничениями целевым объектом может быть столбец ограничений. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате anchorTargetName:value, например, col1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotation:get"><apiName>rotation</apiName><shortdesc>
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationX:get"><apiName>rotationX</apiName><shortdesc>
     Обозначает поворот в градусах по оси x экземпляра DisplayObject относительно исходной ориентации по трехмерному вышестоящему контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Обозначает поворот в градусах по оси x экземпляра DisplayObject относительно исходной ориентации по трехмерному вышестоящему контейнеру. Значения от 0 до 180 задают поворот по часовой стрелке. Значения от 0 до -180 задают поворот против часовой стрелки. Значения за пределами этого диапазона добавляются или вычитаются из 360 для получения допустимого значения. Это свойство игнорируется при вычислении любого из двумерных макетов Flex. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationY:get"><apiName>rotationY</apiName><shortdesc>
     Обозначает угол поворота в градусах по оси у экземпляра DisplayObject относительно исходной ориентации по трехмерному родительскому контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
     Обозначает поворот в градусах по оси у экземпляра DisplayObject от исходной ориентации относительно трехмерного вышестоящего контейнера. Значения от 0 до 180 задают поворот по часовой стрелке. Значения от 0 до -180 задают поворот против часовой стрелки. Значения за пределами этого диапазона добавляются или вычитаются из 360 для получения допустимого значения. Это свойство игнорируется при вычислении любого из двумерных макетов Flex. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:rotationZ:get"><apiName>rotationZ</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleX:get"><apiName>scaleX</apiName><shortdesc>
      Число, определяющее коэффициент горизонтального масштабирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, определяющее коэффициент горизонтального масштабирования.
     
      <p>Значением по умолчанию является 1,0. Это значит, что объект не масштабируется. Значение 2,0 для <codeph>scaleX</codeph> означает, что объект был увеличен с коэффициентом 2, а значение 0,5 для <codeph>scaleX</codeph> означает, что объект был уменьшен с коэффициентом 2.</p>
     
      <p>Значение 0,0 является недопустимым значением. Вместо установки для этого значения 0,0 установите маленькое значение или установите для свойства <codeph>visible</codeph> значение <codeph>false</codeph> для скрытия компонента.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleY:get"><apiName>scaleY</apiName><shortdesc>
      Число, определяющее коэффициент вертикального масштабирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, определяющее коэффициент вертикального масштабирования.
     
      <p>Значением по умолчанию является 1,0. Это значит, что объект не масштабируется. Значение 2,0 для <codeph>scaleY</codeph> означает, что объект был увеличен с коэффициентом 2, а значение 0,5 для <codeph>scaleY</codeph> означает, что объект был уменьшен с коэффициентом 2.</p>
     
      <p>Значение 0,0 является недопустимым значением. Вместо установки для этого значения 0,0 установите маленькое значение или установите для свойства <codeph>visible</codeph> значение <codeph>false</codeph> для скрытия компонента.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:scaleZ:get"><apiName>scaleZ</apiName><shortdesc>
      Число, определяющее коэффициент масштабирования по оси Z.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1.0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, определяющее коэффициент масштабирования по оси Z.
     
      <p>Масштабирование по оси Z не повлияет на обычный компонент, который находится в плоскости z=0. изменятся компоненты с нижестоящими элементами, к которым применяются трехмерные преобразования, или компоненты с transformZ, отличным от нуля.</p>
      
      <p>Значением по умолчанию является 1,0. Это значит, что объект не масштабируется.</p>
     
      <p>Это свойство игнорируется при вычислении любого из двумерных макетов Flex. </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:screen:get"><apiName>screen</apiName><shortdesc>
      Возвращает объект, который содержит размер и позицию основной поверхности изображения для этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
      Возвращает объект, который содержит размер и позицию основной поверхности изображения для этого объекта.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:showInAutomationHierarchy:get"><apiName>showInAutomationHierarchy</apiName><shortdesc>
       
      Флажок, задающий отображение объекта автоматизации в иерархии автоматизации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
       
      Флажок, задающий отображение объекта автоматизации в иерархии автоматизации. Нижестоящие элементы невидимых в иерархии контейнеров отображаются в качестве нижестоящих элементов следующего вышестоящего элемента. Обычно используемые для макета контейнеры, например, поля и Canvas, не отображаются в иерархии.
     
      <p>Некоторые элементы управления при необходимости вызывают принудительное отображение нижестоящих элементов в иерархии. Например, для List в иерархии всегда будут принудительно отображаться средства визуализации элементов, в т.ч. поля. При реализации должно поддерживаться значение <codeph>true</codeph> этого свойства.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:states:get"><apiName>states</apiName><shortdesc>
      Состояния представления, представленные для этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Состояния представления, представленные для этого компонента. Можно указать свойство <codeph>states</codeph> только в корневом элементе приложения или в корневом теге компонента MXML. Компилятор создает ошибку при указании его в любом другом элементе управления.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleDeclaration:get"><apiName>styleDeclaration</apiName><shortdesc>
      Обеспечивает хранение встроенных наследуемых стилей этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.styles:CSSStyleDeclaration</apiValueClassifier></apiValueDef><apiDesc>
      Обеспечивает хранение встроенных наследуемых стилей этого объекта. Этот элемент CSSStyleDeclaration впервые создается при вызове метода <codeph>setStyle()</codeph> для этого компонента в целях установки наследуемого стиля. Как правило, разработчикам не требуется вызывать это свойство напрямую.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleName:get"><apiName>styleName</apiName><shortdesc>
      Стиль класса, используемый этим компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Стиль класса, используемый этим компонентом. Он может быть строкой, CSSStyleDeclaration или IStyleClient.
     
      <p>Если это строка, то это имя одного или нескольких объявлений класса, разделенных пробелами в теге <codeph>mx:Style</codeph> или файле CSS. Добавление точки в <codeph>styleName</codeph>не требуется. Например, если существует стиль класса с именем <codeph>.bigText</codeph>, установите свойство <codeph>styleName</codeph> на <codeph>bigText</codeph> (без точки).</p>
     
      <p>Если это IStyleClient (как правило, UIComponent), все стили в объекте <codeph>styleName</codeph> используется этим компонентом.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:styleParent:get"><apiName>styleParent</apiName><shortdesc>
      Вышестоящий узел компонента используется для анализа нижестоящих селекторов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.styles:IAdvancedStyleClient</apiValueClassifier></apiValueDef><apiDesc>
      Вышестоящий узел компонента используется для анализа нижестоящих селекторов. Вышестоящий узел должен также быть IAdvancedStyleClient для участия в расширенных объявлениях стиля.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:systemManager:get"><apiName>systemManager</apiName><shortdesc>
      Возвращает объект SystemManager, используемый этим компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      Возвращает объект SystemManager, используемый этим компонентом.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:tabFocusEnabled:get"><apiName>tabFocusEnabled</apiName><shortdesc>
      Флаг, который указывает, может ли этот объект получить фокус при использовании клавиши TAB. Это аналогично свойству tabEnabled, используемому в Flash Player. Обычно это значение – true для компонентов обработки ввода с клавиатуры, но некоторые компоненты панелей управления установлены на значение false, потому что они не должны забирать на себя фокус другого компонента, например, редактора.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Флаг, который указывает, может ли объект получить фокус при применении клавиши TAB
     
      <p>Это аналогично свойству <codeph>tabEnabled</codeph>, используемому в Flash Player.</p>
     
      <p>Обычно это значение – <codeph>true</codeph> для компонентов обработки ввода с клавиатуры, но некоторые компоненты панелей управления установлены на значение <codeph>false</codeph>, потому что они не должны забирать на себя фокус другого компонента, например, редактора.
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:toolTip:get"><apiName>toolTip</apiName><shortdesc>
      Текст, отображаемый в ToolTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Текст, отображаемый в ToolTip.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:top:get"><apiName>top</apiName><shortdesc>
      
      Вертикальное смещение в пикселях от верхнего края компонента к верхнему краю целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Вертикальное смещение в пикселях от верхнего края компонента к верхнему краю целевого объекта привязки. По умолчанию целевым объектом привязки является область содержимого контейнера. В макетах с расширенными ограничениями, целевой объект может быть строкой ограничений. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате anchorTargetName:value, например, row1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:transformX:get"><apiName>transformX</apiName><shortdesc>
      Устанавливает координату x для центра преобразования компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Устанавливает координату x для центра преобразования компонента.
     
      <p>Если этот компонент является целевым объектом эффекта преобразования Spark, можно переопределить это свойство путем установки свойства <codeph>AnimateTransform.autoCenterTransform</codeph>. Если <codeph>autoCenterTransform</codeph> имеет значение <codeph>false</codeph>, центр преобразования определяется свойствами <codeph>transformX</codeph>, <codeph>transformY</codeph> и <codeph>transformZ</codeph> целевого объекта эффекта. Если <codeph>autoCenterTransform</codeph> имеет значение <codeph>true</codeph>, эффект выполняется относительно центра целевого объекта <codeph>(width/2, height/2)</codeph>.</p>
     
      <p>Установка этого свойства для класса эффекта Spark переопределяет установку для целевого компонента.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformX"><linktext>spark.effects.AnimateTransform.transformX</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transformY:get"><apiName>transformY</apiName><shortdesc>
      Устанавливает координату y для центра преобразования компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Устанавливает координату y для центра преобразования компонента.
     
      <p>Если этот компонент является целевым объектом эффекта преобразования Spark, можно переопределить это свойство путем установки свойства <codeph>AnimateTransform.autoCenterTransform</codeph>. Если <codeph>autoCenterTransform</codeph> имеет значение <codeph>false</codeph>, центр преобразования определяется свойствами <codeph>transformX</codeph>, <codeph>transformY</codeph> и <codeph>transformZ</codeph> целевого объекта эффекта. Если <codeph>autoCenterTransform</codeph> имеет значение <codeph>true</codeph>, эффект выполняется относительно центра целевого объекта <codeph>(width/2, height/2)</codeph>.</p>
     
      <p>Установка этого свойства для класса эффекта Spark переопределяет установку для целевого компонента.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformY"><linktext>spark.effects.AnimateTransform.transformY</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transformZ:get"><apiName>transformZ</apiName><shortdesc>
      Устанавливает координату z для центра преобразования компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Устанавливает координату z для центра преобразования компонента.
     
      <p>Если этот компонент является целевым объектом эффекта преобразования Spark, можно переопределить это свойство путем установки свойства <codeph>AnimateTransform.autoCenterTransform</codeph>. Если <codeph>autoCenterTransform</codeph> имеет значение <codeph>false</codeph>, центр преобразования определяется свойствами <codeph>transformX</codeph>, <codeph>transformY</codeph> и <codeph>transformZ</codeph> целевого объекта эффекта. Если <codeph>autoCenterTransform</codeph> имеет значение <codeph>true</codeph>, эффект выполняется относительно центра целевого объекта <codeph>(width/2, height/2)</codeph>.</p>
     
      <p>Установка этого свойства для класса эффекта Spark переопределяет установку для целевого компонента.</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="spark.effects.xml#AnimateTransform/autoCenterTransform"><linktext>spark.effects.AnimateTransform.autoCenterTransform</linktext></link><link href="" invalidHref="spark.effects.xml#AnimateTransform/transformZ"><linktext>spark.effects.AnimateTransform.transformZ</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:transitions:get"><apiName>transitions</apiName><shortdesc>
      Массив объектов перехода, где каждый объект перехода определяет ряд эффектов для установки эффектов, воспроизводимых при изменении состояния.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив объектов перехода, где каждый объект перехода определяет ряд эффектов для установки эффектов, воспроизводимых при изменении состояния.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.states.xml#Transition"><linktext>mx.states.Transition</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc>
      Массив свойств, анимация которых выполняется в данный момент на этом объекте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив свойств, анимация которых выполняется в данный момент на этом объекте.
     
      <p>Используется для информирования EffectManager о том, что выполняется анимация определенных свойств этого объекта, так что не требуется анимация тех же свойств посредством EffectManаger.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:uid:get"><apiName>uid</apiName><shortdesc>
      Уникальный идентификатор для объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Уникальный идентификатор для объекта. Зависящие от данных элементы управления Flex, включая все элементы управления, являющиеся подклассами класса списка, используют уникальный идентификатор для отслеживания элементов поставщика данных.
     
      <p>Flex может выполнять автоматическое создание и управление уникальными идентификаторами. Однако есть обстоятельства, когда требуется предоставить собственное свойство <codeph>uid</codeph> путем реализации интерфейса для идентификатора уникального элемента (Item Unique Identification, IUID) или когда обеспечение собственного свойства <codeph>uid</codeph> повышает эффективность обработки. В большинстве случаев при использовании Flex UID не должны быть универсальными уникальными идентификаторами. Исключение существует для сообщений, передаваемых службами данных.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IUID"><linktext>IUID</linktext></link><link href="mx.utils.xml#UIDUtil"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:protected:unscaledHeight:get"><apiName>unscaledHeight</apiName><shortdesc>
      Удобный метод для определения немасштабируемой высоты компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Удобный метод для определения немасштабируемой высоты компонента. Все отображения компонента и нижестоящего макета должны создаваться внутри ограничительного прямоугольника этой высоты, которая также передается в качестве аргумента для <codeph>updateDisplayList()</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:protected:unscaledWidth:get"><apiName>unscaledWidth</apiName><shortdesc>
      Удобный метод для определения немасштабируемой ширины компонента. Все отображения компонента и нижестоящего макета должны создаваться внутри ограничительного прямоугольника этой ширины, которая также передается в качестве аргумента updateDisplayList().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Удобный метод для определения немасштабируемой ширины компонента. Все отображения компонента и нижестоящего макета должны создаваться внутри ограничительного прямоугольника этой ширины, которая также передается в качестве аргумента <codeph>updateDisplayList()</codeph>.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Флаг, определяющий, прошел ли объект все три фазы проверки макета (при условии, что все они требовались).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, определяющий, прошел ли объект все три фазы проверки макета (при условии, что все они требовались).
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:validationSubField:get"><apiName>validationSubField</apiName><shortdesc>
      Используется средством проверки для связывания подчиненного поля с этим компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Используется средством проверки для связывания подчиненного поля с этим компонентом.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:verticalCenter:get"><apiName>verticalCenter</apiName><shortdesc>
      
      Вертикальное смещение в пикселях от центра компонента к центру области содержимого целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      
      Вертикальное смещение в пикселях от центра компонента к центру области содержимого целевого объекта привязки. Целевым объектом привязки по умолчанию является сам контейнер. В макетах с расширенными ограничениями целевым объектом привязки может являться строка ограничений. В этом случае область содержимого является пространством между предыдущей строкой (или стороной контейнера) и целевой строкой. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате constraintColumnId:value, например, row1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:visible:get"><apiName>visible</apiName><shortdesc>
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:width:get"><apiName>width</apiName><shortdesc>
      Число, указывающее ширину компонента в координатах вышестоящего контейнера в пикселях.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее ширину компонента в координатах вышестоящего контейнера в пикселях. Значение по умолчанию – 0, но это свойство будет содержать фактическую ширину компонента после того, как Flex завершит установку размеров компонентов в приложении.
     
      <p>Примечание. Можно указать процентное значение в атрибуте MXML <codeph>width</codeph>, например, <codeph>width=100%</codeph>, но невозможно использовать процентное значение в свойстве <codeph>width</codeph> в ActionScript. Вместо этого используйте свойство <codeph>percentWidth</codeph>.</p>
     
      <p>Настройка этого свойства приводит к отправке события <codeph>resize</codeph>. Для получения дополнительной информации о моменте отправки этого события см. событие <codeph>resize</codeph>. Если свойство компонента <codeph>scaleX</codeph> имеет значение не 1,0, то ширина компонента из его внутренних координат не будет совпадать. Таким образом, компонент с шириной 100 пикселей с <codeph>scaleX</codeph> со значением 2 примет 100 пикселей в вышестоящем узле, но для внутреннего использования размер будет приравнен к 50 пикселям.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:x:get"><apiName>x</apiName><shortdesc>
      Число, указывающее горизонтальную позицию компонента в пикселях внутри его вышестоящего контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, указывающее горизонтальную позицию компонента в пикселях внутри его вышестоящего контейнера.
     
      <p>Если компонент имеет вышестоящий контейнер макета, например, HBox, Grid или Form, то установка этого свойства непосредственно или посредством вызова метода <codeph>move()</codeph> не будет иметь эффекта или будет иметь лишь временный эффект, так как после вычисления макетов этих контейнеров для позиции <codeph>x</codeph> устанавливаются значения, полученные в результате вычисления. Однако свойство <codeph>x</codeph> должно почти всегда устанавливаться, когда вышестоящим элементом является Canvas или другой контейнер с абсолютной позицией, так как значением по умолчанию является 0.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:y:get"><apiName>y</apiName><shortdesc>
      Число, указывающее вертикальную позицию компонента в пикселях внутри его вышестоящего контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, указывающее вертикальную позицию компонента в пикселях внутри его вышестоящего контейнера.
     
      <p>Если компонент имеет вышестоящий контейнер макета, например, HBox, Grid или Form, то установка этого свойства непосредственно или посредством вызова метода <codeph>move()</codeph> не будет иметь эффекта или будет иметь лишь временный эффект, так как после вычисления макетов этих контейнеров для позиции <codeph>x</codeph> устанавливаются значения, полученные в результате вычисления. Однако свойство <codeph>x</codeph> должно почти всегда устанавливаться, когда вышестоящим элементом является Canvas или другой контейнер с абсолютной позицией, так как значением по умолчанию является 0.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:z:get"><apiName>z</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:cacheHeuristic:set"><apiName>cacheHeuristic</apiName><shortdesc>
      Используется в Flex для предложения кэширования растровых изображений объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Используется в Flex для предложения кэширования растровых изображений объекта. Если для <codeph>cachePolicy</codeph> установлено значение <codeph>UIComponentCachePolicy.AUTO</codeph>, то используется <codeph>cacheHeuristic</codeph> для управления свойством объекта <codeph>cacheAsBitmap</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponent:layoutMatrix3D:set"><apiName>layoutMatrix3D</apiName><shortdesc>
      Матрица преобразования, которая используется для вычисления макета компонента относительно соответствующих элементов одного уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="flash.geom:Matrix3D"/></apiValueDef><apiDesc>
      Матрица преобразования, которая используется для вычисления макета компонента относительно соответствующих элементов одного уровня. Эта матрица определяется трехмерными свойствами компонента (включают двухмерные свойства, такие как <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph>, <codeph>transformY</codeph>, так же, как и <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>scaleZ</codeph>, <codeph>z</codeph> и <codeph>transformZ</codeph>.
      
      <p>Большая часть компонентов не имеет трехмерных свойств преобразования, для которых они установлены.</p>
      
      <p>Эта матрица макета объединена со значениями свойства <codeph>postLayoutTransformOffsets</codeph> для определения последней вычисленной матрицы компонента.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="mx.core.xml#layoutMatrix3D/postLayoutTransformOffsets"><linktext>postLayoutTransformOffsets</linktext></link></related-links></apiValue><apiValue id="mx.core:UIComponent:maintainProjectionCenter:set"><apiName>maintainProjectionCenter</apiName><shortdesc>
      При значении true компонент будет сохранять свою матрицу проекции выровненной по центру своей ограничительной рамки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      При значении true компонент будет сохранять свою матрицу проекции выровненной по центру своей ограничительной рамки. Если матрица проекции не определена для компонента, то она будет добавляться автоматически.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
  BitmapAsset является подклассом класса flash.display.Bitmap, представляющего растровые изображения, встраиваемые в приложение Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexBitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  BitmapAsset является подклассом класса flash.display.Bitmap, представляющего растровые изображения, встраиваемые в приложение Flex. Он реализует интерфейс IFlexDisplayObject, который позволяет встроенному растровому изображению отображаться в элементе управления Image или использоваться в качестве фона контейнера или темы оформления компонента.
 
  <p>Встраиваемое растровое изображение может быть расположено в файле JPEG, GIF или PNG. Можно также встроить растровый символ, расположенный в SWF-файле, созданном Flash. В обоих случаях компилятор MXML автоматически создает класс, который расширяет класс BitmapAsset для представления встроенного растрового изображения.</p>
 
  <p>Класс BitmapAsset, как правило, не используется при создании приложения Flex напрямую. Например, можно встроить GIF-файл и отобразить изображение в элементе управления Image при помощи следующего кода:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="@Embed(source='Logo.gif')"/></pre>
 
  <p>или можно использовать его как фоновое изображение приложения в синтаксисе CSS при помощи следующего кода:</p>
 
  <pre>
  &lt;mx:Style>
      Application
      {
          backgroundImage: Embed(source="Logo.gif")
      }
  &lt;mx:Style/></pre>
 
  <p>Для этого необязательно учитывать, что компилятор MXML создал подкласс BitmapAsset.</p>
 
  <p>При этом понимание процессов на уровне ActionScript может оказаться полезным. Для встраивания растрового изображения в ActionScript объявляется переменная типа Class, в которой размещаются метаданные <codeph>[Embed]</codeph>. Например, GIF-файл встраивается следующим образом:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Logo.gif")]
  private var logoClass:Class;</pre>
 
  <p>Компилятор MXML определяет расширение .gif, преобразует данные GIF в растровый формат, используемый в проигрывателе, автоматически создает подкласс класса BitmapAsset и настраивает переменную, которая становится ссылкой на этот автоматически созданный класс. Это ссылку класса затем можно использовать для создания экземпляров BitmapAsset при помощи оператора <codeph>new</codeph>, для которых можно использовать интерфейс API класса BitmapAsset:</p>
 
  <pre>
  var logo:BitmapAsset = BitmapAsset(new logoClass());
  logo.bitmapData.noise(4);</pre>
 
  <p>Однако самостоятельное создание экземпляров BitmapAsset необходимо в редких случаях, так как свойства и стили изображения могут быть установлены в классе, порождающем изображение, а его компоненты создадут все необходимые экземпляры. Например, для отображения этого изображения в элементе управления Image можно установить свойство Image <codeph>source</codeph> на <codeph>logoClass</codeph>. В MXML это выполняется следующим образом:</p>
 
  <pre>
  &lt;mx:Image id="logo" source="{logoClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:BitmapAsset:BitmapAsset"><apiName>BitmapAsset</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>Данные для растрового изображения. 
     
      </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>Определяет, должно ли растровое изображение привязываться к ближайшему пикселю.
     
      </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, следует ли сглаживать растровое изображение при масштабировании. 
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:BitmapAsset:move"><apiName>move</apiName><shortdesc>
      
	  Перемещает этот объект по указанным координатам осей x и y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси x для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси y для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Перемещает этот объект по указанным координатам осей x и y.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:BitmapAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Устанавливает фактический размер для этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Новая ширина для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Новая высота для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Устанавливает фактический размер для этого объекта.
	 
	  <p>Этот метод главным образом используется в реализации метода <codeph>updateDisplayList()</codeph>, в котором вы вычисляете фактический размер этого объекта, основанный на его явном размере, размере по отношению к вышестоящему элементу (процент от его размера), а также измеренный размер. Далее путем вызова метода <codeph>setActualSize()</codeph> вы применяете этот фактический размер к объекту.</p>
	 
	  <p>В других ситуациях вместо вызова этого метода требуется установка свойств, например, <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> или <codeph>percentHeight</codeph>.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:BitmapAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Рассчитанная высота этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Рассчитанная высота этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в нужное время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:BitmapAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Измеренная ширина этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Измеренная ширина этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в требуемое время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFBridgeProvider"><apiName>ISWFBridgeProvider</apiName><shortdesc>
  Средство реализации ISWFBridgeProvider предоставляет соединения с приложением в другой изолированной среде или с приложением, скомпилированным при помощи другой версии компилятора Flex и запущенным в другом домене ApplicationDomain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Средство реализации ISWFBridgeProvider предоставляет соединения с приложением в другой изолированной среде или с приложением, скомпилированным при помощи другой версии компилятора Flex и запущенным в другом домене ApplicationDomain. Этот интерфейс позволяет вызывающему модулю установить соединение с этим приложением. После установления соединения вызывающий модуль сможет отправлять события в приложение.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
      Проверяет, позволяет ли нижестоящий элемент вышестоящему получать доступ к его экранным объектам или прослушивать сообщения, исходящие от нижестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Проверяет, позволяет ли нижестоящий элемент вышестоящему получать доступ к его экранным объектам или прослушивать сообщения, исходящие от нижестоящего элемента. <codeph>true</codeph> если доступ разрешен, в противном случае <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc>
      Проверяет, позволяет ли вышестоящий элемент нижестоящему получать доступ к его экранным объектам или прослушивать сообщения, которые исходят от вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Проверяет, позволяет ли вышестоящий элемент нижестоящему получать доступ к его экранным объектам или прослушивать сообщения, которые исходят от вышестоящего элемента. <codeph>true</codeph> если доступ разрешен, в противном случае <codeph>false</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ISWFBridgeProvider:mx.core:ISWFBridgeProvider:swfBridge:get"><apiName>swfBridge</apiName><shortdesc>
      Соединение с приложением, связанным со средством реализации данного интерфейса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Соединение с приложением, связанным со средством реализации данного интерфейса. С помощью IEventDispatcher можно передавать события в приложение другого домена ApplicationDomain или другой изолированной среды.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ClassFactory"><apiName>ClassFactory</apiName><shortdesc>
  Экземпляр типа ClassFactory является «объектом фабрики», который Flex использует для создания нескольких экземпляров другого класса с идентичными свойствами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFactory</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Экземпляр типа ClassFactory является «объектом фабрики», который Flex использует для создания нескольких экземпляров другого класса с идентичными свойствами.
 
  <p>Класс <codeph>generator</codeph> определяется при создании объекта фабрики. Далее устанавливается свойство <codeph>properties</codeph> для объекта фабрики. В программе Flex используется объект фабрики для создания экземпляров путем вызова метода <codeph>newInstance()</codeph> объекта фабрики.</p>
 
  <p>Метод <codeph>newInstance()</codeph> создает новый экземпляр класса <codeph>generator</codeph> и устанавливает свойства, определенные <codeph>properties</codeph> в новом экземпляре. При необходимости дальнейшей настройки созданных экземпляров можно отменить метод <codeph>newInstance()</codeph>.</p>
 
  <p>Класс ClassFactory реализует интерфейс IFactory. Поэтому это позволяет создавать объекты, которые могут быть назначены для свойств типа IFactory, таких как свойство <codeph>itemRenderer</codeph> элемента управления List или свойство <codeph>itemEditor</codeph> элемента управления DataGrid.</p>
 
  <p>Например, предположим, что записан класс с именем ProductRenderer, содержащий свойство <codeph>showProductImage</codeph>, которое может быть <codeph>true</codeph> или <codeph>false</codeph>. Чтобы элементом управления List использовалось средство визуализации, а каждым средством визуализации отображалось изображения продукта, необходимо создать следующий код:</p>
 
  <pre>
  var productRenderer:ClassFactory = new ClassFactory(ProductRenderer);
  productRenderer.properties = { showProductImage: true };
  myList.itemRenderer = productRenderer;</pre>
 
  <p>Элемент управления List вызывает метод <codeph>newInstance()</codeph> в <codeph>itemRenderer</codeph> для создания индивидуальных экземпляров ProductRenderer, каждый из которых имеет свойство <codeph>showProductImage</codeph>, установленное на <codeph>true</codeph>. Если необходимо, чтобы другим элементом управления List опускались изображения продукта, требуется использовать класс ProductRenderer для создания другого ClassFactory со свойством <codeph>properties</codeph>, установленным на значение <codeph>{ showProductImage: false }</codeph>.</p>
 
  <p>Использование свойства <codeph>properties</codeph> для настройки экземпляров станет эффективным, как только появится возможность использования одного класса генератора разными способами. Однако, как правило, создаются ненастраиваемые классы генератора, для которых не требуется установка свойств. Поэтому MXML позволяет использовать следующий синтаксис: </p>
 
  <pre>
  &lt;mx:List id="myList" itemRenderer="ProductRenderer"></pre>
 
  <p>Компилятор MXML автоматически создает экземпляр ClassFactory.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#IFactory"><linktext>mx.core.IFactory</linktext></link><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links><apiConstructor id="mx.core:ClassFactory:ClassFactory"><apiName>ClassFactory</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Объект Class, используемый методом <codeph>newInstance()</codeph> для создания объектов из данного объекта фабрики.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ClassFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  Создает новый экземпляр класса generator со свойствами, указанными в объекте properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Новый созданный экземпляр.
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  Создает новый экземпляр класса <codeph>generator</codeph> со свойствами, указанными в объекте <codeph>properties</codeph>.
	 
	  <p>Этот метод реализует метод <codeph>newInstance()</codeph> интерфейса IFactory.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ClassFactory:generator"><apiName>generator</apiName><shortdesc>
      Объект Class, используемый методом newInstance() для создания объектов из данного объекта фабрики.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Объект Class, используемый методом <codeph>newInstance()</codeph> для создания объектов из данного объекта фабрики.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ClassFactory:properties"><apiName>properties</apiName><shortdesc>
	 Объект, пары «имя – значение» которого определяют свойства, устанавливаемые для каждого объекта, который создается методом newInstance().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="Object"/><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	 Объект, пары «имя – значение» которого определяют свойства, устанавливаемые для каждого объекта, который создается методом <codeph>newInstance()</codeph>.
	 
	  <p>Например, при установке свойства <codeph>properties</codeph> на <codeph>{ text: Hello, width: 100 }</codeph> свойство <codeph>text</codeph> каждого экземпляра класса <codeph>generator</codeph>, создаваемого путем вызова <codeph>newInstance()</codeph>, будет установлено на значение <codeph>Hello</codeph> и <codeph>width</codeph> на <codeph>100</codeph>.</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IUITextField"><apiName>IUITextField</apiName><shortdesc>
  Интерфейс IUITextField определяет базовый набор API для экземпляров UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IUITextField определяет базовый набор API для экземпляров UITextField.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:appendText"><apiName>appendText</apiName><shortdesc conref="flash.text.TextField#appendText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newText</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#appendText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getCharBoundaries"><apiName>getCharBoundaries</apiName><shortdesc conref="flash.text.TextField#getCharBoundaries()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getCharBoundaries()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getCharIndexAtPoint"><apiName>getCharIndexAtPoint</apiName><shortdesc conref="flash.text.TextField#getCharIndexAtPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getCharIndexAtPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getFirstCharInParagraph"><apiName>getFirstCharInParagraph</apiName><shortdesc conref="flash.text.TextField#getFirstCharInParagraph()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getFirstCharInParagraph()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getImageReference"><apiName>getImageReference</apiName><shortdesc conref="flash.text.TextField#getImageReference()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>id</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getImageReference()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineIndexAtPoint"><apiName>getLineIndexAtPoint</apiName><shortdesc conref="flash.text.TextField#getLineIndexAtPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineIndexAtPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineIndexOfChar"><apiName>getLineIndexOfChar</apiName><shortdesc conref="flash.text.TextField#getLineIndexOfChar()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineIndexOfChar()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineLength"><apiName>getLineLength</apiName><shortdesc conref="flash.text.TextField#getLineLength()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineLength()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc conref="flash.text.TextField#getLineMetrics()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineMetrics()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineOffset"><apiName>getLineOffset</apiName><shortdesc conref="flash.text.TextField#getLineOffset()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineOffset()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getLineText"><apiName>getLineText</apiName><shortdesc conref="flash.text.TextField#getLineText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getLineText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getParagraphLength"><apiName>getParagraphLength</apiName><shortdesc conref="flash.text.TextField#getParagraphLength()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getParagraphLength()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UITextField#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>Значение стиля.
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя свойства стиля.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getTextFormat"><apiName>getTextFormat</apiName><shortdesc conref="flash.text.TextField#getTextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.text:TextFormat"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#getTextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:getUITextFormat"><apiName>getUITextFormat</apiName><shortdesc conref="mx.core.UITextField#getUITextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier><apiDesc>Объект, содержащий информацию форматирования для этого компонента.
     
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UITextField#getUITextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:replaceSelectedText"><apiName>replaceSelectedText</apiName><shortdesc conref="flash.text.TextField#replaceSelectedText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#replaceSelectedText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:replaceText"><apiName>replaceText</apiName><shortdesc conref="flash.text.TextField#replaceText()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>newText</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#replaceText()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setColor"><apiName>setColor</apiName><shortdesc conref="mx.core.UITextField#setColor()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Новый цвет шрифта.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#setColor()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setFocus"><apiName>setFocus</apiName><shortdesc conref="mx.core.UITextField#setFocus()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UITextField#setFocus()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setSelection"><apiName>setSelection</apiName><shortdesc conref="flash.text.TextField#setSelection()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#setSelection()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:setTextFormat"><apiName>setTextFormat</apiName><shortdesc conref="flash.text.TextField#setTextFormat()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="flash.text:TextFormat"/></apiParam><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc conref="flash.text.TextField#setTextFormat()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUITextField:mx.core:IUITextField:truncateToFit"><apiName>truncateToFit</apiName><shortdesc conref="mx.core.UITextField#truncateToFit()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, если текст требовал усечения.
      
      </apiDesc></apiReturn><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Текст, добавляемый после усечения. При передаче значения <codeph>null</codeph> будет использоваться локализуемая строка, например <codeph>...</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UITextField#truncateToFit()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IUITextField:mx.core:IUITextField:alwaysShowSelection:get"><apiName>alwaysShowSelection</apiName><shortdesc conref="flash.text.TextField#alwaysShowSelection">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#alwaysShowSelection">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:antiAliasType:get"><apiName>antiAliasType</apiName><shortdesc conref="flash.text.TextField#antiAliasType">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#antiAliasType">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:autoSize:get"><apiName>autoSize</apiName><shortdesc conref="flash.text.TextField#autoSize">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#autoSize">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:background:get"><apiName>background</apiName><shortdesc conref="flash.text.TextField#background">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#background">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:backgroundColor:get"><apiName>backgroundColor</apiName><shortdesc conref="flash.text.TextField#backgroundColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#backgroundColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:border:get"><apiName>border</apiName><shortdesc conref="flash.text.TextField#border">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#border">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:borderColor:get"><apiName>borderColor</apiName><shortdesc conref="flash.text.TextField#borderColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#borderColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:bottomScrollV:get"><apiName>bottomScrollV</apiName><shortdesc conref="flash.text.TextField#bottomScrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#bottomScrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:caretIndex:get"><apiName>caretIndex</apiName><shortdesc conref="flash.text.TextField#caretIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#caretIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc conref="flash.text.TextField#condenseWhite">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#condenseWhite">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:defaultTextFormat:get"><apiName>defaultTextFormat</apiName><shortdesc conref="flash.text.TextField#defaultTextFormat">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:TextFormat"/></apiValueDef><apiDesc conref="flash.text.TextField#defaultTextFormat">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc conref="flash.text.TextField#displayAsPassword">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#displayAsPassword">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:embedFonts:get"><apiName>embedFonts</apiName><shortdesc conref="flash.text.TextField#embedFonts">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#embedFonts">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:focusRect:get"><apiName>focusRect</apiName><shortdesc conref="flash.display.InteractiveObject#focusRect"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#focusRect"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:gridFitType:get"><apiName>gridFitType</apiName><shortdesc conref="flash.text.TextField#gridFitType">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#gridFitType">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:htmlText:get"><apiName>htmlText</apiName><shortdesc conref="flash.text.TextField#htmlText">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#htmlText">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:ignorePadding:get"><apiName>ignorePadding</apiName><shortdesc conref="mx.core.UITextField#ignorePadding">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UITextField#ignorePadding">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc conref="mx.core.UITextField#inheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UITextField#inheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:length:get"><apiName>length</apiName><shortdesc conref="flash.text.TextField#length">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#length">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxChars:get"><apiName>maxChars</apiName><shortdesc conref="flash.text.TextField#maxChars">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxChars">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxScrollH:get"><apiName>maxScrollH</apiName><shortdesc conref="flash.text.TextField#maxScrollH">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxScrollH">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:maxScrollV:get"><apiName>maxScrollV</apiName><shortdesc conref="flash.text.TextField#maxScrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#maxScrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:mouseWheelEnabled:get"><apiName>mouseWheelEnabled</apiName><shortdesc conref="flash.text.TextField#mouseWheelEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#mouseWheelEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:multiline:get"><apiName>multiline</apiName><shortdesc conref="flash.text.TextField#multiline">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#multiline">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UITextField#nestLevel">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UITextField#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc conref="mx.core.UITextField#nonInheritingStyles">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UITextField#nonInheritingStyles">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:nonZeroTextHeight:get"><apiName>nonZeroTextHeight</apiName><shortdesc conref="mx.core.UITextField#nonZeroTextHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UITextField#nonZeroTextHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:numLines:get"><apiName>numLines</apiName><shortdesc conref="flash.text.TextField#numLines">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#numLines">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:restrict:get"><apiName>restrict</apiName><shortdesc conref="flash.text.TextField#restrict">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#restrict">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:scrollH:get"><apiName>scrollH</apiName><shortdesc conref="flash.text.TextField#scrollH">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#scrollH">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:scrollV:get"><apiName>scrollV</apiName><shortdesc conref="flash.text.TextField#scrollV">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#scrollV">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectable:get"><apiName>selectable</apiName><shortdesc conref="flash.text.TextField#selectable">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#selectable">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc conref="flash.text.TextField#selectionBeginIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#selectionBeginIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc conref="flash.text.TextField#selectionEndIndex">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.text.TextField#selectionEndIndex">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:sharpness:get"><apiName>sharpness</apiName><shortdesc conref="flash.text.TextField#sharpness">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#sharpness">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:styleSheet:get"><apiName>styleSheet</apiName><shortdesc conref="flash.text.TextField#styleSheet">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:StyleSheet"/></apiValueDef><apiDesc conref="flash.text.TextField#styleSheet">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:tabEnabled:get"><apiName>tabEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#tabEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:tabIndex:get"><apiName>tabIndex</apiName><shortdesc conref="flash.display.InteractiveObject#tabIndex"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabIndex"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:text:get"><apiName>text</apiName><shortdesc conref="flash.text.TextField#text">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#text">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textColor:get"><apiName>textColor</apiName><shortdesc conref="flash.text.TextField#textColor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc conref="flash.text.TextField#textColor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textHeight:get"><apiName>textHeight</apiName><shortdesc conref="flash.text.TextField#textHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#textHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:textWidth:get"><apiName>textWidth</apiName><shortdesc conref="flash.text.TextField#textWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#textWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:thickness:get"><apiName>thickness</apiName><shortdesc conref="flash.text.TextField#thickness">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.text.TextField#thickness">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:type:get"><apiName>type</apiName><shortdesc conref="flash.text.TextField#type">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.text.TextField#type">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:useRichTextClipboard:get"><apiName>useRichTextClipboard</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef></apiValueDetail></apiValue><apiValue id="mx.core:IUITextField:mx.core:IUITextField:wordWrap:get"><apiName>wordWrap</apiName><shortdesc conref="flash.text.TextField#wordWrap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.text.TextField#wordWrap">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UIComponentCachePolicy"><apiName>UIComponentCachePolicy</apiName><shortdesc>
  Класс ContainerCreationPolicy определяет значения констант для свойства cachePolicy класса UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ContainerCreationPolicy определяет значения констант для свойства <codeph>cachePolicy</codeph> класса UIComponent.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent/cachePolicy"><linktext>mx.core.UIComponent.cachePolicy</linktext></link></related-links><apiValue id="mx.core:UIComponentCachePolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
      Указывает на использование эвристики в инфраструктуре Flex при определении необходимости кэширования объекта в качестве растрового изображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Указывает на использование эвристики в инфраструктуре Flex при определении необходимости кэширования объекта в качестве растрового изображения.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentCachePolicy:OFF"><apiName>OFF</apiName><shortdesc>
      Указывает на то, что инфраструктура Flex никогда не будет пытаться кэшировать объект в качестве растрового изображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Указывает на то, что инфраструктура Flex никогда не будет пытаться кэшировать объект в качестве растрового изображения.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentCachePolicy:ON"><apiName>ON</apiName><shortdesc>
      Указывает на необходимость кэширования объекта в качестве растрового изображения в инфраструктуре Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Указывает на необходимость кэширования объекта в качестве растрового изображения в инфраструктуре Flex.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
  FlexSprite является подклассом класса Player Sprite и суперклассом для UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Sprite</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexSprite является подклассом класса Player Sprite и суперклассом для UIComponent. Этот подкласс переопределяет метод <codeph>toString()</codeph>, настраивая его на возврат строки, указывающей расположение объекта в иерархии объектов DisplayObject в приложении.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSprite:FlexSprite"><apiName>FlexSprite</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
	 
	  <p>Устанавливает свойство <codeph>name</codeph> равным строке, которая возвращается методом <codeph>createUniqueName()</codeph> класса mx.utils.NameUtils.</p>
	 
	  <p>Эта строка представляет собой имя класса объекта, сцепленное с целым числом, уникальным для всего приложения, например, <codeph> Button17</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSprite:toString"><apiName>toString</apiName><shortdesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, указывающая расположение этого объекта в иерархии DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении. Эта строка, например, <codeph>MyApp0.HBox5.Button17</codeph>, создается методом <codeph>displayObjectToString()</codeph> класса mx.utils.NameUtils на основе свойства <codeph>name</codeph> для объекта и его предшествующих элементов.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IConstraintClient"><apiName>IConstraintClient</apiName><shortdesc>
  Интерфейс IConstraintClient определяет интерфейс для компонентов, поддерживающих ограничения макета.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IConstraintClient определяет интерфейс для компонентов, поддерживающих ограничения макета. Это интерфейс используется только реализациями макета на основе ограничений. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IConstraintClient:mx.core:IConstraintClient:getConstraintValue"><apiName>getConstraintValue</apiName><shortdesc>
      Возвращает указанное значение ограничения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Значение ограничения или null, если значение не определено.
     
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>имя значения ограничения. Параметры ограничения: <codeph>baseline</codeph>, <codeph>bottom</codeph>, <codeph>horizontalCenter</codeph>, <codeph>left</codeph>, <codeph>right</codeph>, <codeph>top</codeph> и <codeph>verticalCenter</codeph>.
     
      <p>Для получения дополнительной информации об этих параметрах см. контейнеры Canvas и Panel, а также Styles Metadata AnchorStyles.</p>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает указанное значение ограничения.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.containers.xml#Canvas"><linktext>mx.containers.Canvas</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IConstraintClient:mx.core:IConstraintClient:setConstraintValue"><apiName>setConstraintValue</apiName><shortdesc>
      Устанавливает указанное значение ограничения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constraintName</apiItemName><apiType value="String"/><apiDesc>имя значения ограничения. Параметры ограничения: <codeph>baseline</codeph>, <codeph>bottom</codeph>, <codeph>horizontalCenter</codeph>, <codeph>left</codeph>, <codeph>right</codeph>, <codeph>top</codeph> и <codeph>verticalCenter</codeph>.
     
      <p>Для получения дополнительной информации об этих параметрах см. контейнеры Canvas и Panel, а также Styles Metadata AnchorStyles.</p>
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>Новое значение для ограничения.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Устанавливает указанное значение ограничения.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.containers.xml#Canvas"><linktext>mx.containers.Canvas</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:ISelectableList"><apiName>ISelectableList</apiName><shortdesc>
  Интерфейс ISelectableList указывает на то, что средство реализации является элементом IList, поддерживающим свойство selectedIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.collections:IList</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс ISelectableList указывает на то, что средство реализации является элементом IList, поддерживающим свойство <codeph>selectedIndex</codeph>.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:ISelectableList_mx.events.FlexEvent.VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><shortdesc>
  Передается при изменении свойства selectedIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.VALUE_COMMIT</apiEventType><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении свойства <codeph>selectedIndex</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:ISelectableList_mx.events.IndexChangedEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  Передается при изменении свойства selectedIndex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHANGE</apiEventType><adobeApiEventClassifier/><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении свойства <codeph>selectedIndex</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiValue id="mx.core:ISelectableList:mx.core:ISelectableList:selectedIndex:set"><apiName>selectedIndex</apiName><shortdesc>
      Индекс выбранного элемента IList.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      Индекс выбранного элемента IList.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContextualClassFactory"><apiName>ContextualClassFactory</apiName><shortdesc>
  Фабрика класса, предоставляющая диспетчер системы в качестве контекста места создания класса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:ClassFactory</apiBaseClassifier></apiClassifierDef><apiDesc>
  Фабрика класса, предоставляющая диспетчер системы в качестве контекста места создания класса.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ContextualClassFactory:ContextualClassFactory"><apiName>ContextualClassFactory</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>Объект Class, используемый методом <codeph>newInstance()</codeph> для создания объектов из данного объекта фабрики.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>Контекст диспетчера системы, в котором создается объект.
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ContextualClassFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  Создает новый экземпляр класса generator со свойствами, указанными в объекте properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Новый созданный экземпляр.
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  Создает новый экземпляр класса <codeph>generator</codeph> со свойствами, указанными в объекте <codeph>properties</codeph>.
	 
	  <p>Этот метод реализует метод <codeph>newInstance()</codeph> интерфейса IFactory.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ContextualClassFactory:moduleFactory"><apiName>moduleFactory</apiName><shortdesc>
	  Контекст, в котором должен быть создан объект.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier><apiDefaultValue>null
	  
	  </apiDefaultValue></apiValueDef><apiDesc>
	  Контекст, в котором должен быть создан объект.
	 
	  <p>Используется для использования встроенных шрифтов в приложении SWF, если инфраструктура загружена в виде RSL (RSL имеет собственный контекст SWF). Доступ к встроенным шрифтам осуществляется только из контекста SWF-файла, в котором они были созданы. Использование <codeph>systemManager</codeph> SWF приложения позволяет RSL создавать объекты в контексте приложения SWF, которые будут иметь доступ к встроенным шрифтам приложения. <codeph>moduleFactory</codeph> вызовет метод <codeph>create()</codeph> для создания объекта в контексте <codeph>moduleFactory</codeph>.</p>
	 
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IID"><apiName>IID</apiName><shortdesc>
  Интерфейс IID определяет интерфейс для объектов, которые должны иметь идентификатор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IID определяет интерфейс для объектов, которые должны иметь идентификатор.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IID:mx.core:IID:id:get"><apiName>id</apiName><shortdesc>
      Идентификатор этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Идентификатор этого объекта.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:Container"><apiName>Container</apiName><shortdesc>
  Класс Container является абстрактным базовым классом для компонентов, управляющих характеристиками макета нижестоящих компонентов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет любого символа компонента. Примером является флажок элемента управления CheckBox или стрелка на кнопке элемента управления ScrollBar.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между верхней границей контейнера и верхним краем его области содержимого.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между нижней границей контейнера и нижним краем его области содержимого.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalScrollBarStyleName" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Имя стиля вертикальной полосы прокрутки.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalScrollBarStyleName" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Имя стиля горизонтальной полосы прокрутки.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет кольца фокуса, если компонент в фокусе.
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledOverlayAlpha" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Значение альфа-канала для наложения, размещенного в верхней части контейнера при его деактивации.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет области содержимого компонента.
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Альфа-канал фона содержимого для данного компонента.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAttachment" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  При указании фонового изображения этот стиль указывает на его фиксированность относительно области просмотра (<codeph>fixed</codeph>) или выполняет прокрутку содержимого (<codeph>scroll</codeph>).
 
  </description>
<default>"scroll"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="uint">
<description>
     
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера в пикселях.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:Container" playerVersion="Flash10" type="Class">
<description>
  Класс, реализующий IUITextField, который используется этим компонентом для визуализации текста.
 
  <p>Этот тип можно установить либо для класса mx.core.UITextField (для использования типичного класса TextField, встроенного в Flash Player), либо для класса mx.core.UIFTETextField (для использования Text Layout Framework для достижения оптимизированной визуализации текста, включая двусторонний макет).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Определяет использование подчеркивания текста. Возможными значениями являются <codeph>none</codeph> и <codeph>underline</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Выравнивание текста внутри контейнера. Возможными значениями являются <codeph>left</codeph>, <codeph>right</codeph> или <codeph>center</codeph>.
 
  <p>Значением по умолчанию является <codeph>left</codeph>. Для компонента FormItem, значением по умолчанию является <codeph>right</codeph>. Для компонентов Button, LinkButton и AccordionHeader значением по умолчанию является <codeph>center</codeph> и это свойство является допустимым, только если свойство <codeph>labelPlacement</codeph> установлено на <codeph>left</codeph> или <codeph>right</codeph>. Если свойство <codeph>labelPlacement</codeph> установлено на <codeph>top</codeph> или <codeph>bottom</codeph>, текст и любой значок располагаются по центру.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:Container" playerVersion="Flash10" type="String">
<description>
  Языковой стандарт текста, отображаемый этим компонентом.
 
  <p>FTE и TLF используют этот языковой стандарт для сопоставления символов «Юникод» с глифами шрифтов и поиска резервных шрифтов.</p>
 
  <p>Примечание. Этот стиль применяется только в том случае, если компонент MX определяет UIFTETextField как <codeph>textFieldClass</codeph>.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между каждым символом. Положительное значение увеличивает интервал между символами вне стандартного интервала, в то время как отрицательное значение его уменьшает.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:Container" playerVersion="Flash9" type="Boolean">
<description>
  Логическое значение, указывающее использование кернинга (<codeph>true</codeph> – включено и <codeph>false</codeph> – отключено). Кернинг регулирует промежуток между определенными символьными парами для повышения удобочитаемости и должен использоваться, например, в заголовках при использовании крупных шрифтов. Кернинг поддерживается только для встроенных шрифтов. Определенные шрифты, например, Verdana, и моноширинные шрифты, например, Courier New, не поддерживают кернинг.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Определяет использование жирного шрифта в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph> bold</codeph>. Значение по умолчанию для элемента управления Button <codeph>bold</codeph>. Значением по умолчанию для всех прочих элементов управления является<codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>thickness</codeph> внутреннего класса TextFields, представляющего текст в элементе управления Flex. Это свойство указывает толщину границ глифов. Возможные значения – числа от -200 до 200. 
  
  <p>Это свойство применяется только при использовании встроенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField; его можно применять только к определенным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Определяет использование курсива в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph>italic</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Высота текста в пикселях.    
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>sharpness</codeph> для внутреннего класса TextFields, представляющего текст в элементах управления Flex. Это свойство указывает резкость краев глифа. Возможными значениями являются числа от -400 до 400. 
  
  <p>Это свойство применяется только при использовании встроенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField; его можно применять только к определенным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>gridFitType</codeph> внутреннего класса TextFields, представляющего текст в элементах управления Flex. Допустимыми значениями являются <codeph>none</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>pixel</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) и <codeph>subpixel</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Это свойство применяется только при использовании встроенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField; его можно применять только к определенным символам.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Имя используемого шрифта. В отличие от использования в реализации CSS, разделенные запятой списки не поддерживаются. Можно использовать любое имя гарнитуры шрифтов. При указании общего имени шрифта оно преобразовывается в соответствующий шрифт устройства. <codeph/> <codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>antiAliasType</codeph> внутреннего класса TextFields. Возможными значениями являются <codeph>normal</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) и <codeph>advanced</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Значением по умолчанию является <codeph>advanced</codeph>, активирующее расширенные возможности сглаживания для шрифтов. Установлено на <codeph>normal</codeph> для деактивации расширенных возможностей сглаживания.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
  
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления класса TextField; его можно применять только к определенным символам.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:Container" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте при его деактивации.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:Container" playerVersion="Flash10" type="String">
<description>
  Направленность текста, отображенная компонентом.
 
  <p>Допустимые значения – <codeph>ltr</codeph> для текста, записываемого слева направо, как в гарнитурах латинского стиля, и <codeph>rtl</codeph> для текста, записываемого справа налево, как в арабском и иврите.</p>
 
  <p>FTE и TLF используют это значение в алгоритме двухстороннего макета текста, который сопоставляет последовательность символов «Юникод» с последовательностью глифов.</p>
 
  <p>Примечание. Этот стиль применяется только в том случае, если компонент MX определяет UIFTETextField как <codeph>textFieldClass</codeph>.</p>
 
  <p>Параметр <codeph>direction</codeph> также влияет на выравнивание текста в рамках TLFTextField. Однако он не влияет на размещение TLFTextField внутри компонента.</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:Container" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте, включая метку компонента. <codeph/> <codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между правой границей компонента и правым краем его области содержимого.
  <p>По умолчанию используется значение 0.</p>
  <p/>
  <p>Значение по умолчанию для элемента управления ComboBox: 5.</p>
  <p>Значением по умолчанию для контейнера Form является 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.core:Container" playerVersion="Flash9" type="Number">
<description>
  Количество пикселей между левой границей компонента и левым краем его области содержимого.
  <p>По умолчанию используется значение 0.</p>
  <p/>
  <p>Значение по умолчанию для элемента управления ComboBox: 5.</p>
  <p>Значением по умолчанию для контейнера Form является 16.</p>
  <p>Значением по умолчанию для элемента управления Tree является 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Цвет фона компонента. Можно одновременно установить значения для свойств <codeph>backgroundColor</codeph> и <codeph>backgroundImage</codeph>. Некоторые компоненты не имеют фона. Элемент управления DataGrid игнорирует этот стиль. Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что свойство не установлено. Если этот стиль и стиль <codeph>backgroundImage</codeph> имеют значения <codeph>undefined</codeph>, фон компонента будет прозрачным.
 
  <p>Для контейнера Application этот стиль указывает цвет фона во время загрузки приложения и градиент фона во время выполнения приложения. Flex вычисляет образец градиента между двумя цветами: немного более темным и немного более светлым, чем указанный цвет.</p>
 
  <p>Темы оформления по умолчанию для большинства элементов управления Flex являются частично прозрачными. В результате цвет фона контейнера частично «расплывается» на элементы управления, которые находятся в контейнере. Этого можно избежать путем установки 1 в качестве значений альфа-канала для свойства <codeph>fillAlphas</codeph> элемента управления, например:
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Альфа-уровень цвета, определяемый свойством <codeph>backgroundColor</codeph> для изображения или файла SWF, заданного стилем <codeph>backgroundImage</codeph>. Допустимыми являются значения от 0,0 до 1,0. Для большинства элементов управления значением по умолчанию является 1,0, но для элементов управления ToolTip значением по умолчанию является 0,95, а для элементов управления Alert – 0,9.
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Расстояние для тени. Если для свойства установлено отрицательное значение, тень отображается над компонентом.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  Направление тени. Допустимыми значениями являются <codeph>left</codeph>, <codeph>center</codeph> и <codeph>right</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Цвет тени.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Логическое свойство, которое указывает на наличие у компонента видимой тени. Значение по умолчанию <codeph>false</codeph>.
 
  <p><b>Примечание.</b> Для отображения теней в контейнерах установите свойство <codeph>contentBackgroundColor</codeph>. В противном случае тень будет отображаться за контейнером, поскольку по умолчанию контейнер имеет прозрачный фон.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Логическое свойство, которое указывает на наличие у компонента видимой тени. Этот стиль используется при установке значения solid для свойства <codeph>borderStyle</codeph>. Значение по умолчанию <codeph>false</codeph>.
 
  <p><b>Примечание.</b> Для отображения теней в контейнерах выберите свойства <codeph>backgroundColor</codeph> или <codeph>backgroundImage</codeph>. В противном случае тень будет отображаться за контейнером, поскольку по умолчанию контейнер имеет прозрачный фон.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Радиус углов компонента.  Значением по умолчанию для ApplicationControlBar является 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Видимость границы.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Толщина ограничительной рамки. Используется только в случае, если для свойства <codeph>borderStyle</codeph> установлено значение <codeph>solid</codeph>.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.core:Container" playerVersion="Flash9" type="String">
<description>
  Стиль ограничительной рамки. Возможными значениями являются <codeph>none</codeph>, <codeph>solid</codeph>, <codeph>inset</codeph> и <codeph>outset</codeph>. Значение по умолчанию зависит от класса компонента; если оно не переопределено для класса, значением по умолчанию является <codeph>inset</codeph>. Значением по умолчанию для большинства контейнеров является <codeph>none</codeph>. Значения <codeph>inset</codeph> и <codeph>outset</codeph> являются действительными только с темой Halo.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.core:Container" playerVersion="Flash9" type="Class">
<description>
  Класс темы оформления границы компонента. <codeph/><codeph/> <codeph/><codeph/> Для определения значения по умолчанию для компонента см. файл default.css.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  Стороны ограничительной рамки. Строка, разделенная пробелами, указывающая отображаемые стороны границы. Строка может содержать значения <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> и <codeph>bottom</codeph> в любом порядке. Значением по умолчанию является <codeph>left top right bottom</codeph>. При этом будут отображаться все четыре стороны. Этот стиль используется только в том случае, если для borderStyle установлено значение <codeph>solid</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Цвет границы. <codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.core:Container" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Альфа-канал границы.
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="String">
<description>
  Масштабирует изображение, указанное свойством <codeph>backgroundImage</codeph>, в соответствии с различными указываемыми процентными значениями. При значении <codeph>100%</codeph> изображение растягивается по всей области компонента. Для указания процентного значения необходимо добавить символ процента (%). Значением по умолчанию для контейнера Application является <codeph>100%</codeph>. Значением по умолчанию для всех других контейнеров является <codeph>auto</codeph>, при котором сохраняется первоначальный размер изображения.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Фоновое изображение компонента. Может являться классом, абсолютным или относительным URL-адресом. Можно установить <codeph>backgroundColor</codeph> или <codeph>backgroundImage</codeph>. Фоновое изображение отображается поверх цвета фона. Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что значение не установлено. Если этот стиль и стиль <codeph>backgroundColor</codeph> не определены, для компонента устанавливается прозрачный фон.
 
  <p>Темы оформления по умолчанию для большинства элементов управления Flex являются частично прозрачными. В результате фоновое изображение контейнера частично «растекается» на элементы управления, которые находятся в контейнере. Этого можно избежать путем установки 1 в качестве значений альфа-канала для свойства <codeph>fillAlphas</codeph> элемента управления, например:
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Цвет фона компонента при его деактивации. Глобальным значением по умолчанию является <codeph>undefined</codeph>. Значением по умолчанию для элементов управления List является <codeph>0xDDDDDD</codeph> (светло-серый). Если контейнер деактивирован, фон бледнеет в соответствии с градацией, заданной стилем <codeph>disabledOverlayAlpha</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.core:Container" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Определяет цвет ProgressBar. ProgressBar заполняется вертикальным градиентом между этим цветом и более ярким цветом, вычисленным на его основе. Этот стиль не влияет на другие компоненты, но может быть установлен в контейнере в целях управления внешним видом всех включенных индикаторов выполнения. Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что свойство не установлено. В этом случае используется свойство стиля <codeph>themeColor</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  Flex Framework containers inherit the following attributes from the Container
  class:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    <strong>Properties</strong>
    autoLayout="true|false"
    clipContent="true|false"
    creationIndex="undefined"
    creationPolicy="auto|all|queued|none"
    defaultButton="<i>No default</i>"
    horizontalLineScrollSize="5"
    horizontalPageScrollSize="0"
    horizontalScrollBar="null"
    horizontalScrollPolicy="auto|on|off"
    horizontalScrollPosition="0"
    icon="undefined"
    label=""
    verticalLineScrollSize="5"
    verticalPageScrollSize="0"
    verticalScrollBar="null"
    verticalScrollPolicy="auto|on|off"
    verticalScrollPosition="0"
 
    <strong>Styles</strong>
    backgroundAlpha="1.0"
    backgroundAttachment="scroll"
    backgroundColor="undefined"
    backgroundDisabledColor="undefined"
    backgroundImage="undefined"
    backgroundSize="auto" 
    <i>    For the Application container only,</i> backgroundSize="100%"
    barColor="undefined"
    borderColor="0xAAB3B3"
    borderSides="left top right bottom"
    borderSkin="mx.skins.halo.HaloBorder"
    borderStyle="inset"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    disbledOverlayAlpha="undefined"
    dropShadowColor="0x000000"
    dropShadowEnabled="false"
    fontAntiAliasType="advanced"
    fontfamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0""
    fontSize="10"
    fontStyle="normal"
    fontThickness="0"
    fontWeight="normal"
    horizontalScrollBarStyleName="undefined"
    paddingBottom="0"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    shadowDirection="center"
    shadowDistance="2"
    textAlign="left"
    textDecoration="none|underline"
    textIndent="0"
    verticalScrollBarStyleName="undefined"
 
    <strong>Events</strong>
    childAdd="<i>No default</i>"
    childIndexChange="<i>No default</i>"
    childRemove="<i>No default</i>"
    dataChange="<i>No default</i>"
    scroll="<i>No default</i>"
    &gt;
      ...
      <i>child tags</i>
      ...
  &lt;/mx:<i>tagname</i>&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IContainer</apiBaseInterface><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IRawChildrenContainer</apiBaseInterface><apiBaseInterface>mx.core:IChildList</apiBaseInterface><apiBaseInterface>mx.core:IVisualElementContainer</apiBaseInterface><apiBaseInterface>mx.core:INavigatorContent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Container является абстрактным базовым классом для компонентов, управляющих характеристиками макета нижестоящих компонентов. Экземпляр Container не создается в приложении. Вместо него можно создать экземпляр одного из подклассов Container, например, Canvas или HBox.
 
  <p>Класс Container содержит логику прокрутки, усечения и динамической реализации. Он содержит методы для добавления и удаления нижестоящих элементов. Класс также содержит метод <codeph>getChildAt()</codeph> и логику рисования фона и границы контейнеров.</p>
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:Container_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Отправляется при прокрутке контейнера пользователем вручную.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется при прокрутке контейнера пользователем вручную.
 
  <p>Событие отправляется при изменении положения прокрутки с использованием мыши (например, при нажатии на кнопку «вниз» на полосе прокрутки) или клавиатуры (например, при нажатии на клавишу со стрелкой вниз). Однако это событие не отправляется, если положение прокрутки изменено программным образом (например, при установке значения свойства <codeph>horizontalScrollPosition</codeph>). Событие <codeph>viewChanged</codeph> доставляется при каждом изменении положения прокрутки: вручную или программным образом.</p>
 
  <p>Во время отправки этого события полоса прокрутки обновлена для нового положения, но нижестоящие объекты контейнера не смещены для отражения нового положения прокрутки.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  Передается при изменении свойства data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Передается при изменении свойства<codeph>data</codeph>.
 
  <p>Если контейнер используется как средство визуализации в List или других компонентах, свойство <codeph>data</codeph> используются для перехода к данным контейнера для отображения.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.ChildExistenceChangedEvent.CHILD_REMOVE_childRemove"><apiName>childRemove</apiName><shortdesc>
  Отправляется до удаления нижестоящего элемента контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_REMOVE</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется до удаления нижестоящего элемента контейнера.
 
  <p>Это событие доставляется при вызове одного из следующих методов: <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph> или <codeph>removeAllChildren()</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE_childIndexChange"><apiName>childIndexChange</apiName><shortdesc>
  Отправляется после изменения индекса нижестоящего элемента контейнера (среди нижестоящих элементов контейнера).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.CHILD_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после изменения индекса нижестоящего элемента контейнера (среди нижестоящих элементов контейнера). Это событие отправляется для нижестоящего элемента, указанного в качестве аргумента для метода <codeph>setChildIndex()</codeph>; событие не отправляется для нижестоящих элементов, изменение индекса которых вызвано побочным эффектом вызова метода <codeph>setChildIndex()</codeph>.
 
  <p>Индекс нижестоящего элемента изменяется при вызове метода <codeph>setChildIndex()</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Container_mx.events.ChildExistenceChangedEvent.CHILD_ADD_childAdd"><apiName>childAdd</apiName><shortdesc>
  Отправляется после добавления нижестоящего элемента к контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ChildExistenceChangedEvent.CHILD_ADD</apiEventType><adobeApiEventClassifier>mx.events.ChildExistenceChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после добавления нижестоящего элемента к контейнеру.
 
  <p>Событие childAdd отправляется при вызове метода <codeph>addChild()</codeph> или <codeph>addChildAt()</codeph>. При первоначальном создании контейнера метод <codeph>addChild()</codeph> вызывается автоматически для каждого нижестоящего компонента, объявленного в файле MXML. Метод <codeph>addChildAt()</codeph> вызывается автоматически при каждом добавлении или удалении объектом Repeater нижестоящих объектов. Разработчик приложений может также вызывать методы для добавления новых нижестоящих элементов вручную.</p>
 
  <p>Во время отправки данного события нижестоящий объект инициализирован, но его ширина и высота еще не вычислены, и нижестоящий элемент не выведен на экран. Если требуется уведомление о полной инициализации и визуализации нижестоящего элемента, зарегистрируйте прослушиватель для события нижестоящего элемента <codeph>creationComplete</codeph>.</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Container:Container"><apiName>Container</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Container:addChild"><apiName>addChild</apiName><shortdesc>
      Добавляет нижестоящий элемент DisplayObject к этому контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Добавляемый нижестоящий элемент как объект типа DisplayObject. Как правило, возвращаемое значение приводится к UIComponent или типу добавляемого компонента.
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>DisplayObject для добавления в качестве нижестоящего элемента этого контейнера. Он должен реализовывать интерфейс IUIComponent.
     
      </apiDesc></apiParam><apiTipTexts><apiTipText>Добавляет нижестоящий объект к этому контейнеру.
      
      </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
      Добавляет нижестоящий элемент DisplayObject к этому контейнеру. Нижестоящий элемент добавляется после остальных существующих нижестоящих элементов, так что первый добавленный нижестоящий элемент имеет индекс 0, следующий – 1 и т.д.
     
      <p><b>Примечание. </b>Несмотря на то, что аргумент <codeph>child</codeph> для метода указан как аргумент типа DisplayObject, он должен реализовывать интерфейс IUIComponent для добавления в качестве нижестоящего элемента контейнера. Все компоненты Flex реализуют этот интерфейс.</p>
     
      <p>Нижестоящие элементы расположены слоями от задней части экрана к передней. Другими словами, при наложении нижестоящих элементов элемент с индексом 0 является самым дальним, а элемент с индексом <codeph>numChildren – 1</codeph> расположен в самой передней части экрана. Это означает, что последние добавленные нижестоящие элементы располагаются перед существующими нижестоящими элементами.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#IUIComponent"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:addChildAt"><apiName>addChildAt</apiName><shortdesc>
      Добавляет нижестоящий элемент DisplayObject к этому контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Добавляемый нижестоящий элемент как объект типа DisplayObject. Как правило, возвращаемое значение приводится к UIComponent или типу добавляемого компонента.
     
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>DisplayObject для добавления в качестве нижестоящего элемента этого контейнера. Он должен реализовывать интерфейс IUIComponent.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс для места добавления нижестоящего элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет нижестоящий элемент DisplayObject к этому контейнеру. Нижестоящий элемент добавляется к указанной позиции индекса.
     
      <p><b>Примечание. </b>Несмотря на то, что аргумент <codeph>child</codeph> для метода указан как аргумент типа DisplayObject, он должен реализовывать интерфейс IUIComponent для добавления в качестве нижестоящего элемента контейнера. Все компоненты Flex реализуют этот интерфейс.</p>
     
      <p>Нижестоящие элементы расположены слоями от задней части экрана к передней. Другими словами, при наложении нижестоящих элементов элемент с индексом 0 является самым дальним, а элемент с индексом <codeph>numChildren – 1</codeph> расположен в самой передней части экрана. Это означает, что последние добавленные нижестоящие элементы располагаются перед существующими нижестоящими элементами.</p>
     
      <p>При добавлении нового нижестоящего элемента в позицию индекса, занятую старым нижестоящим элементом, он не заменяет старый нижестоящий элемент; вместо этого старый нижестоящий элемент и новый «наслаиваются» и индекс увеличивается на единицу. Предположим, что контейнер содержит нижестоящие элементы (A, B, C) и к ним добавляется элемент D к индексу 1. Тогда контейнер будет содержать (A, D, B, C). Если требуется заменить старый нижестоящий элемент, следует удалить его до добавления нового.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#IUIComponent"><linktext>mx.core.IUIComponent</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:addElement"><apiName>addElement</apiName><shortdesc>
      
      Добавляет визуальный элемент к этому контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Добавленный элемент.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Визуальный элемент, добавляемый в качестве нижестоящего элемента данного контейнера.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Добавляет визуальный элемент к этому контейнеру. Элемент добавляется после всех других элементов и поверх всех других элементов. Для добавления визуального элемента к конкретной позиции индекса воспользуйтесь методом <codeph>addElementAt()</codeph>.
     
      <p>При добавлении визуального элемента, уже имеющего другой контейнер в качестве вышестоящего элемента, элемент удаляется из другого контейнера.</p>  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      
      Добавляет визуальный элемент к этому контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Добавленный элемент.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Элемент, добавляемый в качестве нижестоящего элемента этого визуального контейнера.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Позиция индекса для добавления элемента. При указании занимаемой в настоящее время позиции индекса существующий в данной позиции нижестоящий объект и все вышестоящие позиции перемещаются по списку на одну позицию вверх.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Добавляет визуальный элемент к этому контейнеру. Элемент добавляется в указанной позиции индекса. Индекс 0 представляет первый элемент в списке отображения.
     
      <p>При добавлении визуального элемента, уже имеющего другой контейнер в качестве вышестоящего элемента, элемент удаляется из другого контейнера.</p>  
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:attachOverlay"><apiName>attachOverlay</apiName><shortdesc>
      Используется на внутреннем уровне эффектом Dissolve для добавления оверлея к хрому контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Используется на внутреннем уровне эффектом Dissolve для добавления оверлея к хрому контейнера. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:contentToGlobal"><apiName>contentToGlobal</apiName><shortdesc conref="mx.core.UIComponent#contentToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/><apiDesc>Объект Point с координатами относительно рабочей области.
     
      </apiDesc></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Объект Point, указывающий координаты <i>x</i> и <i>y</i> в системе координат содержимого в качестве свойств.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:contentToLocal"><apiName>contentToLocal</apiName><shortdesc conref="mx.core.UIComponent#contentToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/><apiDesc>Point: объект Point с координатами относительно локальной системы координат.
     
      </apiDesc></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Объект Point, указывающий координаты <i>x</i> и <i>y</i> в системе координат содержимого в качестве свойств.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#contentToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      При необходимости создает тему оформления границы контейнера, если она не существует.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      При необходимости создает тему оформления границы контейнера, если она не существует.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:createComponentFromDescriptor"><apiName>createComponentFromDescriptor</apiName><shortdesc>
      Указан отдельный UIComponentDescriptor, создайте соответствующий компонент и добавьте его в качестве нижестоящего элемента данного контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>descriptor</apiItemName><apiOperationClassifier>mx.core:ComponentDescriptor</apiOperationClassifier><apiDesc>UIComponentDescriptor для создаваемого компонента. Этот аргумент является объектом UIComponentDescriptor или индексом одного из нижестоящих элементов контейнера (целое число между 0 и n-1, где n – общее количество нижестоящих элементов этого контейнера).
     
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>При значении <codeph>false</codeph> создается этот компонент, но не его нижестоящие элементы. При значении <codeph>true</codeph> после создания компонента Flex вызывает метод <codeph>createComponentsFromDescriptors()</codeph> для создания всех или нескольких нижестоящих элементов на основе значения свойства компонента <codeph>creationPolicy</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Указан отдельный UIComponentDescriptor, создайте соответствующий компонент и добавьте его в качестве нижестоящего элемента данного контейнера.
      
      <p>Этот метод создает экземпляры нового объекта, но не добавляет его к списку отображения, таким образом, объект не появляется на экране по умолчанию. Для добавления нового объекта к списку отображения вызовите в контейнере метод <codeph>validateNow()</codeph> после вызова метода <codeph>createComponentFromDescriptor()</codeph>, как показано в следующем примере:
      <pre>
      myVBox.createComponentFromDescriptor(myVBox.childDescriptors[0],false);
      myVBox.validateNow();
      </pre>
      </p>
      
      <p>Либо вызовите в контейнере метод<codeph>createComponentsFromDescriptors()</codeph> для одновременного создания всех компонентов. Вызов метода <codeph>validateNow()</codeph> после вызова метода <codeph>createComponentsFromDescriptors()</codeph> является необязательным.</p>
      
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:createComponentsFromDescriptors"><apiName>createComponentsFromDescriptors</apiName><shortdesc>
      Выполните итерации в отношении массива childDescriptors и вызовите методcreateComponentFromDescriptor() для каждого элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>При значении <codeph>true</codeph> компоненты создаются рекурсивно.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполните итерации в отношении массива <codeph>childDescriptors</codeph> и вызовите метод<codeph>createComponentFromDescriptor()</codeph> для каждого элемента.
      
      <p>Если значение свойства контейнера <codeph>creationPolicy</codeph> – <codeph>ContainerCreationPolicy.ALL</codeph>, этот метод вызывается автоматически в порядке инициализации.</p>
      
      <p>Если значение контейнера <codeph>creationPolicy</codeph> – <codeph>ContainerCreationPolicy.AUTO</codeph>, этот метод вызывается автоматически, когда нижестоящие элементы контейнера становятся видимыми.</p>
      
      <p>Если значение свойства контейнера <codeph>creationPolicy</codeph> – <codeph>ContainerCreationPolicy.NONE</codeph>, необходимо вызвать эту функцию для создания нижестоящих элементов контейнера.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      Выполняет эквивалентную операцию вызова метода createComponentsFromDescriptors(true) для контейнеров, внедряющих интерфейс IDeferredContentOwner для поддержки отложенной реализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Выполняет эквивалентную операцию вызова метода <codeph>createComponentsFromDescriptors(true)</codeph> для контейнеров, внедряющих интерфейс IDeferredContentOwner для поддержки отложенной реализации.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>createComponentsFromDescriptors()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:executeBindings"><apiName>executeBindings</apiName><shortdesc>
      Выполняет все привязки данных в этом контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>При значении <codeph>false</codeph> выполните привязки только для этого контейнера. При значении <codeph>true</codeph> выполните также привязки для нижестоящих элементов первого, второго и третьего уровней контейнера.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполняет все привязки данных в этом контейнере. Flex вызывает этот метод автоматически после создания контейнера для инициации всех привязок данных, которые содержат выполняемые адреса назначения. Обходной путь решения проблемы контейнера/связывания MXML (177074): отмените Container.executeBindings() в пользу descriptor.document поверх parentDocument при вызове BindingManager.executeBindings(). Это должно обеспечить правильное поведение экземпляров, создаваемых дескриптором, и обеспечить исходное поведение экземпляров, созданных с помощью процедур. (В последнем случае может возникнуть ошибка.) Более полный вариант исправлений, гарантирующий правильное поведение как в сценариях не-DI, так и в сценариях восстановления отношений компонентов, ожидается в средстве обновления 1.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
      Выполняет привязки к объекту UIComponent нижестоящего элемента контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>При значении <codeph>false</codeph> выполните привязки только для непосредственных нижестоящих элементов этого контейнера. При значении <codeph>true</codeph> выполните также привязки для нижестоящих элементов второго, третьего уровня и т.д.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Выполняет привязки к объекту UIComponent нижестоящего элемента контейнера. Flex вызывает этот метод автоматически при создании контейнера.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildAt"><apiName>getChildAt</apiName><shortdesc>
      Получает n-ный объект нижестоящего компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ссылка на нижестоящий элемент как объект типа DisplayObject. Как правило, возвращаемое значение приводится к UIComponent или типу элемента управления Flex, например, ComboBox или TextArea.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Число от 0 до (numChildren – 1).
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Получает <i>n</i>-ный объект нижестоящего компонента.
     
      <p>Нижестоящие записи, возвращаемые из этого метода, включают нижестоящие элементы, объявленные в MXML, и нижестоящие элементы, добавленные при помощи метода <codeph>addChild()</codeph> или <codeph>addChildAt()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildByName"><apiName>getChildByName</apiName><shortdesc>
      Возвращает нижестоящий элемент, свойство name которого является указанным String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>DisplayObject, представляющий нижестоящий элемент как объект типа DisplayObject. Как правило, возвращаемое значение приводится к UIComponent или типу элемента управления Flex, например, ComboBox или TextArea. Возвращает динамическую ошибку, если нижестоящий элемент с указанным именем не существует.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Идентификатор нижестоящего элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает нижестоящий элемент, свойство <codeph>name</codeph> которого является указанным String.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
      Получает отсчитываемый от нуля индекс нижестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Число между 0 и (numChildren – 1).
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Ссылка на нижестоящий элемент с получаемым индексом.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Получает отсчитываемый от нуля индекс нижестоящего элемента.
     
      <p>Первый нижестоящий элемент контейнера (например: первый нижестоящий тег, объявленный в MXML) имеет индекс 0, второй нижестоящий элемент – индекс 1 и т.д. Индексы нижестоящих элементов контейнера определяют порядок их расположения. Например, в VBox нижестоящий элемент с индексом 0 расположен в верхней части контейнера, нижестоящий элемент с индексом 1 – под ним и т.д.</p>
     
      <p>При добавлении нижестоящего элемента посредством вызова метода <codeph>addChild()</codeph> индекс нового нижестоящего элемента равен самому высокому индексу среди существующих нижестоящих элементов плюс единица. Можно вставить нижестоящий элемент в указанной позиции индекса при помощи метода <codeph>addChildAt()</codeph>; в этом случае индексы нижестоящего элемента ранее находившегося в этой позиции индекса, и нижестоящих элементов с более высокими индексами увеличиваются на один, так что все индексы располагаются в диапазоне от 0 до <codeph>(numChildren - 1)</codeph>.</p>
     
      <p>При удалении нижестоящего элемента при помощи вызова метода <codeph>removeChild()</codeph> или <codeph>removeChildAt()</codeph> индексы остальных нижестоящих элементов регулируются, чтобы все индексы располагались в диапазоне от 0 до <codeph>(numChildren – 1)</codeph>.</p>
     
      <p>Если <codeph>myView.getChildIndex(myChild)</codeph> возвращает 5, то <codeph>myView.getChildAt(5)</codeph> возвращает myChild.</p>
     
      <p>Индекс нижестоящего элемента может быть изменен посредством вызова метода <codeph>setChildIndex()</codeph>.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getChildren"><apiName>getChildren</apiName><shortdesc>
      Возвращает массив объектов DisplayObject, состоящий из нижестоящих элементов содержимого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив объектов DisplayObject, состоящий из нижестоящих элементов содержимого контейнера.
     
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает массив объектов DisplayObject, состоящий из нижестоящих элементов содержимого контейнера. Этот массив <b>не</b> включает DisplayObjects, реализующие элементы отображения контейнера, как, например, граница и фоновое изображение контейнера.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#Container/rawChildren"><linktext>rawChildren</linktext></link></related-links></apiOperation><apiOperation id="mx.core:Container:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      
      Возвращает визуальный элемент по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Элемент в указанном индексе.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс получаемого элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает визуальный элемент по заданному индексу.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      
      Возвращает позицию индекса визуального элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Позиция индекса элемента в контейнере.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Визуальный элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Возвращает позицию индекса визуального элемента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:globalToContent"><apiName>globalToContent</apiName><shortdesc conref="mx.core.UIComponent#globalToContent()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/><apiDesc>Point: объект Point с координатами относительно компонента.
     
      </apiDesc></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Объект Point, указывающий координаты <i>x</i> и <i>y</i> в глобальной системе координат (рабочая область) в качестве свойств.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#globalToContent()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      Установите позиции и размеры границ этого контейнера в ответ на изменение размера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Указывает ширину компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleX</codeph> компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Указывает высоту компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleY</codeph> компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Установите позиции и размеры границ этого контейнера в ответ на изменение размера. Это расширенный метод, который можно переопределить при создании подкласса контейнера.
     
      <p>Метод <codeph> layoutChrome()</codeph> вызывается программой Flex при добавлении контейнера к вышестоящему контейнеру при помощи метода <codeph>addChild()</codeph>, а также при вызове метода контейнера <codeph>invalidateDisplayList()</codeph>.</p>
     
      <p>Метод <codeph>Container.layoutChrome()</codeph> вызывается вне зависимости от значения свойства <codeph>autoLayout</codeph>.</p>
     
      <p>Метод <codeph>Container.layoutChrome()</codeph> устанавливает положение и размер границы контейнера Container. В каждом подклассе Container метод<codeph>layoutChrome()</codeph> подкласса должен выполнить вызов метода <codeph>super.layoutChrome()</codeph> для правильного установления границы.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:localToContent"><apiName>localToContent</apiName><shortdesc conref="mx.core.UIComponent#localToContent()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="flash.geom:Point"/><apiDesc>Point: объект Point с координатами относительно систем координат содержимого.
     
      </apiDesc></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Объект Point, указывающий координаты <i>x</i> и <i>y</i> в локальной системе координат в качестве свойств.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#localToContent()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeAllChildren"><apiName>removeAllChildren</apiName><shortdesc>
      Удаляет все нижестоящие элементы из списка нижестоящих элементов этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Удаляет все нижестоящие элементы из списка нижестоящих элементов этого контейнера.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      
      Удаляет все визуальные элементы из контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      
      Удаляет все визуальные элементы из контейнера.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeChild"><apiName>removeChild</apiName><shortdesc>
      Удаляет нижестоящий элемент DisplayObject из списка нижестоящих элементов этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Удаляемый нижестоящий элемент является объектом типа DisplayObject. Как правило, возвращаемое значение приводится к UIComponent или типу удаляемого компонента.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Удаляемый элемент DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет нижестоящий элемент DisplayObject из списка нижестоящих элементов этого контейнера. Удаляемый нижестоящий элемент будет иметь свойство <codeph>parent</codeph> со значением null. Нижестоящий элемент будет по-прежнему существовать, если не будет удален явным образом. При добавлении элемента к другому контейнеру, он сохранит последнее известное состояние.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
      Удаляет нижестоящий элемент DisplayObject в указанной позиции индекса из этого списка нижестоящих элементов контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Удаляемый нижестоящий элемент является объектом типа DisplayObject. Как правило, возвращаемое значение приводится к UIComponent или типу удаляемого компонента.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Удаляемый индекс нижестоящего элемента DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет нижестоящий элемент DisplayObject в указанной позиции индекса из этого списка нижестоящих элементов контейнера. Удаляемый нижестоящий элемент будет иметь свойство <codeph>parent</codeph> со значением null. Нижестоящий элемент будет по-прежнему существовать, если не будет удален явным образом. При добавлении элемента к другому контейнеру, он сохранит последнее известное состояние.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeElement"><apiName>removeElement</apiName><shortdesc>
      
      Удаляет указанный визуальный элемент из списка нижестоящих элементов данного контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Удаленный элемент.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Элемент, удаляемый из контейнера.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Удаляет указанный визуальный элемент из списка нижестоящих элементов данного контейнера. Позиции индекса элементов, расположенных над элементом в этом визуальном контейнере, уменьшаются на 1.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      
      Удаляет визуальный элемент из указанной позиции индекса в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Удаленный элемент.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс удаляемого элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Удаляет визуальный элемент из указанной позиции индекса в контейнере. Позиции индекса элементов, расположенных над элементом в этом визуальном контейнере, уменьшаются на 1.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:scrollChildren"><apiName>scrollChildren</apiName><shortdesc>
      Размещает область содержимого контейнера относительно видимой области на основе свойств horizontalScrollPosition и verticalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Размещает область содержимого контейнера относительно видимой области на основе свойств horizontalScrollPosition и verticalScrollPosition. Содержимое, не отображаемое в видимой области, отсекается. Этот метод должен быть переопределен подклассами, имеющими прокручиваемый хром в области содержимого.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
      Устанавливает индекс определенного нижестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Ссылка на нижестоящий элемент с получаемым индексом.
     
      </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Число, указывающее новый индекс. Должно быть целым числом от 0 до (numChildren – 1).
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Устанавливает индекс определенного нижестоящего элемента. См. описание метода <codeph>getChildIndex()</codeph> для получения описания индекса нижестоящего элемента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      
      Изменяет позицию существующего нижестоящего элемента в визуальном контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Элемент, для которого требуется изменить номер индекса.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Полученный в результате номер индекса для элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Изменяет позицию существующего нижестоящего элемента в визуальном контейнере.
     
      <p>При использовании метода <codeph>setElementIndex()</codeph> и указании уже занятой позиции индекса меняются только позиции между прежней и новой позицией элемента. Все остальные позиции остаются без изменения.</p>
     
      <p>Если визуальный элемент перемещается на более низкую позицию, индекс всех элементов между позициями возрастает на 1. Если элемент перемещается на более высокую позицию, индекс всех элементов между позициями понижается на 1.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:swapElements"><apiName>swapElements</apiName><shortdesc>
      
      Меняет местами индексы двух указанных визуальных элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Первый визуальный элемент.
     
      </apiDesc></apiParam><apiParam><apiItemName>element2</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Второй визуальный элемент.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Меняет местами индексы двух указанных визуальных элементов. Позиции индекса других элементов не изменяются.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      
      Меняет местами визуальные элементы в двух указанных позициях индекса в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/><apiDesc>Индекс первого элемента.
     
      </apiDesc></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/><apiDesc>Индекс второго элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Меняет местами визуальные элементы в двух указанных позициях индекса в контейнере. Позиции индекса остальных визуальных элементов не меняются.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Container:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      Установите позиции и размеры нижестоящих элементов этого контейнера в ответ на изменение размера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Указывает ширину компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleX</codeph> компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Указывает высоту компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleY</codeph> компонента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Установите позиции и размеры нижестоящих элементов этого контейнера в ответ на изменение размера.
     
      <p>Для получения дополнительной информации о методе <codeph>updateDisplayList()</codeph> см. описание метода <codeph>UIComponent.updateDisplayList()</codeph>.</p>
     
      <p>Метод <codeph>Container.updateDisplayList()</codeph> устанавливает позицию и размер границы контейнера Container. В каждом подклассе Container метод подкласса<codeph>updateDisplayList()</codeph> должен выполнить вызов метода <codeph>super.updateDisplayList()</codeph> для правильного установления границы.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links></apiOperation><apiValue id="mx.core:Container:protected:actualCreationPolicy"><apiName>actualCreationPolicy</apiName><shortdesc>
      Политика создания этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      Политика создания этого контейнера. 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:autoLayout:get"><apiName>autoLayout</apiName><shortdesc>
      При значении true измерение и макет выполняются при изменении позиции или размера нижестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      При значении <codeph>true</codeph> измерение и макет выполняются при изменении позиции или размера нижестоящего элемента. При значении <codeph>false</codeph> измерение и макет выполняются только однажды, при добавлении или удалении нижестоящих элементов из контейнера.
     
      <p>При использовании эффекта Move макет вокруг перемещающегося компонента не регулируется для соответствия анимации эффекта Move. Установка свойства контейнера <codeph>autoLayout</codeph> на <codeph>true</codeph> не влияет на его поведение.</p>
     
      <p>Если свойство <codeph>autoLayout</codeph> установлено на <codeph>false</codeph>, эффект Zoom не работает.</p>
     
      <p>Свойство <codeph>autoLayout</codeph> не применимо к контейнерам Accordion или ViewStack.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Возвращает объект EdgeMetrics, имеющий четыре свойства: left, top, right и bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Возвращает объект EdgeMetrics, имеющий четыре свойства: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> и <codeph>bottom</codeph>. Значение каждого свойства равно толщине одной из сторон границы в пикселях.
     
      <p><codeph/></p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:childDescriptors:get"><apiName>childDescriptors</apiName><shortdesc>
      Массив объектов UIComponentDescriptor, созданных компилятором MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив объектов UIComponentDescriptor, созданных компилятором MXML.
     
      <p>Каждый объект UIComponentDescriptor содержит информацию, указанную в нижестоящем теге MXML тега контейнера MXML. Порядок следования объектов UIComponentDescriptor в массиве совпадает с порядком следования нижестоящих тегов. Во время инициализации нижестоящие дескрипторы используются для создания нижестоящих объектов контейнера UIComponent и установки указанных в MXML начальных значений свойств, обработчиков событий, эффектов и пр.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:clipContent:get"><apiName>clipContent</apiName><shortdesc>
      Определяет необходимость применения маски отсечения, если позиции и/или размеры нижестоящих элементов контейнера располагаются за пределами границ этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет необходимость применения маски отсечения, если позиции и/или размеры нижестоящих элементов контейнера располагаются за пределами границ этого контейнера. Если установлено значение <codeph>false</codeph>, то нижестоящие элементы этого контейнера остаются видимыми при перемещении или при установлении размера за пределами границ этого контейнера. Если установлено значение <codeph>true</codeph>, нижестоящие элементы этого контейнера отсекаются.
     
      <p>Если для <codeph>clipContent</codeph> установлено значение <codeph>false</codeph>, прокрутка для этого контейнера отключается, и полосы прокрутки не будут отображаться. Если для <codeph>clipContent</codeph> установлено значение true, то полосы прокрутки, как правило, отображаются, если нижестоящие элементы контейнера расположены за пределами границ контейнера. Для дополнительного управления внешним видом полосы прокрутки см. <codeph>horizontalScrollPolicy</codeph> и <codeph>verticalScrollPolicy</codeph>.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:contentMouseX:get"><apiName>contentMouseX</apiName><shortdesc conref="mx.core.UIComponent#contentMouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:contentMouseY:get"><apiName>contentMouseY</apiName><shortdesc conref="mx.core.UIComponent#contentMouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#contentMouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc>
      Контейнеры используют внутреннюю область содержимого для управления прокруткой.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Контейнеры используют внутреннюю область содержимого для управления прокруткой. Для <codeph>creatingContentPane</codeph> установлено значение <codeph>true</codeph>, если контейнер создает область содержимого, так что некоторые события могут игнорироваться или блокироваться.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creationIndex:get"><apiName>creationIndex</apiName><shortdesc>
      Указывает порядок создания экземпляров и вывода на экран нижестоящих элементов контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает порядок создания экземпляров и вывода на экран нижестоящих элементов контейнера.
     
      <p>Это свойство можно использовать только при установке свойства <codeph>creationPolicy</codeph> на <codeph>ContainerCreationPolicy.QUEUED</codeph>. В противном случае оно игнорируется.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      Политика создания нижестоящего элемента для этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Политика создания нижестоящего элемента для этого контейнера. Допустимые значения ActionScript: <codeph>ContainerCreationPolicy.AUTO</codeph>, <codeph>ContainerCreationPolicy.ALL</codeph>, <codeph>ContainerCreationPolicy.NONE</codeph> или <codeph>ContainerCreationPolicy.QUEUED</codeph>. Возможные значения MXML: <codeph>auto</codeph>, <codeph>all</codeph>, <codeph>none</codeph> или <codeph>queued</codeph>.
     
      <p>Если для контейнера не указано свойство <codeph>creationPolicy</codeph>, он наследует <codeph>creationPolicy</codeph> вышестоящего контейнера. Если для приложения не указано свойство <codeph>creationPolicy</codeph>, по умолчанию устанавливается <codeph>ContainerCreationPolicy.AUTO</codeph>.</p>
     
      <p><codeph>creationPolicy</codeph> <codeph>ContainerCreationPolicy.AUTO</codeph> означает, что контейнер задерживает создание некоторых или всех нижестоящих элементов, пока они не потребуются; этот процесс называется <i>отложенная реализация</i>. Эта политика обеспечивает наилучший момент запуска, так как первоначально создается меньшее число UIComponents. Однако это приводит к задержкам при навигации при переходе пользователя к другим частям приложения в первый раз. Контейнеры навигатора, как, например, Accordion, TabNavigator и ViewStack, реализуют стратегию <codeph>ContainerCreationPolicy.AUTO</codeph>, создавая все нижестоящие элементы немедленно, но ожидают выбора нижестоящего элемента контейнера навигатора для создания нижестоящих элементов более низкого уровня.</p>
     
      <p>Свойство <codeph>creationPolicy</codeph> <codeph>ContainerCreationPolicy.ALL</codeph> означает, что контейнеры навигатора немедленно создают нижестоящие элементы более низкого уровня для каждого нижестоящего элемента, а не ожидает выбора нижестоящего элемента. Для контейнеров с одним представлением, например, контейнер VBox, отсутствует разница между политикой <codeph>ContainerCreationPolicy.AUTO</codeph> и <codeph>ContainerCreationPolicy.ALL</codeph>.</p>
     
      <p>Свойство <codeph>creationPolicy</codeph> <codeph>ContainerCreationPolicy.QUEUED</codeph> означает, что контейнер не создается и выводится сразу, а добавляется в очередь создания. Когда приложение обрабатывает поставленный в очередь контейнер, оно создает нижестоящие элементы контейнера и ожидает их создания до перехода к следующему контейнеру в очереди создания.</p>
     
      <p>Свойство <codeph>creationPolicy</codeph> <codeph>ContainerCreationPolicy.NONE</codeph> означает, что контейнер не создает нижестоящие элементы. В этом случае автор MXML берет на себя ответственность по созданию нижестоящих элементов при помощи вызова метода <codeph>createComponentsFromDescriptors()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:data:get"><apiName>data</apiName><shortdesc>
      Свойство data позволяет передавать значение в компонент при его использовании в средстве визуализации или в редакторе элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство <codeph>data</codeph> позволяет передавать значение в компонент при его использовании в средстве визуализации или в редакторе элементов. Привязка данных, как правило, используется для привязки поля свойства <codeph>data</codeph> к свойству данного компонента.
     
      <p>Это свойство не устанавливается в MXML.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:defaultButton:get"><apiName>defaultButton</apiName><shortdesc>
      Элемент управления Button, определенный в качестве кнопки по умолчанию для контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Элемент управления Button, определенный в качестве кнопки по умолчанию для контейнера. При фокусе, установленном на элементах управления в контейнере, нажатие клавиши Enter эквивалентно нажатию элемента управления Button
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      IDeferredContentOwner – эквивалент processedDescriptors
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      IDeferredContentOwner – эквивалент processedDescriptors
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/processedDescriptors"><linktext>UIComponent.processedDescriptors</linktext></link></related-links></apiValue><apiValue id="mx.core:Container:horizontalLineScrollSize:get"><apiName>horizontalLineScrollSize</apiName><shortdesc>
      Число пикселей для перемещения при нажатии клавиши со стрелкой влево или со стрелкой вправо.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число пикселей для перемещения при нажатии клавиши со стрелкой влево или со стрелкой вправо.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalPageScrollSize:get"><apiName>horizontalPageScrollSize</apiName><shortdesc>
      Число пикселей для перемещения при нажатии на горизонтальную полосу прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число пикселей для перемещения при нажатии на горизонтальную полосу прокрутки. Значение 0 означает, что размер страницы будет вычислен для перехода в полноэкранный режим.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollBar:get"><apiName>horizontalScrollBar</apiName><shortdesc>
      Горизонтальная полоса прокрутки, используемая в этом контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Горизонтальная полоса прокрутки, используемая в этом контейнере. Это свойство имеет значение null, если в настоящий момент не отображается горизонтальная полоса прокрутки. Доступ к этому свойству напрямую обычно не осуществляется. Изменение свойств <codeph>horizontalScrollPolicy</codeph> и <codeph>horizontalScrollPosition</codeph> позволяет полностью управлять полосой прокрутки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      Указывает на постоянное наличие, отсутствие или возможность автоматического добавления горизонтальной полосы прокрутки при необходимости.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает на постоянное наличие, отсутствие или возможность автоматического добавления горизонтальной полосы прокрутки при необходимости. Допустимые значения ActionScript: <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> и <codeph>ScrollPolicy.AUTO</codeph>. Значения MXML могут равняться <codeph>on</codeph>, <codeph>off</codeph> и <codeph>auto</codeph>.
     
      <p>Установка для этого свойства значения <codeph>ScrollPolicy.OFF</codeph> обеспечивает отсутствие эффекта для свойства <codeph>horizontalScrollPosition</codeph>.</p>
     
      <p>Примечание. Это свойство не применяется по отношению к контейнеру ControlBar.</p>
     
      <p>Если <codeph>horizontalScrollPolicy</codeph> имеет значение <codeph>ScrollPolicy.AUTO</codeph>, горизонтальная полоса прокрутки отображается в случае истинности следующих утверждений:</p>
      <ul>
        <li>Один из нижестоящих элементов контейнера расположен за пределами левой или правой границы контейнера.</li>
        <li>Свойство <codeph>clipContent</codeph> имеет значение <codeph>true</codeph>.</li>
        <li>Ширина и высота контейнера являются достаточными для размещения полосы прокрутки.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Текущая позиция горизонтальной полосы прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Текущая позиция горизонтальной полосы прокрутки. Она совпадает по размеру с расстоянием в пикселях между левой границей прокручиваемой области и крайней левой частью видимой в настоящий момент области.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:icon:get"><apiName>icon</apiName><shortdesc>
      Класс значка, отображаемого некоторыми контейнерами навигатора для представления этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Класс значка, отображаемого некоторыми контейнерами навигатора для представления этого контейнера.
     
      <p>Например, если этот контейнер является нижестоящим элементом TabNavigator, этот значок отобразится в соответствующем поле. Если этот контейнер является нижестоящим элементом Accordion, этот значок отобразится в соответствующей области заголовка.</p>
     
      <p>Для встраивания значка в SWF-файл используйте директиву компилятора MXML @Embed():</p>
     
      <pre>
        icon="@Embed('filepath')"
      </pre>
     
      <p>Изображение может быть файлом JPEG, GIF, PNG, SVG или SWF.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:label:get"><apiName>label</apiName><shortdesc>
      Текст, отображаемый некоторыми контейнерами навигатора для представления этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Текст, отображаемый некоторыми контейнерами навигатора для представления этого контейнера.
     
      <p>Например, если этот контейнер является нижестоящим элементом TabNavigator, строка отображается на соответствующей вкладке. Если этот контейнер является нижестоящим элементом Accordion, эта строка появляется в соответствующей области заголовка.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      Максимальное значение для свойства horizontalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Максимальное значение для свойства <codeph>horizontalScrollPosition</codeph>. Устанавливает по умолчанию 0 при отсутствии горизонтальной полосы прокрутки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
      Максимальное значение для свойства verticalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Максимальное значение для свойства <codeph>verticalScrollPosition</codeph>. Устанавливает по умолчанию 0 при отсутствии вертикальной полосы прокрутки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:numChildren:get"><apiName>numChildren</apiName><shortdesc>
      Число нижестоящих компонентов в этом контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Число нижестоящих компонентов в этом контейнере.
     
      <p>Число нижестоящих элементов первоначально равно числу нижестоящих элементов, объявленных в MXML. Во время выполнения новые нижестоящие элементы могут быть добавлены при помощи вызова метода <codeph>addChild()</codeph> или <codeph>addChildAt()</codeph>, а существующие нижестоящие элементы могут быть удалены при помощи вызова метода <codeph>removeChild()</codeph>, <codeph>removeChildAt()</codeph> или <codeph>removeAllChildren()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:numElements:get"><apiName>numElements</apiName><shortdesc>
      
      Количество визуальных элементов в данном контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      
      Количество визуальных элементов в данном контейнере. Визуальные элементы включают в себя классы, которые реализуют интерфейс IVisualElement, например, подклассы UIComponent и GraphicElement.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
      Как правило, контейнер содержит нижестоящие компоненты, которые могут быть перечислены с использованием метода Container.getChildAt() и свойства Container.numChildren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
      Как правило, контейнер содержит нижестоящие компоненты, которые могут быть перечислены с использованием метода <codeph>Container.getChildAt()</codeph> и свойства <codeph>Container.numChildren</codeph>. Кроме того, контейнер может содержать элементы стиля и темы оформления, как, например, граница и фон. Flash Player и AIR не различают нижестоящие элементы и темы оформления. Они доступны с использованием метода проигрывателя <codeph>getChildAt()</codeph> и свойства <codeph>numChildren</codeph>. Однако класс Container переопределяет метод <codeph>getChildAt()</codeph> и свойство <codeph>numChildren</codeph> (и несколько других методов) для создания иллюзии, что нижестоящие элементы контейнера являются единственными нижестоящими компонентами.
     
      <p>При необходимости получения доступа ко всем нижестоящим элементам контейнера (нижестоящим элементам содержимого и темам оформления) используйте методы и свойства в свойстве <codeph>rawChildren</codeph> вместо стандартных методов контейнера. Например, используйте метод <codeph>Container.rawChildren.getChildAt())</codeph>. Однако, если контейнер создает объект ContentPane Sprite для нижестоящих элементов, значение свойства <codeph>rawChildren</codeph> учитывается только для ContentPane, а не для нижестоящих элементов контейнера. Определение наличия ContentPane для контейнера не всегда возможно.</p>
     
      <p><b>Примечание.</b>При вызове метода <codeph>addChild</codeph> или <codeph>addChildAt</codeph> объекта <codeph>rawChildren</codeph> установите значение <codeph>tabFocusEnabled = false</codeph> для добавляемого компонента. Выполнение этой операции предотвращает табулирование только к видимым добавленным компонентам.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalLineScrollSize:get"><apiName>verticalLineScrollSize</apiName><shortdesc>
      Число пикселей для прокрутки при нажатии кнопки со стрелкой вверх или со стрелкой вниз на вертикальной полосе прокрутки или при прокрутке при помощи колесика мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число пикселей для прокрутки при нажатии кнопки со стрелкой вверх или со стрелкой вниз на вертикальной полосе прокрутки или при прокрутке при помощи колесика мыши.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalPageScrollSize:get"><apiName>verticalPageScrollSize</apiName><shortdesc>
      Число пикселей для прокрутки при нажатии на вертикальную полосу прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0   
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число пикселей для прокрутки при нажатии на вертикальную полосу прокрутки. Значение 0 означает, что размер страницы будет вычислен для перехода в полноэкранный режим.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollBar:get"><apiName>verticalScrollBar</apiName><shortdesc>
      Вертикальная полоса прокрутки, используемая в этом контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Вертикальная полоса прокрутки, используемая в этом контейнере. Это свойство имеет значение null, если в настоящий момент вертикальная полоса прокрутки не отображается. Доступ к этому свойству напрямую обычно не осуществляется. Изменение свойств <codeph>verticalScrollPolicy</codeph> и <codeph>verticalScrollPosition</codeph> обеспечивает достаточный контроль над полосой прокрутки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      Указывает на постоянное наличие, отсутствие или возможность автоматического добавления вертикальной полосы прокрутки при необходимости.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает на постоянное наличие, отсутствие или возможность автоматического добавления вертикальной полосы прокрутки при необходимости. Допустимые значения: <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> и <codeph>ScrollPolicy.AUTO</codeph>. Значения MXML могут равняться <codeph>on</codeph>, <codeph>off</codeph> и <codeph>auto</codeph>.
     
      <p>Установка для этого свойства значения <codeph>ScrollPolicy.OFF</codeph> обеспечивает отсутствие эффекта для свойства <codeph>verticalScrollPosition</codeph>.</p>
     
      <p>Примечание. Это свойство не применяется по отношению к контейнеру ControlBar.</p>
     
      <p>Если <codeph>verticalScrollPolicy</codeph> имеет значение <codeph>ScrollPolicy.AUTO</codeph>, вертикальная полоса прокрутки отображается в случае истинности следующих утверждений:</p>
      <ul>
        <li>Один из нижестоящих элементов контейнера расположен за пределами верхней или нижней границ контейнера.</li>
        <li>Свойство <codeph>clipContent</codeph> имеет значение <codeph>true</codeph>.</li>
        <li>Ширина и высота контейнера являются достаточными для размещения полосы прокрутки.</li>
      </ul>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      Текущая позиция вертикальной полосы прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Текущая позиция вертикальной полосы прокрутки. Она совпадает по размеру с расстоянием в пикселях между верхней границей прокручиваемой области и крайней верхней частью видимой в настоящий момент области.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
      Возвращает объект, имеющий четыре свойства: left, top, right и bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Возвращает объект, имеющий четыре свойства: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> и <codeph>bottom</codeph>. Значение каждого свойства равно толщине хрома (визуальные элементы) вокруг границы контейнера. 
     
      <p>Хром включает толщину границ. Если свойство <codeph>horizontalScrollPolicy</codeph> или <codeph>verticalScrollPolicy</codeph> имеют значение <codeph>ScrollPolicy.ON</codeph>, хром также включает толщину соответствующей полосы прокрутки. Если стратегия прокрутки имеет значение <codeph>ScrollPolicy.AUTO</codeph>, измерение хрома не включает толщину полосы прокрутки даже в случае ее отображения.</p>
     
      <p>Подклассы контейнера должны переопределять этот метод так, чтобы они могли учитывать другой хром при расположении нижестоящих элементов контейнера. Например, свойство<codeph>viewMetrics</codeph> для класса Panel должно возвращать объект, свойство <codeph>top</codeph> которого включает толщину строки заголовка контейнера Panel.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Container:viewMetricsAndPadding:get"><apiName>viewMetricsAndPadding</apiName><shortdesc>
      Возвращает объект, имеющий четыре свойства: left, top, right и bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Возвращает объект, имеющий четыре свойства: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> и <codeph>bottom</codeph>. Значение каждого свойства равно толщине хрома (визуальные элементы) вокруг границы контейнера в совокупности с толщиной полей объекта.
     
      <p>Хром включает толщину границ. Если свойство <codeph>horizontalScrollPolicy</codeph> или <codeph>verticalScrollPolicy</codeph> имеют значение <codeph>ScrollPolicy.ON</codeph>, хром также включает толщину соответствующей полосы прокрутки. Если стратегия прокрутки имеет значение <codeph>ScrollPolicy.AUTO</codeph>, измерение хрома не включает толщину полосы прокрутки даже в случае ее отображения.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IProgrammaticSkin"><apiName>IProgrammaticSkin</apiName><shortdesc>
  Интерфейс IProgrammaticSkin определяет интерфейс, который должны реализовать классы темы для оформления, если они используют интерфейс темы оформления для свойства name.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IProgrammaticSkin определяет интерфейс, который должны реализовать классы темы для оформления, если они используют интерфейс темы оформления для свойства <codeph>name</codeph>. 
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IProgrammaticSkin:mx.core:IProgrammaticSkin:validateDisplayList"><apiName>validateDisplayList</apiName><shortdesc conref="mx.skins.ProgrammaticSkin#validateDisplayList()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.ProgrammaticSkin#validateDisplayList()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IProgrammaticSkin:mx.core:IProgrammaticSkin:validateNow"><apiName>validateNow</apiName><shortdesc conref="mx.skins.ProgrammaticSkin#validateNow()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.skins.ProgrammaticSkin#validateNow()">
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
  ByteArrayAsset – это подкласс класса flash.utils.ByteArray, который представляет собой произвольную последовательность байтовых данных, встраиваемых в приложение Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.utils:ByteArray</apiBaseClassifier></apiClassifierDef><apiDesc>
  ByteArrayAsset – это подкласс класса flash.utils.ByteArray, который представляет собой произвольную последовательность байтовых данных, встраиваемых в приложение Flex.
 
  <p>Встраиваемые байтовые данные могут находиться в любом файле, который всегда встраивается полностью. Встраивание байтов определенного ресурса из файла SWF недопустимо, но возможно встраивание всего файла SWF.</p>
 
  <p>Компилятор MXML автоматически создает класс, который расширяет класс ByteArrayAsset для представления встроенной анимации.</p>
 
  <p>Для встраивания произвольного файла объявляется переменная типа Class, в которой с помощью MIME-типа <codeph>application/octet-stream</codeph> размещаются метаданные <codeph>[Embed]</codeph>. Например, текстовый файл встраивается следующим образом:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Story.txt", mimeType="application/octet-stream")]
  private var storyClass:Class;
  </pre>
 
  <p>Компилятор автоматически создает подкласс класса ByteArrayAsset и приравнивает переменную к ссылке на созданный класс. Это ссылку класса затем можно использовать для создания экземпляров ByteArrayAsset с помощью оператора <codeph>new</codeph>. Извлечение данных из массива байтов выполняется с помощью методов класса ByteArray:</p>
 
  <pre>
  var storyByteArray:ByteArrayAsset = ByteArrayAsset(new storyClass());
  var story:String = storyByteArray.readUTFBytes(storyByteArray.length);
  </pre>
 
  <p>Следует указать, что для встраивания используется MIME-тип <codeph>application/octet-stream</codeph>, который отображает байтовые данные «как есть», без обработки. Это также позволяет автоматически созданному классу расширять класс ByteArrayAssetasset, а не другой класс ресурса.</p>
 
  <p>Например, при встраивании PNG-файла без указания этого MIME-типа данные PNG будут автоматически перекодированы в формат растрового изображения, используемый проигрывателем, а для представления изображения будет автоматически создан подкласс BitmapAsset. Однако если будет указан MIME-тип <codeph>application/octet-stream</codeph>, то преобразование не будет выполнено, данные PNG будут встроены без изменений, а автоматически созданный класс будет расширять объект ByteArrayAsset.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ByteArrayAsset:ByteArrayAsset"><apiName>ByteArrayAsset</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:UIComponentDescriptor"><apiName>UIComponentDescriptor</apiName><shortdesc>
  Экземпляр UIComponentDescriptor инкапсулирует информацию, указанную в теге MXML для экземпляра визуального компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:ComponentDescriptor</apiBaseClassifier></apiClassifierDef><apiDesc>
  Экземпляр UIComponentDescriptor инкапсулирует информацию, указанную в теге MXML для экземпляра визуального компонента.
 
  <p>Большинство тегов в файле MXML описывает дерево объектов UIComponent. Например, тег <codeph>&lt;mx:Application></codeph> представляет объект UIComponent, а все нижестоящие контейнеры и элементы управления являются объектами UIComponent.</p>
 
  <p>Компилятор MXML компилирует все теги MXML в экземпляр UIComponentDescriptor. А именно, компилятор MXML автоматически создает структуру данных ActionScript, которая является деревом объектов UIComponentDescriptor.</p>
 
  <p>Во время выполнения метод <codeph>createComponentsFromDescriptors()</codeph> класса Container использует информацию в объектах UIComponentDescriptor в массиве контейнера <codeph>childDescriptors</codeph> для создания фактических объектов UIComponent, которые являются нижестоящими элементами контейнера, а также нижестоящих элементов более низкого уровня. В зависимости от значения свойства контейнера <codeph>creationPolicy</codeph>, нижестоящие элементы могут быть созданы во время запуска приложения, когда часть компонента становится видимой или когда разработчик приложений вручную вызывает метод <codeph>createComponentsFromDescriptors()</codeph>.</p>
 
  <p>Как правило, самостоятельное создание экземпляров UIComponentDescriptor не требуется; получение доступа к экземплярам, автоматически созданным компилятором MXML, осуществляется посредством массива класса Container <codeph>childDescriptors</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container/childDescriptors"><linktext>mx.core.Container.childDescriptors</linktext></link><link href="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link><link href="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>mx.core.Container.createComponentsFromDescriptors()</linktext></link></related-links><apiConstructor id="mx.core:UIComponentDescriptor:UIComponentDescriptor"><apiName>UIComponentDescriptor</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>descriptorProperties</apiItemName><apiType value="Object"/><apiDesc>Объект, содержащий пары «имя – значение» для свойств объекта UIComponentDescriptor, как, например, <codeph>type</codeph>, <codeph>id</codeph>, <codeph>propertiesFactory</codeph>, <codeph>events</codeph>, <codeph>stylesFactory</codeph> и <codeph>effects</codeph>.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:UIComponentDescriptor:effects"><apiName>effects</apiName><shortdesc>
      Массив, содержащий эффекты для компонента, указанные в MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив, содержащий эффекты для компонента, указанные в MXML.
     
      <p>Например, при написании следующего кода:</p>
	 
      <pre>
	  &lt;mx:TextInput showEffect="Fade" hideEffect="Fade"/></pre>
	 
      <p>Свойство дескриптора <codeph>effects</codeph> является массивом <codeph>[showEffect, hideEffect]</codeph>.</p>
     
      <p>При отсутствии указания эффектов MXML для компонента свойство <codeph>effects</codeph> имеет значение <codeph>null</codeph>.</p>
	 
	  <p>Учтите, что значения атрибутов эффекта в этом свойстве не определены. Эффекты обрабатываются как стили и поэтому включены в свойство <codeph>stylesFactory</codeph>. Массив <codeph>effect</codeph> только отслеживает, какие из стилей в свойстве <codeph>stylesFactory</codeph> фактически являются эффектами.</p>
	 
      <p>Эти свойства используются методом контейнера <codeph>createComponentsFromDescriptors()</codeph> для регистрации эффектов посредством EffectManager.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UIComponentDescriptor:stylesFactory"><apiName>stylesFactory</apiName><shortdesc>
      Функция, которая создает объект, содержащий пары «имя – значение» для стилей экземпляра компонента, указанных в MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Функция, которая создает объект, содержащий пары «имя – значение» для стилей экземпляра компонента, указанных в MXML.
	 
	  <p>Например, при написании следующего кода:</p>
	 
      <pre>
	  &lt;mx:TextInput borderColor="0x888888" color="0xDDDDDD"/></pre>
	 
	  <p>Свойство дескриптора <codeph>stylesFactory</codeph> имеет значение Function:</p>
	 
      <pre>
	  function():void { this.borderColor = 0x888888; this.color = 0xDDDDDD };</pre>
	 
      <p>Если для экземпляра компонента не указаны стили MXML, свойство <codeph>stylesFactory</codeph> будет иметь значение <codeph>null</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
  FlexLoader является подклассом класса Loader для проигрывателя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Loader</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexLoader является подклассом класса Loader для проигрывателя. Этот подкласс переопределяет метод <codeph>toString()</codeph>, настраивая его на возврат строки, указывающей расположение объекта в иерархии объектов DisplayObject в приложении.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexLoader:FlexLoader"><apiName>FlexLoader</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
     
      <p>Устанавливает свойство <codeph>name</codeph> равным строке, которая возвращается методом <codeph>createUniqueName()</codeph> класса mx.utils.NameUtils.</p>
      <p>Эта строка представляет собой имя класса объекта, сцепленное с целым числом, уникальным для всего приложения, например <codeph>FlexLoader13</codeph>.</p>
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/createUniqueName()"><linktext>mx.utils.NameUtils.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexLoader:toString"><apiName>toString</apiName><shortdesc>
      Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, указывающая расположение этого объекта в иерархии DisplayObject. 
     
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении. Эта строка, например <codeph>MyApp0.HBox5.FlexLoader13</codeph>, создается методом <codeph>displayObjectToString()</codeph> класса mx.utils.NameUtils на основе свойства <codeph>name</codeph> для объекта и его предшествующих элементов.
      
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="" invalidHref="mx.utils.xml#NameUtils/displayObjectToString()"><linktext>mx.utils.NameUtils.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IUID"><apiName>IUID</apiName><shortdesc>
  Интерфейс IUID определяет интерфейс для объектов, которые должны иметь уникальные идентификаторы (UID) для однозначного определения объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IUID определяет интерфейс для объектов, которые должны иметь уникальные идентификаторы (UID) для однозначного определения объекта. В большинстве случаев при использовании Flex UID не должны быть универсальными уникальными идентификаторами. Исключение составляют сообщения, отправляемые службами данных.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IUID:mx.core:IUID:uid:get"><apiName>uid</apiName><shortdesc>
	  Уникальный идентификатор этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Уникальный идентификатор этого объекта.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexShape"><apiName>FlexShape</apiName><shortdesc>
  FlexShape является подклассом класса Shape для проигрывателя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Shape</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexShape является подклассом класса Shape для проигрывателя. Этот подкласс переопределяет метод <codeph>toString()</codeph>, настраивая его на возврат строки, указывающей расположение объекта в иерархии объектов DisplayObject в приложении.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexShape:FlexShape"><apiName>FlexShape</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
	 
	  <p>Устанавливает свойство <codeph>name</codeph> равным строке, которая возвращается методом <codeph>createUniqueName()</codeph> класса mx.utils.NameUtils.</p>
	 
	  <p>Эта строка представляет собой имя класса объекта, сцепленное с целым числом, уникальным для всего приложения, например <codeph>FlexShape15</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexShape:toString"><apiName>toString</apiName><shortdesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, указывающая расположение этого объекта в иерархии DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении. Эта строка, например <codeph>MyApp0.HBox5.FlexShape15</codeph>, создается методом <codeph>displayObjectToString()</codeph> класса mx.utils.NameUtils на основе свойства <codeph>name</codeph> для объекта и его предшествующих элементов.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:INavigatorContent"><apiName>INavigatorContent</apiName><shortdesc>
  Интерфейс INavigatorContent определяет интерфейс, который должен быть реализован контейнером, используемым в качестве нижестоящего элемента контейнера навигатора, например, ViewStack, TabNavigato и Accordion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredContentOwner</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс INavigatorContent определяет интерфейс, который должен быть реализован контейнером, используемым в качестве нижестоящего элемента контейнера навигатора, например, ViewStack, TabNavigato и Accordion.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Accordion"><linktext>mx.containers.Accordion</linktext></link><link href="mx.containers.xml#TabNavigator"><linktext>mx.containers.TabNavigator</linktext></link><link href="mx.containers.xml#ViewStack"><linktext>mx.containers.ViewStack</linktext></link></related-links><apiValue id="mx.core:INavigatorContent:mx.core:INavigatorContent:icon:get"><apiName>icon</apiName><shortdesc>
      Значок, отображаемый контейнером навигатора для этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Class"/></apiValueDef><apiDesc>
      Значок, отображаемый контейнером навигатора для этого контейнера. Значок появляется на кнопке контейнера Accordion и на вкладке контейнера TabNavigator.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:INavigatorContent:mx.core:INavigatorContent:label:get"><apiName>label</apiName><shortdesc>
      Текст, отображаемый контейнером навигатора для этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Текст, отображаемый контейнером навигатора для этого контейнера. Например, текст появляется на кнопке контейнера Accordion и на вкладке контейнера TabNavigator.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FontAsset"><apiName>FontAsset</apiName><shortdesc>
  FontAsset – это подкласс класса flash.text.Font, который представляет шрифты, встраиваемые в приложение Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.text:Font</apiBaseClassifier></apiClassifierDef><apiDesc>
  FontAsset – это подкласс класса flash.text.Font, который представляет шрифты, встраиваемые в приложение Flex.
 
  <p>Встраиваемый шрифт может быть шрифтом TrueType (TTF) или OpenType (OTF). Возможно также встраивание системного шрифта или шрифта, который расположен в файле SWF, созданном в Flash. В любом случае компилятор MXML автоматически создает класс, который расширяет класс FontAsset для представления встроенного шрифта.</p>
 
  <p>Класс FontAsset обычно не используется напрямую при создании приложения Flex. Например, шрифт можно встроить с помощью переключателя CSS <codeph>font-face</codeph>, не учитывая то, что компилятор MXML создал подкласс класса FontAsset.</p>
 
  <p>При этом понимание процессов на уровне ActionScript может оказаться полезным. Для встраивания шрифта в ActionScript объявляется переменная типа Class, в которой размещаются метаданные <codeph>[Embed]</codeph>. Например, файл TTF встраивается следующим образом:</p>
 
  <pre>
  [Embed(source="Fancy.ttf", fontName="Fancy")] 
  var fancyClass:Class;
  </pre>
 
  <p>Компилятор MXML преобразует данные TTF в формат, используемый проигрывателем, автоматически создает подкласс класса FontAsset и настраивает переменную, которая становится ссылкой на этот автоматически созданный класс. Это ссылку класса затем можно использовать для создания экземпляров FontAsset с помощью оператора <codeph>new</codeph>, для которых допустимо использование API класса Font, например:</p>
 
  <pre>
  var fancyFont:FontAsset = FontAsset(new fancyClass());
  var hasDigits:Boolean = fancyFont.hasGlyphs("0123456789");
  </pre>
 
  <p>В то же время необходимость самостоятельного создания экземпляров FontAsset возникает редко, так как для ссылки на шрифт используется имя <codeph>fontName</codeph>, указываемое в метаданных <codeph>[Embed]</codeph>. Например, стиль CSS <codeph>fontFamily</codeph> приравнивается имени шрифта (<codeph>Fancy</codeph> в этом примере), а не экземпляру FontAsset (<codeph>fancyFont</codeph>) или ссылке класса <codeph>fancyClass</codeph>. Например:</p>
 
  <pre>
  &lt;mx:Label text="Thank you for your order." fontFamily="Fancy"/>
  </pre>
  
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.Font.xml"><linktext>flash.text.Font</linktext></link></related-links><apiConstructor id="mx.core:FontAsset:FontAsset"><apiName>FontAsset</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:ScrollPolicy"><apiName>ScrollPolicy</apiName><shortdesc>
  Значения для свойств horizontalScrollPolicy и verticalScrollPolicy классов Container и ScrollControlBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Значения для свойств <codeph>horizontalScrollPolicy</codeph> и <codeph>verticalScrollPolicy</codeph> классов Container и ScrollControlBase.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="mx.core.xml#ScrollControlBase"><linktext>mx.core.ScrollControlBase</linktext></link></related-links><apiValue id="mx.core:ScrollPolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
	  Отображение полосы прокрутки, если нижестоящие элементы превышают измерение владельца.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Отображение полосы прокрутки, если нижестоящие элементы превышают измерение владельца. Размер владельца не корректируется с учетом появления полос прокрутки, поэтому полоса прокрутки может загораживать содержимое элемента управления или контейнера.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollPolicy:OFF"><apiName>OFF</apiName><shortdesc>
	  Никогда не отображать полосу прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Никогда не отображать полосу прокрутки.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollPolicy:ON"><apiName>ON</apiName><shortdesc>
	  Всегда отображать полосу прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Всегда отображать полосу прокрутки. Размер полосы прокрутки автоматически добавляется к размеру содержимого владельца, чтобы определить размер владельца, если эти сведения не указаны явным образом.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IStateClient"><apiName>IStateClient</apiName><shortdesc>
  Интерфейс IStateClient определяет интерфейс, который должен реализовываться компонентами для поддержки представлений состояния.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IStateClient определяет интерфейс, который должен реализовываться компонентами для поддержки представлений состояния.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IStateClient:mx.core:IStateClient:currentState:get"><apiName>currentState</apiName><shortdesc>
      Текущее состояние представления</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      Текущее состояние представления
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IVisualElement"><apiName>IVisualElement</apiName><shortdesc>
  Интерфейс IVisualElement определяет свойства и методы minimum, требуемые для визуального элемента для расположения и отображения в контейнере Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ILayoutElement</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IVisualElement определяет свойства и методы minimum, требуемые для визуального элемента для расположения и отображения в контейнере Spark.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:depth:get"><apiName>depth</apiName><shortdesc>
      Определяет порядок отображения элементов внутри контейнеров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
           </apiDefaultValue></apiValueDef><apiDesc>
      Определяет порядок отображения элементов внутри контейнеров. Элементы в Groups упорядочиваются на основании свойства <codeph>depth</codeph>, при этом элементы с самой большой «глубиной» отображаются на заднем плане, а с меньшей – на переднем. Элементы с одинаковой «глубиной» отобразятся в порядке добавления к контейнеру.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:designLayer:get"><apiName>designLayer</apiName><shortdesc>
      Определяет дополнительный экземпляр DesignLayer, связанный с этим визуальным элементом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:DesignLayer</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Определяет дополнительный экземпляр DesignLayer, связанный с этим визуальным элементом.  
           <p>Если DesignLayer присвоен, в визуальном элементе необходимо учитывать значение видимости и значение альфа-канала вышестоящего слоя в конечном итоге при передаче собственного эффективного значения видимости или значения альфа-канала в резервный DisplayObject (если применимо).</p>
           <p>Визуальный элемент должен предусматривать прослушивание уведомлений <codeph>layerPropertyChange</codeph> из связанного вышестоящего элемента слоя. При изменении <codeph>effectiveAlpha</codeph> или <codeph>effectiveVisibility</codeph> слоя элемент должен выполнять вычисление собственного эффективного значения видимости (альфа-канала) и соответственно его применять.</p>
           <p>Это свойство не должно устанавливаться непосредственно в MXML.</p>
      
      <p>Свойство <codeph>designLayer</codeph> не используется для элемента управления z-порядка, см. <codeph>depth</codeph>.</p>
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IVisualElement/depth"><linktext>depth</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:is3D:get"><apiName>is3D</apiName><shortdesc>
      True, если элемент является представлен в трехмерной графике. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True, если элемент является представлен в трехмерной графике. 
           </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IVisualElement/postLayoutTransformOffsets"><linktext>postLayoutTransformOffsets</linktext></link><link href="mx.core.xml#ILayoutElement/hasLayoutMatrix3D"><linktext>mx.core.ILayoutElement.hasLayoutMatrix3D</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:owner:get"><apiName>owner</apiName><shortdesc>
      Владелец этого объекта IVisualElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Владелец этого объекта IVisualElement. По умолчанию он является вышестоящим элементом этого объекта IVisualElement. Однако если этот объект IVisualElement является нижестоящим компонентом, отображаемым вышестоящим элементом, например, раскрывающимся списком элемента управления ComboBox, владельцем компонента является объект, отображающий этот объект IVisualElement.
           <p>Этими свойствами управляет не приложение Flex, а каждый отдельный компонент. Таким образом, при использовании метода <codeph>PopUpManger.createPopUp()</codeph> или <codeph>PopUpManger.addPopUp()</codeph> для отображения внутреннего компонента необходимо задать в качестве значения свойства <codeph>owner</codeph> внутреннего компонента компонент, который обеспечил отображение этого раскрывающегося элемента.</p>
           <p>Значением по умолчанию является значение свойства <codeph>parent</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:parent:get"><apiName>parent</apiName><shortdesc>
      Вышестоящий контейнер или компонент данного компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Вышестоящий контейнер или компонент данного компонента. Только визуальные элементы могут иметь вышестоящее свойство <codeph>parent</codeph>. Для невизуальных элементов должно использоваться другое свойство для обращения к объекту, которому они принадлежат. В соответствии с соглашением для невизуальных объектов для ссылки на объект, которому они принадлежат, используется свойство <codeph>owner</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:postLayoutTransformOffsets:get"><apiName>postLayoutTransformOffsets</apiName><shortdesc>
      Определяет ряд настроек, применяемых для преобразования объекта способом, не отображающимся в макете вышестоящего элемента объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.geom:TransformOffsets</apiValueClassifier></apiValueDef><apiDesc>
      Определяет ряд настроек, применяемых для преобразования объекта способом, не отображающимся в макете вышестоящего элемента объекта. Например, если требуется отрегулировать макет объекта, который будет повернут на 90 градусов, устанавливается свойство объекта <codeph>rotation</codeph>. Если необходимо, чтобы макет поворачиваемого объекта <i>не</i> регулировался, устанавливается свойство <codeph>postLayoutTransformOffsets.rotationZ</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:visible:get"><apiName>visible</apiName><shortdesc>
      Управляет видимостью данного визуального элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Управляет видимостью данного визуального элемента. Если установлено значение <codeph>true</codeph>, то объект является видимым.
     
      <p>Если объект является невидимым, а свойство <codeph>includeInLayout</codeph> установлено на <codeph>true</codeph>, объект занимает место в контейнере, оставаясь при этом невидимым.</p>
     
      <p>Если для <codeph>visible</codeph> установлено значение <codeph>true</codeph>, то объект необязательно будет видимым вследствие его размера и в зависимости от того, включено ли усечение контейнера.</p>
     
      <p>Установка для <codeph>visible</codeph> значения <codeph>false</codeph> позволяет избежать фокусировки на компоненте.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ILayoutElement/includeInLayout"><linktext>ILayoutElement.includeInLayout</linktext></link></related-links></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IVisualElement:mx.core:IVisualElement:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
  FlexSimpleButton является подклассом класса SimpleButton проигрывателя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:SimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexSimpleButton является подклассом класса SimpleButton проигрывателя. Этот подкласс переопределяет метод <codeph>toString()</codeph>, настраивая его на возврат строки, указывающей расположение объекта в иерархии объектов DisplayObject в приложении.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexSimpleButton:FlexSimpleButton"><apiName>FlexSimpleButton</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
	 
	  <p>Устанавливает свойство <codeph>name</codeph> равным строке, которая возвращается методом <codeph>createUniqueName()</codeph> класса mx.utils.NameUtils.</p>
	 
	  <p>Эта строка представляет собой имя класса объекта, конкатенируемое с целым числом, уникальным для всего приложения, например, <codeph>FlexSimpleButton16</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexSimpleButton:toString"><apiName>toString</apiName><shortdesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, указывающая расположение этого объекта в иерархии DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении. Эта строка, например, <codeph>MyApp0.HBox5.FlexSimpleButton16</codeph>, создается методом <codeph>displayObjectToString()</codeph> класса mx.utils.NameUtils на основе свойства <codeph>name</codeph> для объекта и его предшествующих элементов.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IContainer"><apiName>IContainer</apiName><shortdesc>
  IContainer – это интерфейс, указывающий на то, что компонент расширяет или имитирует mx.core.Container
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IContainer – это интерфейс, указывающий на то, что компонент расширяет или имитирует mx.core.Container
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link></related-links><apiOperation id="mx.core:IContainer:mx.core:IContainer:addChild"><apiName>addChild</apiName><shortdesc conref="flash.display.DisplayObjectContainer#addChild()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#addChild()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:addChildAt"><apiName>addChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#addChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#addChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:areInaccessibleObjectsUnderPoint"><apiName>areInaccessibleObjectsUnderPoint</apiName><shortdesc conref="flash.display.DisplayObjectContainer#areInaccessibleObjectsUnderPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#areInaccessibleObjectsUnderPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:contains"><apiName>contains</apiName><shortdesc conref="flash.display.DisplayObjectContainer#contains()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#contains()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildAt"><apiName>getChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildByName"><apiName>getChildByName</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildByName()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildByName()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getChildIndex"><apiName>getChildIndex</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getChildIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getChildIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:getObjectsUnderPoint"><apiName>getObjectsUnderPoint</apiName><shortdesc conref="flash.display.DisplayObjectContainer#getObjectsUnderPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Array"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#getObjectsUnderPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:removeChild"><apiName>removeChild</apiName><shortdesc conref="flash.display.DisplayObjectContainer#removeChild()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#removeChild()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:removeChildAt"><apiName>removeChildAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#removeChildAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#removeChildAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:setChildIndex"><apiName>setChildIndex</apiName><shortdesc conref="flash.display.DisplayObjectContainer#setChildIndex()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#setChildIndex()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:startDrag"><apiName>startDrag</apiName><shortdesc conref="flash.display.Sprite#startDrag()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>lockCenter</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam><apiParam><apiItemName>bounds</apiItemName><apiType value="flash.geom:Rectangle"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.Sprite#startDrag()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:stopDrag"><apiName>stopDrag</apiName><shortdesc conref="flash.display.Sprite#stopDrag()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="flash.display.Sprite#stopDrag()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:swapChildren"><apiName>swapChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#swapChildren()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child1</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam><apiParam><apiItemName>child2</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#swapChildren()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IContainer:mx.core:IContainer:swapChildrenAt"><apiName>swapChildrenAt</apiName><shortdesc conref="flash.display.DisplayObjectContainer#swapChildrenAt()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObjectContainer#swapChildrenAt()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IContainer:mx.core:IContainer:buttonMode:get"><apiName>buttonMode</apiName><shortdesc conref="flash.display.Sprite#buttonMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.Sprite#buttonMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:creatingContentPane:get"><apiName>creatingContentPane</apiName><shortdesc conref="mx.core.Container#creatingContentPane">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.Container#creatingContentPane">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:defaultButton:get"><apiName>defaultButton</apiName><shortdesc conref="mx.core.Container#defaultButton">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.Container#defaultButton">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:doubleClickEnabled:get"><apiName>doubleClickEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#doubleClickEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:dropTarget:get"><apiName>dropTarget</apiName><shortdesc conref="flash.display.Sprite#dropTarget">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.Sprite#dropTarget">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:focusManager:get"><apiName>focusManager</apiName><shortdesc conref="mx.core.UIComponent#focusManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.managers:IFocusManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#focusManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:focusRect:get"><apiName>focusRect</apiName><shortdesc conref="flash.display.InteractiveObject#focusRect"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#focusRect"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:graphics:get"><apiName>graphics</apiName><shortdesc conref="flash.display.Sprite#graphics">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Graphics"/></apiValueDef><apiDesc conref="flash.display.Sprite#graphics">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:hitArea:get"><apiName>hitArea</apiName><shortdesc conref="flash.display.Sprite#hitArea">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc conref="flash.display.Sprite#hitArea">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc conref="mx.core.Container#horizontalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.Container#horizontalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:mouseChildren:get"><apiName>mouseChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#mouseChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#mouseEnabled"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:numChildren:get"><apiName>numChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#numChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#numChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:soundTransform:get"><apiName>soundTransform</apiName><shortdesc conref="flash.display.Sprite#soundTransform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.media:SoundTransform"/></apiValueDef><apiDesc conref="flash.display.Sprite#soundTransform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabChildren:get"><apiName>tabChildren</apiName><shortdesc conref="flash.display.DisplayObjectContainer#tabChildren">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#tabChildren">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabEnabled:get"><apiName>tabEnabled</apiName><shortdesc conref="flash.display.InteractiveObject#tabEnabled">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabEnabled">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:tabIndex:get"><apiName>tabIndex</apiName><shortdesc conref="flash.display.InteractiveObject#tabIndex"> 
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="flash.display.InteractiveObject#tabIndex"> 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:textSnapshot:get"><apiName>textSnapshot</apiName><shortdesc conref="flash.display.DisplayObjectContainer#textSnapshot">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.text:TextSnapshot"/></apiValueDef><apiDesc conref="flash.display.DisplayObjectContainer#textSnapshot">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:useHandCursor:get"><apiName>useHandCursor</apiName><shortdesc conref="flash.display.Sprite#useHandCursor">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.Sprite#useHandCursor">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc conref="mx.core.Container#verticalScrollPosition">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.Container#verticalScrollPosition">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IContainer:mx.core:IContainer:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc conref="mx.core.Container#viewMetrics">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.Container#viewMetrics">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
  ButtonAsset – это подкласс класса flash.text.TextField, представляющий символы кнопок, которые встроены в приложение Flex из файла SWF, созданного во Flash.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonAsset – это подкласс класса flash.text.TextField, представляющий символы кнопок, которые встроены в приложение Flex из файла SWF, созданного во Flash. Он реализует интерфейс IFlexDisplayObject, который позволяет TextFieldAsset отображаться в элементе управления Image или использоваться в качестве фона контейнера или темы оформления компонента.
 
  <p>Этот класс включен в Flex для полноты, что обеспечивает возможность встраивания в приложение Flex любого вида символов SWF-файла, созданного в приложении Flash. В то же время приложения Flex обычно не используют встроенные объекты TextField. Дополнительные сведения об использовании встроенных ресурсов в Flex см. в описании часто используемых классов ресурсов, например BitmapAsset.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:TextFieldAsset:TextFieldAsset"><apiName>TextFieldAsset</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:TextFieldAsset:move"><apiName>move</apiName><shortdesc>
      
	  Перемещает этот объект по указанным координатам осей x и y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси x для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси y для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Перемещает этот объект по указанным координатам осей x и y.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:TextFieldAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Устанавливает фактический размер для этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Новая ширина для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Новая высота для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Устанавливает фактический размер для этого объекта.
	 
	  <p>Этот метод главным образом используется в реализации метода <codeph>updateDisplayList()</codeph>, в котором вы вычисляете фактический размер этого объекта, основанный на его явном размере, размере по отношению к вышестоящему элементу (процент от его размера), а также измеренный размер. Далее путем вызова метода <codeph>setActualSize()</codeph> вы применяете этот фактический размер к объекту.</p>
	 
	  <p>В других ситуациях вместо вызова этого метода требуется установка свойств, например, <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> или <codeph>percentHeight</codeph>.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:TextFieldAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Рассчитанная высота этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Рассчитанная высота этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в нужное время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:TextFieldAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Измеренная ширина этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Измеренная ширина этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в требуемое время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContainerLayout"><apiName>ContainerLayout</apiName><shortdesc>
  Класс ContainerLayout определяет значения констант для свойства layout классов контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ContainerLayout определяет значения констант для свойства <codeph>layout</codeph> классов контейнера.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#Panel/layout"><linktext>mx.containers.Panel.layout</linktext></link><link href="mx.core.xml#Application/layout"><linktext>mx.core.Application.layout</linktext></link></related-links><apiValue id="mx.core:ContainerLayout:ABSOLUTE"><apiName>ABSOLUTE</apiName><shortdesc>
	  Используйте абсолютные значения layout для содержимого этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>absolute</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Используйте абсолютные значения layout для содержимого этого контейнера. Следует явным образом указать расположение каждого нижестоящего элемента.
	 
	  <p>Оптимальным способом является указание значений <codeph>x</codeph>, <codeph>y</codeph>, <codeph>width</codeph> и <codeph>height</codeph> для каждого нижестоящего элемента.</p>
	 
	  <p>Значения <codeph>width</codeph> и <codeph>height</codeph> можно указать в MXML в виде процентных значений. (В ActionScript следует задать свойства <codeph>percentWidth</codeph> и <codeph>percentHeight</codeph>.)</p>
	 
	  <p>Если значения <codeph>width</codeph> или <codeph>percentWidth</codeph> для нижестоящего элемента не указаны, то будет использоваться значение <codeph>measuredWidth</codeph>, автоматически определенное методом <codeph>measure()</codeph>. Это же справедливо и для значения height.</p>
	 
	  <p>В макете нижестоящих элементов также можно использовать стили с привязкой <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right </codeph>, <codeph>bottom</codeph>, <codeph>horizontalCenter</codeph> и <codeph>verticalCenter</codeph> для их прикрепления к центру контейнера.</p>
	 
	  <p>При использовании абсолютного макета стили контейнера <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph>, <codeph>paddingBottom</codeph>, <codeph>horizontalGap</codeph>, <codeph>verticalGap</codeph>, <codeph>horizontalAlign</codeph> и <codeph>verticalAlign</codeph> игнорируются.</p> 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerLayout:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  Используйте горизонтальный макет для содержимого этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Используйте горизонтальный макет для содержимого этого контейнера. Контейнер автоматически размещает свои нижестоящие элементы в одной строке.
	 
	  <p>Если значения <codeph>width</codeph> или <codeph>percentWidth</codeph> для нижестоящего элемента не указаны, то будет использоваться значение <codeph>measuredWidth</codeph>, автоматически определенное методом <codeph>measure()</codeph>. Это же справедливо и для значения height.</p>
	 
	  <p>Интервал между нижестоящими элементами определяется стилем <codeph>horizontalGap</codeph>, а их выравнивание – стилем <codeph>verticalAlign</codeph>. Стили <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> и <codeph>paddingBottom</codeph> определяют промежуток между границей контейнера и нижестоящими элементами.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerLayout:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  Используйте вертикальный макет для содержимого этого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Используйте вертикальный макет для содержимого этого контейнера. Контейнер автоматически располагает свои нижестоящие элементы в одном столбце.
	 
	  <p>Если значения <codeph>width</codeph> или <codeph>percentWidth</codeph> для нижестоящего элемента не указаны, то будет использоваться значение <codeph>measuredWidth</codeph>, автоматически определенное методом <codeph>measure()</codeph>. Это же справедливо и для значения height.</p>
	 
	  <p>Интервал между нижестоящими элементами определяется стилем <codeph>verticalGap</codeph>, а их выравнивание – стилем <codeph>horizontalAlign</codeph>. Стили <codeph>paddingLeft</codeph>, <codeph>paddingTop</codeph>, <codeph>paddingRight</codeph> и <codeph>paddingBottom</codeph> определяют промежуток между границей контейнера и нижестоящими элементами.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IInvalidating"><apiName>IInvalidating</apiName><shortdesc>
  Интерфейс IInvalidating определяет интерфейс для компонентов, которые используют отмену, чтобы сделать отложенным, а не немедленным обязательство, измерение, отображение и макет для свойства.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IInvalidating определяет интерфейс для компонентов, которые используют отмену, чтобы сделать отложенным, а не немедленным обязательство, измерение, отображение и макет для свойства.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc>
	  Вызов метода приводит к вызову метода validateDisplayList() компонента до визуализации списка отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Вызов метода приводит к вызову метода <codeph>validateDisplayList()</codeph> компонента до визуализации списка отображения.
	 
	  <p>Для компонентов, расширяющих UIComponent, это означает, что вызван метод <codeph>updateDisplayList()</codeph>.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
	  Выполнение вызова этого метода приводит к вызову метода validateProperties() компонента до визуализации списка отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Выполнение вызова этого метода приводит к вызову метода <codeph>validateProperties()</codeph> компонента до визуализации списка отображения.
	 
	  <p>Для компонентов, расширяющих UIComponent, это означает, что вызван метод <codeph>commitProperties()</codeph>.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:invalidateSize"><apiName>invalidateSize</apiName><shortdesc>
	  Вызов этого метода приводит к вызову метода validateSize() компонента до визуализации списка отображения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	  Вызов этого метода приводит к вызову метода <codeph>validateSize()</codeph> компонента до визуализации списка отображения.
	 
	  <p>Для компонентов, расширяющих UIComponent, это означает, что вызван метод <codeph>measure()</codeph> до тех пор, пока не установлены свойства <codeph>explicitWidth</codeph> и <codeph>explicitHeight</codeph> для компонента.</p>
	  
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IInvalidating:mx.core:IInvalidating:validateNow"><apiName>validateNow</apiName><shortdesc>
      Проверяет и обновляет свойства и макет этого объекта посредством немедленного вызова методов validateProperties(), validateSize() и validateDisplayList(), если необходимо.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Проверяет и обновляет свойства и макет этого объекта посредством немедленного вызова методов <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> и <codeph>validateDisplayList()</codeph>, если необходимо.
     
      <p>Как правило, новые значения не применяются к компоненту сразу после изменения свойств. Как правило, выполняется весь код приложения, который в то время должен быть выполнен. Затем LayoutManager выполняет вызов методов <codeph>validateProperties()</codeph>, <codeph>validateSize()</codeph> и <codeph>validateDisplayList()</codeph> в компонентах на основании их потребности в проверке и глубины иерархии объектов списка отображения.</p>
	 
      <p>Например, отложена установка свойства <codeph>width</codeph> так как, возможно, потребуется перерасчет ширин нижестоящих и вышестоящих элементов объектов. Задержка обработки также предотвращает множественное повторение свойства, если код приложения выполняет установку свойства <codeph>width</codeph> несколько раз. Этот метод позволяет отменить вручную подобное поведение.</p>
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:IChildList"><apiName>IChildList</apiName><shortdesc>
  Интерфейс IChildList определяет свойства и методы управления и доступа к нижестоящим спискам, которые являются подчиненными наборами нижестоящих элементов DisplayObjectContainer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IChildList определяет свойства и методы управления и доступа к нижестоящим спискам, которые являются подчиненными наборами нижестоящих элементов DisplayObjectContainer.
 
  <p>Например, рассмотрим класс Container. Он переопределяется API DisplayObjectContainer, например методы <codeph>numChildren</codeph> и <codeph>getChildAt()</codeph> для доступа только к нижестоящим элементам «содержимого», то есть к элементам управления и другим контейнерам, помещенным внутри них. Объект Container также может иметь дополнительные нижестоящие элементы, созданные в инфраструктуре автоматически, например, тема оформления фона или границ, и полосы прокрутки. Таким образом, объект Container предоставляет свойство с именем <codeph>rawChildren</codeph> типа IChildList, которое позволяет обращаться ко всем нижестоящим элементам, а не только к элементам содержимого.</p>
 
  <p>Приведем другой пример. Класс SystemManager является объектом DisplayObjectContainer, нижестоящие элементы которого разделены на несколько слоев: обычные нижестоящие элемента (например, объекты Application) находятся внизу, выше находятся всплывающие окна, подсказки и курсоры. Класс SystemManager имеет свойства <codeph>popUpChildren</codeph>, <codeph>toolTipChildren</codeph> и <codeph>cursorChildren</codeph>, которые позволяют обращаться к этим слоям, а типом всех этих свойств является IChildList. Поэтому количество всплывающих окон можно подсчитать с помощью свойства <codeph>systemManager.popUpChildren.numChildren</codeph>, а вставка DisplayObject в слой всплывающих подсказок осуществляется с помощью метода <codeph>systemManager.toolTipChildren.addChild()</codeph> и т.д.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container/rawChildren"><linktext>mx.core.Container.rawChildren</linktext></link><link href="mx.managers.xml#SystemManager/rawChildren"><linktext>mx.managers.SystemManager.rawChildren</linktext></link><link href="mx.managers.xml#SystemManager/popUpChildren"><linktext>mx.managers.SystemManager.popUpChildren</linktext></link><link href="mx.managers.xml#SystemManager/toolTipChildren"><linktext>mx.managers.SystemManager.toolTipChildren</linktext></link><link href="mx.managers.xml#SystemManager/cursorChildren"><linktext>mx.managers.SystemManager.cursorChildren</linktext></link></related-links><apiOperation id="mx.core:IChildList:mx.core:IChildList:addChild"><apiName>addChild</apiName><shortdesc>
      Добавляет нижестоящий элемент DisplayObject в конец этого списка нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Добавленный нижестоящий элемент аналогичен переданному аргументу.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Элемент DisplayObject, добавляемый в качестве нижестоящего элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет нижестоящий элемент DisplayObject в конец этого списка нижестоящих элементов.
     
	  <p>Вызов <codeph>childList.addChild(child)</codeph> аналогичен вызову <codeph>childList.addChild(child, childList.numChildren)</codeph> После добавления индекс нового нижестоящего элемента будет равен <codeph>(child.numChildren – 1)</codeph></p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:addChildAt"><apiName>addChildAt</apiName><shortdesc>
      Добавляет нижестоящий объект DisplayObject к нижестоящему списку в указанной позиции индекса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Добавленный нижестоящий элемент аналогичен переданному аргументу <codeph>child</codeph>.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Элемент DisplayObject, добавляемый в качестве нижестоящего элемента.
	 
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс для места добавления нижестоящего элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет нижестоящий объект DisplayObject к нижестоящему списку в указанной позиции индекса. Индекс 0 соответствует началу DisplayList, а индекс <codeph>numChildren</codeph> соответствует его концу.
	 
	  <p>Добавление нижестоящего элемента в любое положение, за исключением конца списка нижестоящих элементов, увеличивает индексы нижестоящих элементов, которые имели более высокие индексы или имели этот индекс.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:contains"><apiName>contains</apiName><shortdesc>
	  Определяет, находится ли объект DisplayObject в этом нижестоящем списке или является потомком нижестоящего элемента в этом списке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если DisplayObject находится в этом нижестоящем списке или является потомком нижестоящего элемента в этом списке. В противном случае значение равно <codeph>false</codeph>.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Тестируемый DisplayObject.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Определяет, находится ли объект DisplayObject в этом нижестоящем списке или является потомком нижестоящего элемента в этом списке.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildAt"><apiName>getChildAt</apiName><shortdesc>
	  Получает нижестоящий элемент DisplayObject в указанной позиции индекса из этого списка нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Нижестоящий элемент с указанным индексом.
	  
	  </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Целое число от 0 до <codeph>(numChildren - 1)</codeph>, указывающее индекс нижестоящего элемента в этом списке.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Получает нижестоящий элемент DisplayObject в указанной позиции индекса из этого списка нижестоящих элементов.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildByName"><apiName>getChildByName</apiName><shortdesc>
      Получает нижестоящий элемент DisplayObject с определенным именем из этого списка нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Нижестоящий элемент с указанным именем.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiDesc>Имя возвращаемого нижестоящего элемента.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Получает нижестоящий элемент DisplayObject с определенным именем из этого списка нижестоящих элементов.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getChildIndex"><apiName>getChildIndex</apiName><shortdesc>
	  Получает индекс определенного нижестоящего элемента из списка нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Индекс нижестоящего элемента, равный целому числу между 0 и <codeph>(numChildren - 1)</codeph>.
	  
	  </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Нижестоящий элемент, индекс которого необходимо получить.
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Получает индекс определенного нижестоящего элемента из списка нижестоящих элементов.
	 
	  <p>Первый нижестоящий элемент в списке имеет индекс 0, второй элемент – индекс 1, а последний элемент – индекс <codeph>(numChildren - 1)</codeph>.</p>
	 
	  <p>Если <codeph>getChildIndex(myChild)</codeph> возвращает 5, то <codeph>myView.getChildAt(5)</codeph> возвращает <codeph>myChild</codeph>.</p>
	 
	  <p>При добавлении нижестоящего элемента путем вызова метода <codeph>addChild()</codeph> индекс нового элемента равен наибольшему существующему индексу, увеличенному на единицу.</p>
	 
	  <p>Нижестоящий элемент можно добавить с определенным индексом с помощью метода <codeph>addChildAt()</codeph>. В этом случае для нижестоящих элементов, которые ранее имели этот индекс и более высокие индексы, индекс увеличивается на 1 для индексации элементов от 0 до <codeph>(numChildren - 1)</codeph>.</p>
	 
	  <p>При удалении нижестоящего элемента путем вызова методов <codeph>removeChild()</codeph> и <codeph>removeChildAt()</codeph> индекс остальных элементов уменьшается на 1, чтобы обеспечить индексацию элементов от 0 до <codeph>(numChildren - 1)</codeph>.</p>
	 
	  <p>При изменении индекса нижестоящего элемента с помощью метода <codeph>setChildIndex()</codeph> индексы элементов, расположенных между старым и новым индексом включительно, корректируются таким образом, чтобы сохранить индексацию всех элементов от 0 до <codeph>(numChildren - 1)</codeph>.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:getObjectsUnderPoint"><apiName>getObjectsUnderPoint</apiName><shortdesc>
      Возвращает массив объектов DisplayObjects, расположенных ниже заданной позиции и находящихся в списке нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив объектов, расположенных ниже заданной позиции и являющихся нижестоящими объектами этого контейнера.
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/><apiDesc>Точка, под которой следует выполнить поиск.
	 
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает массив объектов DisplayObjects, расположенных ниже заданной позиции и находящихся в списке нижестоящих элементов.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:removeChild"><apiName>removeChild</apiName><shortdesc>
      Удаляет указанный нижестоящий элемент DisplayObject из этого списка нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Удаленный нижестоящий элемент аналогичен переданному аргументу.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Удаляемый элемент DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет указанный нижестоящий элемент DisplayObject из этого списка нижестоящих элементов.
	 
	  <p>Удаление нижестоящего элемента из любого положения, за исключением конца списка нижестоящих элементов, уменьшает индексы нижестоящих элементов, которые имели более высокие индексы.</p>
     
	  <p>Вышестоящий элемент удаленного нижестоящего элемента будет иметь значение null и будет собран сборщиком мусора, если на него не существует других ссылок.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:removeChildAt"><apiName>removeChildAt</apiName><shortdesc>
      Удаляет нижестоящий элемент DisplayObject в указанной позиции индекса из этого списка нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Удаленный нижестоящий элемент.
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Удаляемый индекс нижестоящего элемента DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет нижестоящий элемент DisplayObject в указанной позиции индекса из этого списка нижестоящих элементов.
	 
	  <p>Удаление нижестоящего элемента из любого положения, за исключением конца списка нижестоящих элементов, уменьшает индексы нижестоящих элементов, которые имели более высокие индексы.</p>
     
      <p>Вышестоящий элемент удаленного нижестоящего элемента будет иметь значение null и будет собран сборщиком мусора, если на него не существует других ссылок.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IChildList:mx.core:IChildList:setChildIndex"><apiName>setChildIndex</apiName><shortdesc>
	  Изменяет индекс определенного нижестоящего элемента в этом списке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Нижестоящий элемент, для которого выполняется изменение индекса.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>Новый индекс для указанного нижестоящего элемента. Индекс должен быть целым числом в диапазоне между 0 и <codeph>(numChildren - 1)</codeph>.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Изменяет индекс определенного нижестоящего элемента в этом списке. См. описание метода <codeph>getChildIndex()</codeph> для получения описания индекса нижестоящего элемента.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IChildList:mx.core:IChildList:numChildren:get"><apiName>numChildren</apiName><shortdesc>
	  Число нижестоящих элементов в этом списке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
	  Число нижестоящих элементов в этом списке.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredContentOwner"><apiName>IDeferredContentOwner</apiName><shortdesc>
  Интерфейс IDeferredContentOwner определяет свойства и методы для отложенной реализации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IDeferredContentOwner определяет свойства и методы для отложенной реализации.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="spark.components.SkinnableContainer.xml"><linktext>spark.components.SkinnableContainer</linktext></link><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="mx.core.xml#INavigatorContent"><linktext>mx.core.INavigatorContent</linktext></link></related-links><adobeApiEvent id="mx.core:IDeferredContentOwner_mx.events.FlexEvent_contentCreationComplete"><apiName>contentCreationComplete</apiName><shortdesc>
  Отправляется после создания содержимого этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после создания содержимого этого компонента. В случае отложенной реализации содержимое компонента может быть создано намного позже создания самого компонента.
  
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:createDeferredContent"><apiName>createDeferredContent</apiName><shortdesc>
      Создайте содержимое этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Создайте содержимое этого компонента. Если для creationPolicy задано значение auto или all, эта функция вызывается инфраструктурой Flex. Если creationPolicy имеет значение none, эта функция должна вызваться для создания содержимого компонента.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:creationPolicy:get"><apiName>creationPolicy</apiName><shortdesc>
      Стратегия создания содержимого для этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"auto"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Стратегия создания содержимого для этого компонента.
           <p>Возможные значения:
        <ul>
          <li>auto: содержимое создается автоматически непосредственно перед его использованием.</li>
          <li>all: содержимое создается сразу после создания внешнего компонента. Эти параметры должны использоваться только в качестве последнего средства, поскольку их использование приводит к увеличению времени запуска.</li>
          <li>none: содержимое должно создаваться вручную путем вызова метода createDeferredContent().</li>
        </ul>
      </p>
           </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredContentOwner:mx.core:IDeferredContentOwner:deferredContentCreated:get"><apiName>deferredContentCreated</apiName><shortdesc>
      Флаг, указывающий на то, было ли создано отложенное содержимое.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, указывающий на то, было ли создано отложенное содержимое.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ITransientDeferredInstance"><apiName>ITransientDeferredInstance</apiName><shortdesc>
  Интерфейс ITransientDeferredInstance расширяет IDeferredInstance и добавляет возможность сброса состояния отложенной фабрики экземпляров до начального (обычно это подразумевает отмену всех ссылок на компонент, например, установку свойства документа-владельца, который ссылается на экземпляр, имеющий значение null).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDeferredInstance</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс ITransientDeferredInstance расширяет IDeferredInstance и добавляет возможность сброса состояния отложенной фабрики экземпляров до начального (обычно это подразумевает отмену всех ссылок на компонент, например, установку свойства документа-владельца, который ссылается на экземпляр, имеющий значение null). Эта дополнительная возможность используется состояниями AddItems для перезаписи при необходимости удаления элементов состояния, если состояние больше не применяется. Компилятор Flex использует те же правила автоматического приведения значений, что и IDeferredInstance.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.states.xml#AddItems"><linktext>mx.states.AddItems</linktext></link><link href="mx.core.xml#IDeferredInstance"><linktext>mx.core.IDeferredInstance</linktext></link></related-links><apiOperation id="mx.core:ITransientDeferredInstance:mx.core:ITransientDeferredInstance:reset"><apiName>reset</apiName><shortdesc>
      Сбрасывает состояние фабрики до начального, удаляя все ссылки на кэшируемые экземпляры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Сбрасывает состояние фабрики до начального, удаляя все ссылки на кэшируемые экземпляры.
      
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
  ButtonAsset – это подкласс класса flash.display.SimpleButton, представляющий символы кнопок, которые встроены в приложение Flex из файла SWF, созданного в программе Flash.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:FlexSimpleButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonAsset – это подкласс класса flash.display.SimpleButton, представляющий символы кнопок, которые встроены в приложение Flex из файла SWF, созданного в программе Flash. Он реализует интерфейс IFlexDisplayObject, который позволяет объекту SimpleButtonAsset отображаться в элементе управления Image или использоваться в качестве фона контейнера или темы оформления компонента.
 
  <p>Этот класс включен в Flex для полноты, что обеспечивает возможность встраивания в приложение Flex любого вида символов SWF-файла, созданного в приложении Flash. В то же время приложения Flex обычно не используют встроенные объекты SimpleButtons. Дополнительные сведения об использовании встроенных ресурсов в Flex см. в описании часто используемых классов ресурсов, например BitmapAsset.</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:ButtonAsset:ButtonAsset"><apiName>ButtonAsset</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ButtonAsset:move"><apiName>move</apiName><shortdesc>
      
	  Перемещает этот объект по указанным координатам осей x и y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси x для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси y для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Перемещает этот объект по указанным координатам осей x и y.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ButtonAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Устанавливает фактический размер для этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Новая ширина для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Новая высота для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Устанавливает фактический размер для этого объекта.
	 
	  <p>Этот метод главным образом используется в реализации метода <codeph>updateDisplayList()</codeph>, в котором вы вычисляете фактический размер этого объекта, основанный на его явном размере, размере по отношению к вышестоящему элементу (процент от его размера), а также измеренный размер. Далее путем вызова метода <codeph>setActualSize()</codeph> вы применяете этот фактический размер к объекту.</p>
	 
	  <p>В других ситуациях вместо вызова этого метода требуется установка свойств, например, <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> или <codeph>percentHeight</codeph>.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ButtonAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Рассчитанная высота этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Рассчитанная высота этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в нужное время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ButtonAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Измеренная ширина этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Измеренная ширина этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в требуемое время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
  MovieClipLoaderAsset является подклассом класса MovieClipAsset, представляющего SWF-файлы, встраиваемые в приложение Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier>mx.core:MovieClipAsset</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipLoaderAsset является подклассом класса MovieClipAsset, представляющего SWF-файлы, встраиваемые в приложение Flex.
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:MovieClipLoaderAsset_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  Отправляется после полной загрузки ресурса SWF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после полной загрузки ресурса SWF.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:MovieClipLoaderAsset:MovieClipLoaderAsset"><apiName>MovieClipLoaderAsset</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialHeight"><apiName>initialHeight</apiName><shortdesc>
	  Внешняя память для свойства measuredHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Внешняя память для свойства <codeph>measuredHeight</codeph>. Подклассы должны устанавливать это значение в конструкторе.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:protected:initialWidth"><apiName>initialWidth</apiName><shortdesc>
	  Внешняя память для свойства measuredWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
	  Внешняя память для свойства <codeph>measuredWidth</codeph>. Подклассы должны устанавливать это значение в конструкторе.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipLoaderAsset:movieClipData:get"><apiName>movieClipData</apiName><shortdesc>
	  ByteArray, содержащий внутреннее содержимое.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:ByteArray"/></apiValueDef><apiDesc>
	  ByteArray, содержащий внутреннее содержимое. Переопределено в подклассах.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IPropertyChangeNotifier"><apiName>IPropertyChangeNotifier</apiName><shortdesc>
  Интерфейс IPropertyChangeNotifier определяет интерфейс маркера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IUID</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс <codeph>IPropertyChangeNotifier</codeph> определяет интерфейс маркера. Классы, которые поддерживают этот интерфейс, поддерживают распределение событий особым образом. Реализующие данный интерфейс классы должны передавать события для каждого свойства этого класса и всех вложенных классов, открыто представленных в качестве свойств. Для анонимных свойств (сложных и не строго типизированных) реализующие классы обеспечивают особую поддержку или используют класс ObjectProxy напрямую. Средства реализации этого интерфейса должны использовать метод <codeph>PropertyChangeEvent.createUpdateEvent()</codeph> для создания соответствующего передаваемого события update.
  </apiDesc><example>
  <codeph><pre>
   
 function set myProperty(value:Object):void
 {
    var oldValue:IPropertyChangeNotifier = _myProperty;
    var newValue:IPropertyChangeNotifier = value;
    
    // Need to ensure to dispatch changes on the new property.
    // Listeners use the source property to determine which object 
    // actually originated the event.
    // In their event handler code, they can tell if an event has been 
    // propagated from deep within the object graph by comparing 
    // event.target and event.source. If they are equal, then the property
    // change is at the surface of the object. If they are not equal, the
    // property change is somewhere deeper in the object graph.
    newValue.addEventListener(
                PropertyChangeEvent.PROPERTY_CHANGE, 
                dispatchEvent);
 
    // need to stop listening for events from the old property
    oldValue.removeEventListener(
                PropertyChangeEvent.PROPERTY_CHANGE,
                dispatchEvent);
 
    _myProperty = newValue;
 
    // now notify anyone that is listening
    if (dispatcher.hasEventListener(PropertyChangeEvent.PROPERTY_CHANGE))
    {
         var event:PropertyChangeEvent = 
                         PropertyChangeEvent.createUpdateEvent(
                                                       this,
                                                       "myProperty",
                                                       newValue,
                                                       oldValue);
        dispatchEvent(event);
     }
  }
 
      
  </pre></codeph>
  
  </example></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:IRepeaterClient"><apiName>IRepeaterClient</apiName><shortdesc>
  Интерфейс IRepeaterClient определяет интерфейс для компонентов API, имеющих несколько экземпляров, созданных Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IRepeaterClient определяет интерфейс для компонентов API, имеющих несколько экземпляров, созданных Repeater. Интерфейс IRepeaterClient реализуется классом UIComponent и унаследован всеми элементами управления и контейнерами инфраструктуры Flex.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:initializeRepeaterArrays"><apiName>initializeRepeaterArrays</apiName><shortdesc>
      Инициализирует свойства instanceIndices, repeaterIndices и repeaters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parent</apiItemName><apiOperationClassifier>mx.core:IRepeaterClient</apiOperationClassifier><apiDesc>Вышестоящий Repeater, создавший этот компонент.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Инициализирует свойства <codeph>instanceIndices</codeph>, <codeph>repeaterIndices</codeph> и <codeph>repeaters</codeph>.
     
      <p>Этот метод вызывается инфраструктурой Flex. Как правило, разработчикам вызывать этот метод не требуется.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:instanceIndices:get"><apiName>instanceIndices</apiName><shortdesc>
      Массив, содержащий индексы, требуемые для создания ссылки на повторяющийся экземпляр компонента из собственного документа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив, содержащий индексы, требуемые для создания ссылки на повторяющийся экземпляр компонента из собственного документа. Массив является пустым, пока этот компонент находится внутри одного или нескольких Repeater. Первый элемент соответствует самому крайнему Repeater. Например, если <codeph>id</codeph> равен <codeph>b</codeph> и <codeph>instanceIndices</codeph> равен <codeph>[ 2, 4 ]</codeph>, ссылкой на этот документ будет <codeph>b[2][4]</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:isDocument:get"><apiName>isDocument</apiName><shortdesc conref="mx.core.UIComponent#isDocument">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isDocument">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaterIndices:get"><apiName>repeaterIndices</apiName><shortdesc>
      Массив, содержащий индексы элементов в поставщике данных Repeater, создавшем этот компонент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив, содержащий индексы элементов в поставщике данных Repeater, создавшем этот компонент. Массив является пустым, пока этот компонент находится внутри одного или нескольких Repeater. Первый элемент соответствует самому крайнему компоненту Repeater. Например, если значением <codeph>repeaterIndices</codeph> является <codeph>[ 2, 4 ]</codeph>, внешним компонентом Repeater был использован собственный элемент данных <codeph>dataProvider[2]</codeph>, а внутренним компонентом Repeater – собственный элемент данных <codeph>dataProvider[4]</codeph>.
     
      <p>Это свойство отличается от свойства <codeph>instanceIndices</codeph>, если значение свойства <codeph>startingIndex</codeph> компонента любого из Repeater не равно нулю. Например, даже если компонент Repeater запускается в элементе 4 <codeph>dataProvider</codeph>, ссылкой на документ первого повторяемого компонента является <codeph>b[0]</codeph>, а не <codeph>b[4]</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IRepeaterClient:mx.core:IRepeaterClient:repeaters:get"><apiName>repeaters</apiName><shortdesc>
      Массив, содержащий любые Repeater с вложениями компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив, содержащий любые Repeater с вложениями компонента. Массив является пустым, пока этот компонент находится внутри одного или нескольких Repeater. Первый элемент соответствует самому крайнему Repeater. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IVisualElementContainer"><apiName>IVisualElementContainer</apiName><shortdesc>
  Интерфейс IVisualElementContainer определяет свойства и методы minimum, требуемые для контейнера с целью управления отображаемыми компонентами Spark.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IVisualElementContainer определяет свойства и методы minimum, требуемые для контейнера с целью управления отображаемыми компонентами Spark.
 
  <p>Обратите внимание, что контейнеры Spark SkinnableDataContainer и DataGroup не реализуют этот интерфейс. Такие контейнеры управляют своими нижестоящими элементами с помощью свойства <codeph>dataProvider</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#IVisualElement"><linktext>mx.core.IVisualElement</linktext></link></related-links><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElement"><apiName>addElement</apiName><shortdesc>
      Добавляет визуальный элемент к этому контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если элемент совпадает с визуальным контейнером.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Добавленный элемент.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Визуальный элемент, добавляемый в качестве нижестоящего элемента данного контейнера.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет визуальный элемент к этому контейнеру. Элемент добавляется после всех других элементов и поверх всех других элементов. Для добавления визуального элемента к конкретной позиции индекса воспользуйтесь методом <codeph>addElementAt()</codeph>.
     
      <p>При добавлении визуального элемента, уже имеющего другой контейнер в качестве вышестоящего элемента, элемент удаляется из другого контейнера.</p>  
     
      </apiDesc></apiOperationDetail><adobeApiEvent id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElement_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Отправляется при добавлении элемента к списку нижестоящих элементов.
     
      </apiDesc></adobeApiEventDetail><shortdesc>Отправляется при добавлении элемента к списку нижестоящих элементов.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElementAt"><apiName>addElementAt</apiName><shortdesc>
      Добавляет визуальный элемент к этому контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если элемент совпадает с контейнером.
     
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Если позиция индекса не существует в списке нижестоящих элементов.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Добавленный элемент.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Элемент, добавляемый в качестве нижестоящего элемента этого визуального контейнера.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Позиция индекса для добавления элемента. При указании занимаемой в настоящее время позиции индекса существующий в данной позиции нижестоящий объект и все вышестоящие позиции перемещаются по списку на одну позицию вверх.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет визуальный элемент к этому контейнеру. Элемент добавляется в указанной позиции индекса. Индекс 0 представляет первый элемент в списке отображения.
     
      <p>При добавлении визуального элемента, уже имеющего другой контейнер в качестве вышестоящего элемента, элемент удаляется из другого контейнера.</p>  
     
      </apiDesc></apiOperationDetail><adobeApiEvent id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:addElementAt_elementAdd"><apiName>elementAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Отправляется при добавлении элемента к списку нижестоящих элементов.
     
      </apiDesc></adobeApiEventDetail><shortdesc>Отправляется при добавлении элемента к списку нижестоящих элементов.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:getElementAt"><apiName>getElementAt</apiName><shortdesc>
      Возвращает визуальный элемент по заданному индексу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если позиция индекса не существует в списке нижестоящих элементов.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Элемент в указанном индексе.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс получаемого элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает визуальный элемент по заданному индексу.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
      Возвращает позицию индекса визуального элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если элемент не является нижестоящим элементом этого визуального контейнера.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Позиция индекса элемента в контейнере.
     
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Визуальный элемент.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает позицию индекса визуального элемента.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeAllElements"><apiName>removeAllElements</apiName><shortdesc>
      Удаляет все визуальные элементы из контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Удаляет все визуальные элементы из контейнера.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeElement"><apiName>removeElement</apiName><shortdesc>
      Удаляет указанный визуальный элемент из списка нижестоящих элементов данного контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если параметр элемента не является нижестоящим элементом этого визуального контейнера.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Удаленный элемент.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Элемент, удаляемый из контейнера.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет указанный визуальный элемент из списка нижестоящих элементов данного контейнера. Позиции индекса элементов, расположенных над элементом в этом визуальном контейнере, уменьшаются на 1.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:removeElementAt"><apiName>removeElementAt</apiName><shortdesc>
      Удаляет визуальный элемент из указанной позиции индекса в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если индекс не существует в списке нижестоящих элементов.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Удаленный элемент.
     
      </apiDesc><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Индекс удаляемого элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет визуальный элемент из указанной позиции индекса в контейнере. Позиции индекса элементов, расположенных над элементом в этом визуальном контейнере, уменьшаются на 1.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:setElementIndex"><apiName>setElementIndex</apiName><shortdesc>
      Изменяет позицию существующего нижестоящего элемента в визуальном контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если индекс не существует в списке нижестоящих элементов.
     
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Если параметр элемента не является нижестоящим элементом этого визуального контейнера.
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Элемент, для которого требуется изменить номер индекса.
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>Полученный в результате номер индекса для элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Изменяет позицию существующего нижестоящего элемента в визуальном контейнере.
     
      <p>При использовании метода <codeph>setElementIndex()</codeph> и указании уже занятой позиции индекса меняются только позиции между прежней и новой позицией элемента. Все остальные позиции остаются без изменения.</p>
     
      <p>Если визуальный элемент перемещается на более низкую позицию, индекс всех элементов между позициями возрастает на 1. Если элемент перемещается на более высокую позицию, индекс всех элементов между позициями понижается на 1.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:swapElements"><apiName>swapElements</apiName><shortdesc>
      Меняет местами индексы двух указанных визуальных элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>element1</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Первый визуальный элемент.
     
      </apiDesc></apiParam><apiParam><apiItemName>element2</apiItemName><apiOperationClassifier>mx.core:IVisualElement</apiOperationClassifier><apiDesc>Второй визуальный элемент.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Меняет местами индексы двух указанных визуальных элементов. Позиции индекса других элементов не изменяются.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:swapElementsAt"><apiName>swapElementsAt</apiName><shortdesc>
      Меняет местами визуальные элементы в двух указанных позициях индекса в контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Если индексы отсутствуют в визуальном контейнере.
      
      </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index1</apiItemName><apiType value="int"/><apiDesc>Индекс первого элемента.
     
      </apiDesc></apiParam><apiParam><apiItemName>index2</apiItemName><apiType value="int"/><apiDesc>Индекс второго элемента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Меняет местами визуальные элементы в двух указанных позициях индекса в контейнере. Позиции индекса остальных визуальных элементов не меняются.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IVisualElementContainer:mx.core:IVisualElementContainer:numElements:get"><apiName>numElements</apiName><shortdesc>
      Количество визуальных элементов в данном контейнере.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      Количество визуальных элементов в данном контейнере. Визуальные элементы включают в себя классы, которые реализуют интерфейс IVisualElement, например, подклассы UIComponent и GraphicElement.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDataRenderer"><apiName>IDataRenderer</apiName><shortdesc>
  Интерфейс IDataRenderer определяет интерфейс для компонентов, которые имеют свойство data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IDataRenderer определяет интерфейс для компонентов, которые имеют свойство <codeph>data</codeph>.
 
  <p>Компоненты, используемые в средствах визуализации или в редакторе элементов в элементах управления (например, в элементах управления List, HorizontalList, TileList, DataGrid и Tree) или в качестве средств визуализации в диаграмме, получают визуализируемые или редактируемые данные с помощью свойства <codeph>data</codeph>. Компонент может реализовывать IDataRenderer, чтобы компоненты хоста могли передавать информацию. Все контейнеры Flex и многие компоненты Flex реализуют IDataRenderer и свойство <codeph>data</codeph>.</p>
 
  <p>В элементе управления списка Flex задает свойство <codeph>data</codeph> средства визуализации или редактора элементов равным элементу в поставщике данных, который соответствует визуализируемому или редактируемому элементу. Для элемента управления DataGrid свойство <codeph>data</codeph> содержит элемент поставщика данных для всей строки элемента управления DataGrid, а не только для одного элемента.</p>
 
  <p>Для реализации этого интерфейса следует определить методы установщика и получателя, которые реализуют свойство <codeph>data</codeph>. Как правило, метод установщика записывает значение свойства <codeph>data</codeph> во внутреннюю переменную, возвращает событие <codeph>dataChange</codeph>, а метод получателя возвращает текущее значение внутренней переменной, как показано в следующем примере</p>
  
  <pre>
    // Internal variable for the property value.
    private var _data:Object;
    
    // Make the data property bindable.
    [Bindable("dataChange")]
    
    // Define the getter method.
    public function get data():Object {
        return _data;
    }
    
    // Define the setter method, and dispatch an event when the property
    // changes to support data binding.
    public function set data(value:Object):void {
        _data = value;
    
        dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
    }
  </pre>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IDataRenderer:mx.core:IDataRenderer:data:get"><apiName>data</apiName><shortdesc>
	  Данные для отображения или редактирования.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
	  Данные для отображения или редактирования.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ITextInput"><apiName>ITextInput</apiName><shortdesc>
  В настоящее время документация недоступна.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:IStyleClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  В настоящее время документация недоступна.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ITextInput:mx.core:ITextInput:selectRange"><apiName>selectRange</apiName><shortdesc>
      Выбирает текст в диапазоне, заданном параметрами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorPosition</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activePosition</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      Выбирает текст в диапазоне, заданном параметрами.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ITextInput:mx.core:ITextInput:showBorderAndBackground"><apiName>showBorderAndBackground</apiName><shortdesc>
      Определяет, отображаются ли рамка и фон TextInput.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      Определяет, отображаются ли рамка и фон TextInput. 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ITextInput:mx.core:ITextInput:editable:get"><apiName>editable</apiName><shortdesc>
	  В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  В настоящее время документация недоступна.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      В настоящее время документация недоступна.
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:maxChars:get"><apiName>maxChars</apiName><shortdesc>
	  В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
	  В настоящее время документация недоступна.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:mouseChildren:get"><apiName>mouseChildren</apiName><shortdesc>
	  В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  В настоящее время документация недоступна.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:mouseEnabled:get"><apiName>mouseEnabled</apiName><shortdesc>
	  В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  В настоящее время документация недоступна.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:parentDrawsFocus:get"><apiName>parentDrawsFocus</apiName><shortdesc>
	  В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  В настоящее время документация недоступна.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:restrict:get"><apiName>restrict</apiName><shortdesc>
	  В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  В настоящее время документация недоступна.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectable:get"><apiName>selectable</apiName><shortdesc>
	  В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  В настоящее время документация недоступна.
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      В настоящее время документация недоступна.
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      В настоящее время документация недоступна.
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ITextInput:mx.core:ITextInput:text:get"><apiName>text</apiName><shortdesc>
	  В настоящее время документация недоступна.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  В настоящее время документация недоступна.
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFlexDisplayObject"><apiName>IFlexDisplayObject</apiName><shortdesc>
  Интерфейс IFlexDisplayObject определяет интерфейс для элементов темы оформления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.display:IBitmapDrawable</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IFlexDisplayObject определяет интерфейс для элементов темы оформления. Тема оформления должна по крайней мере представлять собой объект DisplayObject и реализовывать этот интерфейс.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getBounds"><apiName>getBounds</apiName><shortdesc conref="flash.display.DisplayObject#getBounds()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getBounds()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:getRect"><apiName>getRect</apiName><shortdesc conref="flash.display.DisplayObject#getRect()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>targetCoordinateSpace</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#getRect()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:globalToLocal"><apiName>globalToLocal</apiName><shortdesc conref="flash.display.DisplayObject#globalToLocal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#globalToLocal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestObject"><apiName>hitTestObject</apiName><shortdesc conref="flash.display.DisplayObject#hitTestObject()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>obj</apiItemName><apiType value="flash.display:DisplayObject"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestObject()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:hitTestPoint"><apiName>hitTestPoint</apiName><shortdesc conref="flash.display.DisplayObject#hitTestPoint()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>shapeFlag</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#hitTestPoint()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:localToGlobal"><apiName>localToGlobal</apiName><shortdesc conref="flash.display.DisplayObject#localToGlobal()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>point</apiItemName><apiType value="flash.geom:Point"/></apiParam></apiOperationDef><apiDesc conref="flash.display.DisplayObject#localToGlobal()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:move"><apiName>move</apiName><shortdesc>
	  Перемещает этот объект по указанным координатам осей x и y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси x для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси y для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Перемещает этот объект по указанным координатам осей x и y.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:setActualSize"><apiName>setActualSize</apiName><shortdesc>
	  Устанавливает фактический размер для этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Новая ширина для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Новая высота для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Устанавливает фактический размер для этого объекта.
	 
	  <p>Этот метод главным образом используется в реализации метода <codeph>updateDisplayList()</codeph>, в котором вы вычисляете фактический размер этого объекта, основанный на его явном размере, размере по отношению к вышестоящему элементу (процент от его размера), а также измеренный размер. Далее путем вызова метода <codeph>setActualSize()</codeph> вы применяете этот фактический размер к объекту.</p>
	 
	  <p>В других ситуациях вместо вызова этого метода требуется установка свойств, например, <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> или <codeph>percentHeight</codeph>.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:accessibilityProperties:get"><apiName>accessibilityProperties</apiName><shortdesc conref="flash.display.DisplayObject#accessibilityProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.accessibility:AccessibilityProperties"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#accessibilityProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:alpha:get"><apiName>alpha</apiName><shortdesc conref="flash.display.DisplayObject#alpha">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#alpha">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:blendMode:get"><apiName>blendMode</apiName><shortdesc conref="flash.display.DisplayObject#blendMode">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#blendMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:cacheAsBitmap:get"><apiName>cacheAsBitmap</apiName><shortdesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#cacheAsBitmap">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:filters:get"><apiName>filters</apiName><shortdesc conref="flash.display.DisplayObject#filters">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#filters">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:height:get"><apiName>height</apiName><shortdesc conref="flash.display.DisplayObject#height">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#height">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:loaderInfo:get"><apiName>loaderInfo</apiName><shortdesc conref="flash.display.DisplayObject#loaderInfo">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#loaderInfo">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mask:get"><apiName>mask</apiName><shortdesc conref="flash.display.DisplayObject#mask">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mask">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
	  Рассчитанная высота этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Рассчитанная высота этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в нужное время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
	  Измеренная ширина этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
	  Измеренная ширина этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в требуемое время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseX:get"><apiName>mouseX</apiName><shortdesc conref="flash.display.DisplayObject#mouseX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:mouseY:get"><apiName>mouseY</apiName><shortdesc conref="flash.display.DisplayObject#mouseY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#mouseY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:name:get"><apiName>name</apiName><shortdesc conref="flash.display.DisplayObject#name">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#name">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:opaqueBackground:get"><apiName>opaqueBackground</apiName><shortdesc conref="flash.display.DisplayObject#opaqueBackground">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#opaqueBackground">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:parent:get"><apiName>parent</apiName><shortdesc conref="flash.display.DisplayObject#parent">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#parent">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:root:get"><apiName>root</apiName><shortdesc conref="flash.display.DisplayObject#root">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#root">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:rotation:get"><apiName>rotation</apiName><shortdesc conref="flash.display.DisplayObject#rotation">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#rotation">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scale9Grid:get"><apiName>scale9Grid</apiName><shortdesc conref="flash.display.DisplayObject#scale9Grid">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scale9Grid">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleX:get"><apiName>scaleX</apiName><shortdesc conref="flash.display.DisplayObject#scaleX">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleX">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scaleY:get"><apiName>scaleY</apiName><shortdesc conref="flash.display.DisplayObject#scaleY">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scaleY">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:scrollRect:get"><apiName>scrollRect</apiName><shortdesc conref="flash.display.DisplayObject#scrollRect">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#scrollRect">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:stage:get"><apiName>stage</apiName><shortdesc conref="flash.display.DisplayObject#stage">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:Stage"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#stage">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:transform:get"><apiName>transform</apiName><shortdesc conref="flash.display.DisplayObject#transform">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.geom:Transform"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#transform">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:visible:get"><apiName>visible</apiName><shortdesc conref="flash.display.DisplayObject#visible">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#visible">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:width:get"><apiName>width</apiName><shortdesc conref="flash.display.DisplayObject#width">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#width">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:x:get"><apiName>x</apiName><shortdesc conref="flash.display.DisplayObject#x">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#x">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IFlexDisplayObject:mx.core:IFlexDisplayObject:y:get"><apiName>y</apiName><shortdesc conref="flash.display.DisplayObject#y">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="flash.display.DisplayObject#y">
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:EventPriority"><apiName>EventPriority</apiName><shortdesc>
  Класс EventPriority определяет значения констант для аргумента priority метода addEventListener() EventDispatcher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс EventPriority определяет значения констант для аргумента <codeph>priority</codeph> метода <codeph>addEventListener()</codeph> EventDispatcher.
 
  <p>Чем больше число, тем выше приоритет прослушивателя событий. Все прослушиватели с приоритетом <codeph>N</codeph> будут обработаны раньше, чем прослушиватели с приоритетом <codeph>N – 1</codeph>. Прослушиватели с одинаковым приоритетом обрабатываются в порядке их добавления.</p>
 
  <p>Значение приоритета может быть положительным, нулевым или отрицательным. Значение приоритета по умолчанию равно 0.</p>
 
  <p>Не рекомендуется писать код, зависящий от числовых значений этих констант. В последующих версиях Flex будут внесены изменения.</p>
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:EventPriority:BINDING"><apiName>BINDING</apiName><shortdesc>
	  Автоматически созданные обработчики событий, анализирующие выражения привязки данных, необходимо выполнить в первую очередь, чтобы они имели более высокий приоритет, чем заданные по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>100</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Автоматически созданные обработчики событий, анализирующие выражения привязки данных, необходимо выполнить в первую очередь, чтобы они имели более высокий приоритет, чем заданные по умолчанию.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:CURSOR_MANAGEMENT"><apiName>CURSOR_MANAGEMENT</apiName><shortdesc>
	  CursorManager содержит обработчики для событий мыши, которые должны быть выполнены в первую очередь, чтобы они имели более высокий приоритет.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>200</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  CursorManager содержит обработчики для событий мыши, которые должны быть выполнены в первую очередь, чтобы они имели более высокий приоритет.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
	  Обработчики событий для экземпляров компонентов выполняются с приоритетом по умолчанию, равным 0.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Обработчики событий для экземпляров компонентов выполняются с приоритетом по умолчанию, равным <codeph>0</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:DEFAULT_HANDLER"><apiName>DEFAULT_HANDLER</apiName><shortdesc>
	  Некоторые компоненты прослушивают отправляемые самим себе события и позволяют другим прослушивателям вызывать метод preventDefault() для предотвращения выполнения компонентом операции по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-50</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Некоторые компоненты прослушивают отправляемые самим себе события и позволяют другим прослушивателям вызывать метод <codeph>preventDefault()</codeph> для предотвращения выполнения компонентом операции по умолчанию. Эти компоненты должны прослушивать события с более низким приоритетом, чем у событий по умолчанию, чтобы другие обработчики выполнялись в первую очередь и имели возможность вызова метода <codeph>preventDefault()</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:EventPriority:EFFECT"><apiName>EFFECT</apiName><shortdesc>
	  Автоматически создаваемые обработчики событий, инициирующие эффекты, выполняются после всех обработчиков событий для экземпляров компонента, чтобы они имели более низкий приоритет, чем заданные по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>-100</apiData><apiType value="int"/></apiValueDef><apiDesc>
	  Автоматически создаваемые обработчики событий, инициирующие эффекты, выполняются после всех обработчиков событий для экземпляров компонента, чтобы они имели более низкий приоритет, чем заданные по умолчанию.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFactory"><apiName>IFactory</apiName><shortdesc>
  Интерфейс IFactory определяет интерфейс, реализуемый классами фабрики, например, ClassFactory.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IFactory определяет интерфейс, реализуемый классами фабрики, например, ClassFactory. Объект типа IFactory является «объектом фабрики», который Flex использует для создания нескольких экземпляров другого класса с идентичными свойствами.
 
  <p>Например, DataGridColumn содержит <codeph>itemRenderer</codeph> типа IFactory; он вызывает <codeph>itemRenderer.newInstance()</codeph> для создания ячеек определенного столбца DataGrid.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#ClassFactory"><linktext>mx.core.ClassFactory</linktext></link></related-links><apiOperation id="mx.core:IFactory:mx.core:IFactory:newInstance"><apiName>newInstance</apiName><shortdesc>
	  Создает экземпляр класса (определенный классом, реализующим IFactory).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Последний созданный экземпляр.
	  
	  </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	  Создает экземпляр класса (определенный классом, реализующим IFactory).
	 
	  </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:DeferredInstanceFromClass"><apiName>DeferredInstanceFromClass</apiName><shortdesc>
  Фабрика экземпляров с отложенным созданием, которая создает и возвращает экземпляр указанного класса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ITransientDeferredInstance</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Фабрика экземпляров с отложенным созданием, которая создает и возвращает экземпляр указанного класса. Приложение может использовать метод <codeph>getInstance()</codeph> для создания экземпляра класса при первой необходимости и последующего получения ссылки на экземпляр.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DeferredInstanceFromFunction"><linktext>DeferredInstanceFromFunction</linktext></link></related-links><apiConstructor id="mx.core:DeferredInstanceFromClass:DeferredInstanceFromClass"><apiName>DeferredInstanceFromClass</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Class"/><apiDesc>Класс, экземпляр которого создается и возвращается методом <codeph>getInstance()</codeph>.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DeferredInstanceFromClass:getInstance"><apiName>getInstance</apiName><shortdesc>
	 Создает и возвращает экземпляр класса, указанного в конструкторе DeferredInstanceFromClass, если он не существует. В противном случае возвращает уже созданный экземпляр класса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Экземпляр класса, указанный в конструкторе DeferredInstanceFromClass.
	  
	  </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
	 Создает и возвращает экземпляр класса, указанного в конструкторе DeferredInstanceFromClass, если он не существует. В противном случае возвращает уже созданный экземпляр класса.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DeferredInstanceFromClass:reset"><apiName>reset</apiName><shortdesc>
      Сбрасывает состояние фабрики до начального, неинициализированного состояния.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Сбрасывает состояние фабрики до начального, неинициализированного состояния. Ссылка на кэшированный экземпляр удаляется.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
  FlexMovieClip является подклассом класса MovieClip для проигрывателя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:MovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexMovieClip является подклассом класса MovieClip для проигрывателя. Этот подкласс переопределяет метод <codeph>toString()</codeph>, настраивая его на возврат строки, указывающей расположение объекта в иерархии объектов DisplayObject в приложении.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexMovieClip:FlexMovieClip"><apiName>FlexMovieClip</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
	 
	  <p>Устанавливает свойство <codeph>name</codeph> равным строке, которая возвращается методом <codeph>createUniqueName()</codeph> класса mx.utils.NameUtils.</p>
	 
	  <p>Эта строка представляет собой имя класса объекта, сцепленное с целым числом, уникальным для всего приложения, например <codeph>FlexMovieClip14</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexMovieClip:toString"><apiName>toString</apiName><shortdesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, указывающая расположение этого объекта в иерархии DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении. Эта строка, например <codeph>MyApp0.HBox5.FlexMovieClip14</codeph>, создается методом <codeph>displayObjectToString()</codeph> класса mx.utils.NameUtils на основе свойства <codeph>name</codeph> для объекта и его предшествующих элементов.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IUIComponent"><apiName>IUIComponent</apiName><shortdesc>
  Интерфейс IUIComponent определяет основной набор API-интерфейсов, которые необходимо реализовать для создания нижестоящего объекта контейнера Flex или списка.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IUIComponent определяет основной набор API-интерфейсов, которые необходимо реализовать для создания нижестоящего объекта контейнера Flex или списка.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Число, являющееся значением свойства explicitHeight, если это свойство задано, или свойства measuredHeight в противном случае.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Число, являющееся значением свойства explicitWidth, если это свойство определено, или свойства measuredWidth в противном случае.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:initialize"><apiName>initialize</apiName><shortdesc>
      Инициализация объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Инициализация объекта.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/initialize()"><linktext>mx.core. UIComponent.initialize()</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:owns"><apiName>owns</apiName><shortdesc conref="mx.core.UIComponent#owns()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Boolean"/><apiDesc>Содержит значение <codeph>true</codeph>, если нижестоящий элемент принадлежит этому UIComponent.
      
      </apiDesc></apiReturn><apiParam><apiItemName>displayObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>A UIComponent.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#owns()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:parentChanged"><apiName>parentChanged</apiName><shortdesc conref="mx.core.UIComponent#parentChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Вышестоящий элемент этого объекта UIComponent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#parentChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IUIComponent:mx.core:IUIComponent:setVisible"><apiName>setVisible</apiName><shortdesc conref="mx.core.UIComponent#setVisible()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Boolean"/><apiDesc>Новое значение свойства <codeph>visible</codeph>. Укажите значение <codeph>true</codeph> для отображения компонентов, и <codeph>false</codeph> для их скрытия.
     
      </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Если значение равно <codeph>true</codeph>, передавать событие не следует. Если значение равно <codeph>false</codeph>, то, когда компонент становится видимым, передается событие <codeph>show</codeph>, а когда компонент становится невидимым – событие <codeph>hide</codeph>.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#setVisible()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      Координата Y базовой линии первой строки текста компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Координата Y базовой линии первой строки текста компонента.
     
      <p>Это свойство используется для реализации стиля ограничения <codeph>baseline</codeph>. Это свойство также используется для выравнивания метки FormItem относительно элементов управления в FormItem.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:document:get"><apiName>document</apiName><shortdesc>
      Ссылка на объект документа, связанный с этим компонентом.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ссылка на объект документа, связанный с этим компонентом. Объект документа является объектом наверху иерархии приложения Flex, компонента MXML или компонента ActionScript.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:enabled:get"><apiName>enabled</apiName><shortdesc>
      Возможность использования компонента пользователем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Возможность использования компонента пользователем. После установки свойства <codeph> enabled</codeph> на <codeph> false</codeph> некоторые компоненты по-прежнему отвечают на использование мыши, например, на событие mouseOver. В результате для полного отключения UIComponents требуется установить значение свойства <codeph>mouseEnabled</codeph> на <codeph>false</codeph>. При установке свойства <codeph>enabled</codeph> на <codeph>false</codeph> для контейнера Flex затемняет цвет контейнера и всех его нижестоящих элементов, а также блокирует ввод данных пользователем в контейнер и во все нижестоящие элементы.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc>
      Явно указанная высота для компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Явно указанная высота для компонента в пикселях в виде координат компонента. Если высота не указана явно, значение – <codeph>NaN</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitHeight"><linktext>mx.core.UIComponent.explicitHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      Число, указывающее максимальную высоту компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее максимальную высоту компонента в пикселях в виде координат компонента. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxHeight"><linktext>mx.core.UIComponent.explicitMaxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      Число, указывающее максимальную ширину компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее максимальную ширину компонента в пикселях в виде координат компонента. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxWidth"><linktext>mx.core.UIComponent.explicitMaxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc>
      Число, указывающее минимальную высоту компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее минимальную высоту компонента в пикселях в виде координат компонента. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMinHeight"><linktext>mx.core.UIComponent.explicitMinHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc>
      Число, указывающее минимальную ширину компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее минимальную ширину компонента в пикселях в виде координат компонента. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMinWidth"><linktext>mx.core.UIComponent.explicitMinWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc>
      Явно указанная ширина для компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Явно указанная ширина для компонента в пикселях в виде координат компонента. Если ширина не указана явно, значение – <codeph>NaN</codeph>.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitWidth"><linktext>mx.core.UIComponent.explicitWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      Один объект Sprite, распределенный между компонентами и используемый в качестве перекрытия для отображения индикатора фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      Один объект Sprite, распределенный между компонентами и используемый в качестве перекрытия для отображения индикатора фокуса. Этот объект совместно используется компонентами, если их вышестоящий элемент является компонентом, имеющим фокус, а не в случае реализации интерфейса IFocusManagerComponent.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/focusPane"><linktext>mx.core.UIComponent.focusPane</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:isPopUp:get"><apiName>isPopUp</apiName><shortdesc conref="mx.core.UIComponent#isPopUp">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isPopUp">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:maxHeight:get"><apiName>maxHeight</apiName><shortdesc>
      Число, указывающее максимальную высоту компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее максимальную высоту компонента в пикселях в виде координат компонента.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/maxHeight"><linktext>mx.core.UIComponent.maxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:maxWidth:get"><apiName>maxWidth</apiName><shortdesc>
      Число, указывающее максимальную ширину компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее максимальную ширину компонента в пикселях в виде координат компонента.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/maxWidth"><linktext>mx.core.UIComponent.maxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:minHeight:get"><apiName>minHeight</apiName><shortdesc>
      Число, указывающее минимальную высоту компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее минимальную высоту компонента в пикселях в виде координат компонента. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/minHeight"><linktext>mx.core.UIComponent.minHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:minWidth:get"><apiName>minWidth</apiName><shortdesc>
      Число, указывающее минимальную ширину компонента в пикселях в виде координат компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее минимальную ширину компонента в пикселях в виде координат компонента. 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/minWidth"><linktext>mx.core.UIComponent.minWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:owner:get"><apiName>owner</apiName><shortdesc conref="mx.core.IVisualElement#owner">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc conref="mx.core.IVisualElement#owner">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      Число, указывающее высоту компонента в виде процента от размера вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее высоту компонента в виде процента от размера вышестоящего элемента. Допустимые значения: 0 – 100.     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      Число, указывающее ширину компонента в процентах от размера его вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Число, указывающее ширину компонента в процентах от размера его вышестоящего элемента. Допустимые значения: 0 – 100.     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:systemManager:get"><apiName>systemManager</apiName><shortdesc>
      Ссылка на объект SystemManager для этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc>
      Ссылка на объект SystemManager для этого компонента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IUIComponent:mx.core:IUIComponent:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc>
      Используется EffectManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Используется EffectManager. Возвращает значение не равное null, если компонент не использует EffectManager для выполнения Tween.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
  FlexTextField является подклассом класса TextField и суперклассом для UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.text:TextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexTextField является подклассом класса TextField и суперклассом для UITextField. Этот подкласс переопределяет метод <codeph>toString()</codeph>, настраивая его на возврат строки, указывающей расположение объекта в иерархии объектов DisplayObject в приложении.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexTextField:FlexTextField"><apiName>FlexTextField</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
	 
	  <p>Устанавливает свойство <codeph>name</codeph> равным строке, которая возвращается методом <codeph>createUniqueName()</codeph> класса mx.utils.NameUtils.</p>
	 
	  <p>Эта строка представляет собой имя класса объекта, сцепленное с целым числом, уникальным для всего приложения, например <codeph>UITextField18</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexTextField:toString"><apiName>toString</apiName><shortdesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, указывающая расположение этого объекта в иерархии DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении. Эта строка, например <codeph>MyApp0.HBox5.UITextField18</codeph>, создается методом <codeph>displayObjectToString()</codeph> класса mx.utils.NameUtils на основе свойства <codeph>name</codeph> для объекта и его предшествующих элементов.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:DragSource"><apiName>DragSource</apiName><shortdesc>
  Класс DragSource содержит перетаскиваемые данные.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс DragSource содержит перетаскиваемые данные. Данные могут иметь несколько форматов в зависимости от типа элемента управления, инициировавшего перетаскивание.
 
  <p>Каждый формат данных определяется строкой. Метод <codeph>hasFormat()</codeph> используется для определения, содержит ли объект данные в требуемом формате. Метод <codeph>dataForFormat()</codeph> используется для извлечения данных в указанном формате.</p>
 
  <p>Данные можно добавить напрямую при помощи метода <codeph>addData()</codeph> или косвенно при помощи метода <codeph>addHandler()</codeph>. Метод <codeph>addHandler()</codeph> регистрирует обратный вызов, инициируемый при запросе данных. Это необходимо для добавления данных в несобственном формате системы, для которого могут потребоваться сложные вычисления или преобразования. Например, для необработанных звуковых данных можно добавить обработчик формата MP3. Преобразование в MP3 будет выполнено только при запросе данных в формате MP3.</p>
  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:DragSource:DragSource"><apiName>DragSource</apiName><shortdesc>
	  Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  Конструктор.
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DragSource:addData"><apiName>addData</apiName><shortdesc>
	  Добавляет данные и соответствующую строку формата в исходную позицию перетаскивания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>Объект, указывающий перетаскиваемые данные. Он может быть любым объектом, например, String, DataProvider и др.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Строка, указывающая метку, которая описывает формат этих данных.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Добавляет данные и соответствующую строку формата в исходную позицию перетаскивания. Этот метод не возвращает значение.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:addHandler"><apiName>addHandler</apiName><shortdesc>
	  Добавляет обработчик, вызываемый при запросе данных указанного формата.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>handler</apiItemName><apiType value="Function"/><apiDesc>Функция, указывающая вызываемый обработчик для запроса данных. Эта функция должна возвратить данные в указанном формате.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Строка, указывающая формат этих данных.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Добавляет обработчик, вызываемый при запросе данных указанного формата. Это необходимо для перетаскивания большого количества данных. Обработчик вызывается только при запросе данных. Этот метод не возвращает значение.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:dataForFormat"><apiName>dataForFormat</apiName><shortdesc>
	  Извлекает данные указанного формата.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект, содержащий данные в запрашиваемом формате. При перетаскивании нескольких элементов возвращаемое значение является массивом. Для элемента управления на основе списка возвращаемое значение всегда является массивом, даже если он содержит один элемент.
	  
	  </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Строка, указывающая метку, которая описывает формат возвращаемых данных. Эта строка может быть пользовательским значением при создании пользовательского целевого элемента при помощи метода <codeph>addData()</codeph>. 
	  <p>Элементы управления на основе списка имеют предварительно определенные значения для параметра <codeph>format</codeph>. Если элемент управления, инициировавший операцию перетаскивания, является деревом, то формат имеет значение treeItems, а элементы реализуют интерфейс ITreeDataProvider. Для прочих элементов управления на основе списка, содержащих встроенную поддержку перетаскивания, формат имеет значение Items, а элементы реализуют интерфейс IDataProvider.</p>
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Извлекает данные указанного формата. При добавлении данных при помощи метода <codeph>addData()</codeph> он возвращается напрямую. При добавлении данных при помощи метода <codeph>addHandler()</codeph> для возврата данных вызывается функция обработчика.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DragSource:hasFormat"><apiName>hasFormat</apiName><shortdesc>
	  Возвращает значение true,если источник данных содержит запрашиваемый формат; в противном случае он возвращает false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает значение <codeph>true</codeph>, если источник данных содержит запрашиваемый формат.
	  
	  </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>format</apiItemName><apiType value="String"/><apiDesc>Строка, указывающая метку, которая описывает формат данных. 
	 
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Возвращает значение <codeph>true</codeph>,если источник данных содержит запрашиваемый формат; в противном случае он возвращает <codeph>false</codeph>.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:DragSource:formats:get"><apiName>formats</apiName><shortdesc>
	  Содержит форматы перетаскиваемых данных, например, Array или Strings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
	  Содержит форматы перетаскиваемых данных, например, Array или Strings. Установите это свойство при помощи метода <codeph>addData()</codeph> или <codeph>addHandler()</codeph>. Значение по умолчанию зависит от добавленных к объекту DragSource данных.
	 
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IRawChildrenContainer"><apiName>IRawChildrenContainer</apiName><shortdesc>
  Интерфейс IRawChildrenContainer определяет API для контейнеров, возвращающих IChildList, который представляет все нижестоящие элементы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IRawChildrenContainer определяет API для контейнеров, возвращающих IChildList, который представляет все нижестоящие элементы. Этот интерфейс должен быть реализован контейнером, переопределившим API IChildList, как, например, методы <codeph>numChildren</codeph> и <codeph>addChild()</codeph> для управления только подмножеством фактических нижестоящих элементов. Так, класс mx.core.Container хранит набор нижестоящих элементов содержимого отдельно от нижестоящих элементов, не включенных в область содержимого, как, например, границы, строки заголовка и разделители.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link></related-links><apiValue id="mx.core:IRawChildrenContainer:mx.core:IRawChildrenContainer:rawChildren:get"><apiName>rawChildren</apiName><shortdesc>
	  Возвращает IChildList, представляющий все нижестоящие элементы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IChildList</apiValueClassifier></apiValueDef><apiDesc>
	  Возвращает IChildList, представляющий все нижестоящие элементы. Он используется FocusManager для обнаружения нижестоящих элементов, не включенных в область содержимого, которые могут попадать в фокус (например, компоненты в ControlBars).
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
  FlexBitmap является подклассом класса Bitmap для проигрывателя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Bitmap</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexBitmap является подклассом класса Bitmap для проигрывателя. Этот подкласс переопределяет метод <codeph>toString()</codeph>, настраивая его на возврат строки, указывающей расположение объекта в иерархии объектов DisplayObject в приложении.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:FlexBitmap:FlexBitmap"><apiName>FlexBitmap</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bitmapData</apiItemName><apiType value="flash.display:BitmapData"/><apiData>null</apiData><apiDesc>Данные для растрового изображения. 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>pixelSnapping</apiItemName><apiType value="String"/><apiData>auto</apiData><apiDesc>Определяет, должно ли растровое изображение привязываться к ближайшему пикселю.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>smoothing</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Определяет, следует ли сглаживать растровое изображение при масштабировании. 
	 
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
	 
	  <p>Устанавливает свойство <codeph>name</codeph> равным строке, которая возвращается методом <codeph>createUniqueName()</codeph> класса mx.utils.NameUtils. Эта строка представляет собой имя класса объекта, сцепленное с целым числом, уникальным для всего приложения, например <codeph>FlexBitmap12</codeph>.</p>
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/createUniqueName()"><linktext>mx.utils.NameUtil.createUniqueName()</linktext></link></related-links></apiConstructor><apiOperation id="mx.core:FlexBitmap:toString"><apiName>toString</apiName><shortdesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Строка, указывающая расположение этого объекта в иерархии DisplayObject. 
	 
	  </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
	  Возвращает строку, указывающую расположение этого объекта в иерархии объектов DisplayObject в приложении. Эта строка, например <codeph>MyApp0.HBox5.FlexBitmap12</codeph>, создается методом <codeph>displayObjectToString()</codeph> класса mx.utils.NameUtils на основе свойства <codeph>name</codeph> для объекта и его предшествующих элементов.
	  
	  </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link><link href="mx.utils.xml#NameUtil/displayObjectToString()"><linktext>mx.utils.NameUtil.displayObjectToString()</linktext></link></related-links></apiOperation></apiClassifier><apiClassifier id="mx.core:IMXMLObject"><apiName>IMXMLObject</apiName><shortdesc>
  Интерфейс IMXMLObject определяет API-интерфейсы, реализуемые невизуальным компонентом для корректной работы с компилятором MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IMXMLObject определяет API-интерфейсы, реализуемые невизуальным компонентом для корректной работы с компилятором MXML. В настоящее время единственным поддерживаемым методом является <codeph> initialized()</codeph>.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IMXMLObject:mx.core:IMXMLObject:initialized"><apiName>initialized</apiName><shortdesc>
      Вызывается после создания объекта реализации и инициализации всех свойств компонентов, указанных в теге MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>Документ MXML, создавший этот объект.
	 
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>Идентификатор, используемый <codeph>document</codeph> в качестве ссылки на этот объект. Если объект представляет собой глубокое свойство <codeph>document</codeph>, идентификатор <codeph>id</codeph> равен null.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывается после создания объекта реализации и инициализации всех свойств компонентов, указанных в теге MXML.
	 
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:FlexVersion"><apiName>FlexVersion</apiName><shortdesc> 
  Этот класс управляет обратной совместимостью инфраструктуры.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Этот класс управляет обратной совместимостью инфраструктуры. По мере выпуска новых версий изменяются некоторые аспекты инфраструктуры: поведения, стили и настройки по умолчанию, что может повлиять на приложения. Установка свойства <codeph>compatibilityVersion</codeph> позволяет установить поведение, соответствующее предыдущим выпускам. Это флаг имеет тип global: невозможно применить одну версию компоненту или группе компонентов, а другую версию – другому компоненту ил группе.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:FlexVersion:CURRENT_VERSION"><apiName>CURRENT_VERSION</apiName><shortdesc> 
      Текущая поставляемая версия Flex SDK, закодированная в виде uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Текущая поставляемая версия Flex SDK, закодированная в виде uint.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_2_0"><apiName>VERSION_2_0</apiName><shortdesc> 
      Значение compatibilityVersion для Flex 2.0 в числовом виде uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Значение <codeph>compatibilityVersion</codeph> для Flex 2.0 в числовом виде <codeph>uint</codeph>. Код может сравнивать эту константу со значением <codeph>compatibilityVersion</codeph>, чтобы реализовать определенное поведение для конкретной версии.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_2_0_1"><apiName>VERSION_2_0_1</apiName><shortdesc> 
      Значение compatibilityVersion для Flex 2.0.1 в числовом виде uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x02000001</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Значение <codeph>compatibilityVersion</codeph> для Flex 2.0.1 в числовом виде <codeph>uint</codeph>. Код может сравнивать эту константу со значением <codeph>compatibilityVersion</codeph>, чтобы реализовать определенное поведение для конкретной версии.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_3_0"><apiName>VERSION_3_0</apiName><shortdesc> 
      Значение compatibilityVersion для Flex 3.0 в числовом виде uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x03000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Значение <codeph>compatibilityVersion</codeph> для Flex 3.0 в числовом виде <codeph>uint</codeph>. Код может сравнивать эту константу со значением <codeph>compatibilityVersion</codeph>, чтобы реализовать определенное поведение для конкретной версии.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_4_0"><apiName>VERSION_4_0</apiName><shortdesc> 
      Значение compatibilityVersion для Flex 4.0 в числовом виде uint.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x04000000</apiData><apiType value="uint"/></apiValueDef><apiDesc> 
      Значение <codeph>compatibilityVersion</codeph> для Flex 4.0 в числовом виде <codeph>uint</codeph>. Код может сравнивать эту константу со значением <codeph>compatibilityVersion</codeph>, чтобы реализовать определенное поведение для конкретной версии.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_ALREADY_READ"><apiName>VERSION_ALREADY_READ</apiName><shortdesc>
      Строка, переданная методу compatibilityErrorFunction() в качестве параметра, если версия совместимости уже была считана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>versionAlreadyRead</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Строка, переданная методу <codeph>compatibilityErrorFunction()</codeph> в качестве параметра, если версия совместимости уже была считана.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:VERSION_ALREADY_SET"><apiName>VERSION_ALREADY_SET</apiName><shortdesc>
      Строка, передаваемая методу compatibilityErrorFunction() в качестве параметра, если версия совместимости уже задана.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>versionAlreadySet</apiData><apiType value="String"/></apiValueDef><apiDesc>
      Строка, передаваемая методу <codeph>compatibilityErrorFunction()</codeph> в качестве параметра, если версия совместимости уже задана.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityErrorFunction:get"><apiName>compatibilityErrorFunction</apiName><shortdesc> 
      Функция, вызов которой выполняется при многократной установке версии совместимости или при установке после ее прочтения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc> 
      Функция, вызов которой выполняется при многократной установке версии совместимости или при установке после ее прочтения. Если эта функция не установлена, то в SDK возникнет ошибка. Если функция установлена, то объект File вызывает эту функцию, но способ обработки вызова определяется разработчиком. Эта функция также будет вызываться при многократной установке функции. Функция принимает два параметра: параметр <codeph>uint</codeph>, представляющий устанавливаемую версию и строку с причиной ошибки установки – <codeph>VERSION_ALREADY_SET</codeph> или <codeph>VERSION_ALREADY_READ</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityVersion:get"><apiName>compatibilityVersion</apiName><shortdesc> 
      Текущая версия, для совместимости с которой адаптирована инфраструктура.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="uint"/><apiDefaultValue>FlexVersion.CURRENT_VERSION
      
      </apiDefaultValue></apiValueDef><apiDesc> 
      Текущая версия, для совместимости с которой адаптирована инфраструктура. Значение по умолчанию равно <codeph>CURRENT_VERSION</codeph>. Изменение возможно только один раз. Повторное изменение влечет за собой вызов метода <codeph>compatibilityErrorFunction()</codeph> при его наличии или возникновение ошибки времени выполнения. Изменение после считывания свойства <codeph>compatibilityVersion</codeph> вызывает возникновение ошибки, так как код зависит от уже запущенной версии. Уведомления не производятся. Предполагается, что установка производится однократно и до запуска кода, зависящего от версии.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:FlexVersion:compatibilityVersionString:get"><apiName>compatibilityVersionString</apiName><shortdesc> 
      Версия совместимости в виде строки формата «X.X.X».</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc> 
      Версия совместимости в виде строки формата «X.X.X». Это транзит в свойство <codeph>compatibilityVersion</codeph>, которое преобразует число в понятную строковую версию и обратно.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IToolTip"><apiName>IToolTip</apiName><shortdesc>
  Интерфейс IToolTip определяет API, которые аналогичные всплывающим подсказкам компоненты должны реализовать для работы с ToolTipManager.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IToolTip определяет API, которые аналогичные всплывающим подсказкам компоненты должны реализовать для работы с ToolTipManager. Класс ToolTip реализует этот интерфейс.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ToolTip"><linktext>mx.controls.ToolTip</linktext></link><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link></related-links><apiValue id="mx.core:IToolTip:mx.core:IToolTip:screen:get"><apiName>screen</apiName><shortdesc>
	  Прямоугольник, определяющий размер и позицию основной поверхности рисования для этой всплывающей подсказки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Rectangle"/></apiValueDef><apiDesc>
	  Прямоугольник, определяющий размер и позицию основной поверхности рисования для этой всплывающей подсказки.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IToolTip:mx.core:IToolTip:text:get"><apiName>text</apiName><shortdesc>
	  Текст, который отображается во всплывающей подсказке.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Текст, который отображается во всплывающей подсказке.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IStateClient2"><apiName>IStateClient2</apiName><shortdesc>
  Интерфейс IStateClient2 определяет интерфейс, который должен реализовываться компонентами для поддержки семантики состояния представлений Flex 4.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IStateClient</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IStateClient2 определяет интерфейс, который должен реализовываться компонентами для поддержки семантики состояния представлений Flex 4.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IStateClient2:mx.core:IStateClient2:hasState"><apiName>hasState</apiName><shortdesc>
      Определяет, было ли указанное состояние задано в данном UIComponent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Определяет, было ли задано указанное состояние 
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>stateName</apiItemName><apiType value="String"/><apiDesc>Имя проверяемого состояния. 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Определяет, было ли указанное состояние задано в данном UIComponent. 
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IStateClient2:mx.core:IStateClient2:states:get"><apiName>states</apiName><shortdesc>
      Набор объектов состояния представления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Набор объектов состояния представления.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IStateClient2:mx.core:IStateClient2:transitions:get"><apiName>transitions</apiName><shortdesc>
      Набор переходов состояний представления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      Набор переходов состояний представления.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:LayoutContainer"><apiName>LayoutContainer</apiName><shortdesc>
  Flex определяет контейнер по умолчанию или приложение, которые позволяют добавлять содержимое к модулю или приложению без явного определения другого контейнера.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="y"/><Exclude kind="property" name="x"/><Exclude kind="property" name="toolTip"/><Exclude kind="property" name="tabIndex"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="direction"/><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между верхней границей и областью содержимого. 
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между нижней границей и областью содержимого.  
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между нижестоящими элементами по вертикали. Значение по умолчанию зависит от класса компонента; если оно не переопределено для класса, значением по умолчанию является 6.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между нижестоящими элементами по горизонтали. Значение по умолчанию зависит от класса компонента; если оно не переопределено для класса, значением по умолчанию является 8.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="String">
<description>
  Вертикальное выравнивание нижестоящих элементов в контейнере. Допустимыми значениями являются <codeph>top</codeph>, <codeph>middle</codeph> и <codeph>bottom</codeph>. Значением по умолчанию является <codeph>top</codeph>, но некоторые контейнеры, например, ButtonBar, ControlBar, LinkBar и ToggleButtonBar имеют другие значения по умолчанию.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.core:LayoutContainer" playerVersion="Flash9" type="String">
<description>
  Горизонтальное выравнивание нижестоящих элементов в контейнере. Допустимыми значениями являются <codeph>left</codeph>, <codeph>center</codeph> и <codeph>right</codeph>. Значением по умолчанию является <codeph>left</codeph>, но некоторые контейнеры, например, ButtonBar и ToggleButtonBar имеют другие значения по умолчанию.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Application&gt;</code> tag inherits all of the tag 
  attributes of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Application
    <strong>Properties</strong>
    layout="vertical|horizontal|absolute"
    xmlns:<i>No default</i>="<i>No default</i>"
 
    <strong>Styles</strong> 
    horizontalAlign="center|left|right"
    horizontalGap="8"
    paddingBottom="0"
    paddingTop="0"
    verticalAlign="top|bottom|middle"
    verticalGap="6"
  
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.containers.utilityClasses:IConstraintLayout</apiBaseInterface><apiBaseClassifier>mx.core:Container</apiBaseClassifier></apiClassifierDef><apiDesc>
  Flex определяет контейнер по умолчанию или приложение, которые позволяют добавлять содержимое к модулю или приложению без явного определения другого контейнера. Flex создает этот контейнер на основе тега <codeph>&lt;mx:Application></codeph>, первого тега в файле приложения MXML, или на основе тега <codeph>&lt;mx:Module></codeph>, первого тега в файле модуля MXML. Использование только контейнера Application или Module в приложении представляется удобным, но в большинстве случаев до добавления к приложению или модулю элементов управления необходимо явно определить минимум еще один контейнер.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><apiConstructor id="mx.core:LayoutContainer:LayoutContainer"><apiName>LayoutContainer</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.core:LayoutContainer:protected:boxLayoutClass"><apiName>boxLayoutClass</apiName><shortdesc>
      Подкласс mx.containers.utilityClasses.Layout, составляющий макет
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Подкласс mx.containers.utilityClasses.Layout, составляющий макет
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:protected:canvasLayoutClass"><apiName>canvasLayoutClass</apiName><shortdesc>
      Подкласс mx.containers.utilityClasses.Layout, составляющий макет
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Подкласс mx.containers.utilityClasses.Layout, составляющий макет
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:constraintColumns:get"><apiName>constraintColumns</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintColumns">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:constraintRows:get"><apiName>constraintRows</apiName><shortdesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.containers.utilityClasses.IConstraintLayout#constraintRows">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:LayoutContainer:layout:get"><apiName>layout</apiName><shortdesc>
      Указывает механизм создания макета, используемый для этого приложения.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"vertical"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает механизм создания макета, используемый для этого приложения. Приложения могут использовать значения позиционирования <codeph>vertical</codeph>, <codeph>horizontal</codeph> или <codeph>absolute</codeph>. При вертикальном позиционировании нижестоящие компоненты располагаются в приложении вертикально сверху вниз в указанном порядке. При вертикальном размещении нижестоящие компоненты располагаются в приложении горизонтально слева направо в указанном порядке. При абсолютном размещении автоматический макет не применяется. Пользователь должен явно определить местоположение каждого нижестоящего элемента. 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:DeferredInstanceFromFunction"><apiName>DeferredInstanceFromFunction</apiName><shortdesc>
  Фабрика экземпляров с отложенным созданием, использующая функцию генератора для создания экземпляра требуемого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ITransientDeferredInstance</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Фабрика экземпляров с отложенным созданием, использующая функцию генератора для создания экземпляра требуемого объекта. Приложение использует метод <codeph>getInstance()</codeph> для создания экземпляра объекта при первой необходимости и последующего получения ссылки на объект.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#DeferredInstanceFromClass"><linktext>DeferredInstanceFromClass</linktext></link></related-links><apiConstructor id="mx.core:DeferredInstanceFromFunction:DeferredInstanceFromFunction"><apiName>DeferredInstanceFromFunction</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>generator</apiItemName><apiType value="Function"/><apiDesc>Функция, которая создает и возвращает экземпляр требуемого объекта.
      
      </apiDesc></apiParam><apiParam><apiItemName>destructor</apiItemName><apiType value="Function"/><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:DeferredInstanceFromFunction:getInstance"><apiName>getInstance</apiName><shortdesc>
	 Возвращает ссылку на экземпляр необходимого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Экземпляр объекта.
	  
	  </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
	 Возвращает ссылку на экземпляр необходимого объекта. Если экземпляр требуемого объекта не существует, то выполняется вызов функции, указанной в параметре конструктора этого класса <codeph>generator</codeph>.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:DeferredInstanceFromFunction:reset"><apiName>reset</apiName><shortdesc>
      Сбрасывает состояние фабрики до начального, неинициализированного состояния.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="4.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Сбрасывает состояние фабрики до начального, неинициализированного состояния. Ссылка на кэшированный экземпляр удаляется.
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.core:SWFBridgeGroup"><apiName>SWFBridgeGroup</apiName><shortdesc>
  SWFBridgeGroup представляет все соединения изолированной среды, которые сообщаются приложением вышестоящим и нижестоящим элементам.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFBridgeGroup</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  SWFBridgeGroup представляет все соединения изолированной среды, которые сообщаются приложением вышестоящим и нижестоящим элементам.
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SWFBridgeGroup:SWFBridgeGroup"><apiName>SWFBridgeGroup</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>owner</apiItemName><apiOperationClassifier>mx.managers:ISystemManager</apiOperationClassifier><apiDesc>Объект DisplayObject, являющийся владельцем этой группы. Объект должен быть объектом приложения SystemManager.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:SWFBridgeGroup:addChildBridge"><apiName>addChildBridge</apiName><shortdesc>
	  
      Добавляет новое соединение к контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Соединение для связи с нижестоящим содержимым.
     
      </apiDesc></apiParam><apiParam><apiItemName>bridgeProvider</apiItemName><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier><apiDesc>Объект DisplayObject, загрузивший содержимое, представленное соединением. Этот стиль обычно является экземпляром класса SWFLoader.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Добавляет новое соединение к контейнеру.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:containsBridge"><apiName>containsBridge</apiName><shortdesc>
	  
      Проверяет, является ли указанное соединение одним из соединений изолированной среды в данной группе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при наличии маркера; в противном случае – <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Тестируемое соединение.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Проверяет, является ли указанное соединение одним из соединений изолированной среды в данной группе.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:getChildBridgeProvider"><apiName>getChildBridgeProvider</apiName><shortdesc>
	  
      Получает владельца соединения и объект DisplayObject, загрузивший нижестоящий элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект, загрузивший нижестоящий элемент. 
      
      </apiDesc><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Целевое соединение.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Получает владельца соединения и объект DisplayObject, загрузивший нижестоящий элемент. Этот метод используется при получении события, если соединением является <codeph>event.target</codeph>. Соединение затем можно преобразовать в объект-владелец DisplayObject.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:getChildBridges"><apiName>getChildBridges</apiName><shortdesc>
	  
      Получает все нижестоящие соединения в этой группе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив всех нижестоящих соединений в этой группе. Все объекты массива имеют тип <codeph>IEventDispatcher</codeph>.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
	  
      Получает все нижестоящие соединения в этой группе.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:SWFBridgeGroup:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc>
	  
      Удаляет нижестоящее соединение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Удаляемое соединение.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
      Удаляет нижестоящее соединение.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:SWFBridgeGroup:parentBridge:get"><apiName>parentBridge</apiName><shortdesc>
      Обеспечивает взаимодействие c вышестоящим объектом, если он находится в другой изолированной среде.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Обеспечивает взаимодействие c вышестоящим объектом, если он находится в другой изолированной среде. Может иметь значение <codeph>null</codeph>, если вышестоящий элемент находится в той же изолированной среде или данное приложение является корневым приложением верхнего уровня.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IIMESupport"><apiName>IIMESupport</apiName><shortdesc>
  Интерфейс IIMESupport определяет интерфейс для всех компонентов, поддерживающих IME (редактор методов ввода).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IIMESupport определяет интерфейс для всех компонентов, поддерживающих IME (редактор методов ввода). IME используется для ввода символов китайского, японского и корейского алфавитов.
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.system.IME.xml"><linktext>flash.system.IME</linktext></link></related-links><apiValue id="mx.core:IIMESupport:mx.core:IIMESupport:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Указывает, нужно ли активировать IME, если этот компонент имеет фокус.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Указывает, нужно ли активировать IME, если этот компонент имеет фокус. Даже если компонент использует IME, он может не быть во всех конфигурациях. Например, TextArea устанавливает enableIME на значение false, если его параметр <codeph>editable</codeph> имеет значение <codeph>false</codeph>, так как в этой конфигурации не разрешен ввод. Аналогичным образом DataGrid всегда устанавливает enableIME на значение false. Если в DataGrid активируется ItemEditor, то редактор установит <codeph>enableIME</codeph> на значение <codeph>true</codeph>.
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IIMESupport:mx.core:IIMESupport:imeMode:get"><apiName>imeMode</apiName><shortdesc>
	  Режим IME для компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
	  Режим IME для компонента.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IDeferredInstantiationUIComponent"><apiName>IDeferredInstantiationUIComponent</apiName><shortdesc>
  Интерфейс IDeferredInstantiationUIComponent определяет интерфейс для компонента или объект, откладывающий создание экземпляров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IDeferredInstantiationUIComponent определяет интерфейс для компонента или объект, откладывающий создание экземпляров.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:createReferenceOnParentDocument"><apiName>createReferenceOnParentDocument</apiName><shortdesc>
      Создает ссылку на id этого объекта IUIComponent в вышестоящем объекте документа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Вышестоящий элемент данного объекта IUIComponent. 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Создает ссылку на <codeph>id</codeph> этого объекта IUIComponent в вышестоящем объекте документа. Эта функция может создавать многомерную ссылку, например, b [2] [4], на объекты в одном или нескольких повторителях. Если индексы имеют значение null, создается простая ссылка на не массив.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:deleteReferenceOnParentDocument"><apiName>deleteReferenceOnParentDocument</apiName><shortdesc>
      Удаляет ссылку на id этого объекта IUIComponent в вышестоящем объекте документа.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>parentDocument</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiDesc>Вышестоящий элемент данного объекта IUIComponent. 
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет ссылку на <codeph>id</codeph> этого объекта IUIComponent в вышестоящем объекте документа. Эта функция может удалить из многомерных ссылок, например, b [2] [4], объекты в одном или нескольких повторителях. Если индексы имеют значение null, удаляется простая ссылка на не массив.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:executeBindings"><apiName>executeBindings</apiName><shortdesc conref="mx.core.UIComponent#executeBindings()">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>Выполняются рекурсивные привязки для нижестоящих элементов этого компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#executeBindings()">
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:registerEffects"><apiName>registerEffects</apiName><shortdesc>
	  Обеспечивает регистрацию EffectManager в качестве одного из прослушивателей события для каждого события эффекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>effects</apiItemName><apiType value="Array"/><apiDesc>Массив строк имен эффектов.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
	  Обеспечивает регистрацию EffectManager в качестве одного из прослушивателей события для каждого события эффекта.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:cachePolicy:get"><apiName>cachePolicy</apiName><shortdesc conref="mx.core.UIComponent#cachePolicy">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#cachePolicy">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:descriptor:get"><apiName>descriptor</apiName><shortdesc conref="mx.core.UIComponent#descriptor">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:UIComponentDescriptor</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#descriptor">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:id:get"><apiName>id</apiName><shortdesc conref="mx.core.UIComponent#id">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#id">
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:IDeferredInstantiationUIComponent:mx.core:IDeferredInstantiationUIComponent:cacheHeuristic:set"><apiName>cacheHeuristic</apiName><shortdesc conref="mx.core.UIComponent#cacheHeuristic">
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#cacheHeuristic">
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:Repeater"><apiName>Repeater</apiName><shortdesc>
  Класс Repeater является динамическим объектом, соответствующим тегу &amp;lt;mx:Repeater&amp;gt;.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The &lt;Repeater&gt; class has the following properties:</p>
 
  <pre>
  &lt;mx:Repeater
    <strong>Properties</strong>
    id="<i>No default</i>"
    childDescriptors="<i>No default</i>"
    count="<i>No default</i>"
    dataProvider="<i>No default</i>"
    recycleChildren="false|true"
    startingIndex="0"
 
    <strong>Events</strong>
    repeat="<i>No default</i>"
    repeatEnd="<i>No default</i>"
    repeatStart="<i>No default</i>"
  &gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IRepeater</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс Repeater является динамическим объектом, соответствующим тегу <codeph>&lt;mx:Repeater></codeph>. Он создает несколько экземпляров подчиненных компонентов на основе dataProvider. Повторяемые компоненты могут быть любыми стандартными или пользовательскими элементами управления или контейнерами.
 
  <p>Тег <codeph>&lt;mx:Repeater></codeph> можно использовать только там, где разрешены теги элемента управления или контейнера, за исключением тега контейнера <codeph>&lt;mx:Application></codeph>. Для повтора компонента пользовательского интерфейса, разместите его тег в теге <codeph>&lt;mx:Repeater></codeph>. В документе MXML возможно использование нескольких тегов <codeph>&lt;mx:Repeater></codeph>. Можно также вложить теги <codeph>&lt;mx:Repeater></codeph>.</p>
 
  <p>Использование тега <codeph>&lt;mx:Repeater></codeph> для объектов, которые не расширяют класс UIComponent, невозможно.</p>
 
  </apiDesc><example conref="RepeaterExample.mxml"><swfblock conref="examples/RepeaterExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_START_repeatStart"><apiName>repeatStart</apiName><shortdesc>
  Отправляется, когда Flex начинает обрабатывать свойство dataProvider и создавать указанные подчиненные компоненты.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT_START</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется, когда Flex начинает обрабатывать свойство <codeph>dataProvider</codeph> и создавать указанные подчиненные компоненты. Это событие инициируется, даже если свойство <codeph>dataProvider</codeph> является пустым или имеет значение <codeph>null</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_END_repeatEnd"><apiName>repeatEnd</apiName><shortdesc>
  Отправляется после создания всех подчиненных компонентов повторителя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT_END</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется после создания всех подчиненных компонентов повторителя. Это событие инициируется, даже если свойство <codeph>dataProvider</codeph> является пустым или имеет значение <codeph>null</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.core:Repeater_mx.events.FlexEvent.REPEAT_repeat"><apiName>repeat</apiName><shortdesc>
  Отправляется по завершении обработки элемента и обновления свойств currentIndex и currentItem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.REPEAT</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется по завершении обработки элемента и обновления свойств <codeph>currentIndex</codeph> и <codeph>currentItem</codeph>.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:Repeater:Repeater"><apiName>Repeater</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:Repeater:executeChildBindings"><apiName>executeChildBindings</apiName><shortdesc>
     
      Добавляет привязки во все UIComponents, созданные этим повторителем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     
      Добавляет привязки во все UIComponents, созданные этим повторителем.
	 
	  <p>Этот метод вызывается инфраструктурой Flex. Как правило, разработчикам вызывать этот метод не требуется.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:Repeater:initializeRepeater"><apiName>initializeRepeater</apiName><shortdesc>
     
      Инициализирует новый объект Repeater.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>container</apiItemName><apiOperationClassifier>mx.core:IContainer</apiOperationClassifier><apiDesc>Контейнер, содержащий повторитель, который создаст в нем нижестоящие элементы.
	 
      </apiDesc></apiParam><apiParam><apiItemName>recurse</apiItemName><apiType value="Boolean"/><apiDesc>Логический флаг, указывающий на необходимость создания нижестоящих элементов для всех нижестоящих узлов.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     
      Инициализирует новый объект Repeater.
	 
	  <p>Этот метод вызывается инфраструктурой Flex. Как правило, разработчикам вызывать этот метод не требуется.</p>
	 
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:Repeater:childDescriptors"><apiName>childDescriptors</apiName><shortdesc>
      Массив объектов UIComponentDescriptor для нижестоящих элементов этого повторителя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
      Массив объектов UIComponentDescriptor для нижестоящих элементов этого повторителя.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:container:get"><apiName>container</apiName><shortdesc>
      Контейнер, содержащий этот повторитель.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IContainer</apiValueClassifier></apiValueDef><apiDesc>
      Контейнер, содержащий этот повторитель.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:count:get"><apiName>count</apiName><shortdesc>
     
      Необходимое число выполнений этого повторителя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
     
      Необходимое число выполнений этого повторителя.
	 
      <p>При достижении повторителем во время выполнения окончания поставщика данных фактическое число выполнений будет меньше запрашиваемого.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:currentIndex:get"><apiName>currentIndex</apiName><shortdesc>
     
      Индекс элемента в dataProvider обрабатывается во время данного выполнения повторителя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
     
      Индекс элемента в <codeph>dataProvider</codeph> обрабатывается во время данного выполнения повторителя.
	 
	  <p>По завершении выполнения повторителя данное свойство будет иметь значение <codeph>-1</codeph>. Однако свойство <codeph>repeaterIndex</codeph> повторяемого экземпляра компонента запоминает индекс элемента <codeph>dataProvider</codeph>, из которого он был создан. В случае вложенных повторителей можно использовать массив <codeph>repeaterIndices</codeph>.</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:currentItem:get"><apiName>currentItem</apiName><shortdesc>
     
      Элемент в dataProvider обрабатывается во время выполнения данного повторителя.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
     
      Элемент в <codeph>dataProvider</codeph> обрабатывается во время выполнения данного повторителя.
	 
	  <p>По завершении выполнения повторителя это свойство будет иметь значение <codeph>null</codeph>. Однако в этом случае можно вызвать метод <codeph>getRepeaterItem()</codeph> повторяемого экземпляра компонента для получения элемента <codeph>dataProvider</codeph>, из которого он был создан.</p>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
     
      Поставщик данных, используемый этим повторителем для создания повторяемых экземпляров нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
     
      Поставщик данных, используемый этим повторителем для создания повторяемых экземпляров нижестоящих элементов.
	  
	  <p>При чтении свойства <codeph>dataProvider</codeph> всегда будет получен объект ICollectionView или <codeph>null</codeph>. При установке свойства <codeph>dataProvider</codeph> не на <codeph>null</codeph> оно преобразуется в объект ICollectionView согласно следующим правилам:</p>
	 
	  <ul>
	    <li>При установке свойства на Array оно преобразуется в ArrayCollection.</li>
	    <li>При установке свойства на ICollectionView преобразование не выполняется.</li>
	    <li>При установке свойства на IList оно преобразуется в ListCollectionView.</li>
	    <li>При установке свойства на XML или XMLList оно преобразуется в XMLListCollection.</li>
	    <li>В противном случае оно преобразуется в отдельный элемент ArrayCollection.</li>
	  </ul>
     
      <p>Необходимо указать значение для свойства <codeph>dataProvider</codeph>, в противном случае компонент повторителя выполняться не будет.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:recycleChildren:get"><apiName>recycleChildren</apiName><shortdesc>
     
      Логический флаг, указывающий необходимость повторного использования повторителем ранее созданных нижестоящих элементов или создания новых.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     
      Логический флаг, указывающий необходимость повторного использования повторителем ранее созданных нижестоящих элементов или создания новых.
	 
	  <p>Если при изменении <codeph>dataProvider</codeph>, <codeph>startingIndex</codeph> или <codeph>count</codeph> этого повторителя установлено значение <codeph>true</codeph>, они будут повторно использованы при привязке новых данных к нижестоящим элементам. Если требуется большее число нижестоящих элементов, выполняется их создание и добавление. Если требуется меньшее число нижестоящих элементов, выполняется удаление дополнительных элементов и «сборка мусора».</p>
     
      <p>Если при изменении <codeph>dataProvider</codeph>, <codeph>startingIndex</codeph>, или <codeph>count</codeph> этого повторителя установлено значение <codeph>false</codeph>, все предыдущие созданные нижестоящие элементы будут удалены, и затем будут созданы и добавлены новые нижестоящие элементы из новых элементов данных.</p>
	 
	  <p>Это свойство имеет значение <codeph>false</codeph> по умолчанию. Установка значения на <codeph>true</codeph> может увеличить производительность, но не применима во всех ситуациях. Так, если предварительно созданные нижестоящие элементы содержат информацию о состоянии, например, в виде текста, введенного пользователем, то при удалении нижестоящих элементов это состояние будет невозможно восстановить.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:Repeater:startingIndex:get"><apiName>startingIndex</apiName><shortdesc>
     
      Индекс в dataProvider, с которого начинается создание нижестоящих элементов повторителем.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
     
      Индекс в <codeph>dataProvider</codeph>, с которого начинается создание нижестоящих элементов повторителем.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:IFontContextComponent"><apiName>IFontContextComponent</apiName><shortdesc>
  Позволяет компоненту поддерживать свойства для контекста шрифта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Позволяет компоненту поддерживать свойства для контекста шрифта. Свойство будет установлено на компонент инфраструктурой, поскольку нижестоящий элемент добавлен к списку отображения. Контекст шрифта важен для компонентов, создающих объекты flash.text.TextField с встроенными шрифтами. Если встроенный шрифт не зарегистрирован с помощью Font.registerFont(), объекты TextField могут использовать только встроенные шрифты, если они созданы в контексте встроенного шрифта. Этот интерфейс обеспечивает отслеживание контекста шрифта для компонента.
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:IFontContextComponent:mx.core:IFontContextComponent:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      Фабрика модулей, обеспечивающая контекст шрифта для этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Фабрика модулей, обеспечивающая контекст шрифта для этого компонента.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ISWFBridgeGroup"><apiName>ISWFBridgeGroup</apiName><shortdesc>
  Группа соединения изолированной среды – это группа соединений, которые представляют приложения, с которыми может взаимодействовать текущее приложение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Группа соединения изолированной среды – это группа соединений, которые представляют приложения, с которыми может взаимодействовать текущее приложение. Это приложение не может совместно использовать память с другими приложениями группы и не может иметь доступ к ним, а использует соединение для взаимодействия с ними.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:addChildBridge"><apiName>addChildBridge</apiName><shortdesc>
      Добавляет новое соединение к контейнеру.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Соединение для связи с нижестоящим содержимым.
     
      </apiDesc></apiParam><apiParam><apiItemName>bridgeProvider</apiItemName><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier><apiDesc>Объект DisplayObject, загрузивший содержимое, представленное соединением. Этот стиль обычно является экземпляром класса SWFLoader.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Добавляет новое соединение к контейнеру.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:containsBridge"><apiName>containsBridge</apiName><shortdesc>
      Проверяет, является ли указанное соединение одним из соединений изолированной среды в данной группе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при наличии маркера; в противном случае – <codeph>false</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Тестируемое соединение.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Проверяет, является ли указанное соединение одним из соединений изолированной среды в данной группе.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:getChildBridgeProvider"><apiName>getChildBridgeProvider</apiName><shortdesc>
      Получает владельца соединения и объект DisplayObject, загрузивший нижестоящий элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект, загрузивший нижестоящий элемент. 
      
      </apiDesc><apiOperationClassifier>mx.core:ISWFBridgeProvider</apiOperationClassifier></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Целевое соединение.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Получает владельца соединения и объект DisplayObject, загрузивший нижестоящий элемент. Этот метод используется при получении события, если соединением является <codeph>event.target</codeph>. Соединение затем можно преобразовать в объект-владелец DisplayObject.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:getChildBridges"><apiName>getChildBridges</apiName><shortdesc>
      Получает все нижестоящие соединения в этой группе.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Массив всех нижестоящих соединений в этой группе. Все объекты массива имеют тип <codeph>IEventDispatcher</codeph>.
      
      </apiDesc><apiType value="Array"/></apiReturn></apiOperationDef><apiDesc>
      Получает все нижестоящие соединения в этой группе.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:removeChildBridge"><apiName>removeChildBridge</apiName><shortdesc>
      Удаляет нижестоящее соединение.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bridge</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiDesc>Удаляемое соединение.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Удаляет нижестоящее соединение.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ISWFBridgeGroup:mx.core:ISWFBridgeGroup:parentBridge:get"><apiName>parentBridge</apiName><shortdesc>
      Соединение, используемое для взаимодействия с вышестоящим приложением группы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
      Соединение, используемое для взаимодействия с вышестоящим приложением группы.
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ILayoutElement"><apiName>ILayoutElement</apiName><shortdesc>
  Интерфейс ILayoutElement в основном используется классами макета для запроса установки размера и размещения элементов контейнеров на основе GroupBase.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс ILayoutElement в основном используется классами макета для запроса установки размера и размещения элементов контейнеров на основе GroupBase.
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getBoundsXAtSize"><apiName>getBoundsXAtSize</apiName><shortdesc>
      Возвращает координату Х границ элемента для указанного размера элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Ширина границ элемента или NaN, если требуется использовать предпочтительную ширину.
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Высота границ элемента или NaN, если требуется использовать предпочтительную высоту.
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает координату Х верхнего левого угла ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе указанных размеров границ, позиции макета и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает координату Х границ элемента для указанного размера элемента. Этот метод, как правило, используется макетами при выполнении метода measure() для предварительного определения позиции элемента в случае изменения размеров элемента в соответствии с определенной размерностью.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutBoundsSize"><linktext>setLayoutBoundsSize</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutPositionX"><linktext>getLayoutPositionX</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getBoundsYAtSize"><apiName>getBoundsYAtSize</apiName><shortdesc>
      Возвращает координату Y границ элемента при указанном размере элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Ширина границ элемента или NaN, если требуется использовать предпочтительную ширину.
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Высота границ элемента или NaN, если требуется использовать предпочтительную высоту.
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает координату Y верхнего левого угла ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе указанных размеров границ, позиции макета и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает координату Y границ элемента при указанном размере элемента. Этот метод, как правило, используется макетами при выполнении метода measure() для предварительного определения позиции элемента в случае изменения размеров элемента в соответствии с определенной размерностью.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutBoundsSize"><linktext>setLayoutBoundsSize</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutPositionY"><linktext>getLayoutPositionY</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsHeight"><apiName>getLayoutBoundsHeight</apiName><shortdesc>
      Возвращает высоту макета элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает ширину ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает высоту макета элемента. Размер, используемый элементом для отображения на экране.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutWidth"><linktext>getLayoutWidth</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsWidth"><apiName>getLayoutBoundsWidth</apiName><shortdesc>
      Возвращает ширину макета элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает ширину ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает ширину макета элемента. Размер, используемый элементом для отображения на экране.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutHeight"><linktext>getLayoutHeight</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsX"><apiName>getLayoutBoundsX</apiName><shortdesc>
      Возвращает координату Х, используемую элементом для отображения на экране.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает координату Х верхнего левого угла ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента, позиции макета и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает координату Х, используемую элементом для отображения на экране.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutPositionY"><linktext>getLayoutPositionY</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutBoundsY"><apiName>getLayoutBoundsY</apiName><shortdesc>
      Возвращает координату Y, используемую элементом для отображения на экране.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает координату Y верхнего левого угла ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента, позиции макета и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает координату Y, используемую элементом для отображения на экране.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutPositionX"><linktext>getLayoutPositionX</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutMatrix"><apiName>getLayoutMatrix</apiName><shortdesc>
      Возвращает матрицу преобразования, используемую для определения макета компонента относительно соответствующих элементов одного уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><p>Возвращает матрицу преобразования макета для этого элемента. Непосредственно изменять возвращаемое значение не следует, вместо этого необходимо вызвать метод setLayoutMatrix.</p>
     
      </apiDesc><apiType value="flash.geom:Matrix"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает матрицу преобразования, используемую для определения макета компонента относительно соответствующих элементов одного уровня.
     
      <p>Эта матрица, как правило, определяется двумерными свойствами компонента, такими как <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> и <codeph>transformY</codeph>. Некоторые компоненты могут иметь дополнительные свойства преобразования, которые применяются в дополнение к матрице макета для определения ее окончательного вида при вычислении. Например, <codeph>UIComponent</codeph> определяет свойство <codeph>offsets</codeph>.</p>
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutMatrix"><linktext>setLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D"><linktext>setLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/offsets"><linktext>mx.core.UIComponent.offsets</linktext></link><link href="" invalidHref="mx.graphics.baseClasses.xml#GraphicElement/offsets"><linktext>mx.graphics.baseClasses.GraphicElement.offsets</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getLayoutMatrix3D"><apiName>getLayoutMatrix3D</apiName><shortdesc>
      Возвращает преобразование макета Matrix3D для этого элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><p>Возвращает преобразование макета Matrix3D для этого элемента. Непосредственно изменять возвращаемое значение не следует, вместо этого необходимо вызвать метод setLayoutMatrix.</p>
      
      </apiDesc><apiType value="flash.geom:Matrix3D"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает преобразование макета Matrix3D для этого элемента.
     
      <p>Эта матрица, как правило, определяется свойствами преобразования компонента, такими как <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> и <codeph>transformY</codeph>. Некоторые компоненты могут иметь дополнительные свойства преобразования, которые применяются в дополнение к матрице макета для определения ее окончательного вида при вычислении. Например, <codeph>UIComponent</codeph> определяет свойство <codeph>offsets</codeph>.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix"><linktext>setLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D"><linktext>setLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/offsets"><linktext>mx.core.UIComponent.offsets</linktext></link><link href="" invalidHref="mx.graphics.baseClasses.xml#GraphicElement/offsets"><linktext>mx.graphics.baseClasses.GraphicElement.offsets</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMaxBoundsHeight"><apiName>getMaxBoundsHeight</apiName><shortdesc>
      Возвращает максимальную высоту элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает высоту ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе максимального размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает максимальную высоту элемента.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMaxWidth"><linktext>getMaxWidth</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMaxBoundsWidth"><apiName>getMaxBoundsWidth</apiName><shortdesc>
      Возвращает максимальную ширину элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает ширину ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе максимального размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает максимальную ширину элемента.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMaxHeight"><linktext>getMaxHeight</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMinBoundsHeight"><apiName>getMinBoundsHeight</apiName><shortdesc>
      Возвращает минимальную высоту элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает высоту ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе минимального размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает минимальную высоту элемента.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMinWidth"><linktext>getMinWidth</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getMinBoundsWidth"><apiName>getMinBoundsWidth</apiName><shortdesc>
      Возвращает минимальную ширину элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает ширину ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе минимального размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает минимальную ширину элемента.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getMinHeight"><linktext>getMinHeight</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getPreferredBoundsHeight"><apiName>getPreferredBoundsHeight</apiName><shortdesc>
      Возвращает предпочтительную высоту элемента. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает предпочтительную высоту элемента. Как правило, предпочтительная высота основывается на размере элемента по умолчанию и любом явном переопределении. Для UIComponent она совпадает с getExplicitOrMeasuredHeight().
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает высоту ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе предпочтительного размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает предпочтительную высоту элемента.   
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getPreferredWidth"><linktext>getPreferredWidth</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:getPreferredBoundsWidth"><apiName>getPreferredBoundsWidth</apiName><shortdesc>
      Возвращает предпочтительную ширину элемента. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает предпочтительную ширину элемента. Как правило, предпочтительная ширина основывается на размере элемента по умолчанию и любом явном переопределении. Для UIComponent она совпадает с getExplicitOrMeasuredWidth().
     
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, метод возвращает ширину ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе предпочтительного размера макета элемента и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает предпочтительную ширину элемента.    
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getPreferredHeight"><linktext>getPreferredHeight</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutBoundsPosition"><apiName>setLayoutBoundsPosition</apiName><shortdesc>
      Устанавливает координаты, используемые элементом для отображения на экране.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Если postLayoutTransform имеет значение true, элемент позиционируется таким образом, что верхний левый угол его ограничительной рамки имеет координаты (x, y). Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента, позиции макета и матрицы преобразования макета. Следует отметить, что вызовы метода setLayoutSize могут повлиять на позицию макета, таким образом, метод setLayoutPosition должен вызываться после метода setLayoutSize.
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData></apiParam></apiOperationDef><apiDesc>
      Устанавливает координаты, используемые элементом для отображения на экране.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutSize"><linktext>setLayoutSize</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutBoundsSize"><apiName>setLayoutBoundsSize</apiName><shortdesc>
      Устанавливает величину макета в соответствии с указанными размерами.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>Целевая ширина.
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>Целевая высота.
     
      </apiDesc></apiParam><apiParam><apiItemName>postLayoutTransform</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если postLayoutTransform имеет значение true, указанные размеры совпадают с размерами ограничительной рамки элемента. Ограничительная рамка находится в координатном пространстве вышестоящего элемента и вычисляется на основе размера макета элемента, позиции макета и матрицы преобразования макета.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Устанавливает величину макета в соответствии с указанными размерами. Размер, используемый элементом для отображения на экране. Если один из размеров остается неопределенным (NaN), величина элемента устанавливается с учетом максимального соответствия другому размеру. Этот подход целесообразно использовать в том случае, когда пользователю, выполняющему вызов, требуется сохранить пропорции элемента, например, если ширина элемента взаимосвязана с его высотой (текст, компоненты со сложными преобразованиями и т.д.) Если оба размера остаются неопределенными, то задаваемый размер элемента будет совпадать с его предпочтительным размером. Метод <codeph>setLayoutSize</codeph> не выполняет обрезку в соответствии с минимальными или максимальными размерами. Следует отметить, что вызовы метода setLayoutSize могут повлиять на позицию макета, таким образом, метод setLayoutSize должен вызываться перед методом setLayoutPosition.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/setLayoutPosition"><linktext>setLayoutPosition</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutMatrix"><apiName>setLayoutMatrix</apiName><shortdesc>
      Устанавливает матрицу преобразования, используемую для определения размера макета компонента и его позиции относительно соответствующих элементов одного уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix"/></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      Устанавливает матрицу преобразования, используемую для определения размера макета компонента и его позиции относительно соответствующих элементов одного уровня.
     
      <p>Эта матрица, как правило, определяется двумерными свойствами компонента, такими как <codeph>x</codeph>, <codeph>y</codeph>, <codeph>rotation</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>transformX</codeph> и <codeph>transformY</codeph>. Некоторые компоненты могут иметь дополнительные свойства преобразования, которые применяются в дополнение к матрице макета для определения ее окончательного вида при вычислении. Например, <codeph>UIComponent</codeph> определяет свойство <codeph>offsets</codeph>.</p>
      
      <p>Следует отметить, что матрица макета факторизуется методами getPreferredSize(), getMinSize(), getMaxSize(), getLayoutSize() при вычислении в координатах вышестоящего элемента, а также методом getLayoutPosition() – в координатах как вышестоящего, так и нижестоящего элемента. Макеты, для которых матрица преобразования вычисляется явным образом, как правило, вызывают этот метод и используют размеры в координатах нижестоящего элемента. Макеты, вызывающие этот метод, передают значение <codeph>false</codeph> в <codeph>invalidateLayout</codeph> таким образом, чтобы избежать инициирования последующей передачи макета.</p>
     
      <p>Разработчики, напрямую вызывающие этот метод, как правило, передают значение <codeph>true</codeph> в <codeph>invalidateLayout</codeph>, чтобы вышестоящий контейнер получал уведомления о необходимости переформатирования своих нижестоящих элементов.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix3D"><linktext>setLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/offsets"><linktext>mx.core.UIComponent.offsets</linktext></link><link href="" invalidHref="mx.graphics.baseClasses.xml#GraphicElement/offsets"><linktext>mx.graphics.baseClasses.GraphicElement.offsets</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:setLayoutMatrix3D"><apiName>setLayoutMatrix3D</apiName><shortdesc>
      Устанавливает трехмерную матрицу преобразования, используемую для определения размера макета компонента и его позиции относительно соответствующих элементов одного уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="flash.geom:Matrix3D"/></apiParam><apiParam><apiItemName>invalidateLayout</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      Устанавливает трехмерную матрицу преобразования, используемую для определения размера макета компонента и его позиции относительно соответствующих элементов одного уровня.
     
      <p>Эта матрица, как правило, определяется свойствами преобразования компонента, такими как <codeph>x</codeph>, <codeph>y</codeph>, <codeph>z</codeph>, <codeph>rotationX</codeph>, <codeph>rotationY</codeph>, <codeph>rotationZ</codeph>, <codeph>scaleX</codeph>, <codeph>scaleY</codeph>, <codeph>scaleZ</codeph>, <codeph>transformX</codeph> и <codeph>transformY</codeph>. Некоторые компоненты могут иметь дополнительные свойства преобразования, которые применяются в дополнение к матрице макета для определения ее окончательного вида при вычислении. Например, <codeph>UIComponent</codeph> определяет свойство <codeph>offsets</codeph>.</p>
      
      <p>Следует отметить, что трехмерная матрица факторизуется методами getPreferredSize(), getMinSize(), getMaxSize(), getLayoutSize() при вычислении в координатах вышестоящего элемента, а также методом getLayoutPosition() – в координатах как вышестоящего, так и нижестоящего элемента. Макеты, для которых матрица преобразования вычисляется явным образом, как правило, вызывают этот метод и используют размеры в координатах нижестоящего элемента. Макеты, вызывающие этот метод, передают значение <codeph>false</codeph> в <codeph>invalidateLayout</codeph> таким образом, чтобы избежать инициирования последующей передачи макета.</p>
     
      <p>Разработчики, напрямую вызывающие этот метод, как правило, передают значение <codeph>true</codeph> в <codeph>invalidateLayout</codeph>, чтобы вышестоящий контейнер получал уведомления о необходимости переформатирования своих нижестоящих элементов.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ILayoutElement/getLayoutMatrix"><linktext>getLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/setLayoutMatrix"><linktext>setLayoutMatrix</linktext></link><link href="mx.core.xml#ILayoutElement/getLayoutMatrix3D"><linktext>getLayoutMatrix3D</linktext></link><link href="mx.core.xml#UIComponent/offsets"><linktext>mx.core.UIComponent.offsets</linktext></link><link href="" invalidHref="mx.graphics.baseClasses.xml#GraphicElement/offsets"><linktext>mx.graphics.baseClasses.GraphicElement.offsets</linktext></link></related-links></apiOperation><apiOperation id="mx.core:ILayoutElement:mx.core:ILayoutElement:transformAround"><apiName>transformAround</apiName><shortdesc>
     Служебный метод для обновления вращения, масштабирования и перемещения преобразования при сохранении определенной точки, указанной в собственной области координат компонента, зафиксированной в области координат вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transformCenter</apiItemName><apiType value="flash.geom:Vector3D"/><apiDesc>фиксированная точка, в собственных координатах компонента, относительно его вышестоящего элемента.
     </apiDesc></apiParam><apiParam><apiItemName>scale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>новые значения масштаба преобразования
     </apiDesc></apiParam><apiParam><apiItemName>rotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>новые значения вращения преобразования
     </apiDesc></apiParam><apiParam><apiItemName>translation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>новые значения перемещения преобразования
     </apiDesc></apiParam><apiParam><apiItemName>postLayoutScale</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>новые значения масштаба post-layout преобразования 
     </apiDesc></apiParam><apiParam><apiItemName>postLayoutRotation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>новые значения вращения post-layout преобразования 
     </apiDesc></apiParam><apiParam><apiItemName>postLayoutTranslation</apiItemName><apiType value="flash.geom:Vector3D"/><apiData>null</apiData><apiDesc>новые значения перемещения post-layout преобразования 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
     Служебный метод для обновления вращения, масштабирования и перемещения преобразования при сохранении определенной точки, указанной в собственной области координат компонента, зафиксированной в области координат вышестоящего элемента. Эта функция присваивает предоставленные значения для вращения, масштабирования и перемещения, и затем по мере необходимости обновляет свойства x/y/z для сохранения фиксированного центра преобразования.
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:baseline:get"><apiName>baseline</apiName><shortdesc>
      Вертикальное смещение в пикселях от целевого объекта привязки к положению базовой линии элемента управления.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Вертикальное смещение в пикселях от целевого объекта привязки к положению базовой линии элемента управления. По умолчанию целевым объектом привязки является верхний край области содержимого контейнера. В макетах с расширенными ограничениями, целевой объект может быть строкой ограничений. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате anchorTargetName:value, например, row1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      Координата Y базовой линии первой строки текста компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Координата Y базовой линии первой строки текста компонента.
     
      <p>Это свойство используется для реализации стиля ограничения <codeph>baseline</codeph>. Это свойство также используется для выравнивания метки FormItem относительно элементов управления в FormItem.</p>
     
      <p>Каждый компонент должен переопределять это свойство.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:bottom:get"><apiName>bottom</apiName><shortdesc>
      Вертикальное смещение в пикселях от нижнего края компонента к нижнему краю целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Вертикальное смещение в пикселях от нижнего края компонента к нижнему краю целевого объекта привязки. По умолчанию целевым объектом привязки является область содержимого контейнера. В макетах с расширенными ограничениями, целевой объект может быть строкой ограничений. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате anchorTargetName:value, например, row1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:hasLayoutMatrix3D:get"><apiName>hasLayoutMatrix3D</apiName><shortdesc>
      True, если элемент имеет трехмерную матрицу.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      True, если элемент имеет трехмерную матрицу. Используйте <codeph>hasLayoutMatrix3D</codeph> вместо вызова и исследования значения <codeph>getLayoutMatrix3D()</codeph>, так как этот метод возвращает действительную матрицу, даже если элемент используется в двухмерной графике.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:horizontalCenter:get"><apiName>horizontalCenter</apiName><shortdesc>
      Горизонтальное смещение в пикселях от центра компонента к центру области содержимого целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Горизонтальное смещение в пикселях от центра компонента к центру области содержимого целевого объекта привязки. Целевым объектом привязки по умолчанию является сам контейнер. В макетах с расширенными ограничениями целевым объектом привязки может быть столбец ограничения. В этом случае областью содержимого является пространство между предыдущим столбцом (или стороной контейнера) и целевым столбцом. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для указания целевого объекта привязки установите в качестве значения свойства строку в формате constraintColumnId:value, например, col1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:left:get"><apiName>left</apiName><shortdesc>
      Горизонтальное смещение в пикселях от левого края компонента к левому краю целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Горизонтальное смещение в пикселях от левого края компонента к левому краю целевого объекта привязки. По умолчанию целевым объектом привязки является область содержимого контейнера. В макетах с расширенными ограничениями целевым объектом может быть столбец ограничений. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате anchorTargetName:value, например, col1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:percentHeight:get"><apiName>percentHeight</apiName><shortdesc>
      Число, указывающее высоту компонента в виде процента от размера вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, указывающее высоту компонента в виде процента от размера вышестоящего элемента. Допустимые значения: 0 – 100 Определение свойства <codeph>height</codeph> или <codeph>explicitHeight</codeph> приводит к установке для этого свойства значения NaN.
     
      <p>Это свойство возвращает числовое значение только в том случае, если свойство было задано предварительно; однако оно не отражает точный размер компонента в процентах.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:percentWidth:get"><apiName>percentWidth</apiName><shortdesc>
      Число, указывающее ширину компонента в процентах от размера его вышестоящего элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, указывающее ширину компонента в процентах от размера его вышестоящего элемента. Допустимые значения: 0 – 100 Задание свойств <codeph>width</codeph> или <codeph>explicitWidth</codeph> приводит к сбросу значения этого свойства в значение NaN.
     
      <p>Это свойство возвращает числовое значение только в том случае, если свойство было задано предварительно; однако оно не отражает точный размер компонента в процентах.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:right:get"><apiName>right</apiName><shortdesc>
      Горизонтальное смещение в пикселях от правого края компонента к правому краю целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Горизонтальное смещение в пикселях от правого края компонента к правому краю целевого объекта привязки. По умолчанию целевым объектом привязки является область содержимого контейнера. В макетах с расширенными ограничениями целевым объектом может быть столбец ограничений. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате anchorTargetName:value, например, col1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:top:get"><apiName>top</apiName><shortdesc>
      Вертикальное смещение в пикселях от верхнего края компонента к верхнему краю целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Вертикальное смещение в пикселях от верхнего края компонента к верхнему краю целевого объекта привязки. По умолчанию целевым объектом привязки является область содержимого контейнера. В макетах с расширенными ограничениями, целевой объект может быть строкой ограничений. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате anchorTargetName:value, например, row1:10.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ILayoutElement:mx.core:ILayoutElement:verticalCenter:get"><apiName>verticalCenter</apiName><shortdesc>
      Вертикальное смещение в пикселях от центра компонента к центру области содержимого целевого объекта привязки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Вертикальное смещение в пикселях от центра компонента к центру области содержимого целевого объекта привязки. Целевым объектом привязки по умолчанию является сам контейнер. В макетах с расширенными ограничениями целевым объектом привязки может являться строка ограничений. В этом случае область содержимого является пространством между предыдущей строкой (или стороной контейнера) и целевой строкой. Установка для свойства числового значения или числовой строки (например, 10) определяет использование целевого объекта привязки по умолчанию. Для определения целевого объекта привязки установите в качестве значения свойства строку в формате constraintColumnId:value, например, row1:10.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ContainerCreationPolicy"><apiName>ContainerCreationPolicy</apiName><shortdesc>
  Класс ContainerCreationPolicy определяет значения констант для свойства creationPolicy класса Container.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ContainerCreationPolicy определяет значения констант для свойства <codeph>creationPolicy</codeph> класса Container.
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link></related-links><apiValue id="mx.core:ContainerCreationPolicy:ALL"><apiName>ALL</apiName><shortdesc>
	  Немедленное создание всех потомков.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Немедленное создание всех потомков.
	 
	  <p>Избегайте использования этого свойства <codeph>creationPolicy</codeph>, так как оно увеличивает время запуска приложения. Создание невидимых для пользователя компонентов обычно не имеет смысла. При использовании это политики для отправки данных в скрытые компоненты при запуске следует проектировать приложения таким образом, чтобы данные хранились в переменных и компонентах, которые затем используются для получения таких данных с помощью привязки данных или обработчика <codeph>initialize</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:AUTO"><apiName>AUTO</apiName><shortdesc>
	  Задержка создания некоторых или всех потомков до возникновения необходимости.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Задержка создания некоторых или всех потомков до возникновения необходимости.
	 
	  <p>Например, если контейнер навигатора (например, TabNavigator) имеет эту политику <codeph>creationPolicy</codeph>, то выполнится немедленное создание всех нижестоящих элементов и потомков исходно выбранного элемента. В то же время потомки других элементов не будут созданы до момента перехода к ним пользователя.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:NONE"><apiName>NONE</apiName><shortdesc>
	  Не создавать нижестоящих элементов.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Не создавать нижестоящих элементов.
	 
	  <p>Такое значение <codeph>creationPolicy</codeph> обязывает разработчика осуществлять программное создание нижестоящих элементов из объектов UIComponentDescriptor путем вызова метода <codeph>createComponentsFromDescriptors()</codeph> для вышестоящего элемента.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ContainerCreationPolicy:QUEUED"><apiName>QUEUED</apiName><shortdesc>
	  Добавление контейнера в очередь создания.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>queued</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  Добавление контейнера в очередь создания.
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:UITextField"><apiName>UITextField</apiName><shortdesc>
  Класс UITextField определяет компонент, используемый многими компонентами Flex для отображения текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="yes" name="textIndent" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера в пикселях.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:UITextField" playerVersion="Flash10" type="Class">
<description>
  Класс, реализующий IUITextField, который используется этим компонентом для визуализации текста.
 
  <p>Этот тип можно установить либо для класса mx.core.UITextField (для использования типичного класса TextField, встроенного в Flash Player), либо для класса mx.core.UIFTETextField (для использования Text Layout Framework для достижения оптимизированной визуализации текста, включая двусторонний макет).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Определяет использование подчеркивания текста. Возможными значениями являются <codeph>none</codeph> и <codeph>underline</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Выравнивание текста внутри контейнера. Возможными значениями являются <codeph>left</codeph>, <codeph>right</codeph> или <codeph>center</codeph>.
 
  <p>Значением по умолчанию является <codeph>left</codeph>. Для компонента FormItem, значением по умолчанию является <codeph>right</codeph>. Для компонентов Button, LinkButton и AccordionHeader значением по умолчанию является <codeph>center</codeph> и это свойство является допустимым, только если свойство <codeph>labelPlacement</codeph> установлено на <codeph>left</codeph> или <codeph>right</codeph>. Если свойство <codeph>labelPlacement</codeph> установлено на <codeph>top</codeph> или <codeph>bottom</codeph>, текст и любой значок располагаются по центру.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:UITextField" playerVersion="Flash10" type="String">
<description>
  Языковой стандарт текста, отображаемый этим компонентом.
 
  <p>FTE и TLF используют этот языковой стандарт для сопоставления символов «Юникод» с глифами шрифтов и поиска резервных шрифтов.</p>
 
  <p>Примечание. Этот стиль применяется только в том случае, если компонент MX определяет UIFTETextField как <codeph>textFieldClass</codeph>.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между каждым символом. Положительное значение увеличивает интервал между символами вне стандартного интервала, в то время как отрицательное значение его уменьшает.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:UITextField" playerVersion="Flash9" type="Boolean">
<description>
  Логическое значение, указывающее использование кернинга (<codeph>true</codeph> – включено и <codeph>false</codeph> – отключено). Кернинг регулирует промежуток между определенными символьными парами для повышения удобочитаемости и должен использоваться, например, в заголовках при использовании крупных шрифтов. Кернинг поддерживается только для встроенных шрифтов. Определенные шрифты, например, Verdana, и моноширинные шрифты, например, Courier New, не поддерживают кернинг.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Определяет использование жирного шрифта в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph> bold</codeph>. Значение по умолчанию для элемента управления Button <codeph>bold</codeph>. Значением по умолчанию для всех прочих элементов управления является<codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>thickness</codeph> внутреннего класса TextFields, представляющего текст в элементе управления Flex. Это свойство указывает толщину границ глифов. Возможные значения – числа от -200 до 200. 
  
  <p>Это свойство применяется только при использовании встроенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField; его можно применять только к определенным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Определяет использование курсива в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph>italic</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Высота текста в пикселях.    
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>sharpness</codeph> для внутреннего класса TextFields, представляющего текст в элементах управления Flex. Это свойство указывает резкость краев глифа. Возможными значениями являются числа от -400 до 400. 
  
  <p>Это свойство применяется только при использовании встроенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField; его можно применять только к определенным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>gridFitType</codeph> внутреннего класса TextFields, представляющего текст в элементах управления Flex. Допустимыми значениями являются <codeph>none</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>pixel</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) и <codeph>subpixel</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Это свойство применяется только при использовании встроенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField; его можно применять только к определенным символам.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Имя используемого шрифта. В отличие от использования в реализации CSS, разделенные запятой списки не поддерживаются. Можно использовать любое имя гарнитуры шрифтов. При указании общего имени шрифта оно преобразовывается в соответствующий шрифт устройства. <codeph/> <codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:UITextField" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>antiAliasType</codeph> внутреннего класса TextFields. Возможными значениями являются <codeph>normal</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) и <codeph>advanced</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Значением по умолчанию является <codeph>advanced</codeph>, активирующее расширенные возможности сглаживания для шрифтов. Установлено на <codeph>normal</codeph> для деактивации расширенных возможностей сглаживания.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
  
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления класса TextField; его можно применять только к определенным символам.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:UITextField" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте при его деактивации.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:UITextField" playerVersion="Flash10" type="String">
<description>
  Направленность текста, отображенная компонентом.
 
  <p>Допустимые значения – <codeph>ltr</codeph> для текста, записываемого слева направо, как в гарнитурах латинского стиля, и <codeph>rtl</codeph> для текста, записываемого справа налево, как в арабском и иврите.</p>
 
  <p>FTE и TLF используют это значение в алгоритме двухстороннего макета текста, который сопоставляет последовательность символов «Юникод» с последовательностью глифов.</p>
 
  <p>Примечание. Этот стиль применяется только в том случае, если компонент MX определяет UIFTETextField как <codeph>textFieldClass</codeph>.</p>
 
  <p>Параметр <codeph>direction</codeph> также влияет на выравнивание текста в рамках TLFTextField. Однако он не влияет на размещение TLFTextField внутри компонента.</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:UITextField" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте, включая метку компонента. <codeph/> <codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Число пикселей между правой границей компонента и правым краем его области содержимого.
  <p>По умолчанию используется значение 0.</p>
  <p/>
  <p>Значение по умолчанию для элемента управления ComboBox: 5.</p>
  <p>Значением по умолчанию для контейнера Form является 16.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Количество пикселей между левой границей компонента и левым краем его области содержимого.
  <p>По умолчанию используется значение 0.</p>
  <p/>
  <p>Значение по умолчанию для элемента управления ComboBox: 5.</p>
  <p>Значением по умолчанию для контейнера Form является 16.</p>
  <p>Значением по умолчанию для элемента управления Tree является 2.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.core:UITextField" playerVersion="Flash9" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
 
  <p>По умолчанию используется значение 2.</p>
  <p>Значение по умолчанию для элемента управления ComboBox: 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.automation:IAutomationObject</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.core:IFlexModule</apiBaseInterface><apiBaseInterface>mx.core:IInvalidating</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.managers:IToolTipManagerClient</apiBaseInterface><apiBaseInterface>mx.core:IUITextField</apiBaseInterface><apiBaseClassifier>mx.core:FlexTextField</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс UITextField определяет компонент, используемый многими компонентами Flex для отображения текста. Например, элемент управления mx.controls.Button использует компонент UITextField для определения области метки элемента Button. 
 
  <p>Класс UITextField расширяет класс flash.text.TextField для поддержки дополнительных функций, необходимых Flex, например, стилей CSS, недействительности, измерений, макета, функций включения и отключения, всплывающих подсказок и поддержки редактора методов ввода (IME) для китайских, японских и корейских текстов.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="mx.core.xml#UITextFormat"><linktext>mx.core.UITextFormat</linktext></link></related-links><apiConstructor id="mx.core:UITextField:UITextField"><apiName>UITextField</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:UITextField:getExplicitOrMeasuredHeight"><apiName>getExplicitOrMeasuredHeight</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Число, являющееся значением свойства explicitHeight, если это свойство задано, или свойства measuredHeight в противном случае.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredHeight()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getExplicitOrMeasuredWidth"><apiName>getExplicitOrMeasuredWidth</apiName><shortdesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Number"/><apiDesc>Число, являющееся значением свойства explicitWidth, если это свойство определено, или свойства measuredWidth в противном случае.
      
      </apiDesc></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#getExplicitOrMeasuredWidth()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getStyle"><apiName>getStyle</apiName><shortdesc conref="mx.core.UIComponent#getStyle()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="any"/><apiDesc>Значение стиля.
      
      </apiDesc></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя свойства стиля.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#getStyle()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:getTextStyles"><apiName>getTextStyles</apiName><shortdesc>
      Возвращает объект TextFormat, который представляет данные форматирования символов объекта UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект TextFormat. 
     
      </apiDesc><apiType value="flash.text:TextFormat"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает объект TextFormat, который представляет данные форматирования символов объекта UITextField.
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextFormat.xml"><linktext>flash.text.TextFormat</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:getUITextFormat"><apiName>getUITextFormat</apiName><shortdesc>
      Возвращает объект UITextFormat, содержащий сведения о форматировании этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект, содержащий информацию форматирования для этого компонента.
     
      </apiDesc><apiOperationClassifier>mx.core:UITextFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
      Возвращает объект UITextFormat, содержащий сведения о форматировании этого компонента. Этот метод схож с методом <codeph>getTextFormat()</codeph> класса flash.text.TextField, но возвращает объект UITextFormat вместо объекта TextFormat.
     
      <p>Класс UITextFormat расширяет класс TextFormat для добавления методов измерения текста <codeph>measureText()</codeph> и <codeph>measureHTMLText()</codeph>.</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UITextFormat"><linktext>mx.core.UITextFormat</linktext></link><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:initialize"><apiName>initialize</apiName><shortdesc>
      Инициализирует этот компонент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Инициализирует этот компонент.
     
      <p>Этот метод требуется интерфейсом IUIComponent, но не изменяет поле UITextField.</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateDisplayList"><apiName>invalidateDisplayList</apiName><shortdesc conref="mx.core.UIComponent#invalidateDisplayList()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateDisplayList()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc conref="mx.core.UIComponent#invalidateProperties()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateProperties()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:invalidateSize"><apiName>invalidateSize</apiName><shortdesc conref="mx.core.UIComponent#invalidateSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#invalidateSize()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:move"><apiName>move</apiName><shortdesc conref="mx.core.UIComponent#move()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Положение компонента слева внутри вышестоящего элемента.
      
       </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Положение компонента внутри вышестоящего элемента.
       
       </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#move()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:owns"><apiName>owns</apiName><shortdesc>
      Возвращает true, если этот объект является вышестоящим элементом или владельцем элемента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если объект UITextField является вышестоящим элементом или владельцем нижестоящего элемента.
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>child</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>Нижестоящий DisplayObject.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Возвращает <codeph>true</codeph>, если этот объект является вышестоящим элементом или владельцем элемента.
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UITextField/owner"><linktext>владелец</linktext></link></related-links></apiOperation><apiOperation id="mx.core:UITextField:parentChanged"><apiName>parentChanged</apiName><shortdesc>
      Эта функция вызывается, когда объекту UITextField назначается вышестоящий элемент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>p</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>Вышестоящий элемент данного объекта UITextField.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Эта функция вызывается, когда объекту UITextField назначается вышестоящий элемент. Этот метод обычно не вызывается.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:replayAutomatableEvent"><apiName>replayAutomatableEvent</apiName><shortdesc>
      
      Воспроизводит указанное событие.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> при успешном воспроизведении.  
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Воспроизводимое событие.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      Воспроизводит указанное событие. Автор компонента должен вызвать super.replayAutomatableEvent в случае, если поведение воспроизведения по умолчанию определено в суперклассе.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setActualSize"><apiName>setActualSize</apiName><shortdesc conref="mx.core.UIComponent#setActualSize()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>w</apiItemName><apiType value="Number"/><apiDesc>Ширина объекта.
     
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="Number"/><apiDesc>Высота объекта.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#setActualSize()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setColor"><apiName>setColor</apiName><shortdesc>
      Задает цвет шрифта для текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>Новый цвет шрифта.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Задает цвет шрифта для текста.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setFocus"><apiName>setFocus</apiName><shortdesc conref="mx.core.UIComponent#setFocus()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#setFocus()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setStyle"><apiName>setStyle</apiName><shortdesc>
      Не выполняет действий.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя свойства стиля.
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value=""/><apiDesc>Новое значение стиля.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Не выполняет действий. UITextField не может содержать встроенных стилей.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:setVisible"><apiName>setVisible</apiName><shortdesc>
      Устанавливает свойство visible для этого объекта UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/><apiDesc><codeph>true</codeph>, чтобы сделать поле UITextField видимым, в противном случае – <codeph>false</codeph>.
     
      </apiDesc></apiParam><apiParam><apiItemName>noEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc><codeph>true</codeph> если при изменении видимости событие не создается.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Устанавливает свойство <codeph>visible</codeph> для этого объекта UITextField.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:styleChanged"><apiName>styleChanged</apiName><shortdesc conref="mx.core.UIComponent#styleChanged()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>Имя свойства стиля или значение null, если все стили для этого компонента были изменены.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.core.UIComponent#styleChanged()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:truncateToFit"><apiName>truncateToFit</apiName><shortdesc>
      Усекает текст для его полного горизонтального размещения в области, определенной для элемента управления, и присоединяет к тексту многоточие (...).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph>, если текст требовал усечения.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>truncationIndicator</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>Текст, добавляемый после усечения. При передаче значения <codeph>null</codeph> будет использоваться локализуемая строка, например <codeph>...</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Усекает текст для его полного горизонтального размещения в области, определенной для элемента управления, и присоединяет к тексту многоточие (...).
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:UITextField:validateNow"><apiName>validateNow</apiName><shortdesc conref="mx.core.UIComponent#validateNow()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc conref="mx.core.UIComponent#validateNow()">
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:UITextField:automationDelegate:get"><apiName>automationDelegate</apiName><shortdesc>
      Объект-делегат, выполняющий обработку функциональных возможностей, связанных с автоматизацией.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Объект-делегат, выполняющий обработку функциональных возможностей, связанных с автоматизацией.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationEnabled:get"><apiName>automationEnabled</apiName><shortdesc>
      
      Значение true, если этот компонент доступен для автоматизации; в противном случае – false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Значение true, если этот компонент доступен для автоматизации; в противном случае – false.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationName:get"><apiName>automationName</apiName><shortdesc>
      
      Имя, которое можно использовать в качестве идентификатора этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      
      Имя, которое можно использовать в качестве идентификатора этого объекта.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationOwner:get"><apiName>automationOwner</apiName><shortdesc>
      
      Владелец этого компонента в целях автоматизации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Владелец этого компонента в целях автоматизации.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationParent:get"><apiName>automationParent</apiName><shortdesc>
      
      Вышестоящий элемент этого компонента в целях автоматизации.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      
      Вышестоящий элемент этого компонента в целях автоматизации.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationValue:get"><apiName>automationValue</apiName><shortdesc>
      
      Это значение, как правило, соответствует отображению объекта и может быть удобным для соотнесения идентификатора с объектом, поскольку отображено в приложении.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      
      Это значение, как правило, соответствует отображению объекта и может быть удобным для соотнесения идентификатора с объектом, поскольку отображено в приложении.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:automationVisible:get"><apiName>automationVisible</apiName><shortdesc>
      
      Значение true, если этот компонент является видимым для автоматизации; в противном случае – false.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      
      Значение true, если этот компонент является видимым для автоматизации; в противном случае – false.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:baselinePosition:get"><apiName>baselinePosition</apiName><shortdesc>
      Координата Y базовой линии первой строки текста.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      Координата Y базовой линии первой строки текста.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:className:get"><apiName>className</apiName><shortdesc>
      Имя класса этого экземпляра, например, DataGridItemRenderer.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      Имя класса этого экземпляра, например, <codeph>DataGridItemRenderer</codeph>.
     
      <p>Эта строка не включает имя пакета. Если требуется включить также и имя пакета, выполняется вызов метода <codeph>getQualifiedClassName()</codeph> из пакета flash.utils. Этот метод возвратит строку, например, <codeph>mx.controls.dataGridClasses::DataGridItemRenderer</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:document:get"><apiName>document</apiName><shortdesc>
      Ссылка на объект документа, связанный с этим объектом UITextField.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Ссылка на объект документа, связанный с этим объектом UITextField. Объект документа представляет собой объект на самом верху иерархии приложения Flex, компонента MXML или компонента AS.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      Флаг, указывающий на необходимость активации IME при получении компонентом фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, указывающий на необходимость активации IME при получении компонентом фокуса.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:enabled:get"><apiName>enabled</apiName><shortdesc>
      Логическое значение, указывающее, включен ли компонент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      Логическое значение, указывающее, включен ли компонент. Это свойство влияет только на цвет текста, а не на возможность редактирования поля UITextField. Для управления возможностью редактирования используйте свойство <codeph>flash.text.TextField.type</codeph>.
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitHeight:get"><apiName>explicitHeight</apiName><shortdesc conref="mx.core.UIComponent#explicitHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitMaxHeight:get"><apiName>explicitMaxHeight</apiName><shortdesc>
      Число, указывающее максимальную высоту компонента в пикселях в виде координат компонента, если задано свойство maxHeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, указывающее максимальную высоту компонента в пикселях в виде координат компонента, если задано свойство maxHeight. Так как свойство maxHeight является свойством только для чтения, этот метод вернет значение NaN. Для использования этого свойства необходимо перезаписать этот метод.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxHeight"><linktext>mx.core.UIComponent.explicitMaxHeight</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitMaxWidth:get"><apiName>explicitMaxWidth</apiName><shortdesc>
      Число, указывающее максимальную ширину компонента в пикселях в виде координат компонента, если установлено свойство maxWidth.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Число, указывающее максимальную ширину компонента в пикселях в виде координат компонента, если установлено свойство maxWidth. Так как свойство maxWidth является свойством только для чтения, этот метод вернет значение NaN. Для использования этого свойства необходимо перезаписать этот метод.
      
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#UIComponent/explicitMaxWidth"><linktext>mx.core.UIComponent.explicitMaxWidth</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:explicitMinHeight:get"><apiName>explicitMinHeight</apiName><shortdesc conref="mx.core.UIComponent#explicitMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitMinWidth:get"><apiName>explicitMinWidth</apiName><shortdesc conref="mx.core.UIComponent#explicitMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:explicitWidth:get"><apiName>explicitWidth</apiName><shortdesc conref="mx.core.UIComponent#explicitWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#explicitWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:focusPane:get"><apiName>focusPane</apiName><shortdesc>
      
      Один объект Sprite, распределенный между компонентами и используемый в качестве перекрытия для отображения индикатора фокуса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      
      Один объект Sprite, распределенный между компонентами и используемый в качестве перекрытия для отображения индикатора фокуса. Этот объект совместно используется компонентами, если их вышестоящий элемент является компонентом, имеющим фокус, а не в случае реализации интерфейса IFocusManagerComponent.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:ignorePadding:get"><apiName>ignorePadding</apiName><shortdesc>
      Если значение равно true, стили paddingLeft и paddingRight не будут оставлять промежуток вокруг текста компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Если значение равно <codeph>true</codeph>, стили <codeph>paddingLeft</codeph> и <codeph>paddingRight</codeph> не будут оставлять промежуток вокруг текста компонента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      Указывает режим IME (редактор методов ввода).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Указывает режим IME (редактор методов ввода). IME позволяет пользователям вводить текст на китайском, японском и корейском языках. Режим IME устанавливается при перемещении фокуса на элемент управления и возвращается к предыдущему значению при потере фокуса этим элементом управления.
     
     <p>Класс flash.system.IMEConversionMode определяет константы для допустимых значений этого свойства. Можно также указать значение <codeph>null</codeph> и не указывать IME.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.core:UITextField:includeInLayout:get"><apiName>includeInLayout</apiName><shortdesc conref="mx.core.UIComponent#includeInLayout">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#includeInLayout">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:inheritingStyles:get"><apiName>inheritingStyles</apiName><shortdesc>
      Начало цепочки UITextField с ненаследуемыми стилями.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Начало цепочки UITextField с ненаследуемыми стилями. Метод <codeph>getStyle()</codeph> имеет доступ к <codeph>nonInheritingStyles[styleName]</codeph> для поиска всей связанной с прототипом цепочки. Этот объект настраивается методом <codeph>initProtoChain()</codeph>. Как правило, это свойство не вызывается напрямую.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:initialized:get"><apiName>initialized</apiName><shortdesc>
      Флаг, определяющий, прошел ли объект все три фазы проверки макета (при условии, что все они требовались)
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, определяющий, прошел ли объект все три фазы проверки макета (при условии, что все они требовались)
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:isPopUp:get"><apiName>isPopUp</apiName><shortdesc conref="mx.core.UIComponent#isPopUp">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.core.UIComponent#isPopUp">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:maxHeight:get"><apiName>maxHeight</apiName><shortdesc conref="mx.core.UIComponent#maxHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#maxHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:maxWidth:get"><apiName>maxWidth</apiName><shortdesc conref="mx.core.UIComponent#maxWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#maxWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredMinHeight:get"><apiName>measuredMinHeight</apiName><shortdesc conref="mx.core.UIComponent#measuredMinHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredMinWidth:get"><apiName>measuredMinWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredMinWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredMinWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc conref="mx.core.UIComponent#measuredWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#measuredWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:minHeight:get"><apiName>minHeight</apiName><shortdesc conref="mx.core.UIComponent#minHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#minHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:minWidth:get"><apiName>minWidth</apiName><shortdesc conref="mx.core.UIComponent#minWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#minWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:moduleFactory:get"><apiName>moduleFactory</apiName><shortdesc>
      Объект moduleFactory, использованный для создания полей TextFields в верном контексте SWF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      Объект moduleFactory, использованный для создания полей TextFields в верном контексте SWF. Это необходимо для обеспечения работы встроенных шрифтов.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nestLevel:get"><apiName>nestLevel</apiName><shortdesc conref="mx.core.UIComponent#nestLevel">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc conref="mx.core.UIComponent#nestLevel">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nonInheritingStyles:get"><apiName>nonInheritingStyles</apiName><shortdesc>
      Начало цепочки UITextField с ненаследуемыми стилями.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      Начало цепочки UITextField с ненаследуемыми стилями. Метод <codeph>getStyle()</codeph> имеет доступ к <codeph>nonInheritingStyles[styleName]</codeph> для поиска всей связанной с прототипом цепочки. Этот объект настраивается методом <codeph>initProtoChain()</codeph>. Как правило, это свойство не вызывается напрямую.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:nonZeroTextHeight:get"><apiName>nonZeroTextHeight</apiName><shortdesc>
      В отличие от textHeight, этот элемент возвращает ненулевое значение даже при пустом тексте.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      В отличие от textHeight, этот элемент возвращает ненулевое значение даже при пустом тексте. В этом случае возвращается предполагаемое значение textHeight при непустом тексте.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:owner:get"><apiName>owner</apiName><shortdesc>
      По умолчанию равен вышестоящему контейнеру этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      По умолчанию равен вышестоящему контейнеру этого объекта. Однако если этот объект является нижестоящим компонентом, отображаемым вышестоящим элементом, например, раскрывающимся списком элемента управления ComboBox, то владельцем компонента является компонент, отображающий этот объект. 
     
      <p>Этими свойствами управляет не приложение Flex, а каждый отдельный компонент. Таким образом, при использовании метода <codeph>PopUpManger.createPopUp()</codeph> или <codeph>PopUpManger.addPopUp()</codeph> для отображения внутреннего компонента необходимо задать в качестве значения свойства <codeph>owner</codeph> внутреннего компонента компонент, который обеспечил отображение этого раскрывающегося элемента.</p>
     
      <p>Значением по умолчанию является значение свойства <codeph>parent</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:parent:get"><apiName>parent</apiName><shortdesc>
      Вышестоящий контейнер или компонент данного компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObjectContainer"/></apiValueDef><apiDesc>
      Вышестоящий контейнер или компонент данного компонента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:percentHeight:get"><apiName>percentHeight</apiName><shortdesc conref="mx.core.UIComponent#percentHeight">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#percentHeight">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:percentWidth:get"><apiName>percentWidth</apiName><shortdesc conref="mx.core.UIComponent#percentWidth">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc conref="mx.core.UIComponent#percentWidth">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:processedDescriptors:get"><apiName>processedDescriptors</apiName><shortdesc>
      Значение приравнивается true после того, как метод createChildren() создает внутренние нижестоящие элементы компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Значение приравнивается <codeph>true</codeph> после того, как метод <codeph>createChildren()</codeph> создает внутренние нижестоящие элементы компонента.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:styleName:get"><apiName>styleName</apiName><shortdesc conref="mx.core.UIComponent#styleName">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc conref="mx.core.UIComponent#styleName">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:systemManager:get"><apiName>systemManager</apiName><shortdesc conref="mx.core.UIComponent#systemManager">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.managers:ISystemManager</apiValueClassifier></apiValueDef><apiDesc conref="mx.core.UIComponent#systemManager">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:toolTip:get"><apiName>toolTip</apiName><shortdesc conref="mx.core.UIComponent#toolTip">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc conref="mx.core.UIComponent#toolTip">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:tweeningProperties:get"><apiName>tweeningProperties</apiName><shortdesc conref="mx.core.UIComponent#tweeningProperties">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc conref="mx.core.UIComponent#tweeningProperties">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:UITextField:updateCompletePendingFlag:get"><apiName>updateCompletePendingFlag</apiName><shortdesc>
      Флаг, определяющий, прошел ли объект все три фазы проверки макета (при условии, что все они требовались)
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, определяющий, прошел ли объект все три фазы проверки макета (при условии, что все они требовались)
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
  MovieClipAsset – это подкласс класса flash.display.MovieClip, представляющий символы видеоклипов, которые встроены в приложение Flex из файла SWF, созданного в программе Flash.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.core:IBorder</apiBaseInterface><apiBaseClassifier>mx.core:FlexMovieClip</apiBaseClassifier></apiClassifierDef><apiDesc>
  MovieClipAsset – это подкласс класса flash.display.MovieClip, представляющий символы видеоклипов, которые встроены в приложение Flex из файла SWF, созданного в программе Flash. Он реализует интерфейс IFlexDisplayObject, который позволяет объекту MovieClip отображаться в элементе управления Image или использоваться в качестве фона контейнера или темы оформления компонента.
 
  <p>Встраиваемый объект MovieClip должен быть символом видеоклипа из файла SWF. Использование встроенного видеоклипа обычно вызвано созданием покадровой анимации Flash, которую необходимо использовать в приложении Flex. Компилятор MXML автоматически создает класс, который расширяет класс MovieClipAsset для представления встроенной анимации.</p>
 
  <p>Класс MovieClipAsset обычно не используются напрямую при создании приложения Flex. Например, анимацию видеоклипа можно использовать в качестве фонового изображения приложения с помощью следующего кода:</p>
 
  <pre>
  &lt;mx:Application backgroundImage="@Embed(source='Assets.swf', symbol='BackgroundAnimation')"/></pre>
 
  <p>или</p>
 
  <pre>
  &lt;mx:Style>
      Application
      {
          backgroundImage: Embed(source="Assets.swf", symbol="BackgroundAnimation")
      }
  &lt;mx:Style/></pre>
 
  <p>Для этого необязательно учитывать, что компилятор MXML создал подкласс MovieClipAsset.</p>
 
  <p>При этом понимание процессов на уровне ActionScript может оказаться полезным. Для встраивания видеоклипа в ActionScript объявляется переменная типа Class, в которой размещаются метаданные <codeph>[Embed]</codeph>. Например:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Assets.swf", symbol="BackgroundAnimation")]
  private var backgroundAnimationClass:Class;</pre>
 
  <p>Компилятор MXML определяет, что символ BackgroundAnimation в файле Assets.swf является видеоклипом, автоматически создает представляющий его подкласс класса MovieClipAsset и настраивает переменную, которая становится ссылкой на этот автоматически созданный класс. Это ссылку класса затем можно использовать для создания экземпляров MovieClipAsset с помощью оператора <codeph>new</codeph>, для которых можно использовать API класса MovieClip:</p>
 
  <pre>
  var backgroundAnimation:MovieClipAsset =
      MovieClipAsset(new backgroundAnimationClass());
  var n:int = backgroundAnimation.totalFrames;</pre>
 
  <p>В то же время самостоятельное создание экземпляров MovieClipAsset необходимо в редких случаях, так как свойства и стили изображения могут устанавливаться в классе, порождающем изображение, а его компоненты создадут все необходимые экземпляры. Например, для установки данной анимации в качестве фона приложения следует выполнить следующий код:</p>
 
  <pre>
  &lt;mx:Application backgroundImage="{backgroundAnimationClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:MovieClipAsset:MovieClipAsset"><apiName>MovieClipAsset</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:MovieClipAsset:move"><apiName>move</apiName><shortdesc>
      
	  Перемещает этот объект по указанным координатам осей x и y.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси x для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>Новая позиция по оси y для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Перемещает этот объект по указанным координатам осей x и y.
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:MovieClipAsset:setActualSize"><apiName>setActualSize</apiName><shortdesc>
      
	  Устанавливает фактический размер для этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newWidth</apiItemName><apiType value="Number"/><apiDesc>Новая ширина для этого объекта.
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newHeight</apiItemName><apiType value="Number"/><apiDesc>Новая высота для этого объекта.
	  
	  </apiDesc></apiParam></apiOperationDef><apiDesc>
      
	  Устанавливает фактический размер для этого объекта.
	 
	  <p>Этот метод главным образом используется в реализации метода <codeph>updateDisplayList()</codeph>, в котором вы вычисляете фактический размер этого объекта, основанный на его явном размере, размере по отношению к вышестоящему элементу (процент от его размера), а также измеренный размер. Далее путем вызова метода <codeph>setActualSize()</codeph> вы применяете этот фактический размер к объекту.</p>
	 
	  <p>В других ситуациях вместо вызова этого метода требуется установка свойств, например, <codeph>width</codeph>, <codeph>height</codeph>, <codeph>percentWidth</codeph> или <codeph>percentHeight</codeph>.</p>
	 
	  </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:MovieClipAsset:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      
      Возвращает объект EdgeMetrics для границы с четырьмя свойствами: left, top, right и bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      
      Возвращает объект EdgeMetrics для границы с четырьмя свойствами: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> и <codeph>bottom</codeph>. Значение каждого свойства равно толщине одной стороны границы в пикселях.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredHeight:get"><apiName>measuredHeight</apiName><shortdesc>
      
	  Рассчитанная высота этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Рассчитанная высота этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в нужное время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:MovieClipAsset:measuredWidth:get"><apiName>measuredWidth</apiName><shortdesc>
      
	  Измеренная ширина этого объекта.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      
	  Измеренная ширина этого объекта.
	 
	  <p>Как правило, для графических тем оформления выполняется жесткая кодировка, так как это число представляет собой всего лишь число пикселей в графике. Для тем оформления кода также может использоваться жесткая кодировка для выполнения рисунка определенного размера. При изменении размера в зависимости от свойств, возможно, потребуется использование ILayoutManagerClient, что приведет к вызову метода <codeph>measure()</codeph> в требуемое время и позволит вычислить <codeph>measuredHeight</codeph>.</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
  SoundAsset – это подкласс класса flash.media.Sound, который представляет звуки, встраиваемые в приложение Flex.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFlexAsset</apiBaseInterface><apiBaseClassifier>flash.media:Sound</apiBaseClassifier></apiClassifierDef><apiDesc>
  SoundAsset – это подкласс класса flash.media.Sound, который представляет звуки, встраиваемые в приложение Flex.
 
  <p>Встраиваемый звук может находиться в файле MP3. Возможно также встраивание звукового символа, находящегося в файле SWF, который создан во Flash. В обоих случаях компилятор MXML автоматически создает класс, который расширяет класс MovieClipAsset для представления встроенной анимации.</p>
 
  <p>Класс SoundAsset обычно не используются напрямую при создании приложения Flex. Например, встраивание MP3-файла и его использование в SoundEffect осуществляется с помощью следующего кода:</p>
 
  <pre>
  &lt;mx:SoundEffect id="beep" source="@Embed(source='Beep.mp3')"/></pre>
 
  <p>Для этого необязательно учитывать, что компилятор MXML создал подкласс SoundAsset.</p>
 
  <p>При этом понимание процессов на уровне ActionScript может оказаться полезным. Для встраивания растрового изображения в ActionScript объявляется переменная типа Class, в которой размещаются метаданные <codeph>[Embed]</codeph>. Например, встраивание файла MP3 осуществляется следующим образом:</p>
 
  <pre>
  [Bindable]
  [Embed(source="Beep.mp3")]
  private var beepClass:Class;</pre>
 
  <p>Компилятор MXML определяет расширение .mp3, преобразует данные MP3 в звуковой формат, используемый в проигрывателе, автоматически создает подкласс класса SoundAsset и настраивает переменную, которая становится ссылкой на этот автоматически созданный класс. Это ссылку класса затем можно использовать для создания экземпляров SoundAsset с помощью оператора <codeph>new</codeph>, для которых можно использовать API класса Sound:</p>
 
  <pre>
    var beepSound:SoundAsset = SoundAsset(new beepClass());
    beepSound.play();</pre>
 
  <p>В то же время самостоятельное создание экземпляров SoundAsset необходимо в редких случаях, так как свойства и стили звука могут устанавливаться в классе, порождающем звук, а его компоненты создадут все необходимые экземпляры. Например, для воспроизведения этого звука с эффектом SoundEffect можно задать свойство SoundEffect <codeph>source</codeph> равным <codeph>beepClass</codeph>. В MXML это выполняется следующим образом:</p>
 
  <pre>
  &lt;mx:SoundEffect id="beepEffect" source="{beepClass}"/></pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.core:SoundAsset:SoundAsset"><apiName>SoundAsset</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.core:IFlexModuleFactory"><apiName>IFlexModuleFactory</apiName><shortdesc>
  Интерфейс IFlexModuleFactory представляет соглашение, ожидаемое для начальной загрузки приложений Flex и динамически загружаемых модулей.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IFlexModuleFactory представляет соглашение, ожидаемое для начальной загрузки приложений Flex и динамически загружаемых модулей.
 
  <p>Вызов метода<codeph>info()</codeph> допустим сразу после отправки события <codeph>complete</codeph>.</p>
 
  <p>Правильно функционирующий модуль отправляет событие <codeph>ready</codeph> при возможности безопасного вызова метода <codeph>create()</codeph>.</p>
  
  </apiDesc></apiClassifierDetail><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowDomain"><apiName>allowDomain</apiName><shortdesc>
      Вызовы Security.allowDomain() для SWF, связанные с IFlexModuleFactory, плюс все SWF, связанные с RSL, предварительно загружены с помощью IFlexModuleFactory.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      Вызовы Security.allowDomain() для SWF, связанные с IFlexModuleFactory, плюс все SWF, связанные с RSL, предварительно загружены с помощью IFlexModuleFactory.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
      Вызовы Security.allowInsecureDomain() для SWF, связанные с IFlexModuleFactory, плюс все SWF, связанные с RSL, предварительно загружены с помощью IFlexModuleFactory.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      Вызовы Security.allowInsecureDomain() для SWF, связанные с IFlexModuleFactory, плюс все SWF, связанные с RSL, предварительно загружены с помощью IFlexModuleFactory.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:callInContext"><apiName>callInContext</apiName><shortdesc>
      Способ вызова метода в этом контексте IFlexModuleFactory
     
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>При любом значении, возвращаемом функцией.
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>fn</apiItemName><apiType value="Function"/><apiDesc>Вызываемая функция или метод
      </apiDesc></apiParam><apiParam><apiItemName>thisArg</apiItemName><apiType value="Object"/><apiDesc>Указатель функции
      </apiDesc></apiParam><apiParam><apiItemName>argArray</apiItemName><apiType value="Array"/><apiDesc>Аргументы функции
      </apiDesc></apiParam><apiParam><apiItemName>returns</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>Если true, функция возвращает значение
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Способ вызова метода в этом контексте IFlexModuleFactory
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="Function.apply.xml"><linktext>Function.apply</linktext></link></related-links></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:create"><apiName>create</apiName><shortdesc>
      Метод фабрики запрашивает экземпляр определения модуля.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Экземпляр модуля или <codeph>null</codeph>.
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>parameters</apiItemName><apiType value="restParam"/><apiDesc>Дополнительный список параметров. Можно передавать любое количество параметров, которые затем хранятся в массиве<codeph>parameters</codeph>.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Метод фабрики запрашивает экземпляр определения модуля.
     
      <p>Для формирования методов фабрики на основе вводимых данных требуется предоставить набор дополнительных параметров. Передача значения <codeph>null</codeph> указывает на возможное создание определения по умолчанию.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:getImplementation"><apiName>getImplementation</apiName><shortdesc>
      Получить реализацию для интерфейса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/></apiParam></apiOperationDef><apiDesc>
      Получить реализацию для интерфейса. Схож с Singleton.getInstance, но выполняется через IFlexModuleFactory.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:info"><apiName>info</apiName><shortdesc>
      Возвращает блок пар «клавиша – значение», которые сохраняют определенность данных для модуля.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Объект, содержащий пары «клавиша – значение». Как правило, этот объект содержит информацию о модуле или модулях, созданных этой фабрикой; например:
     
      <pre>
      return {"description": "This module returns 42."};
      </pre>
      
      Другие общие значения в возвращаемом объекте включают следующие элементы:
      <ul>
       <li><codeph>fonts</codeph>: список встроенных шрифтов.</li>
       <li><codeph>rsls</codeph>: список динамических общих библиотек.</li>
       <li><codeph>mixins</codeph>: список классов, инициализируемых при запуске.</li>
      </ul>
      
      </apiDesc><apiType value="Object"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает блок пар «клавиша – значение», которые сохраняют определенность данных для модуля. Этот метод всегда успешно выполняется, но может возвратить пустой объект.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:registerImplementation"><apiName>registerImplementation</apiName><shortdesc>
      Зарегистрировать реализацию для интерфейса.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>interfaceName</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>impl</apiItemName><apiType value="Object"/></apiParam></apiOperationDef><apiDesc>
      Зарегистрировать реализацию для интерфейса. Схож с Singleton.registerClass, но выполняется через IFlexModuleFactory и принимает экземпляр вместо класса.
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:IFlexModuleFactory:mx.core:IFlexModuleFactory:preloadedRSLs:get"><apiName>preloadedRSLs</apiName><shortdesc>
      RSL, загружаемые с помощью IFlexModuleFactory до запуска приложения.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      RSL, загружаемые с помощью IFlexModuleFactory до запуска приложения. RSL, загружаемые этим приложением, не включены в этот список. Информация о preloadedRSLs хранится в словаре. Клавиша – RSL LoaderInfo. Значение – URL, с которого был загружен RSL.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:FlexGlobals"><apiName>FlexGlobals</apiName><shortdesc>
  Класс, содержащий переменные, которые являются глобальными для всех приложений в одном домене ApplicationDomain.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс, содержащий переменные, которые являются глобальными для всех приложений в одном домене ApplicationDomain.
 
  </apiDesc></apiClassifierDetail><apiValue id="mx.core:FlexGlobals:topLevelApplication"><apiName>topLevelApplication</apiName><shortdesc>
      Первое приложение, запущенное в домене ApplicationDomain, является приложением верхнего уровня.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiType value="Object"/></apiValueDef><apiDesc>
      Первое приложение, запущенное в домене ApplicationDomain, является приложением верхнего уровня. Это свойство приравнивается к ссылке на приложение верхнего уровня в конструкторе такого приложения. Каждый домен ApplicationDomain имеет собственное приложение <codeph>topLevelApplication</codeph>.
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.core:ComponentDescriptor"><apiName>ComponentDescriptor</apiName><shortdesc>
  ComponentDescriptor является базовым классом для класса UIComponentDescriptor, инкапсулирующим информацию, указанную в теге MXML для экземпляра визуального компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ComponentDescriptor является базовым классом для класса UIComponentDescriptor, инкапсулирующим информацию, указанную в теге MXML для экземпляра визуального компонента. Во Flex невизуальные компоненты рассматриваются по-другому и не имеют дескрипторов, но в будущей версии базовый класс ComponentDescriptor для них также может использоваться.
 
  <p>Большинство тегов в файле MXML описывает дерево объектов UIComponent. Например, тег <codeph>&lt;mx:Application></codeph> представляет объект UIComponent, а все нижестоящие контейнеры и элементы управления являются объектами UIComponent.</p>
 
  <p>Компилятор MXML компилирует все теги MXML в экземпляр UIComponentDescriptor. А именно, компилятор MXML автоматически создает структуру данных ActionScript, которая является деревом объектов UIComponentDescriptor.</p>
 
  <p>Во время выполнения метод <codeph>createComponentsFromDescriptors()</codeph> класса Container использует информацию в объектах UIComponentDescriptor в массиве контейнера <codeph>childDescriptors</codeph> для создания фактических объектов UIComponent, которые являются нижестоящими элементами контейнера, а также нижестоящих элементов более низкого уровня. В зависимости от значения свойства контейнера <codeph>creationPolicy</codeph>, нижестоящие элементы могут быть созданы во время запуска приложения, когда часть компонента становится видимой или когда разработчик приложений вручную вызывает метод <codeph>createComponentsFromDescriptors()</codeph>.</p>
 
  <p>Как правило, самостоятельное создание экземпляров ComponentDescriptor или UIComponentDescriptor не требуется; получение доступа к экземплярам, автоматически созданным компилятором MXML, осуществляется посредством массива класса Container <codeph>childDescriptors</codeph>.</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponentDescriptor"><linktext>mx.core.UIComponentDescriptor</linktext></link><link href="mx.core.xml#Container/childDescriptors"><linktext>mx.core.Container.childDescriptors</linktext></link><link href="mx.core.xml#Container/creationPolicy"><linktext>mx.core.Container.creationPolicy</linktext></link><link href="mx.core.xml#Container/createComponentsFromDescriptors()"><linktext>mx.core.Container.createComponentsFromDescriptors()</linktext></link></related-links><apiConstructor id="mx.core:ComponentDescriptor:ComponentDescriptor"><apiName>ComponentDescriptor</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>descriptorProperties</apiItemName><apiType value="Object"/><apiDesc>Объект, содержащий пары «имя – значение» для свойств объекта ComponentDescriptor, например, <codeph>type</codeph>, <codeph>id</codeph>, <codeph>propertiesFactory</codeph> и <codeph>events</codeph>.
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      Конструктор.
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ComponentDescriptor:invalidateProperties"><apiName>invalidateProperties</apiName><shortdesc>
      Признает недействительным кэшируемое свойство properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Признает недействительным кэшируемое свойство <codeph>properties</codeph>. В следующий раз при чтении свойства <codeph>properties</codeph> свойства повторно создаются из функции, определенной значением свойства <codeph>propertiesFactory</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ComponentDescriptor:toString"><apiName>toString</apiName><shortdesc>
      Возвращает строку «ComponentDescriptor_» и значение свойства id.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Возвращает строку «ComponentDescriptor_» и значение свойства <codeph>id</codeph>.
      
      </apiDesc><apiType value="String"/></apiReturn></apiOperationDef><apiDesc>
      Возвращает строку «ComponentDescriptor_» и значение свойства <codeph>id</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ComponentDescriptor:document"><apiName>document</apiName><shortdesc>
      Ссылка на объект документа, в котором требуется создать компонент.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Ссылка на объект документа, в котором требуется создать компонент.
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IUIComponent/document"><linktext>mx.core.IUIComponent.document</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:events"><apiName>events</apiName><shortdesc>
      Объект, содержащий пары «имя – значение» для обработчиков событий компонента, как указано в MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      Объект, содержащий пары «имя – значение» для обработчиков событий компонента, как указано в MXML.
     
      <p>Например, при вводе</p>
     
      <pre>
      &lt;mx:DataGrid id="dg" initialize="fetchData(); initDataGrid();"  change="changeHandler(event);"/>
      </pre>
     
      <p>свойством дескриптора <codeph>events</codeph> является объект</p>
     
      <pre>
      { initialize: "__dg_initialize", change: "__dg_change" }
      </pre>
     
      <p>Свойством <codeph>event</codeph>является <codeph>null</codeph>, если для компонента не указаны обработчики событий MXML.</p>
     
      <p>Строки <codeph>__dg_initialize</codeph> и <codeph>__dg_change</codeph> являются именами методов обработчика события, автоматически создаваемые компилятором MXML. Тело этих методов содержит операторы ActionScript, определенные как значения атрибутов события. Например, автоматически созданным обработчиком <codeph>initialize</codeph> является</p>
     
      <pre>
      public function __dg_initialize(event:mx.events.FlexEvent):void
      {
          fetchData();
          initDataGrid();
      }
      </pre>
     
      <p>Автоматически созданные обработчики события не всегда будут определяться по имени; в будущей версии Flex могут произойти изменения.</p>
      
      <p>Эти свойства используются методом контейнера <codeph>createComponentsFromDescriptors()</codeph> для регистрации автоматически создаваемых обработчиков события с помощью метода <codeph>addEventListener()</codeph>.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ComponentDescriptor:id"><apiName>id</apiName><shortdesc>
      Идентификатор для компонента, как определено в MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      Идентификатор для компонента, как определено в MXML. 
     
      <p>Например, при вводе</p>
     
      <pre>
      &lt;mx:TextInput id="firstName" text="Enter your first name here"/>
      </pre>
     
      <p>свойством дескриптора <codeph>id</codeph> является строка <codeph>firstName</codeph>.</p>
     
      <p>Свойство <codeph>id</codeph> имеет значение <codeph>null</codeph>, если идентификатор MXML указан для компонента.</p>
     
      <p>Значение свойства <codeph>id</codeph> становится именем общедоступной переменной в объекте документа MXML, автоматически созданной компилятором MXML. Значением этой переменной является ссылка на объект UIComponent, созданный из этого дескриптора. Это причина того, что можно, например, создать ссылку на элемент управления TextInput <codeph>text</codeph> как <codeph>firstName.text</codeph> из любого местоположения в документе, содержащем этот экземпляр TextInput.</p>
     
      <p>Если свойство <codeph>id</codeph> определено, и это не пустая строка, оно также становится свойством <codeph>name</codeph> объекта DisplayObject. Если свойство <codeph>id</codeph> не определено или является пустым, свойство объекта DisplayObject <codeph>name</codeph> остается автоматически созданной строкой, например, <codeph>Button3</codeph>, какой она возвращается методом <codeph>NameUtil.createUniqueName()</codeph>. Свойство <codeph>name</codeph> используется при создании строки, возвращенной методом <codeph>toString()</codeph>. Оно также может использоваться для нахождения компонента из его вышестоящего узла путем вызова <codeph>getChildByName()</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.display.xml#DisplayObject/name"><linktext>flash.display.DisplayObject.name</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:propertiesFactory"><apiName>propertiesFactory</apiName><shortdesc>
      Функция, возвращающая объект, который содержит пары «имя – значение» для свойств компонента, указанных в MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/></apiValueDef><apiDesc>
      Функция, возвращающая объект, который содержит пары «имя – значение» для свойств компонента, указанных в MXML.
     
      <p>Например, при вводе</p>
      
      <pre>
      &lt;mx:TextInput width="150" text="Hello">
      </pre>
     
      <p>свойством дескриптора <codeph>propertiesFactory</codeph> является функция:</p>
     
      <pre>
      function():Object { return { width: 150, text: "Hello" }; }
      </pre>
     
      <p>Свойство <codeph>propertiesFactory</codeph>имеет значение <codeph>null</codeph>, если свойства MXML не определены для компонента. В этом случае компонентом будут использоваться значения свойства по умолчанию.</p>
     
      <p>Причина, по которой <codeph>propertyFactory</codeph> является функцией, возвращающей объект, а не фактическим объектом состоит в том, чтобы позволить дереву объектов ComponentDescriptor выполнить поэтапное «раскрытие». Если бы все дескрипторы в дереве дескриптора для документа создавались при запуске, время запуска было бы больше.</p>
     
      <p>Свойство <codeph>properties</codeph> возвращает кэшируемый объект, который создан этой функцией фабрики.</p>
      
      <p>Примечание. Обработчики событий, например, <codeph>click="doSomething();"</codeph> отображаются в объекте <codeph>events</codeph>, а не в объекте <codeph>properties</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ComponentDescriptor/properties"><linktext>properties</linktext></link></related-links></apiValue><apiValue id="mx.core:ComponentDescriptor:type"><apiName>type</apiName><shortdesc>
      Класс компонента, как определено в MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
      Класс компонента, как определено в MXML.
     
      <p>Например, при вводе</p>
     
      <pre>
      &lt;mx:TextInput/>
      </pre>
     
      <p>свойством дескриптора <codeph>type</codeph> является классом mx.controls.TextInput.</p>
     
      <p>Свойство никогда не имеет значение <codeph>null</codeph> для объектов ComponentDescriptor, созданных компилятором MXML, потому что каждый тег MXML имеет имя тега, например, mx:TextInput.</p>
     
      <p>Сопоставление тега MXML и его соответствующим классом определено пространством имен XML и файлом «манифеста», если таковые имеются и связаны с этим пространством имен. Например, стандартное пространство имен Flex <codeph>http://www.adobe.com/2006/mxml</codeph> представляемое префиксом mx: связано (в файле flex-config.xml) с файлом манифеста mxml-manifest.xml, и этот файл содержит тег</p>
     
      <pre>
      &lt;component id="TextInput" class="mx.controls.TextInput"/>
      </pre>
     
      <p>, что соответствует имени тега mx:TextInput классу mx.controls.TextInput. Учтите, что использование файла манифеста способствует соотнесению компонентов в одном пространстве имен с классами в нескольких пакетах ActionScript.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ComponentDescriptor:properties:get"><apiName>properties</apiName><shortdesc>
      Объект, содержащий пары «имя – значение» для свойств компонента, как указано в MXML.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      Объект, содержащий пары «имя – значение» для свойств компонента, как указано в MXML.
     
      <p>Например, при вводе</p>
     
      <pre>
      &lt;mx:TextInput width="150" text="Hello"/>
      </pre>
     
      <p>свойством дескриптора <codeph>properties</codeph> является объект.</p>
     
      <pre>
      { width: 150, text: "Hello" }
      </pre>
     
      <p>Свойство <codeph>properties</codeph> имеет значение <codeph>null</codeph>, если свойства MXML не указаны для компонента. В этом случае компонентом будут использоваться значения свойства по умолчанию.</p>
     
      <p> Этот объект создается путем вызова функции, определенной свойством <codeph>propertiesFactory</codeph> и кэшированной для последующего доступа. Однако когда Repeater создает несколько экземпляров компонента из того же дескриптора, новая копия объекта <codeph>properties</codeph> должна создаваться для каждого экземпляра компонента; таким образом, они не используют совместно значения, которыми являются ссылки на массивы и объекты. Repeater выполняет это путем вызова на дескрипторе метода <codeph>invalidateProperties()</codeph>.</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#ComponentDescriptor/propertiesFactory"><linktext>propertiesFactory</linktext></link><link href="mx.core.xml#ComponentDescriptor/invalidateProperties()"><linktext>invalidateProperties()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.core:IToggleButton"><apiName>IToggleButton</apiName><shortdesc>
  Интерфейс IToggleButton является интерфейсом маркера, указывающим на функционирование компонента в качестве переключаемой кнопки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  Интерфейс IToggleButton является интерфейсом маркера, указывающим на функционирование компонента в качестве переключаемой кнопки. Он используется логикой кнопки инфраструктуры по умолчанию прежде всего в качестве фильтра. <b/>
  
  </apiDesc></apiClassifierDetail></apiClassifier><apiClassifier id="mx.core:ScrollControlBase"><apiName>ScrollControlBase</apiName><shortdesc>
  Класс ScrollControlBase является базовым классом для элементов управления с полосами прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="verticalScrollBarStyleName" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Имя стиля для вертикальной полосы прокрутки. Это расширяет возможности по управлению полосой прокрутки.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет любого символа компонента. Примером является флажок элемента управления CheckBox или стрелка на кнопке элемента управления ScrollBar.
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalScrollBarStyleName" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Имя стиля для горизонтальной полосы прокрутки. Это расширяет возможности по управлению полосой прокрутки.
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет кольца фокуса, если компонент в фокусе.
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Цвет области содержимого компонента.
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Альфа-канал фона содержимого для данного компонента.
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="baseColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  Основной цвет компонента.
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
     
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Смещение первой строки текста с левой стороны контейнера в пикселях.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="Class">
<description>
  Класс, реализующий IUITextField, который используется этим компонентом для визуализации текста.
 
  <p>Этот тип можно установить либо для класса mx.core.UITextField (для использования типичного класса TextField, встроенного в Flash Player), либо для класса mx.core.UIFTETextField (для использования Text Layout Framework для достижения оптимизированной визуализации текста, включая двусторонний макет).</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Определяет использование подчеркивания текста. Возможными значениями являются <codeph>none</codeph> и <codeph>underline</codeph>.
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Выравнивание текста внутри контейнера. Возможными значениями являются <codeph>left</codeph>, <codeph>right</codeph> или <codeph>center</codeph>.
 
  <p>Значением по умолчанию является <codeph>left</codeph>. Для компонента FormItem, значением по умолчанию является <codeph>right</codeph>. Для компонентов Button, LinkButton и AccordionHeader значением по умолчанию является <codeph>center</codeph> и это свойство является допустимым, только если свойство <codeph>labelPlacement</codeph> установлено на <codeph>left</codeph> или <codeph>right</codeph>. Если свойство <codeph>labelPlacement</codeph> установлено на <codeph>top</codeph> или <codeph>bottom</codeph>, текст и любой значок располагаются по центру.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="String">
<description>
  Языковой стандарт текста, отображаемый этим компонентом.
 
  <p>FTE и TLF используют этот языковой стандарт для сопоставления символов «Юникод» с глифами шрифтов и поиска резервных шрифтов.</p>
 
  <p>Примечание. Этот стиль применяется только в том случае, если компонент MX определяет UIFTETextField как <codeph>textFieldClass</codeph>.</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Число дополнительных пикселей, отображаемых между каждым символом. Положительное значение увеличивает интервал между символами вне стандартного интервала, в то время как отрицательное значение его уменьшает.
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Boolean">
<description>
  Логическое значение, указывающее использование кернинга (<codeph>true</codeph> – включено и <codeph>false</codeph> – отключено). Кернинг регулирует промежуток между определенными символьными парами для повышения удобочитаемости и должен использоваться, например, в заголовках при использовании крупных шрифтов. Кернинг поддерживается только для встроенных шрифтов. Определенные шрифты, например, Verdana, и моноширинные шрифты, например, Courier New, не поддерживают кернинг.
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Определяет использование жирного шрифта в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph> bold</codeph>. Значение по умолчанию для элемента управления Button <codeph>bold</codeph>. Значением по умолчанию для всех прочих элементов управления является<codeph>normal</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>thickness</codeph> внутреннего класса TextFields, представляющего текст в элементе управления Flex. Это свойство указывает толщину границ глифов. Возможные значения – числа от -200 до 200. 
  
  <p>Это свойство применяется только при использовании встроенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField; его можно применять только к определенным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Определяет использование курсива в тексте. Допустимыми значениями являются <codeph>normal</codeph> и <codeph>italic</codeph>.
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Высота текста в пикселях.    
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Устанавливает свойство <codeph>sharpness</codeph> для внутреннего класса TextFields, представляющего текст в элементах управления Flex. Это свойство указывает резкость краев глифа. Возможными значениями являются числа от -400 до 400. 
  
  <p>Это свойство применяется только при использовании встроенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField; его можно применять только к определенным символам.</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>gridFitType</codeph> внутреннего класса TextFields, представляющего текст в элементах управления Flex. Допустимыми значениями являются <codeph>none</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>), <codeph>pixel</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) и <codeph>subpixel</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>). 
  
  <p>Это свойство применяется только при использовании встроенного шрифта и при установке свойства <codeph>fontAntiAliasType</codeph> на <codeph>advanced</codeph>.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
 
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления TextField; его можно применять только к определенным символам.</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Имя используемого шрифта. В отличие от использования в реализации CSS, разделенные запятой списки не поддерживаются. Можно использовать любое имя гарнитуры шрифтов. При указании общего имени шрифта оно преобразовывается в соответствующий шрифт устройства. <codeph/> <codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Устанавливает свойство <codeph>antiAliasType</codeph> внутреннего класса TextFields. Возможными значениями являются <codeph>normal</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) и <codeph>advanced</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>). 
  
  <p>Значением по умолчанию является <codeph>advanced</codeph>, активирующее расширенные возможности сглаживания для шрифтов. Установлено на <codeph>normal</codeph> для деактивации расширенных возможностей сглаживания.</p>
  
  <p>Этот стиль не влияет на системные шрифты.</p>
  
  <p>Этот стиль применяется ко всему тексту в нижестоящем элементе управления класса TextField; его можно применять только к определенным символам.</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте при его деактивации.
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.core:ScrollControlBase" playerVersion="Flash10" type="String">
<description>
  Направленность текста, отображенная компонентом.
 
  <p>Допустимые значения – <codeph>ltr</codeph> для текста, записываемого слева направо, как в гарнитурах латинского стиля, и <codeph>rtl</codeph> для текста, записываемого справа налево, как в арабском и иврите.</p>
 
  <p>FTE и TLF используют это значение в алгоритме двухстороннего макета текста, который сопоставляет последовательность символов «Юникод» с последовательностью глифов.</p>
 
  <p>Примечание. Этот стиль применяется только в том случае, если компонент MX определяет UIFTETextField как <codeph>textFieldClass</codeph>.</p>
 
  <p>Параметр <codeph>direction</codeph> также влияет на выравнивание текста в рамках TLFTextField. Однако он не влияет на размещение TLFTextField внутри компонента.</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="uint">
<description>
  Цвет текста в компоненте, включая метку компонента. <codeph/> <codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Дополнительный вертикальный пробел между строками текста.
 
  <p>По умолчанию используется значение 2.</p>
  <p>Значением по умолчанию для элемента управления ComboBox является 0.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Указывает, какие углы прямоугольника требуется скруглить. Это значение представляет собой разделенную пробелами строку, которая может содержать любое сочетание значений <codeph>tl</codeph>, <codeph>tr</codeph>, <codeph>bl</codeph> и <codeph>br</codeph>. Например, для указания того, что требуется скруглить правые боковые углы, но оставить прямыми углы с левого края, используется значение <codeph>tr br</codeph>. Свойство стиля <codeph>cornerRadius</codeph> указывает радиус скругления углов. Значение по умолчанию зависит от класса компонента; если оно не отменено для класса, значением по умолчанию является <codeph>tl tr bl br</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Number">
<description>
  Указывает значение прозрачности альфа-канала для темы оформления фокусировки. <codeph/> <codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Расстояние для тени. Если для свойства установлено отрицательное значение, тень отображается над компонентом.
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  Направление тени. Допустимыми значениями являются <codeph>left</codeph>, <codeph>center</codeph> и <codeph>right</codeph>.
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Цвет тени.
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Логическое свойство, которое указывает на наличие у компонента видимой тени. Значение по умолчанию <codeph>false</codeph>.
 
  <p><b>Примечание.</b> Для отображения теней в контейнерах установите свойство <codeph>contentBackgroundColor</codeph>. В противном случае тень будет отображаться за контейнером, поскольку по умолчанию контейнер имеет прозрачный фон.</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  Логическое свойство, которое указывает на наличие у компонента видимой тени. Этот стиль используется при установке значения solid для свойства <codeph>borderStyle</codeph>. Значение по умолчанию <codeph>false</codeph>.
 
  <p><b>Примечание.</b> Для отображения теней в контейнерах выберите свойства <codeph>backgroundColor</codeph> или <codeph>backgroundImage</codeph>. В противном случае тень будет отображаться за контейнером, поскольку по умолчанию контейнер имеет прозрачный фон.</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  Радиус углов компонента.  Значением по умолчанию для ApplicationControlBar является 5.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  Видимость границы.
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Толщина ограничительной рамки. Используется только в случае, если для свойства <codeph>borderStyle</codeph> установлено значение <codeph>solid</codeph>.
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="String">
<description>
  Стиль ограничительной рамки. Возможными значениями являются <codeph>none</codeph>, <codeph>solid</codeph>, <codeph>inset</codeph> и <codeph>outset</codeph>. Значение по умолчанию зависит от класса компонента; если оно не переопределено для класса, значением по умолчанию является <codeph>inset</codeph>. Значением по умолчанию для большинства контейнеров является <codeph>none</codeph>. Значения <codeph>inset</codeph> и <codeph>outset</codeph> являются действительными только с темой Halo.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.core:ScrollControlBase" playerVersion="Flash9" type="Class">
<description>
  Класс темы оформления границы компонента. <codeph/><codeph/> <codeph/><codeph/> Для определения значения по умолчанию для компонента см. файл default.css.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  Стороны ограничительной рамки. Строка, разделенная пробелами, указывающая отображаемые стороны границы. Строка может содержать значения <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> и <codeph>bottom</codeph> в любом порядке. Значением по умолчанию является <codeph>left top right bottom</codeph>. При этом будут отображаться все четыре стороны. Этот стиль используется только в том случае, если для borderStyle установлено значение <codeph>solid</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  Цвет границы. <codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  Альфа-канал границы.
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="String">
<description>
  Масштабирует изображение, указанное свойством <codeph>backgroundImage</codeph>, в соответствии с различными указываемыми процентными значениями. При значении <codeph>100%</codeph> изображение растягивается по всей области компонента. Для указания процентного значения необходимо добавить символ процента (%). Значением по умолчанию для контейнера Application является <codeph>100%</codeph>. Значением по умолчанию для всех других контейнеров является <codeph>auto</codeph>, при котором сохраняется первоначальный размер изображения.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Object">
<description>
  Фоновое изображение компонента. Может являться классом, абсолютным или относительным URL-адресом. Можно установить <codeph>backgroundColor</codeph> или <codeph>backgroundImage</codeph>. Фоновое изображение отображается поверх цвета фона. Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что значение не установлено. Если этот стиль и стиль <codeph>backgroundColor</codeph> не определены, для компонента устанавливается прозрачный фон.
 
  <p>Темы оформления по умолчанию для большинства элементов управления Flex являются частично прозрачными. В результате фоновое изображение контейнера частично «растекается» на элементы управления, которые находятся в контейнере. Этого можно избежать путем установки 1 в качестве значений альфа-канала для свойства <codeph>fillAlphas</codeph> элемента управления, например:
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Цвет фона компонента при его деактивации. Глобальным значением по умолчанию является <codeph>undefined</codeph>. Значением по умолчанию для элементов управления List является <codeph>0xDDDDDD</codeph> (светло-серый). Если контейнер деактивирован, фон бледнеет в степени, заданной стилем <codeph>disabledOverlayAlpha</codeph>.
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="uint">
<description>
  Цвет фона компонента. Можно одновременно установить значения для свойств <codeph>backgroundColor</codeph> и <codeph>backgroundImage</codeph>. Некоторые компоненты не имеют фона. Элемент управления DataGrid игнорирует этот стиль. Значением по умолчанию является <codeph>undefined</codeph>. Это означает, что свойство не установлено. Если этот стиль и стиль <codeph>backgroundImage</codeph> имеют значения <codeph>undefined</codeph>, фон компонента будет прозрачным.
 
  <p>Для контейнера Application этот стиль указывает цвет фона во время загрузки приложения и градиент фона во время выполнения приложения. Flex вычисляет образец градиента между двумя цветами: немного более темным и немного более светлым, чем указанный цвет.</p>
 
  <p>Темы оформления по умолчанию для большинства элементов управления Flex являются частично прозрачными. В результате цвет фона контейнера частично «расплывается» на элементы управления, которые находятся в контейнере. Этого можно избежать путем установки 1 в качестве значений альфа-канала для свойства <codeph>fillAlphas</codeph> элемента управления, например:
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.core:ScrollControlBase" playerVersion="Flash9" theme="halo" type="Number">
<description>
  Альфа-уровень цвета, определяемый свойством <codeph>backgroundColor</codeph> для изображения или файла SWF, заданного стилем <codeph>backgroundImage</codeph>. Допустимыми являются значения от 0,0 до 1,0. Для большинства элементов управления значением по умолчанию является 1,0, но для элементов управления ToolTip значением по умолчанию является 0,95, а для элементов управления Alert – 0,9.
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;ScrollControlBase&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
  <b>Properties</b>
  border="<i>object of border skin style</i>"
  horizontalScrollPolicy="off|on|auto"
  horizontalScrollPosition="0"
  liveScrolling="true|false"
  maxHorizontalScrollPosition="NaN"
  maxVerticalScrollPosition="NaN"
  scrollTipFunction="undefined"
  showScrollTips="false|true"
  verticalScrollPolicy="auto|off|on"
  verticalScrollPosition="0" 
  <b>Styles</b>
  backgroundAlpha="1.0"
  backgroundColor="undefined"
  backgroundImage="undefined"
  backgroundSize="auto"
  borderColor="0xAAB3B3"
  borderSides="left top right bottom"
  borderSkin="ClassReference('mx.skins.halo.HaloBorder')"
  borderStyle="inset"
  borderThickness="1"
  color="0x0B333C"
  cornerRadius="0"
  disabledColor="0xAAB3B3"
  dropShadowColor="0x000000"
  dropShadowEnabled="false"
  fontFamily="Verdana"
  fontSize="10"
  fontStyle="normal|italic"
  fontWeight="normal|bold"
  horizontalScrollBarStyleName=""
  leading="2"
  shadowDirection="center"
  shadowDistance="2"
  textAlign="<i>value; see detail.</i>"
  textDecoration="none|underline"
  textIndent="0"
  verticalScrollBarStyleName=""
 
  <b>Events</b>
  scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>базовый класс для представлений или контейнеров, поддерживающих прокрутку
  
  </apiTipText></apiTipTexts><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Класс ScrollControlBase является базовым классом для элементов управления с полосами прокрутки. Пользователь взаимодействует с полосой прокрутки или разработчик обращается к методам и свойствам, которые изменяют видимую область. ScrollControlBase принимает одиночный нижестоящий объект, а затем размещает и маскирует этот объект или изменяет его размер для отображения видимого содержимого. Все прокручиваемые элементы должны быть нижестоящими элементами этого объекта содержимого
 
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.core:ScrollControlBase_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  Отправляется во время прокрутки содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3269
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  Отправляется во время прокрутки содержимого.
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.core:ScrollControlBase:ScrollControlBase"><apiName>ScrollControlBase</apiName><shortdesc>
      Конструктор.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      Конструктор.
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.core:ScrollControlBase:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      Создает границу для этого компонента.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Создает границу для этого компонента. Как правило, граница определяется стилями <codeph>borderStyle</codeph> и <codeph>borderSkin</codeph>. Должен устанавливать свойство border для экземпляра границы.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      Создает объекты, которые являются подчиненными для элемента ScrollControlBase – в этом случае границу и маску.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Создает объекты, которые являются подчиненными для элемента ScrollControlBase – в этом случае границу и маску. Flex вызывает этот метод при первом создании ScrollControlBase. Если подкласс переопределяет этот метод, то он должен вызвать метод <codeph>super.createChildren()</codeph>, чтобы выполнить логику метода <codeph>ScrollControlBase.createChildren()</codeph>.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      Реагирует на изменения размеров, устанавливая позиции и размеры границ элемента управления</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Указывает ширину компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleX</codeph> компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Указывает высоту компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleY</codeph> компонента.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Реагирует на изменения размеров, устанавливая позиции и размеры границ элемента управления
     
      <p>Метод <codeph>ScrollControlBase.layoutChrome()</codeph> устанавливает положение и размер границы ScrollControlBase. В каждом подклассе ScrollControlBase метод<codeph>layoutChrome()</codeph> подкласса должен выполнить вызов метода <codeph>super.layoutChrome()</codeph> для правильного установления границы.</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc>
      Обработчик событий для события прокрутки колеса мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>Объект события.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обработчик событий для события прокрутки колеса мыши.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:roomForScrollBar"><apiName>roomForScrollBar</apiName><shortdesc>
      Определяет наличие достаточного пространства в этом компоненте для отображения указанной полосы прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>Возвращает true, если пространства достаточно для полосы прокрутки.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>bar</apiItemName><apiOperationClassifier>mx.controls.scrollClasses:ScrollBar</apiOperationClassifier><apiDesc>Полоса прокрутки
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>Указывает ширину компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleX</codeph> компонента.
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>Указывает высоту компонента в пикселях в координатах компонента вне зависимости от значения свойства <codeph>scaleY</codeph> компонента.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Определяет наличие достаточного пространства в этом компоненте для отображения указанной полосы прокрутки.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:scrollHandler"><apiName>scrollHandler</apiName><shortdesc>
      Обработчик события scroll по умолчанию.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>Объект события.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Обработчик события <codeph>scroll</codeph> по умолчанию.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.core:ScrollControlBase:protected:setScrollBarProperties"><apiName>setScrollBarProperties</apiName><shortdesc>
      Вызывает отображение или скрытие полос прокрутки в ScrollControlBase в зависимости от переданных параметров.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>totalColumns</apiItemName><apiType value="int"/><apiDesc>Число отображаемых горизонтальных элементов.
     
      </apiDesc></apiParam><apiParam><apiItemName>visibleColumns</apiItemName><apiType value="int"/><apiDesc>Число одновременно отображаемых горизонтальных элементов.
     
      </apiDesc></apiParam><apiParam><apiItemName>totalRows</apiItemName><apiType value="int"/><apiDesc>Число отображаемых вертикальных элементов.
     
      </apiDesc></apiParam><apiParam><apiItemName>visibleRows</apiItemName><apiType value="int"/><apiDesc>Число одновременно отображаемых вертикальных элементов.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Вызывает отображение или скрытие полос прокрутки в ScrollControlBase в зависимости от переданных параметров. Если область TextArea может отобразить только 100 пикселей по горизонтали и 5 строк текста, но отображаемый текст имеет ширину в 200 пикселей и высоту в 30 строк, то метод <codeph>setScrollBarProperties()</codeph> вызывается в виде <codeph>setScrollBarProperties(200, 100, 30, 5)</codeph>.
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.core:ScrollControlBase:protected:border"><apiName>border</apiName><shortdesc>
      Объект границы.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc>
      Объект границы.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:horizontalScrollBar"><apiName>horizontalScrollBar</apiName><shortdesc>
      Горизонтальная полоса прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Горизонтальная полоса прокрутки. Это свойство имеет значение null, если в настоящий момент не отображается горизонтальная полоса прокрутки. Доступ к этому свойству напрямую обычно не осуществляется. Изменение свойств <codeph>horizontalScrollPolicy</codeph> и <codeph>horizontalScrollPosition</codeph> позволяет полностью управлять полосой прокрутки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:liveScrolling"><apiName>liveScrolling</apiName><shortdesc>
      Флаг, указывающий на то, что прокрутка выполняется одновременно с перемещением ползунка или не обновляется до отпускания клавиши мыши.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, указывающий на то, что прокрутка выполняется одновременно с перемещением ползунка или не обновляется до отпускания клавиши мыши. Значение по умолчанию – <codeph>true</codeph>.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:maskShape"><apiName>maskShape</apiName><shortdesc>
      Маска.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Shape"/></apiValueDef><apiDesc>
      Маска. Это свойство может быть не определено, если не отображается ни одной полосы прокрутки, а также в некоторых подклассах, которые имеют другой механизм маскирования. Маска определяла видимую область отображаемого объекта. Таким образом, эта маска используется для скрытия частей содержимого, которые не видимы в настоящее время. Доступ к этому свойству напрямую обычно не осуществляется. Изменение свойств <codeph>horizontalScrollPolicy</codeph>, <codeph>verticalScrollPolicy</codeph>, <codeph>horizontalScrollPosition</codeph>, и <codeph>verticalScrollPosition</codeph> обеспечивает достаточный контроль над маской.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:scrollAreaChanged"><apiName>scrollAreaChanged</apiName><shortdesc>
      Флаг, свидетельствующий об изменении области прокрутки из-за появления или исчезновения полос прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, свидетельствующий об изменении области прокрутки из-за появления или исчезновения полос прокрутки. Используется большинством методов макета для повторной настройки свойств прокрутки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:showScrollTips"><apiName>showScrollTips</apiName><shortdesc>
      Флаг, определяющий необходимость отображения всплывающей подсказки рядом с ползунком полосы прокрутки при его перетаскивании.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      Флаг, определяющий необходимость отображения всплывающей подсказки рядом с ползунком полосы прокрутки при его перетаскивании. Значение по умолчанию <codeph>false</codeph> отключает всплывающую подсказку.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:protected:verticalScrollBar"><apiName>verticalScrollBar</apiName><shortdesc>
      Вертикальная полоса прокрутки.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.scrollClasses:ScrollBar</apiValueClassifier></apiValueDef><apiDesc>
      Вертикальная полоса прокрутки. Это свойство имеет значение null, если в настоящий момент вертикальная полоса прокрутки не отображается. Доступ к этому свойству напрямую обычно не осуществляется. Изменение свойств <codeph>verticalScrollPolicy</codeph> и <codeph>verticalScrollPosition</codeph> обеспечивает достаточный контроль над полосой прокрутки.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      Возвращает объект EdgeMetrics, имеющий четыре свойства: left, top, right и bottom.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Возвращает объект EdgeMetrics, имеющий четыре свойства: <codeph>left</codeph>, <codeph>top</codeph>, <codeph>right</codeph> и <codeph>bottom</codeph>. Значение каждого свойства равно толщине одной из сторон границы в пикселях.
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      Свойство, указывающее на то, что горизонтальная полоса прокрутки всегда включена, всегда отключена или изменяется автоматически в зависимости от параметров, переданных методу setScrollBarProperties().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.OFF
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство, указывающее на то, что горизонтальная полоса прокрутки всегда включена, всегда отключена или изменяется автоматически в зависимости от параметров, переданных методу <codeph>setScrollBarProperties()</codeph>. Возможны следующие значения: <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> и <codeph>ScrollPolicy.AUTO</codeph>. Значения MXML могут равняться <codeph>on</codeph>, <codeph>off</codeph> и <codeph>auto</codeph>.
     
      <p>Установка этого свойства в значение <codeph>ScrollPolicy.OFF</codeph> для подклассов ListBase не повлияет на свойство <codeph>horizontalScrollPosition</codeph>. Возможность прокрутки содержимого программным образом сохраняется.</p>
     
      <p>Обратите внимание на то, что такая политика может повлиять на измеренный размер компонента. Если политика равна <codeph>ScrollPolicy.AUTO</codeph>, то полоса прокрутки не масштабируется в измеренном размере. Это позволяет предотвратить перерасчет макета при появлении полосы прокрутки. При предполагаемом наличии достаточного количества данных для полос прокрутки следует установить политику в значение <codeph>ScrollPolicy.ON</codeph>. Если количество данных неизвестно, следует установить явное значение для ширины или высоты компонента, чтобы отобразить полосы прокрутки позже.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      Смещение от левой границы внутрь содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Смещение от левой границы внутрь содержимого. Смещение измеряется в пикселях для некоторых подклассов, или в других единицах (например, числом столбцов в элементе управления DataGrid или числом элементов в элементах управления HorizontalList или TileList).
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      Максимальное значение для свойства horizontalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Максимальное значение для свойства <codeph>horizontalScrollPosition</codeph>. Обратите внимание на то, что это не ширина содержимого, так как свойство <codeph>maxHorizontalScrollPosition</codeph> равно ширине содержимого за вычетом ширины отображаемой области.
     
      <p>В большинстве компонентов значение свойства <codeph>maxHorizontalScrollPosition</codeph> вычисляется на основе данных и размера компонента и не требует установки в коде приложения.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:maxVerticalScrollPosition:get"><apiName>maxVerticalScrollPosition</apiName><shortdesc>
      Максимальное значение для свойства verticalScrollPosition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      Максимальное значение для свойства <codeph>verticalScrollPosition</codeph>. Обратите внимание на то, что это не высота содержимого, так как свойство <codeph>maxVerticalScrollPosition</codeph> равно высоте содержимого за вычетом высоты отображаемой области.
     
      <p>Значение свойства <codeph>maxVerticalScrollPosition</codeph> вычисляется на основе данных и размера компонента и не требует установки в коде приложения.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:scrollTipFunction:get"><apiName>scrollTipFunction</apiName><shortdesc>
      Функция, вычисляющая строку, которая отображается в качестве элемента ScrollTip.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      Функция, вычисляющая строку, которая отображается в качестве элемента ScrollTip. Вызов этой функции осуществляется, если свойство <codeph>showScrollTips</codeph> имеет значение <codeph>true</codeph> при перетаскивании ползунка полосы прокрутки. Функция должна возвращать строку, использованную в качестве ScrollTip. Функции передается два параметра. Первым параметром является направление полосы прокрутки <codeph>direction</codeph>. Вторым параметром является позиция прокрутки <codeph>scrollPosition</codeph>, как показано в следующем примере:
      
      <pre>
      function scrollTipFunction(direction:String, position:Number):String 
      {
        if (direction == "vertical") return myToolTips[position];
        else return "";
      }</pre>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      Свойство, указывающее на то, что вертикальная полоса прокрутки всегда включена, всегда отключена или меняется автоматически в зависимости от параметров, переданных методу setScrollBarProperties().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Свойство, указывающее на то, что вертикальная полоса прокрутки всегда включена, всегда отключена или меняется автоматически в зависимости от параметров, переданных методу <codeph>setScrollBarProperties()</codeph>. Возможны следующие значения: <codeph>ScrollPolicy.ON</codeph>, <codeph>ScrollPolicy.OFF</codeph> и <codeph>ScrollPolicy.AUTO</codeph>. Значения MXML могут равняться <codeph>on</codeph>, <codeph>off</codeph> и <codeph>auto</codeph>.
     
      <p>Установка этого свойства в значение <codeph>ScrollPolicy.OFF</codeph> для подклассов ListBase не влияет на свойство <codeph>verticalScrollPosition</codeph>. Возможность прокрутки содержимого программным образом сохраняется.</p>
     
      <p>Обратите внимание на то, что такая политика может повлиять на измеренный размер компонента. Если политика равна <codeph>ScrollPolicy.AUTO</codeph>, то полоса прокрутки не масштабируется в измеренном размере. Это позволяет предотвратить перерасчет макета при появлении полосы прокрутки. При предполагаемом наличии достаточного количества данных для полос прокрутки следует установить политику в значение <codeph>ScrollPolicy.ON</codeph>. Если количество данных неизвестно, следует установить явное значение для ширины или высоты компонента, чтобы отобразить полосы прокрутки позже.</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:verticalScrollPosition:get"><apiName>verticalScrollPosition</apiName><shortdesc>
      Смещение от верхней границы внутрь содержимого.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Смещение от верхней границы внутрь содержимого. Смещение измеряется в пикселях для некоторых подклассов, или в других единицах (например, число строк в элементе управления List или число фрагментов в элементе управления TileList).
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.core:ScrollControlBase:viewMetrics:get"><apiName>viewMetrics</apiName><shortdesc>
      Объект EdgeMetrics, учитывающий линейки прокрутки (если они отображаются).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      Объект EdgeMetrics, учитывающий линейки прокрутки (если они отображаются).
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>