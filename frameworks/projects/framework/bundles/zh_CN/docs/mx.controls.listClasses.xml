<?xml version="1.0"?>
<apiPackage id="mx.controls.listClasses"><apiName>mx.controls.listClasses</apiName><apiDetail/><apiClassifier id="mx.controls.listClasses:IDropInListItemRenderer"><apiName>IDropInListItemRenderer</apiName><shortdesc>
  “嵌入式”项呈示器的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  “嵌入式”项呈示器的接口。多数 IListItemRenderers 都不是“嵌入式”项呈示器。它们将使用数据提供程序项目的特定字段。例如，它们可能会将项目的“lastName”属性分配给标签的 <codeph>text</codeph> 属性。使用数据绑定，可以很容易地进行写入操作，但是这会产生负面效果，即无法再在 DataGrid 的另一列或带有不同字段的另一个 List 中使用该渲染器。IDropInListItemRenderer 允许重复使用渲染器。列表类将向渲染器传递更多的信息，以便它能够确定在运行时使用哪一字段。
 
  <p>希望用作嵌入式项呈示器或嵌入式项目编辑器的组件必须实现 IDropInListItemRenderer 接口。许多 Flex 组件可实现此接口，因此可在任一列或列表中将其用作嵌入式项呈示器和嵌入式项目编辑器。</p>
 
  <p>嵌入式项呈示器或嵌入式项目编辑器也必须实现 IDataRenderer 接口以定义 <codeph>data</codeph> 属性。</p> 
 
  <p>使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 list 控件中的相应数据初始化该组件的 <codeph>listData</codeph> 属性。然后，组件可使用 <codeph>listData</codeph> 属性初始化嵌入式项呈示器或嵌入式项目编辑器的 <codeph>data</codeph> 属性。</p>
 
  <p><codeph>listData</codeph> 属性的类型为 BaseListData，其中 BaseListData 类包含四个子类：DataGridListData、ListData、TreeListData 和 MenuListData。<codeph>listData</codeph> 属性值的实际数据类型取决于使用嵌入式项呈示器或嵌入式项目编辑器的控件。对于 DataGrid 控件，值的类型为 DataGridListData；对于 List 控件，值的类型为 ListData；对于 Tree 控件，值的类型为 TreeListData；对于 Menu 控件，值的类型为 MenuListData。</p>
 
  <p>下例显示了 setter 方法，该方法适用于 NumericStepper 控件（可根据 <codeph>listData</codeph> 属性的值初始化 NumericStepper 的 <codeph>value</codeph> 属性）的 <codeph>data</codeph> 属性：</p>
 
  <pre>
    public function set data(value:Object):void
    {
      _data = value;
    
      this.value = _listData ? parseFloat(_listData.label) : Number(_data);
    
      dispatchEvent(new FlexEvent(FlexEvent.DATA_CHANGE));
    }
  </pre>
 
  <p>在上例中，NumericStepper 控件在设置 NumericStepper 的 <codeph>value</codeph> 属性时将忽略 <codeph>data</codeph> 属性，并改为使用 <codeph>listData</codeph> 属性。</p>
 
  <p>若要实现 IDropInListItemRenderer 接口，需定义 setter 和 getter 方法来实现 <codeph>listData</codeph> 属性。通常，setter 方法为内部变量写入 <codeph>listData</codeph> 属性的值。列表类始终分配此属性，然后设置 <codeph>data</codeph> 属性中的数据提供程序项目。</p>
 
  <p>请注意，<codeph>listData</codeph> 属性的 setter 方法不会分派事件。这是因为列表类始终先设置 <codeph>listData</codeph>，然后设置 <codeph>data</codeph> 属性。设置 <codeph>data</codeph> 属性也会分派 <codeph>dataChange</codeph> 事件。您从不需要对 <codeph>listData</codeph> 进行单独设置，因此它不需要分派自己的事件。 </p>
 
  <p>如果 <codeph>data</codeph> setter 方法执行了一些需要控件进行自行更新的操作，则它可能会调用 <codeph>invalidateProperties()</codeph> 方法。然后，组件开发人员应写入 <codeph>commitProperties()</codeph> 方法以确定 <codeph>listData</codeph> 已修改并采取相应措施。 </p>
 
  <p>getter 方法返回内部变量的当前值，如下例所示：</p>
  
  <pre>
    // Internal variable for the property value.
    private var _listData:BaseListData;
    
    // Make the listData property bindable.
    [Bindable("dataChange")]
    
    // Define the getter method.
    public function get listData():BaseListData
    {
      return _listData;
    }
    
    // Define the setter method,
    public function set listData(value:BaseListData):void
    {
      _listData = value;
    }
  </pre>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.listClasses.xml#BaseListData"><linktext>mx.controls.listClasses.BaseListData</linktext></link><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links><apiValue id="mx.controls.listClasses:IDropInListItemRenderer:mx.controls.listClasses:IDropInListItemRenderer:listData:get"><apiName>listData</apiName><shortdesc>
      使用 setter 和 getter 方法实现 listData 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier></apiValueDef><apiDesc>
      使用 setter 和 getter 方法实现 <codeph>listData</codeph> 属性。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:BaseListData"><apiName>BaseListData</apiName><shortdesc>
  BaseListData 类定义 listData 属性的数据类型，此属性由嵌入式项呈示器或嵌入式项目编辑器实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  BaseListData 类定义 <codeph>listData</codeph> 属性的数据类型，此属性由嵌入式项呈示器或嵌入式项目编辑器实现。所有嵌入式项呈示器和嵌入式项目编辑器必须实现 IDropInListItemRenderer 接口，此接口定义了 <codeph>listData</codeph> 属性。
 
  <p><codeph>listData</codeph> 属性为 BaseListData 类型，其中 BaseListData 类包含三个子类：DataGridListData、ListData 和 TreeListData。<codeph>listData</codeph> 属性值的实际数据类型取决于使用嵌入式项呈示器或嵌入式项目编辑器的控件。对于 DataGrid 控件，此值为 DataGridListData 类型；对于 List 控件，此值为 ListData 类型；对于 Tree 控件，此值为 TreeListData 类型。</p>
 
  <p>用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 会将 <codeph>listData</codeph> 属性设置为 BaseListData-derived 类，其中包含与数据提供程序（包含项目数据）中的项目相关的计算信息。</p>
 
  <p>尽管此类的属性是可写的，但应将其视为只读。这些属性由 List 类进行初始化，并由项呈示器或项目编辑器读取。更改这些值可能导致意外结果。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links><apiConstructor id="mx.controls.listClasses:BaseListData:BaseListData"><apiName>BaseListData</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>label</apiItemName><apiType value="String"/><apiDesc>项目数据的文本表示形式。
     
      </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>唯一标识符。
     
      </apiDesc></apiParam><apiParam><apiItemName>owner</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>对 List 控件的引用。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>行在控件中当前可见行中的索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>该列在控件当前可见列中的索引。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls.listClasses:BaseListData:columnIndex"><apiName>columnIndex</apiName><shortdesc>
      基于 List 控件的列的索引与该控件的当前可见列相关，其中第一列的索引为 1。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      基于 List 控件的列的索引与该控件的当前可见列相关，其中第一列的索引为 1。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:BaseListData:label"><apiName>label</apiName><shortdesc>
      项目数据的文本表示形式，基于 List 类的 itemToLabel() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      项目数据的文本表示形式，基于 List 类的 <codeph>itemToLabel()</codeph> 方法。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:BaseListData:owner"><apiName>owner</apiName><shortdesc>
      对拥有此项目的列表对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
      对拥有此项目的列表对象的引用。这应该是 ListBase-derived 类。此属性为 IUIComponent 类型。因此，嵌入式组件（如标签和 TextInput）就无需依赖 List 及其所有依赖项。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:BaseListData:rowIndex"><apiName>rowIndex</apiName><shortdesc>
      DataGrid、List 或 Tree 控件的行的索引与该控件的当前可见行相关，其中第一行的索引为 1。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      DataGrid、List 或 Tree 控件的行的索引与该控件的当前可见行相关，其中第一行的索引为 1。例如，单击控件中的某个项目并将 <codeph>rowIndex</codeph> 设置为 3。接着，在控件中滚动以更改此行在控件可见行中的位置，然后像之前一样单击同一行。现在，<codeph>rowIndex</codeph> 中包含一个不同的值，与当前可见行中的新索引对应。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:BaseListData:uid:get"><apiName>uid</apiName><shortdesc>
      此项目的唯一标识符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      此项目的唯一标识符。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:TileBase"><apiName>TileBase</apiName><shortdesc>
  TileBase 类是在一系列行和列中显示数据项目的控件的基类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.listClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TileBase 类是在一系列行和列中显示数据项目的控件的基类。TileBase 派生的类将忽略从它们的父类继承的 <codeph>variableRowHeight</codeph> 和 <codeph>wordWrap</codeph> 属性。TileList 中所有项目的宽度和高度均相同。
 
  <p>此类不直接应用于应用程序。</p>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.controls.listClasses:TileBase:TileBase"><apiName>TileBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls.listClasses:TileBase:protected:adjustListContent"><apiName>adjustListContent</apiName><shortdesc>
      从 updateDisplayList() 方法中调用，用以调整 listContent 的大小和位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>应用任何外部缩放之前 listContent 的宽度。
      
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>应用任何外部缩放之前 listContent 的高度。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从 <codeph>updateDisplayList()</codeph> 方法中调用，用以调整 listContent 的大小和位置。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:TileBase:createItemRenderer"><apiName>createItemRenderer</apiName><shortdesc>
      获取适当的渲染器，如果未指定渲染器，则使用默认渲染器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>项呈示器。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>渲染器的数据结构。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取适当的渲染器，如果未指定渲染器，则使用默认渲染器。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:TileBase:protected:drawTileBackground"><apiName>drawTileBackground</apiName><shortdesc>
      绘制单个拼贴的背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>背景 Sprite。
     
      
      </apiDesc><apiType value="flash.display:DisplayObject"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>包含单个拼贴背景的 Sprite。
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>包含拼贴的行索引。
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>包含拼贴的列索引。
      </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>背景的宽度。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>背景的高度。
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>背景的填充颜色。
      </apiDesc></apiParam><apiParam><apiItemName>item</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>拼贴的项呈示器。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      绘制单个拼贴的背景。获取 Sprite 对象，应用背景尺寸和颜色，并返回已应用值的 Sprite。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:TileBase:protected:drawTileBackgrounds"><apiName>drawTileBackgrounds</apiName><shortdesc>
      在所有拼贴的后面绘制背景（如果有）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在所有拼贴的后面绘制背景（如果有）。此实现将生成名为“tileBGs”的 Sprite（如果它事先不存在），在 <codeph>listContent</codeph> 中将它添加到 z 顺序的末尾，然后针对每一可见拼贴调用 <codeph>drawTileBackground()</codeph>。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:TileBase:protected:makeListData"><apiName>makeListData</apiName><shortdesc>
      创建新的 ListData 实例并根据输入数据提供程序项目填充字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>新构建的 ListData 对象。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:BaseListData</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>用于填充 ListData 的数据提供程序项目。
      </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>该项目的 UID。
      </apiDesc></apiParam><apiParam><apiItemName>rowNum</apiItemName><apiType value="int"/><apiDesc>数据提供程序中项目的索引。
      </apiDesc></apiParam><apiParam><apiItemName>columnNum</apiItemName><apiType value="int"/><apiDesc>与此项目相关的 columnIndex。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建新的 ListData 实例并根据输入数据提供程序项目填充字段。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:TileBase:protected:scrollHorizontally"><apiName>scrollHorizontally</apiName><shortdesc>
      
      调整渲染器以响应滚动位置的更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pos</apiItemName><apiType value="int"/><apiDesc>新的滚动位置。
      </apiDesc></apiParam><apiParam><apiItemName>deltaPos</apiItemName><apiType value="int"/><apiDesc>位置的变化。此值始终为正数。
      </apiDesc></apiParam><apiParam><apiItemName>scrollUp</apiItemName><apiType value="Boolean"/><apiDesc>如果滚动位置正在逐渐缩小，则为 <codeph>true</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      调整渲染器以响应滚动位置的更改。
     
      <p>当滚动位置的更改量低于可见行数时，列表类将尝试优化滚动。此时，一些行只需进行移动即可而无需进行其它更改，另一些行则需要删除，然后添加新行。如果滚动位置更改量过大，将删除所有旧行，并调用 <codeph>makeRowsAndColumns()</codeph> 方法在整个可查看区域添加新行。</p>
     
      <p>此操作无法在 ListBase 中实现，因为默认列表只有一列，无法水平滚动。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls.listClasses:TileBase:protected:measuringObjects"><apiName>measuringObjects</apiName><shortdesc>
      工厂设置的度量对象的缓存。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      工厂设置的度量对象的缓存。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:TileBase:direction:get"><apiName>direction</apiName><shortdesc>
      此控件布置其子控件的方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      此控件布置其子控件的方向。可能的值为 <codeph>TileBaseDirection.HORIZONTAL</codeph> 和 <codeph>TileBaseDirection.VERTICAL</codeph>。默认值为 <codeph>TileBaseDirection.HORIZONTAL</codeph>。
     
      <p>如果值为 <codeph>TileBaseDirection.HORIZONTAL</codeph>，则将沿第一行布置拼贴直至达到可见的列数或 maxColumns，然后再填充新行。如果创建的行数多于一次能够显示的行数，控件将显示垂直 scrollbar。如果值为 <codeph>TileBaseDirection.VERTICAL</codeph>，情况相反。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:TileBase:maxColumns:get"><apiName>maxColumns</apiName><shortdesc>
      控件最多可包含的列数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      控件最多可包含的列数。如果值为 0，则对列数没有任何限制。如果方向为 <codeph>TileBaseDirection.VERTICAL</codeph>，则将忽略此值，因为控件具有的列数将根据显示所有数据的需要而定。
     
      <p>默认值为 0（无限制）。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:TileBase:maxRows:get"><apiName>maxRows</apiName><shortdesc>
      控件最多可包含的行数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      控件最多可包含的行数。如果值为 0，则对行数没有任何限制。如果方向为 <codeph>TileBaseDirection.HORIZONTAL</codeph>，则将忽略此值，因为控件具有的行数将根据显示所有数据的需要而定。
     
      <p>默认值为 0（无限制）。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:ListRowInfo"><apiName>ListRowInfo</apiName><shortdesc>
  供基于列表的类用于存储其 IListItemRenderer 的相关信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  供基于列表的类用于存储其 IListItemRenderer 的相关信息。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.listClasses.xml#ListBase/rowInfo"><linktext>mx.controls.listClasses.ListBase.rowInfo</linktext></link></related-links><apiConstructor id="mx.controls.listClasses:ListRowInfo:ListRowInfo"><apiName>ListRowInfo</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>行的 y 位置值。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>行高（包含边距）。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>dataProvider 中项目的唯一标识符
	 
	  </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>dataprovider 中的项目。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls.listClasses:ListRowInfo:data"><apiName>data</apiName><shortdesc>
	  dataprovider 中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  dataprovider 中的项目。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListRowInfo:height"><apiName>height</apiName><shortdesc>
	  行高（包含边距）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  行高（包含边距）。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListRowInfo:itemOldY"><apiName>itemOldY</apiName><shortdesc>
	  渲染器的最后一个 Y 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  渲染器的最后一个 Y 值。用于树的打开/关闭效果。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListRowInfo:oldY"><apiName>oldY</apiName><shortdesc>
	  行的最后一个 Y 值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  行的最后一个 Y 值。用于树的打开/关闭效果。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListRowInfo:uid"><apiName>uid</apiName><shortdesc>
	  dataProvider 中项目的唯一标识符
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  dataProvider 中项目的唯一标识符
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListRowInfo:y"><apiName>y</apiName><shortdesc>
	  行的 y 位置值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  行的 y 位置值。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:ListData"><apiName>ListData</apiName><shortdesc>
  ListData 类可定义 listData 属性的数据类型，该属性是通过 List 控件的插入项呈示器或插入项目编辑器而实现的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.listClasses:BaseListData</apiBaseClassifier></apiClassifierDef><apiDesc>
  ListData 类定义 <codeph>listData</codeph> 属性的数据类型，此属性由 List 控件的嵌入式项呈示器或嵌入式项目编辑器实现。所有嵌入式项呈示器和嵌入式项目编辑器必须实现 IDropInListItemRenderer 接口，此接口定义了 <codeph>listData</codeph> 属性。
 
  <p>尽管此类的属性是可写的，但应将其视为只读。这些属性由 List 类进行初始化，并由项呈示器或项目编辑器读取。更改这些值可能导致意外结果。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links><apiConstructor id="mx.controls.listClasses:ListData:ListData"><apiName>ListData</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiDesc>项目数据的文本表示。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>icon</apiItemName><apiType value="Class"/><apiDesc>Class 或 String 对象，给出 List 控件中项目的图标。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>labelField</apiItemName><apiType value="String"/><apiDesc>包含 List 组件标签数据的数据提供程序的字段名称。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>项目的唯一标识符。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>owner</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiDesc>对 List 控件的引用。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>List 控件的数据提供程序中的项目索引。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>该列在控件当前可见列中的索引。
	 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls.listClasses:ListData:icon"><apiName>icon</apiName><shortdesc>
	  给出 List 控件中项目图标的 Class，根据 List 类的 itemToIcon() 方法计算
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/></apiValueDef><apiDesc>
	  给出 List 控件中项目图标的 Class，根据 List 类的 <codeph>itemToIcon()</codeph> 方法计算
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListData:labelField"><apiName>labelField</apiName><shortdesc>
	  List 类中 labelField 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  List 类中 <codeph>labelField</codeph> 属性的值。此值通常用于设置要在项呈示器中显示文本应使用数据提供程序中项目的哪些属性；也可用于 DateField 和其它组件，指示应使用包含 Date 或其它非文本属性的数据提供程序项目中的哪个字段。
	 
	  <p>例如，如果数据提供程序项目包含“hiredDate”属性，则可将 <codeph>labelField</codeph> 属性设置为“hiredDate”，将 <codeph>itemRenderer</codeph> 属性设置为 DateField。然后，DateField 控件则使用 hiredDate 属性。</p>
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:ListBaseContentHolder"><apiName>ListBaseContentHolder</apiName><shortdesc>
  ListBaseContentHolder 类用于定义基于列表的控件中的容器，该控件针对控件的所有项呈示器和项目编辑器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls.listClasses:ListBaseContentHolder" playerVersion="Flash9" type="uint">
<description>
  组件的背景颜色。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls.listClasses:ListBaseContentHolder" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p>Button 控件的默认值为 10。</p>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls.listClasses:ListBaseContentHolder" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p>Button 控件的默认值为 10。</p>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ListBaseContentHolder 类用于定义基于列表的控件中的容器，该控件针对控件的所有项呈示器和项目编辑器。Flex 使用该容器为扩展到控件之外的渲染器区域设置蒙版，并阻止特定样式（如 <codeph>backgroundColor</codeph>）传播到渲染器，以便在整个控件内显示加亮效果和交替行颜色。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.listClasses.xml#ListBase"><linktext>mx.controls.listClasses.ListBase</linktext></link></related-links><apiConstructor id="mx.controls.listClasses:ListBaseContentHolder:ListBaseContentHolder"><apiName>ListBaseContentHolder</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>parentList</apiItemName><apiOperationClassifier>mx.controls.listClasses:ListBase</apiOperationClassifier><apiDesc>基于列表的控件。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls.listClasses:ListBaseContentHolder:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      设置滚动条及内容的位置和大小，并调整掩码。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置滚动条及内容的位置和大小，并调整掩码。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls.listClasses:ListBaseContentHolder:bottomOffset"><apiName>bottomOffset</apiName><shortdesc>
      由 ListBase.listContent 属性定义的内容的 list 控件中右下角的偏移量（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      由 <codeph>ListBase.listContent</codeph> 属性定义的内容的 list 控件中右下角的偏移量（以像素为单位）。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#ListBase/listContent"><linktext>mx.controls.listClasses.ListBase.listContent</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBaseContentHolder:iterator"><apiName>iterator</apiName><shortdesc>
      IViewCursor 实例，用于从数据提供程序中获取项目并将这些项目传入渲染器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.collections:IViewCursor</apiValueClassifier></apiValueDef><apiDesc>
      IViewCursor 实例，用于从数据提供程序中获取项目并将这些项目传入渲染器。每个代码序列的末尾必须始终定位于显示的最顶部的可见项目处。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBaseContentHolder:leftOffset"><apiName>leftOffset</apiName><shortdesc>
      由 ListBase.listContent 属性定义的内容的 list 控件中左上角的偏移量（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      由 <codeph>ListBase.listContent</codeph> 属性定义的内容的 list 控件中左上角的偏移量（以像素为单位）。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#ListBase/listContent"><linktext>mx.controls.listClasses.ListBase.listContent</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBaseContentHolder:listItems"><apiName>listItems</apiName><shortdesc>
      一个由数组组成的 Array，其中包含用于呈示各个数据提供程序项目的项呈示器实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      一个由数组组成的 Array，其中包含用于呈示各个数据提供程序项目的项呈示器实例。这是以行为主的二维数组，即由列 Array 组成的行 Array。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBaseContentHolder:rightOffset"><apiName>rightOffset</apiName><shortdesc>
      由 ListBase.listContent 属性定义的内容的 list 控件中右下角的偏移量（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      由 <codeph>ListBase.listContent</codeph> 属性定义的内容的 list 控件中右下角的偏移量（以像素为单位）。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#ListBase/listContent"><linktext>mx.controls.listClasses.ListBase.listContent</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBaseContentHolder:rowInfo"><apiName>rowInfo</apiName><shortdesc>
      一个 ListRowInfo 对象 Array，用于缓存 listItems 属性中定义的行的行高及其它跟踪信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      一个 ListRowInfo 对象 Array，用于缓存 <codeph>listItems</codeph> 属性中定义的行的行高及其它跟踪信息。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBaseContentHolder:selectionLayer"><apiName>selectionLayer</apiName><shortdesc>
      由 :istbase.listContent 属性定义的内容中的图层，其中已绘制所有选项和加亮指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      由 <codeph>:istbase.listContent</codeph> 属性定义的内容中的图层，其中已绘制所有选项和加亮指示符。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBaseContentHolder:topOffset"><apiName>topOffset</apiName><shortdesc>
      由 ListBase.listContent 属性定义的内容的 list 控件中左上角的偏移量（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      由 <codeph>ListBase.listContent</codeph> 属性定义的内容的 list 控件中左上角的偏移量（以像素为单位）。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#ListBase/listContent"><linktext>mx.controls.listClasses.ListBase.listContent</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBaseContentHolder:visibleData"><apiName>visibleData</apiName><shortdesc>
      视图中当前使用的数据提供程序项呈示器的哈希表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
      视图中当前使用的数据提供程序项呈示器的哈希表。此表根据数据提供程序项目的 UID 编入索引，可从中快速获得显示特定项目所使用的渲染器。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBaseContentHolder:heightExcludingOffsets:get"><apiName>heightExcludingOffsets</apiName><shortdesc>
      由 ListBase.listContent 属性定义的内容中间部分的高度（以像素为单位），不包括顶部和底部偏移量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      由 <codeph>ListBase.listContent</codeph> 属性定义的内容中间部分的高度（以像素为单位），不包括顶部和底部偏移量。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#ListBase/listContent"><linktext>mx.controls.listClasses.ListBase.listContent</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBaseContentHolder:widthExcludingOffsets:get"><apiName>widthExcludingOffsets</apiName><shortdesc>
      由 ListBase.listContent 属性定义的内容中间部分的宽度（以像素为单位），不包括顶部和底部偏移量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      由 <codeph>ListBase.listContent</codeph> 属性定义的内容中间部分的宽度（以像素为单位），不包括顶部和底部偏移量。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#ListBase/listContent"><linktext>mx.controls.listClasses.ListBase.listContent</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:TileListItemRenderer"><apiName>TileListItemRenderer</apiName><shortdesc>
  TileListItemRenderer 类定义 HorizontalList 和 TileList 控件的默认项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.controls.listClasses:TileListItemRenderer" playerVersion="Flash9" type="Number">
<description>
  垂直方向上各子项间的像素数目。 
  </description>
<default>6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls.listClasses:TileListItemRenderer" playerVersion="Flash9" type="uint">
<description>
  组件禁用时的文本颜色。
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls.listClasses:TileListItemRenderer" playerVersion="Flash9" type="uint">
<description>
  组件标签的文本颜色。
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  TileListItemRenderer 类定义 HorizontalList 和 TileList 控件的默认项呈示器。默认情况下，项呈示器将绘制与列表中每个项目相关联的文本及可选图标。
 
  <p>通过创建自定义的项呈示器，您可以覆盖默认项呈示器。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#HorizontalList"><linktext>mx.controls.HorizontalList</linktext></link><link href="mx.controls.xml#TileList"><linktext>mx.controls.TileList</linktext></link><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links><adobeApiEvent id="mx.controls.listClasses:TileListItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls.listClasses:TileListItemRenderer:TileListItemRenderer"><apiName>TileListItemRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls.listClasses:TileListItemRenderer:protected:toolTipShowHandler"><apiName>toolTipShowHandler</apiName><shortdesc>
      确定 ToolTip 对象的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:ToolTipEvent</apiOperationClassifier><apiDesc>事件对象.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定 ToolTip 对象的位置。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls.listClasses:TileListItemRenderer:protected:icon"><apiName>icon</apiName><shortdesc>
      在此渲染器中显示图标的内部 IFlexDisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc>
      在此渲染器中显示图标的内部 IFlexDisplayObject。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:TileListItemRenderer:protected:label"><apiName>label</apiName><shortdesc>
      在此渲染器中显示文本的内部 UITextField。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      在此渲染器中显示文本的内部 UITextField。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:TileListItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      由 IDataRenderer 接口定义的 data 属性实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      由 IDataRenderer 接口定义的 <codeph>data</codeph> 属性实现。它仅存储值，并使组件失效以触发重新布置组件。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:TileListItemRenderer:listData:get"><apiName>listData</apiName><shortdesc>
      由 IDropInListItemRenderer 接口定义的 listData 属性实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier></apiValueDef><apiDesc>
      由 IDropInListItemRenderer 接口定义的 <codeph>listData</codeph> 属性实现。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:ListBaseSelectionData"><apiName>ListBaseSelectionData</apiName><shortdesc>
  列表类用于跟踪所选内容的记录。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  列表类用于跟踪所选内容的记录。每个所选项目由此类的一个实例表示。 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.listClasses.xml#ListBase/selectedData"><linktext>mx.controls.listClasses.ListBase.selectedData</linktext></link></related-links><apiConstructor id="mx.controls.listClasses:ListBaseSelectionData:ListBaseSelectionData"><apiName>ListBaseSelectionData</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>所选的数据 Object
	 
	  </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>所选项目的数据提供程序中的索引。（可能为近似值） 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>approximate</apiItemName><apiType value="Boolean"/><apiDesc>如果为 true，则索引属性为一个近似值而不是精确值。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls.listClasses:ListBaseSelectionData:approximate"><apiName>approximate</apiName><shortdesc>
	  如果为 true，则索引属性为一个近似值而不是精确值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  如果为 true，则索引属性为一个近似值而不是精确值。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBaseSelectionData:data"><apiName>data</apiName><shortdesc>
	  所选的数据 Object (selectedItem)
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  所选的数据 Object (selectedItem)
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBaseSelectionData:index"><apiName>index</apiName><shortdesc>
	  所选项目的数据提供程序中的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	  所选项目的数据提供程序中的索引。（可能为近似值）
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:ListItemRenderer"><apiName>ListItemRenderer</apiName><shortdesc>
  ListItemRenderer 类定义 List 控件的默认项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls.listClasses:ListItemRenderer" playerVersion="Flash9" type="uint">
<description>
  组件禁用时的文本颜色。
  
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls.listClasses:ListItemRenderer" playerVersion="Flash9" type="uint">
<description>
  组件标签的文本颜色。
  </description>
<default>0x0B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ListItemRenderer 类定义 List 控件的默认项呈示器。默认情况下，项呈示器将绘制与列表中每个项目相关联的文本及可选图标。
 
  <p>通过创建自定义的项呈示器，您可以覆盖默认项呈示器。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links><adobeApiEvent id="mx.controls.listClasses:ListItemRenderer_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls.listClasses:ListItemRenderer:ListItemRenderer"><apiName>ListItemRenderer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls.listClasses:ListItemRenderer:protected:toolTipShowHandler"><apiName>toolTipShowHandler</apiName><shortdesc>
      确定 ToolTip 对象的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:ToolTipEvent</apiOperationClassifier><apiDesc>事件对象.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定 ToolTip 对象的位置。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls.listClasses:ListItemRenderer:protected:icon"><apiName>icon</apiName><shortdesc>
      在此渲染器中显示图标的内部 IFlexDisplayObject。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc>
      在此渲染器中显示图标的内部 IFlexDisplayObject。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListItemRenderer:protected:label"><apiName>label</apiName><shortdesc>
      在此渲染器中显示文本的内部 UITextField。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      在此渲染器中显示文本的内部 UITextField。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListItemRenderer:data:get"><apiName>data</apiName><shortdesc>
      由 IDataRenderer 接口定义的 data 属性实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      由 IDataRenderer 接口定义的 <codeph>data</codeph> 属性实现。设置此属性后，它将存储值并使组件失效以触发组件重新布局。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListItemRenderer:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      
      为此组件提供字体上下文的模块工厂。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      
      为此组件提供字体上下文的模块工厂。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListItemRenderer:listData:get"><apiName>listData</apiName><shortdesc>
      由 IDropInListItemRenderer 接口定义的 listData 属性实现。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier></apiValueDef><apiDesc>
      由 IDropInListItemRenderer 接口定义的 <codeph>listData</codeph> 属性实现。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:TileBaseDirection"><apiName>TileBaseDirection</apiName><shortdesc>
  TileList 组件的 direction 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  TileList 组件的 <codeph>direction</codeph> 属性值。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.listClasses.xml#TileBase/direction"><linktext>mx.controls.listClasses.TileBase.direction</linktext></link></related-links><apiValue id="mx.controls.listClasses:TileBaseDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  水平排列子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  水平排列子项。对于使用两个维度排列子项的控件（如 TileList），排列子项时先填充完一行再转至下一行。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:TileBaseDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  垂直排列子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  垂直排列子项。对于使用两个维度排列子项的控件（如 TileList），排列子项时先填充完一列再转至下一列。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
  从基于列表的控件（DataGrid 类除外）中拖动时使用的默认拖动代理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  从基于列表的控件（DataGrid 类除外）中拖动时使用的默认拖动代理。拖动代理是一个组件，是所拖动的对象或对象副本的父项
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.dataGridClasses.xml#DataGridDragProxy"><linktext>mx.controls.dataGridClasses.DataGridDragProxy</linktext></link></related-links><apiConstructor id="mx.controls.listClasses:ListItemDragProxy:ListItemDragProxy"><apiName>ListItemDragProxy</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls.listClasses:ListBase"><apiName>ListBase</apiName><shortdesc>
  ListBase 类是提供项目列表的控件的基类，可以从该列表中选择一个或多个项目，也可以在各项目之间滚动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="String">
<description>
  垂直对齐行中的渲染器。可能值包括 <codeph>"top"</codeph>、<codeph>"middle"</codeph> 和 <codeph>"bottom"</codeph>。DataGrid 根据此样式以及 <codeph>paddingTop</codeph> 和 <codeph>paddingBottom</codeph> 样式在行中定位渲染器。如果某一行上各列中项目的高度不等，则其它列表类不使用 <codeph>verticalAlign</codeph>，但项呈示器可以检查此样式属性，并根据检查结果调整其布局。
 
  </description>
<default>"top"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="useRollOver" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="Boolean">
<description>
  一个标志，控制当鼠标滚过项目时是否加亮显示该项目。如果为 <codeph>true</codeph>，则当鼠标滚过行时加亮显示这些行。如果为 <codeph>false</codeph>，则只在选中行时才进行加亮显示。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="uint">
<description>
  用户选中渲染器时其文本的颜色。
 
  </description>
<default>0x2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="uint">
<description>
  用户滚过鼠标时渲染器文本的颜色。
 
  </description>
<default>0x2B333C
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectionEasingFunction" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="Function">
<description>
  针对选项效果的 easingFunction。如果选中了某个项目，则在背景着色时会播放相应的效果。默认效果为颜色的线性淡入淡出。easingFunction 可用于控制选择效果。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="selectionDuration" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="Number">
<description>
  选择效果的持续时间。如果选中了某个项目，则在背景着色时会播放相应的效果。设置为 0 可禁用此效果。
  
  </description>
<default>250
  
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionDisabledColor" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="uint">
<description>
  禁用此组件时渲染器的背景色。
 
  </description>
<default>0xDDDDDD
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="uint">
<description>
  用户选中此组件时渲染器的背景色。
 
  </description>
<default>0x7FCEFF
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="uint">
<description>
  用户滚过鼠标时渲染器的背景色。
 
  </description>
<default>0xEEFEE6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="Number">
<description>
  行的顶部与该行中渲染器顶部之间的像素数目。
  
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="Number">
<description>
  行的底部与该行中渲染器底部之间的像素数目。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropIndicatorSkin" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="Class">
<description>
  用于指示所拖动项目的放置位置的外观。如果拖放操作的目标位置可能是 ListBase-derived 组件，则调用 <codeph>showDropFeedback()</codeph> 方法将产生此类的实例，并将该实例定位在所放置项目之后项目的 itemRenderer 上方一个像素处（如果进行放置）。
 
  </description>
<default>mx.controls.listClasses.ListDropIndicator
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="Array">
<description>
  列表中项目使用的背景色。此值是由两种或更多种颜色组成的数组。列表项目的背景色将从数组中的各种颜色之间选取。 
 
  <p>对于 DataGrid 控件，行中的所有项目都使用相同的背景色，而每行的背景色都由颜色数组确定。</p>
 
  <p>对于只使用一个列表填充二维显示的 TileList 控件，此样式可根据指定的列数、行数和颜色数生成棋盘外观、条纹或其它图案。TileList 循环使用各种颜色，根据布局方向设置各个项目的背景色。如果您的 TileList 为水平布局，并且颜色数和列数均为偶数，则显示条纹图案。如果列数为奇数，则显示棋盘图案。
  </p>
 
  <p>仅当未指定 <codeph>backgroundColor</codeph> 时才会生效。</p>
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p>Button 控件的默认值为 10。</p>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p>Button 控件的默认值为 10。</p>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="String">
<description>
  指定焦点矩形的哪些角应该是圆角。此值是使用空格分隔的 String，该 String 可以是 <codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> 和 <codeph>"br"</codeph> 的任意组合。例如，要指定右侧的角为圆角，左侧的角为直角，应使用 <codeph>"tr br"</codeph>。<codeph>cornerRadius</codeph> 样式属性指定圆角的半径。默认值取决于组件类；如果未覆盖该类的默认值，则默认值为 <codeph>"tl tr bl br"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls.listClasses:ListBase" playerVersion="Flash9" type="Number">
<description>
  指定焦点外观的 alpha 透明度值。
  
  </description>
<default>0.4
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The ListBase class inherits all of the tag properties of its superclasses,
  and adds the following tag properties:</p>
  
  <pre>
  &lt;mx:<i>tagname</i>
    <b>Properties</b>
    allowDragSelection="false|true"
    allowMultipleSelection="false|true"
    columnCount="4"
    columnWidth="NaN"
    dataProvider="null"
    dataTipField="label"
    dataTipFunction="null"
    dragEnabled="false|true"
    dragMoveEnabled="false|true"
    dropEnabled="false|true"
    iconField="null"
    iconFunction="null"
    itemRenderer="null"
    labelField="label"
    labelFunction="null"
    menuSelectionMode="false|true"
    offscreenExtraRowsOrColumns="0"
    rowCount="-1"
    rowHeight="NaN"
    selectable="true|false"
    selectedIndex="-1"
    selectedIndices="null"
    selectedItem="null"
    selectedItems="null"
    showDataTips="false|true"
    variableRowHeight="false|true"
    wordWrap="false|true"
 
    <b>Styles</b>
    alternatingItemColors="undefined"
    itemsChangeEffect="undefined"
    dropIndicatorSkin="ListDropIndicator"
    focusAlpha="0.5"
    focusRoundedCorners="tl tr bl br"
    paddingBottom="2"
    paddingLeft="2"
    paddingRight="0"
    paddingTop="2"
    rollOverColor="0xEEFEE6"
    selectionColor="0x7FCEFF"
    selectionDisabledColor="0xDDDDDD"
    selectionDuration="250"
    selectionEasingFunction="undefined"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x2B333C"
    useRollOver="true|false"
    verticalAlign="top|middle|bottom"
 
    <b>Events</b>
    change="<i>No default</i>"
    dataChange="<i>No default</i>"
    itemClick="<i>No default</i>"
    itemDoubleClick="<i>No default</i>"
    itemRollOut="<i>No default</i>"
    itemRollOver="<i>No default</i>"
   /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.effects:IEffectTargetHost</apiBaseInterface><apiBaseClassifier>mx.core:ScrollControlBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ListBase 类是提供项目列表的控件的基类，可以从该列表中选择一个或多个项目，也可以在各项目之间滚动。这些项目由 <codeph>dataProvider</codeph> 属性提供，并通过项呈示器显示。
 
  <p>在模型/视图体系结构中，ListBase-derived 类提供视图，dataProvider 对象提供模型。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link></related-links><adobeApiEvent id="mx.controls.listClasses:ListBase_mx.events.ListEvent.ITEM_DOUBLE_CLICK_itemDoubleClick"><apiName>itemDoubleClick</apiName><shortdesc>
  当用户双击控件中的某个项目时分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户双击控件中的某个项目时分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls.listClasses:ListBase_mx.events.ListEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  当用户单击控件中的某个项目时分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户单击控件中的某个项目时分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls.listClasses:ListBase_mx.events.ListEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  当用户将鼠标指针移出控件中的某个项目时分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户将鼠标指针移出控件中的某个项目时分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls.listClasses:ListBase_mx.events.ListEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  当用户将鼠标指针滚至控件中的某个项目时分派此方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户将鼠标指针滚至控件中的某个项目时分派此方法。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls.listClasses:ListBase_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls.listClasses:ListBase_mx.events.ListEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  当用户操作导致 selectedIndex 或 selectedItem 属性更改时分派此事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户操作导致 <codeph>selectedIndex</codeph> 或 <codeph>selectedItem</codeph> 属性更改时分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls.listClasses:ListBase:ListBase"><apiName>ListBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls.listClasses:ListBase:protected:UIDToItemRenderer"><apiName>UIDToItemRenderer</apiName><shortdesc>
      Find an item renderer based on its UID if it is visible.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>项呈示器。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>项目的 UID.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      Find an item renderer based on its UID if it is visible.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:addDataEffectItem"><apiName>addDataEffectItem</apiName><shortdesc>
      
      如果正在运行数据更改效果，则添加项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要添加到控件布局中的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      如果正在运行数据更改效果，则添加项呈示器。项呈示器应与数据提供程序集合中最近添加但尚未显示的数据项目对应。
     
      <p>此函数将作为数据更改效果的一部分由 <codeph>AddItemAction</codeph> 效果调用，用以指定使用项呈示器的控件开始显示添加到集合中的项目的时间点。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:addDragData"><apiName>addDragData</apiName><shortdesc>
      作为拖放操作的一部分，将所选项目添加到 DragSource 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>ds</apiItemName><apiType value="Object"/><apiDesc>在其中添加数据的 DragSource 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      作为拖放操作的一部分，将所选项目添加到 DragSource 对象。覆盖此方法可将其它数据添加到拖动源。
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:addToFreeItemRenderers"><apiName>addToFreeItemRenderers</apiName><shortdesc>
      将渲染器添加到循环使用的渲染器列表，使其不可见并清除对该渲染器的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>要添加的渲染器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将渲染器添加到循环使用的渲染器列表，使其不可见并清除对该渲染器的引用。如果正在运行某个数据效果，则将保留该渲染器以供那些数据以后使用。否则，会将其添加到常规 freeItemRenderers 堆栈中。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:addToRowArrays"><apiName>addToRowArrays</apiName><shortdesc>
      从用于存储对行的引用的数组开头添加一个空白行.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      从用于存储对行的引用的数组开头添加一个空白行.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:adjustListContent"><apiName>adjustListContent</apiName><shortdesc>
      从 updateDisplayList() 方法中调用，用以调整 listContent 的大小和位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiData>-1</apiData></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiData>-1</apiData></apiParam></apiOperationDef><apiDesc>
      从 <codeph>updateDisplayList()</codeph> 方法中调用，用以调整 listContent 的大小和位置。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:applySelectionEffect"><apiName>applySelectionEffect</apiName><shortdesc>
      设置应用选择指示符的效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>indicator</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>包含描绘选择的图形的 Sprite。
      
      </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>所选项目的 UID，可用于在表中编制索引并跟踪多个选择效果。
      
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>要作为所选内容显示的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置应用选择指示符的效果。默认为基本的 alpha 补间。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:calculateDropIndex"><apiName>calculateDropIndex</apiName><shortdesc>
      返回将放置项目添加到放置目标中的位置的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指示放置项目的添加位置的索引。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiData>null</apiData><apiDesc>包含鼠标位置相关信息的 DragEvent。如果为 <codeph>null</codeph>，此方法应从最后的有效事件中返回 <codeph>dropIndex</codeph> 值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回将放置项目添加到放置目标中的位置的索引。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:calculateDropIndicatorY"><apiName>calculateDropIndicatorY</apiName><shortdesc>
      在执行拖放操作时计算放置指示符的 y 位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>放置指示符的 y 轴坐标。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>rowCount</apiItemName><apiType value="Number"/><apiDesc>控件中可视行的数目。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowNum</apiItemName><apiType value="int"/><apiDesc>放置指示符应在控件中出现的位置的行编号。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在执行拖放操作时计算放置指示符的 y 位置。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:clearCaretIndicator"><apiName>clearCaretIndicator</apiName><shortdesc>
      清除给定 Sprite 中的尖号指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>indicator</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>一个 Sprite 对象，其中应该包含图形以使渲染器呈示加亮效果.
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>加亮的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      清除给定 Sprite 中的尖号指示符。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:clearHighlightIndicator"><apiName>clearHighlightIndicator</apiName><shortdesc>
      清除给定 Sprite 中的加亮指示符.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>indicator</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>一个 Sprite 对象，其中应该包含图形以使渲染器呈示加亮效果.
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>加亮的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      清除给定 Sprite 中的加亮指示符.
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:clearIndicators"><apiName>clearIndicators</apiName><shortdesc>
      删除所有选定、加亮显示和尖号指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      删除所有选定、加亮显示和尖号指示符。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:clearSelected"><apiName>clearSelected</apiName><shortdesc>
      清除所选项目组，并移除表示那些项目的选定状态的所有图形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>transition</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果图形应该显示淡出效果，则返回 <codeph>true</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      清除所选项目组，并移除表示那些项目的选定状态的所有图形。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:clearVisibleData"><apiName>clearVisibleData</apiName><shortdesc>
      清空 visibleData 哈希表.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      清空 visibleData 哈希表.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:collectionChangeHandler"><apiName>collectionChangeHandler</apiName><shortdesc>
      当数据发生更改时，处理从数据提供程序中分派的 CollectionEvent。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>CollectionEvent。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当数据发生更改时，处理从数据提供程序中分派的 CollectionEvent。根据需要，更新渲染器、所选索引和滚动条。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:commitProperties"><apiName>commitProperties</apiName><shortdesc>
      根据是否已显式设置 columnCountcolumnWidth、rowHeight 和 rowCount 等属性来计算列宽、行高以及行数和列数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      根据是否已显式设置 <codeph>columnCount</codeph> <codeph>columnWidth</codeph>、<codeph>rowHeight</codeph> 和 <codeph>rowCount</codeph> 等属性来计算列宽、行高以及行数和列数。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ScrollControlBase"><linktext>mx.core.ScrollControlBase</linktext></link></related-links></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:configureScrollBars"><apiName>configureScrollBars</apiName><shortdesc>
      根据行数、列数以及可查看的行和列配置 ScrollBar。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      根据行数、列数以及可查看的行和列配置 ScrollBar。更新了行和列之后，将从 <codeph>updateDisplayList()</codeph> 方法调用此方法。此方法应指出向 <codeph>setScrollBarProperties()</codeph> 方法传入哪些参数才能正确设置 ScrollBar。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:copyItemWithUID"><apiName>copyItemWithUID</apiName><shortdesc>
      通过调用 ObjectUtil.copy() 方法为此对象制作一个深层副本，然后通过调用 UIDUtil.createUID() 方法用一个新值替代该副本的 uid 属性（如果存在）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>对象的副本。
     
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要复制的项目.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通过调用 <codeph>ObjectUtil.copy()</codeph> 方法为此对象制作一个深层副本，然后通过调用 <codeph>UIDUtil.createUID()</codeph> 方法用一个新值替代该副本的 <codeph>uid</codeph> 属性（如果存在）。
     
      <p>此方法用于拖放副本。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.utils.xml#ObjectUtil"><linktext>mx.utils.ObjectUtil</linktext></link><link href="mx.utils.xml#UIDUtil"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:copySelectedItems"><apiName>copySelectedItems</apiName><shortdesc>
      按照选择时的顺序复制所选项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>所选项目的数组。
      
      </apiDesc><apiType value="Array"/></apiReturn><apiParam><apiItemName>useDataField</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果应使用实际项目填充数组，则为 <codeph>true</codeph>；如果应使用项目索引填充数组，则为 <codeph>false</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      按照选择时的顺序复制所选项目。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:createChildren"><apiName>createChildren</apiName><shortdesc>
      创建对象作为此 ListBase 的子对象，在这种情况下为将容纳所有项呈示器的 listContent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      创建对象作为此 ListBase 的子对象，在这种情况下为将容纳所有项呈示器的 <codeph>listContent</codeph> 对象。项呈示器并不立即创建，而是以后在调用 <codeph>updateDisplayList()</codeph> 方法时创建。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:createItemRenderer"><apiName>createItemRenderer</apiName><shortdesc>
      创建一个给定了数据对象的项呈示器.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>项呈示器。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>数据对象.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建一个给定了数据对象的项呈示器.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:destroyRow"><apiName>destroyRow</apiName><shortdesc>
      循环使用不再需要的行，并删除其指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>i</apiItemName><apiType value="int"/><apiDesc>要删除的行的索引。
      </apiDesc></apiParam><apiParam><apiItemName>numCols</apiItemName><apiType value="int"/><apiDesc>行中的列数.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      循环使用不再需要的行，并删除其指示符。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:dragCompleteHandler"><apiName>dragCompleteHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_COMPLETE 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_COMPLETE</codeph> 事件。此方法从数据提供程序中删除项目。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:dragDropHandler"><apiName>dragDropHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_DROP 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>DragEvent 对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_DROP 事件</codeph>。此方法通过调用 <codeph>hideDropFeedback()</codeph> 方法隐藏放置反馈。
     
      <p>如果此操作为 <codeph>COPY</codeph>，则此方法将调用 <codeph>ObjectUtil.copy()</codeph> 方法为此对象制作一个深层副本，然后通过调用 <codeph>UIDUtil.createUID()</codeph> 方法用一个新值替代该副本的 <codeph>uid</codeph> 属性（如果存在）。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.utils.xml#ObjectUtil"><linktext>mx.utils.ObjectUtil</linktext></link><link href="mx.utils.xml#UIDUtil"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:dragEnterHandler"><apiName>dragEnterHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_ENTER 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_ENTER</codeph> 事件。此方法可确定 DragSource 对象是否包含有效的元素，并使用 <codeph>showDropFeedback()</codeph> 方法来设置 UI 反馈。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:dragExitHandler"><apiName>dragExitHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_EXIT 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_EXIT</codeph> 事件。此方法通过调用 <codeph>hideDropFeedback()</codeph> 方法隐藏 UI 反馈。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:dragOverHandler"><apiName>dragOverHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_OVER 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_OVER</codeph> 事件。此方法确定 DragSource 对象是否包含有效元素，并使用 <codeph>showDropFeedback()</codeph> 方法设置 UI 反馈。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:dragScroll"><apiName>dragScroll</apiName><shortdesc>
      Interval 函数，用于在鼠标位于列表上方或下方时上下滚动列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      Interval 函数，用于在鼠标位于列表上方或下方时上下滚动列表。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:dragStartHandler"><apiName>dragStartHandler</apiName><shortdesc>
      dragStart 事件的默认处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>dragStart</codeph> 事件的默认处理函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:drawCaretIndicator"><apiName>drawCaretIndicator</apiName><shortdesc>
      使用指定的颜色在给定的 Sprite 中采用指定的位置、宽度和高度绘制尖号指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>indicator</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>一个 Sprite 对象，其中应该包含图形以使渲染器呈示加亮效果.
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>建议的指示符 x 位置。
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>建议的指示符 y 位置。
      </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>建议的指示符宽度。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>建议的指示符高度。
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>建议的指示符颜色。
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>加亮的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用指定的颜色在给定的 Sprite 中采用指定的位置、宽度和高度绘制尖号指示符。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:drawHighlightIndicator"><apiName>drawHighlightIndicator</apiName><shortdesc>
      使用指定的颜色在给定的 Sprite 中采用指定的位置、宽度和高度绘制加亮指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>indicator</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>一个 Sprite 对象，其中应该包含图形以使渲染器呈示加亮效果.
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>建议的指示符 x 位置。
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>建议的指示符 y 位置。
      </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>建议的指示符宽度。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>建议的指示符高度。
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>建议的指示符颜色。
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>加亮的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用指定的颜色在给定的 Sprite 中采用指定的位置、宽度和高度绘制加亮指示符。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:drawItem"><apiName>drawItem</apiName><shortdesc>
      绘制带有指示符（加亮显示的或选中的）或尖号的渲染器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>渲染器。
      </apiDesc></apiParam><apiParam><apiItemName>selected</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果应将渲染器绘制为选中状态，则为 <codeph>true</codeph>。
      </apiDesc></apiParam><apiParam><apiItemName>highlighted</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果应将渲染器绘制为加亮状态，则为 <codeph>true</codeph>。
      </apiDesc></apiParam><apiParam><apiItemName>caret</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果应将渲染器绘制为选择尖号，则为 <codeph>true</codeph>。
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果应借助效果将选择状态进行淡入处理，则为 <codeph>true</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      绘制带有指示符（加亮显示的或选中的）或尖号的渲染器。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:drawRowBackgrounds"><apiName>drawRowBackgrounds</apiName><shortdesc>
      绘制行中所有交替行的颜色、边框和背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      绘制行中所有交替行的颜色、边框和背景。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:drawSelectionIndicator"><apiName>drawSelectionIndicator</apiName><shortdesc>
      使用指定的颜色在给定的 Sprite 中采用指定的位置、宽度和高度绘制选择指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>indicator</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>一个 Sprite 对象，其中应该包含图形以使渲染器呈示加亮效果.
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>建议的指示符 x 位置。
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>建议的指示符 y 位置。
      </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiType value="Number"/><apiDesc>建议的指示符宽度。
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>建议的指示符高度。
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>建议的指示符颜色。
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>加亮的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用指定的颜色在给定的 Sprite 中采用指定的位置、宽度和高度绘制选择指示符。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:findKey"><apiName>findKey</apiName><shortdesc>
      尝试在数据提供程序中查找下一个以 eventCode 参数中的字符开头的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果找到匹配项，则为 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>eventCode</apiItemName><apiType value="int"/><apiDesc>键盘上按下的键.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      尝试在数据提供程序中查找下一个以 <codeph>eventCode</codeph> 参数中的字符开头的项目。您可以覆盖此方法以执行联想式预键入查找。搜索从 <codeph>selectedIndex</codeph> 位置开始；如果到达数据提供程序的末端，则将从起始处开始。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:findString"><apiName>findString</apiName><shortdesc>
      根据 String 查找列表中的项目，并将所选内容移至该项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果找到匹配项，则为 <codeph>true</codeph>。
     
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>str</apiItemName><apiType value="String"/><apiDesc>匹配的 String。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      根据 String 查找列表中的项目，并将所选内容移至该项目。搜索从 <codeph>selectedIndex</codeph> 位置开始；如果到达数据提供程序的末端，则将从起始处开始。
     
      <p>对于 DataGrid 控件，此方法将默认搜索控件中的第一列。要搜索其它列，请将填充控件时使用的集合的 <codeph>sort</codeph> 属性设置为要搜索的一个或多个特定字段。每个字段都对应于控件中的一列。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.collections.xml#ListCollectionView"><linktext>mx.collections.ListCollectionView</linktext></link><link href="mx.collections.xml#ArrayCollection"><linktext>mx.collections.ArrayCollection</linktext></link><link href="mx.collections.xml#XMLListCollection"><linktext>mx.collections.XMLListCollection</linktext></link></related-links></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:finishDataChangeEffect"><apiName>finishDataChangeEffect</apiName><shortdesc>
      在数据更改效果运行完毕后，通过恢复原始集合和迭代器并移除此效果使用的所有缓存值进行清理。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:EffectEvent</apiOperationClassifier><apiDesc>EffectEvent.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在数据更改效果运行完毕后，通过恢复原始集合和迭代器并移除此效果使用的所有缓存值进行清理。此方法由 Flex 框架调用；您无需从自己的代码中调用。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:finishKeySelection"><apiName>finishKeySelection</apiName><shortdesc>
      基于 caretIndex 和 anchorIndex 属性设置所选项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      基于 <codeph>caretIndex</codeph> 和 <codeph>anchorIndex</codeph> 属性设置所选项目。如果键盘选择处理函数在滚动以获得更多项目时发生页面错误，则键盘选择处理函数和 <codeph>updateDisplayList()</codeph> 方法将调用此方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:getItemRendererFactory"><apiName>getItemRendererFactory</apiName><shortdesc>
      返回相应的工厂；如果尚未指定，则使用默认工厂。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果 <codeph>data</codeph> 为空，则返回默认的项呈示器；否则，返回自定义的项呈示器。
      
      </apiDesc><apiOperationClassifier>mx.core:IFactory</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>供项呈示器显示的数据。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回相应的工厂；如果尚未指定，则使用默认工厂。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:getRendererSemanticValue"><apiName>getRendererSemanticValue</apiName><shortdesc> 
      
      返回 true 或 false 以指示是否应在目标上播放效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph>true</codeph> 或 <codeph>false</codeph>，指示是否应在目标对象中播放效果。 
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>target</apiItemName><apiType value="Object"/><apiDesc>项呈示器
     
      </apiDesc></apiParam><apiParam><apiItemName>semanticProperty</apiItemName><apiType value="String"/><apiDesc>要返回其值的渲染器的语义属性。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc> 
      
      返回 <codeph>true</codeph> 或 <codeph>false</codeph> 以指示是否应在目标上播放效果。当您在数据效果上设置 <codeph>filter</codeph> 属性时，EffectTargetFilter 类调用此方法。例如，将 <codeph>filter</codeph> 属性设置为 <codeph>addItem</codeph> 或 <codeph>removeItem</codeph>。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:getReservedOrFreeItemRenderer"><apiName>getReservedOrFreeItemRenderer</apiName><shortdesc>
      检索已创建但当前未使用的项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>供项呈示器显示的数据。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      检索已创建但当前未使用的项呈示器。如果正在运行某个数据效果，则将首先尝试从 reservedItemRenderers 映射中检索。否则（或如果未找到保留的渲染器），将从 freeItemRenderers 堆栈中检索。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:hideDropFeedback"><apiName>hideDropFeedback</apiName><shortdesc>
      在鼠标指针下方隐藏指示允许执行拖放操作的放置指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>包含鼠标位置信息的 DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在鼠标指针下方隐藏指示允许执行拖放操作的放置指示符。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:indexToColumn"><apiName>indexToColumn</apiName><shortdesc>
      给定索引处数据提供程序项目所在的列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>组件中显示此项目的列，如果无法在 listContent 容器中显示，则返回 -1。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>数据提供程序中的偏移量。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      给定索引处数据提供程序项目所在的列。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:indexToItemRenderer"><apiName>indexToItemRenderer</apiName><shortdesc>
      针对数据提供程序中某个项目的索引获取项呈示器（如果存在）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>用于显示项目的项呈示器；如果当前未显示此项目，则为 <codeph>null</codeph>。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>某个项目的数据提供程序中的偏移量.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      针对数据提供程序中某个项目的索引获取项呈示器（如果存在）。因为只有可查看行组中的项目才有项呈示器，所以无法对不可见的项目使用此方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:indexToRow"><apiName>indexToRow</apiName><shortdesc>
      给定索引处数据提供程序项目所在的行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>组件中显示此项目的行，如果无法在 listContent 容器中显示，则返回 -1。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>数据提供程序中的偏移量。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      给定索引处数据提供程序项目所在的行。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:indicesToIndex"><apiName>indicesToIndex</apiName><shortdesc>
      计算 colIndex 和 rowIndex 处项目的数据提供程序中的偏移量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>数据提供程序中的偏移量。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行从零开始的索引，包括从顶部滚离的行。因此，如果 <codeph>verticalScrollPosition</codeph> 为 2，则第一个可见行的 rowIndex 为 2。
     
      </apiDesc></apiParam><apiParam><apiItemName>colIndex</apiItemName><apiType value="int"/><apiDesc>列从零开始的索引，包括滚离左侧的列。如果 <codeph>horizontalScrollPosition</codeph> 为 2，则左侧第一列的 columnIndex 为 2。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      计算 colIndex 和 rowIndex 处项目的数据提供程序中的偏移量。根据平铺布局的方向以及 TileList 中的行数和列数，TileList 中第 3 列第 9 行的项目可能与数据提供程序中对应位置的项目不同。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:initiateDataChangeEffect"><apiName>initiateDataChangeEffect</apiName><shortdesc>
      当数据提供程序中发生更改时应用数据更改效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>应用外部调整大小之前控件的宽度。
      
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>应用外部调整大小之前控件的高度。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当数据提供程序中发生更改时应用数据更改效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:invalidateList"><apiName>invalidateList</apiName><shortdesc>
      在下次更新时刷新所有行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在下次更新时刷新所有行。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:isItemHighlighted"><apiName>isItemHighlighted</apiName><shortdesc>
      确定是否加亮显示数据提供者项目的项呈示器（当鼠标滑过它，或者通过键盘导航使它位于尖号下方时）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果项目加亮显示，则返回 <codeph>true.</codeph>
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>数据提供程序项目.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定是否加亮显示数据提供者项目的项呈示器（当鼠标滑过它，或者通过键盘导航使它位于尖号下方时）。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:isItemSelectable"><apiName>isItemSelectable</apiName><shortdesc>
      确定数据提供程序项目的项呈示器是否可选。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果可以选择此项目，则返回 <codeph>true</codeph>.
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>数据提供程序项目.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定数据提供程序项目的项呈示器是否可选。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:isItemSelected"><apiName>isItemSelected</apiName><shortdesc>
      确定是否已选中数据提供程序项目的项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果已选中此项目，则返回 <codeph>true.</codeph>
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>数据提供程序项目.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定是否已选中数据提供程序项目的项呈示器。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:isItemVisible"><apiName>isItemVisible</apiName><shortdesc>
      确定渲染器是否显示某个项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果正在显示此项目，则返回 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>数据提供程序项目。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定渲染器是否显示某个项目。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:isRendererUnconstrained"><apiName>isRendererUnconstrained</apiName><shortdesc>
      如果项呈示器不再根据列表的布局算法定位，则返回 true，尽管由于调用 unconstrainRenderer() 方法正在运行数据更改效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果项呈示器不再使用列表的布局算法定位，则为 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>项呈示器.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果项呈示器不再根据列表的布局算法定位，则返回 <codeph>true</codeph>，尽管由于调用 <codeph>unconstrainRenderer()</codeph> 方法正在运行数据更改效果。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:itemRendererContains"><apiName>itemRendererContains</apiName><shortdesc>
      确定渲染器是否包含（或拥有）显示对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果渲染器中包含或拥有显示对象，则返回 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>renderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>可能包含或拥有显示对象的渲染器。
     
      </apiDesc></apiParam><apiParam><apiItemName>object</apiItemName><apiType value="flash.display:DisplayObject"/><apiDesc>可能与渲染器相关联的显示对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定渲染器是否包含（或拥有）显示对象。所有权表示显示对象实际上并非渲染器的子项，而是在一定程度上与之相关联。渲染器应该包含弹出框，以便弹出框中的活动与渲染器相关联，并且在其它组件中不作为活动显示。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:itemRendererToIndex"><apiName>itemRendererToIndex</apiName><shortdesc>
      返回通过此项呈示器呈示的该项目在数据提供程序中的项目索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>数据提供程序中的项目索引.
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>项呈示器，其中显示了您希望获知其数据提供程序索引的项目。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回通过此项呈示器呈示的该项目在数据提供程序中的项目索引。因为只有可查看行组中的项目才有项呈示器，所以无法对不可见的项目使用此方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:itemRendererToIndices"><apiName>itemRendererToIndices</apiName><shortdesc>
      返回一个包含项呈示器的 columnIndex 和 rowIndex 的点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>点。<codeph>x</codeph> 属性是 columnIndex，<codeph>y</codeph> 属性是 rowIndex。
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>项呈示器.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回一个包含项呈示器的 columnIndex 和 rowIndex 的点。由于只为可查看行组中的项目创建项呈示器，因此您无法使用此方法获得不可见项目的索引。另请注意，项呈示器可循环使用。因此当重用某个项呈示器来显示其它项目时，您获得的项目索引可能会发生变化。通常，在使用鼠标和键盘执行处理期间项呈示器显示的数据集未更改的情况下调用此方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:itemToDataTip"><apiName>itemToDataTip</apiName><shortdesc>
      返回渲染器根据 dataTipField 和 dataTipFunction 属性显示给定数据对象的数据提示字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>String，基于数据的可显示字符串。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>要呈示的对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回渲染器根据 dataTipField 和 dataTipFunction 属性显示给定数据对象的数据提示字符串。如果该方法无法将参数转换为字符串，则会返回一个空格。
      <p>仅供创建 ListBase 子类或其子项的开发人员使用，而不适用于应用程序开发人员。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:itemToIcon"><apiName>itemToIcon</apiName><shortdesc>
      根据 iconField 和 iconFunction 属性返回表示数据项目图标的类（如果存在）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>项目的图标，采用类引用的形式；如果不存在，则返回 <codeph>null</codeph>。
      
      </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>从中提取图标类的项目.
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      根据 iconField 和 iconFunction 属性返回表示数据项目图标的类（如果存在）。项目中的字段可以返回一个字符串，前提是该字符串表示应用程序中某个类的名称。项目中的字段还可以是表示包含图标类的文档中某个变量名称的字符串。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:itemToItemRenderer"><apiName>itemToItemRenderer</apiName><shortdesc>
      返回数据提供程序中给定项目的项呈示器（如果存在）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>项呈示器；如果当前未显示项目，则为 <codeph>null</codeph>。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>数据提供程序项目.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回数据提供程序中给定项目的项呈示器（如果存在）。因为只有可查看行组中的项目才有项呈示器，所以当项目不可见时，此方法将返回 <codeph>null</codeph>。对于 DataGrid，将返回第一列的渲染器。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      返回渲染器根据 labelField 和 labelFunction 属性显示给定数据对象的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>根据数据要显示的字符串。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>要呈示的对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回渲染器根据 labelField 和 labelFunction 属性显示给定数据对象的字符串。如果该方法无法将参数转换为字符串，则会返回一个空格。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:itemToUID"><apiName>itemToUID</apiName><shortdesc>
      确定数据提供程序项目的 UID。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>字符串形式的 UID.
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>数据提供程序项目.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定数据提供程序项目的 UID。数据提供程序中的所有项目都必须具有唯一的 ID (UID)，或生成一个与之相关的 ID。这意味着您无法在数据提供程序中两次显示对象或标量值。 
     
      <p>例如，不支持以下数据提供者，因为“foo”值出现了两次，而且字符串的 UID 是字符串本身。</p>
     
      <pre>var sampleDP:Array = ["foo", "bar", "foo"]</pre>
     
      <p>如果简单动态对象是两个不同的实例，则可以显示两次。支持以下数据提供者，原因是由于每个实例都是不同的对象，因此将向每个实例提供不同的 UID：</p>
     
      <pre>var sampleDP:Array = [{label: "foo"}, {label: "foo"}]</pre>
     
      <p>请注意，以下数据提供程序不受支持，因为同一实例出现了两次。</p>
     
      <pre>
      var foo:Object = {label: "foo"};
      sampleDP:Array = [foo, foo];</pre>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:makeRowsAndColumns"><apiName>makeRowsAndColumns</apiName><shortdesc>
      创建足够的行和列以填充左侧、顶部、右侧和底部描述的区域。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>包含所创建的行数和列数的点。
      
      </apiDesc><apiType value="flash.geom:Point"/></apiReturn><apiParam><apiItemName>left</apiItemName><apiType value="Number"/><apiDesc>要填充的区域的水平像素偏移量。
     
      </apiDesc></apiParam><apiParam><apiItemName>top</apiItemName><apiType value="Number"/><apiDesc>要填充的区域的垂直像素偏移量。
     
      </apiDesc></apiParam><apiParam><apiItemName>right</apiItemName><apiType value="Number"/><apiDesc>要填充的区域与组件左侧的水平像素偏移量。
     
      </apiDesc></apiParam><apiParam><apiItemName>bottom</apiItemName><apiType value="Number"/><apiDesc>要填充的区域与组件顶部的垂直像素偏移量。
     
      </apiDesc></apiParam><apiParam><apiItemName>firstColumn</apiItemName><apiType value="int"/><apiDesc>存储要创建的第一个渲染器时 <codeph>listItems</codeph> 中的偏移量。
     
      </apiDesc></apiParam><apiParam><apiItemName>firstRow</apiItemName><apiType value="int"/><apiDesc>存储要创建的第一个渲染器时 <codeph>listItems</codeph> 中的偏移量。
     
      </apiDesc></apiParam><apiParam><apiItemName>byCount</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果为 true，则创建 <codeph>rowsNeeded</codeph> 行，并忽略 <codeph>bottom</codeph> 参数。.
     
      </apiDesc></apiParam><apiParam><apiItemName>rowsNeeded</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc><codeph>byCount</codeph> 为 true 时要创建的行数。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建足够的行和列以填充左侧、顶部、右侧和底部描述的区域。这将创建渲染器，并在 <codeph>listItems</codeph> 数组中从 <codeph>(firstColumn, firstRow)(</codeph> 开始向下插入。
     
      <p>如果已指定 <codeph>byCount</codeph> 和 <codeph>rowsNeeded</codeph>，则只需创建指定的行数，并忽略 <codeph>bottom</codeph> 和 <codeph>right</codeph> 参数。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:measure"><apiName>measure</apiName><shortdesc>
      根据 rowCount、columnCount、rowHeight 和 columnWidth 属性计算组件的度量宽度和高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      根据 <codeph>rowCount</codeph>、<codeph>columnCount</codeph>、<codeph>rowHeight</codeph> 和 <codeph>columnWidth</codeph> 属性计算组件的度量宽度和高度。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ScrollControlBase"><linktext>mx.core.ScrollControlBase</linktext></link></related-links></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:measureHeightOfItems"><apiName>measureHeightOfItems</apiName><shortdesc>
      使用当前项呈示器测量数据提供程序中的一组项目，并返回这些项目的高度之和。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>所测量项目的高度之和。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>第一个进行高度测量的数据提供程序项目。
     
      </apiDesc></apiParam><apiParam><apiItemName>count</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>计算高度时需要测量的项目数。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用当前项呈示器测量数据提供程序中的一组项目，并返回这些项目的高度之和。
     
      <p>此方法无法在 ListBase 类中实现，而是必须在子类中实现。</p>
     
      <p>如果 <codeph>index</codeph> 值为负，则指定在计算高度时包含所有标题。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:measureWidthOfItems"><apiName>measureWidthOfItems</apiName><shortdesc>
      使用当前项呈示器测量数据提供程序中的一组项目，并返回找到的最大宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>所测量项目的最大宽度。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>第一个进行宽度测量的数据提供程序项目。
     
      </apiDesc></apiParam><apiParam><apiItemName>count</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>计算宽度时需要测量的项目数。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用当前项呈示器测量数据提供程序中的一组项目，并返回找到的最大宽度。此方法用于计算组件的宽度。各种 ListBase-derived 类的实现之间存在细微差异。DataGrid 将测量其列而非数据提供程序项目，而 TileList 只测量第一个项目并假定所有项目大小相同。
     
      <p>此方法无法在 ListBase 类中实现，而是必须在子类中实现。</p>
     
      <p>如果 <codeph>index</codeph> 值为负，则指定在计算宽度时包含所有标题。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:mouseClickHandler"><apiName>mouseClickHandler</apiName><shortdesc>
      处理列表中所有鼠标目标（包括渲染器）的 MouseEvent.MOUSE_CLICK 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理列表中所有鼠标目标（包括渲染器）的 <codeph>MouseEvent.MOUSE_CLICK</codeph> 事件。此方法确定单击了哪个渲染器，并分派 <codeph>ListEvent.ITEM_CLICK</codeph> 事件。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:mouseDoubleClickHandler"><apiName>mouseDoubleClickHandler</apiName><shortdesc>
      处理列表中所有鼠标目标（包括渲染器）的 MouseEvent.MOUSE_DOUBLE_CLICK 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理列表中所有鼠标目标（包括渲染器）的 <codeph>MouseEvent.MOUSE_DOUBLE_CLICK</codeph> 事件。此方法确定单击了哪个渲染器，并分派 <codeph>ListEvent.ITEM_DOUBLE_CLICK</codeph> 事件。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc>
      处理列表中所有鼠标目标（包括渲染器）的 MouseEvent.MOUSE_DOWN 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理列表中所有鼠标目标（包括渲染器）的 <codeph>MouseEvent.MOUSE_DOWN</codeph> 事件。此方法查找被按下的渲染器，并准备接收 <codeph>MouseEvent.MOUSE_UP</codeph> 事件。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:mouseEventToItemRenderer"><apiName>mouseEventToItemRenderer</apiName><shortdesc>
      确定哪种项呈示器位于鼠标下方。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>位于鼠标下方的项呈示器；如果不存在，则为 <codeph>null</codeph>。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>包含鼠标位置及其下方对象的 MouseEvent。.
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定哪种项呈示器位于鼠标下方。项呈示器可由多个鼠标目标组成，也可以包含鼠标目标范围之外的可见区域。此方法既检查鼠标目标又检查鼠标位置，以便从用户角度确定鼠标下方是哪种项呈示器，这可能与鼠标事件提供的信息有所不同。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:mouseMoveHandler"><apiName>mouseMoveHandler</apiName><shortdesc>
      处理列表中所有鼠标目标（包括渲染器）的 MouseEvent.MOUSE_MOVE 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理列表中所有鼠标目标（包括渲染器）的 <codeph>MouseEvent.MOUSE_MOVE</codeph> 事件。此方法监视导致开始拖放并发送 <codeph>DragEvent.DRAG_START</codeph> 事件的动作。它还检查鼠标是否位于渲染器的非目标区域，以便 Flex 尽量使渲染器看起来像目标一样。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:mouseOutHandler"><apiName>mouseOutHandler</apiName><shortdesc>
      处理列表中所有鼠标目标（包括渲染器）的 MouseEvent.MOUSE_OUT 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理列表中所有鼠标目标（包括渲染器）的 <codeph>MouseEvent.MOUSE_OUT</codeph> 事件。此方法查找鼠标离开的渲染器并删除其加亮效果。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:mouseOverHandler"><apiName>mouseOverHandler</apiName><shortdesc>
      处理列表中所有鼠标目标（包括渲染器）的 MouseEvent.MOUSE_OVER 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理列表中所有鼠标目标（包括渲染器）的 <codeph>MouseEvent.MOUSE_OVER</codeph> 事件。此方法查找鼠标到达的渲染器并加亮该渲染器。
     
      <p>列表类还会从 <codeph>MouseEvent.MOUSE_MOVE</codeph> 事件调用此方法。此事件用于检测渲染器中非目标区域以及渲染器周围填充区域中的移动。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc>
      处理列表中所有鼠标目标（包括渲染器）的 MouseEvent.MOUSE_DOWN 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理列表中所有鼠标目标（包括渲染器）的 <codeph>MouseEvent.MOUSE_DOWN</codeph> 事件。此方法查找被按下的渲染器，并准备接收 <codeph>MouseEvent.MOUSE_UP</codeph> 事件。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:mouseWheelHandler"><apiName>mouseWheelHandler</apiName><shortdesc>
      通过更改滚动位置处理 mouseWheel 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>MouseEvent 对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通过更改滚动位置处理 <codeph>mouseWheel</codeph> 事件。这是 ScrollControlBase 类中的版本副本，可以对其进行修改以便水平运行目标时更改 horizontalScrollPosition。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ScrollControlBase/mouseWheelHandler()"><linktext>mx.core.ScrollControlBase.mouseWheelHandler()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:moveIndicatorsHorizontally"><apiName>moveIndicatorsHorizontally</apiName><shortdesc>
      水平移动所选项目并加亮指示符.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>用于查找指示符的 UID.
      </apiDesc></apiParam><apiParam><apiItemName>moveBlockDistance</apiItemName><apiType value="Number"/><apiDesc>水平移动距离.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      水平移动所选项目并加亮指示符.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:moveIndicatorsVertically"><apiName>moveIndicatorsVertically</apiName><shortdesc>
      垂直移动所选项目并加亮指示符.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>用于查找指示符的 UID.
      </apiDesc></apiParam><apiParam><apiItemName>moveBlockDistance</apiItemName><apiType value="Number"/><apiDesc>垂直移动距离.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      垂直移动所选项目并加亮指示符.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:moveRowVertically"><apiName>moveRowVertically</apiName><shortdesc>
      垂直移动行，并更新 rowInfo 记录.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>i</apiItemName><apiType value="int"/><apiDesc>行的索引.
      </apiDesc></apiParam><apiParam><apiItemName>numCols</apiItemName><apiType value="int"/><apiDesc>行中的列数.
      </apiDesc></apiParam><apiParam><apiItemName>moveBlockDistance</apiItemName><apiType value="Number"/><apiDesc>移动的距离.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      垂直移动行，并更新 rowInfo 记录.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:moveSelectionHorizontally"><apiName>moveSelectionHorizontally</apiName><shortdesc>
      沿水平方向移动所选项目，以响应用户使用向左键或向右键以及功能键（如 Shift 和 Ctrl 键）选择项目的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>code</apiItemName><apiType value="uint"/><apiDesc>按下的键（例如 <codeph>Keyboard.LEFT</codeph>）。
      </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiDesc>如果在按住 Shift 键的同时按下某个键，则为 <codeph>true</codeph>。
      </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiDesc>如果在按住 Ctrl 键的同时按下某个键，则为 <codeph>true</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      沿水平方向移动所选项目，以响应用户使用向左键或向右键以及功能键（如 Shift 和 Ctrl 键）选择项目的操作。这种方法可能会更改 <codeph>horizontalScrollPosition</codeph>、<codeph>verticalScrollPosition</codeph> 和 <codeph>caretIndex</codeph> 属性，并调用 <codeph>finishKeySelection()</codeph> 方法来更新选项。
     
      <p>此操作无法在 ListBase 中实现，因为默认列表只有一列，无法水平滚动。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:moveSelectionVertically"><apiName>moveSelectionVertically</apiName><shortdesc>
      沿垂直方向移动所选项目，以响应用户使用向上键或向下键以及功能键（如 Shift 和 Ctrl 键）选择项目的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>code</apiItemName><apiType value="uint"/><apiDesc>按下的键（例如 <codeph>Keyboard.DOWN</codeph>）。
      </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiDesc>如果在按住 Shift 键的同时按下某个键，则为 <codeph>true</codeph>。
      </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiDesc>如果在按住 Ctrl 键的同时按下某个键，则为 <codeph>true</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      沿垂直方向移动所选项目，以响应用户使用向上键或向下键以及功能键（如 Shift 和 Ctrl 键）选择项目的操作。这种方法可能会更改 <codeph>horizontalScrollPosition</codeph>、<codeph>verticalScrollPosition</codeph> 和 <codeph>caretIndex</codeph> 属性，并调用 <codeph>finishKeySelection()</codeph> 方法来更新选项。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:prepareDataEffect"><apiName>prepareDataEffect</apiName><shortdesc>
      准备集合事件的数据效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>ce</apiItemName><apiOperationClassifier>mx.events:CollectionEvent</apiOperationClassifier></apiParam></apiOperationDef><apiDesc>
      准备集合事件的数据效果。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:purgeItemRenderers"><apiName>purgeItemRenderers</apiName><shortdesc>
      当渲染器发生更改时，updateDisplayList() 方法将调用此方法，用以删除现有的项呈示器并清理各种缓存结构。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      当渲染器发生更改时，<codeph>updateDisplayList()</codeph> 方法将调用此方法，用以删除现有的项呈示器并清理各种缓存结构。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:reKeyVisibleData"><apiName>reKeyVisibleData</apiName><shortdesc>
      更新 visibleData 哈希表中的键.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      更新 visibleData 哈希表中的键.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:removeDataEffectItem"><apiName>removeDataEffectItem</apiName><shortdesc>
      
      如果正在运行数据更改效果，则移除项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要从控件布局中删除的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      如果正在运行数据更改效果，则移除项呈示器。项呈示器必须与从数据提供程序集合中移除的数据对应。此函数将作为数据更改效果的一部分由 <codeph>RemoveItemAction</codeph> 效果调用，用以指定使用项呈示器的控件停止显示数据项目的时间点。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:removeFromRowArrays"><apiName>removeFromRowArrays</apiName><shortdesc>
      从用于存储对行的引用的数组中删除一行.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>i</apiItemName><apiType value="int"/><apiDesc>行的索引.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从用于存储对行的引用的数组中删除一行.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:removeIndicators"><apiName>removeIndicators</apiName><shortdesc>
      清理数据提供程序中给定项目的选项亮显及其它关联图形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>数据提供程序项目的 UID.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      清理数据提供程序中给定项目的选项亮显及其它关联图形。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:restoreRowArrays"><apiName>restoreRowArrays</apiName><shortdesc>
      从用于存储对行的引用的数组开头删除请求的行数.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>modDeltaPos</apiItemName><apiType value="int"/><apiDesc>要删除的行数.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从用于存储对行的引用的数组开头删除请求的行数.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:scrollHorizontally"><apiName>scrollHorizontally</apiName><shortdesc>
      调整渲染器以响应滚动位置的更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pos</apiItemName><apiType value="int"/><apiDesc>新的滚动位置。
      </apiDesc></apiParam><apiParam><apiItemName>deltaPos</apiItemName><apiType value="int"/><apiDesc>位置的变化。此值始终为正数。
      </apiDesc></apiParam><apiParam><apiItemName>scrollUp</apiItemName><apiType value="Boolean"/><apiDesc>如果滚动位置正在逐渐缩小，则为 <codeph>true</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      调整渲染器以响应滚动位置的更改。
     
      <p>当滚动位置的更改量低于可见行数时，列表类将尝试优化滚动。此时，一些行只需进行移动即可而无需进行其它更改，另一些行则需要删除，然后添加新行。如果滚动位置更改量过大，将删除所有旧行，并调用 <codeph>makeRowsAndColumns()</codeph> 方法在整个可查看区域添加新行。</p>
     
      <p>此操作无法在 ListBase 中实现，因为默认列表只有一列，无法水平滚动。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:scrollPositionToIndex"><apiName>scrollPositionToIndex</apiName><shortdesc>
      返回给定滚动位置第一个可见行和列处的项目的数据提供程序索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>数据提供程序索引。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>horizontalScrollPosition</apiItemName><apiType value="int"/><apiDesc>与滚动位置相对应的 <codeph>horizontalScrollPosition</codeph> 属性值。
      </apiDesc></apiParam><apiParam><apiItemName>verticalScrollPosition</apiItemName><apiType value="int"/><apiDesc>与滚动位置相对应的 <codeph>verticalScrollPosition</codeph> 属性值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回给定滚动位置第一个可见行和列处的项目的数据提供程序索引。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:scrollToIndex"><apiName>scrollToIndex</apiName><shortdesc>
      确保给定索引处的数据提供程序项目可见。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果更改了 <codeph>verticalScrollPosition</codeph>，则返回 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>数据提供程序中项目的索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确保给定索引处的数据提供程序项目可见。如果此项目可见，则 <codeph>verticalScrollPosition</codeph> 属性将保持不变，即使该项目并非第一个可见项目也不例外。如果此项目当前不可见，则会更改 <codeph>verticalScrollPosition</codeph> 属性以将该项目设为第一个可见项目；但行数不足时除外，因为 <codeph>verticalScrollPosition</codeph> 值受 <codeph>maxVerticalScrollPosition</codeph> 属性限制。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:scrollVertically"><apiName>scrollVertically</apiName><shortdesc>
      调整渲染器以响应滚动位置的更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pos</apiItemName><apiType value="int"/><apiDesc>新的滚动位置。
      </apiDesc></apiParam><apiParam><apiItemName>deltaPos</apiItemName><apiType value="int"/><apiDesc>位置的变化。此值始终为正数。
      </apiDesc></apiParam><apiParam><apiItemName>scrollUp</apiItemName><apiType value="Boolean"/><apiDesc>如果滚动位置正在逐渐缩小，则为 <codeph>true</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      调整渲染器以响应滚动位置的更改。
     
      <p>当滚动位置的更改量低于可见行数时，列表类将尝试优化滚动。此时，一些行只需进行移动即可而无需进行其它更改，另一些行则需要删除，然后添加新行。如果滚动位置更改量过大，将删除所有旧行，并调用 <codeph>makeRowsAndColumns()</codeph> 方法在整个可查看区域添加新行。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:seekPendingFailureHandler"><apiName>seekPendingFailureHandler</apiName><shortdesc>
      当由于页面错误而导致寻找失败时的默认故障处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>导致该错误的数据。 
      
      </apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiOperationClassifier>mx.controls.listClasses:ListBaseSeekPending</apiOperationClassifier><apiDesc>有关由于 ItemPendingError 错误而中断的搜索操作的数据。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当由于页面错误而导致寻找失败时的默认故障处理函数。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:seekPendingResultHandler"><apiName>seekPendingResultHandler</apiName><shortdesc>
      当由于页面错误而导致寻找失败时的默认结果处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>导致该错误的数据。
      
      </apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiOperationClassifier>mx.controls.listClasses:ListBaseSeekPending</apiOperationClassifier><apiDesc>有关由于 ItemPendingError 错误而中断的搜索操作的数据。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当由于页面错误而导致寻找失败时的默认结果处理函数。此方法将检查是否存在最新页面的错误结果：如果没有，则退出；如果有，则将迭代器设置到正确的位置。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:seekPositionSafely"><apiName>seekPositionSafely</apiName><shortdesc>
      搜寻位置，并在必要时处理 ItemPendingError。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果引发 ItemPendingError，则为 <codeph>false</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>编制索引到集合中。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      搜寻位置，并在必要时处理 ItemPendingError。
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:selectItem"><apiName>selectItem</apiName><shortdesc>
      如果使用鼠标单击提供的项呈示器，并且键盘功能键处于给定状态，则更新所选项目组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果所选项目组发生更改，则返回 <codeph>true</codeph>。单击已选项目并不总是能更改所选的项目集。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiDesc>单击的项呈示器。
      </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiDesc>如果在单击鼠标的同时按下 Shift 键，则返回 <codeph>true</codeph>。
      </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiDesc>如果在按住 Ctrl 键的同时单击鼠标，则为 <codeph>true</codeph>。
      </apiDesc></apiParam><apiParam><apiItemName>transition</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>如果在使用某种效果时，处于选定状态的图形应该显示淡入效果，则返回 <codeph>true</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果使用鼠标单击提供的项呈示器，并且键盘功能键处于给定状态，则更新所选项目组。此方法也可以根据项呈示器更新后的选定状态更新其显示。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:setRowCount"><apiName>setRowCount</apiName><shortdesc>
      设置 rowCount 属性不会导致 invalidation，也不会设置将永久锁定行数的 explicitRowCount 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="int"/><apiDesc>行计数。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置 <codeph>rowCount</codeph> 属性不会导致 invalidation，也不会设置将永久锁定行数的 <codeph>explicitRowCount</codeph> 属性。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:setRowHeight"><apiName>setRowHeight</apiName><shortdesc>
      设置 rowHeight 属性不会导致 invalidation，也不会设置将永久锁定行高的 explicitRowHeight。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>v</apiItemName><apiType value="Number"/><apiDesc>行高（以像素为单位）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置 <codeph>rowHeight</codeph> 属性不会导致 invalidation，也不会设置将永久锁定行高的 <codeph>explicitRowHeight</codeph>。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:shiftRow"><apiName>shiftRow</apiName><shortdesc>
      移动引用多行的数组中的某一行.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>oldIndex</apiItemName><apiType value="int"/><apiDesc>数组中的旧索引.
      </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="int"/><apiDesc>数组中的新索引.
      </apiDesc></apiParam><apiParam><apiItemName>numCols</apiItemName><apiType value="int"/><apiDesc>行中的列数.
      </apiDesc></apiParam><apiParam><apiItemName>shiftItems</apiItemName><apiType value="Boolean"/><apiDesc>如果实际移动了项目，则为 <codeph>true</codeph>。如果只更改了项目的 rowIndex，则为 <codeph>false</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      移动引用多行的数组中的某一行.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:showDropFeedback"><apiName>showDropFeedback</apiName><shortdesc>
      在鼠标指针下方显示拖放指示符表示允许拖放操作以及项目的放置位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>包含鼠标位置相关信息的 DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在鼠标指针下方显示拖放指示符表示允许拖放操作以及项目的放置位置。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:sumRowHeights"><apiName>sumRowHeights</apiName><shortdesc>
      确定所请求的行集的高度.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>行的总高度。
      
      </apiDesc><apiType value="Number"/></apiReturn><apiParam><apiItemName>startRowIdx</apiItemName><apiType value="int"/><apiDesc>第一行的索引。
      </apiDesc></apiParam><apiParam><apiItemName>endRowIdx</apiItemName><apiType value="int"/><apiDesc>最后一行的索引。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定所请求的行集的高度.
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:truncateRowArrays"><apiName>truncateRowArrays</apiName><shortdesc>
      从用于存储对行的引用的数组末端删除所有剩余行.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>numRows</apiItemName><apiType value="int"/><apiDesc>截断位置的行索引.
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从用于存储对行的引用的数组末端删除所有剩余行.
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:unconstrainRenderer"><apiName>unconstrainRenderer</apiName><shortdesc>
      
      如果对应于特定数据项目的项呈示器需要移动到控件中项呈示器的正常位置之外，则将作为数据更改效果的一部分由 UnconstrainItemAction 效果调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>作为效果目标的项呈示器。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      如果对应于特定数据项目的项呈示器需要移动到控件中项呈示器的正常位置之外，则将作为数据更改效果的一部分由 <codeph>UnconstrainItemAction</codeph> 效果调用。该控件不会尝试定位效果的持续时间的项呈示器。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      当可显示的项目数发生更改时添加或移除项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      当可显示的项目数发生更改时添加或移除项呈示器。如果项呈示器可能已发生更改，请刷新它们。如果是以编程方式进行的更改，请应用此选项。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#ScrollControlBase"><linktext>mx.core.ScrollControlBase</linktext></link></related-links></apiOperation><apiOperation id="mx.controls.listClasses:ListBase:protected:updateList"><apiName>updateList</apiName><shortdesc>
      刷新所有行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      刷新所有行。调用此方法可能需要进行大量处理，因为它完全重绘列表中所有的渲染器，而且直到完成才返回。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls.listClasses:ListBase:protected:actualCollection"><apiName>actualCollection</apiName><shortdesc>
      通常存储于运行数据更改效果时使用的 collection 中的值副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.collections:ICollectionView</apiValueClassifier></apiValueDef><apiDesc>
      通常存储于运行数据更改效果时使用的 <codeph>collection</codeph> 中的值副本。当数据更改效果未运行时，此值应为空。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:actualIterator"><apiName>actualIterator</apiName><shortdesc>
      通常存储于运行数据更改效果时使用的 iterator 中的值副本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.collections:IViewCursor</apiValueClassifier></apiValueDef><apiDesc>
      通常存储于运行数据更改效果时使用的 <codeph>iterator</codeph> 中的值副本。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:allowDragSelection"><apiName>allowDragSelection</apiName><shortdesc>
      一个标志，指示是否启用拖动选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否启用拖动选择。拖动选择能够通过拖动至某个项目来选中该项目；而在普通选择中，当鼠标悬停在要选择的项目上方时，不能按下鼠标按键。此功能适用于 ComboBox 下拉项，支持以下操作：当鼠标悬停在下拉按钮上方时按下鼠标按键，然后将鼠标拖动至下拉项选择一个项目。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:anchorBookmark"><apiName>anchorBookmark</apiName><shortdesc>
      作为锚点的项目的书签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      作为锚点的项目的书签。借助书签，该组件可快速搜索项目集合中的某个位置。当选择锚点与尖号或加亮显示的项目之间的一组项目时，或在应用 Sort 或 Filter 后查找所选项目时，使用此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:anchorIndex"><apiName>anchorIndex</apiName><shortdesc>
      作为选择锚点的数据提供程序中项目的偏移量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      作为选择锚点的数据提供程序中项目的偏移量。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:cachedItemsChangeEffect"><apiName>cachedItemsChangeEffect</apiName><shortdesc>
      当控件的数据提供程序中发生更改时播放的效果，通过 itemsChangeEffect 样式设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>null</apiData><apiValueClassifier>mx.effects:IEffect</apiValueClassifier></apiValueDef><apiDesc>
      当控件的数据提供程序中发生更改时播放的效果，通过 itemsChangeEffect 样式设置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:caretBookmark"><apiName>caretBookmark</apiName><shortdesc>
      尖号下方项目的书签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
      尖号下方项目的书签。借助书签，该组件可快速搜索项目集合中的某个位置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:caretIndex"><apiName>caretIndex</apiName><shortdesc>
      作为选择尖号点的数据提供程序中项目的偏移量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      作为选择尖号点的数据提供程序中项目的偏移量。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#ListBase/caretItemRenderer"><linktext>mx.controls.listClasses.ListBase.caretItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:caretIndicator"><apiName>caretIndicator</apiName><shortdesc>
      包含图形的 DisplayObject，该图形指示哪个渲染器是尖号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      包含图形的 DisplayObject，该图形指示哪个渲染器是尖号。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:caretItemRenderer"><apiName>caretItemRenderer</apiName><shortdesc>
      尖号下方项目的渲染器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      尖号下方项目的渲染器。选择模型中包含一个锚点、一个尖号和一个加亮显示的项目。如果正在使用鼠标进行选择，则当鼠标滚过时，鼠标下方的项目将加亮显示。如果单击鼠标时不按住功能键（Shift 或 Ctrl），将清除所选项目集，并将选中加亮显示的项目，使其成为锚点。使用鼠标选择时不使用尖号。如果已存在一个锚点并使用 Shift 键选中了另一个项目，则将清除旧的所选项目组，并选中此项目与锚点之间的所有项目。按住 Ctrl 键的同时单击项目可切换对单个项目的选择，但不会移动锚点。
     
      <p>使用键盘选择项目时，如果箭头键未与功能键配合使用，则将清除旧选择并选择新项目，新项目将成为锚点和尖号，同时在加亮显示的选中内容周围显示尖号指示符。如果用户结合使用箭头键和 Shift 键，将清除旧的选择并选择锚点与新项目之间的项目。此时尖号将移至新项目。如果按住 Ctrl 键的同时按方向键，则只移动尖号。用户可以使用空格键切换尖号下的项目的选择。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:caretUID"><apiName>caretUID</apiName><shortdesc>
      尖号下方项目的 UID。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      尖号下方项目的 UID。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:collection"><apiName>collection</apiName><shortdesc>
      用于提供数据提供程序的 ICollectionView。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.collections:ICollectionView</apiValueClassifier></apiValueDef><apiDesc>
      用于提供数据提供程序的 ICollectionView。当设置 <codeph>dataProvider</codeph> 属性时，Flex 将根据需要包装数据提供程序以支持 ICollectionView 接口，并将此属性设置为该结果。然后，ListBase 类使用此属性访问提供程序中的数据。获取 <codeph>dataProvider</codeph> 属性后，Flex 将返回此值。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:dataEffectCompleted"><apiName>dataEffectCompleted</apiName><shortdesc>
      一个标志，指示数据更改效果已完成。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示数据更改效果已完成。组件的响应方式通常是在下次调用 <codeph>updateDisplayList()</codeph> 时清除各种内部数据结构。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:dataItemWrappersByRenderer"><apiName>dataItemWrappersByRenderer</apiName><shortdesc>
      将项呈示器映射到 ItemWrappers（用于提供其数据）的 dictionary。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      将项呈示器映射到 ItemWrappers（用于提供其数据）的 dictionary。仅当运行数据效果时才适用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:defaultColumnCount"><apiName>defaultColumnCount</apiName><shortdesc>
      要显示的默认列数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>4</apiData><apiType value="int"/><apiDefaultValue>4
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要显示的默认列数。当尝试根据大小或内容计算 columnCount 时，如果计算所得的列数值小于 1，则使用此值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:defaultRowCount"><apiName>defaultRowCount</apiName><shortdesc>
      要显示的默认行数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>4</apiData><apiType value="int"/><apiDefaultValue>4
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要显示的默认行数。当尝试根据大小或内容计算 rowCount 时，如果计算所得的列数值小于 1，则使用此值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:explicitColumnCount"><apiName>explicitColumnCount</apiName><shortdesc>
      显式设置 columnCount 属性时需要的列计数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      显式设置 <codeph>columnCount</codeph> 属性时需要的列计数。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:explicitColumnWidth"><apiName>explicitColumnWidth</apiName><shortdesc>
      显式设置 columnWidth 时需要的列宽。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      显式设置 <codeph>columnWidth</codeph> 时需要的列宽。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:explicitRowCount"><apiName>explicitRowCount</apiName><shortdesc>
      显式设置 rowCount 时需要的行计数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>-1</apiData><apiType value="int"/></apiValueDef><apiDesc>
      显式设置 <codeph>rowCount</codeph> 时需要的行计数。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:explicitRowHeight"><apiName>explicitRowHeight</apiName><shortdesc>
      显式设置 rowHeight 时需要的行高。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      显式设置 <codeph>rowHeight</codeph> 时需要的行高。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:factoryMap"><apiName>factoryMap</apiName><shortdesc>
      项呈示器基于工厂的映射。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      项呈示器基于工厂的映射。此属性是一个基于 itemRenderer（其值为 IFactory）编制索引的 Dictionary.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:freeItemRenderers"><apiName>freeItemRenderers</apiName><shortdesc>
      闲置项呈示器的堆栈。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
      闲置项呈示器的堆栈。多数列表类都会在滚动出可显示区域时回收已创建的渲染器；这样可在滚动期间节省时间。重复使用的渲染器都存储在该位置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:freeItemRenderersByFactory"><apiName>freeItemRenderersByFactory</apiName><shortdesc>
      空闲项呈示器基于工厂的映射。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      空闲项呈示器基于工厂的映射。此属性是一个基于工厂（其值为 itemRenderer 的 Dictionaries）编制索引的 Dictionary.
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:highlightIndicator"><apiName>highlightIndicator</apiName><shortdesc>
      包含图形的 DisplayObject，用以指示加亮哪个渲染器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      包含图形的 DisplayObject，用以指示加亮哪个渲染器。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:highlightItemRenderer"><apiName>highlightItemRenderer</apiName><shortdesc>
      当前滚动到尖号上方或下方的渲染器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      当前滚动到尖号上方或下方的渲染器。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:highlightUID"><apiName>highlightUID</apiName><shortdesc>
      当前滚动到尖号上方或下方的项目的 UID。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      当前滚动到尖号上方或下方的项目的 UID。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:itemsNeedMeasurement"><apiName>itemsNeedMeasurement</apiName><shortdesc>
      一个标志，指示是否需要计算 columnWidth 和 rowHeight 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示是否需要计算 <codeph>columnWidth</codeph> 和 <codeph>rowHeight</codeph> 属性。如果样式更改可影响渲染器的测量结果，或数据提供程序发生更改，将设置此属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:itemsSizeChanged"><apiName>itemsSizeChanged</apiName><shortdesc>
      一个标志，指示渲染器的大小可能已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示渲染器的大小可能已更改。组件的响应方式通常是在下次调用 <codeph>updateDisplayList()</codeph> 时，对所有渲染器重新应用数据项目。假定重新应用项目将使项呈示器失效并重新进行测量。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:iterator"><apiName>iterator</apiName><shortdesc>
      主 IViewCursor，用于从数据提供程序中获取项目并将这些项目传递到渲染器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.collections:IViewCursor</apiValueClassifier></apiValueDef><apiDesc>
      主 IViewCursor，用于从数据提供程序中获取项目并将这些项目传递到渲染器。在任何代码顺序的结尾，都必须始终将其放置在所显示的最上方可视项目处。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:iteratorValid"><apiName>iteratorValid</apiName><shortdesc>
      一个标志，指示发生页面错误和迭代器位置无效（未放置在所显示的最上方项目处）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示发生页面错误和迭代器位置无效（未放置在所显示的最上方项目处）。如果组件出现页面错误（ItemPending 错误），它会将 <codeph>iteratorValid</codeph> 设置为 <codeph>false</codeph>。通常用于处理项目呈示问题的代码将检查此标志，并且直到从服务器传来数据页面才运行。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:keySelectionPending"><apiName>keySelectionPending</apiName><shortdesc>
      一个标志，指示键盘选择是否由于页面错误而中断。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示键盘选择是否由于页面错误而中断。组件的响应方式是暂停呈示项目，直到数据页面显示。显示分页的数据时，将调用 <codeph>finishKeySelection()</codeph> 方法.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:lastDropIndex"><apiName>lastDropIndex</apiName><shortdesc>
      最近计算出的索引，这是拖动项目在放置目标中的添加位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      最近计算出的索引，这是拖动项目在放置目标中的添加位置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:lastSeekPending"><apiName>lastSeekPending</apiName><shortdesc>
      导致页面错误的最新一次搜寻。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:ListBaseSeekPending</apiValueClassifier></apiValueDef><apiDesc>
      导致页面错误的最新一次搜寻。如果存在多个页面错误，则只考虑最近的页面错误，因为这是迭代器所处的位置，还是重新呈示行的开始位置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:listContent"><apiName>listContent</apiName><shortdesc>
      一个内部显示对象，是所有项呈示器、选择内容、亮显指示符以及其它支持图形的父级。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:ListBaseContentHolder</apiValueClassifier></apiValueDef><apiDesc>
      一个内部显示对象，是所有项呈示器、选择内容、亮显指示符以及其它支持图形的父级。它大致与 Container 类中的 <codeph>contentPane</codeph> 相等，用于管理滚动。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:menuSelectionMode"><apiName>menuSelectionMode</apiName><shortdesc>
      一个标志，指示是否应使用菜单样式选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示是否应使用菜单样式选择。在 Menu 中，从一个渲染器拖动到另一个渲染器将选择新渲染器并取消选择旧渲染器。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:modifiedCollectionView"><apiName>modifiedCollectionView</apiName><shortdesc>
      集合视图，用于暂时保留上次的数据提供程序状态，以方便运行数据更改效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="mx.collections:ModifiedCollectionView"/></apiValueDef><apiDesc>
      集合视图，用于暂时保留上次的数据提供程序状态，以方便运行数据更改效果。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:offscreenExtraColumns"><apiName>offscreenExtraColumns</apiName><shortdesc>
      用于控件布局的项呈示器的额外列的目标数量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用于控件布局的项呈示器的额外列的目标数量。其中半数的列创建在屏幕上可见列的左侧；另一半创建在右侧。通常，设置 <codeph>offscreenExtraRowsOrColumns</codeph> 属性时将间接设置此属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:offscreenExtraColumnsLeft"><apiName>offscreenExtraColumnsLeft</apiName><shortdesc>
      当前位于最左侧可视列左侧的屏幕外的列数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当前位于最左侧可视列左侧的屏幕外的列数。此值将为 &lt;= <codeph>offscreenExtraColumns</codeph> / 2。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:offscreenExtraColumnsRight"><apiName>offscreenExtraColumnsRight</apiName><shortdesc>
      当前位于最右侧可视列右侧的屏幕外的列数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当前位于最右侧可视列右侧的屏幕外的列数。此值将为 &lt;= <codeph>offscreenExtraColumns</codeph> / 2。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:offscreenExtraRows"><apiName>offscreenExtraRows</apiName><shortdesc>
      要用于控件布局的项呈示器中额外行的目标数量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要用于控件布局的项呈示器中额外行的目标数量。其中半数的行创建在屏幕上可见行的上方；另一半创建在下方。通常，设置 <codeph>offscreenExtraRowsOrColumns</codeph> 属性时将间接设置此属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:offscreenExtraRowsBottom"><apiName>offscreenExtraRowsBottom</apiName><shortdesc>
      当前位于底部可视渲染器下方的屏幕外的项目数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当前位于底部可视渲染器下方的屏幕外的项目数。此值将为 &lt;= <codeph>offscreenExtraRows</codeph> / 2。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:offscreenExtraRowsOrColumnsChanged"><apiName>offscreenExtraRowsOrColumnsChanged</apiName><shortdesc>
      一个标志，指示屏幕外的行数或列数可能已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示屏幕外的行数或列数可能已更改。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:offscreenExtraRowsTop"><apiName>offscreenExtraRowsTop</apiName><shortdesc>
      当前位于最顶部可见行上方的屏幕外的行数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>0</apiData><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当前位于最顶部可见行上方的屏幕外的行数。此值将为 &lt;= <codeph>offscreenExtraRows</codeph> / 2。当计算 <codeph>listItems</codeph> 和 <codeph>rowInfo</codeph> 数组与数据提供程序中项目的关系时使用（与 <codeph>verticalScrollPosition</codeph> 属性配合使用）。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:rendererChanged"><apiName>rendererChanged</apiName><shortdesc>
      一个标志，指示渲染器已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示渲染器已更改。组件的响应方式通常是在下次调用 <codeph>updateDisplayList()</codeph> 时毁掉所有现有渲染器并重新绘制所有渲染器。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:reservedItemRenderers"><apiName>reservedItemRenderers</apiName><shortdesc>
      当前闲置但近期可能会用到的项呈示器的哈希映射。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
      当前闲置但近期可能会用到的项呈示器的哈希映射。当运行数据效果时使用。此映射按数据提供程序项目的 UID 编制索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:rowMap"><apiName>rowMap</apiName><shortdesc>
      项呈示器与其各自 ListRowInfo 对象的哈希映射。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
      项呈示器与其各自 ListRowInfo 对象的哈希映射。ListRowInfo 对象按项呈示器的 DisplayObject 名称编制索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:runDataEffectNextUpdate"><apiName>runDataEffectNextUpdate</apiName><shortdesc>
      一个标志，指示下次更新显示时是否应该启动数据效果。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示下次更新显示时是否应该启动数据效果。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:runningDataEffect"><apiName>runningDataEffect</apiName><shortdesc>
      一个标志，指示当前是否正在运行数据更改效果.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示当前是否正在运行数据更改效果.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:selectedData"><apiName>selectedData</apiName><shortdesc>
      用于跟踪当前所选项目的 ListBaseSelectionData 对象的哈希表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
      用于跟踪当前所选项目的 ListBaseSelectionData 对象的哈希表。此表按项目的 UID 编制索引。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#ListBaseSelectionData"><linktext>mx.controls.listClasses.ListBaseSelectionData</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:selectionIndicators"><apiName>selectionIndicators</apiName><shortdesc>
      所选指示符的哈希表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
      所选指示符的哈希表。当清除所选项目组后，此表允许组件快速查找和移除指示符。此表按项目的 UID 编制索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:selectionLayer"><apiName>selectionLayer</apiName><shortdesc>
      listContent 中的图层，用于绘制所有选择内容和加亮指示符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.display:Sprite"/></apiValueDef><apiDesc>
      <codeph>listContent</codeph> 中的图层，用于绘制所有选择内容和加亮指示符。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:selectionTweens"><apiName>selectionTweens</apiName><shortdesc>
      所选内容补间的哈希表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Object"/></apiValueDef><apiDesc>
      所选内容补间的哈希表。清除所选项目组后，此表允许组件快速查找和清除正在处理的任何补间。此表按项目的 UID 编制索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:showCaret"><apiName>showCaret</apiName><shortdesc>
      一个标志，指示是否显示尖号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示是否显示尖号。通常，当检测到鼠标活动时，此属性设置为 <codeph>false</codeph>；当使用键盘进行选择时，将重新设置为 <codeph>true</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:unconstrainedRenderers"><apiName>unconstrainedRenderers</apiName><shortdesc>
      不受列表布局算法影响的项呈示器的哈希映射.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      不受列表布局算法影响的项呈示器的哈希映射.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:wordWrapChanged"><apiName>wordWrapChanged</apiName><shortdesc>
      一个标志，指示自上次更新显示列表后 wordWrap 属性值是否已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示自上次更新显示列表后 <codeph>wordWrap</codeph> 属性值是否已更改。更改 <codeph>wordWrap</codeph> 属性值时将设置此属性，并可通过 <codeph>updateDisplayList()</codeph> 方法将属性重置为 <codeph>false</codeph>。组件的响应方式通常是在下次调用 <codeph>updateDisplayList()</codeph> 时，对所有渲染器重新应用数据项目。这与 itemsSizeChanged 不同，它可以进一步指示将数据项目重新应用到渲染器不会使其失效，因为唯一发生变化的是，计算渲染器大小时是否应计入 wordWrap.
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:allowMultipleSelection:get"><apiName>allowMultipleSelection</apiName><shortdesc>
      一个标志，指示是否允许您同时选择多个项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否允许您同时选择多个项目。如果为 <codeph>true</codeph>，则用户可以选择多个项目。没有禁止不连续选择的选项。标准复选选项始终有效（按住 Shift 键的同时单击、按住 Ctrl 键的同时单击）。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:columnCount:get"><apiName>columnCount</apiName><shortdesc>
      在 TileList 控件中显示的列数，或在 HorizontalList 控件中显示的项目数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>4
      
      </apiDefaultValue></apiValueDef><apiDesc>
      在 TileList 控件中显示的列数，或在 HorizontalList 控件中显示的项目数。对于 DataGrid 而言，这是可见列的数目。<b>注意</b>：设置此属性对 DataGrid 控件不起任何作用，此控件基于控件的宽度和各列的宽度来确定列数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:columnWidth:get"><apiName>columnWidth</apiName><shortdesc>
      控件中列的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>50
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控件中列的宽度。此属性用于 TileList 和 HorizontalList 控件；该属性对可以设置各 DataGridColumn 宽度的 DataGrid 控件不起作用。
      
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:data:get"><apiName>data</apiName><shortdesc>
      将此组件用作项呈示器或项目编辑器时，此组件应呈示的数据提供程序中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      将此组件用作项呈示器或项目编辑器时，此组件应呈示的数据提供程序中的项目。列表类将在各个渲染器或编辑器上设置此属性，并且组件将显示数据。ListBase-derived 类支持将此属性用于复杂情况，例如存在 DataGrid 列表或者 DataGrid（其中一列就是一个 List）的情况。
     
      <p>除了 <codeph>data</codeph> 属性外，列表类还使用 <codeph>listData</codeph> 属性，用以确定显示内容。如果列表类位于 DataGrid 中，则它需要将列的 <codeph>dataField</codeph> 属性映射到数据中的某个属性，并为该属性设置 <codeph>selectedItem</codeph> 值。如果列表类位于 List 或 TileList 控件中，则它需要将列表的 <codeph>labelField</codeph> 属性映射到数据中的某个属性，并为该属性设置 <codeph>selectedItem</codeph> 值。否则，它会将 <codeph>selectedItem</codeph> 设置为数据本身。</p>
     
      <p>此属性使用数据提供程序，但不对其进行设置。在任何情况下，都必须以其它方式设置数据提供程序。</p>
     
      <p>不要以 MXML 方式设置此属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBase:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      要查看的数据集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      要查看的数据集。此属性允许您将大多数类型的对象用作数据提供程序。如果将 <codeph>dataProvider</codeph> 属性设置为 Array，则会将其转换为 ArrayCollection。如果将该属性设置为 XML 对象，则会将其转换为仅包含一个项目的 XMLListCollection。如果将该属性设置为 XMLList，则会将其转换为 XMLListCollection。如果将该属性设置为实现 IList 或 ICollectionView 接口的对象，则可直接应用此对象。
     
      <p>受转换操作的影响，在您获取 <codeph>dataProvider</codeph> 属性时，该属性值将始终为 ICollectionView，所以此值不一定是您设置的对象类型。如果要修改数据提供程序中的数据，则了解以下行为非常重要：可能不会检测对原始数据所做的更改，但将检测对从 <codeph>dataProvider</codeph> 属性获取的 ICollectionView 对象所做的更改。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBase:dataTipField:get"><apiName>dataTipField</apiName><shortdesc>
      数据提供程序项目中作为数据提示显示的字段名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      数据提供程序项目中作为数据提示显示的字段名称。默认情况下，该列表将在每个项目上查找 <codeph>label</codeph> 属性并将其显示出来。但是，如果数据对象中不包含 <codeph>label</codeph> 属性，则可以将 <codeph>dataTipField</codeph> 属性设置为使用数据对象中的其它属性。例如，在查看从数据库中检索的一组人名时，可以使用“FullName”。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:dataTipFunction:get"><apiName>dataTipFunction</apiName><shortdesc>
      用户提供的函数，在各个项目上运行以确定其数据提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用户提供的函数，在各个项目上运行以确定其数据提示。默认情况下，该列表将在每个数据提供程序项目上查找 <codeph>label</codeph> 属性并将其显示出来。但是，一些项目不包含 <codeph>label</codeph> 属性，也不包含可供在行中显示的其它属性。例如，数据集中包含 lastName 和 firstName 字段，但您希望显示全名。您可以提供一个 <codeph>dataTipFunction</codeph>，用于查找合适的字段并返回可显示的字符串。<codeph>dataTipFunction</codeph> 还非常适用于处理格式设置和本地化。
     
      <p>dataTipFunction 仅使用数据提供程序中的某个项目作为唯一自变量并返回一个字符串，如以下示例所示：</p>
     
      <pre>myDataTipFunction(item:Object):String</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:dragEnabled:get"><apiName>dragEnabled</apiName><shortdesc>
      一个标志，指示是否可以将项目拖出此控件并放到其它控件上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否可以将项目拖出此控件并放到其它控件上。如果设置为 <codeph>true</codeph>，则表示可以在该控件中进行拖动。如果 <codeph>dropEnabled</codeph> 属性同样设置为 <codeph>true</codeph>，您就可以在该控件中拖放项目进行重新排序。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:dragImage:get"><apiName>dragImage</apiName><shortdesc>
      获取可显示拖放操作中的可视效果的类实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier><apiDefaultValue>mx.controls.listClasses.ListItemDragProxy
      
      </apiDefaultValue></apiValueDef><apiDesc>
      获取可显示拖放操作中的可视效果的类实例。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:dragImageOffsets:get"><apiName>dragImageOffsets</apiName><shortdesc>
      获取所拖动图像在拖放后的偏移量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.geom:Point"/></apiValueDef><apiDesc>
      获取所拖动图像在拖放后的偏移量。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      一个标志，指示在拖放操作过程中是否可以移动控件中的项目，而不只是从控件中复制这些项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示在拖放操作过程中是否可以移动控件中的项目，而不只是从控件中复制这些项目。如果此属性设置为 <codeph>true</codeph>，<codeph>dragEnabled</codeph> 属性设置为 <codeph>true</codeph>，就可以移动项目。通常情况下，不能或不应移除数据提供程序中的项目，因此在拖放过程中不应允许移动操作。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:dropEnabled:get"><apiName>dropEnabled</apiName><shortdesc>
      一个标志，指示是否可以将所拖动的项目放到此控件上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否可以将所拖动的项目放到此控件上。
     
      <p>如果将此属性设置为 <codeph>true</codeph>，则该控件将接受所有数据格式，并假定所拖动的数据与数据提供程序中数据的格式相匹配。如果要显式检查正在拖动的数据的数据格式，您必须处理一个或多个拖动事件（如 <codeph>dragOver</codeph>），并调用 DragEvent 的 <codeph>preventDefault()</codeph> 方法来自定义列表类接受拖放数据的方式。</p>
     
      <p>将 <codeph>dropEnabled</codeph> 设置为 <codeph>true</codeph> 时，Flex 会自动调用 <codeph>showDropFeedback()</codeph> 和 <codeph>hideDropFeedback()</codeph> 方法来显示拖放指示符。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:iconField:get"><apiName>iconField</apiName><shortdesc>
      数据提供程序对象中字段的名称，该字段用于确定显示为图标的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      数据提供程序对象中字段的名称，该字段用于确定显示为图标的对象。默认情况下，列表类不会尝试将图标与行中的文本一起显示。但是，您可以通过指定图标字段来指定一个图形，将其作为图标创建并显示在行中。DataGrid 将忽略此属性。
     
      <p>渲染器将在数据提供程序对象中查找名为 iconField 的属性。如果该属性的值是类，将对此类进行实例化并使其成为 IFlexDisplayObject 实例。如果该属性的值是 String，将从应用程序中查找是否存在同名的类；如果没有，还将从文档中查找同名的属性，并将该属性映射到某个类中。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      用户提供的函数，在每个项目上运行以确定其图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用户提供的函数，在每个项目上运行以确定其图标。默认情况下，列表类不会尝试将图标与行中的文本一起显示。但是，您可以通过指定图标函数来为图形指定一个类，将其作为图标创建并显示在行中。DataGrid 将忽略此属性。
     
      <p>iconFunction 仅使用数据提供程序中的某个项目作为唯一自变量并返回一个类，如以下示例所示：</p>
     
      <pre>iconFunction(item:Object):Class</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      控件的自定义项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      控件的自定义项呈示器。您可以指定嵌入式、内嵌或自定义项呈示器。
     
      <p>默认的项呈示器取决于组件类。TileList 和 HorizontalList 类使用 TileListItemRenderer；List 类使用 ListItemRenderer。DataGrid 类使用 DataGridColumn 中的 DataGridItemRenderer。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:labelField:get"><apiName>labelField</apiName><shortdesc>
      数据提供程序项目中作为标签显示的字段名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      数据提供程序项目中作为标签显示的字段名称。默认情况下，列表将在每个项目上查找 <codeph>label</codeph> 属性并将其显示出来。但是，如果该数据对象不包含 <codeph>label</codeph> 属性，则可以将 <codeph>labelField</codeph> 属性设置为使用数据对象中的其它属性。例如，在查看从数据库中提取的一组人名时，可以使用“FullName”。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      用户提供的函数，在每个项目上运行以确定其标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用户提供的函数，在每个项目上运行以确定其标签。默认情况下，该列表将在每个数据提供程序项目上查找 <codeph>label</codeph> 属性并将其显示出来。但是，一些数据集不包含 <codeph>label</codeph> 属性，也不包含可用于显示的其它属性。例如，数据集中包含 lastName 和 firstName 字段，但您希望显示全名。
     
      <p>您可以提供一个 <codeph>labelFunction</codeph>，用于查找合适的字段并返回可显示的字符串。<codeph>labelFunction</codeph> 还非常适用于处理格式设置和本地化。 </p>
     
      <p>对于大多数组件而言，此标签函数仅使用数据提供程序中的某个项目作为唯一参数，并返回一个 String。</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
      <p>DataGrid 和 DataGridColumn 类的方法签名是：</p>
      <pre>
      myLabelFunction(item:Object, column:DataGridColumn):String</pre>
     
      <p>其中，<codeph>item</codeph> 包含 DataGrid 项目对象，并且 <codeph>column</codeph> 指定 DataGrid 列。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:listContentStyleFilters:get"><apiName>listContentStyleFilters</apiName><shortdesc>
      从 ListBase 传递到 listContent 的一组样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 ListBase 传递到 listContent 的一组样式。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBase:listData:get"><apiName>listData</apiName><shortdesc>
      
      如果使用组件作为嵌入式项呈示器或嵌入式项目编辑器，则 Flex 将使用 list 控件中的其它数据初始化组件的 listData 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier></apiValueDef><apiDesc>
      
      如果使用组件作为嵌入式项呈示器或嵌入式项目编辑器，则 Flex 将使用 list 控件中的其它数据初始化组件的 <codeph>listData</codeph> 属性。然后，该组件可以使用 <codeph>listData</codeph> 属性和 <codeph>data</codeph> 属性显示作为嵌入式项呈示器或嵌入式项目编辑器的相应信息。
     
      <p>您无需在 MXML 或 ActionScript 中设置此属性；将组件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 会对其进行设置。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:listItems:get"><apiName>listItems</apiName><shortdesc>
      一个由数组组成的数组，其中包含用于呈示每个数据提供程序项目的 itemRenderer 实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      一个由数组组成的数组，其中包含用于呈示每个数据提供程序项目的 itemRenderer 实例。这是一个行主序的二维数组（由列数组组成的行数组）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:nullItemRenderer:get"><apiName>nullItemRenderer</apiName><shortdesc>
      控件的自定义项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      控件的自定义项呈示器。您可以指定嵌入式、内嵌或自定义项呈示器。
     
      <p>默认的项呈示器取决于组件类。TileList 和 HorizontalList 类使用 TileListItemRenderer；List 类使用 ListItemRenderer。DataGrid 类使用 DataGridColumn 中的 DataGridItemRenderer。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:offscreenExtraRowsOrColumns:get"><apiName>offscreenExtraRowsOrColumns</apiName><shortdesc>
      项呈示器的额外行或列的目标数量，供在控件布局中使用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      项呈示器的额外行或列的目标数量，供在控件布局中使用。其中半数的行/列在屏幕上可见行/列的顶部或左侧创建；另一半在其底部或右侧创建。
     
      <p>创建行还是列取决于控件及其属性。通常情况下将使用行，但 TileBase 组件除外，该组件的 <codeph>direction</codeph> 设置为 <codeph>TileBaseDirection.VERTICAL</codeph>。此时将创建列。</p>
     
      <p>在对 List 或 TileList 控件应用数据效果时，通常将此属性设置为非零值。如果更改影响与当前可见项目对应的数据提供程序元素，或者影响数据提供程序元素中可见项目前后指定数目的项目，则所做的更改会触发数据效果。数据效果可能不会对此范围之外的数据提供程序元素进行完善的动画处理。</p>
     
      <p>此属性很有用，因为数据效果的工作原理是：先确定基于列表的控件的“动画前”布局，然后确定“动画后”布局，最后设置效果的属性以创建从动画前布局到动画后布局的动画。由于许多效果都可以将当前不可见的项目更改为可见，或者将当前可见的项目更改为不可见，所以此属性将该控件配置为创建屏幕外项呈示器，以便在播放数据效果时这些项目已然存在。 </p>
     
      <p>此属性的合理值可能是屏幕上的可见行数。如果将此值设置得过大，则在用于包含大量元素的数据提供程序时可能会导致性能问题。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:rowCount:get"><apiName>rowCount</apiName><shortdesc>
      要显示的行数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>4
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要显示的行数。如果已经显式设置该组件的高度，则此属性可能不会产生任何效果。
     
      <p>对于 DataGrid 控件，<codeph>rowCount</codeph> 属性包含标题行。因此，对于包含 3 个正文行和 1 个标题行的 DataGrid 控件，其 <codeph>rowCount</codeph> 属性为 4。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:rowHeight:get"><apiName>rowHeight</apiName><shortdesc>
      行高（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      行高（以像素为单位）。只有在 <codeph>variableRowHeight</codeph> 属性设置为 <codeph>true</codeph> 时，所有的行高才相等。如果未指定此属性，则行高基于字体大小和渲染器的其它属性而定。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:rowInfo:get"><apiName>rowInfo</apiName><shortdesc>
      ListRowInfo 对象数组，这些对象用于缓存行高和 listItems 中行的其它跟踪信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Array"/></apiValueDef><apiDesc>
      ListRowInfo 对象数组，这些对象用于缓存行高和 listItems 中行的其它跟踪信息。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:selectable:get"><apiName>selectable</apiName><shortdesc>
      一个标志，指示列表是否将所选项目显示为选中状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示列表是否将所选项目显示为选中状态。如果设置为 <codeph>true</codeph>，则控件支持选项。默认情况下，作为 ListBase 子类的 Menu 类将此属性设置为 <codeph>false</codeph>，因为它不会将所选菜单项显示为选中状态。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      所选项目的数据提供程序中的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      所选项目的数据提供程序中的索引。
     
      <p>默认值是 -1（无选中项目）。</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:selectedIndices:get"><apiName>selectedIndices</apiName><shortdesc>
      数据提供程序中所选项目的索引的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[ ]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      数据提供程序中所选项目的索引的数组。这些项目的顺序与用户选择项目的顺序相反。
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      对数据提供程序中所选项目的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      对数据提供程序中所选项目的引用。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:selectedItems:get"><apiName>selectedItems</apiName><shortdesc>
      对数据提供程序中所选项目的引用的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[ ]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      对数据提供程序中所选项目的引用的数组。这些项目的顺序与用户选择项目的顺序相反。
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:selectedItemsCompareFunction:get"><apiName>selectedItemsCompareFunction</apiName><shortdesc>
      用于比较 selectedItems 属性中的项目与数据提供程序中的项目的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      用于比较 <codeph>selectedItems</codeph> 属性中的项目与数据提供程序中的项目的函数。如果存在匹配，则数据提供程序中的项目会变成所选内容的一部分。默认情况下，或者将 <codeph>selectedItemsCompareFunction</codeph> 设置为 <codeph>null</codeph> 时，会使用默认比较函数，该函数使用全等 (===)。请注意，Flex 的早期版本使用等于 (==)，因此在某些情形下可能会存在行为差异。某个公共比较函数可能会简单地比较对象的 UID，或者测试某个特定属性是否匹配。
     
      <p>比较函数采用两个参数。第一个参数是数据提供程序中的对象。第二个参数是 <codeph>selectedItems</codeph> 属性中的对象。如果数据提供程序项目将被选中，则该函数会返回 <codeph>true</codeph>。</p>
     
      <pre>
      myCompareFunction(itemInDataProvider:Object, itemInSelectedItems):Boolean</pre>
     
      <p>默认值为 <codeph>null</codeph>，它使用全等。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:showDataTips:get"><apiName>showDataTips</apiName><shortdesc>
      一个标志，指示是否为行中的文本显示数据提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否为行中的文本显示数据提示。如果为 <codeph>true</codeph>，则显示数据提示。数据提示是一些工具提示，用于显示对行而言过长的文本。如果设置了 dataTipFunction，则无论文本对行而言是否过长都会显示数据提示。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:value:get"><apiName>value</apiName><shortdesc>
      所选项目，或者所选项目的数据或标签字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      所选项目，或者所选项目的数据或标签字段。如果所选项目是 Number 或 String，则其值为此项目。如果所选项目是对象，则该值为 data 属性（如果存在）或 label 属性（如果存在）。
     
      <p>注意：通常首选使用 <codeph>selectedItem</codeph>。此属性可实现与旧应用程序的向后兼容性。.</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:variableRowHeight:get"><apiName>variableRowHeight</apiName><shortdesc>
      一个标志，指示各行是否可以采用不同的高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示各行是否可以采用不同的高度。TileList 和 HorizontalList 将忽略此属性。如果设置为 <codeph>true</codeph>，则各行可以具有不同的高度值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:visibleData:get"><apiName>visibleData</apiName><shortdesc>
      视图中当前使用的数据提供程序项呈示器的哈希表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      视图中当前使用的数据提供程序项呈示器的哈希表。此表根据数据提供程序项目的 UID 编入索引，可从中快速获得显示特定项目所使用的渲染器。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:wordWrap:get"><apiName>wordWrap</apiName><shortdesc>
      一个标志，指示行中的文本是否应自动换行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示行中的文本是否应自动换行。如果设置为 <codeph>true</codeph>，则对行中文本启用自动换行。只有在 <codeph>variableRowHeight</codeph> 属性也设置为 <codeph>true</codeph> 时才会起作用。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBase:protected:allowItemSizeChangeNotification:set"><apiName>allowItemSizeChangeNotification</apiName><shortdesc>
      如果设置为 false，则渲染器无法使 List 的大小失效.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="write"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果设置为 false，则渲染器无法使 List 的大小失效. 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:ListBaseSeekPending"><apiName>ListBaseSeekPending</apiName><shortdesc>
  一个对象，用于存储因 ItemPendingError 错误而中断的搜寻操作的相关数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  一个对象，用于存储因 ItemPendingError 错误而中断的搜寻操作的相关数据。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.errors.xml#ItemPendingError"><linktext>mx.collections.errors.ItemPendingError</linktext></link><link href="mx.controls.listClasses.xml#ListBase/lastSeekPending"><linktext>mx.controls.listClasses.ListBase.lastSeekPending</linktext></link></related-links><apiConstructor id="mx.controls.listClasses:ListBaseSeekPending:ListBaseSeekPending"><apiName>ListBaseSeekPending</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>bookmark</apiItemName><apiOperationClassifier>mx.collections:CursorBookmark</apiOperationClassifier><apiDesc>在搜寻操作中使用的书签。
	  </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiType value="int"/><apiDesc>与作为搜寻操作目标的书签的偏移量。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls.listClasses:ListBaseSeekPending:bookmark"><apiName>bookmark</apiName><shortdesc>
	  在搜寻操作中使用的书签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.collections:CursorBookmark</apiValueClassifier></apiValueDef><apiDesc>
	  在搜寻操作中使用的书签。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls.listClasses:ListBaseSeekPending:offset"><apiName>offset</apiName><shortdesc>
	  与作为搜寻操作目标的书签的偏移量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	  与作为搜寻操作目标的书签的偏移量。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls.listClasses:IListItemRenderer"><apiName>IListItemRenderer</apiName><shortdesc>
  列表组件的项呈示器和项目编辑器必须实现 IListItemRenderer 接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseInterface>mx.core:IFlexDisplayObject</apiBaseInterface><apiBaseInterface>mx.managers:ILayoutManagerClient</apiBaseInterface><apiBaseInterface>mx.styles:ISimpleStyleClient</apiBaseInterface><apiBaseInterface>mx.core:IUIComponent</apiBaseInterface><apiBaseClassifier/></apiClassifierDef><apiDesc>
  列表组件的项呈示器和项目编辑器必须实现 IListItemRenderer 接口。IListItemRenderer 接口包含有多个其它接口。它不定义任何新类方法或属性。 
 
  <p>这组接口中包含：IDataRenderer、IFlexDisplayObject、ILayoutManagerClient、ISimpleStyleClient 和 IUIComponent。UIComponent 类可实现除 IDataRenderer 接口之外的上述所有接口。因此，如果要创建自定义项呈示器或项目编辑器作为 UIComponent 类的子类，只需实现 IDataRenderer 接口，然后将其添加到其类实现 IDataRenderer 和 IListItemRenderer 的类定义中。</p>
 
 <p>通常，IListItemRenderers 专门用于显示数据提供程序项目中的特定字段，无法在其它 DataGrid 列或其它列表中重新用于其它字段。如果希望创建可以重用的渲染器，也可以实现 IDropInListItemRenderer，该列表会向此渲染器传递更多数据，从而允许其重新用于其它数据字段。</p>
 
  <p>项呈示器和项目编辑器均使用 IDataRenderer 接口从列表类的数据提供程序中传递数据。实现 IDropInListItemRenderer 接口的渲染器和编辑器从列表类中获取其它信息。项呈示器或项目编辑器使用一条或两条信息来显示数据。</p>
 
  <p>渲染器和编辑器经常循环使用。创建之后，只需对其赋予新数据和选择 <codeph>listData</codeph> 属性即可再次使用它们。因此，在实现过程中，您必须确保并未假定组件属性包含其初始值或默认值。</p>
  
  </apiDesc></apiClassifierDetail></apiClassifier></apiPackage>