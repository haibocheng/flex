<?xml version="1.0"?>
<apiPackage id="mx.controls"><apiName>mx.controls</apiName><apiDetail/><apiClassifier id="mx.controls:ProgressBarLabelPlacement"><apiName>ProgressBarLabelPlacement</apiName><shortdesc>
  ProgressBarLabelPlacement 类定义 ProgressBar 类的 labelPlacement 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ProgressBarLabelPlacement 类定义 ProgressBar 类的 <codeph>labelPlacement</codeph> 属性值。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ProgressBar"><linktext>mx.controls.ProgressBar</linktext></link></related-links><apiValue id="mx.controls:ProgressBarLabelPlacement:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
	  指定将标签放置在进度栏的下方。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定将标签放置在进度栏的下方。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarLabelPlacement:CENTER"><apiName>CENTER</apiName><shortdesc>
	  指定将标签放置在进度栏的中心位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定将标签放置在进度栏的中心位置。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarLabelPlacement:LEFT"><apiName>LEFT</apiName><shortdesc>
	  指定将标签放置在进度栏的左侧。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定将标签放置在进度栏的左侧。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarLabelPlacement:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	  指定将标签放置在进度栏的右侧。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定将标签放置在进度栏的右侧。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarLabelPlacement:TOP"><apiName>TOP</apiName><shortdesc>
	  指定将标签放置在进度栏的上方。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定将标签放置在进度栏的上方。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:TextArea"><apiName>TextArea</apiName><shortdesc>
  TextArea 组件是一个带有边框和可选滚动条的多行文本字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Alternative owner="mx.controls:TextArea" replacement="spark.components.TextArea" since="4.0">
	</Alternative><styles><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:TextArea" playerVersion="Flash9" type="uint">
<description>
  组件禁用时的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:TextArea" playerVersion="Flash9" type="Number">
<description>
  组件的上边界与其内容区域上边缘之间的像素数目。
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:TextArea" playerVersion="Flash9" type="Number">
<description>
  组件的下边界与其内容区域下边缘之间的像素数目。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:TextArea" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:TextArea" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TextArea&gt;</code> tag inherits the attributes
  of its superclass and adds the following attributes:</p>
 
  <pre>
  &lt;mx:TextArea
    <b>Properties</b>
    condenseWhite="false|true"
    data="undefined"
    displayAsPassword="false|true"
    editable="true|false"
    horizontalScrollPolicy="auto|on|off"
    horizontalScrollPosition="0"
    htmlText="null"
    imeMode="null"
    length="0"
    listData="null"
    maxChars="0"
    restrict="null"
    selectionBeginIndex="0"
    selectionEndIndex="0"
    styleSheet="null"
    text=""
    textHeight="<i>height of text</i>" [read-only]
    textWidth="<i>width of text</i>" [read-only]
    verticalScrollPolicy="auto|on|off"
    verticalScrollPosition="0"
    wordWrap="true|false"
    &nbsp;
    <b>Styles</b>
    disabledColor="0xAAB3B3"
    focusAlpha="0.5"
    focusRoundedCorners"tl tr bl br"
    paddingLeft="0""
    paddingRight="0""
    &nbsp;
    <b>Events</b>
    change="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:ScrollControlBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextArea 组件是一个带有边框和可选滚动条的多行文本字段。TextArea 控件支持 Flash Player 和 AIR 的 HTML 呈示功能。
 
  <p>如果禁用 TextArea 控件，则它将以 <codeph>disabledColor</codeph> 样式指定的颜色显示其内容。您也可以将 TextArea 控件设置为只读以禁止编辑文本。要通过将字符显示为星号来隐藏输入文本，请设置 TextArea 的 <codeph>displayAsPassword</codeph> 属性。</p>
 
  <p>TextArea 控件具有以下默认大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度：160 个像素；高度：44 个像素</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 × 10000 个像素</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TextAreaExample.mxml"><swfblock conref="examples/TextAreaExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Label"><linktext>mx.controls.Label</linktext></link><link href="mx.controls.xml#Text"><linktext>mx.controls.Text</linktext></link><link href="mx.controls.xml#TextInput"><linktext>mx.controls.TextInput</linktext></link><link href="mx.controls.xml#RichTextEditor"><linktext>mx.controls.RichTextEditor</linktext></link><link href="mx.controls.textClasses.xml#TextRange"><linktext>mx.controls.textClasses.TextRange</linktext></link></related-links><adobeApiEvent id="mx.controls:TextArea_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
  当用户在该控件中键入、删除或粘贴文本时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户在该控件中键入、删除或粘贴文本时分派。当用户按 Delete 键或 Backspace 键时，不会分派任何事件。
 
  <p>即使 <codeph>TextEvent.bubbles</codeph> 属性的默认值是 <codeph>true</codeph>，此控件也会在 <codeph>TextEvent.bubbles</codeph> 属性设置为 <codeph>false</codeph> 时分派该事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextArea_flash.events.TextEvent.LINK_link"><apiName>link</apiName><shortdesc> 
  当用户单击由 htmlText 属性定义的文本中的超链接时分派，其中 URL 以“event:”开头。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.LINK</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
  当用户单击由 <codeph>htmlText</codeph> 属性定义的文本中的超链接时分派，其中 URL 处以 <codeph>"event:"</codeph> 开头。<codeph>"event:"</codeph> 之后 URL 的其余部分放置在 <codeph>link</codeph> 事件对象的 text 属性中。
 
  <p>处理 <codeph>link</codeph> 事件时，不会自动执行超链接；您需要从事件处理函数中执行超链接。通常使用 <codeph>navigateToURL()</codeph> 方法执行超链接。这允许您在应用程序中修改超链接，甚至禁止其运行。 </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextArea_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextArea_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  当 TextArea 控件中的文本通过用户输入发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 TextArea 控件中的文本通过用户输入发生更改时分派。使用数据绑定或 ‏‏‎‎ActionScript 代码更改文本时不会引发此事件。
 
  <p>即使 <codeph>Event.bubbles</codeph> 属性的默认值是 <codeph>true</codeph>，该控件也会在 <codeph>Event.bubbles</codeph> 属性设置为 <codeph>false</codeph> 时分派此事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:TextArea:TextArea"><apiName>TextArea</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:TextArea:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc>
      返回 TextLineMetrics 对象，其中包含控件中文本位置和文本行度量值的相关信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含控件中指定文本行的文本位置和度量值的相关信息的对象。
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/><apiDesc>要获得其度量值的行的索引（从零开始）。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回 TextLineMetrics 对象，其中包含控件中文本位置和文本行度量值的相关信息。必须对组件进行验证才能获得正确数值。如果设置 <codeph>text</codeph> 或 <codeph>htmlText</codeph> 属性后立即调用 <codeph>getLineMetrics()</codeph>，则可能会获得不正确的值。您应该等待对组件进行验证或调用 <codeph>validateNow()</codeph>。此行为与 flash.text.TextField 类的行为不同，后者立即更新值。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:TextArea:setSelection"><apiName>setSelection</apiName><shortdesc>
      选择由这些参数指定的范围内的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiDesc>所选内容中第一个字符的从零开始的索引；即第一个字符是 0，第二个字符是 1，依此类推。
     
      </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiDesc>所选内容中最后一个字符<i>之后</i>的位置的从零开始的索引（相当于最后一个字符的从一开始的索引）。例如，如果此参数是 5，则所选内容中的最后一个字符是第五个字符。当 TextArea 控件获得焦点时，如果已经设置了 <codeph>selectionBeginIndex</codeph> 和 <codeph>selectionEndIndex</codeph> 这两种属性，则将能够看到所选内容。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      选择由这些参数指定的范围内的文本。如果控件未获得焦点，则加亮显示的选中内容在控件获得焦点后才显示。此外，如果通过单击控件获得焦点，则先前选定的任何内容都将丢失。如果这两个参数的值相同，则新的所选焦点为插入点。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:TextArea:protected:textField"><apiName>textField</apiName><shortdesc>
      呈示此 TextArea 文本的内部 UITextField。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      呈示此 TextArea 文本的内部 UITextField。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc>
      指定是否应删除包含 HTML 文本的 TextArea 控件中的额外空白（空格、换行符等）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是否应删除包含 HTML 文本的 TextArea 控件中的额外空白（空格、换行符等）。
      
      <p><codeph>condenseWhite</codeph> 属性只影响使用 <codeph>htmlText</codeph> 属性（而非 <codeph>text</codeph> 属性）设置的文本。如果使用 <codeph>text</codeph> 属性设置文本，则忽略 <codeph>condenseWhite</codeph>。</p>
     
      <p>如果将 <codeph>condenseWhite</codeph> 属性设置为 <codeph>true</codeph>，则必须使用标准 HTML 命令（如 <codeph>&lt;br></codeph> 和 <codeph>&lt;p></codeph>）将换行符放在文本字段中。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:data:get"><apiName>data</apiName><shortdesc>
      用于在项呈示器或项目编辑器中使用组件时将值传递给该组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      用于在项呈示器或项目编辑器中使用组件时将值传递给该组件。您通常使用数据绑定将 <codeph>data</codeph> 属性的字段绑定到此组件的某个属性。
     
      <p>将控件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 自动将项目的当前值写入此控件的 <codeph>text</codeph> 属性。</p>
     
      <p>不要以 MXML 方式设置此属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc>
      指示此控件是否用于输入密码。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3177
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue><apiTipTexts><apiTipText>指定是否显示 ' 来代替实际字符
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      指示此控件是否用于输入密码。如果值 <codeph>true</codeph>，则该字段将不显示输入的文本，输入到该控件中的每个文本字符都将显示为字符“*”。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:editable:get"><apiName>editable</apiName><shortdesc>
      指示用户是否可以编辑此控件中的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3176
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true;
     
      </apiDefaultValue><apiTipTexts><apiTipText>指定是否可以编辑该组件
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      指示用户是否可以编辑此控件中的文本。如果值为 <codeph>true</codeph>，则表示用户可以编辑文本。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:horizontalScrollPolicy:get"><apiName>horizontalScrollPolicy</apiName><shortdesc>
      指定水平滚动条是始终打开 (ScrollPolicy.ON)、始终关闭 (ScrollPolicy.OFF)，还是在需要时打开 (ScrollPolicy.AUTO)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定水平滚动条是始终打开 (<codeph>ScrollPolicy.ON</codeph>)、始终关闭 (<codeph>ScrollPolicy.OFF</codeph>)，还是在需要时打开 (<codeph>ScrollPolicy.AUTO</codeph>)。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:htmlText:get"><apiName>htmlText</apiName><shortdesc>
      指定 TextArea 控件显示的文本，包括用于表示文本样式的 HTML 标记。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 TextArea 控件显示的文本，包括用于表示文本样式的 HTML 标记。在此属性中指定 HTML 文本时，可以使用 Flash TextField 控件支持的 HTML 标记子集。
     
      <p>如果设置了此属性，则会在应用 TextArea 实例的 CSS 样式后应用 HTML 标记。获取此属性时，HTML 标记包括 CSS 样式。</p>
      
      <p>例如，如果将此属性设置为 <codeph>"This is an example of &lt;b>bold&lt;/b> markup"</codeph> 之类的字符串，则文本“This is an example of <b>bold</b> markup”将以通常应用的 CSS 样式在 TextArea 中进行显示。此外，由于存在 <codeph>&lt;b></codeph> 标记，“bold”一词将显示为粗体。</p>
     
      <p>HTML 标记使用 &lt; and > 等字符，这些字符在 XML 中具有特殊意义（在 MXML 中也同样如此）。所以，以下代码不能编译：</p>
      
      <pre>
      &lt;mx:TextArea htmlText="This is an example of &lt;b>bold&lt;/b> markup"/>
      </pre>
      
      <p>有三种方法可以解决此问题。</p>
      
      <ul>
      
      <li>
      
      <p>在作为 <codeph>initialize</codeph> 处理函数调用的 ActionScript 方法中设置 <codeph>htmlText</codeph> 属性：</p>
      
      <pre>
      &lt;mx:TextArea id="myTextArea" initialize="myTextArea_initialize()"/>
      </pre>
      
      <p>其中 <codeph>myTextArea_initialize</codeph> 方法位于脚本 CDATA 节：</p>
      
      <pre>
      &lt;mx:Script>
      &lt;![CDATA[
      private function myTextArea_initialize():void {
          myTextArea.htmlText = "This is an example of &lt;b>bold&lt;/b> markup";
      }
      ]]&gt;
      &lt;/mx:Script>
      
      </pre>
      
      <p>由于 HTML 标记依然简单易读，因此这是最简单的方法。请注意，必须为 TextArea 分配一个 <codeph>id</codeph>，以便在 <codeph>initialize</codeph> 处理函数中引用它。</p>
      
      </li>
      
      <li>
      
      <p>使用带有 CDATA 节的子标签指定 <codeph>htmlText</codeph> 属性。XML 中的 CDATA 节包含字符数据，其中 &lt; 和 > 等字符不具有特殊意义。</p>
      
      <pre>
      &lt;mx:TextArea>
          &lt;mx:htmlText>&lt;![CDATA[This is an example of &lt;b>bold&lt;/b> markup]]&gt;&lt;/mx:htmlText>
      &lt;mx:TextArea/>
      </pre>
      
      <p>您必须将 <codeph>htmlText</codeph> 属性编写为子标签，而不是 <codeph>&lt;mx:TextArea></codeph> 标签上的某一属性，因为 XML 不允许属性值中含有 CDATA。请注意，该标记可读性依然很好，但由于涉及到 CDATA 节，该方法比较复杂。</p>
      
      </li>
      
      <li>
      
      <p>使用 <codeph>hmtlText</codeph> 属性，其中只要是 HTML 标记字符 &lt; 和 >，就会在属性值中将其写成 XML“实体”<codeph>&amp;lt;</codeph> 和 <codeph>&amp;gt;</codeph>：</p>
      
      <pre>
      &lt;mx:TextArea htmlText="This is an example of &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt; markup"/&amp;gt;
      </pre>
      
      由于使用此方法时 HTML 标记的可读性很差，因此 Adobe 不建议使用此方法。
      
      </li>
      
      </ul>
      
      <p>设置 <codeph>htmlText</codeph> 属性时，如果 <codeph>condenseWhite</codeph> 属性为 <codeph>true</codeph>，将压缩多个空白字符（与基于 HTML 的浏览器中的情况类似），例如，三个连续的空格显示为一个空格。<codeph>condenseWhite</codeph> 的默认值为 <codeph>false</codeph>，因此，若要压缩空白字符，必须将 <codeph>condenseWhite</codeph> 设置为 <codeph>true</codeph>。</p>
      
      <p>如果设置 <codeph>htmlText</codeph> 属性后立即重新读取该属性，将会看到设置的字符串。但是，如果 LayoutManager 开始运行，该值将发生更改，以包括包含 CSS 样式的其它标记。</p>
      
      <p>设置 <codeph>htmlText</codeph> 属性将影响 <codeph>text</codeph> 属性的多个方面。如果设置 <codeph>htmlText</codeph> 属性后立即读取 <codeph>text</codeph> 属性，则您将收到 <codeph>null</codeph>，这表明尚未确定与新的 <codeph>htmlText</codeph> 相对应的 <codeph>text</codeph>。但是，在运行 LayoutManager 后，<codeph>text</codeph> 属性值将更改为删除了所有 HTML 标记的 <codeph>htmlText</codeph> 字符串，即此值为 TextArea 实际显示的字符。</p>
       
      <p>反之，如果设置 <codeph>text</codeph> 属性，则先前设置的任何 <codeph>htmlText</codeph> 都将是不相关的。如果设置 <codeph>text</codeph> 属性后立即读取 <codeph>htmlText</codeph> 属性，则您将收到 <codeph>null</codeph>，这表明尚未确定与新的 <codeph>text</codeph> 相对应的 <codeph>htmlText</codeph>。但是，如果 LayoutManager 开始运行，<codeph>htmlText</codeph> 属性值更改为新的文本以及 CSS 样式的 HTML 标记。</p>
     
      <p>若要使 LayoutManager 立即运行，您可以调用 TextArea 的 <codeph>validateNow()</codeph> 方法。例如，您可以设置一些 <codeph>htmlText</codeph>，调用 <codeph>validateNow()</codeph> 方法，然后立即获得相应的不包含 HTML 标记的 <codeph>text</codeph>。</p>
      
      <p>如果在 ActionScript 中设置 <codeph>text</codeph> 和 <codeph>htmlText</codeph> 两种属性，则最后设置的属性会生效。切勿在 MXML 中同时设置这两种属性，因为 MXML 不保证能够以特定顺序对实例的属性进行设置。</p>
      
      <p>在某个循环内设置 <codeph>text</codeph> 或 <codeph>htmlText</codeph> 属性的操作完成得很快，因为实际呈示文本的基础 TextField 在 LayoutManager 运行后才更新。</p>
     
      <p>如果尝试将此属性设置为 <codeph>null</codeph>，则该属性将设置为空字符串。如果属性值暂时为 <codeph>null</codeph>，则表明刚刚设置了 <codeph>text</codeph>，但尚未确定相应的 <codeph>htmlText</codeph>。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
     </apiDefaultValue></apiValueDef><apiDesc>
      指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。当控件获得焦点时，Flex 设置指定的 IME 模式；当该控件失去焦点时，则将其设置回为先前的值。
     
      <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:length:get"><apiName>length</apiName><shortdesc>
      TextArea 中显示的文本的字符数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3173
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>TextArea 中的字符数
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      TextArea 中显示的文本的字符数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:listData:get"><apiName>listData</apiName><shortdesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 list 控件中的相应数据初始化该组件的 listData 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 list 控件中的相应数据初始化该组件的 <codeph>listData</codeph> 属性。然后，组件可使用 <codeph>listData</codeph> 属性初始化嵌入式项呈示器或嵌入式项目编辑器的 <codeph>data</codeph> 属性。
     
      <p>您无需在 MXML 或 ActionScript 中设置此属性；将组件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 会对其进行设置。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      用户可以在文本字段中输入的最大字符数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3172
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiTipTexts><apiTipText>TextArea 最多可包含的字符数
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      用户可以在文本字段中输入的最大字符数。此属性对通过设置控件的 <codeph>text</codeph> 或 <codeph>htmlText</codeph> 属性指定的文本的长度没有限制。
     
      <p>默认值为 0，表示无限制。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:restrict:get"><apiName>restrict</apiName><shortdesc>
      指示用户可以输入到控件的字符集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3174
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue><apiTipTexts><apiTipText>TextArea 中可输入的字符集。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      指示用户可以输入到控件的字符集。如果 <codeph>restrict</codeph> 属性的值为 <codeph>null</codeph>，则可以输入任何字符。如果 <codeph>restrict</codeph> 属性的值为空字符串，则不能输入任何字符。此属性只限制用户交互；脚本可以将任何文本放入文本字段中。如果 <codeph>restrict</codeph> 属性的值为字符串，则只能在文本字段中输入该字符串中的字符。
     
      <p>Flex 按从左到右的顺序浏览字符串。可以使用连字符 (-) 指定一个范围。如果字符串以尖号 (^) 开头，则先接受所有字符，然后从接受字符集中排除字符串中 ^ 之后的字符。如果字符串不以尖号 (^) 开头，则最初不接受任何字符，然后将字符串中的字符包括在接受字符集中。</p>
     
      <p>由于某些字符在 <codeph>restrict</codeph> 属性中使用时具有特殊的意义，因此必须使用反斜杠字符指定文本字符 -、^ 和 \。将 <codeph>restrict</codeph> 属性用作 MXML 标签中的属性时，请使用单一反斜杠，如下例所示：\^\-\\。当您在 ActionScript 表达式中设置 <codeph>restrict</codeph> 时，请使用两个反斜杠，如下例所示：\\^\\-\\\。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/restrict"><linktext>flash.text.TextField.restrict</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:selectable:get"><apiName>selectable</apiName><shortdesc>
      指定是否可以选择文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是否可以选择文本。允许选择文本将使您能够从控件中复制文本。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc>
      当前所选内容中第一个字符从零开始的字符索引值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>所选内容中第一个字符从零开始的索引值。
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      当前所选内容中第一个字符从零开始的字符索引值。例如，第一个字符的索引值是 0，第二个字符的索引值是 1，依此类推。当控件获得焦点时，如果已经设置了 <codeph>selectionBeginIndex</codeph> 和 <codeph>selectionEndIndex</codeph> 这两种属性，则将能够看到所选内容。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc>
      当前所选内容中最后一个字符之后的位置从零开始的索引（与最后一个字符从一开始的索引等效）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>所选内容中最后一个字符从零开始的索引值。
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      当前所选内容中最后一个字符<i>后</i>的位置从零开始的索引（与最后一个字符的从一开始的索引相等）。例如，如果所选内容中的最后一个字符是第五个字符，则此属性的值为 5。当控件获得焦点时，如果已经设置了 <codeph>selectionBeginIndex</codeph> 和 <codeph>selectionEndIndex</codeph> 这两种属性，则将能够看到所选内容。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:styleSheet:get"><apiName>styleSheet</apiName><shortdesc>
     可呈示 TextArea 控件文本的 flash.text.StyleSheet 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:StyleSheet"/><apiDefaultValue>null
     
     </apiDefaultValue></apiValueDef><apiDesc>
     可呈示 TextArea 控件文本的 flash.text.StyleSheet 对象。用于详细控制文本的 HTML 样式。有关详细信息，请参阅 flash.text.StyleSheet 类文档。
    
     </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.StyleSheet.xml"><linktext>flash.text.StyleSheet</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:text:get"><apiName>text</apiName><shortdesc>
      控件中出现的纯文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3179
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue><apiTipTexts><apiTipText>获取或设置 TextArea 内容
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      控件中出现的纯文本。其外观由此 Lable 控件的 CSS 样式确定。
      
      <p>文本字符串中的任何 HTML 标签都将被忽略，其显示效果就像以字符串形式输入的一样。要显示使用 HTML 标签进行格式设置的文本，请改用 <codeph>htmlText</codeph> 属性。如果设置了 <codeph>htmlText</codeph> 属性，则 HTML 将替换使用此属性设置的所有文本，并且 <codeph>text</codeph> 属性将返回 HTML 文本的纯文本版本，而从中去除了所有 HTML 标签。有关详细信息，请参阅 <codeph>htmlText</codeph> 属性。</p>
     
      <p>要在文本中包括特殊字符左尖括号 (&lt;)、右尖括号 (>) 或和号 (&amp;)，请将文本字符串包含在 CDATA 标签中。此外，您可以使用 HTML 字符实体表示特殊字符，例如 <codeph>&amp;lt;</codeph>。</p>
     
      <p>如果尝试将此属性设置为 <codeph>null</codeph>，则该属性将设置为空字符串。<codeph>text</codeph> 属性可暂时使用值 <codeph>null</codeph>，此值表示刚刚设置了 <codeph>htmlText</codeph> 值，但相应的 <codeph>text</codeph> 值尚未确定。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:textHeight:get"><apiName>textHeight</apiName><shortdesc>
      文本高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      文本高度。
     
      <p>只有在组件经过验证后，<codeph>textHeight</codeph> 属性的值才是正确的。如果您在设置 <codeph>text</codeph> 后立即请求 <codeph>textHeight</codeph>，则接收到的值可能不正确。您应等待组件经过验证或调用 <codeph>validateNow()</codeph> 方法后，再获取此值。此行为与 flash.text.TextField 控件有所不同，后者会立即更新此值。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:textWidth:get"><apiName>textWidth</apiName><shortdesc>
      文本的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      文本的宽度。
     
      <p>只有在组件经过验证后，<codeph>textWidth</codeph> 属性的值才是正确的。如果您在设置 <codeph>text</codeph> 后立即请求 <codeph>textWidth</codeph>，则接收到的值可能不正确。您应等待组件经过验证或调用 <codeph>validateNow()</codeph> 方法后，再获取此值。此行为与 flash.text.TextField 控件有所不同，后者会立即更新此值。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextArea:verticalScrollPolicy:get"><apiName>verticalScrollPolicy</apiName><shortdesc>
      垂直滚动条是始终打开 (ScrollPolicy.ON)、始终关闭 (ScrollPolicy.OFF)，还是在需要时打开 (ScrollPolicy.AUTO)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3428
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ScrollPolicy.AUTO
      </apiDefaultValue><apiTipTexts><apiTipText>指定垂直 scrollbar 是打开、关闭，还是自动调整
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      垂直滚动条是始终打开 (<codeph>ScrollPolicy.ON</codeph>)、始终关闭 (<codeph>ScrollPolicy.OFF</codeph>)，还是在需要时打开 (<codeph>ScrollPolicy.AUTO</codeph>)。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:wordWrap:get"><apiName>wordWrap</apiName><shortdesc>
      指示文本是否在行末自动换行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3175
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue><apiTipTexts><apiTipText>如果为 true，则换行。如果为 false，则对长行进行剪裁。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      指示文本是否在行末自动换行。如果为 <codeph>true</codeph>，文本将根据需要换行为多行。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:horizontalScrollPosition:set"><apiName>horizontalScrollPosition</apiName><shortdesc>
      当前显示的最左端像素的内容区域中的像素位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当前显示的最左端像素的内容区域中的像素位置。（内容区域包括控件的所有内容，不是仅包括当前显示的部分。）该属性始终设置为 0，并且如果将 <codeph>wordWrap</codeph> 设置为 <codeph>true</codeph>，将忽略更改。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextArea:verticalScrollPosition:set"><apiName>verticalScrollPosition</apiName><shortdesc>
      当前显示的首行字符的行号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3181
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiTipTexts><apiTipText>内容与顶边的像素偏移量
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      当前显示的首行字符的行号。默认值为 0。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:VRule"><apiName>VRule</apiName><shortdesc>
  VRule 控件可创建一条垂直线条。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:VRule" replacement="spark.primitives.Line" since="4.0">
	</Alternative><styles><style format="Length" inherit="yes" name="strokeWidth" owner="mx.controls:VRule" playerVersion="Flash9" type="Number">
<description>
  画线板的粗细（以像素为单位）。 
  <ul>
    <li>如果 <codeph>strokeWidth</codeph> 为 1，则画线板为 1 个像素宽的线条。</li>
    <li>如果 <codeph>strokeWidth</codeph> 为 2，则画线板为两条相邻的 1 个像素宽的垂直线条。</li>
    <li>如果 <codeph>strokeWidth</codeph> 大于 2，则画线板为边宽 1 个像素的中空矩形。</li>
  </ul>
  
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="strokeColor" owner="mx.controls:VRule" playerVersion="Flash9" type="uint">
<description>
  线条的颜色。 
  <ul>
    <li>如果 <codeph>strokeWidth</codeph> 为 1，则 strokeColor 为整个线条的颜色。</li>
    <li>如果 <codeph>strokeWidth</codeph> 为 2，则 strokeColor 为左侧线条的颜色。</li>
    <li>如果 <codeph>strokeWidth</codeph> 大于 2，则 strokeColor 为该矩形的顶部边和左侧边的颜色。</li>
  </ul>
  
  </description>
<default>0xC4CCCC
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="shadowColor" owner="mx.controls:VRule" playerVersion="Flash9" type="uint">
<description>
  线条的阴影颜色。 
  <ul>
    <li>如果 <codeph>strokeWidth</codeph> 为 1，则 shadowColor 不起任何作用。</li>
    <li>如果 <codeph>strokeWidth is 2</codeph>，则 shadowColor 是右侧线条的颜色。</li>
    <li>如果 <codeph>strokeWidth</codeph> 大于 2，则 shadowColor 是矩形底边和右边的颜色。</li>
  </ul>
  
  </description>
<default>0xEEEEEE
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VRule&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:VRule
    <strong>Styles</strong>
    strokeColor="0xC4CCCC"
    shadowColor="0xEEEEEE"
    strokeWidth="2"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  VRule 控件可创建一条垂直线条。通常，此控件用于在容器内创建一条分隔线。
 
  <p>HRule 控件具有下列默认属性：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>默认高度为 100 个像素，默认宽度为 2 个像素。默认情况下，VRule 控件的大小是不可调整的；将宽度和高度设置为百分比值即可调整其大小。</entry>
        </row><row>
           <entry>strokeWidth</entry>
           <entry>2 个像素。</entry>
        </row><row>
           <entry>strokeColor</entry>
           <entry>0xC4CCCC。</entry>
        </row><row>
           <entry>shadowColor</entry>
           <entry>0xEEEEEE。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleVRule.mxml"><swfblock conref="examples/SimpleVRule.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#HRule"><linktext>mx.controls.HRule</linktext></link></related-links><apiConstructor id="mx.controls:VRule:VRule"><apiName>VRule</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:Alert"><apiName>Alert</apiName><shortdesc>
  Alert 控件是一个弹出对话框，可能包含消息、标题、按钮（“确定”、“取消”、“是”和“否”的任意组合）和图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="titleStyleName" owner="mx.controls:Alert" playerVersion="Flash9" type="String">
<description>
  指定 Alert 标题文本样式的 CSS 样式声明的名称。 
 
  <p>您只能使用类型选择器设置此样式，这将在应用程序中设置所有 Alert 控件的样式。如果对 Alert 控件的特定实例设置此样式，将导致此控件错误地调整自身大小。</p>
 
  </description>
<default>"windowStyles" 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="messageStyleName" owner="mx.controls:Alert" playerVersion="Flash9" type="String">
<description>
  指定 Alert 消息文本样式的 CSS 样式声明的名称。 
 
  <p>您只能使用类型选择器设置此样式，这将在应用程序中设置所有 Alert 控件的样式。如果对 Alert 控件的特定实例设置此样式，将导致此控件错误地调整自身大小。</p>
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="buttonStyleName" owner="mx.controls:Alert" playerVersion="Flash9" type="String">
<description>
  指定 Alert 按钮样式的 CSS 样式声明的名称。 
 
  </description>
<default>"alertButtonStyle"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>
  Alert 控件是一个弹出对话框，可能包含消息、标题、按钮（“确定”、“取消”、“是”和“否”的任意组合）和图标。Alert 控件是模式控件，这意味着在用户将其关闭之前，它将一直保留焦点。
 
  <p>将 mx.controls.Alert 类导入应用程序，然后调用 ActionScript 中的静态 <codeph>show()</codeph> 方法以显示 Alert 控件。不能在 MXML 中创建 Alert 控件。</p>
 
  <p>在 Alert 控件中选择一个按钮或按下 Esc 键时，将关闭该控件。</p>
 
  </apiDesc><example conref="SimpleAlert.mxml"><swfblock conref="examples/SimpleAlert.swf"/></example></apiClassifierDetail><related-links><link href="mx.managers.xml#SystemManager"><linktext>mx.managers.SystemManager</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link></related-links><apiConstructor id="mx.controls:Alert:Alert"><apiName>Alert</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:Alert:show"><apiName>show</apiName><shortdesc>
      弹出 Alert 控件的静态方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>对 Alert 控件的引用。 
     
      </apiDesc><apiOperationClassifier>mx.controls:Alert</apiOperationClassifier></apiReturn><apiParam><apiItemName>text</apiItemName><apiType value="String"/><apiData/><apiDesc>在 Alert 控件中显示的文本字符串。此文本将在警告对话框中居中显示。
     
      </apiDesc></apiParam><apiParam><apiItemName>title</apiItemName><apiType value="String"/><apiData/><apiDesc>标题栏中显示的文本字符串。此文本左对齐。
     
      </apiDesc></apiParam><apiParam><apiItemName>flags</apiItemName><apiType value="uint"/><apiData>0x4</apiData><apiDesc>Alert 控件中放置的按钮。有效值为 <codeph>Alert.OK</codeph>、<codeph>Alert.CANCEL</codeph>、<codeph>Alert.YES</codeph> 和 <codeph>Alert.NO</codeph>。默认值为 <codeph>Alert.OK</codeph>。使用按位 OR 运算符可显示多个按钮。例如，传递 <codeph>(Alert.YES | Alert.NO)</codeph> 显示“是”和“否”按钮。无论按怎样的顺序指定按钮，它们始终按照以下顺序从左到右显示：“确定”、“是”、“否”、“取消”。
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:Sprite"/><apiData>null</apiData><apiDesc>Alert 控件在其上居中的对象。
     
      </apiDesc></apiParam><apiParam><apiItemName>closeHandler</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>按下 Alert 控件上的任意按钮时将调用的事件处理函数。传递给此处理函数的事件对象是 CloseEvent 的一个实例；此对象的 <codeph>detail</codeph> 属性包含 <codeph>Alert.OK</codeph>、<codeph>Alert.CANCEL</codeph>、<codeph>Alert.YES</codeph> 或 <codeph>Alert.NO</codeph> 值。
     
      </apiDesc></apiParam><apiParam><apiItemName>iconClass</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>位于 Alert 控件中文本左侧的图标的类。
     
      </apiDesc></apiParam><apiParam><apiItemName>defaultButtonFlag</apiItemName><apiType value="uint"/><apiData>0x4</apiData><apiDesc>指定默认按钮的位标志。您可以指定一个值，并且只能是 <codeph>Alert.OK</codeph>、<codeph>Alert.CANCEL</codeph>、<codeph>Alert.YES</codeph> 或 <codeph>Alert.NO</codeph> 中的一个值。默认值为 <codeph>Alert.OK</codeph>。按 Enter 键触发默认按钮，与单击此按钮的效果相同。按 Esc 键触发“取消”或“否”按钮，与选择相应按钮的效果相同。
     
      </apiDesc></apiParam><apiParam><apiItemName>moduleFactory</apiItemName><apiOperationClassifier>mx.core:IFlexModuleFactory</apiOperationClassifier><apiData>null</apiData><apiDesc>
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      弹出 Alert 控件的静态方法。在 Alert 控件中选择一个按钮或按下 Esc 键时，将关闭该控件。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CloseEvent"><linktext>mx.events.CloseEvent</linktext></link></related-links></apiOperation><apiValue id="mx.controls:Alert:CANCEL"><apiName>CANCEL</apiName><shortdesc>
      作为 show() 方法的 flags 参数传递时，在 Alert 控件上启用“取消”按钮的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0008</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      作为 <codeph>show()</codeph> 方法的 <codeph>flags</codeph> 参数传递时，在 Alert 控件上启用“取消”按钮的值。您可以使用 | 运算符将此位标志与 <codeph>OK</codeph>、<codeph>YES</codeph>、<codeph>NO</codeph> 和 <codeph>NONMODAL</codeph> 标志结合使用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:NO"><apiName>NO</apiName><shortdesc>
      作为 show() 方法的 flags 参数传递时，在 Alert 控件上启用“否”按钮的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0002</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      作为 <codeph>show()</codeph> 方法的 <codeph>flags</codeph> 参数传递时，在 Alert 控件上启用“否”按钮的值。您可以使用 | 运算符将此位标志与 <codeph>OK</codeph>、<codeph>CANCEL</codeph>、<codeph>YES</codeph> 和 <codeph>NONMODAL</codeph> 标志结合使用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:NONMODAL"><apiName>NONMODAL</apiName><shortdesc>
      作为 show() 方法的 flags 参数传递时，使 Alert 成为非模式控件的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x8000</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      作为 <codeph>show()</codeph> 方法的 <codeph>flags</codeph> 参数传递时，使 Alert 成为非模式控件的值。您可以使用 | 运算符将此位标志与 <codeph>OK</codeph>、<codeph>CANCEL</codeph>、<codeph>YES</codeph> 和 <codeph>NO</codeph> 标志结合使用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:OK"><apiName>OK</apiName><shortdesc>
      作为 show() 方法的 flags 参数传递时，在 Alert 控件上启用“确定”按钮的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0004</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      作为 <codeph>show()</codeph> 方法的 <codeph>flags</codeph> 参数传递时，在 Alert 控件上启用“确定”按钮的值。您可以使用 | 运算符将此位标志与 <codeph>CANCEL</codeph>、<codeph>YES</codeph>、<codeph>NO</codeph> 和 <codeph>NONMODAL</codeph> 标志结合使用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:YES"><apiName>YES</apiName><shortdesc>
      作为 show() 方法的 flags 参数传递时，在 Alert 控件上启用“是”按钮的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0001</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      作为 <codeph>show()</codeph> 方法的 <codeph>flags</codeph> 参数传递时，在 Alert 控件上启用“是”按钮的值。您可以使用 | 运算符将此位标志与 <codeph>OK</codeph>、<codeph>CANCEL</codeph>、<codeph>NO</codeph> 和 <codeph>NONMODAL</codeph> 标志结合使用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:buttonFlags"><apiName>buttonFlags</apiName><shortdesc>
      包含 Alert.OK、Alert.CANCEL、Alert.YES 和/或 Alert.NO（它们指示在 Alert 控件中可用的按钮）的位掩码。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0x0004</apiData><apiType value="uint"/><apiDefaultValue>Alert.OK
      
      </apiDefaultValue></apiValueDef><apiDesc>
      包含 <codeph>Alert.OK</codeph>、<codeph>Alert.CANCEL</codeph>、<codeph>Alert.YES</codeph> 和/或 <codeph>Alert.NO</codeph>（它们指示在 Alert 控件中可用的按钮）的位掩码。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:buttonHeight"><apiName>buttonHeight</apiName><shortdesc>
      每个 Alert 按钮的高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>22</apiData><apiType value="Number"/><apiDefaultValue>22
      
      </apiDefaultValue></apiValueDef><apiDesc>
      每个 Alert 按钮的高度（以像素为单位）。所有按钮的高度必须相同。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:buttonWidth"><apiName>buttonWidth</apiName><shortdesc>
      每个 Alert 按钮的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>65</apiData><apiType value="Number"/><apiDefaultValue>60
      
      </apiDefaultValue></apiValueDef><apiDesc>
      每个 Alert 按钮的宽度（以像素为单位）。所有按钮的宽度必须相同。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:defaultButtonFlag"><apiName>defaultButtonFlag</apiName><shortdesc>
      包含 Alert.OK、Alert.CANCEL、Alert.YES 或 Alert.NO 的位标志，用于指定默认按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0x0004</apiData><apiType value="uint"/><apiDefaultValue>Alert.OK
      
      </apiDefaultValue></apiValueDef><apiDesc>
      包含 <codeph>Alert.OK</codeph>、<codeph>Alert.CANCEL</codeph>、<codeph>Alert.YES</codeph> 或 <codeph>Alert.NO</codeph> 的位标志，用于指定默认按钮。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:iconClass"><apiName>iconClass</apiName><shortdesc>
      要显示的图标的类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Class"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要显示的图标的类。您通常嵌入资源（如 JPEG 或 GIF 文件），然后使用与嵌入资源关联的变量指定此属性的值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:text"><apiName>text</apiName><shortdesc>
      要在此警告对话框中显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要在此警告对话框中显示的文本。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:cancelLabel:get"><apiName>cancelLabel</apiName><shortdesc>
      “取消”按钮的标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      “取消”按钮的标签。
     
      <p>如果您使用其它标签，则可能需要调整 <codeph>buttonWidth</codeph> 属性以显示其完整内容。</p>
     
      English 资源包将此属性设置为“CANCEL”。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:noLabel:get"><apiName>noLabel</apiName><shortdesc>
      “否”按钮的标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      “否”按钮的标签。
     
      <p>如果您使用其它标签，则可能需要调整 <codeph>buttonWidth</codeph> 属性以显示其完整内容。</p>
     
      English 资源包将此属性设置为“NO”。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:okLabel:get"><apiName>okLabel</apiName><shortdesc>
      “确定”按钮的标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      “确定”按钮的标签。
     
      <p>如果您使用其它标签，则可能需要调整 <codeph>buttonWidth</codeph> 属性以显示其完整内容。</p>
     
      English 资源包将此属性设置为“OK”。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Alert:yesLabel:get"><apiName>yesLabel</apiName><shortdesc>
      “是”按钮的标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      “是”按钮的标签。
     
      <p>如果您使用其它标签，则可能需要调整 <codeph>buttonWidth</codeph> 属性以显示其完整内容。</p>
     
      English 资源包将此属性设置为“YES”。 
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:IFlexContextMenu"><apiName>IFlexContextMenu</apiName><shortdesc>
  IFlexContextMenu 接口定义 Flex 上下文菜单的接口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
  IFlexContextMenu 接口定义 Flex 上下文菜单的接口。  
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent/flexContextMenu"><linktext>mx.core.UIComponent.flexContextMenu</linktext></link></related-links><apiOperation id="mx.controls:IFlexContextMenu:mx.controls:IFlexContextMenu:setContextMenu"><apiName>setContextMenu</apiName><shortdesc>
      设置 InteractiveObject 的上下文菜单。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>component</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>要设置上下文菜单的 InteractiveObject
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置 InteractiveObject 的上下文菜单。这样将执行所有必要的步骤，将 InteractiveObject 添加作此 InteractiveObject 的上下文菜单，如添加侦听器等。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:IFlexContextMenu:mx.controls:IFlexContextMenu:unsetContextMenu"><apiName>unsetContextMenu</apiName><shortdesc>
      取消对 InteractiveObject 上下文菜单的设置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>component</apiItemName><apiType value="flash.display:InteractiveObject"/><apiDesc>要取消其上下文菜单设置的 InteractiveObject
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      取消对 InteractiveObject 上下文菜单的设置。这样将执行所有必要的步骤，删除作为此 InteractiveObject 的上下文菜单的 InteractiveObject，如删除侦听器等。
     
      </apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="mx.controls:ProgressBar"><apiName>ProgressBar</apiName><shortdesc>
  ProgressBar 控件为随时间而变的任务进度提供了形象化的表示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><effects><effect event="complete" name="completeEffect" owner="mx.controls:ProgressBar">
<description>
  当 Flex 分派 <codeph>complete</codeph> 事件（加载完成时发生）时调用的效果。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style format="Length" inherit="yes" name="labelWidth" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  标签的宽度（以像素为单位）。如果值为 NaN，则 ProgressBar 控件会将其设为控件的宽度。
 
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="trackHeight" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  轨道的高度（以像素为单位）。如果值为 NaN，则使用由 <codeph>trackSkin</codeph> 属性指定的外观高度。 
  
  </description>
<default>NaN
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="trackColors" owner="mx.controls:ProgressBar" playerVersion="Flash9" theme="halo" type="Array">
<description>
  轨道的颜色（由两种颜色组成的数组）。您可以使用同一种颜色两次，以实现纯色轨道。
 
  </description>
<default>[ 0xE6EEEE, 0xE6EEEE ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="themeColor" owner="mx.controls:ProgressBar" playerVersion="Flash9" theme="halo" type="uint">
<description>
  ProgressBar 控件的主题颜色。可能值为 haloGreen、haloBlue 和 haloOrange。Adobe 建议在 <codeph>&lt;mx:Application></codeph> 标签中设置 <codeph>themeColor</codeph> 样式，而不是在各个控件中进行设置。 
 
  </description>
<default>"haloBlue"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="trackSkin" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Class">
<description>
  进度指示符轨道的外观样式。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="maskSkin" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Class">
<description>
  确定的和不确定的栏的蒙版外观样式。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="indeterminateSkin" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Class">
<description>
  不确定进度栏的外观样式。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="indeterminateMoveInterval" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  在每个不确定循环中，不确定进度栏要移动的像素数目。进度栏移动指定的像素数目之后，将重新定位到其起点。值为 0 表示没有移动进度栏。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:ProgressBar" playerVersion="Flash9" theme="halo" type="uint">
<description>
  三维边框的黑色部分或二维边框的彩色部分。
  </description>
<default>0xB7BABC
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="barSkin" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Class">
<description>
  确定进度栏的外观样式。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:ProgressBar" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:ProgressBar" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:ProgressBar" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  垂直方向上各子项间的像素数目。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 6。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:ProgressBar" playerVersion="Flash9" type="Number">
<description>
  水平方向上各子项间的像素数目。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 8。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="barColor" owner="mx.controls:ProgressBar" playerVersion="Flash9" theme="halo" type="uint">
<description>
  确定 ProgressBar 的颜色。将使用此颜色与较明亮的颜色（基于此颜色计算得出）之间的垂直渐变填充 ProgressBar。此样式对其它组件不起作用，但可对某个容器设置此样式，以控制其中所有进度栏的外观。默认值为 <codeph>undefined</codeph>，即不进行设置。此时，将使用 <codeph>themeColor</codeph> 样式属性。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ProgressBar&gt;</code> tag inherits all of the tag attributes 
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:ProgressBar
    <strong>Properties</strong>
    conversion="1"
    direction="right|left"
    indeterminate="false|true"
    label="<i>No default</i>"
    labelPlacement="bottom|top|left|right|center"
    maximum="0"
    minimum="0"
    mode="event|polled|manual"
    source="<i>No default</i>"
  
    <strong>Styles</strong>
    barColor="undefined"
    barSkin="ProgressBarSkin"
    borderColor="0xAAB3B3"
    color="0x0B333C"
    disabledColor="0xAAB3B3"
    fontAntiAliasType="advanced"
    fontFamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0"
    fontSize="10"
    fontThickness="0"
    fontStyle="normal|italic"
    fontWeight="normal|bold"
    horizontalGap="8"
    indeterminateMoveInterval="26"
    indeterminateSkin="ProgressIndeterminateSkin"
    labelWidth="Computed"
    leading="0"
    maskSkin="ProgressMaskSkin"
    paddingLeft="0"
    paddingRight="0"
    textAlign="left|right|center"
    textDecoration="none|underline"
    textIndent="0"
    themeColor="haloGreen|haloBlue|haloOrange"
    trackColors="[0xE6EEEE,0xE6EEEE]"
    trackHeight="Calculated"
    trackSkin="ProgressTrackSkin"
    verticalGap="6"
  
    <strong>Events</strong>
    complete="<i>No default</i>"
    hide="<i>No default</i>"
    progress="<i>No default</i>"
    show="<i>No default</i>"
  
    <strong>Effects</strong>
    completeEffect="<i>No default</i>"
  /&gt;
  </pre>
  </p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ProgressBar 控件为随时间而变的任务进度提供了形象化的表示。ProgressBar 控件分为确定的和不确定的两种类型。
 
  <p>确定 ProgressBar 控件是随时间而变的任务进度的线性表示。在任务范围已知的情况下可使用确定 ProgressBar。当用户必须多等待一段时间时，将显示此控件。</p>
 
  <p>不确定的 ProgressBar 控件给出任务范围未知时基于时间的进度。一旦能够确定范围，就应使用确定 ProgressBar 控件。</p>
 
  <p>ProgressBar 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>150 个像素宽 × 4 个像素高</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>未定义</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleProgressBar.mxml"><swfblock conref="examples/SimpleProgressBar.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#ProgressBarDirection"><linktext>mx.controls.ProgressBarDirection</linktext></link><link href="mx.controls.xml#ProgressBarLabelPlacement"><linktext>mx.controls.ProgressBarLabelPlacement</linktext></link><link href="mx.controls.xml#ProgressBarMode"><linktext>mx.controls.ProgressBarMode</linktext></link></related-links><adobeApiEvent id="mx.controls:ProgressBar_mx.events.FlexEvent.SHOW_show"><apiName>show</apiName><shortdesc>
  当组件可见时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.SHOW</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当组件可见时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ProgressBar_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  在事件模式或轮询模式中加载内容时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在事件模式或轮询模式中加载内容时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ProgressBar_mx.events.FlexEvent.HIDE_hide"><apiName>hide</apiName><shortdesc>
  当对象的状态从可见变为不可见时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.HIDE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当对象的状态从可见变为不可见时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ProgressBar_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  在加载完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在加载完成时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:ProgressBar:ProgressBar"><apiName>ProgressBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:ProgressBar:setProgress"><apiName>setProgress</apiName><shortdesc>
      设置进度栏的状态，以反映在使用手动模式时完成的进度量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiDesc>当前值。
     
      </apiDesc></apiParam><apiParam><apiItemName>total</apiItemName><apiType value="Number"/><apiDesc>总计值或目标值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置进度栏的状态，以反映在使用手动模式时完成的进度量。将 <codeph>value</codeph> 参数分配给 <codeph>value</codeph> 属性，将 <codeph>maximum</codeph> 参数分配给 <codeph>maximum</codeph> 属性。<codeph>minimum</codeph> 属性不变。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:ProgressBar:conversion:get"><apiName>conversion</apiName><shortdesc>
      一个数值，用于转换当前所加载的传入字节的值和所加载字节总值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个数值，用于转换当前所加载的传入字节的值和所加载字节总值。Flex 使用当前值和总计值除以此属性，然后使用小于或等于标签字符串中每个值的最接近的整数。如果值为 1，则不进行转换。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:direction:get"><apiName>direction</apiName><shortdesc>
      ProgressBar 填充在逐步完成过程中扩展的方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ProgressBarDirection.RIGHT
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ProgressBar 填充在逐步完成过程中扩展的方向。在 MXML 中，有效值为 <codeph>"right"</codeph> 和 <codeph>"left"</codeph>。
     
      <p>在 ActionScript 中，可以使用以下常量来设置此属性：<codeph>ProgressBarDirection.RIGHT</codeph> 和 <codeph>ProgressBarDirection.LEFT</codeph>。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#ProgressBarDirection"><linktext>mx.controls.ProgressBarDirection</linktext></link></related-links></apiValue><apiValue id="mx.controls:ProgressBar:indeterminate:get"><apiName>indeterminate</apiName><shortdesc>
      ProgressBar 控件具有确定外观还是不确定外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ProgressBar 控件具有确定外观还是不确定外观。如果无法确定进度状态，则使用不确定外观。如果为 <codeph>true</codeph>，则外观是不确定的。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:label:get"><apiName>label</apiName><shortdesc>
      随进度栏显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"LOADING %3%%"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      随进度栏显示的文本。文本字符串中可以包含下列特殊字符：
     
      <ul>
        <li>%1 = 当前加载的字节数</li>
        <li>%2 = 总字节数</li>
        <li>%3 = 已加载的百分比数</li>
        <li>%% =“%”字符</li>
      </ul>
     
      <p>如果某个域未知，则用“??”替换。如果尚未定义，则不显示此标签。</p>
      
      <p>如果处于手动模式，则可以使用 <codeph>setProgress()</codeph> 方法设置这些特殊字符的值。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:labelPlacement:get"><apiName>labelPlacement</apiName><shortdesc>
      标签的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ProgressBarLabelPlacement.BOTTOM
      
      </apiDefaultValue></apiValueDef><apiDesc>
      标签的位置。在 MXML 中，有效值为 <codeph>"right"</codeph>、<codeph>"left"</codeph>、<codeph>"bottom"</codeph>、<codeph>"center"</codeph> 和 <codeph>"top"</codeph>。
     
      <p>在 ActionScript 中，可以使用以下常量来设置此属性：<codeph>ProgressBarLabelPlacement.RIGHT</codeph>、<codeph>ProgressBarLabelPlacement.LEFT</codeph>、<codeph>ProgressBarLabelPlacement.BOTTOM</codeph>、<codeph>ProgressBarLabelPlacement.CENTER</codeph> 和 <codeph>ProgressBarLabelPlacement.TOP</codeph>。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#ProgressBarLabelPlacement"><linktext>mx.controls.ProgressBarLabelPlacement</linktext></link></related-links></apiValue><apiValue id="mx.controls:ProgressBar:maximum:get"><apiName>maximum</apiName><shortdesc>
      ProgressBar 的最大进度值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ProgressBar 的最大进度值。只能在手动模式下使用此属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:minimum:get"><apiName>minimum</apiName><shortdesc>
      ProgressBar 的最小进度值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ProgressBar 的最小进度值。开发人员只能在手动模式下设置此属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:mode:get"><apiName>mode</apiName><shortdesc>
      指定用于更新进度栏的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ProgressBarMode.EVENT
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用于更新进度栏的方法。在 MXML 中使用下列值之一：
     
      <ul>
        <li><codeph>event</codeph> 由 <codeph>source</codeph> 属性指定的控件必须分派进度事件和已完成的事件。ProgressBar 控件使用这些事件更新其状态。仅当 <codeph>source</codeph> 属性的值扩展 EventDispatcher 类时，ProgressBar 控件才会更新。</li>
     
        <li><codeph>polled</codeph> <codeph>source</codeph> 属性必须指定一个公开 <codeph>bytesLoaded</codeph> 和 <codeph>bytesTotal</codeph> 属性的对象。ProgressBar 控件调用这些方法更新其状态。</li>
     
        <li><codeph>manual</codeph> 手动更新 ProgressBar 状态。在此模式中，需指定 <codeph>maximum</codeph> 和 <codeph>minimum</codeph> 属性，并使用 <codeph>setProgress()</codeph> 属性方法指定状态。此模式通常在将 <codeph>indeterminate</codeph> 属性设为 <codeph>true</codeph> 时使用。</li>
      </ul>
     
      <p>在 ActionScript 中，可以使用以下常量来设置此属性：<codeph>ProgressBarMode.EVENT</codeph>、<codeph>ProgressBarMode.POLLED</codeph> 和 <codeph>ProgressBarMode.MANUAL</codeph>。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#ProgressBarMode"><linktext>mx.controls.ProgressBarMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:ProgressBar:percentComplete:get"><apiName>percentComplete</apiName><shortdesc>
      已完成进度的百分比。范围是 0 到 100。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      已完成进度的百分比。范围是 0 到 100。使用 <codeph>setProgress()</codeph> 方法可更改此百分比值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:source:get"><apiName>source</apiName><shortdesc>
      指的是 ProgressBar 正在度量其进度的控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      指的是 ProgressBar 正在度量其进度的控件。只能在事件模式和轮询模式下使用此属性。一种典型的用法是将此属性设置为 Loader 控件。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBar:value:get"><apiName>value</apiName><shortdesc>
      包含已完成进度量（介于最小和最大值之间）的只读属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      包含已完成进度量（介于最小和最大值之间）的只读属性。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:Text"><apiName>Text</apiName><shortdesc>
  Text 控件显示不可编辑的多行文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalAlign"/><Exclude kind="style" name="horizontalAlign"/><styles><style format="Length" inherit="yes" name="leading" owner="mx.controls:Text" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Text&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Text
  leading="2"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Label</apiBaseClassifier></apiClassifierDef><apiDesc>
  Text 控件显示不可编辑的多行文本。如果只需一行文本，请使用 Label 控件。
 
  <p>Text 控件不支持滚动条。如果需要进行滚动，则应使用不可编辑的 TextArea 控件。</p>
 
  <p>您可以使用 HTML 标记设置 Text 控件中文本的格式，在应用控件的 CSS 样式后将应用这些标签。您还可以在文本的四周放置填充。</p>
 
  <p>默认情况下，Text 控件中的文本是可选的，但通过将 <codeph>selectable</codeph> 属性设置为 <codeph>false</codeph> 可将 Text 控件中的文本设为不可选。</p>
 
  <p>如果控件宽度小于文本，则文本将 wordwrap。文本在控件中始终为左上角对齐。</p>
 
  <p>通常，通过指定显式宽度并允许 Flex 确定显示所有文本所需的高度来调整 Text 组件的大小。如果指定显式高度，则可能会剪掉某些文本；与 Label 不同，Text 控件不会使用“...”截断其文本。通常，还会对 Text 使用百分比宽度和高度。</p>
 
  <p>如果不指定宽度和高度，Flex 将基于文本中的任何显式换行符来计算它们，行中没有自动换行。例如，如果设置 <codeph>text</codeph> 属性，则换行符 <codeph>"\n"</codeph> 将生成一个换行符。如果设置 <codeph>htmlText</codeph> 属性，则 HTML 标签 <codeph>&lt;br></codeph> 将生成一个换行符。如果 <codeph>text</codeph> 或 <codeph>htmlText</codeph> 很长但不包含换行符，会得到一个非常宽的 Text 组件；可以设置 <codeph>maxWidth</codeph> 以限制允许组件增加到的宽度。</p>
 
  <p>Text 控件没有背景或边框，并且无法获得焦点。</p>
 
  <p>Text 控件具有下列默认的大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>Flex 调整控件大小使其适合文本：宽度要足以适合文本的最长行，高度要足以适合行数。如果未指定像素宽度，则高度将由文本字符串中显式换行符的数目确定。如果文本长度发生更改，控件将调整大小以适合新文本。</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素。</entry>
        </row><row>
           <entry>ChMaximum sizear03</entry>
           <entry>10000 × 10000 个像素</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TextExample.mxml"><swfblock conref="examples/TextExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Label"><linktext>mx.controls.Label</linktext></link><link href="mx.controls.xml#TextInput"><linktext>mx.controls.TextInput</linktext></link><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link><link href="mx.controls.xml#RichTextEditor"><linktext>mx.controls.RichTextEditor</linktext></link></related-links><apiConstructor id="mx.controls:Text:Text"><apiName>Text</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:ButtonLabelPlacement"><apiName>ButtonLabelPlacement</apiName><shortdesc>
  ButtonLabelPlacement 类为 Button、CheckBox、LinkButton 或 RadioButton 控件 labelPlacement 属性的允许值定义常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonLabelPlacement 类为 Button、CheckBox、LinkButton 或 RadioButton 控件 <codeph>labelPlacement</codeph> 属性的允许值定义常量。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#Button"><linktext>mx.controls.Button</linktext></link><link href="mx.controls.xml#CheckBox"><linktext>mx.controls.CheckBox</linktext></link><link href="mx.controls.xml#LinkButton"><linktext>mx.controls.LinkButton</linktext></link><link href="mx.controls.xml#RadioButton"><linktext>mx.controls.RadioButton</linktext></link></related-links><apiValue id="mx.controls:ButtonLabelPlacement:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
	  指定在图标下方显示标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定在图标下方显示标签。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ButtonLabelPlacement:LEFT"><apiName>LEFT</apiName><shortdesc>
	  指定在图标左侧显示标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定在图标左侧显示标签。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ButtonLabelPlacement:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	  指定在图标右侧显示标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定在图标右侧显示标签。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ButtonLabelPlacement:TOP"><apiName>TOP</apiName><shortdesc>
	  指定在图标上方显示标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定在图标上方显示标签。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:CheckBox"><apiName>CheckBox</apiName><shortdesc>
  CheckBox 控件包含一个可选标签和一个小方框，该方框内可以包含/不包含复选标记。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="toggle"/><Exclude kind="property" name="emphasized"/><Alternative owner="mx.controls:CheckBox" replacement="spark.components.CheckBox" since="4.0">
	</Alternative><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:CheckBox" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的任何符号的颜色。示例包括 CheckBox 的复选标记或 ScrollBar 按钮的箭头。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:CheckBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  已禁用外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制禁用的 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制禁用的 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制禁用的 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x999999</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:CheckBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  某个外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x111111</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:CheckBox&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:CheckBox
    <strong>Styles</strong>
    disabledIconColor="0x999999"
    iconColor="0x2B333C"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IToggleButton</apiBaseInterface><apiBaseClassifier>mx.controls:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  CheckBox 控件包含一个可选标签和一个小方框，该方框内可以包含/不包含选中标记。可以将可选文本标签放在 CheckBox 的左侧、右侧、顶部或底部。当用户单击 CheckBox 控件或其相关文本时，CheckBox 控件的状态将从选中更改为未选中，或者从未选中更改为选中。CheckBox 控件包含一组非相互排斥的 true 或 false 值。
 
  <p>CheckBox 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>大小足以容纳标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>无限制</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="CheckBoxExample.mxml"><swfblock conref="examples/CheckBoxExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.controls:CheckBox:CheckBox"><apiName>CheckBox</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:Button"><apiName>Button</apiName><shortdesc>
  Button 控件是常用的矩形按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:Button" replacement="spark.components.Button" since="4.0">
	</Alternative><styles><style inherit="no" name="selectedDisabledIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当选择了按钮而按钮已被禁用时的图标。
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedDownIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当选择了按钮且按下了鼠标按键时的图标。
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedOverIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当选择了按钮且鼠标光标停在控件位置时的图标。
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedUpIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当选择了按钮且松开了鼠标按键时的图标。
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当禁用了按钮且未选择按钮时的图标。
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当未选择按钮而按下了鼠标按键时的图标。
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="overIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当未选择按钮且鼠标光标停在控件位置时的图标。
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upIcon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当未选择切换按钮且鼠标光标不在按钮上方时的图标。
 
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="icon" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  用作默认图标的类的名称。设置任何其它图标样式将覆盖此设置。
  
  </description>
<default>null 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedDisabledSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当选择了切换按钮而切换按钮已被禁用时背景和边框的外观。
 
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedDownSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当选择了切换按钮且按下了鼠标按键时背景和边框的外观。
  
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedOverSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当选择了切换按钮且鼠标光标停在控件位置时背景和边框的外观。
  
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedUpSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当选择了切换按钮且鼠标光标未停在控件位置时背景和边框的外观。
 
  </description>
<default>"mx.skins.halo.ButtonSkin" 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="emphasizedSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当按钮为 <codeph>emphasized</codeph> 时按钮的外观（例如，作为容器的默认按钮时）。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当未选择按钮且按钮已被禁用时背景和边框的外观。
 
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当未选择按钮而按下了鼠标按键时背景和边框的外观。
  
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="overSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当未选择按钮且鼠标光标停在控件位置时背景和边框的外观。
  
  </description>
<default>"mx.skins.halo.ButtonSkin" 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upSkin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当未选择按钮且鼠标光标未停在控件位置时背景和边框的外观。
  
  </description>
<default>"mx.skins.halo.ButtonSkin"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="skin" owner="mx.controls:Button" playerVersion="Flash9" type="Class">
<description>
  用作背景和边框默认外观的类的名称。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph> 时，按钮的标签和图标之间的间隙。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:Button" playerVersion="Flash9" type="uint">
<description>
  当用户按下标签时，标签的文本颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:Button" playerVersion="Flash9" type="uint">
<description>
  当用户将鼠标指针移动到按钮位置时，标签的文本颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatInterval" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  用户在按钮上按住鼠标时，<codeph>buttonDown</codeph> 事件之间相隔的毫秒数。
  
  </description>
<default>35
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  在第一个 <codeph>buttonDown</codeph> 事件之后，以及相隔每个 <codeph>repeatInterval</codeph> 重复一次 <codeph>buttonDown</codeph> 事件之前，需要等待的毫秒数。
 
  </description>
<default>500
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  组件上边框与内容区域顶部之间的像素数目。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  组件下边框与内容区域底部之间的像素数目。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="labelVerticalOffset" owner="mx.controls:Button" playerVersion="Flash10" type="Number">
<description>
  要应用到标签位置的垂直偏移量的像素数目。正数会将标签向下移动。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>left</codeph> 或 <codeph>right</codeph> 时，标签和图标之间的间隙。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.controls:Button" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件对焦时，对焦环的颜色
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="accentColor" owner="mx.controls:Button" playerVersion="Flash10" theme="spark" type="uint">
<description>
   
 
  </description>
<default>#0099FF
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:Button" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:Button" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:Button" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:Button" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:Button" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:Button" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.controls:Button" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Alpha 透明度，用于加亮填充控件。第一个值指定加亮部分顶部的透明度，第二个值指定加亮部分底部的透明度。加亮部分覆盖了外观的上半部分。
  
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.controls:Button" playerVersion="Flash9" theme="halo" type="Array">
<description>
  为控件背景着色所使用的颜色。对具有均匀外观控件的两个值传递相同的颜色。
  
  </description>
<default>[ 0xFFFFFF, 0xCCCCCC ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.controls:Button" playerVersion="Flash9" theme="halo" type="Array">
<description>
  用于填充控件背景的 Alpha。使用 [1, 1] 可使控件背景不透明。
  
  </description>
<default>[ 0.6, 0.4 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:Button" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  组件角的半径。下列组件支持此样式：Alert、Button、ComboBox、LinkButton、MenuBar、NumericStepper、Panel、ScrollBar、Tab、TitleWindow 以及任何支持设置为 <codeph>"solid"</codeph> 的 <codeph>borderStyle</codeph> 属性的组件。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:Button" playerVersion="Flash9" theme="halo" type="uint">
<description>
  边框颜色。下列控件支持此样式：Button、CheckBox、ComboBox、MenuBar、NumericStepper、ProgressBar、RadioButton、ScrollBar、Slider 以及任何支持 <codeph>borderStyle</codeph> 样式的组件。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 <codeph>0xB7BABC</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:Button" playerVersion="Flash9" type="String">
<description>
  指定焦点矩形的哪些角应该是圆角。此值是使用空格分隔的 String，该 String 可以是 <codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> 和 <codeph>"br"</codeph> 的任意组合。例如，要指定右侧的角为圆角，左侧的角为直角，应使用 <codeph>"tr br"</codeph>。<codeph>cornerRadius</codeph> 样式属性指定圆角的半径。默认值取决于组件类；如果未覆盖该类的默认值，则默认值为 <codeph>"tl tr bl br"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:Button" playerVersion="Flash9" type="Number">
<description>
  指定焦点外观的 alpha 透明度值。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Button&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Button
    <b>Properties</b>
    autoRepeat="false|true"
    emphasized="false|true"
    fontContext="<i>IFontModuleFactory</i>"
    label=""
    labelPlacement="right|left|bottom|top"
    selected="false|true"
    selectedField="null"
    stickyHighlighting="false|true"
    toggle="false|true"
 
    <b>Styles</b>
    borderColor="0xAAB3B3"
    color="0x0B333C"
    cornerRadius="4"
    disabledColor="0xAAB3B3"
    disabledIcon="null"
    disabledSkin="mx.skins.halo.ButtonSkin"
    downIcon="null"
    downSkin="mx.skins.halo.ButtonSkin"
    fillAlphas="[0.6, 0.4]"
    fillColors="[0xE6EEEE, 0xFFFFFF]"
    focusAlpha="0.5"
    focusRoundedCorners"tl tr bl br"
    fontAntiAliasType="advanced"
    fontFamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="bold|normal"
    highlightAlphas="[0.3, 0.0]"
    horizontalGap="2"
    icon="null"
    kerning="false|true"
    leading="2"
    letterSpacing="0"
    overIcon="null"
    overSkin="mx.skins.halo.ButtonSkin"
    paddingBottom="2"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="2"
    repeatDelay="500"
    repeatInterval="35"
    selectedDisabledIcon="null"
    selectedDisabledSkin="mx.skins.halo.ButtonSkin"
    selectedDownIcon="null"
    selectedDownSkin="mx.skins.halo.ButtonSkin"
    selectedOverIcon="null"
    selectedOverSkin="mx.skins.halo.ButtonSkin"
    selectedUpIcon="null"
    selectedUpSkin="mx.skins.halo.ButtonSkin"
    skin="mx.skins.halo.ButtonSkin"
    textAlign="center|left|right"
    textDecoration="none|underline"
    textIndent="0"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x000000"
    upIcon="null"
    upSkin="mx.skins.halo.ButtonSkin"
    verticalGap="2"
 
    <b>Events</b>
    buttonDown="<i>No default</i>"
    change="<i>No default</i>"
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseInterface>mx.core:IButton</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Button 控件是常用的矩形按钮。Button 控件看起来似乎可以按压。控件表面可以包含文本标签和（或）图标。
 
  <p>当用户选择 Button 控件时，该控件通常使用事件侦听器来执行操作。当用户在 Button 控件上单击鼠标时，就会启用 Button 控件，此控件分派 <codeph>click</codeph> 事件和 <codeph>buttonDown</codeph> 事件。无论按钮是处于启用状态还是禁用状态，总是会分派 <codeph>mouseMove</codeph>、<codeph>mouseOver</codeph>、<codeph>mouseOut</codeph>、<codeph>rollOver</codeph>、<codeph>rollOut</codeph>、<codeph>mouseDown</codeph> 和 <codeph>mouseUp</codeph> 等事件。</p>
 
  <p>您可以自定义 Button 控件的外观，并将其功能从按压按钮更改为切换按钮。您可以通过对按钮的各个状态使用同一外观来更改按钮外观。</p>
 
  <p>Button 控件的标签使用粗体。若要嵌入某种字体，希望将其用于 Button 控件的标签，则必须嵌入粗体；例如：</p>
 
  <pre>
  &lt;mx:style>
    @font-face {
      src:url("../MyFont-Bold.ttf");        
      fontFamily: myFont;
      fontWeight: bold;
    }
   .myBoldStyle {
      fontFamily: myFont;
      fontWeight: bold;
    } 
  &lt;/mx:style>
  ...
  &lt;mx:Button ... styleName="myBoldStyle"/>
  </pre>
  
  <p>Button 控件具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row><entry>默认大小</entry><entry>此大小足以包含标签文本及任何图标</entry></row><row><entry>最小大小</entry><entry>0 个像素</entry></row><row><entry>最大大小</entry><entry>无限制</entry></row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonExample.mxml"><swfblock conref="examples/ButtonExample.swf"/></example></apiClassifierDetail><adobeApiEvent id="mx.controls:Button_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Button_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  当切换 Button 控件的 selected 属性发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当切换 Button 控件的 <codeph>selected</codeph> 属性发生更改时分派。切换 Button 控件需要将 <codeph>toggle</codeph> 属性设置为 <codeph>true</codeph>。对于 RadioButton 控件，当 <codeph>selected</codeph> 属性发生更改时分派此事件。对于 CheckBox 控件，仅当用户使用鼠标与控件进行交互时分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Button_mx.events.FlexEvent.BUTTON_DOWN_buttonDown"><apiName>buttonDown</apiName><shortdesc>
  当用户按压 Button 控件时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.BUTTON_DOWN</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户按压 Button 控件时分派。如果 <codeph>autoRepeat</codeph> 属性为 <codeph>true</codeph>，则只要按钮处于按下状态，就将重复分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:Button:Button"><apiName>Button</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:Button:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      MouseEvent.CLICK 事件的默认处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>MouseEvent.CLICK</codeph> 事件的默认处理函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Button:protected:mouseDownHandler"><apiName>mouseDownHandler</apiName><shortdesc>
      MouseEvent.MOUSE_DOWN 事件的默认处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>MouseEvent.MOUSE_DOWN</codeph> 事件的默认处理函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Button:protected:mouseUpHandler"><apiName>mouseUpHandler</apiName><shortdesc>
      MouseEvent.MOUSE_UP 事件的默认处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>MouseEvent.MOUSE_UP</codeph> 事件的默认处理函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Button:protected:rollOutHandler"><apiName>rollOutHandler</apiName><shortdesc>
      MouseEvent.ROLL_OUT 事件的默认处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>MouseEvent.ROLL_OUT</codeph> 事件的默认处理函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Button:protected:rollOverHandler"><apiName>rollOverHandler</apiName><shortdesc>
      MouseEvent.ROLL_OVER 事件的默认处理函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>MouseEvent.ROLL_OVER</codeph> 事件的默认处理函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:Button:protected:icons"><apiName>icons</apiName><shortdesc>
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/></apiValueDef><apiDesc>
	  
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:selectedField"><apiName>selectedField</apiName><shortdesc>
      data 属性中用于为 Button 控件的 selected 属性指定值的字段的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>data</codeph> 属性中用于为 Button 控件的 <codeph>selected</codeph> 属性指定值的字段的名称。在项呈示器中使用 Button 控件时即可设置此属性。默认值为 null，这意味着 Button 控件不是基于 <codeph>data</codeph> 属性中的属性设置其选择状态。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:stickyHighlighting"><apiName>stickyHighlighting</apiName><shortdesc>
      如果为 false，则 Button 会在用户按下它时显示其按下时的外观，但在用户将鼠标拖离它时将改为显示整体外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>false</codeph>，则 Button 会在用户按下它时显示其按下时的外观，但在用户将鼠标拖离它时将改为显示整体外观。如果为 <codeph>true</codeph>，则 Button 会在用户按下它时显示其按下时的外观，并在用户将鼠标拖离时继续显示此外观。
     
      <p>Button 子类（如 SliderThumb 和 ScrollThumb 类或 ScrollBar 的向上和向下箭头）将此属性设置为 <codeph>true</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:protected:textField"><apiName>textField</apiName><shortdesc>
      呈示此 Button 的标签的内部 UITextField 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier><apiDefaultValue>null 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      呈示此 Button 的标签的内部 UITextField 对象。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:autoRepeat:get"><apiName>autoRepeat</apiName><shortdesc>
      指定在用户按住鼠标按键时是否重复分派 buttonDown 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定在用户按住鼠标按键时是否重复分派 <codeph>buttonDown</codeph> 事件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:data:get"><apiName>data</apiName><shortdesc>
      当您将某个组件用作项呈示器或项目编辑器时，可借助 data 属性向该组件传递值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      当您将某个组件用作项呈示器或项目编辑器时，可借助 <codeph>data</codeph> 属性向该组件传递值。您通常使用数据绑定将 <codeph>data</codeph> 属性的字段绑定到此组件的某个属性。
     
      <p>当您使用此控件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 会自动将此项目的当前值写入此控件的 <codeph>selected</codeph> 属性。</p>
     
      <p>不要以 MXML 方式设置此属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:Button:emphasized:get"><apiName>emphasized</apiName><shortdesc>
      当 Button 控件处于弹起状态并且 emphasized 设置为 true 时，在该控件周围绘制宽边框。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      当 Button 控件处于弹起状态并且 <codeph>emphasized</codeph> 设置为 <codeph>true</codeph> 时，在该控件周围绘制宽边框。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      
      为此组件提供字体上下文的模块工厂。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      
      为此组件提供字体上下文的模块工厂。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:label:get"><apiName>label</apiName><shortdesc>
      要在 Button 控件上显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      要在 Button 控件上显示的文本。
     
      <p>如果标签宽于 Button 控件，则截断此标签并使用省略号 (...) 终止。当用户将鼠标移至 Button 控件位置时，将显示完整标签作为工具提示。如果您还使用 <codeph>tooltip</codeph> 属性设置了工具提示，则显示工具提示而不是标签文本。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:labelPlacement:get"><apiName>labelPlacement</apiName><shortdesc>
      标签相对于指定图标的方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ButtonLabelPlacement.RIGHT
      
      </apiDefaultValue></apiValueDef><apiDesc>
      标签相对于指定图标的方向。有效的 MXML 值是 <codeph>right</codeph>、<codeph>left</codeph>、<codeph>bottom</codeph> 和 <codeph>top</codeph>。
     
      <p>在 ActionScript 中，您可以使用下列常量来设置此属性：<codeph>ButtonLabelPlacement.RIGHT</codeph>、<codeph>ButtonLabelPlacement.LEFT</codeph>、<codeph>ButtonLabelPlacement.BOTTOM</codeph> 和 <codeph>ButtonLabelPlacement.TOP</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:listData:get"><apiName>listData</apiName><shortdesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 list 控件中的相应数据初始化该组件的 listData 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 list 控件中的相应数据初始化该组件的 <codeph>listData</codeph> 属性。然后，组件可使用 <codeph>listData</codeph> 属性初始化嵌入式项呈示器或嵌入式项目编辑器的 <codeph>data</codeph> 属性。
     
      <p>您无需在 MXML 或 ActionScript 中设置此属性；将组件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 会对其进行设置。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:Button:selected:get"><apiName>selected</apiName><shortdesc>
      指示切换按钮是处于启用状态 (true) 还是禁用状态 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指示切换按钮是处于启用状态 (<codeph>true</codeph>) 还是禁用状态 (<codeph>false</codeph>)。仅在以下情况才能设置此属性：<codeph>toggle</codeph> 属性设置为 <codeph>true</codeph> 时。
     
      <p>对于 CheckBox 控件，指示框中是否显示了选中标记。对于 RadioButton 控件，指示是否已选中该控件。</p>
     
      <p>用户可以通过单击控件来更改此属性，但也可通过编程方式来设置此属性。</p>
     
      <p>在早期版本中，如果将 <codeph>toggle</codeph> 属性设置为 <codeph>true</codeph>，则更改此属性还会分派 <codeph>change</codeph> 事件。从 3.0 版开始，以编程方式设置此属性仅分派 <codeph>valueCommit</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Button:toggle:get"><apiName>toggle</apiName><shortdesc>
      控制 Button 是否处于切换状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控制 Button 是否处于切换状态。如果为 <codeph>true</codeph>，则单击此按钮将在选中状态和未选中状态之间切换。可以通过编程方式获取或设置此状态，方法是使用<codeph>selected</codeph> 属性。如果为 <codeph>false</codeph>，则用户释放按钮后，按钮不再保持按下状态。在这种情况下，它的 <codeph>selected</codeph> 属性始终为 <codeph>false</codeph>。此类按钮均用于执行操作。将 <codeph>toggle</codeph> 设置为 <codeph>false</codeph> 时，会强制将 <codeph>selected</codeph> 设置为 <codeph>false</codeph>，因为只能选择切换按钮。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:Spacer"><apiName>Spacer</apiName><shortdesc>
  Spacer 控件可帮助您布置父容器中的子项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:Spacer&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds no new tag attributes.</p>
  
  <pre>
  &lt;mx:Spacer/&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Spacer 控件可帮助您布置父容器中的子项。虽然 Spacer 控件不会绘制任何内容，但它会在父容器中为其本身分配空间。 
  
  <p>在以下示例中，使用灵活的 Spacer 控件将 Button 控件推到右侧，以便 Button 控件与 HBox 容器的右边对齐：</p>
 
  <pre>
  &lt;mx:HBox>
      &lt;mx:Image source="Logo.jpg"/>
      &lt;mx:Label text="Company XYZ"/>
      &lt;mx:Spacer width="100%"/>
      &lt;mx:Button label="Close"/>
  &lt;/mx:HBox>
  </pre>
 
  </apiDesc><example conref="SpacerExample.mxml"><swfblock conref="examples/SpacerExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.controls:Spacer:Spacer"><apiName>Spacer</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:DateField"><apiName>DateField</apiName><shortdesc>
  DateField 控件是用于显示日期的文本字段，字段右侧带有日历图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="editableDisabledSkin"/><Exclude kind="style" name="editableDownSkin"/><Exclude kind="style" name="editableOverSkin"/><Exclude kind="style" name="editableUpSkin"/><Exclude kind="style" name="borderThickness"/><Exclude kind="property" name="selectedItem"/><Exclude kind="property" name="selectedIndex"/><styles><style format="Color" inherit="yes" name="todayColor" owner="mx.controls:DateField" playerVersion="Flash9" theme="halo" type="uint">
<description>
  DateChooser 控件中当前日期的加亮颜色。默认值为 <codeph>0x2B333</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="skin" owner="mx.controls:DateField" playerVersion="Flash9" type="Class">
<description>
  用作背景和边框默认外观的类的名称。对于 DateField 类，没有默认值。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:DateField" playerVersion="Flash9" type="uint">
<description>
  DateChooser 控件中当前选定日期的加亮区域的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:DateField" playerVersion="Flash9" type="uint">
<description>
  当用户在 DateChooser 控件中的某一日期上方按住鼠标时，该日期的加亮区域的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dateChooserStyleName" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  用于 DateChooser 控件的下拉列表样式的 CSS 样式声明名称。默认情况下，DateChooser 控件将使用 DateField 控件的可继承样式。 
  
  <p>您可以使用此类选择器设置 DateChooser 类的所有样式属性值，包括 <codeph>cornerRadius</codeph>、<codeph>fillAlphas</codeph>、<codeph>fillColors</codeph>、<codeph>headerColors</codeph>、<codeph>headerStyleName</codeph>、<codeph>highlightAlphas</codeph>、<codeph>todayStyleName</codeph> 和 <codeph>weekdayStyleName</codeph>。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:DateField" playerVersion="Flash9" theme="halo" type="Number">
<description>
  DateChooser 控件的边框的粗细。默认值为 1。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:DateField" playerVersion="Flash9" theme="halo" type="uint">
<description>
  边框颜色。下列控件支持此样式：Button、CheckBox、ComboBox、MenuBar、NumericStepper、ProgressBar、RadioButton、ScrollBar、Slider 以及任何支持 <codeph>borderStyle</codeph> 样式的组件。<codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:DateField" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:DateField" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:DateField" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:DateField" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:DateField" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:DateField" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:DateField" playerVersion="Flash9" theme="halo" type="uint">
<description>
  已禁用外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制禁用的 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制禁用的 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制禁用的 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x999999</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:DateField" playerVersion="Flash9" theme="halo" type="uint">
<description>
  某个外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x111111</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:DateField" playerVersion="Flash9" type="String">
<description>
  指定焦点矩形的哪些角应该是圆角。此值是使用空格分隔的 String，该 String 可以是 <codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> 和 <codeph>"br"</codeph> 的任意组合。例如，要指定右侧的角为圆角，左侧的角为直角，应使用 <codeph>"tr br"</codeph>。<codeph>cornerRadius</codeph> 样式属性指定圆角的半径。默认值取决于组件类；如果未覆盖该类的默认值，则默认值为 <codeph>"tl tr bl br"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:DateField" playerVersion="Flash9" type="Number">
<description>
  指定焦点外观的 alpha 透明度值。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:DateField&gt</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:DateField
    <strong>Properties</strong>
    dayNames="["S", "M", "T", "W", "T", "F", "S"]"
    disabledDays="<i>No default</i>"
    disabledRanges="<i>No default</i>"
    displayedMonth="<i>Current month</i>"
    displayedYear="<i>Current year</i>"
    dropdownFactory="<i>ClassFactory that creates an mx.controls.DateChooser</i>"
    firstDayOfWeek="0"
    formatString="MM/DD/YYYY"
    labelFunction="<i>Internal formatter</i>"
    maxYear="2100"
    minYear="1900"
    monthNames="["January", "February", "March", "April", "May",
    "June", "July", "August", "September", "October", "November",
    "December"]"
    monthSymbol=""
    parseFunction="<i>Internal parser</i>"
    selectableRange="<i>No default</i>"
    selectedDate="<i>No default</i>"
    showToday="true|false"
    yearNavigationEnabled="false|true"
    yearSymbol=""
  
   <strong>Styles</strong>
    borderColor="0xAAB3B3"
    borderThickness="1"
    color="0x0xB333C"
    dateChooserStyleName="dateFieldPopup"
    disabledColor="0xAAB3B3"
    disabledIconColor="0x999999"
    focusAlpha="0.5"
    focusRoundedCorners="tl tr bl br"
    fontAntiAliasType="advanced"
    fontFamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    iconColor="0x111111"
    leading="2"
    paddingLeft="0"
    paddingRight="0"
    rollOverColor="0xE3FFD6"
    selectionColor="0xB7F39B"
    textAlign="left|right|center"
    textDecoration="none|underline"
    textIndent="0"
    todayColor="0x2B333C"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    close="<i>No default</i>"
    dataChange="<i>No default</i>"
    open="<i>No default</i>"
    scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseClassifier>mx.controls:ComboBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  DateField 控件是用于显示日期的文本字段，字段右侧带有日历图标。当用户在控件边框内的任一位置单击时，将弹出一个 DateChooser 控件，显示当月的所有日期。如果未选择日期，则该文本字段为空白，并且 DateChooser 控件中将显示当前日期的月份。
 
  <p>当 DateChooser 控件处于打开状态时，用户可以在各个月份和年份之间滚动，并选择某个日期。选择日期后，DateChooser 控件关闭，文本字段将显示所选的日期。</p>
 
  <p>如果 DateField 控件的 <codeph>editable</codeph> 属性设置为 <codeph>true</codeph>，用户也可以在文本字段中键入日期。</p>
 
  <p>DateField 具有与其展开的日期选择器的 DateChooser 相同的默认特征（如下所示）。</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>大小足以容纳日历，宽度足以显示日期名称</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>无限制</entry>
        </row></tbody></tgroup></adobetable>
 
 <p>对于折叠的控件，DateField 具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>大小足以容纳格式化的日期和日历图标</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>无限制</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DateFieldExample.mxml"><swfblock conref="examples/DateFieldExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#DateChooser"><linktext>mx.controls.DateChooser</linktext></link></related-links><adobeApiEvent id="mx.controls:DateField_mx.events.DateChooserEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  当月份由于用户交互操作而更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3616
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DateChooserEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.DateChooserEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当月份由于用户交互操作而更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DateField_mx.events.DropdownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  当用户选择字段打开下拉列表时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3614
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.OPEN</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户选择字段打开下拉列表时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DateField_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DateField_mx.events.DropdownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  当选择日期或用户在下拉列表外部单击时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3615
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当选择日期或用户在下拉列表外部单击时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DateField_mx.events.CalendarLayoutChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  当选择或更改日期，且 DateChooser 控件关闭时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3613
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CalendarLayoutChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CalendarLayoutChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当选择或更改日期，且 DateChooser 控件关闭时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:DateField:DateField"><apiName>DateField</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:DateField:close"><apiName>close</apiName><shortdesc>
      关闭 DateChooser 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3621
      
      </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      关闭 DateChooser 控件。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DateField:dateToString"><apiName>dateToString</apiName><shortdesc>
      根据 outputFormat 参数，将 Date 格式化为 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>设置为 String 格式的日期。
     
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Date"/><apiDesc>要设置格式的日期值。
     
      </apiDesc></apiParam><apiParam><apiItemName>outputFormat</apiItemName><apiType value="String"/><apiDesc>用于定义日期格式的字符串。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      根据 <codeph>outputFormat</codeph> 参数，将 Date 格式化为 String。<codeph>outputFormat</codeph> 参数包含可在其中设置 <codeph>value</codeph> 字符串格式的模式。此参数可包含 <codeph>"M"</codeph>,<codeph>"D"</codeph>,<codeph>"Y"</codeph>、分隔符以及标点符号。
     
      </apiDesc><example><pre>var todaysDate:String = DateField.dateToString(new Date(), "MM/DD/YYYY");</pre>
      
      </example></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DateField:open"><apiName>open</apiName><shortdesc>
      打开 DateChooser 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3620
      
      </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      打开 DateChooser 控件。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DateField:stringToDate"><apiName>stringToDate</apiName><shortdesc>
      解析包含日期的字符串对象，并返回一个与此 String 对应的 Date 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>设置为 Date 对象格式的日期。
     
      
      </apiDesc><apiType value="Date"/></apiReturn><apiParam><apiItemName>valueString</apiItemName><apiType value="String"/><apiDesc>要设置格式的日期值。
     
      </apiDesc></apiParam><apiParam><apiItemName>inputFormat</apiItemName><apiType value="String"/><apiDesc>用于定义日期格式的字符串。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      解析包含日期的字符串对象，并返回一个与此 String 对应的 Date 对象。<codeph>inputFormat</codeph> 参数包含可在其中设置 <codeph>valueString</codeph> String 格式的模式。此参数可包含 <codeph>"M"</codeph>,<codeph>"D"</codeph>,<codeph>"Y"</codeph>、分隔符以及标点符号。
     
      <p>此函数不检查 Date 对象的有效性。如果日期、月份或年份的值为 NaN，则此方法将返回 null。</p>
     
      <p>例如：
      <pre>var dob:Date = DateField.stringToDate("06/30/2005", "MM/DD/YYYY");</pre>        
      </p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:DateField:data:get"><apiName>data</apiName><shortdesc>
      当您在项呈示器或项目编辑器中使用某个组件时，可借助 data 属性向该组件传递值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      当您在项呈示器或项目编辑器中使用某个组件时，可借助 <codeph>data</codeph> 属性向该组件传递值。您通常使用数据绑定将 <codeph>data</codeph> 属性的字段绑定到此组件的某个属性。
     
      <p>当您使用此控件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 会自动将项目的当前值写入此控件的 <codeph>selectedDate</codeph> 属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateField:dayNames:get"><apiName>dayNames</apiName><shortdesc>
      DateChooser 控件中的工作日名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3626
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[ "S", "M", "T", "W", "T", "F", "S" ]
      </apiDefaultValue></apiValueDef><apiDesc>
      DateChooser 控件中的工作日名称。设置此属性将更改 DateChooser 控件的日期标签。星期日为第一天（在索引为 0 处）。一周中其余的天按照正常的顺序命名。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:disabledDays:get"><apiName>disabledDays</apiName><shortdesc>
      一周中禁用的日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3627
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      </apiDefaultValue></apiValueDef><apiDesc>
      一周中禁用的日期。每月中除指定日期外，所有日期都被禁用。此属性可立即更改 DateChooser 控件的用户界面。此 Array 中的元素可使用介于 0（星期日）和 6（星期六）之间的值。例如，如果设置值 <codeph>[ 0, 6 ]</codeph>，将禁用星期日和星期六。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:disabledRanges:get"><apiName>disabledRanges</apiName><shortdesc>
      禁用一天或多天。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3629
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      </apiDefaultValue></apiValueDef><apiDesc>
      禁用一天或多天。
     
      <p>此属性接受对象 Array 作为参数。此 Array 中的所有对象都是 Date 对象，用于指定要禁用的各个日期；也可以是包含 <codeph>rangeStart</codeph> 和（或）<codeph>rangeEnd</codeph> 属性的对象，它们的每个值都是 Date 对象。这些属性的值描述了日期范围的边界。如果忽略其中任一属性，则认为在该方向上无范围限制。如果仅指定 <codeph>rangeStart</codeph>，则将禁用指定日期之后的所有日期（包括 <codeph>rangeStart</codeph> 日期）。如果仅指定 <codeph>rangeEnd</codeph>，则将禁用指定日期之前的所有日期（包括 <codeph>rangeEnd</codeph> 日期）。要禁用某一日期，请使用一个 Date 对象指定 Array 中的某个日期。时间值（如果存在）将以 Date 对象为零值，依次递增。</p>
     
      <p>以下示例将禁用下列日期：2006 年 1 月 11 日，从 2006 年 1 月 23 至同年 2 月 10 日，以及 2006 年 3 月 1 日及后续所有日期。</p>
     
      <pre>disabledRanges="{[new Date(2006,0,11), {rangeStart:
      new Date(2006,0,23), rangeEnd: new Date(2006,1,10)},
      {rangeStart: new Date(2006,2,1)}]}"</pre>
     
      <p>如果 <codeph>displayedMonth</codeph> 和 <codeph>displayedYear</codeph> 属性中包含禁用的日期，则设置此属性将立即更改 DateChooser 控件的外观。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:displayedMonth:get"><apiName>displayedMonth</apiName><shortdesc>
      将 displayedMonth 属性与 displayedYear 属性一起使用可指定在 DateChooser 控件中显示的月份。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3624
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      将 <codeph>displayedMonth</codeph> 属性与 <codeph>displayedYear</codeph> 属性一起使用可指定在 DateChooser 控件中显示的月份。月份从零开始，因此一月份为 0，十二月份为 11。设置此属性将立即更改 DateChooser 控件的外观。默认值为当前日期的月份。
     
      <p>默认值为当前月份。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:displayedYear:get"><apiName>displayedYear</apiName><shortdesc>
      将 displayedYear 属性与 displayedMonth 属性一起使用可确定在 DateChooser 控件中显示的年份。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3625
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      将 <codeph>displayedYear</codeph> 属性与 <codeph>displayedMonth</codeph> 属性一起使用可确定在 DateChooser 控件中显示的年份。设置此属性将立即更改 DateChooser 控件的外观。
      
      <p>默认值为当前年份。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:dropdown:get"><apiName>dropdown</apiName><shortdesc>
      包含对 DateChooser 控件（包含在 DateField 控件中）的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls:DateChooser</apiValueClassifier></apiValueDef><apiDesc>
      包含对 DateChooser 控件（包含在 DateField 控件中）的引用。只要所用的类扩展 <codeph>DateChooser</codeph>，即可使用 <codeph>dropdownFactory</codeph> 设置所用的类。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:dropdownFactory:get"><apiName>dropdownFactory</apiName><shortdesc>
      IFactory，可创建 DateChooser 派生的实例以用作日期选择器。默认值是 DateChooser 的一个 IFactory。
     
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      IFactory，可创建 DateChooser 派生的实例以用作日期选择器。默认值是 DateChooser 的一个 IFactory。
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:firstDayOfWeek:get"><apiName>firstDayOfWeek</apiName><shortdesc>
      DateChooser 控件第一列中显示的一周中的日期（0－6，其中 0 是 dayNames Array 的第一个元素）</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3623
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>0 (Sunday)
      </apiDefaultValue></apiValueDef><apiDesc>
      DateChooser 控件第一列中显示的一周中的日期（0－6，其中 0 是 dayNames Array 的第一个元素）设置此属性将更改日期列的顺序。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:formatString:get"><apiName>formatString</apiName><shortdesc>
      文本字段中所显示日期的格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"MM/DD/YYYY"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      文本字段中所显示日期的格式。此属性包含 <codeph>"MM"</codeph>、<codeph>"DD"</codeph>、<codeph>"YY"</codeph>、<codeph>"YYYY"</codeph>、分隔符和标点符号的任意组合。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      用于设置 DateField 控件的文本字段中日期显示格式的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3618
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      用于设置 DateField 控件的文本字段中日期显示格式的函数。如果未指定函数，则使用默认格式。
      
      <p>该函数采用 Date 对象作为参数，并以要显示的格式返回一个字符串，如下例所示：</p>
      <pre>
      public function formatDate(currentDate:Date):String {
          ...
          return dateString;
      }</pre>
     
      <p>如果允许用户在 DateField 控件的文本字段中输入日期，并且使用 <codeph>labelFunction</codeph> 属性定义格式化函数，则应为 <codeph>parseFunction</codeph> 属性指定一个函数将输入文本字符串转换为 Date 对象以供 DateField 控件使用，或者将 <codeph>parseFunction</codeph> 属性设置为 null。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#DateField/parseFunction"><linktext>mx.controls.DateField.parseFunction</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateField:listData:get"><apiName>listData</apiName><shortdesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 List 控件中的相应数据初始化该组件的 listData 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 List 控件中的相应数据初始化该组件的 <codeph>listData</codeph> 属性。然后，组件可使用 <codeph>listData</codeph> 属性初始化嵌入式项呈示器或嵌入式项目编辑器的 <codeph>data</codeph> 属性。
     
      <p>您无需在 MXML 或 ActionScript 中设置此属性；将组件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 会对其进行设置。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateField:maxYear:get"><apiName>maxYear</apiName><shortdesc>
      控件中可选的最后一个年份。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>2100
     
      </apiDefaultValue></apiValueDef><apiDesc>
      控件中可选的最后一个年份。
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:minYear:get"><apiName>minYear</apiName><shortdesc>
      控件中可选的第一个年份。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1900
     
      </apiDefaultValue></apiValueDef><apiDesc>
      控件中可选的第一个年份。
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:monthNames:get"><apiName>monthNames</apiName><shortdesc>
      控件顶部显示的月份名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[ "January", "February", "March", "April", "May", "June", 
      "July", "August", "September", "October", "November", "December" ]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控件顶部显示的月份名称。将 <codeph>monthSymbol</codeph> 属性追加到由 <codeph>monthNames</codeph> 属性指定的值末尾，该属性这在语言（如日语）中很有用。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:monthSymbol:get"><apiName>monthSymbol</apiName><shortdesc>
      将此属性追加到由 monthNames 属性指定的值末尾以便定义在控件顶部显示的月份名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      将此属性追加到由 <codeph>monthNames</codeph> 属性指定的值末尾以便定义在控件顶部显示的月份名称。有些语言（如日语）会在月份名称后使用额外的符号。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:parseFunction:get"><apiName>parseFunction</apiName><shortdesc>
      用于解析在 DateField 控件的文本字段区域中以文本格式输入的日期，并向此控件返回 Date 对象的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      用于解析在 DateField 控件的文本字段区域中以文本格式输入的日期，并向此控件返回 Date 对象的函数。如果未指定函数，则 Flex 将使用默认函数。如果设置了 <codeph>parseFunction</codeph> 属性，则通常应执行为 <codeph>labelFunction</codeph> 属性指定的函数的反函数。
      
      <p>此函数采用两个参数，并向 DateField 控件返回一个数据对象，如下例所示：</p>
      <pre>
      public function parseDate(valueString:String, inputFormat:String):Date {
          ...
          return newDate
      }</pre>
     
      <p>其中，<codeph>valueString</codeph> 参数包含用户在文本字段中输入的文本字符串，而 <codeph>inputFormat</codeph> 参数包含字符串的格式。例如，如果只允许用户使用两个字符输入文本字符串表示月份、日期和年份，然后将“MM/DD/YY”传递给 <codeph>inputFormat</codeph> 参数。 </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#DateField/labelFunction"><linktext>mx.controls.DateField.labelFunction</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateField:selectableRange:get"><apiName>selectableRange</apiName><shortdesc>
      日期范围，可从中选择日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3628
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      日期范围，可从中选择日期。例如，可以选择 04-12-2006 和 04-12-2007 之间的日期，而超出此范围的日期将被禁用。
     
      <p>此属性接受 Object 作为参数。该 Object 包含 Date 类型的两个属性：<codeph>rangeStart</codeph> 和 <codeph>rangeEnd</codeph>。如果仅指定了 <codeph>rangeStart</codeph>，则在此指定日期之后的所有日期都可用。如果仅指定了 <codeph>rangeEnd</codeph>，则在此指定日期之前的所有日期都可用。要仅在 DateChooser 控件中使用一个日期，可以直接传递一个 Date 对象。时间值（如果存在）将以 Date 对象为零值，依次递增。</p>
     
      <p>以下示例仅启用 2006 年 1 月 1 日到 2006 年 6 月 30 日的范围。1 月之前和 6 月之后的月份不会出现在 DateChooser 中。</p>
     
      <pre>selectableRange="{{rangeStart : new Date(2006,0,1),
      rangeEnd : new Date(2006,5,30)}}"</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:selectedDate:get"><apiName>selectedDate</apiName><shortdesc>
      DateChooser 控件中选定的日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3630
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      DateChooser 控件中选定的日期。接受 Date 对象作为参数。如果传入的 Date 对象包含任何时间值，则它们将被清零。
     
      <p>选择当前选定日期时按住 Ctrl 键可取消对该日期的选择，将 <codeph>selectedDate</codeph> 属性设置为 <codeph>null</codeph>，然后分派 <codeph>change</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:showToday:get"><apiName>showToday</apiName><shortdesc>
      如果为 true，则指定在 DateChooser 控件中加亮显示今天。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3622
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则指定在 DateChooser 控件中加亮显示今天。设置此属性将立即更改 DateChooser 控件的外观。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:yearNavigationEnabled:get"><apiName>yearNavigationEnabled</apiName><shortdesc>
      启用年份导航。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      启用年份导航。如果为 <codeph>true</codeph>，则显示的年份右侧会出现向上和向下按钮。您可以使用这些按钮更改当前年份。在采用年份显示在月份之前的日期格式的区域设置中，这些按钮将显示在年份的左侧。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateField:yearSymbol:get"><apiName>yearSymbol</apiName><shortdesc>
      此属性将追加到在控件顶部显示的年份末尾。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此属性将追加到在控件顶部显示的年份末尾。有些语言（如日语）会在年份后添加符号。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:ColorPicker"><apiName>ColorPicker</apiName><shortdesc>
  ColorPicker 控件为用户提供了一种从样本列表中选择颜色的方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="highlightAlphas"/><Exclude kind="style" name="fillColors"/><Exclude kind="style" name="fillAlphas"/><Exclude kind="property" name="text"/><styles><style inherit="no" name="swatchPanelStyleName" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  为样本面板定义样式属性的类选择器的名称。默认值为 <codeph>undefined</codeph>。以下示例显示了由 <codeph>swatchPanelStyleName</codeph> 定义的默认样式属性。 
  <pre>
  ColorPicker {
      swatchPanelStyleName:mySwatchPanelStyle;
  }
  
  .mySwatchPanelStyle {
      backgroundColor:#E5E6E7;
      columnCount:20;
      horizontalGap:0;
      previewHeight:22;
      previewWidth:45;
      swatchGridBackgroundColor:#000000;
      swatchGridBorderSize:0;
      swatchHeight:12;
      swatchHighlightColor:#FFFFFF;
      swatchHighlightSize:1;
      swatchWidth:12;
      textFieldWidth:72;
      verticalGap:0;
  }
  </pre>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="swatchBorderSize" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  样本边框的轮廓大小。默认值为 1。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="swatchBorderColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="uint">
<description>
  样本边框的颜色。默认值是 <codeph>0x000000</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  SwatchPanel 对象的顶部填充，位于样本网格上方。默认值为 4。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  SwatchPanel 对象的右侧填充，位于样本网格一侧。默认值为 5。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  SwatchPanel 对象的左侧填充，位于样本网格一侧。默认值为 5。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  SwatchPanel 对象的底部填充，位于样本网格下方。默认值为 5。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Function">
<description>
  控制组件补间的缓动函数。默认值为 <codeph>undefined</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  打开过渡的长度（以毫秒为单位）。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="Array">
<description>
  为控件背景着色所使用的颜色。对具有均匀外观控件的两个值传递相同的颜色。默认值为 <codeph>[ 0xFFFFFF, 0xCCCCCC ]</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="Array">
<description>
  用于填充控件背景的 Alpha。默认值为 <codeph>[ 0.6, 0.4 ]</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeEasingFunction" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Function">
<description>
  控制组件补间的缓动函数。默认值为 <codeph>undefined</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="closeDuration" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  关闭过渡的长度（以毫秒为单位）。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="uint">
<description>
  SwatchPanel 对象上的外边框颜色。默认值是 <codeph>0xA5A9AE</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:ColorPicker" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:ColorPicker" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:ColorPicker" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="uint">
<description>
  已禁用外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制禁用的 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制禁用的 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制禁用的 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x999999</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:ColorPicker" playerVersion="Flash9" theme="halo" type="uint">
<description>
  某个外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x111111</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="String">
<description>
  指定焦点矩形的哪些角应该是圆角。此值是使用空格分隔的 String，该 String 可以是 <codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> 和 <codeph>"br"</codeph> 的任意组合。例如，要指定右侧的角为圆角，左侧的角为直角，应使用 <codeph>"tr br"</codeph>。<codeph>cornerRadius</codeph> 样式属性指定圆角的半径。默认值取决于组件类；如果未覆盖该类的默认值，则默认值为 <codeph>"tl tr bl br"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:ColorPicker" playerVersion="Flash9" type="Number">
<description>
  指定焦点外观的 alpha 透明度值。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ColorPicker&gt;</code> tag inherits all of the properties of its
  superclass, and the following properties:</p>
 
  <pre>
  &lt;mx:ColorPicker
    <b>Properties</b>
    colorField="color"
    labelField="label"
    selectedColor="0x000000"
    selectedIndex="0"
    showTextField="true|false"
 
    <b>Styles</b>
    borderColor="0xA5A9AE"
    closeDuration="250"
    closeEasingFunction="undefined"
    color="0x0B333C"
    disabledIconColor="0x999999"
    fillAlphas="[0.6,0.4]"
    fillColors="[0xFFFFFF, 0xCCCCCC]"
    focusAlpha="0.5"
    focusRoundedCorners="tl tr bl br"
    fontAntiAliasType="advanced"
    fontfamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0""
    fontSize="10"
    fontStyle="normal"
    fontThickness="0"
    fontWeight="normal"
    highlightAlphas="[0.3,0.0]"
    iconColor="0x000000"
    leading="2"
    openDuration="250"
    openEasingFunction="undefined"
    paddingBottom="5"
    paddingLeft="5"
    paddingRight="5"
    paddingTop="4"
    swatchBorderColor="0x000000"
    swatchBorderSize="1"
    swatchPanelStyleName="undefined"
    textAlign="left"
    textDecoration="none"
    textIndent="0"
 
    <b>Events</b>
    change="<i>No default</i>"
    close="<i>No default</i>"
    enter="<i>No default</i>"
    itemRollOut="<i>No default</i>"
    itemRollOver="<i>No default</i>"
    open="<i>No default</i>"
    /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:ComboBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ColorPicker 控件为用户提供了一种从样本列表中选择颜色的方法。组件的默认模式是在方形按钮中显示单一样本。当用户单击该样本按钮时，将会出现样本面板并显示整个样本列表。
 
  <p>ColorPicker 控件具有下列默认大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>ColorPicker：22 × 22 个像素；样本面板：大小需适应 ColorPicker 控件宽度</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素 × 0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>未定义</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ColorPickerExample.mxml"><swfblock conref="examples/ColorPickerExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="mx.controls:ColorPicker_mx.events.DropdownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  当颜色样本面板打开时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4920
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.OPEN</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当颜色样本面板打开时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ColorPicker_mx.events.ColorPickerEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  当用户使用鼠标滑过 SwatchPanel 对象中的样本时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4923
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ColorPickerEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events.ColorPickerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户使用鼠标滑过 SwatchPanel 对象中的样本时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ColorPicker_mx.events.ColorPickerEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  当用户使用鼠标滑离 SwatchPanel 对象中的样本时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4924
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ColorPickerEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events.ColorPickerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户使用鼠标滑离 SwatchPanel 对象中的样本时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ColorPicker_mx.events.ColorPickerEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  如果可编辑的 ColorPicker 属性设置为 true，则当用户在键入十六进制颜色值后按 Enter 键时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4919
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ColorPickerEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.ColorPickerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  如果 ColorPicker<codeph>editable</codeph> 属性设置为 <codeph>true</codeph>，则当用户在键入十六进制颜色值后按 Enter 键时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ColorPicker_mx.events.DropdownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  当样本面板关闭时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4921
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当样本面板关闭时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ColorPicker_mx.events.ColorPickerEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  当所选颜色由于用户交互操作而发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4918
  
  </helpid></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ColorPickerEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.ColorPickerEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当所选颜色由于用户交互操作而发生更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:ColorPicker:ColorPicker"><apiName>ColorPicker</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:ColorPicker:close"><apiName>close</apiName><shortdesc>
      隐藏下拉 SwatchPanel 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4926
      
      </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>trigger</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
      隐藏下拉 SwatchPanel 对象。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ColorPicker:open"><apiName>open</apiName><shortdesc>
      显示下拉 SwatchPanel 对象，该对象显示可供用户选择的颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4925
      
      </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      显示下拉 SwatchPanel 对象，该对象显示可供用户选择的颜色。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:ColorPicker:colorField:get"><apiName>colorField</apiName><shortdesc>
      dataProvider Array 的对象中的字段名称，该字段用于指定样本面板显示的十六进制颜色值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4927
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"color"
      </apiDefaultValue></apiValueDef><apiDesc>
      dataProvider Array 的对象中的字段名称，该字段用于指定样本面板显示的十六进制颜色值。
     
      <p>如果 dataProvider 对象不包含颜色字段，则将 <codeph>colorField</codeph> 属性设置为使用正确的字段名称。如果 dataProvider 是十六进制颜色值的 Array，则即使此属性可用，也不会有任何意义。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ColorPicker:labelField:get"><apiName>labelField</apiName><shortdesc>
      dataProvider Array 的对象中的字段名称，该字段中包含要在 SwatchPanel 对象文本框中作为标签显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4928
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
      </apiDefaultValue></apiValueDef><apiDesc>
      dataProvider Array 的对象中的字段名称，该字段中包含要在 SwatchPanel 对象文本框中作为标签显示的文本。
     
      <p>如果 dataProvider 对象不包含标签字段，则将 <codeph>labelField</codeph> 属性设置为使用正确的字段名称。如果 dataProvider 是十六进制颜色值的 Array，则即使此属性可用，也不会有任何意义。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ColorPicker:selectedColor:get"><apiName>selectedColor</apiName><shortdesc>
      SwatchPanel 对象中当前所选颜色的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4932
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="uint"/></apiValueDef><apiDesc>
      SwatchPanel 对象中当前所选颜色的值。只可在 &lt;mx:ColorPicker> 标签中将此属性设置为标准字符串颜色名称，如“blue”。如果 dataProvider 包含黑色 (0x000000) 条目，则默认值为 0；否则，默认值为数据提供程序中索引为 0 处的项目颜色。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ColorPicker:showTextField:get"><apiName>showTextField</apiName><shortdesc>
      指定是否显示用于显示颜色标签或十六进制颜色值的文本框。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是否显示用于显示颜色标签或十六进制颜色值的文本框。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ColorPicker:protected:swatchStyleFilters:get"><apiName>swatchStyleFilters</apiName><shortdesc>
      从 ColorPicker 传递给预览样本的一组样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 ColorPicker 传递给预览样本的一组样式。 
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:ColorPicker:selectedIndex:set"><apiName>selectedIndex</apiName><shortdesc>
      SwatchPanel 对象中选定项目的 dataProvider 中的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>4931
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      SwatchPanel 对象中选定项目的 dataProvider 中的索引。通过此属性可以将选定颜色设置为与索引对应的颜色，并可将下拉样本中的选定索引设置为 <codeph>selectedIndex</codeph> 属性值，还可在文本框中显示相关联的标签。默认值为与黑色 (0x000000)（如果存在）对应的索引；否则，将为 0。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:SWFLoader"><apiName>SWFLoader</apiName><shortdesc>
  SWFLoader 控件加载并显示指定的 SWF 文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="baseColor"/><effects><effect event="complete" name="completeEffect" owner="mx.controls:SWFLoader">
<description>
  分派 complete 事件时启动的效果。
  
  </description>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><styles><style enumeration="bottom,middle,top" inherit="no" name="verticalAlign" owner="mx.controls:SWFLoader" playerVersion="Flash9" type="String">
<description>
  不具有 1:1 高宽比时内容的垂直对齐方式。可能值包括 <codeph>"top"</codeph>、<codeph>"middle"</codeph> 和 <codeph>"bottom"</codeph>。
  </description>
<default>"top"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.controls:SWFLoader" playerVersion="Flash9" type="String">
<description>
  不具有 1:1 高宽比时内容的水平对齐方式。可能值包括 <codeph>"left"</codeph>、<codeph>"center"</codeph> 和 <codeph>"right"</codeph>。
  </description>
<default>"left"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="brokenImageSkin" owner="mx.controls:SWFLoader" playerVersion="Flash9" type="Class">
<description>
  控件无法加载内容时用作 SWFLoader 外观的类的名称。默认值为 Assets.swf 文件中的 "__brokenImage" 符号。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="brokenImageBorderSkin" owner="mx.controls:SWFLoader" playerVersion="Flash9" type="Class">
<description>
  控件无法加载内容时用作 SWFLoader 边框外观的类的名称。
  </description>
<default>BrokenImageBorderSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The &lt;mx:SWFLoader&gt; tag inherits all of the tag attributes
  of its superclass and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:SWFLoader
    <strong>Properties</strong>
    autoLoad="true|false"
    loadForCompatibility="false|true"
    loaderContext="null"
    maintainAspectRatio="true|false"
    scaleContent="true|false"
    showBusyCursor="false|true"
    source="<i>No default</i>"
    trustContent="false|true"
  
    <strong>Styles</strong>
    brokenImageBorderSkin="BrokenImageBorderSkin"
    brokenImageSkin="<i>'__brokenImage' symbol in Assets.swf</i>"
    horizontalAlign="left|center|right"
    verticalAlign="top|middle|bottom"
  
    <strong>Effects</strong>
    completeEffect="<i>No default</i>"
    
    <strong>Events</strong>
    complete="<i>No default</i>"
    httpStatus="<i>No default</i>"
    init="<i>No default</i>"
    ioError="<i>No default</i>"
    open="<i>No default</i>"
    progress="<i>No default</i>"
    securityError="<i>No default</i>"
    unload="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:ISWFLoader</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  SWFLoader 控件加载并显示指定的 SWF 文件。通常使用 SWFLoader 将一个 Flex 应用程序载入主机 Flex 应用程序。
 
  <p><b>注意：</b>使用 SWFLoader 控件您可以加载以下内容：在运行时加载 GIF、JPEG 或 PNG 图像文件；在运行时加载显示 SWF、GIF、JPEG 或 PNG 图像的 ByteArray；或在编译时通过 <codeph>@Embed(source='filename')</codeph> 加载任何上述文件类型的嵌入版本以及 SVG 文件。但是，Image 控件更适合此功能，因而应在大多数图像加载过程中使用该控件。Image 控件还可用于自定义项呈示器和项目编辑器。将 SWFLoader 或 Image 用于 SVG 文件时，只能在已使用 Embed 语句将 SVG 嵌入到您的应用程序中时才能加载该文件；不能在运行时通过网络加载 SVG。</p>
 
  <p>SWFLoader 控件允许您缩放其内容和设置其大小。它也可以调整自身大小以适应其内容的大小。默认情况下，会缩放内容以适应 SWFLoader 控件的大小。它也可以根据需要以编程方式加载内容，并监视加载进度。</p>  
 
  <p>SWFLoader 控件无法获得焦点。但是，SWFLoader 控件的内容可接受焦点并有其自身的焦点交互。</p>
 
  <p>SWFLoader 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>足以容纳加载内容的宽度和高度</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>未定义</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="local.mxml"/><example conref="SimpleLoader.mxml"><swfblock conref="examples/SimpleLoader.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Image"><linktext>mx.controls.Image</linktext></link></related-links><adobeApiEvent id="mx.controls:SWFLoader_flash.events.Event.UNLOAD_unload"><apiName>unload</apiName><shortdesc>
  在以下情况下分派：删除加载的对象时；或同一 SWFLoader 控件执行另一加载，并且在新加载开始之前删除原始内容时。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.UNLOAD</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在以下情况下分派：删除加载的对象时；或同一 SWFLoader 控件执行另一加载，并且在新加载开始之前删除原始内容时。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
  加载内容过程中发生安全性错误时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  加载内容过程中发生安全性错误时分派。有关详细信息，请参阅 SecurityErrorEvent 类。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  当加载内容时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当加载内容时分派。
 
  <p>无论加载是由自动加载触发还是由对 <codeph>load()</codeph> 方法的显式调用触发，都会分派此事件。</p>
 
  <p><b>注意：</b>不能保证分派 <codeph>progress</codeph> 事件。在不分派任何 <codeph>progress</codeph> 事件的情况下，也可能会接收 <codeph>complete</codeph> 事件。如果加载的内容是本地文件，就可能会出现这种情况。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.Event.OPEN_open"><apiName>open</apiName><shortdesc>
  当网络操作开始时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.OPEN</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当网络操作开始时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
  发生输入/输出错误时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  发生输入/输出错误时分派。
  </apiDesc></adobeApiEventDetail><related-links><link href="" invalidHref="flash.events.IOErrorEvent.xml"><linktext>flash.events.IOErrorEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.Event.INIT_init"><apiName>init</apiName><shortdesc>
  已加载的 SWF 文件的属性和方法可访问时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.INIT</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  已加载的 SWF 文件的属性和方法可访问时进行分派。要分派此事件，必须满足以下两个条件：
 
  <ul>
    <li>可以访问与加载的对象关联的所有属性和方法以及与该控件关联的所有属性和方法。</li>
    <li>所有子对象的构造函数已完成。</li>
  </ul>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.HTTPStatusEvent.HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><shortdesc>
  在通过 HTTP 发出网络请求并且 Flash Player 或 AIR 可以检测到 HTTP 状态代码时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTTPStatusEvent.HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events.HTTPStatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在通过 HTTP 发出网络请求并且 Flash Player 或 AIR 可以检测到 HTTP 状态代码时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:SWFLoader_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  在内容加载完成时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在内容加载完成时分派。
 
  <p>无论加载是由自动加载触发还是由对 <codeph>load()</codeph> 方法的显式调用触发，都会分派此事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:SWFLoader:SWFLoader"><apiName>SWFLoader</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:SWFLoader:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      MouseEvent.CLICK 事件的默认处理函数。</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>事件对象。
     </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>MouseEvent.CLICK</codeph> 事件的默认处理函数。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:SWFLoader:getVisibleApplicationRect"><apiName>getVisibleApplicationRect</apiName><shortdesc>
      
      获取所加载的应用程序在屏幕上对用户可见的范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包括此对象可见部分的 <codeph>Rectangle</codeph>。该矩形使用全局坐标。
      
      </apiDesc><apiType value="flash.geom:Rectangle"/></apiReturn><apiParam><apiItemName>allApplications</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定计算该可见矩形时仅依据此应用程序中的显示对象还是同时依据所有父应用程序中的显示对象。包含更多父应用程序可能会减少所返回的可见区域。如果为 <codeph>true</codeph>，则所有应用程序都用于查找可见区域，否则，仅使用此应用程序中的显示对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      获取所加载的应用程序在屏幕上对用户可见的范围。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:SWFLoader:load"><apiName>load</apiName><shortdesc>
      加载图像或 SWF 文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>要加载的 GIF、JPEG、PNG 或 SWF 文件的绝对或相对 URL。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      加载图像或 SWF 文件。<codeph>url</codeph> 参数可引用 GIF、JPEG、PNG 或 SWF 文件；无法使用此方法加载 SVG 文件。相反，必须对 <codeph>source</codeph> 属性使用 Embed 语句才能加载该文件。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:SWFLoader:unloadAndStop"><apiName>unloadAndStop</apiName><shortdesc>
      卸载图像或 SWF 文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>invokeGarbageCollector</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc> 提示垃圾回收器对子 SWF 对象是执行垃圾回收 (<codeph>true</codeph>) 还是不执行垃圾回收 (<codeph>false</codeph>)。如果要以异步方式卸载很多对象，则将 <codeph>gc</codeph> 参数设置为 <codeph>false</codeph> 可能会提高应用程序的性能。但是，如果将该参数设置为 <codeph>false</codeph>，则在卸载子 SWF 之后，子 SWF 文件的媒体和显示对象可能还会保存在内存中。  
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      卸载图像或 SWF 文件。此方法返回之后，<codeph>source</codeph> 属性将为 null。仅在 Flash Player 的主版本为 10 或更高版本时支持此方法。如果 Flash Player 的主版本低于 10，则此方法卸载内容的方式将与 <codeph>source</codeph> 设置为 null 时相同。此方法尝试通过删除对子 SWF 文件的 EventDispatcher、NetConnection、Timer、Sound 或 Video 对象的引用，从而卸载 SWF 文件。因此，针对子 SWF 文件和子 SWF 文件的显示列表将发生以下行为： 
      <ul>
      <li>停止声音。</li>
      <li>删除舞台事件侦听器。</li>
      <li>删除 <codeph>enterFrame</codeph>、<codeph>frameConstructed</codeph>、<codeph>exitFrame</codeph>、<codeph>activate</codeph> 和 <codeph>deactivate</codeph> 的事件侦听器。</li>
      <li>停止计时器。</li>
      <li>断开摄像机和麦克风实例</li>
      <li>停止影片剪辑。</li>
      </ul>
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:SWFLoader:autoLoad:get"><apiName>autoLoad</apiName><shortdesc>
      一个标志，指示内容是自动开始加载还是等待调用 load() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示内容是自动开始加载还是等待调用 <codeph>load()</codeph> 方法。如果为 <codeph>true</codeph>，则将自动加载内容。如果为 <codeph>false</codeph>，则必须调用 <codeph>load()</codeph> 方法。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      已加载的 SWF 或图像文件的字节数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      已加载的 SWF 或图像文件的字节数。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      SWF 或图像文件的总大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      SWF 或图像文件的总大小。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:childAllowsParent:get"><apiName>childAllowsParent</apiName><shortdesc>
     
      测试子级是否允许其父级访问子级的显示对象或侦听源于子级的消息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     
      测试子级是否允许其父级访问子级的显示对象或侦听源于子级的消息。如果允许访问，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:content:get"><apiName>content</apiName><shortdesc>
      此属性包含表示在 SWFLoader 控件中加载的内容的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3134
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.display:DisplayObject"/><apiTipTexts><apiTipText>返回 SWFLoader 的内容。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      此属性包含表示在 SWFLoader 控件中加载的内容的对象。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
      控件加载的缩放内容的高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控件加载的缩放内容的高度（以像素为单位）。请注意，这不是控件本身的高度，而是已加载内容的高度。使用控件的 <codeph>height</codeph> 属性可获取其高度。
     
      <p>触发 <codeph>complete</codeph> 事件时，此属性的值不是最终值。您可以在触发 <codeph>updateComplete</codeph> 事件后获得最终值。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
      控件加载的缩放内容的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控件加载的缩放内容的宽度（以像素为单位）。请注意，这不是控件本身的宽度，而是已加载内容的宽度。使用控件的 <codeph>width</codeph> 属性可获取其宽度。
     
      <p>触发 <codeph>complete</codeph> 事件时，此属性的值不是最终值。您可以在触发 <codeph>updateComplete</codeph> 事件后获得最终值。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:loadForCompatibility:get"><apiName>loadForCompatibility</apiName><shortdesc>
      一个标志，指示是否加载内容，以使其可以与用 Flex 编译器的其它版本构建的应用程序进行互操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否加载内容，以使其可以与用 Flex 编译器的其它版本构建的应用程序进行互操作。通过将应用程序加载到同级（即对等）ApplicationDomain 中，从而实现与其它 Flex 应用程序的兼容。如果必须将内容加载到不同的 SecurityDomain 中，则忽略此标志。如果为 <codeph>true</codeph>，则内容加载到同级 ApplicationDomain 中。如果为 <codeph>false</codeph>，则内容加载到子级 ApplicationDomain 中。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:loaderContext:get"><apiName>loaderContext</apiName><shortdesc>
      用于控制内容加载的 LoaderContext 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.system:LoaderContext"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      用于控制内容加载的 LoaderContext 对象。这是一种高级属性。在大多数情况下，您可以使用 <codeph>trustContent</codeph> 属性。
     
      <p>默认值为 <codeph>null</codeph>，该值将导致控件使用 <codeph>trustContent</codeph> 属性创建可在加载开始后读回的 LoaderContext 对象。</p>
     
      <p>要使用自定义 LoaderContext 对象，您必须了解 SecurityDomain 和 ApplicationDomain 类。设置此属性不会启动加载；必须在加载开始之前设置此属性。这并不意味着必须将 <codeph>autoLoad</codeph> 属性设置为 <codeph>false</codeph>，因为实际上加载不会立即启动，但是等待 <codeph>creationComplete</codeph> 事件设置该属性就太迟了。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.LoaderContext.xml"><linktext>flash.system.LoaderContext</linktext></link><link href="" invalidHref="flash.system.ApplicationDomain.xml"><linktext>flash.system.ApplicationDomain</linktext></link><link href="" invalidHref="flash.system.SecurityDomain.xml"><linktext>flash.system.SecurityDomain</linktext></link></related-links></apiValue><apiValue id="mx.controls:SWFLoader:maintainAspectRatio:get"><apiName>maintainAspectRatio</apiName><shortdesc>
      一个标志，指示是否保持加载内容的高宽比。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否保持加载内容的高宽比。如果为 <codeph>true</codeph>，则指定以原始图像的宽高比显示该图像。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:parentAllowsChild:get"><apiName>parentAllowsChild</apiName><shortdesc>
     
      测试父级是否允许其子级访问父级的显示对象或侦听源于父级的消息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
     
      测试父级是否允许其子级访问父级的显示对象或侦听源于父级的消息。如果允许访问，则为 <codeph>true</codeph>；否则为 <codeph>false</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:percentLoaded:get"><apiName>percentLoaded</apiName><shortdesc>
      已加载图像或 SWF 文件的百分比。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      已加载图像或 SWF 文件的百分比。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:scaleContent:get"><apiName>scaleContent</apiName><shortdesc>
      一个标志，指示是缩放内容以适应控件大小还是调整控件大小使其适应内容大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是缩放内容以适应控件大小还是调整控件大小使其适应内容大小。如果为 <codeph>true</codeph>，则会缩放内容以适应 SWFLoader 控件。如果为 <codeph>false</codeph>，则会缩放 SWFLoader 控件以适应内容。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:showBusyCursor:get"><apiName>showBusyCursor</apiName><shortdesc>
      一个标志，指示加载内容时是否显示忙状态光标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示加载内容时是否显示忙状态光标。如果为 <codeph>true</codeph>，则加载内容时显示忙状态光标。默认的忙状态光标是由 CursorManager 类的 <codeph>busyCursor</codeph> 属性定义的 mx.skins.halo.BusyCursor。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.managers.xml#CursorManager"><linktext>mx.managers.CursorManager</linktext></link></related-links></apiValue><apiValue id="mx.controls:SWFLoader:smoothBitmapContent:get"><apiName>smoothBitmapContent</apiName><shortdesc>
      指示是否在缩放内容时对其进行平滑处理的标志。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
     </apiDefaultValue></apiValueDef><apiDesc>
      指示是否在缩放内容时对其进行平滑处理的标志。仅可以对位图内容进行平滑处理。如果为 <codeph>true</codeph>，且内容是一个位图，则会将内容的平滑属性设置为 <codeph>true</codeph>。如果为 <codeph>false</codeph>，则不会对内容进行平滑处理。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:source:get"><apiName>source</apiName><shortdesc>
      作为内容加载的 URL、对象、类或类的字符串名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      作为内容加载的 URL、对象、类或类的字符串名称。<codeph>source</codeph> 属性采用以下格式：
     
      <p><pre>
      <codeph>source="<i>URLOrPathOrClass</i>"</codeph></pre></p>
     
      <p><pre>
      <codeph>source="@Embed(source='<i>PathOrClass</i>')"</codeph></pre></p>
     
      <p><codeph>source</codeph> 属性的值表示相对或绝对 URL；表示 SWF、GIF、JPEG 或 PNG 的 ByteArray；实现 IFlexDisplayObject 的对象；其类型实现 IFlexDisplayObject 的类或表示类的 String。 </p> 
     
      <p>指定 SWF、GIF、JPEG、PNG 或 SVG 文件的路径时，Flex 会自动将文件转换正确的数据类型以用于 SWFLoader 控件。</p> 
     
      <p>如果省略 Embed 语句，Flex 会在运行时加载引用的文件；不会将其作为生成的 SWF 文件的一部分打包。运行时，<codeph>source</codeph> 属性仅支持加载 GIF、JPEG、PNG 图像和 SWF 文件。</p>
     
      <p>Flex 数据服务用户可以使用 SWFLoader 控件通过以下格式加载 Flex 应用程序：</p>
     
      <p><pre>
      <codeph>source="<i>MXMLPath</i>.mxml.swf"</codeph></pre></p>
     
      <p>Flex 数据服务编译 MXML 文件，并将 SWF 文件返回到主应用程序。此技术可以妥善处理将图形或动画添加到应用程序的 SWF 文件，但不适合需要大量用户交互的 SWF 文件。如果要导入需要大量用户交互的 SWF 文件，您应该将其构建为自定义组件。 </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:swfBridge:get"><apiName>swfBridge</apiName><shortdesc>
     
      通向与此接口的实现器关联的应用程序的桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
     
      通向与此接口的实现器关联的应用程序的桥。可用于向不同 ApplicationDomain 或不同沙箱中的应用程序发送事件的 IEventDispatcher。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:SWFLoader:trustContent:get"><apiName>trustContent</apiName><shortdesc>
      如果为 true，则将内容加载到安全域中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则将内容加载到安全域中。这意味着如果内容位于其它域而该域没有允许您的域访问的 crossdomain.xml 文件，加载过程将失败。此属性仅对下一加载有影响，而不会在已加载的内容上启动新的加载。
     
      <p>默认值为 <codeph>false</codeph>，表示可加载任何内容且不会失败，但您无法访问该内容。最重要的是，加载的内容无法访问您的对象和代码，这是最安全的方案。除非您完全确定已加载内容（特别是类似 SWF 文件的活动内容）的安全性，否则不要将此属性设置为 <codeph>true</codeph>。</p>
     
      <p>如果设置 <codeph>trustContent</codeph> 无法完全满足您的要求，您还可以使用 <codeph>loaderContext</codeph> 属性来准确确定加载内容的方式。<codeph>loaderContext</codeph> 属性会使 SWFLoader 忽略 <codeph>trustContent</codeph> 属性的值。但是，您应熟悉 SecurityDomain 类和 ApplicationDomain 类才能使用 <codeph>loaderContext</codeph> 属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.SecurityDomain.xml"><linktext>flash.system.SecurityDomain</linktext></link><link href="" invalidHref="flash.system.ApplicationDomain.xml"><linktext>flash.system.ApplicationDomain</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:NavBar"><apiName>NavBar</apiName><shortdesc>
  NavBar 控件是导航器控件（如 LinkBar 和 TabBar）的 superclass，无法直接进行实例化。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="event" name="click"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="label"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Exclude kind="property" name="defaultButton"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code><mx:NavBar></code> tag inherits all of the tag attributes
  of its superclass, with the exception of scrolling-related
  attributes, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:<i>tagname</i>
    <strong>Properties</strong>
    dataProvider="<i>No default</i>"
    iconField="icon"
    labeField="label"
    selectedIndex="-1"
    toolTipField="toolTip"
     
    <strong>Events</strong>
    itemClick="<i>No default</i>"
    &gt;
     ...
       <i>child tags</i>
     ...
    &lt;/mx:<i>tagname</i>&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.containers:Box</apiBaseClassifier></apiClassifierDef><apiDesc>
  NavBar 控件是导航器控件（如 LinkBar 和 TabBar）的 superclass，无法直接进行实例化。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.collections.xml#IList"><linktext>mx.collections.IList</linktext></link><link href="mx.containers.xml#ViewStack"><linktext>mx.containers.ViewStack</linktext></link><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link><link href="mx.controls.xml#TabBar"><linktext>mx.controls.TabBar</linktext></link><link href="mx.controls.xml#ButtonBar"><linktext>mx.controls.ButtonBar</linktext></link></related-links><adobeApiEvent id="mx.controls:NavBar_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  当选中项目时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当选中项目时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:NavBar:NavBar"><apiName>NavBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:NavBar:protected:clickHandler"><apiName>clickHandler</apiName><shortdesc>
      处理 NavBar 控件中项目的 MouseEvent.CLICK 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:MouseEvent"/><apiDesc>事件对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 NavBar 控件中项目的 <codeph>MouseEvent.CLICK</codeph> 事件。此处理函数为 NavBar 控件分派 <codeph>itemClick</codeph> 事件。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:protected:createNavItem"><apiName>createNavItem</apiName><shortdesc>
      创建单独的导航器项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>已创建完成的导航器项目。
      
      </apiDesc><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>label</apiItemName><apiType value="String"/><apiDesc>已创建完成的导航器项目的标签。 
     
      </apiDesc></apiParam><apiParam><apiItemName>icon</apiItemName><apiType value="Class"/><apiData>null</apiData><apiDesc>已创建完成的导航器项目的图标。通常，您会将此图标嵌入到应用程序中。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建单独的导航器项目。默认情况下，此方法不执行任何操作。您可以在子类中覆盖此方法，以根据子类中导航器项目的类型创建导航器项目。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:protected:hiliteSelectedNavItem"><apiName>hiliteSelectedNavItem</apiName><shortdesc>
      加亮所选的导航器项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>NavBar 控件中所选项目的索引。第一个项目在索引为 0 的位置。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      加亮所选的导航器项目。默认情况下，此方法不执行任何操作。您可以在子类中覆盖此方法，以加亮所选的导航器项目。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      返回渲染器根据 labelField 和 labelFunction 属性显示给定数据对象的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>根据数据要显示的字符串。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>要呈示的对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回渲染器根据 labelField 和 labelFunction 属性显示给定数据对象的字符串。如果该方法无法将参数转换为字符串，则会返回一个空格。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:protected:resetNavItems"><apiName>resetNavItems</apiName><shortdesc>
      将导航器栏重置为其默认状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      将导航器栏重置为其默认状态。默认情况下，此方法不执行任何操作。您可以在子类中覆盖此方法，以将导航器栏重置为默认状态。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:protected:updateNavItemIcon"><apiName>updateNavItemIcon</apiName><shortdesc>
      重设 NavBar 控件中导航器项目的图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>NavBar 控件中导航器项目的索引。第一个导航器项目在索引为 0 的位置。
     
      </apiDesc></apiParam><apiParam><apiItemName>icon</apiItemName><apiType value="Class"/><apiDesc>导航器项目的新图标。通常，您会将此图标嵌入到应用程序中。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      重设 NavBar 控件中导航器项目的图标。您可以在子类中覆盖此方法，以根据子类中导航器项目的类型设置导航器项目的图标。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:NavBar:protected:updateNavItemLabel"><apiName>updateNavItemLabel</apiName><shortdesc>
      设置 NavBar 控件中导航器项目的标签属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>NavBar 控件中导航器项目的索引。第一个导航器项目在索引为 0 的位置。
     
      </apiDesc></apiParam><apiParam><apiItemName>label</apiItemName><apiType value="String"/><apiDesc>导航器项目的新标签文本。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置 NavBar 控件中导航器项目的标签属性。您可以在子类中覆盖此方法，以根据子类中导航器项目的类型设置导航器项目的标签。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:NavBar:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      用于填充导航器控件的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"undefined"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用于填充导航器控件的数据。数据类型可以是 ViewStack 容器也可以是 Array。
     
      <p>当使用 ViewStack 容器时，ViewStack 容器子项的 <codeph>label</codeph> 和 <codeph>icon</codeph> 属性用于填充导航项目，如以下示例所示：</p>
     
      <pre>
      &lt;mx:LinkBar dataProvider="{vs}"/>
      &lt;mx:ViewStack id="vs">
        &lt;mx:VBox label="Accounts" icon="account_icon"/>
        &lt;mx:VBox label="Leads" icon="leads_icon"/>
      &lt;/mx:ViewStack> </pre>
      
      <p>LinkBar 控件包含两个链接：“Accounts”和“Leads”，每个链接都有各自的图标，这些图标在 VBox 标签上指定。单击某个链接时，ViewStack 容器就会导航到相应的视图。</p>
     
      <p>使用 Array 时，<codeph>labelField</codeph> 属性可确定 <codeph>dataProvider</codeph> 字段的名称，这些字段将用作各个导航项目的标签；<codeph>iconField</codeph> 属性可确定 <codeph>dataProvider</codeph> 字段的名称，这些字段将用作各个导航项目的图标。如果使用字符串的 Array，则会忽略 <codeph>labelField</codeph> 属性。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NavBar:iconField:get"><apiName>iconField</apiName><shortdesc>
      dataProvider 对象中字段的名称，显示为每个导航项目的图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"icon"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>dataProvider</codeph> 对象中字段的名称，显示为每个导航项目的图标。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NavBar:labelField:get"><apiName>labelField</apiName><shortdesc>
      dataProvider 对象中字段的名称，显示为每个导航项目的标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>dataProvider</codeph> 对象中字段的名称，显示为每个导航项目的标签。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NavBar:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      用户提供的函数，在每个项目上运行以确定其标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用户提供的函数，在每个项目上运行以确定其标签。默认情况下，该组件会查找每个数据提供程序项目上名为 <codeph>label</codeph> 的属性，并显示该属性。但是，一些数据集不包含 <codeph>label</codeph> 属性，也不包含可用于显示的其它属性。例如，数据集中包含 lastName 和 firstName 字段，但您希望显示全名。
     
      <p>您可以提供一个 <codeph>labelFunction</codeph>，用于查找合适的字段并返回可显示的字符串。<codeph>labelFunction</codeph> 还非常适用于处理格式设置和本地化。 </p>
     
      <p>对于大多数组件而言，此标签函数仅使用数据提供程序中的某个项目作为唯一参数，并返回一个 String。</p>
      <pre>
      myLabelFunction(item:Object):String</pre>
     
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NavBar:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      活动导航项目的索引，其中第一个项目在索引为 0 的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      活动导航项目的索引，其中第一个项目在索引为 0 的位置。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NavBar:toolTipField:get"><apiName>toolTipField</apiName><shortdesc>
      dataProvider 对象中字段的名称，显示为工具提示标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"toolTip"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>dataProvider</codeph> 对象中字段的名称，显示为工具提示标签。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:TextInput"><apiName>TextInput</apiName><shortdesc>
  TextInput 控件是可选择编辑的单行文本字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="baseColor"/><Exclude kind="method" name="selectionAnchorPosition"/><Exclude kind="method" name="selectionActivePosition"/><Alternative owner="mx.controls:TextInput" replacement="spark.components.TextInput" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  组件的上边界与其内容区域上边缘之间的像素数目。
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  组件的下边界与其内容区域下边缘之间的像素数目。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件对焦时，对焦环的颜色
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的内容区域的颜色。
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="Number">
<description>
  组件内容背景的透明度。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:TextInput" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:TextInput" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:TextInput" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:TextInput" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:TextInput" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:TextInput" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  指定焦点矩形的哪些角应该是圆角。此值是使用空格分隔的 String，该 String 可以是 <codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> 和 <codeph>"br"</codeph> 的任意组合。例如，要指定右侧的角为圆角，左侧的角为直角，应使用 <codeph>"tr br"</codeph>。<codeph>cornerRadius</codeph> 样式属性指定圆角的半径。默认值取决于组件类；如果未覆盖该类的默认值，则默认值为 <codeph>"tl tr bl br"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:TextInput" playerVersion="Flash9" type="Number">
<description>
  指定焦点外观的 alpha 透明度值。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="Number">
<description>
  投影距离。如果将此属性设置为负值，此阴影将出现在组件的上方。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="String">
<description>
  投影方向。可能值包括 <codeph>"left"</codeph>、<codeph>"center"</codeph> 和 <codeph>"right"</codeph>。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="uint">
<description>
  投影颜色。
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  指定组件是否具有可见投影的布尔值属性。默认值为 <codeph>false</codeph>。
 
  <p><b>注意：</b>对于显示在容器上的投影，需设置 <codeph>contentBackgroundColor</codeph> 属性。否则，由于容器的背景默认为透明，阴影将显示在容器后。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  指定组件是否具有可见投影的布尔值属性。此样式与 <codeph>borderStyle="solid"</codeph> 一起使用。默认值为 <codeph>false</codeph>。
 
  <p><b>注意：</b>对于显示在容器上的投影，需设置 <codeph>backgroundColor</codeph> 或 <codeph>backgroundImage</codeph> 属性。否则，由于容器的背景默认为透明，阴影将显示在容器后。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  组件角的半径。对于 ApplicationControlBar，默认值为 5。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  边框可视性。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="Number">
<description>
  边框厚度。仅在将 <codeph>borderStyle</codeph> 设置为 <codeph>"solid"</codeph> 时使用。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.controls:TextInput" playerVersion="Flash9" type="String">
<description>
  边框样式。可能值为 <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph>。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 <codeph>"inset"</codeph>。大多数容器的默认值为 <codeph>"none"</codeph>。<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph> 值只在 halo 主题中有效。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.controls:TextInput" playerVersion="Flash9" type="Class">
<description>
  组件的边框外观类。<codeph/><codeph/><codeph/><codeph/>要确定组件的默认值，请参阅 default.css 文件。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="String">
<description>
  边框边。指定要显示的边框边的以空格分隔的 String。此 String 可以任意顺序包含 <codeph>"left"</codeph>、<codeph>"top"</codeph>、<codeph>"right"</codeph> 和 <codeph>"bottom"</codeph>。默认值为 <codeph>"left top right bottom"</codeph>，此值会显示所有四条边。仅当 borderStyle 为 <codeph>"solid"</codeph> 时才使用此样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  边框颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.controls:TextInput" playerVersion="Flash10" theme="spark" type="Number">
<description>
  边框 Alpha（透明度）。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="String">
<description>
  将 <codeph>backgroundImage</codeph> 指定的图像缩放到不同的百分比大小。<codeph>"100%"</codeph> 值将拉抻该图像以适应整个组件。要指定百分比值，您必须输入百分号 (%)。Application 容器的默认值为 <codeph>100%</codeph>。所有其它容器的默认值为 <codeph>auto</codeph>，此值将保持图像的原始大小。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="Object">
<description>
  组件的背景图像。此样式可以是绝对或相对 URL 或类。您既可以设置 <codeph>backgroundColor</codeph>，也可以设置 <codeph>backgroundImage</codeph>。背景图像显示在背景色上面。默认值为 <codeph>undefined</codeph>，表示“未设置”。如果此样式和 <codeph>backgroundColor</codeph> 样式都未定义，则控件将采用透明背景。
 
  <p>大多数 Flex 控件的默认外观为半透明。因此，容器的背景图像将在某种程度上“渗入”该容器中的控件。通过将控件的 <codeph>fillAlphas</codeph> 属性的 alpha 值设置为 1 可以避免此情况，如以下示例所示：
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="uint">
<description>
  禁用组件时的组件的背景颜色。全局默认值为 <codeph>undefined</codeph>。List 控件的默认值为 <codeph>0xDDDDDD</codeph>（浅灰）。如果禁用了容器，背景将变暗，而暗淡程度由 <codeph>disabledOverlayAlpha</codeph> 样式控制。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="uint">
<description>
  组件的背景颜色。您可以同时设置 <codeph>backgroundColor</codeph> 和 <codeph>backgroundImage</codeph>。一些组件没有背景。DataGrid 控件会忽略此样式。默认值为 <codeph>undefined</codeph>，即不进行设置。如果此样式和 <codeph>backgroundImage</codeph> 样式都为 <codeph>undefined</codeph>，则控件将采用透明背景。
 
  <p>对于 Application 容器，此样式指定应用程序加载时的背景色以及运行该应用程序时的背景渐变。Flex 计算比指定颜色略深的颜色和比指定颜色略浅的颜色之间的渐变。</p>
 
  <p>大多数 Flex 控件的默认外观为半透明。因此，容器的背景颜色将在某种程度上“渗入”该容器中的控件。通过将控件的 <codeph>fillAlphas</codeph> 属性的 alpha 值设置为 1 可以避免此情况，如以下示例所示：
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.controls:TextInput" playerVersion="Flash9" theme="halo" type="Number">
<description>
  <codeph>backgroundColor</codeph> 属性定义的颜色和 <codeph>backgroundImage</codeph> 样式定义的图像或 SWF 文件的 Alpha 级别。有效值范围为从 0.0 到 1.0。对于大多数控件，默认值为 1.0，但 ToolTip 控件的默认值为 0.95，而 Alert 控件的默认值为 0.9。
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TextInput&gt;</code> tag inherits the attributes
  of its superclass and adds the following attributes:</p>
 
  <pre>
  &lt;mx:TextInput
    <b>Properties</b>
    condenseWhite="false|true"
    data="undefined"
    displayAsPassword="false|true"
    editable="true|false"
    horizontalScrollPosition="0"
    htmlText=""
    imeMode="null"
    length="0"
    listData="null"
    maxChars="0"
    parentDrawsFocus="false"
    restrict="null"
    selectionBeginIndex="0"
    selectionEndIndex="0"
    text=""
    textHeight="0"
    textWidth="0"
    &nbsp;
    <b>Styles</b>
    backgroundAlpha="1.0"
    backgroundColor="undefined"
    backgroundImage="undefined"
    backgroundSize="auto"
    borderColor="0xAAB3B3"
    borderSides="left top right bottom"
    borderSkin="mx.skins.halo.HaloBorder"
    borderStyle="inset"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    dropShadowColor="0x000000"
    dropShadowEnabled="false"
    focusAlpha="0.5"
    focusRoundedCorners"tl tr bl br"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|none|subpixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    paddingLeft="0"
    paddingRight="0"
    shadowDirection="center"
    shadowDistance="2"
    textAlign="left|right|center"
    textDecoration="none|underline"
    textIndent="0"
    &nbsp;
    <b>Events</b>
    change="<i>No default</i>"
    dataChange="<i>No default</i>"
    enter="<i>No default</i>"
    textInput="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>TextInput 是可编辑的单行文本字段。
  
  </apiTipText></apiTipTexts><apiBaseInterface>mx.core:ITextInput</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  TextInput 控件是可选择编辑的单行文本字段。此控件中的所有文本都必须使用相同的样式，除非为 HTML 文本。TextInput 控件支持 Flash Player 和 AIR 的 HTML 呈示功能。
 
  <p>TextInput 控件不包含标签，但是您可以使用 Label 控件或通过将 TextInput 控件嵌套到 Form 容器中的 FormItem 控件添加一个标签。在 FormItem 控件中使用时，TextInput 控件指示是否需要值。TextInput 控件具有许多状态，包括已填充、已选中、已禁用和错误。TextInput 控件支持格式化、验证和键盘等效项；还可分派更改和输入事件。</p>
 
  <p>如果禁用 TextInput 控件，则将以 <codeph>disabledColor</codeph> 样式指定的颜色显示其内容。若要禁止编辑文本，请将 <codeph>editable</codeph> 属性设置为 <codeph>false</codeph>。要通过使用星号代替输入的字符来隐藏输入文本，请将 <codeph>displayAsPassword</codeph> 属性设置为 <codeph>true</codeph>。</p>
 
  <p>TextInput 控件可用作其它几个控件的子组件，如 RichTextEditor、NumericStepper 和 ComboBox 控件。因此，如果使用 CSS 类型选择器将样式属性分配给 TextInput 控件，则除非显式覆盖这些属性，否则当 TextInput 显示在其它控件中时，Flex 会将这些样式应用到该控件。</p>
 
  <p>TextInput 控件具有下列默认大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>文本的默认最小高度为 22 个像素，最小宽度为 160 个像素</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 × 10000 个像素</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TextInputExample.mxml"><swfblock conref="examples/TextInputExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Label"><linktext>mx.controls.Label</linktext></link><link href="mx.controls.xml#Text"><linktext>mx.controls.Text</linktext></link><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link><link href="mx.controls.xml#RichTextEditor"><linktext>mx.controls.RichTextEditor</linktext></link><link href="mx.controls.textClasses.xml#TextRange"><linktext>mx.controls.textClasses.TextRange</linktext></link></related-links><adobeApiEvent id="mx.controls:TextInput_flash.events.TextEvent.TEXT_INPUT_textInput"><apiName>textInput</apiName><shortdesc>
  当用户在该控件中键入、删除或粘贴文本时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户在该控件中键入、删除或粘贴文本时分派。当用户按 Delete 键或 Backspace 键时，不会分派任何事件。
 
  <p>即使 <codeph>TextEvent.bubbles</codeph> 属性的默认值是 <codeph>true</codeph>，此控件也会在 <codeph>TextEvent.bubbles</codeph> 属性设置为 <codeph>false</codeph> 时分派该事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextInput_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  当用户按下 Enter 时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户按下 Enter 时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextInput_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:TextInput_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  通过用户输入更改 TextInput 控件中的文本时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  通过用户输入更改 TextInput 控件中的文本时分派。使用数据绑定或 ‏‏‎‎ActionScript 代码更改文本时不会引发此事件。
 
  <p>即使 <codeph>Event.bubbles</codeph> 属性的默认值是 <codeph>true</codeph>，该控件也会在 <codeph>Event.bubbles</codeph> 属性设置为 <codeph>false</codeph> 时分派此事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:TextInput:TextInput"><apiName>TextInput</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:TextInput:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      为此组件创建边框。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      为此组件创建边框。通常，边框由 <codeph>borderStyle</codeph> 和 <codeph>borderSkin</codeph> 样式确定。它必须将边框属性设置为边框实例。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:TextInput:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc>
      返回 TextLineMetrics 对象，其中包含控件中文本位置和文本行度量值的相关信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含控件中指定文本行的文本位置和度量值的相关信息的对象。
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/><apiDesc>要获得其度量值的行的索引（从零开始）。 
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回 TextLineMetrics 对象，其中包含控件中文本位置和文本行度量值的相关信息。必须对组件进行验证才能获得正确数值。如果设置 <codeph>text</codeph> 或 <codeph>htmlText</codeph> 属性后立即调用 <codeph>getLineMetrics()</codeph>，则可能会获得不正确的值。您应该等待对组件进行验证或调用 <codeph>validateNow()</codeph>。此行为与 flash.text.TextField 类的行为不同，后者立即更新值。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:TextInput:selectRange"><apiName>selectRange</apiName><shortdesc>
      选择由这些参数指定的范围内的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>anchorIndex</apiItemName><apiType value="int"/></apiParam><apiParam><apiItemName>activeIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef><apiDesc>
      选择由这些参数指定的范围内的文本。与 <codeph>setSelection</codeph> 不同，此行为会立即执行。
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#TextInput/setSelection"><linktext>mx.controls.TextInput.setSelection</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:TextInput:setSelection"><apiName>setSelection</apiName><shortdesc>
      选择由这些参数指定的范围内的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiType value="int"/><apiDesc>所选内容中第一个字符的从零开始的索引；即第一个字符是 0，第二个字符是 1，依此类推。
     
      </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiType value="int"/><apiDesc>所选内容中最后一个字符<i>之后</i>的位置的从零开始的索引（相当于最后一个字符的从一开始的索引）。例如，如果此参数是 5，则所选内容中的最后一个字符是第五个字符。当 TextInput 控件获得焦点时，如果已经设置了 <codeph>selectionBeginIndex</codeph> 和 <codeph>selectionEndIndex</codeph> 这两种属性，则将能够看到所选内容。
     
      </apiDesc></apiParam><apiTipTexts><apiTipText>设置新的文本选择。
      
      </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
      选择由这些参数指定的范围内的文本。如果控件未获得焦点，则加亮显示的选中内容在控件获得焦点后才显示。此外，如果通过单击控件获得焦点，则先前选定的任何内容都将丢失。如果这两个参数的值相同，则新的所选焦点为插入点。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:TextInput:showBorderAndBackground"><apiName>showBorderAndBackground</apiName><shortdesc>
      用于确定控件的边框和背景是否可视。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>visible</apiItemName><apiType value="Boolean"/></apiParam></apiOperationDef><apiDesc>
      用于确定控件的边框和背景是否可视。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:TextInput:protected:textField"><apiName>textField</apiName><shortdesc>
      呈示此 TextInput 文本的内部 UITextField。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      呈示此 TextInput 文本的内部 UITextField。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc>
      指定是否应删除包含 HTML 文本的 TextInput 控件中的额外空白（空格、换行符等）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是否应删除包含 HTML 文本的 TextInput 控件中的额外空白（空格、换行符等）。
     
      <p><codeph>condenseWhite</codeph> 属性仅会对使用 <codeph>htmlText</codeph> 属性设置的文本产生影响，而不会对使用 <codeph>text</codeph> 属性设置的文本产生影响。如果使用 <codeph>text</codeph> 属性设置文本，则忽略 <codeph>condenseWhite</codeph>。</p>
     
      <p>如果将 <codeph>condenseWhite</codeph> 属性设置为 <codeph>true</codeph>，您必须使用标准 HTML 命令（如 <codeph>&lt;br></codeph> 和 <codeph>&lt;p></codeph>）在文本字段中放置换行符。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:data:get"><apiName>data</apiName><shortdesc>
      用于在项呈示器或项目编辑器中使用组件时将值传递给该组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      用于在项呈示器或项目编辑器中使用组件时将值传递给该组件。您通常使用数据绑定将 <codeph>data</codeph> 属性的字段绑定到此组件的某个属性。
     
      <p>将控件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 自动将项目的当前值写入此控件的 <codeph>text</codeph> 属性。</p>
     
      <p>不要以 MXML 方式设置此属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:displayAsPassword:get"><apiName>displayAsPassword</apiName><shortdesc>
      指示此控件是否用于输入密码。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3197
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue><apiTipTexts><apiTipText>指定是否显示 ' 来代替实际字符
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      指示此控件是否用于输入密码。如果值 <codeph>true</codeph>，则该字段将不显示输入的文本，输入到该控件中的每个文本字符都将显示为字符“*”。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:editable:get"><apiName>editable</apiName><shortdesc>
      指示用户是否可以编辑此控件中的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3196
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue><apiTipTexts><apiTipText>指定是否可以编辑该组件
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      指示用户是否可以编辑此控件中的文本。如果值为 <codeph>true</codeph>，则表示用户可以编辑文本。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      
      为此组件提供字体上下文的模块工厂。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      
      为此组件提供字体上下文的模块工厂。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:horizontalScrollPosition:get"><apiName>horizontalScrollPosition</apiName><shortdesc>
      当前显示的最左端像素的内容区域中的像素位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3194
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0

      </apiDefaultValue><apiTipTexts><apiTipText>当前显示的最左端字符的像素位置
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      当前显示的最左端像素的内容区域中的像素位置。（内容区域包括控件的所有内容，不是仅包括当前显示的部分。）该属性始终设置为 0，并且如果将 <codeph>wordWrap</codeph> 设置为 <codeph>true</codeph>，将忽略更改。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:htmlText:get"><apiName>htmlText</apiName><shortdesc>
      指定 TextInput 控件显示的文本，包括用于表示文本样式的 HTML 标记。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 TextInput 控件显示的文本，包括用于表示文本样式的 HTML 标记。在此属性中指定 HTML 文本时，可以使用 Flash TextField 控件支持的 HTML 标记子集。
     
      <p> 设置此属性时，会在应用 TextInput 实例的 CSS 样式后应用 HTML 标记。获取此属性时，HTML 标记包括 CSS 样式。</p>
      
      <p>例如，如果将此属性设置为 <codeph>"This is an example of &lt;b>bold&lt;/b> markup"</codeph> 之类的字符串，则文本“This is an example of <b>bold</b> markup”将以通常应用的 CSS 样式在 TextInput 中进行显示。此外，由于存在 <codeph>&lt;b></codeph> 标记，“bold”一词将显示为粗体。</p>
     
      <p>HTML 标记使用 &lt; and > 等字符，这些字符在 XML 中具有特殊意义（在 MXML 中也同样如此）。所以，以下代码不能编译：</p>
      
      <pre>
      &lt;mx:TextInput htmlText="This is an example of &lt;b>bold&lt;/b> markup"/>
      </pre>
      
      <p>有三种方法可以解决此问题。</p>
      
      <ul>
      
      <li>
      
      <p>在作为 <codeph>initialize</codeph> 处理函数调用的 ActionScript 方法中设置 <codeph>htmlText</codeph> 属性：</p>
      
      <pre>
      &lt;mx:TextInput id="myTextInput" initialize="myTextInput_initialize()"/>
      </pre>
      
      <p>其中 <codeph>myTextInput_initialize</codeph> 方法位于脚本 CDATA 节：</p>
      
      <pre>
      &lt;mx:Script>
      &lt;![CDATA[
      private function myTextInput_initialize():void {
          myTextInput.htmlText = "This is an example of &lt;b>bold&lt;/b> markup";
      }
      ]]&gt;
      &lt;/mx:Script>
      
      </pre>
      
      <p>由于 HTML 标记依然简单易读，因此这是最简单的方法。请注意，必须为 TextInput 分配 <codeph>id</codeph>，以便在 <codeph>initialize</codeph> 处理函数中引用它。</p>
      
      </li>
      
      <li>
      
      <p>使用带有 CDATA 节的子标签指定 <codeph>htmlText</codeph> 属性。XML 中的 CDATA 节包含字符数据，其中 &lt; 和 > 等字符不具有特殊意义。</p>
      
      <pre>
      &lt;mx:TextInput>
          &lt;mx:htmlText>&lt;![CDATA[This is an example of &lt;b>bold&lt;/b> markup]]&gt;&lt;/mx:htmlText>
      &lt;mx:TextInput/>
      </pre>
      
      <p>您必须将 <codeph>htmlText</codeph> 属性编写为子标签，而不是 <codeph>&lt;mx:TextInput></codeph> 标签上的某一属性，因为 XML 不允许属性值中含有 CDATA。请注意，该标记可读性依然很好，但由于涉及到 CDATA 节，该方法比较复杂。</p>
      
      </li>
      
      <li>
      
      <p>使用 <codeph>hmtlText</codeph> 属性，其中只要是 HTML 标记字符 &lt; 和 >，在属性值中就会显示为 XML“实体”<codeph>&amp;lt;</codeph> 和 <codeph>&amp;gt;</codeph>：</p>
      
      <pre>
      &lt;mx:TextInput htmlText="This is an example of &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt; markup"/&amp;gt;
      </pre>
      
      由于使用此方法时 HTML 标记的可读性很差，因此 Adobe 不建议使用此方法。
      
      </li>
      
      </ul>
      
      <p>设置 <codeph>htmlText</codeph> 属性时，如果 <codeph>condenseWhite</codeph> 属性为 <codeph>true</codeph>，将压缩多个空白字符（与基于 HTML 的浏览器中的情况类似），例如，三个连续的空格显示为一个空格。<codeph>condenseWhite</codeph> 的默认值为 <codeph>false</codeph>，因此，若要压缩空白字符，必须将 <codeph>condenseWhite</codeph> 设置为 <codeph>true</codeph>。</p>
      
      <p>如果设置 <codeph>htmlText</codeph> 属性后立即重新读取该属性，将会看到设置的字符串。但是，如果 LayoutManager 开始运行，该值将发生更改，以包括包含 CSS 样式的其它标记。</p>
      
      <p>设置 <codeph>htmlText</codeph> 属性将影响 <codeph>text</codeph> 属性的多个方面。如果设置 <codeph>htmlText</codeph> 属性后立即读取 <codeph>text</codeph> 属性，则您将收到 <codeph>null</codeph>，这表明尚未确定与新的 <codeph>htmlText</codeph> 相对应的 <codeph>text</codeph>。但是，如果 LayoutManager 开始运行，则 <codeph>text</codeph> 属性值将更改为删除了所有 HTML 标记的 <codeph>htmlText</codeph> 字符串，即此值为 TextInput 实际显示的字符。</p>
       
      <p>反之，如果设置 <codeph>text</codeph> 属性，则先前设置的任何 <codeph>htmlText</codeph> 都将是不相关的。如果设置 <codeph>text</codeph> 属性后立即读取 <codeph>htmlText</codeph> 属性，则您将收到 <codeph>null</codeph>，这表明尚未确定与新的 <codeph>text</codeph> 相对应的 <codeph>htmlText</codeph>。但是，如果 LayoutManager 开始运行，<codeph>htmlText</codeph> 属性值更改为新的文本以及 CSS 样式的 HTML 标记。</p>
     
      <p>要使 LayoutManager 立即运行，您可以调用 TextInput 的 <codeph>validateNow()</codeph> 方法。例如，您可以设置一些 <codeph>htmlText</codeph>，调用 <codeph>validateNow()</codeph> 方法，然后立即获得相应的不包含 HTML 标记的 <codeph>text</codeph>。</p>
      
      <p>如果在 ActionScript 中设置 <codeph>text</codeph> 和 <codeph>htmlText</codeph> 两种属性，则最后设置的属性会生效。切勿在 MXML 中同时设置这两种属性，因为 MXML 不保证能够以特定顺序对实例的属性进行设置。</p>
      
      <p>在某个循环内设置 <codeph>text</codeph> 或 <codeph>htmlText</codeph> 属性的操作完成得很快，因为实际呈示文本的基础 TextField 在 LayoutManager 运行后才更新。</p>
     
      <p>如果尝试将此属性设置为 <codeph>null</codeph>，则该属性将设置为空字符串。如果属性值暂时为 <codeph>null</codeph>，则表明刚刚设置了 <codeph>text</codeph>，但尚未确定相应的 <codeph>htmlText</codeph>。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。当控件获得焦点时，Flex 设置指定的 IME 模式；当该控件失去焦点时，则将其设置回为先前的值。
     
      <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:length:get"><apiName>length</apiName><shortdesc>
      TextArea 中显示的文本的字符数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3192
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>0
      </apiDefaultValue><apiTipTexts><apiTipText>TextInput 中的字符数。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      TextArea 中显示的文本的字符数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:listData:get"><apiName>listData</apiName><shortdesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 list 控件中的相应数据初始化该组件的 listData 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 list 控件中的相应数据初始化该组件的 <codeph>listData</codeph> 属性。然后，组件可使用 <codeph>listData</codeph> 属性初始化嵌入式项呈示器或嵌入式项目编辑器的 <codeph>data</codeph> 属性。
     
      <p>您无需在 MXML 或 ActionScript 中设置此属性；将组件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 会对其进行设置。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      用户可以在文本字段中输入的最大字符数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3191
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiTipTexts><apiTipText>TextInput 最多可以容纳的字符数
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      用户可以在文本字段中输入的最大字符数。此属性对通过设置控件的 <codeph>text</codeph> 或 <codeph>htmlText</codeph> 属性指定的文本的长度没有限制。
     
      <p>默认值为 0，这是一种特殊情况，表示字符数不受限制。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:parentDrawsFocus:get"><apiName>parentDrawsFocus</apiName><shortdesc>
      如果为 true，则调用此控件的 drawFocus() 方法会转到其父项的 drawFocus() 方法上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 true，则调用此控件的 drawFocus() 方法会转到其父项的 drawFocus() 方法上。这用于当 TextInput 为复合控件（如 NumericStepper 或 ComboBox）的一部分时。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:restrict:get"><apiName>restrict</apiName><shortdesc>
      指示用户可以输入到控件的字符集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3193
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      </apiDefaultValue><apiTipTexts><apiTipText>可以输入到 TextInput 的字符集。
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      指示用户可以输入到控件的字符集。如果 <codeph>restrict</codeph> 属性的值为 <codeph>null</codeph>，则可以输入任何字符。如果 <codeph>restrict</codeph> 属性的值为空字符串，则不能输入任何字符。此属性只限制用户交互；脚本可以将任何文本放入文本字段中。如果 <codeph>restrict</codeph> 属性的值为字符串，则只能在文本字段中输入该字符串中的字符。
     
      <p>Flex 按从左到右的顺序浏览字符串。可以使用连字符 (-) 指定一个范围。如果字符串以尖号 (^) 开头，则先接受所有字符，然后从接受字符集中排除字符串中 ^ 之后的字符。如果字符串不以尖号 (^) 开头，则最初不接受任何字符，然后将字符串中的字符包括在接受字符集中。</p>
     
      <p>由于某些字符在 <codeph>restrict</codeph> 属性中使用时具有特殊的意义，因此必须使用反斜杠字符指定文本字符 -、^ 和 \。将 <codeph>restrict</codeph> 属性用作 MXML 标签中的属性时，请使用单一反斜杠，如下例所示：\^\-\\。当您在 ActionScript 表达式中设置 <codeph>restrict</codeph> 时，请使用两个反斜杠，如下例所示：\\^\\-\\\。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/restrict"><linktext>flash.text.TextField.restrict</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:selectable:get"><apiName>selectable</apiName><shortdesc>
      一个标志，指示是否可以选择 TextInput 中的文本。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，指示是否可以选择 TextInput 中的文本。
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:selectionActivePosition:get"><apiName>selectionActivePosition</apiName><shortdesc>
      对于 ITextInput 接口，与 selectionEndIndex 相同。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      对于 ITextInput 接口，与 selectionEndIndex 相同。
      
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#TextInput/selectionEndIndex"><linktext>mx.controls.TextInput.selectionEndIndex</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:selectionAnchorPosition:get"><apiName>selectionAnchorPosition</apiName><shortdesc>
      对于 ITextInput 接口，与 selectionBeginIndex 相同。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      对于 ITextInput 接口，与 selectionBeginIndex 相同。
      
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#TextInput/selectionBeginIndex"><linktext>mx.controls.TextInput.selectionBeginIndex</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:selectionBeginIndex:get"><apiName>selectionBeginIndex</apiName><shortdesc>
      当前所选内容中第一个字符从零开始的字符索引值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>所选内容中第一个字符从零开始的索引值。
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      当前所选内容中第一个字符从零开始的字符索引值。例如，第一个字符的索引值是 0，第二个字符的索引值是 1，依此类推。当控件获得焦点时，如果已经设置了 <codeph>selectionBeginIndex</codeph> 和 <codeph>selectionEndIndex</codeph> 这两种属性，则将能够看到所选内容。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:selectionEndIndex:get"><apiName>selectionEndIndex</apiName><shortdesc>
      当前所选内容中最后一个字符后的位置从零开始的索引（与最后一个字符的从一开始的索引相等）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
     
      </apiDefaultValue><apiTipTexts><apiTipText>所选内容中最后一个字符从零开始的索引值。
      
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      当前所选内容中最后一个字符<i>后</i>的位置从零开始的索引（与最后一个字符的从一开始的索引相等）。例如，如果所选内容中的最后一个字符是第五个字符，则此属性的值为 5。当控件获得焦点时，如果已经设置了 <codeph>selectionBeginIndex</codeph> 和 <codeph>selectionEndIndex</codeph> 这两种属性，则将能够看到所选内容。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:text:get"><apiName>text</apiName><shortdesc>
      控件中出现的纯文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3190
      
      </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue><apiTipTexts><apiTipText>获取或设置 TextInput 内容
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      控件中出现的纯文本。其外观由此 Lable 控件的 CSS 样式确定。
      
      <p>文本字符串中的任何 HTML 标签都将被忽略，其显示效果就像以字符串形式输入的一样。要显示使用 HTML 标签进行格式设置的文本，请改用 <codeph>htmlText</codeph> 属性。如果设置了 <codeph>htmlText</codeph> 属性，则 HTML 将替换使用此属性设置的所有文本，并且 <codeph>text</codeph> 属性将返回 HTML 文本的纯文本版本，而从中去除了所有 HTML 标签。有关详细信息，请参阅 <codeph>htmlText</codeph> 属性。</p>
     
      <p>要在文本中包括特殊字符左尖括号 (&lt;)、右尖括号 (>) 或和号 (&amp;)，请将文本字符串包含在 CDATA 标签中。此外，您可以使用 HTML 字符实体表示特殊字符，例如 <codeph>&amp;lt;</codeph>。</p>
     
      <p>如果尝试将此属性设置为 <codeph>null</codeph>，则该属性将设置为空字符串。<codeph>text</codeph> 属性可暂时使用值 <codeph>null</codeph>，此值表示刚刚设置了 <codeph>htmlText</codeph> 值，但相应的 <codeph>text</codeph> 值尚未确定。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:TextInput:textHeight:get"><apiName>textHeight</apiName><shortdesc>
      文本高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      文本高度。
     
      <p>只有在组件经过验证后，<codeph>textHeight</codeph> 属性的值才是正确的。如果您在设置 <codeph>text</codeph> 后立即请求 <codeph>textHeight</codeph>，则接收到的值可能不正确。您应等待组件经过验证或调用 <codeph>validateNow()</codeph> 方法后，再获取此值。此行为与 flash.text.TextField 控件有所不同，后者会立即更新此值。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.controls:TextInput:textWidth:get"><apiName>textWidth</apiName><shortdesc>
      文本的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      文本的宽度。
     
      <p>只有在组件经过验证后，<codeph>textWidth</codeph> 属性的值才是正确的。如果您在设置 <codeph>text</codeph> 后立即请求 <codeph>textWidth</codeph>，则接收到的值可能不正确。您应等待组件经过验证或调用 <codeph>validateNow()</codeph> 方法后，再获取此值。此行为与 flash.text.TextField 控件有所不同，后者会立即更新此值。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
  NumericStepper 控件允许用户从有序集中选择编号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:NumericStepper" replacement="spark.components.NumericStepper" since="4.0">
	</Alternative><styles><style inherit="no" name="upArrowUpSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  启用向上箭头且鼠标指针不在该箭头上时，用作其外观的类的名称。
 
  </description>
<default>mx.skins.halo.NumericStepperUpSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upArrowOverSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  启用向上箭头且鼠标指针位于该箭头上时，用作其外观的类的名称。
 
  </description>
<default>mx.skins.halo.NumericStepperUpSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upArrowDownSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  启用向上箭头且用户在该箭头上按下鼠标按钮时，用作其外观的类的名称。
 
  </description>
<default>mx.skins.halo.NumericStepperUpSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upArrowDisabledSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  禁用向上箭头时，用作其外观的类的名称。
 
  </description>
<default>mx.skins.halo.NumericStepperUpSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upArrowSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  用作向上箭头默认外观的类的名称。
  
  </description>
<default>mx.skins.halo.NumericStepperUpSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textInputClass" owner="mx.controls:NumericStepper" playerVersion="Flash10" type="Class">
<description>
  实现该组件使用以输入文本的 ITextInput 的类。
 
  <p>既可以设置为 mx.core.TextInput 类（以使用经典 Halo TextInput 控件），也可以设置为 mx.controls.MXFTETextInput 类（以使用基于 Text Layout Framework 的 Spark TextInput 组件来改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.controls.TextInput
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的任何符号的颜色。示例包括 CheckBox 的复选标记或 ScrollBar 按钮的箭头。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Array">
<description>
  用于控件的加亮填充的 Alpha。
 
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件对焦时，对焦环的颜色
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="downArrowUpSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  启用向下箭头且鼠标指针不在该箭头上时，用作其外观的类的名称。无默认值。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downArrowOverSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  启用向下箭头且鼠标指针位于该箭头上时，用作其外观的类的名称。
  
  </description>
<default>mx.skins.halo.NumericStepperDownSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downArrowDownSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  启用向下箭头且用户在该箭头上按下鼠标按钮时，用作其外观的类的名称。
 
  </description>
<default>mx.skins.halo.NumericStepperDownSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downArrowDisabledSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  禁用向下箭头时，用作其外观的类的名称。
 
  </description>
<default>mx.skins.halo.NumericStepperDownSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downArrowSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  用作向下箭头默认外观的类的名称。
 
  </description>
<default>mx.skins.halo.NumericStepperDownSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的内容区域的颜色。
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  组件内容背景的透明度。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:NumericStepper" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:NumericStepper" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:NumericStepper" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="uint">
<description>
  已禁用外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制禁用的 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制禁用的 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制禁用的 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x999999</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="uint">
<description>
  某个外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x111111</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  指定焦点矩形的哪些角应该是圆角。此值是使用空格分隔的 String，该 String 可以是 <codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> 和 <codeph>"br"</codeph> 的任意组合。例如，要指定右侧的角为圆角，左侧的角为直角，应使用 <codeph>"tr br"</codeph>。<codeph>cornerRadius</codeph> 样式属性指定圆角的半径。默认值取决于组件类；如果未覆盖该类的默认值，则默认值为 <codeph>"tl tr bl br"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Number">
<description>
  指定焦点外观的 alpha 透明度值。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Number">
<description>
  投影距离。如果将此属性设置为负值，此阴影将出现在组件的上方。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="String">
<description>
  投影方向。可能值包括 <codeph>"left"</codeph>、<codeph>"center"</codeph> 和 <codeph>"right"</codeph>。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="uint">
<description>
  投影颜色。
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  指定组件是否具有可见投影的布尔值属性。默认值为 <codeph>false</codeph>。
 
  <p><b>注意：</b>对于显示在容器上的投影，需设置 <codeph>contentBackgroundColor</codeph> 属性。否则，由于容器的背景默认为透明，阴影将显示在容器后。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  指定组件是否具有可见投影的布尔值属性。此样式与 <codeph>borderStyle="solid"</codeph> 一起使用。默认值为 <codeph>false</codeph>。
 
  <p><b>注意：</b>对于显示在容器上的投影，需设置 <codeph>backgroundColor</codeph> 或 <codeph>backgroundImage</codeph> 属性。否则，由于容器的背景默认为透明，阴影将显示在容器后。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  组件角的半径。对于 ApplicationControlBar，默认值为 5。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  边框可视性。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Number">
<description>
  边框厚度。仅在将 <codeph>borderStyle</codeph> 设置为 <codeph>"solid"</codeph> 时使用。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="String">
<description>
  边框样式。可能值为 <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph>。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 <codeph>"inset"</codeph>。大多数容器的默认值为 <codeph>"none"</codeph>。<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph> 值只在 halo 主题中有效。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.controls:NumericStepper" playerVersion="Flash9" type="Class">
<description>
  组件的边框外观类。<codeph/><codeph/><codeph/><codeph/>要确定组件的默认值，请参阅 default.css 文件。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="String">
<description>
  边框边。指定要显示的边框边的以空格分隔的 String。此 String 可以任意顺序包含 <codeph>"left"</codeph>、<codeph>"top"</codeph>、<codeph>"right"</codeph> 和 <codeph>"bottom"</codeph>。默认值为 <codeph>"left top right bottom"</codeph>，此值会显示所有四条边。仅当 borderStyle 为 <codeph>"solid"</codeph> 时才使用此样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  边框颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.controls:NumericStepper" playerVersion="Flash10" theme="spark" type="Number">
<description>
  边框 Alpha（透明度）。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="String">
<description>
  将 <codeph>backgroundImage</codeph> 指定的图像缩放到不同的百分比大小。<codeph>"100%"</codeph> 值将拉抻该图像以适应整个组件。要指定百分比值，您必须输入百分号 (%)。Application 容器的默认值为 <codeph>100%</codeph>。所有其它容器的默认值为 <codeph>auto</codeph>，此值将保持图像的原始大小。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Object">
<description>
  组件的背景图像。此样式可以是绝对或相对 URL 或类。您既可以设置 <codeph>backgroundColor</codeph>，也可以设置 <codeph>backgroundImage</codeph>。背景图像显示在背景色上面。默认值为 <codeph>undefined</codeph>，表示“未设置”。如果此样式和 <codeph>backgroundColor</codeph> 样式都未定义，则控件将采用透明背景。
 
  <p>大多数 Flex 控件的默认外观为半透明。因此，容器的背景图像将在某种程度上“渗入”该容器中的控件。通过将控件的 <codeph>fillAlphas</codeph> 属性的 alpha 值设置为 1 可以避免此情况，如以下示例所示：
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="uint">
<description>
  禁用组件时的组件的背景颜色。全局默认值为 <codeph>undefined</codeph>。List 控件的默认值为 <codeph>0xDDDDDD</codeph>（浅灰）。如果禁用了容器，背景将变暗，而暗淡程度由 <codeph>disabledOverlayAlpha</codeph> 样式控制。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="uint">
<description>
  组件的背景颜色。您可以同时设置 <codeph>backgroundColor</codeph> 和 <codeph>backgroundImage</codeph>。一些组件没有背景。DataGrid 控件会忽略此样式。默认值为 <codeph>undefined</codeph>，即不进行设置。如果此样式和 <codeph>backgroundImage</codeph> 样式都为 <codeph>undefined</codeph>，则控件将采用透明背景。
 
  <p>对于 Application 容器，此样式指定应用程序加载时的背景色以及运行该应用程序时的背景渐变。Flex 计算比指定颜色略深的颜色和比指定颜色略浅的颜色之间的渐变。</p>
 
  <p>大多数 Flex 控件的默认外观为半透明。因此，容器的背景颜色将在某种程度上“渗入”该容器中的控件。通过将控件的 <codeph>fillAlphas</codeph> 属性的 alpha 值设置为 1 可以避免此情况，如以下示例所示：
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.controls:NumericStepper" playerVersion="Flash9" theme="halo" type="Number">
<description>
  <codeph>backgroundColor</codeph> 属性定义的颜色和 <codeph>backgroundImage</codeph> 样式定义的图像或 SWF 文件的 Alpha 级别。有效值范围为从 0.0 到 1.0。对于大多数控件，默认值为 1.0，但 ToolTip 控件的默认值为 0.95，而 Alert 控件的默认值为 0.9。
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  The <code>&lt;mx:NumericStepper&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:
 
  <pre>
  &lt;mx:NumericStepper
    <strong>Properties</strong>
    imeMode="null"
    maxChars="10"
    maximum="10"
    minimum="0"
    stepSize="1"
    value="0"
  
    <strong>Styles</strong>
    backgroundAlpha="1.0"
    backgroundColor="undefined"
    backgroundImage="undefined"
    backgroundSize="auto"
    borderColor="0xAAB3B3"
    borderSides="left top right bottom"
    borderSkin="HaloBorder"
    borderStyle="inset"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    disabledIconColor="0x999999"
    downArrowDisabledSkin="NumericStepperDownSkin"
    downArrowDownSkin="NumericStepperDownSkin"
    downArrowOverSkin="NumericStepperDownSkin"
    downArrowUpSkin="NumericStepperDownSkin"
    dropShadowEnabled="false"
    dropShadowColor="0x000000"
    focusAlpha="0.5"
    focusRoundedCorners="tl tr bl br"
    fontAntiAliasType="advanced"
    fontFamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    highlightAlphas="[0.3,0.0]"
    iconColor="0x111111"
    leading="2"
    paddingLeft="0"
    paddingRight="0"
    shadowDirection="center"
    shadowDistance="2"
    textAlign="left|center|right"
    textDecoration="none|underline"
    textIndent="0"
    upArrowDisabledSkin="NumericStepperUpSkin"
    upArrowDownSkin="NumericStepperUpSkin"
    upArrowOverSkin="NumericStepperUpSkin"
    upArrowUpSkin="NumericStepperUpSkin"
  
    <strong>Events</strong>
    change="<i>No default</i>"
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  NumericStepper 控件允许用户从有序集中选择编号。NumericStepper 控件包括一个单行输入文本字段和一对用于逐一显示可能值的箭头按钮。还可使用向上箭头键和向下箭头键遍历这些值。
 
  <p>NumericStepper 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>足以显示控件使用的最大位数的宽度</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>基于文本的大小。</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>未定义</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="NumericStepperExample.mxml"><swfblock conref="examples/NumericStepperExample.swf"/></example></apiClassifierDetail><adobeApiEvent id="mx.controls:NumericStepper_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:NumericStepper_mx.events.NumericStepperEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  当 NumericStepper 控件的值由于用户交互操作而发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.NumericStepperEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.NumericStepperEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 NumericStepper 控件的值由于用户交互操作而发生更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:NumericStepper:NumericStepper"><apiName>NumericStepper</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:NumericStepper:data:get"><apiName>data</apiName><shortdesc>
      当您在项呈示器或项目编辑器中使用某个组件时，可借助 data 属性向该组件传递值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      当您在项呈示器或项目编辑器中使用某个组件时，可借助 <codeph>data</codeph> 属性向该组件传递值。您通常使用数据绑定将 <codeph>data</codeph> 属性的字段绑定到此组件的某个属性。
     
      <p>将控件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 自动将项目的当前值写入此控件的 <codeph>value</codeph> 属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:protected:downArrowStyleFilters:get"><apiName>downArrowStyleFilters</apiName><shortdesc>
      从 NumericStepper 传递到向下箭头的样式集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 NumericStepper 传递到向下箭头的样式集。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。当控件获得焦点时，Flex 设置指定的 IME 模式；当该控件失去焦点时，则将其设置回为先前的值。
     
     <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:protected:inputFieldStyleFilters:get"><apiName>inputFieldStyleFilters</apiName><shortdesc>
      从 NumericStepper 传递给输入字段的样式集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 NumericStepper 传递给输入字段的样式集。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:listData:get"><apiName>listData</apiName><shortdesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 List 控件中的相应数据初始化该组件的 listData 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 List 控件中的相应数据初始化该组件的 <codeph>listData</codeph> 属性。然后，组件可使用 <codeph>listData</codeph> 属性初始化嵌入式项呈示器或嵌入式项目编辑器的 <codeph>data</codeph> 属性。
     
      <p>您无需在 MXML 或 ActionScript 中设置此属性；将组件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 会对其进行设置。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:maxChars:get"><apiName>maxChars</apiName><shortdesc>
      字段中最多可输入的字符数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      字段中最多可输入的字符数。0 值表示可以输入任意数目的字符。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:maximum:get"><apiName>maximum</apiName><shortdesc>
      NumericStepper 的最大值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>10
      
      </apiDefaultValue></apiValueDef><apiDesc>
      NumericStepper 的最大值。最大值可以是任意数，包括小数值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:minimum:get"><apiName>minimum</apiName><shortdesc>
      NumericStepper 的最小值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      NumericStepper 的最小值。最小值可以是任意数，包括小数值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:nextValue:get"><apiName>nextValue</apiName><shortdesc>
      比当前 value 属性大一个步长，但不大于 maximum 属性值的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      比当前 <codeph>value</codeph> 属性大一个步长，但不大于 <codeph>maximum</codeph> 属性值的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:previousValue:get"><apiName>previousValue</apiName><shortdesc>
      比当前 value 属性小一个步长，但不小于 maximum 属性值的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      比当前 <codeph>value</codeph> 属性小一个步长，但不小于 <codeph>maximum</codeph> 属性值的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:stepSize:get"><apiName>stepSize</apiName><shortdesc>
      值之间的非零变化单位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      值之间的非零变化单位。<codeph>value</codeph> 属性必须是此值的倍数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:NumericStepper:protected:upArrowStyleFilters:get"><apiName>upArrowStyleFilters</apiName><shortdesc>
      从 NumericStepper 传递给向上箭头的样式集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 NumericStepper 传递给向上箭头的样式集。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:NumericStepper:value:get"><apiName>value</apiName><shortdesc>
      NumericStepper 控件的文本区域显示的当前值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      NumericStepper 控件的文本区域显示的当前值。如果用户输入的数值不是 <codeph>stepSize</codeph> 属性的倍数或不在 <codeph>maximum</codeph> 和 <codeph>minimum</codeph> 属性范围之间，则此属性将设置为最近的有效值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:ToolTip"><apiName>ToolTip</apiName><shortdesc>
  通过 ToolTip 控件，您可以为用户提供有用信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  容器的上边框与其内容区域之间的像素数目。默认值为 -1，此时第一个标题的上边框与 Accordion 容器的上边框重叠。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  容器的下边框与其内容区域之间的像素数目。默认值为 -1，此时最后一个标题的下边框与 Accordion 容器的下边框重叠。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:ToolTip" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:ToolTip" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:ToolTip" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:ToolTip" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:ToolTip" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="Number">
<description>
  投影距离。如果将此属性设置为负值，此阴影将出现在组件的上方。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="String">
<description>
  投影方向。可能值包括 <codeph>"left"</codeph>、<codeph>"center"</codeph> 和 <codeph>"right"</codeph>。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="uint">
<description>
  投影颜色。
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.controls:ToolTip" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  指定组件是否具有可见投影的布尔值属性。默认值为 <codeph>false</codeph>。
 
  <p><b>注意：</b>对于显示在容器上的投影，需设置 <codeph>contentBackgroundColor</codeph> 属性。否则，由于容器的背景默认为透明，阴影将显示在容器后。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  指定组件是否具有可见投影的布尔值属性。此样式与 <codeph>borderStyle="solid"</codeph> 一起使用。默认值为 <codeph>false</codeph>。
 
  <p><b>注意：</b>对于显示在容器上的投影，需设置 <codeph>backgroundColor</codeph> 或 <codeph>backgroundImage</codeph> 属性。否则，由于容器的背景默认为透明，阴影将显示在容器后。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  组件角的半径。对于 ApplicationControlBar，默认值为 5。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.controls:ToolTip" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  边框可视性。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="Number">
<description>
  边框厚度。仅在将 <codeph>borderStyle</codeph> 设置为 <codeph>"solid"</codeph> 时使用。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.controls:ToolTip" playerVersion="Flash9" type="String">
<description>
  边框样式。可能值为 <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph>。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 <codeph>"inset"</codeph>。大多数容器的默认值为 <codeph>"none"</codeph>。<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph> 值只在 halo 主题中有效。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.controls:ToolTip" playerVersion="Flash9" type="Class">
<description>
  组件的边框外观类。<codeph/><codeph/><codeph/><codeph/>要确定组件的默认值，请参阅 default.css 文件。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="String">
<description>
  边框边。指定要显示的边框边的以空格分隔的 String。此 String 可以任意顺序包含 <codeph>"left"</codeph>、<codeph>"top"</codeph>、<codeph>"right"</codeph> 和 <codeph>"bottom"</codeph>。默认值为 <codeph>"left top right bottom"</codeph>，此值会显示所有四条边。仅当 borderStyle 为 <codeph>"solid"</codeph> 时才使用此样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  边框颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.controls:ToolTip" playerVersion="Flash10" theme="spark" type="Number">
<description>
  边框 Alpha（透明度）。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="String">
<description>
  将 <codeph>backgroundImage</codeph> 指定的图像缩放到不同的百分比大小。<codeph>"100%"</codeph> 值将拉抻该图像以适应整个组件。要指定百分比值，您必须输入百分号 (%)。Application 容器的默认值为 <codeph>100%</codeph>。所有其它容器的默认值为 <codeph>auto</codeph>，此值将保持图像的原始大小。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="Object">
<description>
  组件的背景图像。此样式可以是绝对或相对 URL 或类。您既可以设置 <codeph>backgroundColor</codeph>，也可以设置 <codeph>backgroundImage</codeph>。背景图像显示在背景色上面。默认值为 <codeph>undefined</codeph>，表示“未设置”。如果此样式和 <codeph>backgroundColor</codeph> 样式都未定义，则控件将采用透明背景。
 
  <p>大多数 Flex 控件的默认外观为半透明。因此，容器的背景图像将在某种程度上“渗入”该容器中的控件。通过将控件的 <codeph>fillAlphas</codeph> 属性的 alpha 值设置为 1 可以避免此情况，如以下示例所示：
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo" type="uint">
<description>
  禁用组件时的组件的背景颜色。全局默认值为 <codeph>undefined</codeph>。List 控件的默认值为 <codeph>0xDDDDDD</codeph>（浅灰）。如果禁用了容器，背景将变暗，而暗淡程度由 <codeph>disabledOverlayAlpha</codeph> 样式控制。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  组件的背景颜色。您可以同时设置 <codeph>backgroundColor</codeph> 和 <codeph>backgroundImage</codeph>。一些组件没有背景。DataGrid 控件会忽略此样式。默认值为 <codeph>undefined</codeph>，即不进行设置。如果此样式和 <codeph>backgroundImage</codeph> 样式都为 <codeph>undefined</codeph>，则控件将采用透明背景。
 
  <p>对于 Application 容器，此样式指定应用程序加载时的背景色以及运行该应用程序时的背景渐变。Flex 计算比指定颜色略深的颜色和比指定颜色略浅的颜色之间的渐变。</p>
 
  <p>大多数 Flex 控件的默认外观为半透明。因此，容器的背景颜色将在某种程度上“渗入”该容器中的控件。通过将控件的 <codeph>fillAlphas</codeph> 属性的 alpha 值设置为 1 可以避免此情况，如以下示例所示：
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.controls:ToolTip" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  <codeph>backgroundColor</codeph> 属性定义的颜色和 <codeph>backgroundImage</codeph> 样式定义的图像或 SWF 文件的 Alpha 级别。有效值范围为从 0.0 到 1.0。对于大多数控件，默认值为 1.0，但 ToolTip 控件的默认值为 0.95，而 Alert 控件的默认值为 0.9。
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IToolTip</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  通过 ToolTip 控件，您可以为用户提供有用信息。当用户将鼠标指针移至图形组件上方时，将会弹出 ToolTip 控件，显示提供该组件相关信息的文本。您可以使用 ToolTip 指导用户使用您的应用程序，也可以自定义 ToolTip 控件以提供附加功能。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link><link href="mx.styles.xml#CSSStyleDeclaration"><linktext>mx.styles.CSSStyleDeclaration</linktext></link></related-links><apiConstructor id="mx.controls:ToolTip:ToolTip"><apiName>ToolTip</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:ToolTip:maxWidth"><apiName>maxWidth</apiName><shortdesc>
      新 ToolTip 控件的最大宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiData>300</apiData><apiType value="Number"/></apiValueDef><apiDesc>
      新 ToolTip 控件的最大宽度（以像素为单位）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ToolTip:protected:textField"><apiName>textField</apiName><shortdesc>
      呈示此 ToolTip 的文本的内部 UITextField。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      呈示此 ToolTip 的文本的内部 UITextField。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ToolTip:text:get"><apiName>text</apiName><shortdesc>
      ToolTip 显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ToolTip 显示的文本。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:MenuBar"><apiName>MenuBar</apiName><shortdesc>
  MenuBar 控件定义包含一个或多个菜单的顶级水平菜单栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:MenuBar" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的任何符号的颜色。示例包括 CheckBox 的复选标记或 ScrollBar 按钮的箭头。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:MenuBar" playerVersion="Flash9" type="uint">
<description conref="mx.controls.Menu#style:selectionColor">
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:MenuBar" playerVersion="Flash9" type="uint">
<description conref="mx.controls.Menu#style:rollOverColor">
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="menuStyleName" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  CSSStyleDeclaration 的名称，它用于为 MenuBar 控件显示的 Menu 控件指定样式。默认情况下，Menu 控件使用 MenuBar 控件的可继承样式。 
  
  <p>您可以使用此类选择器设置 Menu 类的所有样式属性的值，包括 <codeph>backgroundAlpha</codeph> 和 <codeph>backgroundColor</codeph>。</p>
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemDownSkin" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Class">
<description>
  选中 MenuBar 项目时的外观。 
 
  </description>
<default>mx.skins.halo.ActivatorSkin 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemOverSkin" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Class">
<description>
  当焦点悬停于 MenuBar 项目上方时的外观。 
 
  </description>
<default>mx.skins.halo.ActivatorSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemUpSkin" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Class">
<description>
  未选中 MenuBar 项目时的外观。
 
  </description>
<default>mx.skins.halo.ActivatorSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="itemSkin" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Class">
<description>
  MenuBar 项目的默认外观
 
  </description>
<default>mx.skins.halo.ActivatorSkin 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSkin" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Class">
<description>
  MenuBar 控件的背景外观。 
   
  </description>
<default>mx.skins.halo.MenuBarBackgroundSkin 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:MenuBar" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:MenuBar" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:MenuBar" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:MenuBar" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:MenuBar" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.controls:MenuBar" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Alpha 透明度，用于加亮填充控件。第一个值指定加亮部分顶部的透明度，第二个值指定加亮部分底部的透明度。加亮部分覆盖了外观的上半部分。
  
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.controls:MenuBar" playerVersion="Flash9" theme="halo" type="Array">
<description>
  为控件背景着色所使用的颜色。对具有均匀外观控件的两个值传递相同的颜色。
  
  </description>
<default>[ 0xFFFFFF, 0xCCCCCC ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.controls:MenuBar" playerVersion="Flash9" theme="halo" type="Array">
<description>
  用于填充控件背景的 Alpha。使用 [1, 1] 可使控件背景不透明。
  
  </description>
<default>[ 0.6, 0.4 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:MenuBar" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  组件角的半径。下列组件支持此样式：Alert、Button、ComboBox、LinkButton、MenuBar、NumericStepper、Panel、ScrollBar、Tab、TitleWindow 以及任何支持设置为 <codeph>"solid"</codeph> 的 <codeph>borderStyle</codeph> 属性的组件。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:MenuBar" playerVersion="Flash9" theme="halo" type="uint">
<description>
  边框颜色。下列控件支持此样式：Button、CheckBox、ComboBox、MenuBar、NumericStepper、ProgressBar、RadioButton、ScrollBar、Slider 以及任何支持 <codeph>borderStyle</codeph> 样式的组件。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 <codeph>0xB7BABC</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:MenuBar" playerVersion="Flash9" type="String">
<description>
  指定焦点矩形的哪些角应该是圆角。此值是使用空格分隔的 String，该 String 可以是 <codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> 和 <codeph>"br"</codeph> 的任意组合。例如，要指定右侧的角为圆角，左侧的角为直角，应使用 <codeph>"tr br"</codeph>。<codeph>cornerRadius</codeph> 样式属性指定圆角的半径。默认值取决于组件类；如果未覆盖该类的默认值，则默认值为 <codeph>"tl tr bl br"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:MenuBar" playerVersion="Flash9" type="Number">
<description>
  指定焦点外观的 alpha 透明度值。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  <p>
  The <code>&lt;mx:MenuBar&gt</code> tag inherits all of the tag attributes of its superclass, and
  adds the following tag attributes:
  </p>
  
  <pre>
  &lt;mx:MenuBar
    <b>Properties</b>
    dataDescriptor="<i>mx.controls.treeClasses.DefaultDataDescriptor</i>"
    dataProvider="<i>undefined</i>"
    iconField="icon"
    labelField="label"
    labelFunction="<i>undefined</i>"
    menuBarItemRenderer="<i>mx.controls.menuClasses.MenuBarItem</i>"
    menuBarItems="[]"
    menus="[]"
    selectedIndex="-1"
    showRoot="true"
  
    <b>Styles</b>
    backgroundSkin="mx.skins.halo.MenuBarBackgroundSkin"
    borderColor="0xAAB3B3"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    fillAlphas="[0.6,0.4]"
    fillColors="[0xFFFFFF, 0xCCCCCC]"
    focusAlpha="0.5"
    focusRoundedCorners="tl tr bl br"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|none|subpixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    highlightAlphas="[0.3,0.0]"
    itemDownSkin="mx.skins.halo.ActivatorSkin"
    itemOverSkin="mx.skins.halo.ActivatorSkin"
    itemUpSkin="mx.skins.halo.ActivatorSkin"
    leading="2"
    menuStyleName="<i>No default</i>"
    rollOverColor="0xB2E1FF"
    selectionColor="0x7FCEFF"
    textAlign="left"
    textDecoration="none"
    textIndent="0"
  
    <b>Events</b>
    itemClick="<i>No default"</i>
    itemRollOut="<i>No default"</i>
    itemRollOver="<i>No default"</i>
    menuHide="<i>No default"</i>
    menuShow="<i>No default"</i>
  /&gt;
  </pre>
  </p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  MenuBar 控件定义包含一个或多个菜单的顶级水平菜单栏。单击顶级菜单项会打开一个弹出子菜单，该菜单是一个 Menu 控件实例。
 
  <p>通常，MenuBar 控件的顶级菜单栏始终可见。此控件不适合用作弹出菜单。当用户使用鼠标或键盘进行选择时，将弹出相应的子菜单。如果选择了某个菜单项，或者用户通过在菜单外单击取消了该菜单，打开的子菜单将会消失。</p>
 
  <p>有关可以在 MenuBar 控件的数据提供程序中使用的属性的信息和示例，请参阅 Menu 控件。</p>
 
  <p>MenuBar 控件具有下列大小特征：
  </p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度基于菜单文本确定，最小值为 27 个像素。高度的默认值为 22 个像素。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="MenuBarExample.mxml"><swfblock conref="examples/MenuBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Menu"><linktext>mx.controls.Menu</linktext></link><link href="mx.controls.xml#PopUpMenuButton"><linktext>mx.controls.PopUpMenuButton</linktext></link><link href="mx.controls.menuClasses.xml#IMenuBarItemRenderer"><linktext>mx.controls.menuClasses.IMenuBarItemRenderer</linktext></link><link href="mx.controls.menuClasses.xml#MenuBarItem"><linktext>mx.controls.menuClasses.MenuBarItem</linktext></link><link href="mx.controls.menuClasses.xml#IMenuDataDescriptor"><linktext>mx.controls.menuClasses.IMenuDataDescriptor</linktext></link><link href="mx.controls.treeClasses.xml#DefaultDataDescriptor"><linktext>mx.controls.treeClasses.DefaultDataDescriptor</linktext></link></related-links><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  当鼠标指针滑过菜单项时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当鼠标指针滑过菜单项时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  当鼠标指针滑离菜单项时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当鼠标指针滑离菜单项时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.MENU_SHOW_menuShow"><apiName>menuShow</apiName><shortdesc>
  当弹出子菜单打开或用户选择的菜单栏项目没有下拉菜单时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.MENU_SHOW</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当弹出子菜单打开或用户选择的菜单栏项目没有下拉菜单时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.MENU_HIDE_menuHide"><apiName>menuHide</apiName><shortdesc>
  当弹出子菜单关闭时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.MENU_HIDE</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当弹出子菜单关闭时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  当用户选择弹出子菜单中的项目时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户选择弹出子菜单中的项目时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:MenuBar_mx.events.MenuEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  当选项由于用户交互操作而发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当选项由于用户交互操作而发生更改时分派。当用户在弹出子菜单中更改了当前菜单选项时也会分派此事件。如果此事件发生在菜单栏上，则 MenuEvent 对象的 <codeph>menu</codeph> 属性将为 <codeph>null</codeph>。如果发生在弹出子菜单中，则 <codeph>menu</codeph> 属性将包含对代表弹出子菜单的 Menu 对象的引用。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:MenuBar:MenuBar"><apiName>MenuBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:MenuBar:getMenuAt"><apiName>getMenuAt</apiName><shortdesc>
      返回对指定 MenuBar 项目索引处的 Menu 对象的引用，其中 0 是最左侧 MenuBar 项目索引处包含的 Menu 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>对指定索引处包含的 Menu 对象的引用。
      
      </apiDesc><apiOperationClassifier>mx.controls:Menu</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>要返回的 Menu 实例的索引。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回对指定 MenuBar 项目索引处的 Menu 对象的引用，其中 0 是最左侧 MenuBar 项目索引处包含的 Menu 对象。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:MenuBar:itemToIcon"><apiName>itemToIcon</apiName><shortdesc>
      根据 iconField 属性返回代表图标和数据项目（如果有）的类。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>项目的图标，采用类引用的形式；如果不存在，则返回 <codeph>null</codeph>。
      
      </apiDesc><apiType value="Class"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>从中提取图标类的项目
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      根据 <codeph>iconField</codeph> 属性返回代表图标和数据项目（如果有）的类。项目中的字段可以返回一个字符串，前提是该字符串表示应用程序中某个类的名称。项目中的字段还可以是表示包含图标类的文档中某个变量名称的字符串。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:MenuBar:itemToLabel"><apiName>itemToLabel</apiName><shortdesc conref="mx.controls.listClasses.ListBase#itemToLabel()">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/><apiDesc>根据数据要显示的字符串。
      
      </apiDesc></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>要呈示的对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc conref="mx.controls.listClasses.ListBase#itemToLabel()">
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:MenuBar:protected:measure"><apiName>measure</apiName><shortdesc>
      根据 MenuBar 项目的默认宽度计算 MenuBar 的首选宽度和高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      根据 MenuBar 项目的默认宽度计算 MenuBar 的首选宽度和高度。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:MenuBar:protected:updateBackground"><apiName>updateBackground</apiName><shortdesc>
      更新 MenuBar 控件的背景外观。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      更新 MenuBar 控件的背景外观。当创建 MenuBar 子项或 MenuBar 上的任何样式发生更改时调用此方法。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:MenuBar:labelFunction"><apiName>labelFunction</apiName><shortdesc>
      用于确定每个菜单项的显示文本的函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Function"/><apiDefaultValue>"undefined"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用于确定每个菜单项的显示文本的函数。标签函数必须在数据提供程序中查找一个或多个相应的字段，并返回一个可显示的字符串。如果省略此属性，Flex 将使用 <codeph>labelField</codeph> 属性指定的字段或属性的内容。如果指定了此属性，则 Flex 将忽略任何 <codeph>labelField</codeph> 属性值。<codeph>labelFunction</codeph> 属性非常适用于处理格式设置和本地化。
     
      <p>标签函数必须使用数据提供程序中的项目作为单个参数，并返回一个 String。</p>
      <pre>
      <codeph>myLabelFunction(item:Object):String</codeph> </pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:menuBarItems"><apiName>menuBarItems</apiName><shortdesc>
      包含 MenuBarItem 对象的 Array，这些对象用于呈示 MenuBar 控件顶级菜单栏中的所有项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/><apiDefaultValue>[ ]
     
      </apiDefaultValue></apiValueDef><apiDesc>
      包含 MenuBarItem 对象的 Array，这些对象用于呈示 MenuBar 控件顶级菜单栏中的所有项目。默认情况下，此属性包含 MenuBarItem 类的实例。不应直接将项目添加到 <codeph>menuBarItems</codeph> 数组中。若要添加新的 menubar 项目，请将其直接添加到 MenuBar 控件的数据提供程序中。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.menuClasses.xml#MenuBarItem"><linktext>mx.controls.menuClasses.MenuBarItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:MenuBar:menus"><apiName>menus</apiName><shortdesc>
      包含 Menu 对象的 Array，这些对象与 MenuBar 控件的弹出子菜单对应。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiType value="Array"/><apiDefaultValue>[ ] 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      包含 Menu 对象的 Array，这些对象与 MenuBar 控件的弹出子菜单对应。每个 MenuBar 项目都可以在 Array 中找到对应的 Menu 对象，即使该项目不包含弹出子菜单。Flex 起初不会填充 <codeph>menus</codeph> 数组，而是根据需要动态创建菜单。不应直接将项目添加到 <codeph>menus</codeph> Array 中。若要添加新的下拉菜单，请将其直接添加到 MenuBar 控件的数据提供程序中。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      访问并处理数据提供程序中数据的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.menuClasses:IMenuDataDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      访问并处理数据提供程序中数据的对象。MenuBar 控件使用数据描述符来提供其数据的相关信息。然后，这些数据用于分析和移动数据源。为 MenuBar 定义的数据描述符可供所有子项菜单和子菜单使用。 
     
      <p>如果要将此属性指定为 MXML 中的某个属性，则必须使用对数据描述符的引用，而不是描述符的字符串名称。请使用下列格式设置此属性：</p>
     
     <pre>&lt;mx:MenuBar id="menubar" dataDescriptor="{new MyCustomDataDescriptor()}"/></pre>
     
      <p>或者，您可以在 MXML 中将该属性指定为嵌套子标签，如下例所示：</p>
     
      <pre>&lt;mx:MenuBar>
      &lt;mx:dataDescriptor>
         &lt;myCustomDataDescriptor>
      &lt;/mx:dataDescriptor>
      ...</pre>
     
      <p>默认值为 DefaultDataDescriptor 类的内部实例。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      对象的层次结构，显示为 MenuBar 项目和菜单。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>"undefined"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      对象的层次结构，显示为 MenuBar 项目和菜单。所有顶级子项都会变为 MenuBar 项目，其子项将变为菜单和子菜单中的项目。MenuBar 控件按如下方式处理源数据对象：
      <p>
      <ul>
      <li>包含有效 XML 文本的 String 将转化为 XML 对象。</li>
      <li>XMLNode 将转化为 XML 对象。</li>
      <li>将 XMLList 转换为 XMLListCollection。</li>
      <li>将实现 ICollectionView 接口的任何对象转换为 ICollectionView。</li>
      <li>将 Array 转换为 ArrayCollection。</li>
      <li>将任何其它类型的对象作为 Array 的唯一条目纳入该 Array 中。</li>
      </ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:hasRoot:get"><apiName>hasRoot</apiName><shortdesc conref="mx.controls.Menu#hasRoot">
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc conref="mx.controls.Menu#hasRoot">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:iconField:get"><apiName>iconField</apiName><shortdesc>
      数据提供程序中字段的名称，该字段用于确定要为每个菜单项显示的图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"icon"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      数据提供程序中字段的名称，该字段用于确定要为每个菜单项显示的图标。默认情况下，MenuBar 不会尝试将菜单项中的图标和文本一起显示。您可以通过指定图标字段定义一个图形，将其作为菜单项的图标创建并显示。 
     
      <p>MenuItemRenderer 将从数据提供程序中查找由 <codeph>iconField</codeph> 属性定义了名称的属性。如果该属性的值为一个 Class，则将实例化此类并需要将其转化为 IFlexDisplayObject 实例。如果该属性的值是一个 String，则将从应用程序中查找是否存在同名的 Class；如果没有同名类，则从文档中查找同名的属性，并根据需要将该属性映射到一个 Class 中。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:labelField:get"><apiName>labelField</apiName><shortdesc>
      数据提供程序中的字段名称，用以确定每个菜单项的显示文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><label>to specify the label attribute in an E4X XML Object 
      as the text to display for each menu item. 
     
      Setting the <code>labelFunction</code> property overrides this property.
     
      </label></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      数据提供程序中的字段名称，用以确定每个菜单项的显示文本。如果数据提供程序是一个字符串 Array，则 Flex 会将每个字符串值作为标签使用。如果数据提供程序是一个 E4X XML 对象，则必须显式设置此属性。例如，使用 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:menuBarItemRenderer:get"><apiName>menuBarItemRenderer</apiName><shortdesc>
      由 MenuBar 控件应用于 MenuBar 控件顶级菜单栏的项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier><apiDefaultValue>"mx.controls.menuClasses.MenuBarItem"
     
      </apiDefaultValue></apiValueDef><apiDesc>
      由 MenuBar 控件应用于 MenuBar 控件顶级菜单栏的项呈示器。 
     
      <p>您可以为 MenuBar 控件的弹出子菜单定义一个项呈示器。由于每个弹出子菜单都是 Menu 控件的一个实例，您可以使用 MenuItemRenderer 类为弹出子菜单定义项呈示器。要为弹出子菜单设置项呈示器，请使用 <codeph>menus</codeph> 属性访问 Menu 对象。 </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.menuClasses.xml#MenuBarItem"><linktext>mx.controls.menuClasses.MenuBarItem</linktext></link></related-links></apiValue><apiValue id="mx.controls:MenuBar:protected:menuBarItemStyleFilters:get"><apiName>menuBarItemStyleFilters</apiName><shortdesc>
      从 MenuBar 项目传递给 menuBar 项目的一组样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 MenuBar 项目传递给 menuBar 项目的一组样式。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:MenuBar:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      MenuBar 控件中当前打开的菜单或上一次打开的菜单（如果当前没有打开菜单）的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      MenuBar 控件中当前打开的菜单或上一次打开的菜单（如果当前没有打开菜单）的索引。    
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:MenuBar:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      指定是否显示数据提供程序的根节点的布尔值标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是否显示数据提供程序的根节点的布尔值标志。如果数据提供程序具有根节点，并且 <codeph>showRoot</codeph> 属性设置为 <codeph>false</codeph>，则 MenuBar 控件上的项目与此根节点的直接子级节点对应。此标志对不包含根节点的数据提供程序（如 List 和 Array）不会产生任何影响。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#MenuBar/hasRoot"><linktext>hasRoot</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:VSlider"><apiName>VSlider</apiName><shortdesc>	
  使用 VSlider 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="direction"/><Alternative owner="mx.controls:VSlider" replacement="spark.components.VSlider" since="4.0">
	</Alternative><styles><style enumeration="left,top,right,bottom" inherit="no" name="dataTipPlacement" owner="mx.controls:VSlider" playerVersion="Flash9" type="String">
<description>
  相对于滑块的数据提示位置。可能值为 <codeph>"left"</codeph>、<codeph>"right"</codeph>、<codeph>"top"</codeph> 和 <codeph>"bottom"</codeph>。
  
  </description>
<default>"left"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VSlider&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attribute:</p>
 
  <pre>
  &lt;mx:VSlider
    <strong>Styles</strong>
    dataTipPlacement="top"
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.sliderClasses:Slider</apiBaseClassifier></apiClassifierDef><apiDesc>	
  使用 VSlider 控件，用户可以通过在滑块轨道的终点之间移动滑块来选择值。滑块的当前值由滑块端点之间滑块的相对位置确定，端点对应于滑块的最小值和最大值。
 
  <p>滑块可能允许使用其最小值和最大值之间的连续范围内的值，也可能限制为最小值和最大值之间采用特定间隔的值。它可能沿轨道按指定间隔显示刻度线。这些刻度线与允许的滑块值无关。滑块还可以使用数据提示显示其当前值。</p>
  	
  <p>VSlider 具有垂直方向。滑块轨道从下往上扩展，而标签和刻度线位于轨道的左右两侧。</p>
 
  <p>VSlider 控件具备下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>高度为 250 个像素，宽度足以容纳滑块及任何关联标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>无</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>无</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleImageVSlider.mxml"><swfblock conref="examples/SimpleImageVSlider.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#HSlider"><linktext>mx.controls.HSlider</linktext></link><link href="mx.controls.sliderClasses.xml#Slider"><linktext>mx.controls.sliderClasses.Slider</linktext></link><link href="mx.controls.sliderClasses.xml#SliderThumb"><linktext>mx.controls.sliderClasses.SliderThumb</linktext></link><link href="mx.controls.sliderClasses.xml#SliderDataTip"><linktext>mx.controls.sliderClasses.SliderDataTip</linktext></link><link href="mx.controls.sliderClasses.xml#SliderLabel"><linktext>mx.controls.sliderClasses.SliderLabel</linktext></link></related-links><apiConstructor id="mx.controls:VSlider:VSlider"><apiName>VSlider</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:ProgressBarDirection"><apiName>ProgressBarDirection</apiName><shortdesc>
  ProgressBarDirection 类定义 ProgressBar 类的 direction 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ProgressBarDirection 类定义 ProgressBar 类的 <codeph>direction</codeph> 属性值。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ProgressBar"><linktext>mx.controls.ProgressBar</linktext></link></related-links><apiValue id="mx.controls:ProgressBarDirection:LEFT"><apiName>LEFT</apiName><shortdesc>
	  指定从右向左填充进度栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>left</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定从右向左填充进度栏。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarDirection:RIGHT"><apiName>RIGHT</apiName><shortdesc>
	  指定从左向右填充进度栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>right</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定从左向右填充进度栏。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
  使用 HScrollBar（水平 ScrollBar）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="direction"/><Alternative owner="mx.controls:HScrollBar" replacement="spark.components.HScrollBar" since="4.0">
	</Alternative><styles><style format="Time" inherit="no" name="repeatInterval" owner="mx.controls:HScrollBar" playerVersion="Flash9" type="Number">
<description>
  用户在按钮上按住鼠标时，<codeph>buttonDown</codeph> 事件之间相隔的毫秒数。默认值为 35。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="mx.controls:HScrollBar" playerVersion="Flash9" type="Number">
<description>
  第一次 <codeph>buttonDown</codeph> 事件后，在按 <codeph>repeatInterval</codeph> 重复 <codeph>buttonDown</codeph> 事件前，要等待的毫秒数。默认值为 500。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:HScrollBar&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:HScrollBar
    <strong>Styles</strong>
    repeatDelay="500"
    repeatInterval="35"
 
    <strong>Events</strong>
    scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.scrollClasses:ScrollBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  使用 HScrollBar（水平 ScrollBar）控件，可以在因数据太多而不能在显示区域完全显示时控制显示的数据部分。此控件可扩展基本的 ScrollBar 控件。 
  
  <p>尽管可以使用 HScrollBar 控件作为独立控件，但通常将其结合作为另一组组件的一部分来提供滚动功能。</p>
 
  <p>ScrollBar 控件由四部分组成：两个箭头按钮、一个轨道和一个滑块。滑块的位置和按钮的显示依赖于控件的当前状态。ScrollBar 控件使用四个参数计算其显示状态：</p>
 
  <ul>
    <li>最小范围值。</li>
    <li>最大范围值。</li>
    <li>当前位置 － 必须介于最小范围值和最大范围值之间。</li>
    <li>视域大小 - 表示范围内一次可显示的项目数。该项目数必须小于或等于此范围，其中此范围指介于最小范围值和最大范围值之间的一组值。</li>
  </ul>
 
  </apiDesc><example conref="HScrollBarExample.mxml"><swfblock conref="examples/HScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.scrollClasses.xml#ScrollBar"><linktext>mx.controls.scrollClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="mx.controls:HScrollBar_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  当 ScrollBar 控件通过用户启动的操作或以编程方式滚动时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 ScrollBar 控件通过用户启动的操作或以编程方式滚动时分派。 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:HScrollBar:HScrollBar"><apiName>HScrollBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:ProgressBarMode"><apiName>ProgressBarMode</apiName><shortdesc>
  ProgressBarMode 类定义 ProgressBar 类的 mode 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  ProgressBarMode 类定义 ProgressBar 类的 <codeph>mode</codeph> 属性值。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#ProgressBar"><linktext>mx.controls.ProgressBar</linktext></link></related-links><apiValue id="mx.controls:ProgressBarMode:EVENT"><apiName>EVENT</apiName><shortdesc>
	  由 source 属性指定的控件必须分派 progress 和 completed 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>event</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  由 <codeph>source</codeph> 属性指定的控件必须分派 <codeph>progress</codeph> 和 <codeph>completed</codeph> 事件。ProgressBar 使用这些事件更新其状态。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarMode:MANUAL"><apiName>MANUAL</apiName><shortdesc>
	  手动更新 ProgressBar 状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>manual</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  手动更新 ProgressBar 状态。在此模式中，您可以指定 <codeph>maximum</codeph> 和 <codeph>minimum</codeph> 属性，并使用 <codeph>setProgress()</codeph> 方法指定状态。此模式通常在将 <codeph>indeterminate</codeph> 属性设为 <codeph>true</codeph> 时使用。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ProgressBarMode:POLLED"><apiName>POLLED</apiName><shortdesc>
	  source 属性必须指定一个公开 getBytesLoaded() 和 getBytesTotal() 方法的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>polled</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>source</codeph> 属性必须指定一个公开 <codeph>getBytesLoaded()</codeph> 和 <codeph>getBytesTotal()</codeph> 方法的对象。ProgressBar 控件调用这些方法更新其状态。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:Tree"><apiName>Tree</apiName><shortdesc>
  Tree 控件使用户可以查看排列为可扩展树的层次结构数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:Tree" playerVersion="Flash9" type="uint">
<description>
  用户选择某行时的文本颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:Tree" playerVersion="Flash9" type="uint">
<description>
  用户将鼠标滑过某行时的文本颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectionEasingFunction" owner="mx.controls:Tree" playerVersion="Flash9" type="Function">
<description>
  对用于控制以编程方式补间的 <codeph>easingFunction</codeph> 函数的引用。
 
  <p>默认值为 <codeph>undefined</codeph>。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionDisabledColor" owner="mx.controls:Tree" playerVersion="Flash9" type="uint">
<description>
  指定列表项目的禁用颜色。
 
  </description>
<default>0xDDDDDD
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:Tree" playerVersion="Flash9" type="uint">
<description>
  用户选择链接时的背景颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:Tree" playerVersion="Flash9" type="uint">
<description>
  用户将鼠标滑过链接时的背景颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.controls:Tree" playerVersion="Flash9" type="Function">
<description>
  控制组件补间的缓动函数。
 
  <p>默认值为 <codeph>undefined</codeph>。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.controls:Tree" playerVersion="Flash9" type="Number">
<description>
  打开过渡或闭合过渡的长度（以毫秒为单位）。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="indentation" owner="mx.controls:Tree" playerVersion="Flash9" type="Number">
<description>
  每个树级别的缩进（以像素为单位）。
 
  </description>
<default>17
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="folderClosedIcon" owner="mx.controls:Tree" playerVersion="Flash9" type="Class">
<description>
  为树的分支项目指定文件夹关闭图标。在 MXML 中，可以使用以下语法设置此属性：<codeph>folderClosedIcon="@Embed(source='b.jpg');"</codeph>默认值为 Assets.swf 文件中的 "TreeFolderClosed" 符号。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="folderOpenIcon" owner="mx.controls:Tree" playerVersion="Flash9" type="Class">
<description>
  为树的分支项目指定文件夹打开图标。在 MXML 中，可以使用以下语法设置此属性：<codeph>folderOpenIcon="@Embed(source='a.jpg');"</codeph>默认值为 Assets.swf 文件中的 "TreeFolderOpen" 符号。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="disclosureClosedIcon" owner="mx.controls:Tree" playerVersion="Flash9" type="Class">
<description>
  指定显示在关闭的父项目旁边的图标，以便不显示其子项（子树已折叠）。默认值为 Assets.swf 文件中的 "TreeDisclosureClosed" 符号。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="disclosureOpenIcon" owner="mx.controls:Tree" playerVersion="Flash9" type="Class">
<description>
  指定显示在打开的父项目旁边的图标，以便显示其子项。默认值为 Assets.swf 文件中的 "TreeDisclosureOpen" 符号。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="EmbeddedFile" inherit="no" name="defaultLeafIcon" owner="mx.controls:Tree" playerVersion="Flash9" type="Class">
<description>
  指定叶项目的默认图标。在 MXML 中，可以使用以下语法设置此属性：<codeph>defaultLeafIcon="@Embed(source='c.jpg');"</codeph>默认值为 Assets.swf 文件中的 "TreeNodeIcon" 符号。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="depthColors" owner="mx.controls:Tree" playerVersion="Flash9" type="Array">
<description>
  Tree 控件中使用的颜色数组（按降序排序）。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="mx.controls:Tree" playerVersion="Flash9" type="Array">
<description>
  交替模式中行的颜色。此值可以是由多种颜色中任意两种所组成的数组。仅在未指定 <codeph>backgroundColor</codeph> 属性时使用。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:Tree" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:Tree" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  <p>
  The &lt;mx:Tree&gt; tag inherits all the tag attributes of its superclass, and
  adds the following tag attributes:
  </p>
  <pre>
  &lt;mx:Tree
    <b>Properties</b>
    dataDescriptor="<i>Instance of DefaultDataDescriptor</i>"
    dataProvider="null"
    dragMoveEnabled="true|false"
    firstVisibleItem="<i>First item in the control</i>"
    hasRoot="false|true"
    itemIcons="null"
    maxHorizontalScrollPosition="0"
    openItems="null"
    showRoot="true|false"
    &nbsp;
    <b>Styles</b>
    alternatingItemColors="undefined"
    backgroundDisabledColor="0xDDDDDD"
    defaultLeafIcon="<i>'TreeNodeIcon' symbol in Assets.swf</i>"
    depthColors="undefined"
    disclosureClosedIcon="<i>'TreeDisclosureClosed' symbol in Assets.swf</i>"
    disclosureOpenIcon="<i>'TreeDisclosureOpen' symbol in Assets.swf</i>"
    folderClosedIcon="<i>'TreeFolderClosed' symbol in Assets.swf</i>"
    folderOpenIcon="<i>'TreeFolderOpen' symbol in Assets.swf</i>"
    indentation="17"
    openDuration="250"
    openEasingFunction="undefined"
    paddingLeft="2"
    paddingRight="0"
    rollOverColor="0xAADEFF"
    selectionColor="0x7FCDFE"
    selectionDisabledColor="0xDDDDDD"
    selectionEasingFunction="undefined"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x2B333C"
    &nbsp;
    <b>Events</b>
    change="<i>No default</i>"
    itemClose="<i>No default</i>"
    itemOpen="<i>No default</i>"
    itemOpening="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>mx.controls:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  Tree 控件使用户可以查看排列为可扩展树的层次结构数据。树中的每个项目都可以是叶或分支。叶项目是树中的端点。分支项目可以包含叶或分支项目，也可以为空。
 
  <p>默认情况下，叶由文件图标旁边的文本标签表示。分支由文件夹图标旁边的文本标签表示，其中带有一个公开三角形，用户可打开该三角形以显示子项。</p>
  
  <p>Tree 类使用 ITreeDataDescriptor 或 ITreeDataDescriptor2 对象分析和操作数据提供程序。默认树数据描述符（DefaultDataDescriptor 类的一个对象）支持 XML 和 Object 类；Object 类数据提供程序必须包含 <codeph>children</codeph> 字段中的所有子项。
  </p>
 
  <p>Tree 控件具有下列默认大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以容纳显示的前 7 个（未折叠）行中的最宽节点的图标、标签和扩展三角形（如果存在），其中七行中的每行高度均为 20 个像素。如果需要滚动条，滚动条的宽度并未包括在宽度计算中。</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素。</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>5000 × 5000。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TreeExample.mxml"><swfblock conref="examples/TreeExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.treeClasses.xml#ITreeDataDescriptor"><linktext>mx.controls.treeClasses.ITreeDataDescriptor</linktext></link><link href="mx.controls.treeClasses.xml#ITreeDataDescriptor2"><linktext>mx.controls.treeClasses.ITreeDataDescriptor2</linktext></link><link href="mx.controls.treeClasses.xml#DefaultDataDescriptor"><linktext>mx.controls.treeClasses.DefaultDataDescriptor</linktext></link></related-links><adobeApiEvent id="mx.controls:Tree_mx.events.TreeEvent.ITEM_OPENING_itemOpening"><apiName>itemOpening</apiName><shortdesc>
  启动分支打开或关闭时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TreeEvent.ITEM_OPENING</apiEventType><adobeApiEventClassifier>mx.events.TreeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  启动分支打开或关闭时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Tree_mx.events.TreeEvent.ITEM_OPEN_itemOpen"><apiName>itemOpen</apiName><shortdesc>
  打开或扩展分支时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TreeEvent.ITEM_OPEN</apiEventType><adobeApiEventClassifier>mx.events.TreeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  打开或扩展分支时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Tree_mx.events.TreeEvent.ITEM_CLOSE_itemClose"><apiName>itemClose</apiName><shortdesc>
  关闭或折叠分支时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.TreeEvent.ITEM_CLOSE</apiEventType><adobeApiEventClassifier>mx.events.TreeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  关闭或折叠分支时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:Tree:Tree"><apiName>Tree</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:Tree:protected:dragCompleteHandler"><apiName>dragCompleteHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_COMPLETE 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>DragEvent 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_COMPLETE</codeph> 事件。此方法从数据提供程序中删除项目。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:protected:dragDropHandler"><apiName>dragDropHandler</apiName><shortdesc>
      处理 DragEvent.DRAG_DROP 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:DragEvent</apiOperationClassifier><apiDesc>DragEvent 对象。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理 <codeph>DragEvent.DRAG_DROP 事件</codeph>。此方法通过调用 <codeph>hideDropFeedback()</codeph> 方法隐藏放置反馈。
     
      <p>如果此操作为 <codeph>COPY</codeph>，则此方法将调用 <codeph>ObjectUtil.copy()</codeph> 方法为此对象制作一个深层副本，然后通过调用 <codeph>UIDUtil.createUID()</codeph> 方法用一个新值替代该副本的 <codeph>uid</codeph> 属性（如果存在）。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.utils.xml#ObjectUtil"><linktext>mx.utils.ObjectUtil</linktext></link><link href="mx.utils.xml#UIDUtil"><linktext>mx.utils.UIDUtil</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:Tree:expandChildrenOf"><apiName>expandChildrenOf</apiName><shortdesc>
      打开或关闭指定项目下的所有树项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>起始项目。
     
      </apiDesc></apiParam><apiParam><apiItemName>open</apiItemName><apiType value="Boolean"/><apiDesc>切换打开或关闭操作。指定 <codeph>true</codeph> 可打开项目，指定 <codeph>false</codeph> 可关闭项目。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      打开或关闭指定项目下的所有树项目。如果设置 <codeph>dataProvider</codeph> 之后立即调用 <codeph>expandChildrenOf()</codeph>，则您可能看不到正确的行为。您应该等待对组件进行验证或调用 <codeph>validateNow()</codeph> 方法。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:expandItem"><apiName>expandItem</apiName><shortdesc>
      打开或关闭分支项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要影响的项目。
     
      </apiDesc></apiParam><apiParam><apiItemName>open</apiItemName><apiType value="Boolean"/><apiDesc>指定 <codeph>true</codeph> 可打开项目，指定 <codeph>false</codeph> 可关闭项目。
     
      </apiDesc></apiParam><apiParam><apiItemName>animate</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定 <codeph>true</codeph> 以设置过渡动画效果。（注意：如果分支包含 20 个以上的子项目，由于性能原因，它不会在第一次打开时设置动画效果。）
     
      </apiDesc></apiParam><apiParam><apiItemName>dispatchEvent</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>控制树是否在完成打开动画后触发 <codeph>open</codeph> 事件。
     
      </apiDesc></apiParam><apiParam><apiItemName>cause</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>启动项目打开动作的事件（如果存在）。
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      打开或关闭分支项目。分支项目打开后，如果它的子项目分支已处于打开状态，则它将还原它们的打开和关闭状态。如果设置 <codeph>dataProvider</codeph> 之后立即调用 <codeph>expandItem()</codeph>，则您可能看不到正确的行为。您应该等待对组件进行验证或调用 <codeph>validateNow()</codeph>。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:getParentItem"><apiName>getParentItem</apiName><shortdesc>
      返回子项目的已知父项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>项目的父项目。
      
      </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要为其获取父项目的项目。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回子项目的已知父项目。仅在项目原来可见或当前可见时，此方法才会返回值。顶级项目包含值为 <codeph>null</codeph> 的父项目。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:protected:initListData"><apiName>initListData</apiName><shortdesc>
      初始化树项呈示器所用的 TreeListData 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要呈示的项目。
      </apiDesc></apiParam><apiParam><apiItemName>treeListData</apiItemName><apiOperationClassifier>mx.controls.treeClasses:TreeListData</apiOperationClassifier><apiDesc>呈示项目时使用的 TreeListDataItem。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      初始化树项呈示器所用的 TreeListData 对象。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:isItemOpen"><apiName>isItemOpen</apiName><shortdesc>
      如果指定的项目分支处于打开状态（显示其子项），则返回 true。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果处于打开状态，返回 True，否则返回 false。
     
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要检查的项目。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      如果指定的项目分支处于打开状态（显示其子项目），则返回 <codeph>true</codeph>。
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:protected:makeListData"><apiName>makeListData</apiName><shortdesc>
      创建新的 TreeListData 实例并根据输入数据提供程序项目填充字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>新构建的 ListData 对象。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:BaseListData</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>用于填充 ListData 的数据提供程序项目。
      </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>该项目的 UID。
      </apiDesc></apiParam><apiParam><apiItemName>rowNum</apiItemName><apiType value="int"/><apiDesc>数据提供程序中项目的索引。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建新的 TreeListData 实例并根据输入数据提供程序项目填充字段。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Tree:setItemIcon"><apiName>setItemIcon</apiName><shortdesc>
      设置项目的关联图标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要影响的项目。
      </apiDesc></apiParam><apiParam><apiItemName>iconID</apiItemName><apiType value="Class"/><apiDesc>关闭（或叶）图标的链接 ID。
      </apiDesc></apiParam><apiParam><apiItemName>iconID2</apiItemName><apiType value="Class"/><apiDesc>打开图标的链接 ID。
     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置项目的关联图标。调用此方法将覆盖此项目的 <codeph>iconField</codeph> 和 <codeph>iconFunction</codeph> 属性（如果此项目为叶项目）。分支项目不使用 <codeph>iconField</codeph> 和 <codeph>iconFunction</codeph> 属性。它们使用 <codeph>folderOpenIcon</codeph> 和 <codeph>folderClosedIcon</codeph> 属性。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:Tree:itemIcons"><apiName>itemIcons</apiName><shortdesc>
      用于指定项目图标的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/><apiDefaultValue>undefined
      
      </apiDefaultValue></apiValueDef><apiDesc>
      用于指定项目图标的对象。对象中的每个条目均包含一个字段名称（项目 UID）和一个值，该值是具有以下格式的对象：
      <pre>
      {iconID: <i>Class</i>, iconID2: <i>Class</i>}
      </pre>
      <codeph>iconID</codeph> 字段值是关闭项目或叶项目的图标的类，而 <codeph>iconID2</codeph> 是打开项目的图标的类。
     
      <p>此属性旨在允许项目图标的初始化。不会自动检测初始化后此数组发生的更改。请使用 <codeph>setItemIcon()</codeph> 方法动态更改图标。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#Tree/setItemIcon()"><linktext>setItemIcon()</linktext></link></related-links></apiValue><apiValue id="mx.controls:Tree:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      返回当前的 ITreeDataDescriptor。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.treeClasses:ITreeDataDescriptor</apiValueClassifier><apiDefaultValue>DefaultDataDescriptor
      
      </apiDefaultValue></apiValueDef><apiDesc>
      返回当前的 ITreeDataDescriptor。
     
       </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Tree:dragMoveEnabled:get"><apiName>dragMoveEnabled</apiName><shortdesc>
      指示可以移动项目，而不是仅能作为拖放操作的一部分从 Tree 控件中复制项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指示可以移动项目，而不是仅能作为拖放操作的一部分从 Tree 控件中复制项目。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Tree:firstVisibleItem:get"><apiName>firstVisibleItem</apiName><shortdesc>
      当前显示在树的顶层的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      当前显示在树的顶层的项目。例如，基于打开和关闭以及滚动分支的方式，顶层可能包含当前可查看的项目列表中的第九个项目，而该项目又代表根的某些曾孙级项目。设置此属性与设置 List 控件的 verticalScrollPosition 类似。如果当前不可以查看项目，例如，由于项目位于未扩展的项目下，则设置此属性不会产生任何效果。
     
      <p>注意：在 Flex 1.0 中，尽管此属性实际上是 XMLNode 或 TreeNode，但均将其键入为 XMLNode。在 2.0 中，它现在是通用类型 Object 并将返回类型与 dataProvider 中包含的数据类型相同的对象。</p>
     
      <p>默认值为 Tree 控件中的第一个项目。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Tree:hasRoot:get"><apiName>hasRoot</apiName><shortdesc>
      指示当前 dataProvider 包含根项目；例如，层次结构中的单一顶级节点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指示当前 dataProvider 包含根项目；例如，层次结构中的单一顶级节点。XML 和 Object 是具有根的类型的示例。列表和数组没有根。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#Tree/showRoot"><linktext>showRoot</linktext></link></related-links></apiValue><apiValue id="mx.controls:Tree:maxHorizontalScrollPosition:get"><apiName>maxHorizontalScrollPosition</apiName><shortdesc>
      Tree 控件的 maxHorizontalScrollPosition 属性的最大值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0
     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      Tree 控件的 <codeph>maxHorizontalScrollPosition</codeph> 属性的最大值。与 List 控件中的 <codeph>maxHorizontalScrollPosition</codeph> 属性不同，此属性由 Tree 控件根据打开和关闭的项目以及树中通过其它方式（例如，通过滚动）变为可见状态或隐藏状态的项目修改。
     
      <p>如果将此属性设置为 dataProvider 中最宽的已知项目，Tree 控件会对其进行修改，以便即使最宽的项目位于树中的第四个级别，用户也可以通过滚动看到该项目。因此，尽管您重新读取先前设置的 <codeph>maxHorizontalScrollPosition</codeph> 属性的相同值，但它并不一定是 Tree 控件使用的实际值。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Tree:openItems:get"><apiName>openItems</apiName><shortdesc>
      已打开或已设置为打开的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      已打开或已设置为打开的项目。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Tree:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      设置根项目的可见性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      设置根项目的可见性。如果 dataProvider 数据包含根节点，并且根节点的设置为 <codeph>false</codeph>，则 Tree 控件不会显示根项目。仅显示根项目的后代。此标志不会对非根项目的 dataProvider（如 List 和 Array）产生任何效果。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#Tree/hasRoot"><linktext>hasRoot</linktext></link></related-links></apiValue><apiValue id="mx.controls:Tree:dataProvider:set"><apiName>dataProvider</apiName><shortdesc>
      包含要显示的数据的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      包含要显示的数据的对象。为此属性分配值后，Tree 类将按照下列方式处理源数据对象：
      <p>
      <ul><li>将包含有效 XML 文本的 String 转换为 XMLListCollection。</li>
      <li>将 XMLNode 转换为 XMLListCollection。</li>
      <li>将 XMLList 转换为 XMLListCollection。</li>
      <li>将实现 ICollectionView 接口的任何对象转换为 ICollectionView。</li>
      <li>将 Array 转换为 ArrayCollection。</li>
      <li>将任何其它类型的对象作为 Array 的唯一条目纳入该 Array 中。</li></ul>
      </p>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:ComboBase"><apiName>ComboBase</apiName><shortdesc>
  ComboBase 类是符合以下条件的控件的基类：在文本字段显示文本并且包含导致出现下拉列表的按钮，用户可在其中选择显示哪些文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="textInputStyleName" owner="mx.controls:ComboBase" playerVersion="Flash9" type="String">
<description>
  显示当前所选内容的内部 TextInput 子组件的样式声明。如果未指定任何值，则 TextInput 子组件将使用由 ComboBase 类定义的默认文本样式。
 
  </description>
<default>""
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textInputClass" owner="mx.controls:ComboBase" playerVersion="Flash10" type="Class">
<description>
  实现该组件使用以输入文本的 ITextInput 的类。
 
  <p>既可以设置为 mx.core.TextInput 类（以使用经典 Halo TextInput 控件），也可以设置为 mx.controls.MXFTETextInput 类（以使用基于 Text Layout Framework 的 Spark TextInput 组件来改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.controls.TextInput
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="editableDisabledSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  当禁用控件且 <codeph>editable</codeph> 属性为 <codeph>true</codeph> 时，用作背景和边框外观的类的名称。此外观只适用于 ComboBox 类。对于 ComboBase 类，没有默认值。对于 ComboBox 类，默认值为 ComboBoxArrowSkin 类。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="editableDownSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  当用户按住鼠标按钮且 <codeph>editable</codeph> 属性为 <codeph>true</codeph> 时，用作背景和边框外观的类的名称。此外观只适用于 ComboBox 类。对于 ComboBase 类，没有默认值。对于 ComboBox 类，默认值为 ComboBoxArrowSkin 类。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="editableOverSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  当鼠标位于控件上方且 <codeph>editable</codeph> 属性为 <codeph>true</codeph> 时，用作背景和边框外观的类的名称。此外观只适用于 ComboBox 类。对于 ComboBase 类，没有默认值。对于 ComboBox 类，默认值为 ComboBoxArrowSkin 类。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="editableUpSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  当鼠标未置于控件上方且 <codeph>editable</codeph> 属性为 <codeph>true</codeph> 时，用作背景和边框外观的类的名称。此外观只适用于 ComboBox 类。对于 ComboBase 类，没有默认值。对于 ComboBox 类，默认值为 ComboBoxArrowSkin 类。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="editableSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  <codeph>editable</codeph> 属性为 <codeph>true</codeph> 时用作背景和边框外观的类的名称。此外观只适用于 ComboBox 类。对于 ComboBase 类，没有默认值。对于 ComboBox 类，默认值为 ComboBoxArrowSkin 类。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="disabledSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  禁用控件时用作背景和边框外观的类的名称。对于 ComboBase 类，没有默认值。对于 ComboBox 类，默认值为 ComboBoxArrowSkin 类。对于 ColorPicker 类，默认值为 ColorPickerSkin 类。对于 DateField 类，默认值为 ScrollArrowDownSkin 类。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="downSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  当用户按住鼠标按键时，用作背景和边框外观的类的名称。对于 ComboBase 类，没有默认值。对于 ComboBox 类，默认值为 ComboBoxArrowSkin 类。对于 ColorPicker 类，默认值为 ColorPickerSkin 类。对于 DateField 类，默认值为 ScrollArrowDownSkin 类。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="overSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  当鼠标位于控件上方时，用作背景和边框外观的类的名称。对于 ComboBase 类，没有默认值。对于 ComboBox 类，默认值为 ComboBoxArrowSkin 类。对于 ColorPicker 类，默认值为 ColorPickerSkin 类。对于 DateField 类，默认值为 ScrollArrowDownSkin 类。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="upSkin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  当鼠标未置于控件上方时，用作背景和边框外观的类的名称。对于 ComboBase 类，没有默认值。对于 ComboBox 类，默认值为 ComboBoxArrowSkin 类。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="skin" owner="mx.controls:ComboBase" playerVersion="Flash9" type="Class">
<description>
  用作背景和边框默认外观的类的名称。对于 ComboBase 类，没有默认值。对于 ComboBox 类，默认值为 ComboBoxArrowSkin 类。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:ComboBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的任何符号的颜色。示例包括 CheckBox 的复选标记或 ScrollBar 按钮的箭头。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.controls:ComboBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件对焦时，对焦环的颜色
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.controls:ComboBase" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的内容区域的颜色。
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.controls:ComboBase" playerVersion="Flash10" theme="spark" type="Number">
<description>
  组件内容背景的透明度。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ComboBase&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;<i>mx:tagname</i>
    <b>Properties</b>
    dataProvider="null"
    editable="false|true"
    imeMode="null"
    restrict="null"
    selectedIndex="-1"
    selectedItem="null"
    text=""
    &nbsp;
    <b>Styles</b>
    disabledSkin="<i>Depends on class</i>"
    downSkin="<i>Depends on class</i>"
    editableDisabledSkin="<i>Depends on class</i>"
    editableDownSkin="<i>Depends on class</i>"
    editableOverSkin="<i>Depends on class</i>"
    editableUpSkin="<i>Depends on class</i>"
    overSkin="<i>Depends on class</i>"
    textInputStyleName="" 
    upSkin="<i>Depends on class</i>"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ComboBase 类是符合以下条件的控件的基类：在文本字段显示文本并且包含导致出现下拉列表的按钮，用户可在其中选择显示哪些文本。ComboBase 类不能直接用作 MXML 标签。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#Button"><linktext>mx.controls.Button</linktext></link><link href="mx.controls.xml#TextInput"><linktext>mx.controls.TextInput</linktext></link><link href="mx.collections.xml#ICollectionView"><linktext>mx.collections.ICollectionView</linktext></link></related-links><apiConstructor id="mx.controls:ComboBase:ComboBase"><apiName>ComboBase</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:ComboBase:protected:calculatePreferredSizeFromData"><apiName>calculatePreferredSizeFromData</apiName><shortdesc>
      确定下拉列表中条目的高度和宽度使用的默认值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>具有 <codeph>width</codeph> 和 <codeph>height</codeph> 属性的 Object。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>numItems</apiItemName><apiType value="int"/><apiDesc>确定大小要检查的项目数。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定下拉列表中条目的高度和宽度使用的默认值。ComboBase 的每个子类必须实现此方法并返回包含 <codeph>width</codeph> 和 <codeph>height</codeph> 这两个属性的 Object。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBase:protected:collectionChangeHandler"><apiName>collectionChangeHandler</apiName><shortdesc>
      对数据提供程序更改做出响应。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>从集合分派的 CollectionEvent。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      对数据提供程序更改做出响应。如果在组件的选定项目之前添加或删除项目，该组件将调整 <codeph>selectedIndex</codeph> 属性。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:ComboBase:protected:downArrowButton_buttonDownHandler"><apiName>downArrowButton_buttonDownHandler</apiName><shortdesc>
      按下下拉按钮时，执行某些操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>mx.events:FlexEvent</apiOperationClassifier><apiDesc>按下下拉按钮时所触发的事件。     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      按下下拉按钮时，执行某些操作。这是一个抽象基类实现，因此它没有任何效果且将被子类覆盖。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBase:protected:itemToUID"><apiName>itemToUID</apiName><shortdesc>
      确定 dataProvider 项目的 UID。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>唯一标识符。
      
      </apiDesc><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>dataProvider 项目。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定 dataProvider 项目的 UID。每个 dataProvider 项目必须有一个唯一标识符 (UID) 或指定一个这样的标识符。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBase:protected:measure"><apiName>measure</apiName><shortdesc>
      确定控件的 measuredWidth 和 measuredHeight 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      确定控件的 <codeph>measuredWidth</codeph> 和 <codeph>measuredHeight</codeph> 属性。测量宽度是 <codeph>dataProvider</codeph> 中最宽文本的宽度与下拉按钮的宽度之和。测量高度是按钮或文本高度中的较大者。如果尚未设置数据提供程序或数据提供程序中没有任何项目，则 <codeph>measuredWidth</codeph> 属性将设置为 <codeph>UIComponent.DEFAULT_MEASURED_WIDTH</codeph>，<codeph>measuredHeight</codeph> 属性将设置为 <codeph>UIComponent.DEFAULT_MEASURED_HEIGHT</codeph>。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/measure()"><linktext>mx.core.UIComponent.measure()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:ComboBase:protected:textInput_changeHandler"><apiName>textInput_changeHandler</apiName><shortdesc>
      处理对 TextInput 的更改，它用作组件中可编辑的文本字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>每次控件中文本发生更改时所触发的事件。     
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      处理对 TextInput 的更改，它用作组件中可编辑的文本字段。此方法将 <codeph>selectedIndex</codeph> 设置为 -1（从而将 <codeph>selectedItem</codeph> 设置为 <codeph>null</codeph>）。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBase:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      根据给定宽度和高度确定内部组件的大小和位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      根据给定宽度和高度确定内部组件的大小和位置。下拉按钮始终放置在右侧，文本字段填充剩余区域。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.controls:ComboBase:protected:collection"><apiName>collection</apiName><shortdesc>
      此组件显示的项目的 ICollectionView。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.collections:ICollectionView</apiValueClassifier></apiValueDef><apiDesc>
      此组件显示的项目的 ICollectionView。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:protected:iterator"><apiName>iterator</apiName><shortdesc>
      主 IViewCursor，用于从 dataProvider 中获取项目并将项目传递给渲染器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.collections:IViewCursor</apiValueClassifier></apiValueDef><apiDesc>
      主 IViewCursor，用于从 dataProvider 中获取项目并将项目传递给渲染器。在任何代码序列的末尾，都必须始终将其放置在屏幕上最上方的可见项目处。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:protected:textInput"><apiName>textInput</apiName><shortdesc>
      显示当前所选内容的内部 TextInput 子组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:ITextInput</apiValueClassifier></apiValueDef><apiDesc>
      显示当前所选内容的内部 TextInput 子组件。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:protected:arrowButtonStyleFilters:get"><apiName>arrowButtonStyleFilters</apiName><shortdesc>
      从 ComboBase 传递给向下箭头按钮的样式集
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 ComboBase 传递给向下箭头按钮的样式集
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBase:protected:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      返回 EdgeMetrics 对象，它具有四个属性：left、top、right 和 bottom。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      返回 EdgeMetrics 对象，它具有四个属性：<codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> 和 <codeph>bottom</codeph>。每个属性的值等于相应边框的粗细（以像素为单位）。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      此组件显示的一组项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      此组件显示的一组项目。此属性是 Object 类型，因为派生的类可处理各种数据类型，如 Array、XML、ICollectionView 及其它类。所有类型都将转换为 ICollectionView，并在获取此属性的值时返回该 ICollectionView；如果设置的值不是 ICollectionView，则不能获得该值。
     
      <p>如果尚未另外设置 <codeph>selectedIndex</codeph> 属性，设置此属性将调整 <codeph>selectedIndex</codeph> 属性（从而调整 <codeph>selectedItem</codeph> 属性）。如果不存在 <codeph>prompt</codeph> 属性，<codeph>selectedIndex</codeph> 属性将设置为 0；否则，后一属性将保留为 -1，即用于提示字符串的索引。如果已设置 <codeph>selectedIndex</codeph> 属性，并且设置的值超出了新数据提供程序的范围，很可能会发生意外行为。</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:editable:get"><apiName>editable</apiName><shortdesc>
      一个标志，指示控件可编辑还是不可编辑，可编辑时允许用户直接键入未在 dataProvider 中指定的条目，不可编辑时要求用户从 dataProvider 中的项目中进行选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false.
      This property is ignored by the DateField control.
     
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示控件可编辑还是不可编辑，可编辑时允许用户直接键入未在 dataProvider 中指定的条目，不可编辑时要求用户从 dataProvider 中的项目中进行选择。
     
      <p>如果值为 <codeph>true</codeph>，键盘输入将输入到可编辑的文本字段中，否则它将用作快捷键，用于选择 dataProvider 中的项目。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:imeMode:get"><apiName>imeMode</apiName><shortdesc conref="mx.controls.TextInput#imeMode">
      </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     </apiDefaultValue></apiValueDef><apiDesc conref="mx.controls.TextInput#imeMode">
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:restrict:get"><apiName>restrict</apiName><shortdesc>
      用户可以或无法输入到文本字段中的字符集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
     
      </apiDefaultValue></apiValueDef><apiDesc>
      用户可以或无法输入到文本字段中的字符集。
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/restrict"><linktext>flash.text.TextField.restrict</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBase:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      所选项目的数据提供程序中的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      所选项目的数据提供程序中的索引。如果存在 <codeph>prompt</codeph> 属性，则可将 <codeph>selectedIndex</codeph> 值设为 -1 以显示提示。如果不存在 <codeph>prompt</codeph> 属性，则一旦设置了 <codeph>dataProvider</codeph>，就会将 <codeph>selectedIndex</codeph> 设置为 0。
     
      <p>如果 ComboBox 控件是可编辑的，则当用户在文本字段中键入任何文本时，<codeph>selectedIndex</codeph> 属性的值为 -1。</p>
     
      <p>与其它许多失效的 Flex 属性（设置它们不会立即产生效果）不同，<codeph>selectedIndex</codeph> 和 <codeph>selectedItem</codeph> 属性是同步的；设置其中一个属性会立即影响另一个属性。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:selectedItem:get"><apiName>selectedItem</apiName><shortdesc>
      位于 selectedIndex 处的数据提供程序中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      位于 selectedIndex 处的数据提供程序中的项目。
     
      <p>如果数据为对象或类实例，则修改对象或实例中的属性会修改 <codeph>dataProvider</codeph> 对象，但可能不会更新视图，不过下列情况除外：实例是 Bindable 或者实例实现了 IPropertyChangeNotifier，或发生了对 dataProvider.itemUpdated() 的调用。</p>
     
      如果数据提供程序中存在该项目，则设置 <codeph>selectedItem</codeph> 属性将导致 ComboBox 控件选择该项目（将其显示在文本字段中并设置 <codeph>selectedIndex</codeph>）。如果 ComboBox 控件是可编辑的，则当用户在文本字段中键入任何文本时，<codeph>selectedItem</codeph> 属性的值为 <codeph>null</codeph>。
     
      <p>与其它许多失效的 Flex 属性（设置它们不会立即产生效果）不同，<codeph>selectedIndex</codeph> 和 <codeph>selectedItem</codeph> 属性是同步的；设置其中一个属性会立即影响另一个属性。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:text:get"><apiName>text</apiName><shortdesc>
      文本字段的内容。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      文本字段的内容。如果控件是不可编辑的，则设置此属性不会产生任何效果。如果控件是可编辑的，则设置此属性会设置文本字段的内容。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBase:protected:textInputStyleFilters:get"><apiName>textInputStyleFilters</apiName><shortdesc>
      从 ComboBase 传递到文本输入的样式集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 ComboBase 传递到文本输入的样式集。如果设置了 <codeph>textInputStyleName</codeph> 样式属性，则将忽略这些样式。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBase:value:get"><apiName>value</apiName><shortdesc>
      所选项目的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      所选项目的值。如果项目是 Number 型的或 String 型的，则值为项目。如果项目为一个对象，则值为 <codeph>data</codeph> 属性（如果存在），或者为 <codeph>label</codeph> 属性（如果存在）。
     
      <p><b>注意：</b>使用 <codeph>selectedItem</codeph> 属性通常比使用此属性更可取。<codeph>value</codeph> 属性用于实现与较早的应用程序的向后兼容。</p>
     
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:TileList"><apiName>TileList</apiName><shortdesc>
  TileList 控件将显示大量项目，它们以平铺形式布置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:TileList" replacement="spark.components.List" since="4.0">
<description>
  Flex 3 中的布局特定 List 组件已替换为采用通用布局的一个更通用的 List 组件。要从新的 List 组件实现相似的行为，请将 <codeph>layout</codeph> 属性设置为 <codeph>TileLayout</codeph>。
 </description>
	</Alternative><effects><effect event="itemsChange" name="itemsChangeEffect" owner="mx.controls:TileList">
<description>
  当控件的数据提供程序发生更改时播放的数据效果。
 
  <p>默认情况下，TileList 控件不使用数据效果。对于 TileList 控件，使用 DefaultTileListEffect 类的实例。</p>
 
 </description>
<default>undefined
  
  </default>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:TileList&gt;</code> tag inherits
  all of the tag attributes of its superclass, but ignores the
  <code>variableRowHeight</code> and <code>wordWrap</code> tag attributes.  
  It adds no additional tag attributes.</p>
  
  <pre>
  &lt;mx:TileList/&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.listClasses:TileBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  TileList 控件将显示大量项目，它们以平铺形式放置。根据 <codeph>direction</codeph> 属性，在其中一个轴上显示滚动条以访问列表中的所有项目。您可以使用 <codeph>rowHeight</codeph> 和 <codeph>columnWidth</codeph> 属性设置平铺内容的大小。此外，Flex 会测量 dataProvider 中第一个项目的项呈示器，并对所有平铺内容应用此大小。
  
  <p>TileList 控件具有以下默认大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>四列和四行。使用默认项呈示器，总大小为 66×126 像素。</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素。</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>5000 × 5000。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TileListExample.mxml"><swfblock conref="examples/TileListExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.controls:TileList:TileList"><apiName>TileList</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:FormItemLabel"><apiName>FormItemLabel</apiName><shortdesc>
  FormItem 容器使用 FormItemLabel 对象来显示 FormItem 容器的标签部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Label</apiBaseClassifier></apiClassifierDef><apiDesc>
  FormItem 容器使用 FormItemLabel 对象来显示 FormItem 容器的标签部分。
 
  <p>FormItemLabel 类不会向其 superclass (Label) 添加任何功能，而是为了使您可以设置 FormItemLabel 类型选择器中的样式，以及设置影响所有 FormItem 容器中标签的样式。</p>
 
  <p><b>注意：</b>不推荐使用此类。建议使用 FormItem 类的 <codeph>labelStyleName</codeph> 样式属性来设置 FormItem 标签的样式。</p>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#FormItem"><linktext>mx.containers.FormItem</linktext></link></related-links><apiConstructor id="mx.controls:FormItemLabel:FormItemLabel"><apiName>FormItemLabel</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:List"><apiName>List</apiName><shortdesc>
  List 控件可显示垂直项目列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:List" replacement="spark.components.List" since="4.0">
	</Alternative><effects><effect event="itemsChange" name="itemsChangeEffect" owner="mx.controls:List">
<description>
  当控件的数据提供程序发生更改时播放的数据效果。
 
  <p>默认情况下，List 控件不使用数据效果。 </p>
 
  </description>
<default>undefined
  
  </default>
<playerversion>Flash 9
  </playerversion>
<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></effect></effects><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:List&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:List
    <b>Properties</b>
    editable="false|true"
    editedItemPosition="<i>No default</i>"
    editorDataField="text"
    editorHeightOffset="0"
    editorUsesEnterKey="false|true"
    editorWidthOffset="0"
    editorXOffset="0"
    editorYOffset="0"
    imeMode="null"    
    itemEditor="TextInput"
    itemEditorInstance="<i>Current item editor</i>"
    rendererIsEditor="false|true"
    
    <b>Styles</b>
    backgroundDisabledColor="0xDDDDDD"
    
    <b>Events</b>
    itemEditBegin="<i>No default</i>"
    itemEditEnd="<i>No default</i>"
    itemEditBeginning="<i>No default</i>"
    itemFocusIn="<i>No default</i>"
    itemFocusOut="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>mx.controls.listClasses:ListBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  List 控件可显示垂直项目列表。其功能与 HTML 中 SELECT 表单元素的功能非常相似。如果包含的项目太多无法同时显示，则会显示一个垂直滚动条，以便用户可访问列表中的所有项目。可以选择使用水平滚动条，以便用户在列表项目的整个宽度不适合时查看项目。用户可以根据 <codeph>allowMultipleSelection</codeph> 属性的值从列表中选择一个或多个项目。
 
  <p>List 控件具有下列默认的大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>足以适合前七个可见项目（如果项目少于七个，则为列表中所有可见项目）中最宽标签的宽度；高度为七行，其中每行高 20 个像素。</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素。</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>5000 × 5000。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleList.mxml"><swfblock conref="examples/SimpleList.swf"/></example></apiClassifierDetail><related-links><link href="mx.events.xml#ListEvent"><linktext>mx.events.ListEvent</linktext></link></related-links><adobeApiEvent id="mx.controls:List_mx.events.ListEvent.ITEM_FOCUS_OUT_itemFocusOut"><apiName>itemFocusOut</apiName><shortdesc>
  当项呈示器失去焦点时分派。在下列情况下项呈示器可能会失去焦点：用户单击 List 控件中的其它项目或在列表外部单击时，或使用键盘导航到 List 控件中的其它项目或导航到 List 控件外部时。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_FOCUS_OUT</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当项呈示器失去焦点时分派。在下列情况下项呈示器可能会失去焦点：用户单击 List 控件中的其它项目或在列表外部单击时，或使用键盘导航到 List 控件中的其它项目或导航到 List 控件外部时。仅当列表项目可编辑时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:List_mx.events.ListEvent.ITEM_FOCUS_IN_itemFocusIn"><apiName>itemFocusIn</apiName><shortdesc>
  当项呈示器获得焦点时分派。在下列情况下项呈示器可能获得焦点：当用户单击 List 控件中的某个项目或者使用键盘导航到该项目时。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_FOCUS_IN</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当项呈示器获得焦点时分派。在下列情况下项呈示器可能获得焦点：当用户单击 List 控件中的某个项目或者使用键盘导航到该项目时。仅当列表项目可编辑时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:List_mx.events.ListEvent.ITEM_EDIT_END_itemEditEnd"><apiName>itemEditEnd</apiName><shortdesc>
  当项目编辑会话由于任何原因结束时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_EDIT_END</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当项目编辑会话由于任何原因结束时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:List_mx.events.ListEvent.ITEM_EDIT_BEGIN_itemEditBegin"><apiName>itemEditBegin</apiName><shortdesc>
  当设置了 editedItemPosition 属性且项目可编辑时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_EDIT_BEGIN</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当设置了 <codeph>editedItemPosition</codeph> 属性且项目可编辑时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:List_mx.events.ListEvent.ITEM_EDIT_BEGINNING_itemEditBeginning"><apiName>itemEditBeginning</apiName><shortdesc>
  当用户在某个项目上释放鼠标按键时、切换到 List 或 List 内部时，或通过任何其它方式尝试编辑项目时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_EDIT_BEGINNING</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户在某个项目上释放鼠标按键时、切换到 List 或 List 内部时，或通过任何其它方式尝试编辑项目时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:List:List"><apiName>List</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:List:createItemEditor"><apiName>createItemEditor</apiName><shortdesc>
      使用由 itemEditor 属性指定的编辑器在 editedItemPosition 为项呈示器创建项目编辑器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>colIndex</apiItemName><apiType value="int"/><apiDesc>列索引。对于 List 控件，Flex 将此属性的值设置为 0。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>要编辑的项目的数据提供程序中的索引。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用由 <codeph>itemEditor</codeph> 属性指定的编辑器在 <codeph>editedItemPosition</codeph> 为项呈示器创建项目编辑器。
     
      <p>此方法将编辑器实例设置为 <codeph>itemEditorInstance</codeph> 属性。</p>
     
      <p>您只能从 <codeph>itemEditBegin</codeph> 事件的事件侦听器中调用此方法。若要在其它时间创建编辑器，请设置 <codeph>editedItemPosition</codeph> 属性以生成 <codeph>itemEditBegin</codeph> 事件。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:createItemRenderer"><apiName>createItemRenderer</apiName><shortdesc>
      获取适当的渲染器，如果未指定渲染器，则使用默认渲染器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>渲染器。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>从中创建项呈示器的对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      获取适当的渲染器，如果未指定渲染器，则使用默认渲染器。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:destroyItemEditor"><apiName>destroyItemEditor</apiName><shortdesc>
      关闭当前在某个项目上打开的项目编辑器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      关闭当前在某个项目上打开的项目编辑器。通常，只能从 <codeph>itemEditEnd</codeph> 事件的事件侦听器中调用此方法，但在这之前需要调用 <codeph>preventDefault()</codeph> 方法阻止执行默认的事件侦听器。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:protected:drawRowBackground"><apiName>drawRowBackground</apiName><shortdesc>
      在指定的位置以指定高度绘制行背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>一个 Sprite，其中的显示对象包含该行的图形。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行在所显示的一组行中的索引。最顶端可见行（不包括标题）的行索引为 0。此索引用于跟踪绘制背景所使用的对象，以便某一特定行能够重用同一显示对象，即使该行呈示的项目的索引发生了更改时也是如此。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>建议的背景 y 位置。
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>建议的指示符高度。
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>建议的指示符颜色。
     
      </apiDesc></apiParam><apiParam><apiItemName>dataIndex</apiItemName><apiType value="int"/><apiDesc>数据提供程序中该行的项目的索引。例如，这可用于为第 10 个项目设置不同的颜色。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在指定的位置以指定高度绘制行背景。这样，将创建一个 Shape 作为输入 Sprite 的子项，并使用相应的颜色对其进行填充。此方法还使用 <codeph>backgroundAlpha</codeph> 样式属性设置来确定背景颜色的透明度。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:protected:endEdit"><apiName>endEdit</apiName><shortdesc>
      停止编辑数据提供程序中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>如果没有调用 <codeph>preventDefault()</codeph>，则返回 <codeph>true</codeph>。否则为 <codeph>false</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>reason</apiItemName><apiType value="String"/><apiDesc>定义事件原因的常量（例如“CANCELLED”、“NEW_ROW”或“OTHER”）。该值必须是 ListEventReason 类的成员。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      停止编辑数据提供程序中的项目。当用户完成项目编辑后，控件将调用此方法。它将分派 <codeph>itemEditEnd</codeph> 事件以启动以下过程：将编辑的数据从 <codeph>itemEditorInstance</codeph> 复制到数据提供程序，并隐藏 <codeph>itemEditorInstance</codeph>。
      
      </apiDesc></apiOperationDetail><related-links><link href="mx.events.xml#ListEventReason"><linktext>mx.events.ListEventReason</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:List:isItemEditable"><apiName>isItemEditable</apiName><shortdesc>
      确定数据提供程序项目的项呈示器是否可编辑。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果项目可编辑，则为 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>数据提供程序项目
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定数据提供程序项目的项呈示器是否可编辑。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:protected:layoutEditor"><apiName>layoutEditor</apiName><shortdesc>
      在建议的位置使用建议的尺寸放置项目编辑器实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>x</apiItemName><apiType value="int"/><apiDesc>建议的指示符 x 位置。
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="int"/><apiDesc>建议的指示符 y 位置。
      </apiDesc></apiParam><apiParam><apiItemName>w</apiItemName><apiType value="int"/><apiDesc>建议的指示符宽度。
      </apiDesc></apiParam><apiParam><apiItemName>h</apiItemName><apiType value="int"/><apiDesc>建议的指示符高度。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在建议的位置使用建议的尺寸放置项目编辑器实例。Tree 控件将覆盖此方法并调整位置以补偿渲染器的缩进。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:List:protected:makeListData"><apiName>makeListData</apiName><shortdesc>
      创建新的 ListData 实例并根据输入数据提供程序项目填充字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiDesc>新构建的 ListData 对象。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:BaseListData</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>用于填充 ListData 的数据提供程序项目。
      </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>该项目的 UID。
      </apiDesc></apiParam><apiParam><apiItemName>rowNum</apiItemName><apiType value="int"/><apiDesc>数据提供程序中项目的索引。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建新的 ListData 实例并根据输入数据提供程序项目填充字段。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:List:editorDataField"><apiName>editorDataField</apiName><shortdesc>
      项目编辑器的属性名称，其中包含列表项目的新数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>text</apiData><apiType value="String"/></apiValueDef><apiDesc>
      项目编辑器的属性名称，其中包含列表项目的新数据。例如，默认的 <codeph>itemEditor</codeph> 为 TextInput，因此 <codeph>editorDataField</codeph> 属性的默认值为 <codeph>"text"</codeph>，它指定了 TextInput 控件的 <codeph>text</codeph> 属性。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editorHeightOffset"><apiName>editorHeightOffset</apiName><shortdesc>
      项目编辑器相对于项呈示器大小的高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      项目编辑器相对于项呈示器大小的高度（以像素为单位）。使用此属性可以使编辑器与项呈示器产生几个像素的重叠，以补偿编辑器周围的边框。  
      <p>在显示编辑器的同时更改这些值对当前编辑器没有任何影响，但会影响下一个打开编辑器的项呈示器。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editorUsesEnterKey"><apiName>editorUsesEnterKey</apiName><shortdesc>
      指示项目编辑器是否使用 Enter 键的标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指示项目编辑器是否使用 Enter 键的标志。如果将此属性设置为 <codeph>true</codeph>，则项目编辑器将使用 Enter 键，并且 List 不会查找 Enter 键并移动编辑器进行响应。
      <p>在显示编辑器的同时更改此值对当前编辑器没有任何影响，但会影响下一个打开编辑器的项呈示器。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editorWidthOffset"><apiName>editorWidthOffset</apiName><shortdesc>
      项目编辑器相对于项呈示器大小的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      项目编辑器相对于项呈示器大小的宽度（以像素为单位）。使用此属性可以使编辑器与项呈示器产生几个像素的重叠，以补偿编辑器周围的边框。
      <p>在显示编辑器的同时更改这些值对当前编辑器没有任何影响，但会影响下一个打开编辑器的项呈示器。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editorXOffset"><apiName>editorXOffset</apiName><shortdesc>
      项目编辑器左上角相对于项目左上角的 x 位置（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      项目编辑器左上角相对于项目左上角的 x 位置（以像素为单位）。使用此属性可以使编辑器与项呈示器产生几个像素的重叠，以补偿编辑器周围的边框。
      <p>在显示编辑器的同时更改这些值对当前编辑器没有任何影响，但会影响下一个打开编辑器的项呈示器。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editorYOffset"><apiName>editorYOffset</apiName><shortdesc>
      项目编辑器左上角相对于项目左上角的 y 位置（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0</apiData><apiType value="Number"/><apiDefaultValue>0
      
      </apiDefaultValue></apiValueDef><apiDesc>
      项目编辑器左上角相对于项目左上角的 y 位置（以像素为单位）。使用此属性可以使编辑器与项呈示器产生几个像素的重叠，以补偿编辑器周围的边框。
      <p>在显示编辑器的同时更改这些值对当前编辑器没有任何影响，但会影响下一个打开编辑器的项呈示器。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:itemEditor"><apiName>itemEditor</apiName><shortdesc>
      如果将可编辑属性设置为 true，则为用于控件的项目编辑器的类工厂。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IFactory</apiValueClassifier><apiDefaultValue>new ClassFactory(mx.controls.TextInput)
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果将 <codeph>editable</codeph> 属性设置为 <codeph>true</codeph>，则为用于控件的项目编辑器的类工厂。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:itemEditorInstance"><apiName>itemEditorInstance</apiName><shortdesc>
      对项目编辑器的当前活动实例（如果有）的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      对项目编辑器的当前活动实例（如果有）的引用。
     
      <p>若要在编辑项目时访问项目编辑器实例和新项目值，则应使用 <codeph>itemEditorInstance</codeph> 属性。只有在执行 <codeph>itemEditBegin</codeph> 事件的事件侦听器之后，<codeph>itemEditorInstance</codeph> 属性才有效。因此，您通常只从 <codeph>itemEditEnd</codeph> 事件的事件侦听器中访问 <codeph>itemEditorInstance</codeph> 属性。</p>
     
      <p><codeph>itemEditor</codeph> 属性定义项目编辑器的类，从而定义项目编辑器实例的数据类型。</p>
     
      <p>不要以 MXML 方式设置此属性。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:protected:measuringObjects"><apiName>measuringObjects</apiName><shortdesc>
      工厂设置的度量对象的缓存
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiType value="flash.utils:Dictionary"/></apiValueDef><apiDesc>
      工厂设置的度量对象的缓存
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:rendererIsEditor"><apiName>rendererIsEditor</apiName><shortdesc>
      指定项呈示器是否同时也是项目编辑器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定项呈示器是否同时也是项目编辑器。如果此属性为 <codeph>true</codeph>，Flex 将忽略 <codeph>itemEditor</codeph> 属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editable:get"><apiName>editable</apiName><shortdesc>
      一个标志，指示用户能否编辑数据提供程序中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示用户能否编辑数据提供程序中的项目。如果为 <codeph>true</codeph>，则控件中的项呈示器可编辑。用户单击项呈示器将可以打开一个编辑器。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editedItemPosition:get"><apiName>editedItemPosition</apiName><shortdesc>
      正在编辑的数据提供程序项目的项呈示器的列索引和行索引（如果有）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      正在编辑的数据提供程序项目的项呈示器的列索引和行索引（如果有）。
     
      <p>此 Object 包含 <codeph>columnIndex</codeph> 和 <codeph>rowIndex</codeph> 这两个字段，分别是项目的从零开始的列索引和项目索引。对于 List 控件，<codeph>columnIndex</codeph> 属性始终为 0；例如：<codeph>{columnIndex:0, rowIndex:3}</codeph>。</p>
     
      <p>设置此属性会将项目滚动到视图中，并会分派 <codeph>itemEditBegin</codeph> 事件以打开指定项目上的项目编辑器。
      </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:editedItemRenderer:get"><apiName>editedItemRenderer</apiName><shortdesc>
      对当前正在编辑的项目所属的 DataGrid 控件中项呈示器的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      对当前正在编辑的项目所属的 DataGrid 控件中项呈示器的引用。
     
      <p>在 <codeph>itemEditBegin</codeph> 和 <codeph>itemEditEnd</codeph> 事件的事件侦听器中，您可以使用 <codeph>editedItemRenderer.data</codeph> 属性访问所编辑的项目的当前值。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。如果有编辑器，它将相应地设置 enableIME。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:List:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。Flex 在该控件获得焦点时设置指定的 IME 模式，并在该控件丢失焦点时将其设置回先前的值。
     
     <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IME.xml"><linktext>flash.system.IME</linktext></link><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:LinkButton"><apiName>LinkButton</apiName><shortdesc>
  LinkButton 控件是没有边框的 Button 控件，当用户将鼠标移动到该控件位置时，其内容将加亮显示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="highlightAlphas"/><Exclude kind="style" name="fillColors"/><Exclude kind="style" name="fillAlphas"/><Exclude kind="style" name="borderColor"/><Exclude kind="style" name="baseColor"/><Exclude kind="property" name="emphasized"/><styles><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:LinkButton" playerVersion="Flash9" type="uint">
<description>
  当用户按压某个 LinkButton 控件时，该按钮的文本颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:LinkButton" playerVersion="Flash9" type="uint">
<description>
  当用户将鼠标指针移动到某个 LinkButton 控件位置时，该按钮的文本颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:LinkButton" playerVersion="Flash9" type="uint">
<description>
  当用户按压某个 LinkButton 控件时，该按钮的背景颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:LinkButton" playerVersion="Flash9" type="uint">
<description>
  当用户将鼠标指针移动到某个 LinkButton 位置时，该按钮的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:LinkButton" playerVersion="Flash9" type="Number">
<description>
  环绕 LinkButton 的加亮矩形的顶点半径。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:LinkButton&gt;</code> tag inherits all of the tag attributes 
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:LinkButton
    <b>Styles</b>
    cornerRadius="4""
    rollOverColor="0xEEFEE6"
    selectionColor="0xB7F39B"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x2B333C"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  LinkButton 控件是没有边框的 Button 控件，当用户将鼠标移动到该控件位置时，其内容将加亮显示。这些特征通常借助包含在浏览器页面中的 HTML 链接进行展示。为使 LinkButton 控件能够执行某些操作，您必须像对待 Button 控件一样，指定 <codeph>click</codeph> 事件处理函数。
 
  <p>LinkButton 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度和高度足以适应文本</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>未定义</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LinkButtonExample.mxml"><swfblock conref="examples/LinkButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link></related-links><apiConstructor id="mx.controls:LinkButton:LinkButton"><apiName>LinkButton</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
  ButtonBar 控件可定义一组具有普通外观和导航的逻辑上相关的按压按钮，这组按钮可以是水平的也可以是垂直的。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="shadowDistance"/><Exclude kind="style" name="shadowDirection"/><Exclude kind="style" name="shadowColor"/><Exclude kind="style" name="shadowCapColor"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="dropShadowEnabled"/><Exclude kind="style" name="dropShadowColor"/><Exclude kind="style" name="cornerRadius"/><Exclude kind="style" name="borderThickness"/><Exclude kind="style" name="borderStyle"/><Exclude kind="style" name="borderSkin"/><Exclude kind="style" name="borderSides"/><Exclude kind="style" name="borderColor"/><Exclude kind="style" name="backgroundSize"/><Exclude kind="style" name="backgroundImage"/><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAttachment"/><Exclude kind="style" name="backgroundAlpha"/><Exclude kind="event" name="click"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Alternative owner="mx.controls:ButtonBar" replacement="spark.components.ButtonBar" since="4.0">
	</Alternative><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="Number">
<description>
  垂直方向上各子项间的像素数目。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="top,middle,bottom" inherit="no" name="verticalAlign" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="String">
<description>
  ButtonBar 中的所有按钮垂直对齐。因为各个按钮可以拉伸以填充整个 ButtonBar，所以仅当使用 buttonHeight 样式并且按钮的高度和小于 ButtonBar 的宽度时，才使用此样式。可能值包括 <codeph>"top"</codeph>、<codeph>"middle"</codeph> 和 <codeph>"bottom"</codeph>。
 
  </description>
<default>"middle"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lastButtonStyleName" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="String">
<description>
  如果尚未指定，则使用 <codeph>buttonStyleName</codeph> 样式属性的默认值。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="Number">
<description>
  水平方向上各子项间的像素数目。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="String">
<description>
  ButtonBar 中的所有按钮水平对齐。因为各个按钮可以拉伸以填充整个 ButtonBar，所以仅当使用 buttonWidth 样式并且按钮的宽度和小于 ButtonBar 的宽度时，才使用此样式。可能值包括 <codeph>"left"</codeph>、<codeph>"center"</codeph> 和 <codeph>"right"</codeph>。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="firstButtonStyleName" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="String">
<description>
  为第一个按钮指定样式的 CSS 样式声明的名称。如果尚未指定，则使用 <codeph>buttonStyleName</codeph> 样式属性的默认值。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="buttonWidth" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="Number">
<description>
  每个按钮的宽度（以像素为单位）。如果尚未定义，将根据每个按钮的标签文本计算其默认宽度。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="buttonStyleName" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="String">
<description>
  为按钮指定样式的 CSS 样式声明的名称。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="buttonHeight" owner="mx.controls:ButtonBar" playerVersion="Flash9" type="Number">
<description>
  每个按钮的高度（以像素为单位）。如果尚未定义，则每个按钮的高度由应用于该容器的字体样式确定。如果设置了此属性，则指定的值将覆盖此计算值。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ButtonBar&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:ButtonBar
    <b>Styles</b>
    buttonHeight="undefined"
    buttonStyleName="<i>Name of CSS style declaration, which specifies
    styles for the buttons</i>"
    buttonWidth="undefined"
    firstButtonStyleName="<i>The value of</i> <code>buttonStyleName</code>"
    horizontalAlign="center|left|right"
    horizontalGap="0"
    lastButtonStyleName="<i>The value of</i> <code>buttonStyleName</code>"
    verticalAlign="middle|top|bottom"
    verticalGap="0"
     
    <b>Events</b>
    itemClick="<i>No default</i>"
    &gt;
    ...
       <i>child tags</i>
    ...
  &lt;/mx:ButtonBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseClassifier>mx.controls:NavBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  ButtonBar 控件可定义一组具有普通外观和导航的逻辑上相关的按压按钮，这组按钮可以是水平的也可以是垂直的。
 
  <p>按压按钮是一种在被选中后不会记住其选中状态的按钮。按钮栏中按压按钮的典型用途是将一组相关按钮组合到一起，提供共同的外观和导航，并在一个位置处理 <codeph>click</codeph> 事件的逻辑。 </p>
 
  <p>ButtonBar 控件可基于其 <codeph>dataProvider</codeph> 属性的值创建 Button 控件。虽然 ButtonBar 是容器的一个子类，但请勿使用 <codeph>Container.addChild()</codeph> 和 <codeph>Container.removeChild()</codeph> 等方法添加或删除 Button 控件。而应该使用 <codeph>addItem()</codeph> 和 <codeph>removeItem()</codeph> 等方法处理 <codeph>dataProvider</codeph> 属性。ButtonBar 控件会根据对 <codeph>dataProvider</codeph> 属性所做的更改自动添加或删除必要的子项。</p>
 
  <p>要控制 ButtonBar 控件的按钮样式，请使用 <codeph>buttonStyleName</codeph>、<codeph>firstButtonStyleName</codeph> 和 <codeph>lastButtonStyleName</codeph> 样式属性；请勿尝试设置组成 ButtonBar 控件的各个 Button 控件的样式。</p>
 
  <p>可以使用 ToggleButtonBar 控件定义一组切换按钮。</p>
 
  <p>ButtonBar 控件具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
        <entry>首选大小</entry>
        <entry>宽度足以包含所有按钮及其标签文本和图标（如果有），以及任何填充和分隔条；高度足以容纳按钮。</entry>
     </row><row>
        <entry>控件的大小调整规则</entry>
        <entry>默认情况下不调整控件大小。如果希望 ButtonBar 基于其父容器的大小进行调整，请指定百分比大小。</entry>
     </row><row>
        <entry>填充</entry>
        <entry>top、bottom、left 和 right 属性均为 0 个像素。</entry>
     </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ButtonBarExample.mxml"><swfblock conref="examples/ButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#ToggleButtonBar"><linktext>mx.controls.ToggleButtonBar</linktext></link><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link></related-links><adobeApiEvent id="mx.controls:ButtonBar_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  用户单击按钮时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户单击按钮时分派。此事件只在 <codeph>dataProvider</codeph> 属性不引用 ViewStack 容器时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:ButtonBar:ButtonBar"><apiName>ButtonBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:Label"><apiName>Label</apiName><shortdesc>
  Label 控件显示一行不可编辑的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="method" name="setFocus"/><Exclude kind="style" name="themeColor"/><Exclude kind="style" name="focusThickness"/><Exclude kind="style" name="focusSkin"/><Exclude kind="style" name="focusBlendMode"/><Exclude kind="style" name="baseColor"/><Exclude kind="property" name="tabEnabled"/><Exclude kind="property" name="mouseFocusEnabled"/><Exclude kind="property" name="focusPane"/><Exclude kind="property" name="focusEnabled"/><Alternative owner="mx.controls:Label" replacement="spark.components.Label" since="4.0">
	</Alternative><styles><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  标签顶部与文本顶部之间的像素数目。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  标签底部与文本底部之间的像素数目。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  标签的右侧与文本的右侧之间的像素数目。 
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  标签的左侧与文本的左侧之间的像素数目。 
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:Label" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:Label" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:Label" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:Label" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:Label" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:Label" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:Label" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:Label" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:Label&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:Label
    <b>Properties</b>
    condenseWhite="true|false"
    data="null"
    htmlText=""
    listData="null"
    selectable="true|false"
    text=""
    truncateToFit="true|false"
    &nbsp;
    <b>Styles</b>
    color="0x0B333C"
    disabledColor="0xAAB3B3"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|none|subpixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    paddingLeft="0"
    paddingRight="0"
    paddingTop="0"
    paddingBottom="0"
    styleSheet="null"
    textAlign="left|right|center"
    textDecoration="none|underline"
    textIndent="0"
    &nbsp;
    <b>Events</b>
    dataChange="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  Label 控件显示一行不可编辑的文本。使用 Text 控件创建多行不可编辑的文本块。
 
  <p>您可以使用 HTML 标签设置 Label 文本的格式，此类标签在应用 Label 控件的 CSS 样式后应用。您还可以在文本的四周放置填充。默认情况下，Label 文本处于不可选状态，但可以使其处于可选状态。</p>
 
  <p>如果 Label 大小小于其文本大小，您可以控制是直接对文本进行剪辑还是使用可本地化的字符串（如“...”）截断文本。（注意：可截断纯文本，但无法截断 HTML 文本。）如果仅显示了 Label 文本（无论是纯文本还是 HTML 文本）的部分内容，并且您尚未为标签分配工具提示，则当用户将鼠标悬停在 Label 控件上方时，“截断提示”将自动显示完整的纯文本。</p>
 
  <p>Label 控件没有背景和边框，并且无法获取焦点。</p>
 
  <p>Label 控件具有下列默认大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度和高度足以适应文本</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 × 10000 个像素</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LabelExample.mxml"><swfblock conref="examples/LabelExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Text"><linktext>mx.controls.Text</linktext></link><link href="mx.controls.xml#TextInput"><linktext>mx.controls.TextInput</linktext></link><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link><link href="mx.controls.xml#RichTextEditor"><linktext>mx.controls.RichTextEditor</linktext></link></related-links><adobeApiEvent id="mx.controls:Label_flash.events.TextEvent.LINK_link"><apiName>link</apiName><shortdesc> 
  当用户单击启用 HTML 的文本字段中的超链接（其中的 URL 以“event:”开头）时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.TextEvent.LINK</apiEventType><adobeApiEventClassifier>flash.events.TextEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc> 
  当用户单击启用 HTML 文本字段中的超链接（其中的 URL 以 <codeph>"event:"</codeph> 开头）时分派。<codeph>"event:"</codeph> 之后 URL 的其余部分放置在 <codeph>link</codeph> 事件对象的 text 属性中。
 
  <p>处理 <codeph>link</codeph> 事件时，不会自动执行超链接；您需要从事件处理函数中执行超链接。通常使用 <codeph>navigateToURL()</codeph> 方法执行超链接。这允许您在应用程序中修改超链接，甚至禁止其运行。 </p>
 
  <p>Label 控件必须将 <codeph>selectable</codeph> 属性设置为 <codeph>true</codeph>，才能生成 <codeph>link</codeph> 事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Label_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:Label:Label"><apiName>Label</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:Label:getLineMetrics"><apiName>getLineMetrics</apiName><shortdesc>
      返回 TextLineMetrics 对象，其中包含控件中文本位置和文本行度量值的相关信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>包含有关文本的信息的 TextLineMetrics 对象。
     
      </apiDesc><apiType value="flash.text:TextLineMetrics"/></apiReturn><apiParam><apiItemName>lineIndex</apiItemName><apiType value="int"/><apiDesc>要获得其度量值的行的索引（从零开始）。对于仅具有一行的 Label 控件，必须是 0。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回 TextLineMetrics 对象，其中包含控件中文本位置和文本行度量值的相关信息。必须对组件进行验证才能获得正确数值。如果设置 <codeph>text</codeph> 后立即调用 <codeph>getLineMetrics()</codeph>，则可能会获得不正确的值。您应该等待对组件进行验证或调用 <codeph>validateNow()</codeph>。此行为与 flash.text.TextField 类的行为不同，后者立即更新值。
     
      </apiDesc></apiOperationDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.TextLineMetrics.xml"><linktext>flash.text.TextLineMetrics</linktext></link></related-links></apiOperation><apiValue id="mx.controls:Label:protected:textField"><apiName>textField</apiName><shortdesc>
      呈示此 Label 文本的内部 UITextField。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IUITextField</apiValueClassifier></apiValueDef><apiDesc>
      呈示此 Label 文本的内部 UITextField。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:truncateToFit"><apiName>truncateToFit</apiName><shortdesc>
      如果此属性为 true，并且 Label 控件大小小于其文本大小，则使用可本地化的字符串（如“...”）截断 Label 控件的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果此属性为 <codeph>true</codeph>，并且 Label 控件大小小于其文本大小，则使用可本地化的字符串（如 <codeph>"..."</codeph>）截断 Label 控件的文本。如果此属性为 <codeph>false</codeph>，则将剪辑掉不适合的文本。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:condenseWhite:get"><apiName>condenseWhite</apiName><shortdesc>
      指定是否应删除包含 HTML 文本的 Label 控件中的额外空白（空格、换行符等）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是否应删除包含 HTML 文本的 Label 控件中的额外空白（空格、换行符等）。
     
      <p><codeph>condenseWhite</codeph> 属性仅会对使用 <codeph>htmlText</codeph> 属性设置的文本产生影响，而不会对使用 <codeph>text</codeph> 属性设置的文本产生影响。如果使用 <codeph>text</codeph> 属性设置文本，则忽略 <codeph>condenseWhite</codeph>。</p>
     
      <p>如果将 <codeph>condenseWhite</codeph> 属性设置为 <codeph>true</codeph>，您必须使用标准 HTML 命令（如 <codeph>&lt;br></codeph> 和 <codeph>&lt;p></codeph>）在文本字段中放置换行符。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:data:get"><apiName>data</apiName><shortdesc>
      用于在项呈示器或项目编辑器中使用组件时将值传递给该组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      用于在项呈示器或项目编辑器中使用组件时将值传递给该组件。您通常使用数据绑定将 <codeph>data</codeph> 属性的字段绑定到此组件的某个属性。
     
      <p>将控件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 自动将项目的当前值写入此控件的 <codeph>text</codeph> 属性。</p>
     
      <p>不要以 MXML 方式设置此属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:Label:fontContext:get"><apiName>fontContext</apiName><shortdesc>
      
      为此组件提供字体上下文的模块工厂。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef><apiDesc>
      
      为此组件提供字体上下文的模块工厂。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:htmlText:get"><apiName>htmlText</apiName><shortdesc>
      指定 Label 控件显示的文本，包括表示该文本样式的 HTML 标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 Label 控件显示的文本，包括表示该文本样式的 HTML 标签。在此属性中指定 HTML 文本时，可以使用 Flash TextField 控件支持的 HTML 标记子集。
     
      <p>如果设置了此属性，则会在应用 Label 实例的 CSS 样式后应用 HTML 标记。获取此属性时，HTML 标记包括 CSS 样式。</p>
      
      <p>例如，如果将此属性设置为 <codeph>"This is an example of &lt;b>bold&lt;/b> markup"</codeph> 之类的字符串，则文本“This is an example of <b>bold</b> markup”将以通常应用的 CSS 样式在 Label 中进行显示。此外，由于存在 <codeph>&lt;b></codeph> 标记，“bold”一词将显示为粗体。</p>
     
      <p>HTML 标记使用 &lt; and > 等字符，这些字符在 XML 中具有特殊意义（在 MXML 中也同样如此）。所以，以下代码不能编译：</p>
      
      <pre>
      &lt;mx:Label htmlText="This is an example of &lt;b>bold&lt;/b> markup"/>
      </pre>
      
      <p>有三种方法可以解决此问题。</p>
      
      <ul>
      
      <li>
      
      <p>在作为 <codeph>initialize</codeph> 处理函数调用的 ActionScript 方法中设置 <codeph>htmlText</codeph> 属性：</p>
      
      <pre>
      &lt;mx:Label id="myLabel" initialize="myLabel_initialize()"/>
      </pre>
      
      <p>其中 <codeph>myLabel_initialize</codeph> 方法位于脚本 CDATA 节：</p>
      
      <pre>
      &lt;mx:Script>
      &lt;![CDATA[
      private function myLabel_initialize():void {
          myLabel.htmlText = "This is an example of &lt;b>bold&lt;/b> markup";
      }
      ]]&gt;
      &lt;/mx:Script>
      
      </pre>
      
      <p>由于 HTML 标记依然简单易读，因此这是最简单的方法。请注意，必须为标签分配 <codeph>id</codeph>，以便在 <codeph>initialize</codeph> 处理函数中引用它。</p>
      
      </li>
      
      <li>
      
      <p>使用带有 CDATA 节的子标签指定 <codeph>htmlText</codeph> 属性。XML 中的 CDATA 节包含字符数据，其中 &lt; 和 > 等字符不具有特殊意义。</p>
      
      <pre>
      &lt;mx:Label>
          &lt;mx:htmlText>&lt;![CDATA[This is an example of &lt;b>bold&lt;/b> markup]]&gt;&lt;/mx:htmlText>
      &lt;mx:Label/>
      </pre>
      
      <p>您必须将 <codeph>htmlText</codeph> 属性编写为子标签，而不是 <codeph>&lt;mx:Label></codeph> 标签上的某一属性，因为 XML 不允许属性值中含有 CDATA。请注意，该标记可读性依然很好，但由于涉及到 CDATA 节，该方法比较复杂。</p>
      
      </li>
      
      <li>
      
      <p>使用 <codeph>hmtlText</codeph> 属性，其中只要是 HTML 标记字符 &lt; 和 >，在属性值中就会显示为 XML“实体”<codeph>&amp;lt;</codeph> 和 <codeph>&amp;gt;</codeph>：</p>
      
      <pre>
      &lt;mx:Label htmlText="This is an example of &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt; markup"/&amp;gt;
      </pre>
      
      由于使用此方法时 HTML 标记的可读性很差，因此 Adobe 不建议使用此方法。
      
      </li>
      
      </ul>
      
      <p>设置 <codeph>htmlText</codeph> 属性时，如果 <codeph>condenseWhite</codeph> 属性为 <codeph>true</codeph>，将压缩多个空白字符（与基于 HTML 的浏览器中的情况类似），例如，三个连续的空格显示为一个空格。<codeph>condenseWhite</codeph> 的默认值为 <codeph>false</codeph>，因此，若要压缩空白字符，必须将 <codeph>condenseWhite</codeph> 设置为 <codeph>true</codeph>。</p>
      
      <p>如果设置 <codeph>htmlText</codeph> 属性后立即重新读取该属性，将会看到设置的字符串。但是，如果 LayoutManager 开始运行，该值将发生更改，以包括包含 CSS 样式的其它标记。</p>
      
      <p>设置 <codeph>htmlText</codeph> 属性将影响 <codeph>text</codeph> 属性的多个方面。如果设置 <codeph>htmlText</codeph> 属性后立即读取 <codeph>text</codeph> 属性，则您将收到 <codeph>null</codeph>，这表明尚未确定与新的 <codeph>htmlText</codeph> 相对应的 <codeph>text</codeph>。但是，LayoutManager 运行后，<codeph>text</codeph> 属性值将更改为 <codeph>htmlText</codeph> 字符串，且所有 HTML 标签已删除；也就是说此值为 Label 实际显示的字符。</p>
       
      <p>反之，如果设置 <codeph>text</codeph> 属性，则先前设置的任何 <codeph>htmlText</codeph> 都将是不相关的。如果设置 <codeph>text</codeph> 属性后立即读取 <codeph>htmlText</codeph> 属性，则您将收到 <codeph>null</codeph>，这表明尚未确定与新的 <codeph>text</codeph> 相对应的 <codeph>htmlText</codeph>。但是，如果 LayoutManager 开始运行，<codeph>htmlText</codeph> 属性值更改为新的文本以及 CSS 样式的 HTML 标记。</p>
     
      <p>要使 LayoutManager 立即运行，您可以对 Label 调用 <codeph>validateNow()</codeph> 方法。例如，您可以设置一些 <codeph>htmlText</codeph>，调用 <codeph>validateNow()</codeph> 方法，然后立即获得相应的不包含 HTML 标记的 <codeph>text</codeph>。</p>
      
      <p>如果在 ActionScript 中设置 <codeph>text</codeph> 和 <codeph>htmlText</codeph> 两种属性，则最后设置的属性会生效。切勿在 MXML 中同时设置这两种属性，因为 MXML 不保证能够以特定顺序对实例的属性进行设置。</p>
      
      <p>在某个循环内设置 <codeph>text</codeph> 或 <codeph>htmlText</codeph> 属性的操作完成得很快，因为实际呈示文本的基础 TextField 在 LayoutManager 运行后才更新。</p>
     
      <p>如果尝试将此属性设置为 <codeph>null</codeph>，则该属性将设置为空字符串。如果属性值暂时为 <codeph>null</codeph>，则表明刚刚设置了 <codeph>text</codeph>，但尚未确定相应的 <codeph>htmlText</codeph>。</p>
      
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.xml#TextField/htmlText"><linktext>flash.text.TextField.htmlText</linktext></link></related-links></apiValue><apiValue id="mx.controls:Label:listData:get"><apiName>listData</apiName><shortdesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 List 控件中的相应数据初始化该组件的 listData 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 List 控件中的相应数据初始化该组件的 <codeph>listData</codeph> 属性。然后，组件可使用 <codeph>listData</codeph> 属性初始化嵌入式项呈示器或嵌入式项目编辑器的 <codeph>data</codeph> 属性。
     
      <p>您无需在 MXML 或 ActionScript 中设置此属性；将组件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 会对其进行设置。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:Label:selectable:get"><apiName>selectable</apiName><shortdesc>
      指定是否可以选择文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是否可以选择文本。允许选择文本将使您能够从控件中复制文本。
     
      <p>在 Label 控件中指定 <codeph>link</codeph> 事件后，必须将 <codeph>selectable</codeph> 属性设置为 <codeph>true</codeph> 才能执行 <codeph>link</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:styleSheet:get"><apiName>styleSheet</apiName><shortdesc>
     可呈示 Label 控件文本的 flash.text.StyleSheet 对象。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="flash.text:StyleSheet"/><apiDefaultValue>null
    </apiDefaultValue></apiValueDef><apiDesc>
     可呈示 Label 控件文本的 flash.text.StyleSheet 对象。使用此属性来详细控制文本的 HTML 样式。有关详细信息，请参阅 flash.text.StyleSheet 类文档。
    
     </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.StyleSheet.xml"><linktext>flash.text.StyleSheet</linktext></link></related-links></apiValue><apiValue id="mx.controls:Label:text:get"><apiName>text</apiName><shortdesc>
      指定由此控件显示的纯文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><helpid>3907
     
     </helpid></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      </apiDefaultValue><apiTipTexts><apiTipText>获取或设置 Label 内容
      </apiTipText></apiTipTexts></apiValueDef><apiDesc>
      指定由此控件显示的纯文本。其外观由此 Lable 控件的 CSS 样式确定。
     
      <p>当您设置此属性时，字符串中与 HTML 标记类似的字符没有任何特殊含义，将与输入时的显示一样。</p>
     
      <p>要显示使用 HTML 标签格式化的文本，请改用 <codeph>htmlText</codeph> 属性。如果设置了 <codeph>htmlText</codeph> 属性，HTML 将替换使用此属性设置的所有文本，并且 <codeph>text</codeph> 属性将返回 HTML 文本的纯文本版本，而从中去除了所有 HTML 标签。</p>
     
      <p>要在文本中包括特殊字符左尖括号 (&lt;)、右尖括号 (>) 或和号 (&amp;)，请将文本字符串包含在 CDATA 标签中。此外，您可以使用 HTML 字符实体表示特殊字符，例如 <codeph>&amp;lt;</codeph>。</p>
     
      <p>如果此文本比 Label 控件宽，则将由省略号 (...) 截断并终止。当您将鼠标移动到 Label 控件上时，整个文本将作为工具提示显示。如果您也使用 <codeph>tooltip</codeph> 属性设置了工具提示，则显示工具提示而不显示文本。</p>
     
      <p>如果尝试将此属性设置为 <codeph>null</codeph>，则该属性将设置为空字符串。<codeph>text</codeph> 属性可暂时使用值 <codeph>null</codeph>，此值表示刚刚设置了 <codeph>htmlText</codeph> 值，但相应的 <codeph>text</codeph> 值尚未确定。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Label:textHeight:get"><apiName>textHeight</apiName><shortdesc>
      文本高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      文本高度。
     
      <p>只有在组件经过验证后，<codeph>textHeight</codeph> 属性的值才是正确的。如果您在设置 <codeph>text</codeph> 后立即请求 <codeph>textHeight</codeph>，则接收到的值可能不正确。您应等待组件经过验证或调用 <codeph>validateNow()</codeph> 方法后，再获取此值。此行为与 flash.text.TextField 控件有所不同，后者会立即更新此值。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue><apiValue id="mx.controls:Label:textWidth:get"><apiName>textWidth</apiName><shortdesc>
      文本的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Number"/></apiValueDef><apiDesc>
      文本的宽度。
     
      <p>只有在组件经过验证后，<codeph>textWidth</codeph> 属性的值才是正确的。如果您在设置 <codeph>text</codeph> 后立即请求 <codeph>textWidth</codeph>，则接收到的值可能不正确。您应等待组件经过验证或调用 <codeph>validateNow()</codeph> 方法后，再获取此值。此行为与 flash.text.TextField 控件有所不同，后者会立即更新此值。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:TabBar"><apiName>TabBar</apiName><shortdesc>
  使用 TabBar 控件，您可以通过定义与每个选项卡关联的标签和数据来创建选项卡导航项目的水平和垂直组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="shadowDistance"/><Exclude kind="style" name="shadowDirection"/><Exclude kind="style" name="shadowColor"/><Exclude kind="style" name="shadowCapColor"/><Exclude kind="style" name="lastButtonStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="firstButtonStyleName"/><Exclude kind="style" name="dropShadowEnabled"/><Exclude kind="style" name="dropShadowColor"/><Exclude kind="style" name="cornerRadius"/><Exclude kind="style" name="borderVisible"/><Exclude kind="style" name="borderThickness"/><Exclude kind="style" name="borderStyle"/><Exclude kind="style" name="borderSkin"/><Exclude kind="style" name="borderSides"/><Exclude kind="style" name="borderColor"/><Exclude kind="style" name="borderAlpha"/><Exclude kind="style" name="backgroundSize"/><Exclude kind="style" name="backgroundImage"/><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAttachment"/><Exclude kind="style" name="backgroundAlpha"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:TabBar" playerVersion="Flash9" type="Number">
<description>
  垂直方向的选项卡导航项目之间的像素数目。
 
  </description>
<default>-1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="top,middle,bottom" inherit="no" name="verticalAlign" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
 TabBar 中所有选项卡的垂直对齐。由于各选项卡会拉伸填充整个 TabBar，所以仅在使用 tabHeight 样式且选项卡的总高度小于 TabBar 的高度时，此样式才有用。可能值包括 <codeph>"top"</codeph>、<codeph>"middle"</codeph> 和 <codeph>"bottom"</codeph>。
 
 </description>
<default>"middle"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tabWidth" owner="mx.controls:TabBar" playerVersion="Flash9" type="Number">
<description>
  选项卡导航项目的宽度（以像素为单位）。如果尚未定义，则根据标签文本计算默认的选项卡宽度。
 
  </description>
<default>undefined 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="tabHeight" owner="mx.controls:TabBar" playerVersion="Flash9" type="Number">
<description>
  每个选项卡导航项目的高度（以像素为单位）。当此属性为 <codeph>undefined</codeph> 时，每个选项卡的高度由应用于容器的字体样式确定。如果设置了此属性，则指定的值将覆盖此计算值。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="tabStyleName" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
  指定用于选项卡导航项目的样式的 CSS 样式声明名称。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectedTabTextStyleName" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
  指定用于所选选项卡导航项目的文本的样式的 CSS 样式声明名称。 
 
  </description>
<default>"activeTabStyle" 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="lastTabStyleName" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
  指定用于最后一个选项卡导航项目的样式的 CSS 样式声明名称。 
  
  </description>
<default>"tabStyleName" 
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:TabBar" playerVersion="Flash9" type="Number">
<description>
  水平方向的选项卡导航项目之间的像素数目。
 
  </description>
<default>-1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="horizontalAlign" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
 TabBar 中所有选项卡的水平对齐。由于各选项卡会拉伸填充整个 TabBar，所以仅在使用 tabWidth 样式且选项卡的总宽度小于 TabBar 的宽度时，此样式才有用。可能值包括 <codeph>"left"</codeph>、<codeph>"center"</codeph> 和 <codeph>"right"</codeph>。
 
 </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="firstTabStyleName" owner="mx.controls:TabBar" playerVersion="Flash9" type="String">
<description>
  指定用于第一个选项卡导航项目的样式的 CSS 样式声明名称。 
  
  </description>
<default>"tabStyleName"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:TabBar&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:TabBar
    <b>Styles</b>
    firstTabStyleName="<i>Value of the</i> <code>tabStyleName</code> <i>property</i>"
    horizontalAlign="left|center|right"
    horizontalGap="-1"
    lastTabStyleName="<i>Value of the</i> <code>tabStyleName</code> <i>property</i>"
    selectedTabTextStyleName="activeTabStyle"
    tabHeight="undefined"
    tabStyleName="Tab"
    tabWidth="undefined"
    verticalAlign="top|middle|bottom"
    verticalGap="-1"
 
    <b>Events</b>
    itemClick="<i>No default</i>"
    &gt;
    ...
       <i>child tags</i>
    ...
  &lt;/mx:TabBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:ToggleButtonBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  使用 TabBar 控件，您可以通过定义与每个选项卡关联的标签和数据来创建选项卡导航项目的水平和垂直组。使用 TabBar 控件而不是 TabNavigator 容器创建与多个视图默认不相关联的选项卡。
 
  <p>使用 TabBar 控件，可直接由数据确定选项卡，这样您能够以任何方式更改该一个或多个视图。</p>
 
  <p>TabBar 控件具有以下默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>首选大小</entry>
           <entry>宽度足以包含所有标签文本和任意填充，高度足以容纳标签文本。默认的选项卡高度由应用于该控件的字体、样式和外观确定。如果使用 tabHeight 属性设置显式高度，则此值将覆盖默认值。</entry>
        </row><row>
           <entry>控件的大小调整规则</entry>
           <entry>默认情况下，TabBar 控件不调整大小。如果希望 TabBar 基于其父容器的大小进行调整，请指定百分比大小。</entry>
        </row><row>
           <entry>填充</entry>
           <entry>适用于左属性和右属性的 0 个像素。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="TabBarExample.mxml"><swfblock conref="examples/TabBarExample.swf"/></example></apiClassifierDetail><adobeApiEvent id="mx.controls:TabBar_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  选择选项卡导航项目时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  选择选项卡导航项目时分派。仅当数据提供程序不是 ViewStack 容器时才发送此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:TabBar:TabBar"><apiName>TabBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:RadioButton"><apiName>RadioButton</apiName><shortdesc>
  RadioButton 控件使用户可在一组互相排斥的选择中做出一种选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="toggle"/><Exclude kind="property" name="emphasized"/><Alternative owner="mx.controls:RadioButton" replacement="spark.components.RadioButton" since="4.0">
	</Alternative><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:RadioButton" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的任何符号的颜色。示例包括 CheckBox 的复选标记或 ScrollBar 按钮的箭头。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:RadioButton" playerVersion="Flash9" theme="halo" type="uint">
<description>
  已禁用外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制禁用的 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制禁用的 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制禁用的 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x999999</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:RadioButton" playerVersion="Flash9" theme="halo" type="uint">
<description>
  某个外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x111111</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:RadioButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:RadioButton
    <strong>Properties</strong>
    groupName=""
    labelPlacement="right|left|top|bottom"
  
    <strong>Styles</strong>
    disabledIconColor="0x999999"
    iconColor="0x2B333C"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerGroup</apiBaseInterface><apiBaseInterface>mx.core:IToggleButton</apiBaseInterface><apiBaseClassifier>mx.controls:Button</apiBaseClassifier></apiClassifierDef><apiDesc>
  RadioButton 控件使用户可在一组互相排斥的选择中做出一种选择。RadioButton 组包含具有相同 <codeph>groupName</codeph> 属性的两个或更多 RadioButton 控件。当可以选择在 RadioButtonGroup 中组合 RadioButton 实例时，组使您能够执行诸如在一组按钮上（而不是在每个单独的按钮上）设置单一事件处理函数等事项。RadioButton 组可以引用 <codeph>&lt;mx:RadioButtonGroup></codeph> 标签创建的组。用户一次只能选择此组中的一个成员。选择未选中的组成员将取消选择该组中当前所选的 RadioButton 控件。 
 
  <p>RadioButton 控件具有以下默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以显示控件的文本标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>未定义</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="RadioButtonExample.mxml"><swfblock conref="examples/RadioButtonExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#RadioButtonGroup"><linktext>mx.controls.RadioButtonGroup</linktext></link></related-links><apiConstructor id="mx.controls:RadioButton:RadioButton"><apiName>RadioButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:RadioButton:group:get"><apiName>group</apiName><shortdesc>
      此 RadioButton 所属的 RadioButtonGroup 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:RadioButtonGroup</apiValueClassifier><apiDefaultValue>"undefined"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此 RadioButton 所属的 RadioButtonGroup 对象。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButton:groupName:get"><apiName>groupName</apiName><shortdesc>
      指定此 RadioButton 控件所属的组的名称，或者，如果此 RadioButton 是 RadioButtonGroup 控件定义的组的一部分，则指定 RadioButtonGroup 控件的 id 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiException><apiDesc>如果使用的是 Flex 4 或更高版本，且 groupName 以字符串“_fx_”开头，则会引发 ArgumentError。 
      
      </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiDefaultValue>"undefined"
      </apiDefaultValue></apiValueDef><apiDesc>
      指定此 RadioButton 控件所属的组的名称，或者，如果此 RadioButton 是 RadioButtonGroup 控件定义的组的一部分，则指定 RadioButtonGroup 控件的 <codeph>id</codeph> 属性值。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButton:labelPlacement:get"><apiName>labelPlacement</apiName><shortdesc>
      相对于 RadioButton 图标的标签位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>ButtonLabelPlacement.RIGHT
      
      </apiDefaultValue></apiValueDef><apiDesc>
      相对于 RadioButton 图标的标签位置。MXML 中的有效值为 <codeph>"right"</codeph>、<codeph>"left"</codeph>、<codeph>"bottom"</codeph> 和 <codeph>"top"</codeph>。
     
      <p>在 ActionScript 中，可使用以下常量来设置此属性：<codeph>ButtonLabelPlacement.RIGHT</codeph>、<codeph>ButtonLabelPlacement.LEFT</codeph>、<codeph>ButtonLabelPlacement.BOTTOM</codeph> 和 <codeph>ButtonLabelPlacement.TOP</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButton:value:get"><apiName>value</apiName><shortdesc>
      与 RadioButton 控件关联的可选用户定义值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      与 RadioButton 控件关联的可选用户定义值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:HorizontalList"><apiName>HorizontalList</apiName><shortdesc>
  HorizontalList 控件显示项目的水平列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="variableRowHeight"/><Exclude kind="property" name="maxRows"/><Exclude kind="property" name="maxColumns"/><Exclude kind="property" name="direction"/><Alternative owner="mx.controls:HorizontalList" replacement="spark.components.List" since="4.0">
<description>
  Flex 3 中的布局特定 List 组件已替换为采用通用布局的一个更通用的 List 组件。要从新的 List 组件实现相似的行为，请将 <codeph>layout</codeph> 属性设置为 <codeph>HorizontalLayout</codeph>。
 </description>
	</Alternative><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:HorizontalList&gt;</code> tag inherits all of the 
  tag attributes of its superclass and it adds no new tag attributes.</p>
 
  <pre>
  &lt;mx:HorizontalList/&gt
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.listClasses:TileBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  HorizontalList 控件显示项目的水平列表。如果无法同时显示所有项目，则可以显示一个水平滚动条，这样，用户就可以访问列表中的所有项目。
 
  <p>HorizontalList 控件具有下列默认大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>四列，其大小取决于单元格尺寸。</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素。</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>5000 × 5000。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="HorizontalListExample.mxml"><swfblock conref="examples/HorizontalListExample.swf"/></example></apiClassifierDetail><apiConstructor id="mx.controls:HorizontalList:HorizontalList"><apiName>HorizontalList</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:ToggleButtonBar"><apiName>ToggleButtonBar</apiName><shortdesc>
  ToggleButtonBar 控件定义一组水平或垂直按钮，这些按钮保持其选中或取消选中状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="shadowDistance"/><Exclude kind="style" name="shadowDirection"/><Exclude kind="style" name="shadowColor"/><Exclude kind="style" name="shadowCapColor"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="style" name="dropShadowEnabled"/><Exclude kind="style" name="dropShadowColor"/><Exclude kind="style" name="cornerRadius"/><Exclude kind="style" name="borderThickness"/><Exclude kind="style" name="borderStyle"/><Exclude kind="style" name="borderSkin"/><Exclude kind="style" name="borderSides"/><Exclude kind="style" name="borderColor"/><Exclude kind="style" name="backgroundSize"/><Exclude kind="style" name="backgroundImage"/><Exclude kind="style" name="backgroundColor"/><Exclude kind="style" name="backgroundAttachment"/><Exclude kind="style" name="backgroundAlpha"/><Exclude kind="event" name="click"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><Alternative owner="mx.controls:ToggleButtonBar" replacement="spark.components.ButtonBar" since="4.0">
	</Alternative><styles><style inherit="no" name="selectedButtonTextStyleName" owner="mx.controls:ToggleButtonBar" playerVersion="Flash9" type="String">
<description>
  CSS 样式声明的名称，用以指定所选按钮的文本样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ToggleButtonBar&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:ToggleButtonBar
    <b>Properties</b>
    selectedIndex="0"
    toggleOnClick="false|true"
 
    <b>Styles</b>
    selectedButtonTextStyleName="<i>Name of CSS style declaration that specifies styles for the text of the selected button.</i>"&gt;
    ...
       <i>child tags</i>
    ...
  &lt;/mx:ToggleButtonBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:ButtonBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToggleButtonBar 控件定义一组水平或垂直按钮，这些按钮保持其选中或取消选中状态。在 ToggleButtonBar 控件中，只有一个按钮可以处于选中状态。这就意味着，当用户在 ToggleButtonBar 控件中选择一个按钮后，该按钮将保持选中状态直到用户选择其它按钮。
 
  <p>如果将 ToggleButtonBar 容器的 <codeph>toggleOnClick</codeph> 属性设置为 <codeph>true</codeph>，则选择当前选中的按钮将取消其选中状态。默认情况下，<codeph>toggleOnClick</codeph> 属性设置为 <codeph>false</codeph>。</p>
 
  <p>您可以使用 ButtonBar 控件定义一组按压按钮。</p>
 
  <p>切换按钮通常用于维持一组选项之间的选择，如在 ViewStack 容器中的不同视图之间进行切换。</p>
 
  <p>ToggleButtonBar 控件基于其 <codeph>dataProvider</codeph> 属性的值创建 Button 控件。虽然 ToggleButtonBar 是 Container 的一个子类，但请勿使用 <codeph>Container.addChild()</codeph> 和 <codeph>Container.removeChild()</codeph> 等方法添加或删除 Button 控件，而应该使用 <codeph>addItem()</codeph> 和 <codeph>removeItem()</codeph> 等方法处理 <codeph>dataProvider</codeph> 属性。ToggleButtonBar 控件会根据对 <codeph>dataProvider</codeph> 属性所做的更改自动添加或删除必要的子项。</p>
 
  <p>要控制 ToggleButtonBar 控件的按钮样式，请使用 <codeph>buttonStyleName</codeph>、<codeph>firstButtonStyleName</codeph> 和 <codeph>lastButtonStyleName</codeph> 样式属性；请勿尝试设置 ToggleButtonBar 控件中单个 Button 控件的样式。</p>
 
  <p>ToggleButtonBar 控件具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
      
    
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
        <entry>首选大小</entry>
        <entry>宽度足以包含所有按钮及其标签文本和图标（如果有），以及任何填充和分隔条；高度足以容纳按钮。</entry>
     </row><row>
        <entry>控件的大小调整规则</entry>
        <entry>默认情况下不调整控件大小。如果希望 ToggleButtonBar 根据父容器的大小调整大小，请指定百分比大小。</entry>
     </row><row>
        <entry>selectedIndex</entry>
        <entry>确定在创建控件时选中哪个按钮。默认值为“0”，并选择栏中最左侧的按钮。将 selectedIndex 属性设置为“-1”可以取消对栏中所有按钮的选择。</entry>
     </row><row>
        <entry>填充</entry>
        <entry>top、bottom、left 和 right 属性均为 0 个像素。</entry>
     </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="ToggleButtonBarExample.mxml"><swfblock conref="examples/ToggleButtonBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#ButtonBar"><linktext>mx.controls.ButtonBar</linktext></link><link href="mx.controls.xml#LinkBar"><linktext>mx.controls.LinkBar</linktext></link></related-links><apiConstructor id="mx.controls:ToggleButtonBar:ToggleButtonBar"><apiName>ToggleButtonBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:ToggleButtonBar:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      所选按钮的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      所选按钮的索引。索引的范围是 0、1、2 ...、n - 1，其中 <i>n</i> 是按钮数目。
     
      <p>默认值为 0。值为 -1 时将取消对该栏中所有按钮的选择。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ToggleButtonBar:toggleOnClick:get"><apiName>toggleOnClick</apiName><shortdesc>
      指定用户是否可以取消对当前所选按钮的选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定用户是否可以取消对当前所选按钮的选择。默认情况下，仅当选中该组中的其它按钮时，才会自动取消对当前所选按钮的选择。将此属性设置为 <codeph>true</codeph> 将允许用户取消对当前所选按钮的选择。取消对当前所选按钮的选择后，<codeph>selectedIndex</codeph> 属性将设置为 <codeph>-1</codeph>。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:PopUpButton"><apiName>PopUpButton</apiName><shortdesc> 
  PopUpButton 控件可将灵活的弹出式控件接口添加到 Button 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="selectedUpSkin"/><Exclude kind="style" name="selectedUpIcon"/><Exclude kind="style" name="selectedOverSkin"/><Exclude kind="style" name="selectedOverIcon"/><Exclude kind="style" name="selectedDownSkin"/><Exclude kind="style" name="selectedDownIcon"/><Exclude kind="style" name="selectedDisabledSkin"/><Exclude kind="style" name="selectedDisabledIcon"/><Exclude kind="property" name="toggle"/><styles><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:PopUpButton" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的任何符号的颜色。示例包括 CheckBox 的复选标记或 ScrollBar 按钮的箭头。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="skin" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Class">
<description>
  控件的默认状态外观类。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="popUpOverSkin" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Class">
<description>
  适用于背景和边框的 popUpOver 状态的外观类（在 arrowButton 之上）。
  </description>
<default>mx.skins.halo.PopUpButtonSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="popUpIcon" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Class">
<description>
  用于 PopUpButton 右按钮的图标。支持 mx.skins.halo.PopUpIcon 和 mx.skins.halo.PopUpMenuIcon 类。
  </description>
<default>mx.skins.halo.PopUpIcon
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="popUpGap" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Number">
<description>
  PopUpButton 和指定的弹出 UIComponent 之间的垂直像素数目。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="popUpDownSkin" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Class">
<description>
  适用于背景和边框的 popUpDown 状态的外观类（当 arrowButton 处于按下状态时）。
  </description>
<default>mx.skins.halo.PopUpButtonSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="popUpStyleName" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="String">
<description>
  控件使用的 CSS 样式声明的名称。通过此样式，您可以控制此控件弹出的 UIComponent 对象的外观。 
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Function">
<description>
  控制打开补间的组件的缓动函数。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Number">
<description>
  打开过渡的长度（以毫秒为单位）。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="icon" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Class">
<description>
  适用于主按钮的默认图标类。
 
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeEasingFunction" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Function">
<description>
  控制关闭补间的组件的缓动函数。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="closeDuration" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Number">
<description>
  关闭过渡的长度（以毫秒为单位）。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="arrowButtonWidth" owner="mx.controls:PopUpButton" playerVersion="Flash9" type="Number">
<description>
  分隔符划线和组件右边缘之间的像素数目。
  
  </description>
<default>18
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:PopUpButton" playerVersion="Flash9" theme="halo" type="uint">
<description>
  已禁用外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制禁用的 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制禁用的 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制禁用的 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x999999</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:PopUpButton" playerVersion="Flash9" theme="halo" type="uint">
<description>
  某个外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x111111</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:PopUpButton&gt;</code> tag inherits all of the tag
  attributes of its superclass and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:PopUpButton
    <strong>Properties</strong> 
    openAlways="false|true
    popUp="No default"
  
    <strong>Styles</strong>
    arrowButtonWidth="16"
    closeDuration="250"
    closeEasingFunction="No default"
    disabledIconColor="0x999999"
    iconColor="0x111111"
    openDuration="250"
    openEasingFunction="No default"
    popUpDownSkin="popUpDownSkin"
    popUpGap="0"
    popUpIcon="PopUpIcon"
    popUpOverSkin="popUpOverSkin"
  
    <strong>Events</strong>
    close="No default"
    open="No default"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:Button</apiBaseClassifier></apiClassifierDef><apiDesc> 
  PopUpButton 控件可将灵活的弹出式控件接口添加到 Button 控件。它包含一个主按钮和一个辅助按钮，后者称为弹出按钮，用于用户单击此弹出按钮时弹出任何 UIComponent 对象。 
 
  <p>PopUpButton 控件的表面可包含一个文本标签、一个图标，或者两者都包含。当用户单击 PopUpButton 控件的主要部分时，此控件将分派 <codeph>click</codeph> 事件。</p>
 
  <p>PopUpButton 控件的一个常见用法是，使弹出式按钮打开可更改主按钮的函数和标签的 List 控件或 Menu 控件。</p>
 
  <p>PopUpButton 控件具有以下默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以容纳主按钮上的标签和图标以及弹出式按钮上的标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>未定义</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="PopUpButtonExample.mxml"><swfblock conref="examples/PopUpButtonExample.swf"/></example></apiClassifierDetail><adobeApiEvent id="mx.controls:PopUpButton_mx.events.DropdownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  在指定的 UIComponent 打开时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.OPEN</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在指定的 UIComponent 打开时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:PopUpButton_mx.events.DropdownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  在指定的 UIComponent 关闭时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在指定的 UIComponent 关闭时分派。 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:PopUpButton:PopUpButton"><apiName>PopUpButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:PopUpButton:close"><apiName>close</apiName><shortdesc>
      关闭 PopUpButton 控件打开的 UIComponent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      关闭 PopUpButton 控件打开的 UIComponent 对象。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:PopUpButton:open"><apiName>open</apiName><shortdesc>
      打开 popUp 属性指定的 UIComponent 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      打开 <codeph>popUp</codeph> 属性指定的 UIComponent 对象。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:PopUpButton:closeOnActivity:get"><apiName>closeOnActivity</apiName><shortdesc>
      如果为 true，请指定在单击或进行其他用户活动时弹出式控件关闭。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true 
     </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，请指定在单击或进行其他用户活动时弹出式控件关闭。弹出式控件是单击弹出式按钮时打开的控件。
     
      <p>对于诸如 Menu、List 或 TileList 等弹出式控件，可以保留此属性的默认值 (<codeph>true</codeph>)，因为这些控件应在进行活动时关闭。但是，对于多重选择和其它类型的弹出式控件，可以将此属性设置为 <codeph>false</codeph>，以避免弹出式控件在进行活动时关闭。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpButton:openAlways:get"><apiName>openAlways</apiName><shortdesc>
      如果为 true，则指定在单击主按钮时弹出 popUp。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则指定在单击主按钮时弹出 <codeph>popUp</codeph>。按空格键或单击弹出式按钮时，无论 <codeph>openAlways</codeph> 属性是如何设置的，<codeph>popUp</codeph> 将始终显示。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpButton:popUp:get"><apiName>popUp</apiName><shortdesc>
      指定要弹出的 UIComponent 对象或 UIComponent 的子类定义的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier><apiDefaultValue>null 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定要弹出的 UIComponent 对象或 UIComponent 的子类定义的对象。例如，您可以指定 Menu、TileList 或 Tree 控件。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:HRule"><apiName>HRule</apiName><shortdesc>
  HRule 控件创建一条水平线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:HRule" replacement="spark.primitives.Line" since="4.0">
	</Alternative><styles><style format="Length" inherit="yes" name="strokeWidth" owner="mx.controls:HRule" playerVersion="Flash9" type="Number">
<description>
  画线板的粗细（以像素为单位）。
  <ul>
    <li>如果 <codeph>strokeWidth</codeph> 为 1，则画线板为 1 个像素宽的线条。</li>
    <li>如果 <codeph>strokeWidth</codeph> 为 2，则线条是两条相邻的宽度为 1 个像素的水平线。</li>
    <li>如果 <codeph>strokeWidth</codeph> 大于 2，则画线板为边宽 1 个像素的中空矩形。</li>
  </ul>
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="strokeColor" owner="mx.controls:HRule" playerVersion="Flash9" type="uint">
<description>
  线条的颜色。 
  <ul>
    <li>如果 <codeph>strokeWidth</codeph> 为 1，则 strokeColor 为整个线条的颜色。</li>
    <li>如果 <codeph>strokeWidth</codeph> 为 2，则 strokeColor 是顶部线条的颜色。</li>
    <li>如果 <codeph>strokeWidth</codeph> 大于 2，则 strokeColor 为该矩形的顶部边和左侧边的颜色。</li>
  </ul> 
  
  </description>
<default>0xC4CCCC
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="shadowColor" owner="mx.controls:HRule" playerVersion="Flash9" type="uint">
<description>
  线条的阴影颜色。 
  <ul>
    <li>如果 <codeph>strokeWidth</codeph> 为 1，则 shadowColor 不起任何作用。</li>
    <li>如果 <codeph>strokeWidth</codeph> 为 2，则 shadowColor 是底部线条的颜色。</li>
    <li>如果 <codeph>strokeWidth</codeph> 大于 2，则 shadowColor 是矩形底边和右边的颜色。</li>
  </ul>
 
  </description>
<default>0xEEEEEE
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:HRule&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:HRule
    <strong>Styles</strong>
    strokeColor="0xC4CCCC"
    shadowColor="0xEEEEEE"
    strokeWidth="2"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  HRule 控件创建一条水平线。通常，此控件用于在容器内创建一条分隔线。
 
  <p>HRule 控件具有下列默认属性：</p>
     <adobetable class="innertable">
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>默认宽度为 100 个像素，默认高度为 2 个像素。默认情况下，HRule 控件不可以重新调整大小；将宽度和高度设置为百分比值来实现大小调整。</entry>
        </row><row>
           <entry>strokeWidth</entry>
           <entry>2 个像素。</entry>
        </row><row>
           <entry>strokeColor</entry>
           <entry>0xC4CCCC。</entry>
        </row><row>
           <entry>shadowColor</entry>
           <entry>0xEEEEEE。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleHRule.mxml"><swfblock conref="examples/SimpleHRule.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#VRule"><linktext>mx.controls.VRule</linktext></link></related-links><apiConstructor id="mx.controls:HRule:HRule"><apiName>HRule</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:PopUpMenuButton"><apiName>PopUpMenuButton</apiName><shortdesc>
  PopUpMenuButton 控件可创建一个 PopUpButton 控件，带有一个主子按钮和一个辅助子按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="selectedUpSkin"/><Exclude kind="style" name="selectedUpIcon"/><Exclude kind="style" name="selectedOverSkin"/><Exclude kind="style" name="selectedOverIcon"/><Exclude kind="style" name="selectedDownSkin"/><Exclude kind="style" name="selectedDownIcon"/><Exclude kind="style" name="selectedDisabledSkin"/><Exclude kind="style" name="selectedDisabledIcon"/><Exclude kind="property" name="toggle"/><styles><style inherit="no" name="popUpStyleName" owner="mx.controls:PopUpMenuButton" playerVersion="Flash9" type="String">
<description>
  下拉菜单使用的 CSS 样式声明的名称。可以通过此属性控制下拉菜单的外观。默认值将 <codeph>fontWeight</codeph> 设置为 <codeph>normal</codeph>，并将 <codeph>textAlign</codeph> 设置为 <codeph>left</codeph>。
 
  </description>
<default>"popUpMenu"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:PopUpMenuButton&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:PopUpMenuButton
    <strong>Properties</strong>
    dataDescriptor="<i>instance of DefaultDataDescriptor</i>"
    dataProvider="undefined"
    iconField="icon"
    iconFunction="undefined"
    labelField="label"
    labelFunction="undefined"
    showRoot="false|true"
    &nbsp;
    <strong>Event</strong>
    change=<i>No default</i>
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>能够弹出菜单并充当按钮
  </apiTipText></apiTipTexts><apiBaseClassifier>mx.controls:PopUpButton</apiBaseClassifier></apiClassifierDef><apiDesc>
  PopUpMenuButton 控件可创建一个 PopUpButton 控件，带有一个主子按钮和一个辅助子按钮。单击辅助（右）子按钮会下拉一个菜单，可通过 <codeph>dataProvider</codeph> 属性对其填充。与 Menu 和 MenuBar 控件不同，PopUpMenuButton 控件仅支持单级菜单。这就意味着此菜单不能包含级联子菜单。
 
  <p>PopUpMenuButton 控件的主子按钮表面可以包含文本标签、图标或者同时包含两者。当用户从下拉菜单中选择某个项目或单击 PopUpMenuButton 控件的主按钮时，该控件将分派 <codeph>itemClick</codeph> 事件。当用户单击该控件的主按钮时，该控件还会分派 <codeph>click</codeph> 事件。您可以自定义 PopUpMenuButton 控件的外观。</p>
 
  <p>PopUpMenuButton 控件具有下列大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>足以容纳标签、主按钮上的任何图标以及弹出按钮上的图标。该控件不为菜单保留空间。</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素。</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>10000 × 10000。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="PopUpButtonMenuExample.mxml"><swfblock conref="examples/PopUpButtonMenuExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#Menu"><linktext>mx.controls.Menu</linktext></link><link href="mx.controls.xml#MenuBar"><linktext>mx.controls.MenuBar</linktext></link></related-links><adobeApiEvent id="mx.controls:PopUpMenuButton_mx.events.MenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  当用户从弹出菜单中选择项目时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户从弹出菜单中选择项目时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:PopUpMenuButton:PopUpMenuButton"><apiName>PopUpMenuButton</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:PopUpMenuButton:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      数据描述符可以访问并处理数据提供程序中的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.menuClasses:IMenuDataDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      数据描述符可以访问并处理数据提供程序中的数据。
      <p>如果要将此属性指定为 MXML 中的某个属性，则必须使用对数据描述符的引用，而不是描述符的字符串名称。为该属性使用下列格式：</p>
     
      <pre>&lt;mx:PopUpMenuButton id="menubar" dataDescriptor="{new MyCustomDataDescriptor()}"/></pre>
     
      <p>或者，您可以在 MXML 中将该属性指定为嵌套子标签，如下例所示：</p>
     
      <pre>&lt;mx:PopUpMenuButton>
      &lt;mx:dataDescriptor>
         &lt;myCustomDataDescriptor>
      &lt;/mx:dataDescriptor>
      ...</pre>
     
      <p>默认值为 DefaultDataDescriptor 类的内部实例。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:dataProvider:get"><apiName>dataProvider</apiName><shortdesc>
      popUpMenu 的 DataProvider。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      popUpMenu 的 DataProvider。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:iconField:get"><apiName>iconField</apiName><shortdesc>
      dataProvider Array 中的字段名称，该字段中包含要为每个菜单项显示的图标。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"icon"
     </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>dataProvider</codeph> Array 中的字段名称，该字段中包含要为每个菜单项显示的图标。<codeph>iconFunction</codeph> 属性（如果已设置）将覆盖此属性。
     
      <p>项呈示器在数据提供程序中查找具有指定给 <codeph>iconField</codeph> 属性的名称的属性。如果该属性的值是 Class，则它会对该类进行实例化，而且它应为 IFlexDisplayObject 实例。如果该属性的值是 String，则它会查找以确定应用程序中是否存在具有该名称的 Class 属性。如果在应用程序上找不到属性，则它会在文档上查找具有该名称的属性，并使该属性映射到某个 Class。</p>
     
      <p>如果数据提供程序是一个 E4X XML 对象，则必须显式设置此属性；例如，使用 @icon 指定 <codeph>icon</codeph> 属性。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:iconFunction:get"><apiName>iconFunction</apiName><shortdesc>
      一个函数，用于确定要为每个菜单项显示的图标。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
     </apiDefaultValue></apiValueDef><apiDesc>
      一个函数，用于确定要为每个菜单项显示的图标。如果省略此属性，则 Flex 将使用由 <codeph>iconField</codeph> 属性确定的字段内容或属性。如果指定了此属性，则 Flex 将忽略任何 <codeph>iconField</codeph> 属性值。
     
      <p>默认情况下，该菜单不会尝试将图标与行中的文本一起显示。但是，您可以通过指定图标函数来为图形指定一个类，将其作为图标创建并显示在行中。 </p>
     
      <p>iconFunction 仅采用数据提供程序中的某个项目作为唯一参数，并返回一个类：</p>
     
      <blockquote>
      <codeph>iconFunction(item:Object):Class</codeph>
      </blockquote>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:labelField:get"><apiName>labelField</apiName><shortdesc>
      dataProvider Array 中的字段名称，该字段中包含要为每个菜单项显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"label"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      <codeph>dataProvider</codeph> Array 中的字段名称，该字段包含要为每个菜单项显示的文本。<codeph>labelFunction</codeph> 属性（如果已设置）将覆盖此属性。如果数据提供程序是一个字符串 Array，则 Flex 会将每个 String 值用作标签。如果数据提供程序是一个 E4X XML 对象，则必须显式设置此属性；例如，使用 @label 指定 <codeph>label</codeph> 属性。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      一个函数，用于确定要为每个菜单项显示的文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个函数，用于确定要为每个菜单项显示的文本。如果省略此属性，则 Flex 将使用由 <codeph>labelField</codeph> 属性确定的字段内容或属性。如果指定了此属性，则 Flex 将忽略任何 <codeph>labelField</codeph> 属性值。
     
      <p>如果指定此属性，则标签函数必须查找一个或多个合适的字段并返回可显示的字符串。<codeph>labelFunction</codeph> 属性非常适用于处理格式设置和本地化。</p>
     
      <p>标签函数必须使用 dataProvider 中的项目作为唯一的自变量，并返回一个字符串，如以下示例所示：</p>
     
      <pre>labelFunction(item:Object):String</pre>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      指定是显示数据提供程序的一个还是多个顶级节点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是显示数据提供程序的一个还是多个顶级节点。如果此属性设置为 <codeph>false</codeph>，则该控件将只显示第一个顶级节点的子级节点。其它任何顶级节点都将被忽略。通常，对于顶级节点是文档对象的 E4X 格式的 XML 数据提供程序，需要将此属性设置为 <codeph>false</codeph>。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:PopUpMenuButton:popUp:set"><apiName>popUp</apiName><shortdesc>
      对弹出的 Menu 对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
      对弹出的 Menu 对象的引用。
     
      <p>此属性是只读的，设置它不会产生任何效果。但可以通过设置 <codeph>dataProvider</codeph> 属性实现所需效果。（只写指示符显示在语法摘要中，因为 superclass 中的属性是可读写的，而此类将使用空的实现覆盖 setter。）</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:DateChooser"><apiName>DateChooser</apiName><shortdesc>
  DateChooser 控件显示月份名称、年份名称，并显示包含当月的所有日期的网格（每列标有对应的星期日期）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><styles><style inherit="no" name="weekDayStyleName" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  用于配置控件工作日名称的样式表定义名称。如果省略该名称，工作日名称将继承控件的文本样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="todayStyleName" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  用于配置当前日期的数字文本外观的样式表定义名称，当 <codeph>showToday</codeph> 属性为 <codeph>true</codeph> 时将加亮显示该名称。指定“颜色”样式以更改字体颜色。如果省略该名称，当前日期文本将继承控件的文本样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="todayIndicatorSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作 DateChooser 控件中当前日期加亮区域的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="todayColor" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  当前日期的背景颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="symbolColor" owner="mx.controls:DateChooser" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的任何符号的颜色。示例包括 CheckBox 的复选标记或 ScrollBar 按钮的箭头。
   
  </description>
<default>0x000000
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectionIndicatorSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作 DateChooser 控件中当前所选日期加亮区域的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:DateChooser" playerVersion="Flash9" type="uint">
<description>
  DateChooser 控件中当前选定日期的加亮区域的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="rollOverIndicatorSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当用户将鼠标指针悬停于 DateChooser 控件中某一日期上时，该日期加亮区域的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:DateChooser" playerVersion="Flash9" type="uint">
<description>
  当用户在 DateChooser 控件中的某一日期上方按住鼠标时，该日期的加亮区域的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevYearUpSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当鼠标按键未置于上一年份箭头上时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevYearOverSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当用户将鼠标指针悬停于上一年份箭头上时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevYearDownSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当用户在上一年份箭头上方按下鼠标按键时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevYearDisabledSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当上一年份箭头处于禁用状态时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevYearSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作上一年份箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevMonthUpSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当鼠标指针未置于上一月箭头上时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevMonthOverSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当用户将鼠标指针悬停于上一月箭头上时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevMonthDownSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当用户在上一月箭头上方按下鼠标按键时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevMonthDisabledSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当上一月箭头处于禁用状态时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="prevMonthSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作上一月箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextYearUpSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当鼠标指针未置于下一年份箭头上时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextYearOverSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当用户将鼠标指针移至下一年份箭头上时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextYearDownSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当用户在下一年份箭头上方按下鼠标按键时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextYearDisabledSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当下一年份箭头处于禁用状态时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextYearSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作下一年份箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextMonthUpSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当鼠标指针未置于下一月箭头上时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextMonthOverSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当用户将鼠标指针移至下一月箭头上时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextMonthDownSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当用户在下一月箭头上方按下鼠标按键时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextMonthDisabledSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作当下一月箭头处于禁用状态时，该箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="nextMonthSkin" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Class">
<description>
  类的名称，该类用作下一月箭头的外观。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Alpha 透明度，用于加亮填充控件。第一个值指定加亮部分顶部的透明度，第二个值指定加亮部分底部的透明度。加亮部分覆盖了外观的上半部分。
  
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerStyleName" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  用于配置控件标题区域的文本（月份名称和年份）和外观的样式表定义名称。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="headerColors" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo, spark" type="Array">
<description>
  DateChooser 控件顶部区域的颜色。默认值为 <codeph>[ 0xE1E5EB, 0xF4F5F7 ]</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="focusColor" owner="mx.controls:DateChooser" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件对焦时，对焦环的颜色
   
  </description>
<default>0x70B2EE
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  <codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.controls:DateChooser" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的内容区域的颜色。
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="contentBackgroundAlpha" owner="mx.controls:DateChooser" playerVersion="Flash10" theme="spark" type="Number">
<description>
  组件内容背景的透明度。
 
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.controls:DateChooser" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  边框可视性。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="Number">
<description>
  边框厚度。仅在将 <codeph>borderStyle</codeph> 设置为 <codeph>"solid"</codeph> 时使用。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  边框颜色。下列控件支持此样式：Button、CheckBox、ComboBox、MenuBar、NumericStepper、ProgressBar、RadioButton、ScrollBar、Slider 以及任何支持 <codeph>borderStyle</codeph> 样式的组件。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.controls:DateChooser" playerVersion="Flash10" theme="spark" type="Number">
<description>
  边框 Alpha（透明度）。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="uint">
<description>
  DateChooser 控件的背景颜色。
  
  </description>
<default>0xFFFFF
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="Number">
<description>
  由 <codeph>backgroundColor</codeph> 属性定义的颜色的 alpha 级别。有效值范围是 .0 到 1.0。
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:DateChooser" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:DateChooser" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:DateChooser" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:DateChooser" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:DateChooser" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="uint">
<description>
  已禁用外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制禁用的 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制禁用的 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制禁用的 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x999999</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:DateChooser" playerVersion="Flash9" theme="halo" type="uint">
<description>
  某个外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x111111</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  垂直方向上各子项间的像素数目。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 6。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  水平方向上各子项间的像素数目。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 8。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:DateChooser" playerVersion="Flash9" type="String">
<description>
  指定焦点矩形的哪些角应该是圆角。此值是使用空格分隔的 String，该 String 可以是 <codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> 和 <codeph>"br"</codeph> 的任意组合。例如，要指定右侧的角为圆角，左侧的角为直角，应使用 <codeph>"tr br"</codeph>。<codeph>cornerRadius</codeph> 样式属性指定圆角的半径。默认值取决于组件类；如果未覆盖该类的默认值，则默认值为 <codeph>"tl tr bl br"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:DateChooser" playerVersion="Flash9" type="Number">
<description>
  指定焦点外观的 alpha 透明度值。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:DateChooser&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:DateChooser
    <strong>Properties</strong>
    allowDisjointSelection="true|false"
    allowMultipleSelection="false|true"
    dayNames="["S", "M", "T", "W", "T", "F", "S"]"
    disabledDays="<i>No default</i>"
    disabledRanges="<i>No default</i>"
    displayedMonth="<i>Current month</i>"
    displayedYear="<i>Current year</i>"
    firstDayOfWeek="0"
    maxYear="2100"
    minYear="1900"
    monthNames="["January", "February", "March", "April", "May",
      "June", "July", "August", "September", "October", "November",
      "December"]"
    monthSymbol=""
    selectableRange="<i>No default</i>"
    selectedDate="<i>No default</i>"
    selectedRanges="<i>No default</i>"
    showToday="true|false"
    yearNavigationEnabled="false|true"
    yearSymbol=""
 
    <strong>Styles</strong>
    backgroundColor="0xFFFFFF"
    backgroundAlpha="1.0"
    borderColor="0xAAB3B3"
    borderThickness="1"
    color="0x0B333C"
    cornerRadius="4"
    disabledColor="0xAAB3B3"
    disabledIconColor="0x999999"
    fillAlphas="[0.6, 0.4]"
    fillColors="[0xFFFFFF, 0xCCCCCC]"
    focusAlpha="0.5"
    focusRoundedCorners"tl tr bl br"
    fontAntiAliasType="advanced"
    fontFamily="Verdana"
    fontGridFitType="pixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    headerColors="[0xE1E5EB, 0xF4F5F7]"
    headerStyleName="headerDateText"
    highlightAlphas="[0.3, 0.0]"
    horizontalGap="8"
    iconColor="0x111111"
    leading="2"
    nextMonthDisabledSkin="DateChooserMonthArrowSkin"
    nextMonthDownSkin="DateChooserMonthArrowSkin"
    nextMonthOverSkin="DateChooserMonthArrowSkin"
    nextMonthSkin = "DateChooserMonthArrowSkin" 
    nextMonthUpSkin="DateChooserMonthArrowSkin"
    nextYearDisabledSkin="DateChooserYearArrowSkin"
    nextYearDownSkin="DateChooserYearArrowSkin"
    nextYearOverSkin="DateChooserYearArrowSkin"
    nextYearSkin = "DateChooserYearArrowSkin"
    nextYearUpSkin="DateChooserYearArrowSkin"
    prevMonthDisabledSkin="DateChooserMonthArrowSkin"
    prevMonthDownSkin="DateChooserMonthArrowSkin"
    prevMonthOverSkin="DateChooserMonthArrowSkin"
    prevMonthSkin = "DateChooserMonthArrowSkin"
    prevMonthUpSkin="DateChooserMonthArrowSkin"
    prevYearDisabledSkin="DateChooserYearArrowSkin"
    prevYearDownSkin="DateChooserYearArrowSkin"
    prevYearOverSkin="DateChooserYearArrowSkin"
    prevYearSkin = "DateChooserYearArrowSkin"
    prevYearUpSkin="DateChooserYearArrowSkin"
    rollOverColor="0xEEFEE6"
    rollOverIndicatorSkin="DateChooserIndicator"
    selectionColor="0xB7F39B"
    selectionIndicatorSkin="DateChooserIndicator"
    textAlign="left|right|center"
    textDecoration="none|underline"
    textIndent="0"
    todayColor="0x818181"
    todayIndicatorSkin="DateChooserIndicator"
    todayStyleName="todayStyle"
    verticalGap="6"
    weekDayStyleName="weekDayStyle"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerComponent</apiBaseInterface><apiBaseInterface>mx.core:IFontContextComponent</apiBaseInterface><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  DateChooser 控件显示月份名称、年份名称，并显示包含当月的所有日期的网格（每列标有对应的星期日期）。用户可以选择一个日期、某个日期范围或者多个日期。此控件包含前进和后退箭头按钮，用于改变年份和月份。您可以允许用户选择多个日期，禁止选择特定日期和只限于显示某个日期范围。
 
  <p>DateChooser 控件具有下列默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>大小足以容纳日历，宽度足以显示日期名称</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>无限制</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="DateChooserExample.mxml"><swfblock conref="examples/DateChooserExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#DateField"><linktext>mx.controls.DateField</linktext></link></related-links><adobeApiEvent id="mx.controls:DateChooser_mx.events.DateChooserEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  当月份由于用户交互操作而更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DateChooserEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.DateChooserEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当月份由于用户交互操作而更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DateChooser_mx.events.CalendarLayoutChangeEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  当选择或更改某个日期时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CalendarLayoutChangeEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.CalendarLayoutChangeEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当选择或更改某个日期时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:DateChooser:DateChooser"><apiName>DateChooser</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:DateChooser:allowDisjointSelection:get"><apiName>allowDisjointSelection</apiName><shortdesc>
      如果为 true，则指定在 DateChooser 控件中允许选择不连续的日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true;
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则指定在 DateChooser 控件中允许选择不连续的日期。仅当 <codeph>allowMultipleSelection</codeph> 属性设置为 <codeph>true</codeph> 时，此属性才起作用。设置此属性可更改 DateChooser 控件的外观。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:allowMultipleSelection:get"><apiName>allowMultipleSelection</apiName><shortdesc>
      如果为 true，则指定在 DateChooser 控件中允许选择多个日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则指定在 DateChooser 控件中允许选择多个日期。设置此属性可更改 DateChooser 控件的外观。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:protected:calendarLayoutStyleFilters:get"><apiName>calendarLayoutStyleFilters</apiName><shortdesc>
      从 DateChooser 传递到日历布局的一组样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 DateChooser 传递到日历布局的一组样式。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateChooser:dayNames:get"><apiName>dayNames</apiName><shortdesc>
      DateChooser 控件的工作日名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[ "S", "M", "T", "W", "T", "F", "S" ].
      
      </apiDefaultValue></apiValueDef><apiDesc>
      DateChooser 控件的工作日名称。更改此属性可更改 DateChooser 控件的日期标签。星期日为第一天（在索引为 0 处）。一周中其余的天按照正常的顺序命名。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:disabledDays:get"><apiName>disabledDays</apiName><shortdesc>
      每周中要禁用的日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      每周中要禁用的日期。每月中除指定日期外，所有日期都被禁用。此属性可更改 DateChooser 控件的外观。此数组中的元素可使用介于 0（星期日）到 6（星期六）之间的值。例如，如果设置值 <codeph>[ 0, 6 ]</codeph>，将禁用星期日和星期六。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:disabledRanges:get"><apiName>disabledRanges</apiName><shortdesc>
      禁用一天或多天。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      禁用一天或多天。
     
      <p>此属性接受对象 Array 作为参数。此数组中的所有对象都是 Date 对象，用于指定要禁用的各个日期；也可以是一个包含 <codeph>rangeStart</codeph> 和（或）<codeph>rangeEnd</codeph> 属性的对象。这些属性的值描述了日期范围的边界。如果忽略其中任一属性，则认为在该方向上无范围限制。如果仅指定 <codeph>rangeStart</codeph>，则将禁用指定日期之后的所有日期（包括 <codeph>rangeStart</codeph> 日期）。如果仅指定 <codeph>rangeEnd</codeph>，则将禁用指定日期之前的所有日期（包括 <codeph>rangeEnd</codeph> 日期）。要禁用单个日期，请使用一个 Date 对象指定 Array 中的某个日期。时间值（如果存在）将以 Date 对象为零值，依次递增。</p>
     
      <p>以下示例将禁用下列日期：2006 年 1 月 11 日，从 2006 年 1 月 23 至同年 2 月 10 日，以及 2006 年 3 月 1 日及后续所有日期。</p>
     
      <p><codeph>disabledRanges="{[ new Date(2006,0,11), {rangeStart: new Date(2006,0,23), rangeEnd: new Date(2006,1,10)}, {rangeStart: new Date(2006,2,1)} ]}"</codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:displayedMonth:get"><apiName>displayedMonth</apiName><shortdesc>
      displayedMonth 属性与 displayedYear 属性一起使用，前者指定在 DateChooser 控件中显示的月份。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      <codeph>displayedMonth</codeph> 属性与 <codeph>displayedYear</codeph> 属性一起使用，前者指定在 DateChooser 控件中显示的月份。月份从零开始，因此一月份为 0，十二月份为 11。设置此属性可更改 DateChooser 控件的外观。
     
      <p>默认值为当前月份。</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:displayedYear:get"><apiName>displayedYear</apiName><shortdesc>
      displayedYear 属性与 displayedMonth 属性一起使用，前者指定在 DateChooser 控件中显示的年份。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      <codeph>displayedYear</codeph> 属性与 <codeph>displayedMonth</codeph> 属性一起使用，前者指定在 DateChooser 控件中显示的年份。设置此属性可更改 DateChooser 控件的外观。
     
      <p>默认值为当前年份。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:firstDayOfWeek:get"><apiName>firstDayOfWeek</apiName><shortdesc>
      一个数字，该数字代表显示在 DateChooser 控件第一列中的一周中的日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>0 (Sunday)
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个数字，该数字代表显示在 DateChooser 控件第一列中的一周中的日期。该值必须介于 0 到 6 之间，其中 0 对应星期日，这是 <codeph>dayNames</codeph> Array 中的第一个元素。
     
      <p>设置此属性将更改日期列的顺序。例如，将其设置为 1 可将星期一设置为该控件中的第一列。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:maxYear:get"><apiName>maxYear</apiName><shortdesc>
      控件中可选的最后一个年份。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>2100
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控件中可选的最后一个年份。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:minYear:get"><apiName>minYear</apiName><shortdesc>
      控件中可选的第一个年份。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>1900
      
      </apiDefaultValue></apiValueDef><apiDesc>
      控件中可选的第一个年份。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:monthNames:get"><apiName>monthNames</apiName><shortdesc>
      显示在 DateChooser 控件顶部的月份名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[ "January", "February", "March", "April", "May", "June", 
      "July", "August", "September", "October", "November", "December" ]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      显示在 DateChooser 控件顶部的月份名称。将 <codeph>monthSymbol</codeph> 属性追加到由 <codeph>monthNames</codeph> 属性指定的值末尾，该属性这在语言（如日语）中很有用。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:monthSymbol:get"><apiName>monthSymbol</apiName><shortdesc>
      此属性将追加到由 monthNames 属性指定的值的末尾，用于定义显示在 DateChooser 控件顶部的月份名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此属性将追加到由 <codeph>monthNames</codeph> 属性指定的值的末尾，用于定义显示在 DateChooser 控件顶部的月份名称。有些语言（如日语）会在月份名称后使用额外的符号。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:protected:nextMonthStyleFilters:get"><apiName>nextMonthStyleFilters</apiName><shortdesc>
      从 DateChooser 传递到下一月份按钮的一组样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 DateChooser 传递到下一月份按钮的一组样式。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateChooser:protected:nextYearStyleFilters:get"><apiName>nextYearStyleFilters</apiName><shortdesc>
      从 DateChooser 传递到下一年份按钮的一组样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 DateChooser 传递到下一年份按钮的一组样式。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateChooser:protected:prevMonthStyleFilters:get"><apiName>prevMonthStyleFilters</apiName><shortdesc>
      从 DateChooser 传递到上一月份按钮的一组样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 DateChooser 传递到上一月份按钮的一组样式。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateChooser:protected:prevYearStyleFilters:get"><apiName>prevYearStyleFilters</apiName><shortdesc>
      从 DateChooser 传递到上一年份按钮的一组样式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 DateChooser 传递到上一年份按钮的一组样式。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:DateChooser:selectableRange:get"><apiName>selectableRange</apiName><shortdesc>
      日期范围，可从中选择日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      日期范围，可从中选择日期。例如，可以选择 04-12-2006 和 04-12-2007 之间的日期，而超出此范围的日期将被禁用。
     
      <p>此属性接受 Object 作为参数。该 Object 包含 Date 类型的两个属性：<codeph>rangeStart</codeph> 和 <codeph>rangeEnd</codeph>。如果仅指定了 <codeph>rangeStart</codeph>，则在此指定日期之后的所有日期都可用。如果仅指定了 <codeph>rangeEnd</codeph>，则在此指定日期之前的所有日期都可用。要仅在 DateChooser 控件中使用一个日期，可以直接传递一个 Date 对象。时间值（如果存在）将以 Date 对象为零值，依次递增。</p>
     
      <p>以下示例仅启用 2006 年 1 月 1 日到 2006 年 6 月 30 日的范围。1 月之前和 6 月之后的月份不会出现在 DateChooser 中。</p>
     
      <p><codeph>selectableRange="{{rangeStart : new Date(2006,0,1), rangeEnd : new Date(2006,5,30)}}"</codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:selectedDate:get"><apiName>selectedDate</apiName><shortdesc>
      在 DateChooser 控件中选择的日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Date"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      在 DateChooser 控件中选择的日期。如果传入的 Date 对象包含任何时间值，则它们将被清零。
     
      <p>在控件中选择当前所选日期时按住 Ctrl 键可取消对该日期的选择，将 <codeph>selectedDate</codeph> 属性设置为 <codeph>null</codeph>，然后分派 <codeph>change</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:selectedRanges:get"><apiName>selectedRanges</apiName><shortdesc>
      所选日期范围。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/><apiDefaultValue>[]
      
      </apiDefaultValue></apiValueDef><apiDesc>
      所选日期范围。
     
      <p>此属性接受对象 Array 作为参数。此数组中的每个对象都具有两个日期对象，<codeph>rangeStart</codeph> 和 <codeph>rangeEnd</codeph>。会选定每组 <codeph>rangeStart</codeph> 和 <codeph>rangeEnd</codeph>（包括两者）之间的日期范围。要选择单个日期，请将 <codeph>rangeStart</codeph> 和 <codeph>rangeEnd</codeph> 设置为相同的日期。时间值（如果存在）将以 Date 对象为零值，依次递增。</p>
     
      <p>下例选择下列日期：2006 年 1 月 11 日，2006 年 1 月 23 日至 2 月 10 日之间的日期。 </p>
     
      <p><codeph>selectedRanges="{[ {rangeStart: new Date(2006,0,11), rangeEnd: new Date(2006,0,11)}, {rangeStart:new Date(2006,0,23), rangeEnd: new Date(2006,1,10)} ]}"</codeph></p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:showToday:get"><apiName>showToday</apiName><shortdesc>
      如果为 true，则指定在 DateChooser 控件中加亮显示今天。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则指定在 DateChooser 控件中加亮显示今天。设置此属性可更改 DateChooser 控件的外观。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:yearNavigationEnabled:get"><apiName>yearNavigationEnabled</apiName><shortdesc>
      启用年份导航。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      启用年份导航。如果为 <codeph>true</codeph>，则显示的年份右侧会出现向上和向下按钮。您可以使用这些按钮更改当前年份。在采用年份显示在月份之前的日期格式的区域设置中，这些按钮将显示在年份的左侧。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DateChooser:yearSymbol:get"><apiName>yearSymbol</apiName><shortdesc>
      此属性附加在 DateChooser 控件顶部显示的年份末尾。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
      
      </apiDefaultValue></apiValueDef><apiDesc>
      此属性附加在 DateChooser 控件顶部显示的年份末尾。有些语言（如日语）会在年份后添加符号。 
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:ComboBox"><apiName>ComboBox</apiName><shortdesc>
  ComboBox 控件包含下拉列表，用户可从中选择单个值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><DefaultProperty name="dataProvider"/><styles><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  下拉列表的 textSelectedColor。<codeph/><codeph/>
 
  </description>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  下拉列表的 textRollOverColor。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style inherit="no" name="selectionEasingFunction" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Function">
<description>
  下拉列表的 selectionEasingFunction。
 
  </description>
<default>undefined
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style format="Time" inherit="no" name="selectionDuration" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  下拉列表的 selectionDuration。
 
  </description>
<default>250
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  下拉列表的 selectionColor。<codeph/><codeph/>
 
  </description>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  下拉列表的 rollOverColor。<codeph/><codeph/>
 
  </description>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  控件上边框与内容区域顶部之间的像素数目。当 <codeph>editable</codeph> 属性设置为 <codeph>true</codeph> 时，<codeph>paddingTop</codeph> 和 <codeph>paddingBottom</codeph> 会影响 ComboBox 控件的大小，但不会影响可编辑文本字段的位置。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  控件下边框与内容区域底部之间的像素数目。当 <codeph>editable</codeph> 属性设置为 <codeph>true</codeph> 时，<codeph>paddingTop</codeph> 和 <codeph>paddingBottom</codeph> 会影响 ComboBox 控件的大小，但不会影响可编辑文本字段的位置。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="openEasingFunction" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Function">
<description>
  用于控制打开转移的缓动函数。缓动函数可用于加速和减缓转移过程。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  打开下拉列表时转移的长度，以毫秒为单位。默认的转移将使下拉列表从 ComboBox 向下滑动。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropdownStyleName" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  下拉列表使用的 CSSStyleDeclaration 的名称。您可以借此控制下拉列表或其项呈示器的外观。
 
  </description>
<default>"comboDropdown"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style deprecatedReplacement="dropdownStyleName" inherit="no" name="dropDownStyleName" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  下拉列表使用的 CSSStyleDeclaration 的名称。您可以借此控制下拉列表或其项呈示器的外观。[不推荐使用]
 
  </description>
<default>"comboDropDown"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropdownBorderColor" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  ComboBox 边框的颜色。如果为 <codeph>undefined</codeph>，下拉列表将使用常规 borderColor 样式。验证程序使用此样式来表示 ComboBox 处于错误状态
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="closeEasingFunction" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Function">
<description>
  用于控制关闭转移的缓动函数。缓动函数可用于加速和减缓转移过程。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="closeDuration" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  关闭下拉列表时转移的长度，以毫秒为单位。默认的转移将使下拉列表向上滑动到 ComboBox。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  下拉列表边框的粗细（以像素为单位）。如果在设置 <codeph>dropdownStyleName</codeph>CSSStyleDeclaration 时定义了 <codeph>borderThickness</codeph>，则会覆盖此值。 
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="arrowButtonWidth" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  箭头按钮的宽度（以像素为单位）。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Array">
<description>
  在交替模式中，下拉列表行的 BackgroundColors 设置。此值可以是由多种颜色中任意两种所组成的数组。如果为 <codeph>undefined</codeph>，则这些行将使用下拉列表的 backgroundColor 样式。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  文本第一行偏离容器左侧的距离（以像素为单位）。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="textFieldClass" owner="mx.controls:ComboBox" playerVersion="Flash10" type="Class">
<description>
  实现此组件用来呈示文本的 IUITextField 的类。
 
  <p>它可以设置为 mx.core.UITextField 类（以使用 Flash Player 内置经典 TextField 类）或 mx.core.UIFTETextField 类（以使用 Text Layout Framework 改进文本呈示，包括双向布局）。</p>
 
  </description>
<default>mx.core.UITextField
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style enumeration="none,underline" inherit="yes" name="textDecoration" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  确定文本是否加下划线。可能值有：<codeph>"none"</codeph> 和 <codeph>"underline"</codeph>。
 
  </description>
<default>"none"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="yes" name="textAlign" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  容器内文本的对齐情况。可能值有：<codeph>"left"</codeph>、<codeph>"right"</codeph> 或 <codeph>"center"</codeph>。
 
  <p>大多数组件的默认值为 <codeph>"left"</codeph>。对于 FormItem 组件，默认值为 <codeph>"right"</codeph>。对于 Button、LinkButton 和 AccordionHeader 组件，默认值为 <codeph>"center"</codeph>，且仅当将 <codeph>labelPlacement</codeph> 属性设置为 <codeph>"left"</codeph> 或 <codeph>"right"</codeph> 时，才能识别此属性。如果将 <codeph>labelPlacement</codeph> 设置为 <codeph>"top"</codeph> 或 <codeph>"bottom"</codeph>，将居中文本及所有图标。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="locale" owner="mx.controls:ComboBox" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的区域设置。
 
  <p>FTE 和 TLF 使用此区域设置将 Unicode 字符映射到字体字型并查找后备字体。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  </description>
<default>"en"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="yes" name="letterSpacing" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  各字符之间显示的附加像素数。如果为正值，则会在正常间距的基础上增加字符间距；如果为负值，则减小此间距。
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="kerning" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Boolean">
<description>
  一个布尔值，指示是启用 (<codeph>true</codeph>) 还是禁用 (<codeph>false</codeph>) 字距调整。字距调整会调整某些字符对之间的间隔以提高可读性，并应只在必要时（例如使用大字体标题时）使用。仅嵌入字体支持字距调整。某些字体（如宋体）和等宽字体（如 Courier New）不支持字距调整。
 
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,bold" inherit="yes" name="fontWeight" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用粗体。可识别的值为 <codeph>normal</codeph> 和 <codeph>bold</codeph>。Button 控件的默认值为 <codeph>bold</codeph>。所有其它控件的默认值为 <codeph>normal</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontThickness" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>thickness</codeph> 属性。此属性指定字型边缘的粗细。可能值为从 -200 到 200 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="normal,italic" inherit="yes" name="fontStyle" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  确定文本是否使用斜体。可识别的值为 <codeph>"normal"</codeph> 和 <codeph>"italic"</codeph>。
 
  </description>
<default>"normal"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="fontSize" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  文本的高度，以像素为单位。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="yes" name="fontSharpness" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>sharpness</codeph> 属性。此属性指定字型边缘的清晰度。可能值为从 -400 到 400 之间的数字。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
  
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link></related-links></style><style enumeration="none,pixel,subpixel" inherit="yes" name="fontGridFitType" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  设置用于表示 Flex 控件文本的内部 TextField 的 <codeph>gridFitType</codeph> 属性。可能值为 <codeph>"none"</codeph> (<codeph>flash.text.GridFitType.NONE</codeph>)、<codeph>"pixel"</codeph> (<codeph>flash.text.GridFitType.PIXEL</codeph>) 和<codeph>"subpixel"</codeph> (<codeph>flash.text.GridFitType.SUBPIXEL</codeph>)。 
  
  <p>仅当使用嵌入字体并将 <codeph>fontAntiAliasType</codeph> 属性设置为 <codeph>"advanced"</codeph> 时，才应用此属性。</p>
  
  <p>此样式对系统字体不起作用。</p>
 
  <p>此样式适用于 TextField 子控件中的所有文本；但不适用于部分字符。</p>
 
  </description>
<default>"pixel"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.GridFitType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.GridFitType.xml"><linktext>flash.text.GridFitType</linktext></link></related-links></style><style inherit="yes" name="fontFamily" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  使用的字体的名称。与在完全 CSS 实现中不同，这里不支持逗号分隔的列表。您可以使用任何字体系列名称。如果您指定通用字体名称，它将转换为相应的设备字体。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="normal,advanced" inherit="yes" name="fontAntiAliasType" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  设置内部 TextField 的 <codeph>antiAliasType</codeph> 属性。可能值为 <codeph>"normal"</codeph> (<codeph>flash.text.AntiAliasType.NORMAL</codeph>) 和 <codeph>"advanced"</codeph> (<codeph>flash.text.AntiAliasType.ADVANCED</codeph>)。 
  
  <p>默认值为 <codeph>"advanced"</codeph>，该值将启用字体的高级消除锯齿功能。设置为 <codeph>"normal"</codeph> 可禁用高级消除锯齿功能。</p>
  
  <p>此样式对系统字体不起作用。</p>
  
  <p>此样式适用于 TextField 子控件中的所有文本；但不能将其应用于部分字符。</p>

  </description>
<default>"advanced"
 
  </default>

<playerversion>AIR 1.1
  </playerversion>

<see>flash.text.AntiAliasType
  
  </see>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog><related-links><link href="" invalidHref="flash.text.TextField.xml"><linktext>flash.text.TextField</linktext></link><link href="" invalidHref="flash.text.AntiAliasType.xml"><linktext>flash.text.AntiAliasType</linktext></link></related-links></style><style format="Color" inherit="yes" name="disabledColor" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  禁用时组件中文本的颜色。
 
  </description>
<default>0xAAB3B3
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="ltr,rtl,inherit" inherit="yes" name="direction" owner="mx.controls:ComboBox" playerVersion="Flash10" type="String">
<description>
  此组件显示的文本的方向性。
 
  <p>允许的值为<codeph>“ltr”</codeph>（适用于从左到右文本，就像在拉丁样式脚本中一样）和<codeph>“rtl”</codeph>（适用于从右到左文本，就像在阿拉伯语和希伯来语中一样）。</p>
 
  <p>FTE 和 TLF 在其双向文本布局算法中使用此值，该算法会将 Unicode 字符顺序映射到字型顺序。</p>
 
  <p>注意：仅当 MX 组件将 UIFTETextField 指定为其 <codeph>textFieldClass</codeph> 时此样式才适用。</p>
 
  <p><codeph>direction</codeph> 还影响在 TLFTextField 的范围内的文本的对齐。但是，它不会影响组件内 TLFTextField 的位置。</p>
 
  </description>
<default>"ltr"
 
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="color" owner="mx.controls:ComboBox" playerVersion="Flash9" type="uint">
<description>
  组件中文本（包括组件标签）的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="highlightAlphas" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="Array">
<description>
  Alpha 透明度，用于加亮填充控件。第一个值指定加亮部分顶部的透明度，第二个值指定加亮部分底部的透明度。加亮部分覆盖了外观的上半部分。
  
  </description>
<default>[ 0.3, 0.0 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="no" name="fillColors" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="Array">
<description>
  为控件背景着色所使用的颜色。对具有均匀外观控件的两个值传递相同的颜色。
  
  </description>
<default>[ 0xFFFFFF, 0xCCCCCC ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="Number" inherit="no" name="fillAlphas" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="Array">
<description>
  用于填充控件背景的 Alpha。使用 [1, 1] 可使控件背景不透明。
  
  </description>
<default>[ 0.6, 0.4 ]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  组件角的半径。下列组件支持此样式：Alert、Button、ComboBox、LinkButton、MenuBar、NumericStepper、Panel、ScrollBar、Tab、TitleWindow 以及任何支持设置为 <codeph>"solid"</codeph> 的 <codeph>borderStyle</codeph> 属性的组件。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  边框颜色。下列控件支持此样式：Button、CheckBox、ComboBox、MenuBar、NumericStepper、ProgressBar、RadioButton、ScrollBar、Slider 以及任何支持 <codeph>borderStyle</codeph> 样式的组件。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 <codeph>0xB7BABC</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingRight" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  组件右边框与其内容区域右边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingLeft" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  组件左边框与其内容区域左边缘之间的像素数目。
  <p>默认值为 0。</p>
  <p/>
  <p>ComboBox 控件的默认值为 5。</p>
  <p>Form 容器的默认值为 16。</p>
  <p>Tree 控件的默认值为 2。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="leading" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  文本行之间附加的垂直空间。
 
  <p>默认值为 2。</p>
  <p>ComboBox 控件的默认值为 0。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  已禁用外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制禁用的 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制禁用的 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制禁用的 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x999999</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:ComboBox" playerVersion="Flash9" theme="halo" type="uint">
<description>
  某个外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x111111</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusRoundedCorners" owner="mx.controls:ComboBox" playerVersion="Flash9" type="String">
<description>
  指定焦点矩形的哪些角应该是圆角。此值是使用空格分隔的 String，该 String 可以是 <codeph>"tl"</codeph>、<codeph>"tr"</codeph>、<codeph>"bl"</codeph> 和 <codeph>"br"</codeph> 的任意组合。例如，要指定右侧的角为圆角，左侧的角为直角，应使用 <codeph>"tr br"</codeph>。<codeph>cornerRadius</codeph> 样式属性指定圆角的半径。默认值取决于组件类；如果未覆盖该类的默认值，则默认值为 <codeph>"tl tr bl br"</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="focusAlpha" owner="mx.controls:ComboBox" playerVersion="Flash9" type="Number">
<description>
  指定焦点外观的 alpha 透明度值。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:ComboBox&gt;</code> tag inherits all the tag attributes
  of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:ComboBox
    <b>Properties</b>
    dataProvider="null"
    dropdownFactory="<i>ClassFactory that creates an mx.controls.List</i>"
    dropdownWidth="<i>100 or width of the longest text in the dataProvider</i>"
    itemRenderer="null"
    labelField="label"
    labelFunction="null"
    prompt="null"
    rowCount="5"
    selectedIndex="-1"
    selectedItem="null"
    
    <b>Styles</b>
    alternatingItemColors="undefined"
    arrowButtonWidth="22"
    borderColor="0xB7BABC"
    borderThickness="1"
    closeDuration="250"
    closeEasingFunction="undefined"
    color="0x0B333C"
    cornerRadius="0"
    disabledColor="0xAAB3B3"
    disabledIconColor="0x919999"
    dropdownBorderColor="undefined"
    dropdownStyleName="comboDropdown"
    fillAlphas="[0.6,0.4]"
    fillColors="[0xFFFFFF, 0xCCCCCC]"
    focusAlpha="0.4"
    focusRoundedCorners="tl tr bl br"
    fontAntiAliasType="advanced|normal"
    fontFamily="Verdana"
    fontGridFitType="pixel|none|subpixel"
    fontSharpness="0"
    fontSize="10"
    fontStyle="normal|italic"
    fontThickness="0"
    fontWeight="normal|bold"
    highlightAlphas="[0.3,0.0]"
    iconColor="0x111111"
    leading="0"
    openDuration="250"
    openEasingFunction="undefined"
    paddingTop="0"
    paddingBottom="0"
    paddingLeft="5"
    paddingRight="5"
    rollOverColor="<i>Depends on theme color"</i>
    selectionColor="<i>Depends on theme color"</i>
    selectionDuration="250"
    selectionEasingFunction="undefined"
    textAlign="left|center|right"
    textDecoration="none|underline"
    textIndent="0"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x2B333C"
    
    <b>Events</b>
    change="<i>No default</i>"
    close="<i>No default</i>"
    dataChange="<i>No default</i>"
    enter="<i>No default</i>"
    itemRollOut="<i>No default</i>"
    itemRollOver="<i>No default</i>"
    open="<i>No default</i>"
    scroll="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseClassifier>mx.controls:ComboBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  ComboBox 控件包含下拉列表，用户可从中选择单个值。其功能与 HTML 中 SELECT 表单元素的功能非常相似。ComboBox 是可编辑的，用户可以在 ComboBox 的 TextInput 部分键入列表中不存在的条目。
 
  <p>ComboBox 控件具有以下默认的大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度足以适应主控件显示区域中下拉列表上的最长条目以及下拉按钮。当下拉列表不可见时，默认高度取决于标签文本大小。 
 
               <p>默认下拉列表高度为五行或下拉列表中的条目数，以较小者为准。下拉列表中每个条目的默认高度为 22 个像素。</p></entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素。</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>5000 × 5000。</entry>
        </row><row>
           <entry>dropdownWidth</entry>
           <entry>ComboBox 控件的宽度。</entry>
        </row><row>
           <entry>rowCount</entry>
           <entry>5 行。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleComboBox.mxml"><swfblock conref="examples/SimpleComboBox.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="mx.controls:ComboBox_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  当用户滚动 ComboBox 控件的下拉列表时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户滚动 ComboBox 控件的下拉列表时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.DropdownEvent.OPEN_open"><apiName>open</apiName><shortdesc>
  当用户单击下拉按钮以显示下拉列表时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.OPEN</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户单击下拉按钮以显示下拉列表时分派。当用户使用键盘并键入 Ctrl-Down 打开下拉列表时，也会分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.ListEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  当用户将鼠标移至下拉列表项目上方时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户将鼠标移至下拉列表项目上方时分派。此事件对象的 <codeph>target</codeph> 属性包含对 ComboBox 的引用，而不是对下拉列表的引用。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.ListEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  当用户将鼠标从下拉列表项目移开时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户将鼠标从下拉列表项目移开时分派。此事件对象的 <codeph>target</codeph> 属性包含对 ComboBox 的引用，而不是对下拉列表的引用。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.FlexEvent.ENTER_enter"><apiName>enter</apiName><shortdesc>
  在以下情况下分派：editable 属性设置为 true，并且用户在可编辑文本字段中键入时按下 Enter。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.ENTER</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在以下情况下分派：<codeph>editable</codeph> 属性设置为 <codeph>true</codeph>，并且用户在可编辑文本字段中编辑时按下 Enter。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当使用组件作为项呈示器时，<codeph>data</codeph> 属性包含 dataProvider 中的项目。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.DropdownEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  当因以下任何原因而取消下拉列表时分派，例如用户选择下拉列表中的某个项目、在下拉列表外部单击、在显示下拉列表时单击下拉按钮或在显示下拉列表时按下 ESC 键。
  
 
  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DropdownEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.DropdownEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当因以下任何原因而取消下拉列表时分派：
  <ul>
      <li>选择下拉列表中的某个项目</li>
      <li>在下拉列表外部单击</li>
      <li>在显示下拉列表时单击下拉按钮</li>
      <li>在显示下拉列表时按下 ESC 键</li>
  </ul>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:ComboBox_mx.events.ListEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  当 ComboBox 内容因用户交互操作发生更改时、当 selectedIndex 或 selectedItem 属性更改时，以及如果 ComboBox 控件可编辑，每当在框中键击时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ListEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.ListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 ComboBox 内容因用户交互操作发生更改时、当 <codeph>selectedIndex</codeph> 或 <codeph>selectedItem</codeph> 属性更改时，以及如果 ComboBox 控件可编辑，每当在框中键击时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:ComboBox:ComboBox"><apiName>ComboBox</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:ComboBox:protected:calculatePreferredSizeFromData"><apiName>calculatePreferredSizeFromData</apiName><shortdesc>
      根据数据提供程序中第一个 numItems 项目的标签文本的最大大小，确定下拉列表中各个条目所使用的默认高度和宽度值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>包含宽度和高度两个属性的 Object。
      
      </apiDesc><apiType value="Object"/></apiReturn><apiParam><apiItemName>count</apiItemName><apiType value="int"/><apiDesc>要检查的项目数，用以确定值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      根据数据提供程序中第一个 <codeph>numItems</codeph> 项目的标签文本的最大大小，确定下拉列表中各个条目所使用的默认高度和宽度值。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBox:close"><apiName>close</apiName><shortdesc>
      隐藏下拉列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>trigger</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData></apiParam></apiOperationDef><apiDesc>
      隐藏下拉列表。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBox:itemToLabel"><apiName>itemToLabel</apiName><shortdesc>
      返回一个表示 item 参数的字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>包含要转换为标签的值的对象。如果项目为 null，则此方法返回空字符串。
      
      </apiDesc></apiParam><apiParam><apiItemName>rest</apiItemName><apiType value="restParam"/></apiParam></apiOperationDef><apiDesc>
      返回一个表示 <codeph>item</codeph> 参数的字符串。
      
      <p>此方法按以下顺序进行检查，以查找返回值：</p>
      
      <ol>
        <li>如果已指定 <codeph>labelFunction</codeph> 属性，则返回将此项目传递给函数的结果。</li>
        <li>如果项目是一个字符串、数值、布尔值或函数，则返回此项目。</li>
        <li>如果项目包含一个由控件的 <codeph>labelField</codeph> 属性指定名称的属性，则返回该属性的内容。</li>
        <li>如果项目包含一个 label 属性，则返回此属性的值。</li>
      </ol>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBox:protected:measure"><apiName>measure</apiName><shortdesc>
      确保控件的宽度至少为 40 个像素，高度足以适应控件的 TextInput 部分中的一行文本（但至少高 22 个像素）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      确保控件的宽度至少为 40 个像素，高度足以适应控件的 TextInput 部分中的一行文本（但至少高 22 个像素）。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:ComboBox:open"><apiName>open</apiName><shortdesc>
      显示下拉列表。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      显示下拉列表。
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:ComboBox:data:get"><apiName>data</apiName><shortdesc>
      当您在项呈示器或项目编辑器中使用某个组件时，可借助 data 属性向该组件传递值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      当您在项呈示器或项目编辑器中使用某个组件时，可借助 <codeph>data</codeph> 属性向该组件传递值。您通常使用数据绑定将 <codeph>data</codeph> 属性的字段绑定到此组件的某个属性。
     
      <p>ComboBox 控件按如下方式使用 <codeph>listData</codeph> 属性和 <codeph>data</codeph> 属性。如果 ComboBox 位于 DataGrid 控件中，它期望将列的 <codeph>dataField</codeph> 属性映射到数据中的某个属性并将 <codeph>selectedItem</codeph> 设置为该属性。如果 ComboBox 控件位于 List 控件中，它期望将列表的 <codeph>labelField</codeph> 属性映射到数据中的某个属性并将 <codeph>selectedItem</codeph> 设置为该属性。否则，它会将 <codeph>selectedItem</codeph> 设置为数据本身。</p>
     
      <p>不要以 MXML 方式设置此属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBox:protected:dropDownStyleFilters:get"><apiName>dropDownStyleFilters</apiName><shortdesc>
      从 ComboBox 传递到 dropDown 的样式集。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      从 ComboBox 传递到 dropDown 的样式集。dropDownStyleName 样式中的样式将覆盖这些样式。
      </apiDesc></apiValueDetail><related-links><link href="mx.styles.xml#StyleProxy"><linktext>mx.styles.StyleProxy</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBox:dropdown:get"><apiName>dropdown</apiName><shortdesc>
      对作为 ComboBox 中下拉列表的 List 控件的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls.listClasses:ListBase</apiValueClassifier></apiValueDef><apiDesc>
      对作为 ComboBox 中下拉列表的 List 控件的引用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:dropdownFactory:get"><apiName>dropdownFactory</apiName><shortdesc>
      创建用作下拉列表的 ListBase-derived 实例的 IFactory。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      创建用作下拉列表的 ListBase-derived 实例的 IFactory。默认值为 List 的 IFactory
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:dropdownWidth:get"><apiName>dropdownWidth</apiName><shortdesc>
      下拉列表的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      下拉列表的宽度（以像素为单位）。
      <p>默认值是 100 或 <codeph>dataProvider</codeph> 中最长文本的宽度中的较大者。</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:itemRenderer:get"><apiName>itemRenderer</apiName><shortdesc>
      生成显示该控件下拉列表数据的实例的 IFactory。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFactory</apiValueClassifier></apiValueDef><apiDesc>
      生成显示该控件下拉列表数据的实例的 IFactory。可以使用此属性为下拉列表指定自定义项呈示器。
     
      <p>该控件在内部使用 List 控件来创建下拉列表。List 控件的默认项呈示器是 ListItemRenderer 类，此类可绘制与列表中每个项目关联的文本以及可选图标。 </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link><link href="mx.controls.listClasses.xml#ListItemRenderer"><linktext>mx.controls.listClasses.ListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBox:labelField:get"><apiName>labelField</apiName><shortdesc>
      dataProvider Array 中项目的字段名，将在 TextInput 部分和下拉列表中显示为标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>dataProvider</codeph> Array 中项目的字段名，将在 TextInput 部分和下拉列表中显示为标签。默认情况下，该控件会使用每个 Array 对象的 <codeph>label</codeph> 的属性，并显示该属性。
      <p>但是，如果 <codeph>dataProvider</codeph> 项目不包含 <codeph>label</codeph> 属性，则可以设置 <codeph>labelField</codeph> 属性以使用其它属性。</p>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:labelFunction:get"><apiName>labelFunction</apiName><shortdesc>
      在每个项目上运行以确定其标签的用户提供函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Function"/></apiValueDef><apiDesc>
      在每个项目上运行以确定其标签的用户提供函数。默认情况下，该控件使用每个 <codeph>dataProvider</codeph> 项目的 <codeph>label</codeph> 属性确定其标签。但是，某些数据集没有 <codeph>label</codeph> 属性或没有可用作标签显示的其它属性。
      <p>例如，某个数据集包含 <codeph>lastName</codeph> 和 <codeph>firstName</codeph> 字段，但您希望显示全名。您可以使用 <codeph>labelFunction</codeph> 指定一个回调函数，该函数使用适当的字段并返回可显示的 String。</p>
     
      <p>labelFunction 采用单个参数，该参数是 dataProvider 中的项目并返回 String：</p>
      <pre>
      myLabelFunction(item:Object):String
      </pre>
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:listData:get"><apiName>listData</apiName><shortdesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 List 控件中的相应数据初始化该组件的 listData 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier></apiValueDef><apiDesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 List 控件中的相应数据初始化该组件的 <codeph>listData</codeph> 属性。然后，该组件可以使用 <codeph>listData</codeph> 属性和 <codeph>data</codeph> 属性显示作为嵌入式项呈示器或嵌入式项目编辑器的相应信息。
     
      <p>您无需在 MXML 或 ActionScript 中设置此属性；将组件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 会对其进行设置。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:ComboBox:prompt:get"><apiName>prompt</apiName><shortdesc>
      ComboBox 控件的提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      ComboBox 控件的提示。提示是 <codeph>selectedIndex</codeph> = -1 时在 ComboBox 控件的 TextInput 部分中显示的 String。它通常是一个类似于“Select one...”的 String。如果没有提示，则 ComboBox 控件会将 <codeph>selectedIndex</codeph> 设置为 0 并显示 <codeph>dataProvider</codeph> 中的第一个项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:rowCount:get"><apiName>rowCount</apiName><shortdesc>
      ComboBox 控件列表中可见行数的最大数目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>5
      
      </apiDefaultValue></apiValueDef><apiDesc>
      ComboBox 控件列表中可见行数的最大数目。如果 dataProvider 中的项目少于此数目，则 ComboBox 仅显示 dataProvider 中包含的项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:selectedLabel:get"><apiName>selectedLabel</apiName><shortdesc>
      ComboBox 控件的 TextInput 部分中显示的 String。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
      ComboBox 控件的 TextInput 部分中显示的 String。它是使用 <codeph>labelField</codeph> 或 <codeph>labelFunction</codeph> 基于数据计算得出的。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:dataProvider:set"><apiName>dataProvider</apiName><shortdesc>
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:selectedIndex:set"><apiName>selectedIndex</apiName><shortdesc>
      下拉列表中所选项目的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/></apiValueDef><apiDesc>
      下拉列表中所选项目的索引。可通过设置此属性来设置当前索引并在 TextInput 部分中显示相关标签。
      <p>默认值为 -1，但是如果分配了 <codeph>dataProvider</codeph> 则会将其设置为 0，除非有提示。如果该控件处于可编辑状态，且用户在 TextInput 部分中键入了内容，则 <codeph>selectedIndex</codeph> 属性的值将变为 -1。如果 <codeph>selectedIndex</codeph> 属性的值超出范围，则会将 <codeph>selectedIndex</codeph> 属性设置为 <codeph>dataProvider</codeph> 中的最后一个项目。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:ComboBox:selectedItem:set"><apiName>selectedItem</apiName><shortdesc>
      包含对 dataProvider 中所选项目的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/></apiValueDef><apiDesc>
      包含对 <codeph>dataProvider</codeph> 中所选项目的引用。如果该数据是一个对象或类实例，则修改该对象或实例中的属性会修改 <codeph>dataProvider</codeph>，其视图也会随之更改。设置 selectedItem 本身会导致 ComboBox 选择该项目，（将其显示在 TextInput 中并设置 selectedIndex），只要该项目位于 dataProvider 中。
      <p>如果 ComboBox 控件处于可编辑状态，且用户在 TextInput 中键入了任何文本，则 <codeph>selectedItem</codeph> 属性将变为 <codeph>null</codeph>。仅当用户从下拉列表选择项目或以编程方式设置此属性时，此属性才具有值。</p>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:Image"><apiName>Image</apiName><shortdesc>
  Image 控件允许您在运行时导入 JPEG、PNG、GIF 和 SWF 文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:Image&gt;</code> tag inherits the tag attributes of its superclass,  
  and adds the following tag attribute:</p>
 
  <pre>
  &lt;mx:Image
    <strong>Events</strong>
    dataChange="No default"
  /&gt
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IDataRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IDropInListItemRenderer</apiBaseInterface><apiBaseInterface>mx.controls.listClasses:IListItemRenderer</apiBaseInterface><apiBaseClassifier>mx.controls:SWFLoader</apiBaseClassifier></apiClassifierDef><apiDesc>
  Image 控件允许您在运行时导入 JPEG、PNG、GIF 和 SWF 文件。您还可以使用 <codeph>@Embed(source='filename')</codeph> 在编译时嵌入上述任意一类型文件以及 SVG 文件。
 
  <p><b>注意：</b>Flex 还提供了 SWFLoader 控件用于加载 Flex 应用程序。通常使用 Image 控件来加载静态图形文件和 SWF 文件，而 SWFLoader 用于加载 Flex 应用程序。Image 控件还可用于自定义项呈示器和项目编辑器。 </p>
 
  <p><b/></p>
 
  <p>嵌入的图像将立即加载，因为它们已经是 Flex SWF 文件的一部分。但是，这些图像会增加应用程序的大小，还会减慢应用程序的初始化过程。嵌入的图像还要求您在图像文件发生更改时立即重新编译应用程序。</p> 
  
  <p>如果不希望嵌入资源，也可以在运行时加载资源。您可以在运行 SWF 文件的本地文件系统中加载资源，也可以访问远程资源（通常是借助网络使用 HTTP 请求）。这些图像是独立于您的 Flex 应用程序的，因此，只要修改后的图像名称保持不变，修改图像就不会引发重新编译的操作。引用的图像不会延长应用程序的首次加载时间。但是，如果使用了这些图像并将其加载到 Flash Player 或 AIR，则可能会出现延迟。 </p>
  
  <p>SWF 文件只能访问一种外部资源（本地资源或网络资源），而不能同时访问两种资源。您可以在编译应用程序时使用 <codeph>use-network</codeph> 标志来确定 SWF 文件允许的访问类型。当 <codeph>use-network</codeph> 标志设置为 <codeph>false</codeph> 时，您可以访问本地文件系统中的资源，但不可以访问网络资源。默认值为 <codeph>true</codeph>，允许您访问网络资源，但不可以访问本地文件系统中的资源。 </p>
  
  <p>若要在运行时加载图像，则应了解 Flash Player 或 AIR 的安全限制。例如，在 Flash Player 中，您可以使用 URL 加载任一域中的图像，但默认安全设置不允许您的代码访问图像的位图数据，除非此图像与应用程序来自同一个域。要访问其它服务器上的图像中的位图数据，则必须使用 crossdomain.xml 文件。 </p>
 
  <p>PNG 和 GIF 格式还支持使用 alpha 通道创建透明图像。</p>
 
  <p>如果使用 Image 控件作为 List 控件的嵌入式项呈示器，则可以使用 <codeph>rowHeight</codeph> 属性显式设置 List 控件的行高；也可以将 List 控件的 <codeph>variableRowHeight</codeph> 属性设置为 <codeph>true</codeph>，从而准确调整行的大小。</p>
 
  <p>如果出现与 Images 对象有关的内存问题，您可以在应用程序中使用 Image 对象时，尝试将 <codeph>source</codeph> 属性显式设置为 null。</p>
  
  </apiDesc><example conref="SimpleImage.mxml"><swfblock conref="examples/SimpleImage.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#SWFLoader"><linktext>mx.controls.SWFLoader</linktext></link></related-links><adobeApiEvent id="mx.controls:Image_mx.events.FlexEvent.DATA_CHANGE_dataChange"><apiName>dataChange</apiName><shortdesc>
  当 data 属性更改时进行分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.FlexEvent.DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.FlexEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>data</codeph> 属性更改时进行分派。
 
  <p>当您使用组件作为项呈示器时，<codeph>data</codeph> 属性将包含要显示的数据。您可以侦听此事件，并在 <codeph>data</codeph> 属性更改时更新组件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:Image:Image"><apiName>Image</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:Image:data:get"><apiName>data</apiName><shortdesc>
      当您在项呈示器或项目编辑器中使用某个组件时，可借助 data 属性向该组件传递值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      当您在项呈示器或项目编辑器中使用某个组件时，可借助 <codeph>data</codeph> 属性向该组件传递值。您通常使用数据绑定将 <codeph>data</codeph> 属性的字段绑定到此组件的某个属性。
     
      <p>当您使用控件作为嵌入式项呈示器时，Flex 会将 <codeph>listData.label</codeph> 属性（如果存在）用作此控件的 <codeph>source</codeph> 属性值，或者将 <codeph>data</codeph> 属性用作 <codeph>source</codeph> 属性。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.core.xml#IDataRenderer"><linktext>mx.core.IDataRenderer</linktext></link></related-links></apiValue><apiValue id="mx.controls:Image:listData:get"><apiName>listData</apiName><shortdesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 List 控件中的相应数据初始化该组件的 listData 属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.listClasses:BaseListData</apiValueClassifier><apiDefaultValue>null
      </apiDefaultValue></apiValueDef><apiDesc>
      使用组件作为嵌入式项呈示器或嵌入式项目编辑器时，Flex 将使用 List 控件中的相应数据初始化该组件的 <codeph>listData</codeph> 属性。随后，该组件可以使用 <codeph>listData</codeph> 属性初始化嵌入式项呈示器的其它属性。
     
      <p>您无需在 MXML 或 ActionScript 中设置此属性；将组件用作嵌入式项呈示器或嵌入式项目编辑器时，Flex 会对其进行设置。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.listClasses.xml#IDropInListItemRenderer"><linktext>mx.controls.listClasses.IDropInListItemRenderer</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:HSlider"><apiName>HSlider</apiName><shortdesc>	
  使用 HSlider 控件，用户可通过在滑块轨道的终点之间移动滑块来选择值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="direction"/><Alternative owner="mx.controls:HSlider" replacement="spark.components.HSlider" since="4.0">
	</Alternative><styles><style enumeration="left,top,right,bottom" inherit="no" name="dataTipPlacement" owner="mx.controls:HSlider" playerVersion="Flash9" type="String">
<description>
  相对于滑块的数据提示位置。可能值为 <codeph>"left"</codeph>、<codeph>"right"</codeph>、<codeph>"top"</codeph> 和 <codeph>"bottom"</codeph>。
 
  </description>
<default>"top"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:HSlider&gt;</code> tag inherits all of the tag attributes
  of its superclass, and adds the following tag attribute:</p>
 
  <pre>
  &lt;mx:HSlider
    <strong>Styles</strong>
    dataTipPlacement="top"
  /&gt;
  </pre>
  </p>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.sliderClasses:Slider</apiBaseClassifier></apiClassifierDef><apiDesc>	
  使用 HSlider 控件，用户可通过在滑块轨道的终点之间移动滑块来选择值。滑块的当前值由滑块端点之间滑块的相对位置确定，端点对应于滑块的最小值和最大值。
 
  <p>滑块可能允许最小值和最大值之间连续范围内的值，也可能限制为最小值和最大值之间特定间隔内的值。它可能沿轨道按指定间隔显示刻度线。这些刻度线与允许的滑块值无关。滑块还可以使用数据提示显示其当前值。</p>
  	
  <p>HSlider 控件采用水平方向。滑块轨道从左向右扩展，而标签和刻度线位于轨道的顶部或底部。</p>
  
  <p>HSlider 控件具有以下默认特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度为 250 个像素，高度足以容纳滑块及任何关联标签</entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>无</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>无</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleImageHSlider.mxml"><swfblock conref="examples/SimpleImageHSlider.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#VSlider"><linktext>mx.controls.VSlider</linktext></link><link href="mx.controls.sliderClasses.xml#Slider"><linktext>mx.controls.sliderClasses.Slider</linktext></link><link href="mx.controls.sliderClasses.xml#SliderThumb"><linktext>mx.controls.sliderClasses.SliderThumb</linktext></link><link href="mx.controls.sliderClasses.xml#SliderDataTip"><linktext>mx.controls.sliderClasses.SliderDataTip</linktext></link><link href="mx.controls.sliderClasses.xml#SliderLabel"><linktext>mx.controls.sliderClasses.SliderLabel</linktext></link></related-links><apiConstructor id="mx.controls:HSlider:HSlider"><apiName>HSlider</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:DataGrid"><apiName>DataGrid</apiName><shortdesc>
  DataGrid 控件与 List 控件相似，但它可以显示多个数据列，这使其适合显示具有多个属性的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="cornerRadius"/><Exclude kind="property" name="showDataTips"/><Exclude kind="property" name="offscreenExtraRowsOrColumnsChanged"/><Exclude kind="property" name="offscreenExtraColumnsRight"/><Exclude kind="property" name="offscreenExtraColumnsLeft"/><Exclude kind="property" name="offscreenExtraColumns"/><Exclude kind="property" name="offscreenExtraRowsBottom"/><Exclude kind="property" name="offscreenExtraRowsTop"/><Exclude kind="property" name="offscreenExtraRows"/><Exclude kind="property" name="offscreenExtraRowsOrColumns"/><Exclude kind="property" name="labelField"/><Exclude kind="property" name="iconFunction"/><Exclude kind="property" name="iconField"/><Exclude kind="property" name="columnWidth"/><Exclude kind="property" name="columnCount"/><DefaultProperty name="dataProvider"/><styles><style inherit="no" name="headerDragProxyStyleName" owner="mx.controls:DataGrid" playerVersion="Flash9" type="String">
<description>
  适用于当用户将列外观拖动到另一位置时，控制其各个方面的 CSS 样式声明的名称。
 
  </description>
<default>"headerDragProxyStyle"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnDropIndicatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  用作指示可将列放在当前位置的外观的类。
 
  </description>
<default>mx.skins.halo.DataGridColumnDropIndicator
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="stretchCursor" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  用作指示可调整列大小的光标外观的类。默认值为 Assets.swf 文件中的 "cursorStretch" 符号。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="sortArrowSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  用作指示列排序方向的箭头外观的类。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalLockedSeparatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  用作定义 DataGrid 控件中锁定和未锁定列之间的分隔符外观的外观的类。默认情况下，DataGrid 控件使用 <codeph>drawHorizontalLine()</codeph> 和 <codeph>drawVerticalLine()</codeph> 方法绘制分隔符。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalSeparatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  用作定义 DataGrid 控件中各列之间的分隔符外观的外观的类。默认情况下，DataGrid 控件使用 <codeph>drawHorizontalLine()</codeph> 和 <codeph>drawVerticalLine()</codeph> 方法绘制分隔符。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalLockedSeparatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  用作定义 DataGrid 控件中锁定和未锁定行之间的分隔符外观的外观的类。默认情况下，DataGrid 控件使用 <codeph>drawHorizontalLine()</codeph> 和 <codeph>drawVerticalLine()</codeph> 方法绘制分隔符。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalSeparatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  用作定义 DataGrid 控件中各行之间的分隔符外观的外观的类。默认情况下，DataGrid 控件使用 <codeph>drawHorizontalLine()</codeph> 和 <codeph>drawVerticalLine()</codeph> 方法绘制分隔符。
 
  </description>
<default>undefined
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerSeparatorSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  用作定义 DataGrid 控件中列标题之间的分隔符外观的外观的类。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerBackgroundSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  用作定义 DataGrid 控件中列标题的背景外观的外观的类。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="columnResizeSkin" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Class">
<description>
  用作要调整大小的列的外观的类。
  </description>
<default>mx.skins.halo.DataGridColumnResizeSkin
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="headerStyleName" owner="mx.controls:DataGrid" playerVersion="Flash9" type="String">
<description>
  用于控制列标题外观其它方面的 CSS 样式声明的名称。
  </description>
<default>"dataGridStyles"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:DataGrid" playerVersion="Flash9" type="uint">
<description>
  用户选择行中的项呈示器时的行背景颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:DataGrid" playerVersion="Flash9" type="uint">
<description>
  用户将鼠标滑过行时的行背景颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="headerColors" owner="mx.controls:DataGrid" playerVersion="Flash9" theme="halo" type="Array">
<description>
  用于绘制标题背景渐变的两种颜色的数组。第一种颜色是顶层颜色。第二种颜色是底层颜色。
  </description>
<default>[0xFFFFFF, 0xE6E6E6]
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="horizontalGridLineColor" owner="mx.controls:DataGrid" playerVersion="Flash9" type="uint">
<description>
  水平网格线的颜色。
  </description>
<default>0xF7F7F7
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="verticalGridLineColor" owner="mx.controls:DataGrid" playerVersion="Flash9" type="uint">
<description>
  垂直网格线的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="horizontalGridLines" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Boolean">
<description>
  一个标志，指示是否显示行之间的水平网格线。如果为 <codeph>true</codeph>，则显示水平网格线。如果为 <codeph>false</codeph>，则隐藏水平网格线。
  </description>
<default>false
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="verticalGridLines" owner="mx.controls:DataGrid" playerVersion="Flash9" type="Boolean">
<description>
  一个标志，指示是否显示列之间的垂直网格线。如果为 <codeph>true</codeph>，则显示垂直网格线。如果为 <codeph>false</codeph>，则隐藏垂直网格线。
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="defaultDataGridItemRenderer" owner="mx.controls:DataGrid" playerVersion="Flash10" type="Class">
<description>
  要使用的 itemRenderer 的类的名称（如果没有为列或其标题指定名称）。这是为一组 DataGrid 设置 itemRenderer 的一种方式，从而不必分别设置每一个 DataGrid。如果设置 DataGrid 的 itemRenderer 属性，则它会取代此值。
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="defaultDataGridItemEditor" owner="mx.controls:DataGrid" playerVersion="Flash10" type="Class">
<description>
  在没有为列指定名称的情况下要使用的 itemEditor 类的名称。这是为一组 DataGrid 设置项编辑器的一种方式，从而不必分别设置每一个 DataGrid。如果设置 DataGrid 的 itemRenderer 属性，则它会取代此值。
  </description>
<default>null
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="disabledIconColor" owner="mx.controls:DataGrid" playerVersion="Flash9" theme="halo" type="uint">
<description>
  已禁用外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制禁用的 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制禁用的 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制禁用的 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x999999</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="iconColor" owner="mx.controls:DataGrid" playerVersion="Flash9" theme="halo" type="uint">
<description>
  某个外观中图标的颜色。例如，CheckBoxIcon 外观类可使用此样式来绘制 CheckBox 控件的复选标记；ComboBoxSkin 类可使用此样式来绘制 ComboBox 控件的向下箭头；DateChooserMonthArrowSkin 外观类可使用此样式来绘制 DateChooser 控件的月箭头。默认值取决于组件类；如果此类未覆盖默认值，则默认值为 <codeph>0x111111</codeph>。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  <p>
  The <code>&lt;mx:DataGrid&gt;</code> tag inherits all of the tag 
  attributes of its superclass, except for <code>labelField</code>, 
  <code>iconField</code>, and <code>iconFunction</code>, and adds the 
  following tag attributes:
  </p>
  <pre>
  &lt;mx:DataGrid
    <b>Properties</b>
    columns="<i>From dataProvider</i>"
    draggableColumns="true|false"
    editable="false|true"
    editedItemPosition="<code>null</code>"
    horizontalScrollPosition="null"
    imeMode="null"
    itemEditorInstance="null"
    minColumnWidth="<code>NaN</code>"
    resizableColumns="true|false"
    sortableColumns="true|false"
    
    <b>Styles</b>
    backgroundDisabledColor="0xEFEEEF"
    columnDropIndicatorSkin="DataGridColumnDropIndicator"
    columnResizeSkin="DataGridColumnResizeSkin"
    disabledIconColor="0x999999"
    headerColors="[#FFFFFF, #E6E6E6]"
    headerDragProxyStyleName="headerDragProxyStyle"
    headerSeparatorSkin="DataGridHeaderSeparator"
    headerStyleName="dataGridStyles"
    horizontalGridLineColor="0xF7F7F7"
    horizontalGridLines="false|true"
    horizontalLockedSeparatorSkin="undefined"
    horizontalSeparatorSkin="undefined"
    iconColor="0x111111"
    rollOverColor="0xB2E1FF"
    selectionColor="0x7FCEFF"
    sortArrowSkin="DataGridSortArrow"
    stretchCursor="<i>"cursorStretch" symbol from the Assets.swf file</i>"
    verticalGridLineColor="0xCCCCCC"
    verticalGridLines="false|true"
    verticalLockedSeparatorSkin="undefined"
    verticalSeparatorSkin="undefined"
     
    <b>Events</b>
    columnStretch="<i>No default</i>"
    headerRelease="<i>No default</i>"
    headerShift="<i>No default</i>"
    itemEditBegin="<i>No default</i>"
    itemEditBeginning="<i>No default</i>" 
    itemEditEnd="<i>No default</i>"
    itemFocusIn="<i>No default</i>"
    itemFocusOut="<i>No default</i>"
  /&gt;
   
  <b>The following DataGrid code sample specifies the column order:</b>
  &lt;mx:DataGrid&gt;
    &lt;mx:dataProvider&gt;
        &lt;mx:Object Artist="Pavement" Price="11.99"
          Album="Slanted and Enchanted"/&gt;
        &lt;mx:Object Artist="Pavement"
          Album="Brighten the Corners" Price="11.99"/&gt;
    &lt;/mx:dataProvider&gt;
    &lt;mx:columns&gt;
        &lt;mx:DataGridColumn dataField="Album"/&gt;
        &lt;mx:DataGridColumn dataField="Price"/&gt;
    &lt;/mx:columns&gt;
  &lt;/mx:DataGrid&gt;
  </pre>
  </p>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IIMESupport</apiBaseInterface><apiBaseClassifier>mx.controls.dataGridClasses:DataGridBase</apiBaseClassifier></apiClassifierDef><apiDesc>
  <codeph>DataGrid</codeph> 控件与 List 控件相似，但它可以显示多个数据列，这使其适合显示具有多个属性的对象。
  <p>
  DataGrid 控件提供以下功能：
  <ul>
  <li>列可以具有不同宽度或同一固定宽度</li>
  <li>用户可以在运行时调整其尺寸的列 </li>
  <li>用户可以在运行时对其重新排序的列 </li>
  <li>可选择自定义列标题</li>
  <li>对任意列使用自定义项呈示器以显示除文本之外的数据的功能</li>
  <li>支持通过单击列对数据进行排序</li>
  </ul>
  </p>
  DataGrid 控件用于查看数据，而不是用作类似于 HTML 表的布局工具。mx.containers 包提供以下布局工具。
  
  <p>DataGrid 控件具有以下默认大小特征：</p>
     <adobetable class="innertable">
        
        
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>如果列为空，则默认宽度为 300 个像素。如果列包含信息但没有定义显式宽度，则每列的默认宽度为 100 个像素。如果可能，调整 DataGrid 宽度的大小以适应所有列的宽度。默认的显示行数为 7 行，其中包括标题；默认情况下，每行的高度为 20 个像素。
           </entry>
        </row><row>
           <entry>最小大小</entry>
           <entry>0 个像素。</entry>
        </row><row>
           <entry>最大大小</entry>
           <entry>5000 × 5000。</entry>
        </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="SimpleDataGrid.mxml"><swfblock conref="examples/SimpleDataGrid.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.dataGridClasses.xml#DataGridItemRenderer"><linktext>mx.controls.dataGridClasses.DataGridItemRenderer</linktext></link><link href="mx.controls.dataGridClasses.xml#DataGridColumn"><linktext>mx.controls.dataGridClasses.DataGridColumn</linktext></link><link href="mx.controls.dataGridClasses.xml#DataGridDragProxy"><linktext>mx.controls.dataGridClasses.DataGridDragProxy</linktext></link><link href="mx.events.xml#DataGridEvent"><linktext>mx.events.DataGridEvent</linktext></link></related-links><adobeApiEvent id="mx.controls:DataGrid_mx.events.IndexChangedEvent.HEADER_SHIFT_headerShift"><apiName>headerShift</apiName><shortdesc>
  当用户将列拖动到新位置使该列移动到新索引处后，在列标题上释放鼠标按键时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.IndexChangedEvent.HEADER_SHIFT</apiEventType><adobeApiEventClassifier>mx.events.IndexChangedEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户将列拖动到新位置使该列移动到新索引处后，在列标题上释放鼠标按键时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.HEADER_RELEASE_headerRelease"><apiName>headerRelease</apiName><shortdesc>
  当用户在列标题上释放鼠标按键以请求控件基于列内容对网格内容进行排序时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.HEADER_RELEASE</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户在列标题上释放鼠标按键以请求控件基于列内容对网格内容进行排序时分派。仅在列可排序且数据提供程序支持排序时才分派。DataGrid 控件具有此可实现单列排序的事件的默认处理函数。通过调用 <codeph>preventDefault()</codeph> 方法阻止单列排序，并设置数据提供程序的 <codeph>sort</codeph> 属性，可以实现多列排序。
 <p>
 <b>注意</b>：排序箭头由 headerRelease 事件的默认事件处理函数定义。如果在事件处理函数中调用 <codeph>preventDefault()</codeph> 方法，则不绘制箭头。
 </p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.COLUMN_STRETCH_columnStretch"><apiName>columnStretch</apiName><shortdesc>
  当用户更改列宽时分派，指示此列中显示的数据量可能会更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.COLUMN_STRETCH</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户更改列宽时分派，指示此列中显示的数据量可能会更改。如果 <codeph>horizontalScrollPolicy</codeph> 设置为 <codeph>"off"</codeph>，则其它列将缩短或伸展以补偿该列的大小调整，同时这些列也会分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_FOCUS_OUT_itemFocusOut"><apiName>itemFocusOut</apiName><shortdesc>
  当项呈示器失去焦点时分派。在下列情况下项呈示器可能失去焦点：当用户单击 DataGrid 控件中的其它项目或在此控件外部单击时，或使用键盘导航到 DataGrid 控件中的其它项目或导航到该控件外部时。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_FOCUS_OUT</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当项呈示器失去焦点时分派。在下列情况下项呈示器可能失去焦点：当用户单击 DataGrid 控件中的其它项目或在此控件外部单击时，或使用键盘导航到 DataGrid 控件中的其它项目或导航到该控件外部时。仅当项目可编辑时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_FOCUS_IN_itemFocusIn"><apiName>itemFocusIn</apiName><shortdesc>
  当项呈示器获得焦点时分派。在下列情况下项呈示器可能获得焦点：当用户单击 DataGrid 控件中的某个项目或者使用键盘导航到该项目时。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_FOCUS_IN</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当项呈示器获得焦点时分派。在下列情况下项呈示器可能获得焦点：当用户单击 DataGrid 控件中的某个项目或者使用键盘导航到该项目时。仅当项目可编辑时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_EDIT_END_itemEditEnd"><apiName>itemEditEnd</apiName><shortdesc>
  当项目编辑会话因任何原因而结束时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_EDIT_END</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当项目编辑会话因任何原因而结束时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_EDITOR_CREATE_itemEditorCreate"><apiName>itemEditorCreate</apiName><shortdesc>
  刚结束实例化项目编辑器时分派。</shortdesc><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_EDITOR_CREATE</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  刚结束实例化项目编辑器时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_EDIT_BEGIN_itemEditBegin"><apiName>itemEditBegin</apiName><shortdesc>
  当 editedItemPosition 属性已设置且项目可编辑时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_EDIT_BEGIN</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 <codeph>editedItemPosition</codeph> 属性已设置且项目可编辑时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:DataGrid_mx.events.DataGridEvent.ITEM_EDIT_BEGINNING_itemEditBeginning"><apiName>itemEditBeginning</apiName><shortdesc>
  当用户在某个项呈示器上方释放鼠标按键时，使用 tab 键导航到 DataGrid 控件或 DataGrid 控件内部时，或者以任何其它方式尝试编辑某一项目时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.DataGridEvent.ITEM_EDIT_BEGINNING</apiEventType><adobeApiEventClassifier>mx.events.DataGridEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户在某个项呈示器上方释放鼠标按键时，使用 tab 键导航到 DataGrid 控件或 DataGrid 控件内部时，或者以任何其它方式尝试编辑某一项目时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:DataGrid:DataGrid"><apiName>DataGrid</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:DataGrid:protected:adjustListContent"><apiName>adjustListContent</apiName><shortdesc>
      从 updateDisplayList() 方法中调用，用以调整 listContent 的大小和位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>listContent 的宽度。此值忽略外部组件或设置中对宽度的更改。
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>listContent 的高度。此值忽略外部组件或设置中对高度的更改。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      从 <codeph>updateDisplayList()</codeph> 方法中调用，用以调整 listContent 的大小和位置。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:clearSeparators"><apiName>clearSeparators</apiName><shortdesc>
      移除用户通常用于调整列大小的列标题分隔符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      移除用户通常用于调整列大小的列标题分隔符。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:createItemEditor"><apiName>createItemEditor</apiName><shortdesc>
      使用由 itemEditor 属性指定的编辑器在 editedItemPosition 为项呈示器创建项目编辑器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>colIndex</apiItemName><apiType value="int"/><apiDesc>要编辑项目的数据提供程序中的列索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>要编辑项目的数据提供程序中的行索引。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用由 <codeph>itemEditor</codeph> 属性指定的编辑器在 <codeph>editedItemPosition</codeph> 为项呈示器创建项目编辑器。
     
      <p>此方法将编辑器实例设置为 <codeph>itemEditorInstance</codeph> 属性。</p>
     
      <p>您可能只可以从 <codeph>itemEditBegin</codeph> 事件的事件侦听器中调用此方法。若要在其它时间创建编辑器，请设置 <codeph>editedItemPosition</codeph> 属性以生成 <codeph>itemEditBegin</codeph> 事件。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:deriveComplexFieldReference"><apiName>deriveComplexFieldReference</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Object"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>complexFieldNameComponents</apiItemName><apiType value="Array"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:destroyItemEditor"><apiName>destroyItemEditor</apiName><shortdesc>
      此方法将关闭项呈示器上当前打开着的项目编辑器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      此方法将关闭项呈示器上当前打开着的项目编辑器。您通常只从 <codeph>itemEditEnd</codeph> 事件的事件侦听器中调用此方法，但在这之前需要调用 <codeph>preventDefault()</codeph> 方法阻止默认事件侦听器的执行。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawColumnBackground"><apiName>drawColumnBackground</apiName><shortdesc>
      使用建议的颜色为列绘制列背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>一个 Sprite，其中的显示对象包含该列的图形。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiDesc>列在所显示的一组列中的索引。最左端可见列的列索引为 0。这用于跟踪绘制背景所用的对象，这样即使特定列的 DataGridColumn 的索引已更改，该列也能够重用同一个显示对象。
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>建议的指示符颜色
     
      </apiDesc></apiParam><apiParam><apiItemName>column</apiItemName><apiOperationClassifier>mx.controls.dataGridClasses:DataGridColumn</apiOperationClassifier><apiDesc>要为其绘制背景的 DataGrid 控件列。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用建议的颜色为列绘制列背景。此实现将创建一个 Shape 作为输入 Sprite 的子项，并使用合适的颜色进行填充。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawHeaderBackground"><apiName>drawHeaderBackground</apiName><shortdesc>
      在给定的 UIComponent 中绘制标题的背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>headerBG</apiItemName><apiOperationClassifier>mx.core:UIComponent</apiOperationClassifier><apiDesc>将包含标题背景图形的 UIComponent。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      在给定的 UIComponent 中绘制标题的背景。如果组件的宽度发生更改，则绘制的图形可能会水平缩放；或再次调用此方法以使用不同的宽度/高度重新绘制。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawHorizontalLine"><apiName>drawHorizontalLine</apiName><shortdesc>
      绘制行之间的直线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>一个 Sprite，其中的显示对象包含该行的图形。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行在所显示的一组行中的索引。最顶部可见行（不算标题）的行索引为 0。这用于跟踪绘制背景所用的对象，这样即使特定行呈示的项目的索引已更改，该行也能够重用同一个显示对象。
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>建议的指示符颜色
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>建议的背景 y 位置
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      绘制行之间的直线。此实现直接在给定的 Sprite 中绘制一条直线。在 Sprite 中绘制直线之前已将其清除。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawLinesAndColumnBackgrounds"><apiName>drawLinesAndColumnBackgrounds</apiName><shortdesc>
      绘制列之间的直线，以及列背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      绘制列之间的直线，以及列背景。此实现将根据需要调用 <codeph>drawHorizontalLine()</codeph>、<codeph>drawVerticalLine()</codeph> 和 <codeph>drawColumnBackground()</codeph> 方法。它将创建包含所有这些图形的 Sprite，并将其作为 listContent 的子项添加到 Z 顺序的前端。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawLinesAndColumnGraphics"><apiName>drawLinesAndColumnGraphics</apiName><shortdesc>
      绘制列之间的直线，以及列背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>contentHolder</apiItemName><apiOperationClassifier>mx.controls.listClasses:ListBaseContentHolder</apiOperationClassifier><apiDesc>DataGrid 的所有项呈示器和项目编辑器的容器。
      </apiDesc></apiParam><apiParam><apiItemName>visibleColumns</apiItemName><apiType value="Array"/><apiDesc>DataGrid 中可见列的数组。
      </apiDesc></apiParam><apiParam><apiItemName>separators</apiItemName><apiType value="Object"/><apiDesc>定义行和列的顶部、底部、左侧和右侧分隔线的对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      绘制列之间的直线，以及列背景。此实现将根据需要调用 <codeph>drawHorizontalLine()</codeph>、<codeph>drawVerticalLine()</codeph> 和 <codeph>drawColumnBackground()</codeph> 方法。它将创建包含所有这些图形的 Sprite，并将其作为 listContent 的子项添加到 Z 顺序的前端。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawRowBackground"><apiName>drawRowBackground</apiName><shortdesc>
      使用指定的颜色在指定的位置按指定的高度绘制行背景。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>一个 Sprite，其中的显示对象包含该行的图形。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiDesc>行在所显示的一组行中的索引。最顶部可见行（不算标题）的行索引为 0。这用于跟踪绘制背景所用的对象，这样即使特定行呈示的项目的索引已更改，该行也能够重用同一个显示对象。
     
      </apiDesc></apiParam><apiParam><apiItemName>y</apiItemName><apiType value="Number"/><apiDesc>建议的背景 y 位置
     
      </apiDesc></apiParam><apiParam><apiItemName>height</apiItemName><apiType value="Number"/><apiDesc>建议的指示符高度
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>建议的指示符颜色
     
      </apiDesc></apiParam><apiParam><apiItemName>dataIndex</apiItemName><apiType value="int"/><apiDesc>数据提供程序中该行的项目的索引。例如，这可用于为第 10 个项目设置不同的颜色。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      使用指定的颜色在指定的位置按指定的高度绘制行背景。此实现将创建一个 Shape 作为输入 Sprite 的子项，并使用合适的颜色进行填充。此方法还使用 <codeph>backgroundAlpha</codeph> 样式属性设置来确定背景颜色的透明度。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawSeparators"><apiName>drawSeparators</apiName><shortdesc>
      创建用户通常用于调整列大小的列标题分隔符并将其显示出来。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      创建用户通常用于调整列大小的列标题分隔符并将其显示出来。此实现使用相同的 Sprite 作为行和列背景，并添加了 <codeph>headerSeparatorSkin</codeph> 实例，另外还附加了鼠标侦听器，以了解用户何时想要调整列。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:drawVerticalLine"><apiName>drawVerticalLine</apiName><shortdesc>
      绘制列之间的直线。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>s</apiItemName><apiType value="flash.display:Sprite"/><apiDesc>一个 Sprite，其中的显示对象包含该行的图形。
     
      </apiDesc></apiParam><apiParam><apiItemName>colIndex</apiItemName><apiType value="int"/><apiDesc>列在所显示的一组列中的索引。最左端可见列的列索引为 0。
     
      </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiDesc>建议的指示符颜色
     
      </apiDesc></apiParam><apiParam><apiItemName>x</apiItemName><apiType value="Number"/><apiDesc>建议的背景 x 位置
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      绘制列之间的直线。此实现直接在给定的 Sprite 中绘制一条直线。在 Sprite 中绘制直线之前已将其清除。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:getCurrentDataValue"><apiName>getCurrentDataValue</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="String"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:isComplexColumn"><apiName>isComplexColumn</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>property</apiItemName><apiType value="String"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:isItemEditable"><apiName>isItemEditable</apiName><shortdesc>
      确定是否允许按行编辑 dataprovider 项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>如果 DataGrid 的 <codeph>editable</codeph> 属性为 <codeph>true</codeph>，且数据对象不为 <codeph>null</codeph>，则默认行为是返回 <codeph>true</codeph>。
      
      </apiDesc><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>数据提供程序项目。如果数据对象是 <codeph>null</codeph>，则此方法的默认实现返回 <codeph>false</codeph>。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      确定是否允许按行编辑 dataprovider 项目。如果 <codeph>editable</codeph> 为 <codeph>false</codeph>，或 dataprovider 项目为 <codeph>null</codeph>，则此方法的默认实现仅检查 DataGrid 的 <codeph>editable</codeph> 属性，并返回 <codeph>false</codeph>。
     
      <p>可以覆盖此方法以更精细地控制哪些 dataprovider 项目可编辑。例如，如果要禁止编辑分组行或摘要行，则要用针对此行为的自定义逻辑覆盖此方法。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:placeSortArrow"><apiName>placeSortArrow</apiName><shortdesc>
      在作为当前排序键的列上绘制排序箭头图形。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在作为当前排序键的列上绘制排序箭头图形。此实现将创建或重用由 <codeph>sortArrowSkin</codeph> 样式属性指定的外观实例，并将其放置在合适的列标题中。如果排序箭头遮挡了标题中的文本，它还将缩小列标题的尺寸。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:scrollPositionToIndex"><apiName>scrollPositionToIndex</apiName><shortdesc>
      
      返回给定滚动位置第一个可见行和列处的项目的数据提供程序索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>数据提供程序索引。
      
      </apiDesc><apiType value="int"/></apiReturn><apiParam><apiItemName>horizontalScrollPosition</apiItemName><apiType value="int"/><apiDesc>与滚动位置相对应的 <codeph>horizontalScrollPosition</codeph> 属性值。
      </apiDesc></apiParam><apiParam><apiItemName>verticalScrollPosition</apiItemName><apiType value="int"/><apiDesc>与滚动位置相对应的 <codeph>verticalScrollPosition</codeph> 属性值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      返回给定滚动位置第一个可见行和列处的项目的数据提供程序索引。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:scrollVertically"><apiName>scrollVertically</apiName><shortdesc>
      
      调整渲染器以响应滚动位置的更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>pos</apiItemName><apiType value="int"/><apiDesc>新的滚动位置。
      </apiDesc></apiParam><apiParam><apiItemName>deltaPos</apiItemName><apiType value="int"/><apiDesc>位置的变化。此值始终为正数。
      </apiDesc></apiParam><apiParam><apiItemName>scrollUp</apiItemName><apiType value="Boolean"/><apiDesc>如果滚动位置正在逐渐缩小，则为 <codeph>true</codeph>。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      调整渲染器以响应滚动位置的更改。
     
      <p>当滚动位置的更改量低于可见行数时，列表类将尝试优化滚动。此时，一些行只需进行移动即可而无需进行其它更改，另一些行则需要删除，然后添加新行。如果滚动位置更改量过大，将删除所有旧行，并调用 <codeph>makeRowsAndColumns()</codeph> 方法在整个可查看区域添加新行。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:DataGrid:protected:setNewValue"><apiName>setNewValue</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="Boolean"/></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="String"/></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiValue id="mx.controls:DataGrid:itemEditorInstance"><apiName>itemEditorInstance</apiName><shortdesc>
      对项目编辑器的当前活动实例（如果有）的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      对项目编辑器的当前活动实例（如果有）的引用。
     
      <p>若要在编辑项目时访问项目编辑器实例和新项目值，则应使用 <codeph>itemEditorInstance</codeph> 属性。只有在执行 <codeph>itemEditBegin</codeph> 事件的事件侦听器之后，<codeph>itemEditorInstance</codeph> 属性才有效。因此，您通常只从 <codeph>itemEditEnd</codeph> 事件的事件侦听器中访问 <codeph>itemEditorInstance</codeph> 属性。</p>
     
      <p><codeph>DataGridColumn.itemEditor</codeph> 属性定义项目编辑器的类，从而定义项目编辑器实例的数据类型。</p>
     
      <p>不要以 MXML 方式设置此属性。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:resizableColumns"><apiName>resizableColumns</apiName><shortdesc>
      一个标志，指示用户能否更改列的尺寸。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示用户能否更改列的尺寸。如果为 <codeph>true</codeph>，则用户可以通过在标题单元格之间拖动网格线来伸展或缩短 DataGrid 控件的列。如果为 <codeph>true</codeph>，则还必须将单个列的 <codeph>resizable</codeph> 设置为 <codeph>false</codeph> 以防止用户调整特定列的大小。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:sortableColumns"><apiName>sortableColumns</apiName><shortdesc>
      一个标志，指示用户是否可以通过单击列的标题单元格对数据提供程序项目进行排序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiType value="Boolean"/><apiDefaultValue>true
     
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示用户是否可以通过单击列的标题单元格对数据提供程序项目进行排序。如果为 <codeph>true</codeph>，则用户可以通过单击列的标题单元格对数据提供程序项目进行排序。列的 <codeph>DataGridColumn.dataField</codeph> 属性或 <codeph>DataGridColumn.sortCompareFunction</codeph> 属性将用作排序字段。如果用户在某列上单击了多次，则排序将在升序和降序之间交替。如果为 <codeph>true</codeph>，则可以通过将列的 <codeph>sortable</codeph> 属性设置为 <codeph>false</codeph> 将各个列设置为不响应对标题的单击。
     
      <p>当用户在标题单元格上方释放鼠标按键时，如果此属性以及列的 sortable 属性均为 <codeph>true</codeph>，则 DataGrid 控件将分派 <codeph>headerRelease</codeph> 事件。如果没有处理函数对事件调用 <codeph>preventDefault()</codeph> 方法，则 DataGrid 将使用该列的 <codeph>DataGridColumn.dataField</codeph> 或 <codeph>DataGridColumn.sortCompareFunction</codeph> 属性进行排序。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.dataGridClasses.xml#DataGridColumn/dataField"><linktext>mx.controls.dataGridClasses.DataGridColumn.dataField</linktext></link><link href="mx.controls.dataGridClasses.xml#DataGridColumn/sortCompareFunction"><linktext>mx.controls.dataGridClasses.DataGridColumn.sortCompareFunction</linktext></link></related-links></apiValue><apiValue id="mx.controls:DataGrid:columns:get"><apiName>columns</apiName><shortdesc>
      DataGridColumn 对象的数组。每个这样的对象对应一个可以显示的列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      DataGridColumn 对象的数组。每个这样的对象对应一个可以显示的列。如果未显式设置，DataGrid 控件将尝试检查第一个数据提供程序项目以确定属性集，并按字母顺序显示这些属性。
     
      <p>若要更改列集，则必须获取此数组，然后修改数组中的列及其顺序，并为 columns 属性指定新数组。这是由于 DataGrid 返回了列数组的一个新副本，所以不会通知已发生更改。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:draggableColumns:get"><apiName>draggableColumns</apiName><shortdesc>
      一个标志，指示是否允许用户重排列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示是否允许用户重排列。如果为 <codeph>true</codeph>，则用户可以通过拖动标题单元格重排 DataGrid 控件的列。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:editable:get"><apiName>editable</apiName><shortdesc>
      一个标志，指示用户能否编辑数据提供程序中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，指示用户能否编辑数据提供程序中的项目。如果为 <codeph>true</codeph>，则控件中的项呈示器可编辑。用户单击项呈示器将可以打开一个编辑器。
     
      <p>您可以关闭编辑 DataGrid 控件各个列的功能，方法是使用 <codeph>DataGridColumn.editable</codeph> 属性或处理 <codeph>itemEditBeginning</codeph> 和 <codeph>itemEditBegin</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:editedItemPosition:get"><apiName>editedItemPosition</apiName><shortdesc>
      正在编辑的数据提供程序项目的项呈示器的列索引和行索引（如果有）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      正在编辑的数据提供程序项目的项呈示器的列索引和行索引（如果有）。
     
      <p>此 Object 包含 <codeph>columnIndex</codeph> 和 <codeph>rowIndex</codeph> 两个字段，分别是项目的从零开始的行索引和列索引。例如：{ columnIndex:2, rowIndex:3}</p>
     
      <p>设置此属性可以在视图中滚动项目，并会分派 <codeph>itemEditBegin</codeph> 事件以打开指定项呈示器上的项目编辑器。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:editedItemRenderer:get"><apiName>editedItemRenderer</apiName><shortdesc>
      对当前正在编辑的项目所属的 DataGrid 控件中项呈示器的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      对当前正在编辑的项目所属的 DataGrid 控件中项呈示器的引用。
     
      <p>在 <codeph>itemEditBegin</codeph> 和 <codeph>itemEditEnd</codeph> 事件的事件侦听器中，您可以使用 <codeph>editedItemRenderer.data</codeph> 属性访问所编辑的项目的当前值。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:enableIME:get"><apiName>enableIME</apiName><shortdesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      一个标志，用于指示当组件接收焦点时是否应启用 IME。如果编辑器已启动，它将相应地设置 enableIME。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:imeMode:get"><apiName>imeMode</apiName><shortdesc>
      指定 IME（输入法编辑器）模式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 IME（输入法编辑器）模式。IME 使用户能够用中文、日文和韩文输入文本。当控件获得焦点时，Flex 设置指定的 IME 模式；当该控件失去焦点时，则将其设置回为先前的值。
     
     <p>flash.system.IMEConversionMode 类定义此属性的有效值的常量。您还可以指定 <codeph>null</codeph> 不指定任何 IME 模式。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.system.IMEConversionMode.xml"><linktext>flash.system.IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="mx.controls:DataGrid:minColumnWidth:get"><apiName>minColumnWidth</apiName><shortdesc>
      列的最小宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      列的最小宽度（以像素为单位）。如果不是 NaN，则 DataGrid 控件会将此值作为所有列的最小宽度。否则，各列可以使用自己的最小宽度。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:DataGrid:horizontalScrollPosition:set"><apiName>horizontalScrollPosition</apiName><shortdesc>
      内容与左边缘的偏移量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      内容与左边缘的偏移量。在某些子类中，这可能是一个像素偏移量；也可能是其它度量，如 DataGrid 控件中的列数。DataGrid 以列为单位进行滚动，因此 <codeph>horizontalScrollPosition</codeph> 属性的值始终在 0 到能够使最后的列可见的列索引之间。这与以像素为单位进行滚动的 List 控件不同。DataGrid 控件始终将列的左边缘与 DataGrid 控件的左边缘对齐。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:RichTextEditor"><apiName>RichTextEditor</apiName><shortdesc>用户可使用 RichTextEditor 控件输入文本并设置其格式。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="underlineButton"/><Exclude kind="property" name="toolBar2"/><Exclude kind="property" name="toolBar"/><Exclude kind="property" name="linkTextInput"/><Exclude kind="property" name="layout"/><Exclude kind="property" name="label"/><Exclude kind="property" name="italicButton"/><Exclude kind="property" name="icon"/><Exclude kind="property" name="fontSizeCombo"/><Exclude kind="property" name="fontSizeArray"/><Exclude kind="property" name="fontFamilyCombo"/><Exclude kind="property" name="fontFamilyArray"/><Exclude kind="property" name="defaultButton"/><Exclude kind="property" name="colorPicker"/><Exclude kind="property" name="bulletButton"/><Exclude kind="property" name="boldButton"/><Exclude kind="property" name="alignButtons"/><styles><style inherit="no" name="textAreaStyleName" owner="mx.controls:RichTextEditor" playerVersion="Flash9" type="String">
<description>
          用于 TextArea 样式的 CSS 样式声明的名称。默认情况下，TextArea 使用 RichTextEditor 的可继承样式。
          
          </description>

<playerversion>AIR 1.1
          </playerversion>
	<prolog><asCustoms><langversion>3.0
          </langversion><productversion>Flex 3
         </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The &lt;mx:RichTextEditor&gt; tag inherits all the members
  of its parent and adds the following members:</p>
 <pre>
  &lt;RichTextEditor
    <strong>Properties</strong>
    defaultLinkProtocol="http://"
    htmlText=""
    showControlBar="true | false"
    showToolTips="false | true"
    text=""
      
    <strong>Events</strong>
    change
  /&gt;
  
 </pre>
  
 ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.binding:IBindingClient</apiBaseInterface><apiBaseClassifier>mx.containers:Panel</apiBaseClassifier></apiClassifierDef><apiDesc>用户可使用 RichTextEditor 控件输入文本并设置其格式。用户可以更改的文本特征包括字体系列、颜色、大小和样式以及其它属性（如文本对齐方式、项目符号和 URL 链接）。该控件由一个包括两个直属子项的 Panel 控件组成：
 <ul>
  <li>用户可在其中输入文本的 Text Area 控件。</li>
  <li>具有允许用户指定文本特征的格式控件的容器。格式控件会影响正在键入的文本或所选文本。</li>
 </ul>
 <p>RichTextEditor 的默认大小为 300 × 325 个像素，默认最小大小为 200 × 220 个像素。如果将 RichTextEditor 控件置于 DividedBox 控件中，请确保 DividedBox 控件的大小足够包含最小尺寸的 RichTextEditor 控件。此外，您可以显式地将 RichTextEditor 控件的 minHeight 或 minWidth 属性设置为 <codeph>NaN</codeph>，以便 DividedBox 容器将控件的尺寸减少至 0。</p>
 <p>下表描述了您可以访问和修改的子控件：</p>
 <adobetable class="innertable">
  
  
  
  
  
  
  
  
  
  
  
  
  
 <tgroup cols="3"><thead><row><entry>控件类型 </entry><entry>ID</entry><entry>说明</entry></row></thead><tbody><row>
    <entry><xref href="../controls/TextArea.html">TextArea</xref></entry>
    <entry>textArea</entry>
    <entry>用户可在其中输入文本的区域。</entry>
  </row><row>
    <entry><xref href="../core/Container.html">Container</xref></entry>
    <entry>工具栏 (toolbar)</entry>
    <entry>格式控件的容器；如果适合置于一行，将这些控件放置到单个水平行中，否则将其放置到多个行中。</entry>
  </row><row>
    <entry><xref href="../controls/ComboBox.html">ComboBox</xref></entry>
    <entry>fontFamilyCombo</entry>
    <entry>指定文本字体系列。ComboBox dataProvider 是字符串 Array，具有下列值：
     <ul>
         <li>_sans</li>
         <li>_serif</li>
         <li>_typewriter</li>
         <li>Arial</li>
         <li>Courier</li>
         <li>Courier New</li>
         <li>Geneva</li>
         <li>Georgia</li>
         <li>Helvetica</li>
         <li>Times New Roman</li>
         <li>Times</li>
         <li>Verdana（默认）</li>
    </ul></entry>
  </row><row>
    <entry><xref href="../controls/ComboBox.html">ComboBox</xref></entry>
    <entry>fontSizeCombo</entry>
    <entry>指定字体大小。ComboBox dataProvider 是一个包含下列值的字符串 Array：8、9、10（默认）、11、12、14、16、18、20、24、26、28、36、48 和 72。 
    <p><b>注意：</b>此规格是字体大小的实际像素值。这些大小值与 HTML 中使用 &lt;font> 标签的 <codeph>size</codeph> 属性指定的相对字体大小不相等。</p></entry>
  </row><row>
    <entry><xref href="../containers/HBox.html">HBox</xref></entry>
    <entry>toolBar2</entry>
    <entry>包含字体特征按钮。</entry>
  </row><row>
    <entry><xref href="../controls/Button.html">Button</xref></entry>
    <entry>boldButton</entry>
    <entry>切换到 selected="true" 时，将字体设为粗体。 </entry>
  </row><row>
    <entry><xref href="../controls/Button.html">Button</xref></entry>
    <entry>italicButton</entry>
    <entry>切换到 selected="true" 时，将字体设为斜体。 </entry>
  </row><row>
    <entry><xref href="../controls/Button.html">Button</xref></entry>
    <entry>underlineButton</entry>
    <entry>切换到 selected="true" 时，将字体设为带有下划线。</entry>
  </row><row>
    <entry><xref href="../controls/ColorPicker.html">ColorPicker</xref></entry>
    <entry>colorPicker</entry>
    <entry>指定文本的颜色。 </entry>
  </row><row>
    <entry><xref href="../controls/ToggleButtonBar.html">ToggleButtonBar</xref></entry>
    <entry>alignButtons</entry>
    <entry>指定文本对齐方式。控件的数据提供程序由对象的 Array 组成，并在其中使用对象 <codeph>action</codeph> 字段指定对齐类型。可用操作如下：
      <ul>
        <li>左对齐（默认） </li>
    <li>居中</li>
    <li>右对齐</li>
    <li>对齐</li>
    </ul></entry>
  </row><row>
    <entry><xref href="../controls/Button.html">Button</xref></entry>
    <entry>bulletButton</entry>
    <entry>切换到 selected="true" 时，将当前行或所选行设置到列表项目，位于某个项目符号之后。</entry>
  </row><row>
    <entry><xref href="../controls/TextInput.html">TextInput</xref></entry>
    <entry>linkTextInput</entry>
    <entry>仅当选中文本时才启用此字段。当用户在此字段中输入 URL 并按 Enter 键时，Flex 将在当前选定文本周围的 TextArea 子控件中插入 HTML <codeph>&lt;a href="<i>user_text</i>" target="blank">&lt;/a></codeph> 标签的等效项。
 
        <p>Flex 最初使用由 <codeph>defaultLinkProtocol</codeph> 属性指定的文本填充此控件；用户可以向此文本追加其余的链接，或替换它。</p>
 </entry>
  </row></tbody></tgroup></adobetable>
  
 <p>若要访问其中的一个子控件，您可以使用与以下语法相似的语法：
 <pre>
 myRTE.toolBar2.setStyle("backgroundColor", 0xCC6633);
 </pre>
 </p>
 
 <p>RichTextEditor 控件具有下列下默认的大小特征：</p>
    <adobetable class="innertable">
       
       
       
       
    <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
          <entry>默认大小</entry>
          <entry>325 个像素宽 × 300 个像素高</entry>
       </row><row>
          <entry>最小大小</entry>
          <entry>220 个像素宽 × 200 个像素高</entry>
       </row><row>
          <entry>最大大小</entry>
          <entry>10000 × 10000 个像素</entry>
       </row></tbody></tgroup></adobetable>
  
  </apiDesc><example conref="RichTextEditorExample.mxml"><swfblock conref="examples/RichTextEditorExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.containers.xml#ControlBar"><linktext>mx.containers.ControlBar</linktext></link><link href="mx.containers.xml#Panel"><linktext>mx.containers.Panel</linktext></link><link href="mx.controls.xml#ToggleButtonBar"><linktext>mx.controls.ToggleButtonBar</linktext></link><link href="mx.controls.xml#Button"><linktext>mx.controls.Button</linktext></link><link href="mx.controls.xml#ColorPicker"><linktext>mx.controls.ColorPicker</linktext></link><link href="mx.controls.xml#ComboBox"><linktext>mx.controls.ComboBox</linktext></link><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link><link href="mx.controls.xml#TextInput"><linktext>mx.controls.TextInput</linktext></link></related-links><adobeApiEvent id="mx.controls:RichTextEditor_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
        当用户更改 TextArea 控件中文本的内容或格式时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
        当用户更改 TextArea 控件中文本的内容或格式时分派。如果您通过重置 <codeph>text</codeph> 或 <codeph>htmlText</codeph> 属性更改 TextArea 内容，则不会分派此事件。
        
        </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:RichTextEditor:RichTextEditor"><apiName>RichTextEditor</apiName><shortdesc>构造函数。</shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>构造函数。</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.controls:RichTextEditor:alignToolTip"><apiName>alignToolTip</apiName><shortdesc>
     当用户将指针悬停在文本对齐按钮上方时显示的工具提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Align</apiData><apiType value="String"/><apiDefaultValue>"Align"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     当用户将指针悬停在文本对齐按钮上方时显示的工具提示。所有按钮都共享相同的工具提示。要查看工具提示，还必须将 RichTextEditor 控件的 <codeph>showToolTips</codeph> 属性设置为 <codeph>true</codeph>。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:boldToolTip"><apiName>boldToolTip</apiName><shortdesc>
     当用户将指针悬停在文本加粗按钮上方时显示的工具提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Bold</apiData><apiType value="String"/><apiDefaultValue>"Bold"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     当用户将指针悬停在文本加粗按钮上方时显示的工具提示。要查看工具提示，还必须将 RichTextEditor 控件的 <codeph>showToolTips</codeph> 属性设置为 <codeph>true</codeph>。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:bulletToolTip"><apiName>bulletToolTip</apiName><shortdesc>
     当用户将指针悬停在带项目符号的列表按钮上方时显示的工具提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Bullet</apiData><apiType value="String"/><apiDefaultValue>"Bullet"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     当用户将指针悬停在带项目符号的列表按钮上方时显示的工具提示。要查看工具提示，还必须将 RichTextEditor 控件的 <codeph>showToolTips</codeph> 属性设置为 <codeph>true</codeph>。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:colorPickerToolTip"><apiName>colorPickerToolTip</apiName><shortdesc>
     当用户将指针悬停在 ColorPicker 控件上方时显示的工具提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Color</apiData><apiType value="String"/><apiDefaultValue>"Color"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     当用户将指针悬停在 ColorPicker 控件上方时显示的工具提示。要查看工具提示，还必须将 RichTextEditor 控件的 <codeph>showToolTips</codeph> 属性设置为 <codeph>true</codeph>。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:fontFamilyToolTip"><apiName>fontFamilyToolTip</apiName><shortdesc>
     当用户将指针悬停在字体下拉列表上方时显示的工具提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Font Family</apiData><apiType value="String"/><apiDefaultValue>"Font Family"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     当用户将指针悬停在字体下拉列表上方时显示的工具提示。要查看工具提示，还必须将 RichTextEditor 控件的 <codeph>showToolTips</codeph> 属性设置为 <codeph>true</codeph>。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:fontSizeToolTip"><apiName>fontSizeToolTip</apiName><shortdesc>
     当用户将指针悬停在字体大小下拉列表上方时显示的工具提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Font Size</apiData><apiType value="String"/><apiDefaultValue>"Font Size"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     当用户将指针悬停在字体大小下拉列表上方时显示的工具提示。要查看工具提示，还必须将 RichTextEditor 控件的 <codeph>showToolTips</codeph> 属性设置为 <codeph>true</codeph>。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:italicToolTip"><apiName>italicToolTip</apiName><shortdesc>
     当用户将指针悬停在文本倾斜按钮上方时显示的工具提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Italic</apiData><apiType value="String"/><apiDefaultValue>"Italic"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     当用户将指针悬停在文本倾斜按钮上方时显示的工具提示。要查看工具提示，还必须将 RichTextEditor 控件的 <codeph>showToolTips</codeph> 属性设置为 <codeph>true</codeph>。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:linkToolTip"><apiName>linkToolTip</apiName><shortdesc>
     当用户将指针悬停在链接文本输入字段上方时显示的工具提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Link</apiData><apiType value="String"/><apiDefaultValue>"Link"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     当用户将指针悬停在链接文本输入字段上方时显示的工具提示。要查看工具提示，还必须将 RichTextEditor 控件的 <codeph>showToolTips</codeph> 属性设置为 <codeph>true</codeph>。
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:underlineToolTip"><apiName>underlineToolTip</apiName><shortdesc>
     当用户将指针悬停在文本下划线按钮上方时显示的工具提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>Underline</apiData><apiType value="String"/><apiDefaultValue>"Underline"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     当用户将指针悬停在文本下划线按钮上方时显示的工具提示。要查看工具提示，还必须将 RichTextEditor 控件的 <codeph>showToolTips</codeph> 属性设置为 <codeph>true</codeph>。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:defaultLinkProtocol:get"><apiName>defaultLinkProtocol</apiName><shortdesc>
     在链接文本开始处使用的默认协议字符串。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"http://"
      
      </apiDefaultValue></apiValueDef><apiDesc>
     在链接文本开始处使用的默认协议字符串。此字符串显示在 LinkTextInput 子控件中，因此，用户输入链接文本时不必键入协议标识符。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:htmlText:get"><apiName>htmlText</apiName><shortdesc>
     包含 HTML 标签的文本，显示在 RichTextEditor 控件的 TextArea 子控件中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
     </apiDefaultValue></apiValueDef><apiDesc>
     包含 HTML 标签的文本，显示在 RichTextEditor 控件的 TextArea 子控件中。无法同时设置此属性和 <codeph>text</codeph> 属性。如果设置了其中一个属性，它将替换使用另一个属性设置的所有值。可以同时获得这两个属性；<codeph>htmlText</codeph> 属性总是返回包含可显示当前文本格式的 HTML 标签的 String。有关使用此属性的详细信息，请参阅 TextArea 文档。
     
     </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link></related-links></apiValue><apiValue id="mx.controls:RichTextEditor:selection:get"><apiName>selection</apiName><shortdesc>
      包含 TextArea 子控件中的选定文本的 TextRange 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.controls.textClasses:TextRange</apiValueClassifier></apiValueDef><apiDesc>
      包含 TextArea 子控件中的选定文本的 TextRange 对象。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.textClasses.xml#TextRange"><linktext>mx.controls.textClasses.TextRange</linktext></link></related-links></apiValue><apiValue id="mx.controls:RichTextEditor:showControlBar:get"><apiName>showControlBar</apiName><shortdesc>
     指定是否显示包含文本格式控件的控件栏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
     指定是否显示包含文本格式控件的控件栏。
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:showToolTips:get"><apiName>showToolTips</apiName><shortdesc>
     指定是否显示文本格式控件的工具提示。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
     指定是否显示文本格式控件的工具提示。 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RichTextEditor:text:get"><apiName>text</apiName><shortdesc>
     不包含标签的纯文本，显示在 RichTextEditor 控件的 TextArea 子控件中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>""
     
     </apiDefaultValue></apiValueDef><apiDesc>
     不包含标签的纯文本，显示在 RichTextEditor 控件的 TextArea 子控件中。无法同时设置此属性和 <codeph>htmlText</codeph> 属性。如果设置了其中一个属性，它将替换使用另一个属性设置的所有值。可以同时获得这两个属性；<codeph>text</codeph> 属性总是返回不包含格式设置信息的纯文本 String。有关使用此属性的详细信息，请参阅 TextArea 文档。
     
     </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#TextArea"><linktext>mx.controls.TextArea</linktext></link></related-links></apiValue><apiValue id="mx.controls:RichTextEditor:moduleFactory:set"><apiName>moduleFactory</apiName><shortdesc/><prolog/><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.core:IFlexModuleFactory</apiValueClassifier></apiValueDef></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
  RadioButtonGroup 控件定义一组 RadioButton 控件，这些控件相互排斥；因此，用户每次只能选择一个 RadioButton 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:RadioButtonGroup" replacement="spark.components.RadioButtonGroup" since="4.0">
	</Alternative></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:RadioButtonGroup&gt;</code> tag inherits all of the
  tag attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:RadioButtonGroup
    <strong>Properties</strong>
    enabled="true|false"
    id="<i>No default</i>"
    labelPlacement="right|left|top|bottom"
 
    <strong>Events</strong>
    change="<i>No default</i>"
    itemClick="<i>No default</i>"
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.core:IMXMLObject</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
  RadioButtonGroup 控件定义一组 RadioButton 控件，这些控件相互排斥；因此，用户每次只能选择一个 RadioButton 控件。当可以选择在 RadioButtonGroup 中组合 RadioButton 实例时，组使您能够执行诸如在一组按钮上（而不是在每个单独的按钮上）设置单一事件处理函数等事项。
  
  <p>使用 <codeph>&lt;mx:RadioButtonGroup></codeph> 标签定义组名称时需要使用 <codeph>id</codeph> 属性。</p> 
 
  <p>注意，RadioButtonGroup 控件是 EventDispatcher 的子类，而不是 UIComponent 的子类，并实现 IMXMLObject 接口。所有其它 Flex 可视组件是 UIComponent 的子类，该类实现 IUIComponent 接口。RadioButtonGroup 控件在 Flex 编译器中内置了一些支持，允许将 RadioButtonGroup 控件用作 Flex 容器的子项，即使该控件没有实现 IUIComponent。所有其它容器子项必须实现 IUIComponent 接口。</p>
 
  <p>因此，如果尝试将可视组件定义为实现 IMXMLObject 接口的 EventDispatcher 的子类，则不能将其用作容器的子项。</p>
 
  </apiDesc><example conref="RadioButtonGroupExample.mxml"><swfblock conref="examples/RadioButtonGroupExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#RadioButton"><linktext>mx.controls.RadioButton</linktext></link></related-links><adobeApiEvent id="mx.controls:RadioButtonGroup_mx.events.ItemClickEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  用户在组中选择 RadioButton 控件时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ItemClickEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.ItemClickEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  用户在组中选择 RadioButton 控件时分派。您也可以为各个 RadioButton 控件设置处理函数。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:RadioButtonGroup_flash.events.Event.CHANGE_change"><apiName>change</apiName><shortdesc>
  此组中所选 RadioButton 控件的值更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  此组中所选 RadioButton 控件的值更改时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:RadioButtonGroup:RadioButtonGroup"><apiName>RadioButtonGroup</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>document</apiItemName><apiOperationClassifier>mx.core:IFlexDisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>在类扩展 EventDispatcher 的简单情况下，不使用 <codeph>document</codeph> 参数。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.events.EventDispatcher.xml"><linktext>flash.events.EventDispatcher</linktext></link></related-links></apiConstructor><apiOperation id="mx.controls:RadioButtonGroup:getRadioButtonAt"><apiName>getRadioButtonAt</apiName><shortdesc>
      返回指定索引处的 RadioButton 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>指定的 RadioButton 控件。
      
      </apiDesc><apiOperationClassifier>mx.controls:RadioButton</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiDesc>RadioButtonGroup 控件中 RadioButton 控件的索引，其中第一个控件的索引是 0。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回指定索引处的 RadioButton 控件。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:RadioButtonGroup:initialized"><apiName>initialized</apiName><shortdesc>
      IMXMLObject.initialized() 方法的实现支持延迟的实例化。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>document</apiItemName><apiType value="Object"/><apiDesc>创建此对象的 MXML 文档。
     
      </apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiType value="String"/><apiDesc>文档用来引用此对象的标识符。如果此对象是文档上的深层属性，则 <codeph>id</codeph> 为 null。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      <codeph>IMXMLObject.initialized()</codeph> 方法的实现支持延迟的实例化。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#IMXMLObject"><linktext>mx.core.IMXMLObject</linktext></link></related-links></apiOperation><apiValue id="mx.controls:RadioButtonGroup:enabled:get"><apiName>enabled</apiName><shortdesc>
      确定是否允许选择。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      确定是否允许选择。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButtonGroup:labelPlacement:get"><apiName>labelPlacement</apiName><shortdesc>
      组中的每个控件的 RadioButton 标签相对于 RadioButton 图标的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/><apiDefaultValue>"right"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      组中的每个控件的 RadioButton 标签相对于 RadioButton 图标的位置。您可以为单个控件覆盖此设置。
     
      <p>MXML 中的有效值为 <codeph>"right"</codeph>、<codeph>"left"</codeph>、<codeph>"bottom"</codeph> 和 <codeph>"top"</codeph>。 </p>
     
      <p>在 ActionScript 中，可使用以下常量来设置此属性：<codeph>ButtonLabelPlacement.RIGHT</codeph>、<codeph>ButtonLabelPlacement.LEFT</codeph>、<codeph>ButtonLabelPlacement.BOTTOM</codeph> 和 <codeph>ButtonLabelPlacement.TOP</codeph>。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButtonGroup:numRadioButtons:get"><apiName>numRadioButtons</apiName><shortdesc>
      属于此 RadioButtonGroup 的 RadioButton 数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/><apiDefaultValue>"undefined"
      
      </apiDefaultValue></apiValueDef><apiDesc>
      属于此 RadioButtonGroup 的 RadioButton 数。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButtonGroup:selectedValue:get"><apiName>selectedValue</apiName><shortdesc>
      组中所选 RadioButton 控件的 value 属性的值（如果此值被设置为非 null 值，默认值为 null）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Object"/><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      组中所选 RadioButton 控件的 <codeph>value</codeph> 属性的值（如果此值被设置为非 <codeph>null</codeph> 值，默认值为 null）。否则，<codeph>selectedValue</codeph> 是所选 RadioButton 的 <codeph>label</codeph> 属性的值。如果未选择任何 RadioButton，则此属性为 <codeph>null</codeph>。
     
      <p>如果设置了 <codeph>selectedValue</codeph>，则 Flex 会选择 <codeph>value</codeph> 或 <codeph>label</codeph> 属性与此值匹配的 RadioButton 控件。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:RadioButtonGroup:selection:get"><apiName>selection</apiName><shortdesc>
      包含对组中当前所选 RadioButton 控件的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:RadioButton</apiValueClassifier><apiDefaultValue>null
      
      </apiDefaultValue></apiValueDef><apiDesc>
      包含对组中当前所选 RadioButton 控件的引用。您只能在 ActionScript 中访问此属性；在 MXML 中此属性不可设置。将此属性设置为 <codeph>null</codeph> 可取消对当前所选 RadioButton 控件的选择。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:Menu"><apiName>Menu</apiName><shortdesc>
  Menu 控件创建可分别选择的选项的弹出菜单，此弹出菜单类似于大多数软件应用程序中的“文件”或“编辑”菜单。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBarStyleName"/><Exclude kind="property" name="showScrollTips"/><Exclude kind="property" name="scrollTipFunction"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="liveScrolling"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBarStyleName"/><Exclude kind="property" name="allowMultipleSelection"/><styles><style inherit="no" name="separatorSkin" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  所有菜单项的外观，使用分隔符标识。<codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="radioDisabledIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  类型标识符为单选按钮的所有已禁用菜单项的图标。<codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="radioIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  类型标识符为单选按钮的所有已启用菜单项的图标。<codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="checkDisabledIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  类型标识符为复选框的所有已禁用菜单项的图标。<codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="checkIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  类型标识符为复选框的所有已启用菜单项的图标。<codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="branchDisabledIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  包含子菜单的所有已禁用菜单项的图标。<codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="branchIcon" owner="mx.controls:Menu" playerVersion="Flash9" type="Class">
<description>
  包含子菜单的所有已启用菜单项的图标。<codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:Menu" playerVersion="Flash9" type="uint">
<description>
  选中菜单项时，菜单项文本的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:Menu" playerVersion="Flash9" type="uint">
<description>
  用户将鼠标滑过菜单项时，菜单项文本的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="textIndent" owner="mx.controls:Menu" playerVersion="Flash9" type="Number">
<description>
  第一行文本与菜单左侧或子菜单菜单项的偏移量。 
 
  </description>
<default>0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="selectionEasingFunction" owner="mx.controls:Menu" playerVersion="Flash9" type="Function">
<description>
  对 <codeph>easingFunction</codeph> 方程的引用，此方程用于控制编程方式的补间。
 
  </description>
<default>"undefined"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:Menu" playerVersion="Flash9" type="uint">
<description>
  选中菜单项时，菜单项背景的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:Menu" playerVersion="Flash9" type="uint">
<description>
  用户将鼠标滑过菜单项时，菜单项背景的颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="openDuration" owner="mx.controls:Menu" playerVersion="Flash9" type="Number">
<description>
  菜单或子菜单打开过渡的持续时间（以毫秒为单位）。值 0 指定无过渡。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="rightIconGap" owner="mx.controls:Menu" playerVersion="Flash9" type="Number">
<description>
  菜单项中标签右侧的间隙。如果分支图标不适合此间隙，则此间隙会扩展以与图标相适合。默认值为 15。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="leftIconGap" owner="mx.controls:Menu" playerVersion="Flash9" type="Number">
<description>
  菜单项中标签左侧的间隙。如果图标（自定义图标和类型图标）不适合此间隙，则此间隙会扩展以与这些图标相适合。默认值为 18。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:Menu" playerVersion="Flash9" type="Number">
<description>
  水平方向上子项（图标和标签）之间的像素数目。
 
  </description>
<default>6
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style arrayType="uint" format="Color" inherit="yes" name="alternatingItemColors" owner="mx.controls:Menu" playerVersion="Flash9" type="Array">
<description>
  交替模式中菜单或子菜单菜单项使用的颜色。此值可以是一个由两种或更多种颜色组成的 Array。仅当未指定 <codeph>backgroundColor</codeph> 时，才使用此样式。 
 
  </description>
<default>"undefined"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles><DefaultProperty name="dataProvider"/></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>mx.managers:IFocusManagerContainer</apiBaseInterface><apiBaseClassifier>mx.controls:List</apiBaseClassifier></apiClassifierDef><apiDesc>
  Menu 控件创建可分别选择的选项的弹出菜单，此弹出菜单类似于大多数软件应用程序中的“文件”或“编辑”菜单。弹出菜单可以具有所需的任何数目的子菜单级别。打开 Menu 控件后，此控件将一直可见，直到通过下列任一操作将其关闭：
 
  <ul>
   <li>调用 <codeph>Menu.hide()</codeph> 方法。</li>
   <li>用户选择已启用的菜单项。</li>
   <li>用户在 Menu 控件外部单击。</li>
   <li>用户选择该应用程序中的其它组件。</li>
  </ul>
 
  <p>Menu 类没有对应的 MXML 标签。必须使用 ActionScript 创建它。</p>
 
  <p>Menu 控件具有下列大小特征：</p>
     <adobetable class="innertable">
        
        
     <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
           <entry>默认大小</entry>
           <entry>宽度取决于 Menu 文本。默认高度是菜单行数与默认行高（19 个像素/行）的乘积。</entry>
        </row></tbody></tgroup></adobetable>
 
 <p>Menu 项目的数据提供程序可以指定多个属性，用于确定项目的显示和行为方式，如以下 XML 数据提供程序所示：</p>
  <pre>
   &lt;mx:XML format="e4x" id="myMenuData">
     &lt;root>
        &lt;menuitem label="MenuItem A" icon="myTopIcon">
            &lt;menuitem label="SubMenuItem A-1" enabled="False"/>
            &lt;menuitem label="SubMenuItem A-2"/>
        &lt;/menuitem>
        &lt;menuitem label="MenuItem B" type="check" toggled="true"/>
        &lt;menuitem label="MenuItem C" type="check" toggled="false" icon="myTopIcon"/>
        &lt;menuitem type="separator"/> 
        &lt;menuitem label="MenuItem D" icon="myTopIcon">
            &lt;menuitem label="SubMenuItem D-1" type="radio" groupName="one"/>
            &lt;menuitem label="SubMenuItem D-2" type="radio" groupName="one" toggled="true"/>
            &lt;menuitem label="SubMenuItem D-3" type="radio" groupName="one"/>
        &lt;/menuitem>
    &lt;/root>
 &lt;/mx:XML></pre>
 
  <p>下表列出了您可以指定的属性及其数据类型、目的，以及数据提供程序表示它们必须采取的方式（如果菜单使用 DefaultDataDescriptor 类分析数据提供程序）：</p>
 
  <adobetable class="innertable">
  
  
  
  
  
  
  
 <tgroup cols="3"><thead><row><entry>属性</entry><entry>类型</entry><entry>说明</entry></row></thead><tbody><row>
    <entry><codeph>enabled</codeph></entry>
    <entry>Boolean</entry>
    <entry>指定用户可以选择菜单项 (<codeph>true</codeph>)，还是不可以选择菜单项 (<codeph>false</codeph>)。如果未指定，则 Flex 将假定该值为 <codeph>true</codeph> 来处理此项目。如果您使用默认数据说明符，则数据提供程序必须使用 <codeph>enabled</codeph>XML 属性或对象字段来指定此特征。</entry>
  </row><row>
    <entry><codeph>groupName</codeph></entry>
    <entry>字符串</entry>
    <entry> （仅对 <codeph>radio</codeph> 类型有意义并且是必需的）用于关联单选组中的单选按钮项目的标识符。如果使用默认数据描述符，则数据提供程序必须使用 <codeph>groupName</codeph>XML 属性或对象字段来指定此特征。</entry>
  </row><row>
    <entry><codeph>icon</codeph></entry>
    <entry>类</entry>
    <entry>指定图像资源的类标识符。此项目不适用于 <codeph>check</codeph>、<codeph>radio</codeph> 或 <codeph>separator</codeph> 类型。您可以使用 <codeph>checkIcon</codeph> 和 <codeph>radioIcon</codeph> 样式来指定一些图标，用于所选单选项目和复选框项目。菜单的 <codeph>iconField</codeph> 或 <codeph>iconFunction</codeph> 属性可以确定数据中用于指定图标的字段名称，或确定用于确定图标的函数。</entry>
  </row><row>
    <entry><codeph>label</codeph></entry>
    <entry>字符串</entry>
    <entry>指定控件中显示的文本。此项目适用于除 <codeph>separator</codeph> 之外的所有菜单项类型。菜单的 <codeph>labelField</codeph> 或 <codeph>labelFunction</codeph> 属性确定数据中指定标签的字段名称，或确定标签的函数。（如果数据提供程序采用 E4X XML 格式，则必须指定其中一个属性以显示标签。）如果数据提供程序是字符串数组，则 Flex 使用字符串值作为标签。</entry>
  </row><row>
    <entry><codeph>toggled</codeph></entry>
    <entry>Boolean</entry>
    <entry>指定选择复选项目还是单选项目。如果未指定，则 Flex 处理该项目的方式将视同该值为 <codeph>false</codeph> 一样，并且该项目是不选中的。如果使用默认数据描述符，则数据提供程序必须使用切换 XML 属性或对象字段来指定此特征。</entry>
  </row><row>
    <entry><codeph>type</codeph></entry>
    <entry>字符串</entry>
    <entry>指定菜单项的类型。有意义的值为 <codeph>separator</codeph>、<codeph>check</codeph> 或 <codeph>radio</codeph>。Flex 将其它所有值或无类型条目的节点视为常规菜单条目。如果使用默认数据描述符，则数据提供程序必须使用类型 XML 属性或对象字段来指定此特征。</entry>
  </row></tbody></tgroup></adobetable>
 
 
  </apiDesc><example conref="SimpleMenuExample.mxml"><swfblock conref="examples/SimpleMenuExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#MenuBar"><linktext>mx.controls.MenuBar</linktext></link><link href="mx.controls.xml#PopUpMenuButton"><linktext>mx.controls.PopUpMenuButton</linktext></link><link href="mx.controls.menuClasses.xml#IMenuDataDescriptor"><linktext>mx.controls.menuClasses.IMenuDataDescriptor</linktext></link><link href="mx.controls.treeClasses.xml#DefaultDataDescriptor"><linktext>mx.controls.treeClasses.DefaultDataDescriptor</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link><link href="mx.managers.xml#PopUpManager"><linktext>mx.managers.PopUpManager</linktext></link></related-links><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><shortdesc>
  当用户将鼠标滑过菜单项时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户将鼠标滑过菜单项时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><shortdesc>
  当用户将鼠标滑离菜单项时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当用户将鼠标滑离菜单项时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.MENU_SHOW_menuShow"><apiName>menuShow</apiName><shortdesc>
  当打开菜单或子菜单时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.MENU_SHOW</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当打开菜单或子菜单时分派。 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.MENU_HIDE_menuHide"><apiName>menuHide</apiName><shortdesc>
  当退出菜单或子菜单时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.MENU_HIDE</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当退出菜单或子菜单时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.ITEM_CLICK_itemClick"><apiName>itemClick</apiName><shortdesc>
  选择菜单项时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  选择菜单项时分派。 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:Menu_mx.events.MenuEvent.CHANGE_change"><apiName>change</apiName><shortdesc>
  当选项由于用户交互操作而发生更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MenuEvent.CHANGE</apiEventType><adobeApiEventClassifier>mx.events.MenuEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当选项由于用户交互操作而发生更改时分派。 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:Menu:Menu"><apiName>Menu</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
     
      <p>应用程序通常不直接调用 Menu 构造函数，而是调用 <codeph>Menu.createMenu()</codeph> 方法。</p>
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:Menu:createMenu"><apiName>createMenu</apiName><shortdesc>
      创建并返回 Menu 类的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata><asCustoms><showRoot>
     
      </showRoot></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Menu 类的一个实例。 
     
      </apiDesc><apiOperationClassifier>mx.controls:Menu</apiOperationClassifier></apiReturn><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>PopUpManager 用于放置 Menu 控件的容器。Menu 控件实际上可能并非由此对象产生。
     
      </apiDesc></apiParam><apiParam><apiItemName>mdp</apiItemName><apiType value="Object"/><apiDesc>Menu 控件的数据提供程序。 
      </apiDesc></apiParam><apiParam><apiItemName>showRoot</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>一个布尔标志，用于指定是否显示数据提供程序的根节点。
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建并返回 Menu 类的实例。Menu 控件的内容由此方法的 <codeph>mdp</codeph> 参数确定。Menu 控件放置在由此方法的 <codeph>parent</codeph> 参数指定的父容器中。此方法并不显示 Menu 控件，它只是创建 Menu 控件，并允许在显示此 Menu 之前修改 Menu 实例。要显示该 Menu，请调用 <codeph>Menu.show()</codeph> 方法。
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.controls.xml#Menu"><linktext>mx.controls.Menu</linktext></link><link href="mx.controls.xml#Menu"><linktext>mx.controls.Menu</linktext></link><link href="mx.controls.xml#Menu/popUpMenu()"><linktext>mx.controls.Menu.popUpMenu()</linktext></link></related-links></apiOperation><apiOperation id="mx.controls:Menu:hide"><apiName>hide</apiName><shortdesc>
      如果 Menu 控件可见，则隐藏 Menu 控件及其所有子菜单。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      如果 Menu 控件可见，则隐藏 Menu 控件及其所有子菜单。  
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Menu:protected:makeListData"><apiName>makeListData</apiName><shortdesc>
      创建新 MenuListData 实例，并基于输入数据提供程序项目来填充字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiDesc>新构建的 ListData 对象。
      
      </apiDesc><apiOperationClassifier>mx.controls.listClasses:BaseListData</apiOperationClassifier></apiReturn><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiDesc>用于填充 ListData 的数据提供程序项目。
      </apiDesc></apiParam><apiParam><apiItemName>uid</apiItemName><apiType value="String"/><apiDesc>该项目的 UID。
      </apiDesc></apiParam><apiParam><apiItemName>rowNum</apiItemName><apiType value="int"/><apiDesc>数据提供程序中项目的索引。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      创建新 MenuListData 实例，并基于输入数据提供程序项目来填充字段。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Menu:protected:measure"><apiName>measure</apiName><shortdesc>
      根据 Menu 菜单项的宽度和高度来计算其首选宽度和高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      根据 Menu 菜单项的宽度和高度来计算其首选宽度和高度。此方法不考虑子菜单的位置和大小。 
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Menu:popUpMenu"><apiName>popUpMenu</apiName><shortdesc>
      设置现有 Menu 控件的 dataProvider，并将该 Menu 控件放在指定的父容器中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>menu</apiItemName><apiOperationClassifier>mx.controls:Menu</apiOperationClassifier><apiDesc>要弹出的 Menu 控件。 
     
      </apiDesc></apiParam><apiParam><apiItemName>parent</apiItemName><apiType value="flash.display:DisplayObjectContainer"/><apiDesc>PopUpManager 用于放置 Menu 控件的容器。Menu 控件实际上可能并非由此对象产生。如果省略此属性，此方法会将 Menu 控件的父级设置为应用程序。 
     
      </apiDesc></apiParam><apiParam><apiItemName>mdp</apiItemName><apiType value="Object"/><apiDesc>设置在弹出菜单上的 dataProvider 对象。如果省略此属性，此方法会将 Menu 数据提供程序设置为新的空 XML 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      设置现有 Menu 控件的 dataProvider，并将该 Menu 控件放在指定的父容器中。此方法不显示 Menu 控件；您必须使用 <codeph>Menu.show()</codeph> 方法来显示 Menu 控件。<codeph>Menu.createMenu()</codeph> 方法使用此方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Menu:protected:setMenuItemToggled"><apiName>setMenuItemToggled</apiName><shortdesc>
      切换菜单项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiDesc>要切换的菜单项。
      </apiDesc></apiParam><apiParam><apiItemName>toggle</apiItemName><apiType value="Boolean"/><apiDesc>用于指示是否切换该项目的布尔值。 
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      切换菜单项。菜单项类型标识符必须是复选框或单选按钮，否则此方法将无效。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:Menu:show"><apiName>show</apiName><shortdesc>
      显示 Menu 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>xShow</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Menu 控件左上角的水平位置（可选）。
     
      </apiDesc></apiParam><apiParam><apiItemName>yShow</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>Menu 控件左上角的垂直位置（可选）。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      显示 Menu 控件。如果 Menu 控件不可见，此方法会将 Menu 放置在父应用程序左上角的给定坐标处，根据需要调整 Menu 控件大小，并使 Menu 控件可见。<codeph>show()</codeph> 方法的 x 和 y 参数用于指定 Menu 控件左上角的坐标，此坐标随沙箱根（可以不是 Menu 控件的直接父项）而变化。例如，如果 Menu 控件位于 HBox 容器中，而该容器又嵌套在 Panel 容器中，则 x 和 y 坐标随 Application 容器而变化（而不随 HBox 容器变化）。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:Menu:dataDescriptor:get"><apiName>dataDescriptor</apiName><shortdesc>
      访问并处理数据提供程序中数据的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls.menuClasses:IMenuDataDescriptor</apiValueClassifier></apiValueDef><apiDesc>
      访问并处理数据提供程序中数据的对象。Menu 控件委托数据描述符来提供其数据的相关信息。然后，这些数据用于分析和移动数据源。为根菜单定义的数据描述符可用于所有子菜单。默认值为 DefaultDataDescriptor 类的内部实例。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Menu:hasRoot:get"><apiName>hasRoot</apiName><shortdesc>
      一个标志，用于指明当前数据提供程序具有根节点；例如，层次结构中的单个顶级节点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/><apiDefaultValue>false
      </apiDefaultValue></apiValueDef><apiDesc>
      一个标志，用于指明当前数据提供程序具有根节点；例如，层次结构中的单个顶级节点。XML 和 Object 就是有根节点的类型的示例，而 List 和 Array 不是。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#Menu/showRoot"><linktext>showRoot</linktext></link></related-links></apiValue><apiValue id="mx.controls:Menu:parentMenu:get"><apiName>parentMenu</apiName><shortdesc>
      菜单层次结构链中的父菜单（在该层次结构链中，当前菜单是该父菜单的子菜单）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>mx.controls:Menu</apiValueClassifier></apiValueDef><apiDesc>
      菜单层次结构链中的父菜单（在该层次结构链中，当前菜单是该父菜单的子菜单）。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:Menu:showRoot:get"><apiName>showRoot</apiName><shortdesc>
      指定是否显示数据提供程序的根节点的布尔值标志。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      </apiDefaultValue></apiValueDef><apiDesc>
      指定是否显示数据提供程序的根节点的布尔值标志。如果 dataProvider 对象具有根节点，并已将 showRoot 设置为 <codeph>false</codeph>，则 Menu 控件不会显示此根节点；而只显示此根节点的后代。此标志对不包含根节点的数据提供程序（如 List 和 Array）不会产生任何影响。 
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#Menu/hasRoot"><linktext>hasRoot</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.controls:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
  VScrollBar（垂直 ScrollBar）控件允许您在数据量超出显示区域时控制所显示的数据部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="property" name="direction"/><Alternative owner="mx.controls:VScrollBar" replacement="spark.components.VScrollBar" since="4.0">
	</Alternative><styles><style format="Time" inherit="no" name="repeatInterval" owner="mx.controls:VScrollBar" playerVersion="Flash9" type="Number">
<description>
  用户在按钮上按住鼠标时，<codeph>buttonDown</codeph> 事件之间相隔的毫秒数。默认值为 35。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Time" inherit="no" name="repeatDelay" owner="mx.controls:VScrollBar" playerVersion="Flash9" type="Number">
<description>
  第一次 <codeph>buttonDown</codeph> 事件后，在按 <codeph>repeatInterval</codeph> 重复 <codeph>buttonDown</codeph> 事件前，要等待的毫秒数。默认值为 500。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  
  <p>The <code>&lt;mx:VScrollBar&gt;</code> tag inherits all the
  tag attributes of its superclass, and adds the following tag attributes:</p>
  
  <pre>
  &lt;mx:VScrollBar
    <strong>Styles</strong>
    repeatDelay="500"
    repeatInterval="35"
 
    <strong>Events</strong>
    scroll="<i>No default</i>"
  /&gt;
  </pre>
  
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls.scrollClasses:ScrollBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  VScrollBar（垂直 ScrollBar）控件允许您在数据量超出显示区域时控制所显示的数据部分。此控件可扩展基本的 ScrollBar 控件。 
  
  <p>虽然 VScrollBar 控件可以单独使用，但通常将与其它组件一起用来提供滚动功能。</p>
  
  <p>ScrollBar 控件由四部分组成：两个箭头按钮、一个轨道和一个滑块。滑块的位置和箭头按钮的显示取决于 ScrollBar 控件的当前状态。ScrollBar 控件使用四个参数计算其显示状态：</p>
 
  <ul>
    <li>最小范围值</li>
    <li>最大范围值</li>
    <li>当前位置 － 必须介于最小范围值和最大范围值之间</li>
    <li>视域大小 - 表示范围内一次可显示的项目数。该项目数必须小于或等于此范围，其中此范围指介于最小范围值和最大范围值之间的一组值。</li>
  </ul>
  
  </apiDesc><example conref="VScrollBarExample.mxml"><swfblock conref="examples/VScrollBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.scrollClasses.xml#ScrollBar"><linktext>mx.controls.scrollClasses.ScrollBar</linktext></link></related-links><adobeApiEvent id="mx.controls:VScrollBar_mx.events.ScrollEvent.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
  当 ScrollBar 控件通过用户启动的操作或以编程方式滚动时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.ScrollEvent.SCROLL</apiEventType><adobeApiEventClassifier>mx.events.ScrollEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 ScrollBar 控件通过用户启动的操作或以编程方式滚动时分派。 
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:VScrollBar:VScrollBar"><apiName>VScrollBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.controls:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
  使用 VideoDisplay 控件，您可以在 Flex 应用程序中播放 FLV 文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Alternative owner="mx.controls:VideoDisplay" replacement="spark.components.VideoPlayer" since="4.0">
	</Alternative><styles><style format="Color" inherit="yes" name="contentBackgroundColor" owner="mx.controls:VideoDisplay" playerVersion="Flash10" theme="spark" type="uint">
<description>
  组件的内容区域的颜色。
   
  </description>
<default>0xFFFFFF
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="shadowDistance" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="Number">
<description>
  投影距离。如果将此属性设置为负值，此阴影将出现在组件的上方。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="left,center,right" inherit="no" name="shadowDirection" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="String">
<description>
  投影方向。可能值包括 <codeph>"left"</codeph>、<codeph>"center"</codeph> 和 <codeph>"right"</codeph>。
 
  </description>
<default>"center"
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="dropShadowColor" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="uint">
<description>
  投影颜色。
 
  </description>
<default>0x000000
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowVisible" owner="mx.controls:VideoDisplay" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  指定组件是否具有可见投影的布尔值属性。默认值为 <codeph>false</codeph>。
 
  <p><b>注意：</b>对于显示在容器上的投影，需设置 <codeph>contentBackgroundColor</codeph> 属性。否则，由于容器的背景默认为透明，阴影将显示在容器后。</p>
  
  </description>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="dropShadowEnabled" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="Boolean">
<description>
  指定组件是否具有可见投影的布尔值属性。此样式与 <codeph>borderStyle="solid"</codeph> 一起使用。默认值为 <codeph>false</codeph>。
 
  <p><b>注意：</b>对于显示在容器上的投影，需设置 <codeph>backgroundColor</codeph> 或 <codeph>backgroundImage</codeph> 属性。否则，由于容器的背景默认为透明，阴影将显示在容器后。</p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="cornerRadius" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo, spark" type="Number">
<description>
  组件角的半径。对于 ApplicationControlBar，默认值为 5。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderVisible" owner="mx.controls:VideoDisplay" playerVersion="Flash10" theme="spark" type="Boolean">
<description>
  边框可视性。
 
  </description>
<default>true
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="borderThickness" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="Number">
<description>
  边框厚度。仅在将 <codeph>borderStyle</codeph> 设置为 <codeph>"solid"</codeph> 时使用。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style enumeration="inset,outset,solid,none" inherit="no" name="borderStyle" owner="mx.controls:VideoDisplay" playerVersion="Flash9" type="String">
<description>
  边框样式。可能值为 <codeph>"none"</codeph>、<codeph>"solid"</codeph>、<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph>。默认值取决于组件类；如果没有覆盖该类的默认值，则默认值为 <codeph>"inset"</codeph>。大多数容器的默认值为 <codeph>"none"</codeph>。<codeph>"inset"</codeph> 和 <codeph>"outset"</codeph> 值只在 halo 主题中有效。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSkin" owner="mx.controls:VideoDisplay" playerVersion="Flash9" type="Class">
<description>
  组件的边框外观类。<codeph/><codeph/><codeph/><codeph/>要确定组件的默认值，请参阅 default.css 文件。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderSides" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="String">
<description>
  边框边。指定要显示的边框边的以空格分隔的 String。此 String 可以任意顺序包含 <codeph>"left"</codeph>、<codeph>"top"</codeph>、<codeph>"right"</codeph> 和 <codeph>"bottom"</codeph>。默认值为 <codeph>"left top right bottom"</codeph>，此值会显示所有四条边。仅当 borderStyle 为 <codeph>"solid"</codeph> 时才使用此样式。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="borderColor" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo, spark" type="uint">
<description>
  边框颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="borderAlpha" owner="mx.controls:VideoDisplay" playerVersion="Flash10" theme="spark" type="Number">
<description>
  边框 Alpha（透明度）。
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.5
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 4
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundSize" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="String">
<description>
  将 <codeph>backgroundImage</codeph> 指定的图像缩放到不同的百分比大小。<codeph>"100%"</codeph> 值将拉抻该图像以适应整个组件。要指定百分比值，您必须输入百分号 (%)。Application 容器的默认值为 <codeph>100%</codeph>。所有其它容器的默认值为 <codeph>auto</codeph>，此值将保持图像的原始大小。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="File" inherit="no" name="backgroundImage" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="Object">
<description>
  组件的背景图像。此样式可以是绝对或相对 URL 或类。您既可以设置 <codeph>backgroundColor</codeph>，也可以设置 <codeph>backgroundImage</codeph>。背景图像显示在背景色上面。默认值为 <codeph>undefined</codeph>，表示“未设置”。如果此样式和 <codeph>backgroundColor</codeph> 样式都未定义，则控件将采用透明背景。
 
  <p>大多数 Flex 控件的默认外观为半透明。因此，容器的背景图像将在某种程度上“渗入”该容器中的控件。通过将控件的 <codeph>fillAlphas</codeph> 属性的 alpha 值设置为 1 可以避免此情况，如以下示例所示：
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="backgroundDisabledColor" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="uint">
<description>
  禁用组件时的组件的背景颜色。全局默认值为 <codeph>undefined</codeph>。List 控件的默认值为 <codeph>0xDDDDDD</codeph>（浅灰）。如果禁用了容器，背景将变暗，而暗淡程度由 <codeph>disabledOverlayAlpha</codeph> 样式控制。
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="no" name="backgroundColor" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="uint">
<description>
  组件的背景颜色。您可以同时设置 <codeph>backgroundColor</codeph> 和 <codeph>backgroundImage</codeph>。一些组件没有背景。DataGrid 控件会忽略此样式。默认值为 <codeph>undefined</codeph>，即不进行设置。如果此样式和 <codeph>backgroundImage</codeph> 样式都为 <codeph>undefined</codeph>，则控件将采用透明背景。
 
  <p>对于 Application 容器，此样式指定应用程序加载时的背景色以及运行该应用程序时的背景渐变。Flex 计算比指定颜色略深的颜色和比指定颜色略浅的颜色之间的渐变。</p>
 
  <p>大多数 Flex 控件的默认外观为半透明。因此，容器的背景颜色将在某种程度上“渗入”该容器中的控件。通过将控件的 <codeph>fillAlphas</codeph> 属性的 alpha 值设置为 1 可以避免此情况，如以下示例所示：
  <pre>
  &lt;mx:<i>Container</i> backgroundColor="0x66CC66"/>
      &lt;mx:<i>ControlName</i> ... fillAlphas="[1,1]"/>
  &lt;/mx:<i>Container</i>></pre>
  </p>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="backgroundAlpha" owner="mx.controls:VideoDisplay" playerVersion="Flash9" theme="halo" type="Number">
<description>
  <codeph>backgroundColor</codeph> 属性定义的颜色和 <codeph>backgroundImage</codeph> 样式定义的图像或 SWF 文件的 Alpha 级别。有效值范围为从 0.0 到 1.0。对于大多数控件，默认值为 1.0，但 ToolTip 控件的默认值为 0.95，而 Alert 控件的默认值为 0.9。
  
  </description>
<default>1.0
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
 
  <p>The <code>&lt;mx:VideoDisplay&gt;</code> tag inherits all the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:VideoDisplay
    <strong>Properties</strong>
    autoBandWidthDetection="false|true"
    autoPlay="true|false"
    autoRewind="true|false"
    bufferTime="0.1"
    cuePointManagerClass=""
    cuePoints=""
    idleTimeout="300000"
    live="false|true"
    maintainAspectRatio="true|false"
    playheadTime=""
    playheadUpdateInterval="250"
    progressInterval="250"
    source=""
    totalTime=""
    volume="0.75"
  
    <b>Styles</b>
    backgroundAlpha="1.0"
    backgroundColor="0x000000"
    backgroundImage="undefined"
    backgroundSize="undefined"
    borderColor="undefined"
    borderSides="left top right bottom"
    borderSkin="ClassReference('mx.skins.halo.HaloBorder')"
    borderStyle="none"
    borderThickness="1"
    cornerRadius="0"
    dropShadowColor="0x000000"
    dropShadowEnabled="false|true"
    shadowDirection="center"
    shadowDistance="2"
  
    <strong>Events</strong>
    close="<i>No default</i>"
    complete="<i>No default</i>"
    cuePoint="<i>No default</i>"
    playheadUpdate="<i>No default</i>"
    progress="<i>No default</i>"
    ready="<i>No default</i>"
    rewind="<i>No default</i>"
    stateChange="<i>No default</i>"
 
  /&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.core:UIComponent</apiBaseClassifier></apiClassifierDef><apiDesc>
  使用 VideoDisplay 控件，您可以在 Flex 应用程序中播放 FLV 文件。它支持通过 HTTP 进行渐进式下载，从 Flash Media Server 和 Camera 对象进行流式传输。
 
  </apiDesc><example conref="VideoDisplayExample.mxml"><swfblock conref="examples/VideoDisplayExample.swf"/></example></apiClassifierDetail><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.STATE_CHANGE_stateChange"><apiName>stateChange</apiName><shortdesc>
  当控件的状态更改时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.STATE_CHANGE</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当控件的状态更改时分派。
 
  <p>您可以使用此事件跟踪回放何时进入和离开不可响应状态（例如，在连接、调整大小或后退过程中）、何时对调用 <codeph>play()</codeph>、<codeph>pause()</codeph> 和 <codeph>stop()</codeph> 方法并写入 <codeph>playHeadTime</codeph> 属性进行排队并随后在播放器进入可响应状态时执行这些操作。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.REWIND_rewind"><apiName>rewind</apiName><shortdesc>
  当控件自动后退时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.REWIND</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当控件自动后退时分派。
 
  </apiDesc></adobeApiEventDetail><related-links><link href="mx.controls.xml#VideoDisplay/autoRewind"><linktext>autoRewind</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.READY_ready"><apiName>ready</apiName><shortdesc>
  当 FLV 文件已加载并且播放准备就绪时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.READY</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 FLV 文件已加载并且播放准备就绪时分派。
 
  <p><codeph>load()</codeph> 或 <codeph>play()</codeph> 方法加载新的 FLV 文件后，当 VideoDisplay 控件首次进入可响应状态时分派此事件。它对每个加载的 FLV 文件只分派一次。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
  继续分派直到 FLV 文件完全下载。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  继续分派直到 FLV 文件完全下载。
 
  <p>您可以使用此事件检查加载的字节数或缓冲区中的字节数。首次调用 <codeph>load()</codeph> 或 <codeph>play()</codeph> 方法时开始分派此事件，而当所有字节加载完成或出现网络错误时结束分派此事件。</p>
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><shortdesc>
  在视频正在播放时继续分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  在视频正在播放时继续分派。事件之间的间隔（以毫秒为单位）由 <codeph>playheadUpdateInterval</codeph> 属性指定，默认为 250 毫秒。视频处于暂停或停止状态时，不分派此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.MetadataEvent.METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><shortdesc>
  当第一次到达 FLV 文件中的元数据时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.MetadataEvent.METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>mx.events.MetadataEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当第一次到达 FLV 文件中的元数据时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.CuePointEvent.CUE_POINT_cuePoint"><apiName>cuePoint</apiName><shortdesc>
  当提示点的 time 属性值等于当前播放头位置时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.CuePointEvent.CUE_POINT</apiEventType><adobeApiEventClassifier>mx.events.CuePointEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当提示点的 <codeph>time</codeph> 属性值等于当前播放头位置时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
  播放头到达 FLV 文件结尾处时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.COMPLETE</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  播放头到达 FLV 文件结尾处时分派。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.controls:VideoDisplay_mx.events.VideoEvent.CLOSE_close"><apiName>close</apiName><shortdesc>
  当 NetConnection 对象因超时或调用 close() 方法而关闭时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events.VideoEvent.CLOSE</apiEventType><adobeApiEventClassifier>mx.events.VideoEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
  当 NetConnection 对象因超时或调用 <codeph>close()</codeph> 方法而关闭时分派。使用 Flash Media Server 时使用此事件。
 
  </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.controls:VideoDisplay:VideoDisplay"><apiName>VideoDisplay</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:VideoDisplay:attachCamera"><apiName>attachCamera</apiName><shortdesc>
      指定播放来自摄像机的视频流。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>camera</apiItemName><apiType value="flash.media:Camera"/><apiDesc>正在捕获视频数据的 Camera 对象。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      指定播放来自摄像机的视频流。在应用程序窗口中的控件范围内显示视频。显示来自摄像机的视频流时，不要调用 <codeph>play()</codeph> 方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:close"><apiName>close</apiName><shortdesc>
      强制关闭输入流以及与 Flash Media Server 的连接。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      强制关闭输入流以及与 Flash Media Server 的连接。调用此方法以分派 <codeph>close</codeph> 事件。通常无需直接调用此方法，因为根据 <codeph>idleTimeout</codeph> 属性的定义，空闲时间超时后连接会自动关闭。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:protected:createBorder"><apiName>createBorder</apiName><shortdesc>
      为此组件创建边框。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      为此组件创建边框。通常，边框由 <codeph>borderStyle</codeph> 和 <codeph>borderSkin</codeph> 样式确定。它必须将边框属性设置为边框实例。
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:protected:layoutChrome"><apiName>layoutChrome</apiName><shortdesc>
      通过设置边框的位置和大小以响应对大小的更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通过设置边框的位置和大小以响应对大小的更改。
     
      <p><codeph>VideoDisplay.layoutChrome()</codeph> 方法设置 VideoDisplay 边框的位置和大小。在 VideoDisplay 的每个子类中，子类的 <codeph>layoutChrome()</codeph> 方法应调用 <codeph>super.layoutChrome()</codeph> 方法，以便正确定位边框。</p>
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:load"><apiName>load</apiName><shortdesc>
      加载媒体文件，但不播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      加载媒体文件，但不播放。
     
      <p>此方法类似于 <codeph>play()</codeph> 方法，但它只加载文件，并不播放。适当时会自动调整大小。加载并自动调整大小后，控件的状态将设置为 <codeph>VideoEvent.PAUSED</codeph>。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:pause"><apiName>pause</apiName><shortdesc>
      在不移动播放头情况下暂停回放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      在不移动播放头情况下暂停回放。如果回放已经暂停或停止，此方法无效。  
     
      <p>若要再次开始回放，请调用 <codeph>play()</codeph> 方法。</p>
     
      <p>如果控件处于不可响应状态，则会将请求排队。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:play"><apiName>play</apiName><shortdesc>
      播放媒体文件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      播放媒体文件。如果文件尚未加载，则会加载它。当回放暂停、停止或控件正在播放时，可以调用此方法。  
     
      <p>如果控件处于不可响应状态，则会将请求排队。</p>
     
      <p>要流式播放来自摄像机的视频，请调用 <codeph>attachCamera()</codeph> 方法，而不是调用 <codeph>play()</codeph> 方法。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:VideoDisplay:stop"><apiName>stop</apiName><shortdesc>
      停止回放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
      停止回放。如果 <codeph>autoRewind</codeph> 属性设置为 <codeph>true</codeph>，则后退到第一帧。  
     
      <p>若要再次开始回放，请调用 <codeph>play()</codeph> 方法。</p>
     
      <p>如果回放已经停止，则此方法无效。如果控件处于不可响应状态，则会将请求排队。</p>
      
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.controls:VideoDisplay:protected:border"><apiName>border</apiName><shortdesc>
      该控件的边框对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="protected"/><apiDynamic/><apiValueClassifier>mx.core:IFlexDisplayObject</apiValueClassifier></apiValueDef><apiDesc>
      该控件的边框对象。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:autoBandWidthDetection:get"><apiName>autoBandWidthDetection</apiName><shortdesc>
      指定 VideoDisplay 控件是否应使用内置自动带宽检测功能。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定 VideoDisplay 控件是否应使用内置自动带宽检测功能。如果为 <codeph>false</codeph>，则无需将 Flash Media Server (FMS) 2 上的 main.asc 文件连接到 FMS。如果为 <codeph>true</codeph>，则需要在 FMS 的目录结构中实现 main.asc 并存储它。Main.asc 文件必须定义下列功能：
     
      <ul>
      <li><pre>
      application.onConnect = function(p_client, p_autoSenseBW)
      {
        //Add security code here.     
        this.acceptConnection(p_client);      
        if (p_autoSenseBW)
          this.calculateClientBw(p_client);
        else
          p_client.call("onBWDone");
      }</pre></li>
     
      <li><pre>
      application.calculateClientBw = function(p_client)
      {
        // Add code to set the clients BandWidth.
        // Use p_client.getStats() which returns bytes_in 
        // and bytes_Out and check your bandWidth using 
        // p_client.call("onBWCheck", result, p_client.payload).
        p_client.call("onBWDone");
      }
      </pre>
      </li>
     
      <li><pre>
      Client.prototype.getStreamLength = function(p_streamName)
      {
        return Stream.length(p_streamName);
      }</pre>
      </li>
      </ul>
      
      有关编写 main.asc 的详细信息，请参阅 FMS 文档。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:autoPlay:get"><apiName>autoPlay</apiName><shortdesc>
      指定设置 source 属性后视频是否应立即开始播放。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定设置 <codeph>source</codeph> 属性后视频是否应立即开始播放。如果为 <codeph>true</codeph>，则视频文件立即开始缓冲并播放。
     
      <p>即使 <codeph>autoPlay</codeph> 设置为 <codeph>false</codeph>，在调用 <codeph>initialize()</codeph> 方法后 Flex 也会开始加载视频。对于 Flash Media Server，这意味着创建此流并加载第一帧以供显示（如果 <codeph>autoSize</codeph> 或 <codeph>aspectRatio</codeph> 设置为 <codeph>true</codeph>，则加载更多内容）。对于 HTTP 下载，Flex 则开始下载流并显示第一帧。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:autoRewind:get"><apiName>autoRewind</apiName><shortdesc>
      指定当播放停止时是否应通过调用 stop() 方法或到达流末尾使 FLV 文件后退到第一帧。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定当播放停止时是否应通过调用 <codeph>stop()</codeph> 方法或到达流末尾使 FLV 文件后退到第一帧。此属性对实时流视频不起作用。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:borderMetrics:get"><apiName>borderMetrics</apiName><shortdesc>
      返回 EdgeMetrics 对象，它具有四个属性：left、top、right 和 bottom。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.core:EdgeMetrics</apiValueClassifier></apiValueDef><apiDesc>
      返回 EdgeMetrics 对象，它具有四个属性：<codeph>left</codeph>、<codeph>top</codeph>、<codeph>right</codeph> 和 <codeph>bottom</codeph>。每个属性值等于控件周围边框一侧的粗度值（以像素为单位）。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:bufferTime:get"><apiName>bufferTime</apiName><shortdesc>
      开始播放视频文件前在内存中缓冲视频的秒数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      开始播放视频文件前在内存中缓冲视频的秒数。对于通过 RTMP 进行流式传输的缓慢连接，增加此属性的默认值非常重要。  
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
      已加载的可播放字节数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      已加载的可播放字节数。此值仅适用于使用 HTTP 加载的媒体。
     
      <p>当没有输入流时、当流来自 Flash Media Server 时或没有可用信息时，返回 -1。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
      要加载的总字节数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      要加载的总字节数。此值仅适用于使用 HTTP 加载的媒体。
     
      <p>当没有输入流时、当流来自 Flash Media Server 时或没有可用信息时，返回 -1。 </p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:cuePointManager:get"><apiName>cuePointManager</apiName><shortdesc>
      与 VideoPlayer 控件关联的 CuePointManager 类的实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
      与 VideoPlayer 控件关联的 CuePointManager 类的实例。可以使用此对象控制提示点，或使用 <codeph>cuePoints</codeph> 属性。
     
      <p>当视频回放到达指定的位置时，使用提示点触发 <codeph>cuePoint</codeph> 事件。要设置提示点，请使用 CuePointManager 类的方法。 </p>
     
     <p>嵌入到 FLV 中的提示点不能通过 <codeph>cuePoints</codeph> 或 <codeph>cuePointManager</codeph> 获得。要检索它们，您可以访问 <codeph>metadata</codeph> 属性或 <codeph>metadataReceived</codeph> 事件。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.videoClasses.xml#CuePointManager"><linktext>mx.controls.videoClasses.CuePointManager</linktext></link></related-links></apiValue><apiValue id="mx.controls:VideoDisplay:cuePointManagerClass:get"><apiName>cuePointManagerClass</apiName><shortdesc>
      要使用的提示点管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Class"/></apiValueDef><apiDesc>
      要使用的提示点管理器。将其设置为 mx.controls.videoClasses.CuePointManager 可启用提示点管理。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.videoClasses.xml#CuePointManager"><linktext>mx.controls.videoClasses.CuePointManager</linktext></link></related-links></apiValue><apiValue id="mx.controls:VideoDisplay:cuePoints:get"><apiName>cuePoints</apiName><shortdesc>
      与控件关联的提示点的 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Array"/></apiValueDef><apiDesc>
      与控件关联的提示点的 Array。可以使用此属性控制提示点，或使用 <codeph>cuePointManager</codeph> 属性。
     
      <p>当视频回放到达指定的位置时，使用提示点触发 <codeph>cuePoint</codeph> 事件。要设置提示点，请向 <codeph>cuePoints</codeph> 属性传递一个 Array。 </p>
     
     <p>嵌入到 FLV 中的提示点不能通过 <codeph>cuePoints</codeph> 或 <codeph>cuePointManager</codeph> 获得。要检索它们，您可以访问 <codeph>metadata</codeph> 属性或 <codeph>metadataReceived</codeph> 事件。</p>
     
      <p>Array 中的每个元素都包含两个字段：</p>
      <ul>
        <li><codeph>name</codeph> 字段包含提示点的任意名称。</li>
        <li><codeph>time</codeph> 字段包含与提示点关联的 VideoDisplay 控件的播放头位置（以秒为单位）。</li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:idleTimeout:get"><apiName>idleTimeout</apiName><shortdesc>
      指定在与 Flash Media Server 的连接处于空闲状态（暂停或停止播放）多长时间后（以毫秒为单位）停止该连接。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>300000 (five minutes)
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定在与 Flash Media Server 的连接处于空闲状态（暂停或停止播放）多长时间后（以毫秒为单位）停止该连接。此属性对 FLV 文件的 HTTP 下载不起作用。如果设置了此属性，则当流空闲时，会使用新值重新开始空闲超时。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:live:get"><apiName>live</apiName><shortdesc>
      指定控件是否正在流式加载实时输入信号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>false
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定控件是否正在流式加载实时输入信号。当从 Flash Media Server 流式加载实时输入信号时将此属性设置为 <codeph>true</codeph>。 
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:maintainAspectRatio:get"><apiName>maintainAspectRatio</apiName><shortdesc>
      指定在调整视频大小时控件是否应该保持原始高宽比。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Boolean"/><apiDefaultValue>true
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定在调整视频大小时控件是否应该保持原始高宽比。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:metadata:get"><apiName>metadata</apiName><shortdesc>
     一个对象，包含通过调用 NetStream.onMetaData() 回调方法（如果可用）而收到的元数据信息包。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Object"/></apiValueDef><apiDesc>
     一个对象，包含通过调用 <codeph>NetStream.onMetaData()</codeph> 回调方法（如果有）而接收到的元数据信息包。分派 <codeph>metadataReceived</codeph> 事件后准备就绪。
     
     <p>如果 FLV 文件是用 Flash 8 编码器编码的，则 <codeph>metadata</codeph> 属性包含以下信息。早期的 FLV 文件只包含 <codeph>height</codeph>、<codeph>width</codeph> 和 <codeph>duration</codeph> 值。</p>
     
     <adobetable class="innertable">
      
          
          
     
     
     
     
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry><b>参数</b></entry><entry><b>描述</b></entry></row></thead><tbody><row><entry><codeph>canSeekToEnd</codeph></entry><entry>一个布尔值，如果 FLV 文件是用最后一帧（它允许定位到渐进式下载影片剪辑的末尾）上的关键帧编码的，则该值为 <codeph>true</codeph>。如果 FLV 文件不是用最后一帧上的关键帧编码的，则该值为 <codeph>false</codeph>。</entry></row><row><entry><codeph>cuePoints</codeph></entry><entry>对象的 Array，每个对象对应嵌入在 FLV 文件中的一个提示点。如果 FLV 文件不包含任何提示点，则值是未定义的。每个对象都具有以下属性：
          
              <ul>
                  <li><codeph>type</codeph> — 一个 String，它将提示点的类型指定为“navigation”或“event”。</li>
                  <li><codeph>name</codeph> — 一个 String，表示提示点的名称。</li>
                  <li><codeph>time</codeph> — 一个 Number，表示以秒为单位的提示点的时间，精确到三位小数（毫秒）。</li>
                  <li><codeph>parameters</codeph> — 一个可选 Object，具有用户在创建提示点时指定的名称-值对。</li>
              </ul>
          </entry></row><row><entry><codeph>audiocodecid</codeph></entry><entry>一个 Number，指示已使用的音频编解码器（编码/解码技术）。</entry></row><row><entry><codeph>audiodelay</codeph></entry><entry> 一个 Number，在源文件中表示时间 <codeph>0</codeph>，从该时起对 FLV 文件进行编码。 
     <p>视频内容延迟很短的一段时间，以便与音频同步。例如，如果 <codeph>audiodelay</codeph> 值为 <codeph>.038</codeph>，则在源文件里从时间 <codeph>0</codeph> 处开始的视频在 FLV 文件里从时间 <codeph>.038</codeph> 处开始。</p> 
     <p>请注意，VideoDisplay 类将在其时间设置中补偿此延迟。这意味着您可以继续使用在源文件中所使用的时间设置。</p>
</entry></row><row><entry><codeph>audiodatarate</codeph></entry><entry>一个 Number，表示每秒音频的千字节数。</entry></row><row><entry><codeph>videocodecid</codeph></entry><entry>一个 Number，表示用于对视频进行编码的编解码器版本。</entry></row><row><entry><codeph>framerate</codeph></entry><entry>一个 Number，表示 FLV 文件的帧速率。</entry></row><row><entry><codeph>videodatarate</codeph></entry><entry>一个 Number，表示 FLV 文件的视频数据速率。</entry></row><row><entry><codeph>height</codeph></entry><entry>一个 Number，表示 FLV 文件的高度。</entry></row><row><entry><codeph>width</codeph></entry><entry>一个 Number，表示 FLV 文件的宽度。</entry></row><row><entry><codeph>duration</codeph></entry><entry>一个 Number，以秒为单位指定 FLV 文件的持续时间。</entry></row></tbody></tgroup></adobetable>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:playheadTime:get"><apiName>playheadTime</apiName><shortdesc>
      播放头位置，以秒为单位，从视频开始播放时起算。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>NaN
      
      </apiDefaultValue></apiValueDef><apiDesc>
      播放头位置，以秒为单位，从视频开始播放时起算。许多 VideoPlay 事件的事件对象都包括播放头位置，以便您能确定视频文件中发生该事件的位置。
     
      <p>将此属性设置为一个以秒为单位的值将执行搜索操作。如果当前正在播放视频，则会从新的播放头位置继续播放。如果视频处于暂停状态，它将搜索到新播放头位置，并保持暂停状态。如果视频处于停止状态，它将搜索到新播放头位置，并进入暂停状态。设置此属性对实时视频流不起作用。</p>
     
      <p>如果新的播放头位置小于 0 或为 NaN，则控件将引发异常。如果新的播放头位置跳过视频的结尾，或超出目前为止已下载的视频文件量，控件仍将尝试进行搜索。</p>
     
      <p>对于 FLV 文件，设置 <codeph>playheadTime</codeph> 属性可搜索距指定位置最近的关键帧，此处的关键帧是编码期间在 FLV 文件中指定的。因此，如果在该位置没有指定关键帧，您可能无法搜索到准确时间。</p>
     
      <p>如果播放器处于不可响应状态，则将请求排队。</p>
     
      <p>如果在没有连接任何流的情况下设置，此属性将引发异常。使用 <codeph>stateChange</codeph> 事件和 <codeph>connected</codeph> 属性可以确定何时设置此属性才是安全的。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:playheadUpdateInterval:get"><apiName>playheadUpdateInterval</apiName><shortdesc>
      指定每两个 playheadUpdate 事件之间的时间量（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>250 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定每两个 <codeph>playheadUpdate</codeph> 事件之间的时间量（以毫秒为单位）。
     
      <p>如果在播放视频时设置此属性，则计时器将在 0 处重新开始计时，下一个 <codeph>playheadUpdate</codeph> 事件在新时间间隔之后发生。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:playing:get"><apiName>playing</apiName><shortdesc>
      如果为 true，则表示当前正在播放媒体。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      如果为 <codeph>true</codeph>，则表示当前正在播放媒体。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:progressInterval:get"><apiName>progressInterval</apiName><shortdesc>
      指定每两个 progress 事件之间的时间量（以毫秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>250 
      
      </apiDefaultValue></apiValueDef><apiDesc>
      指定每两个 <codeph>progress</codeph> 事件之间的时间量（以毫秒为单位）。<codeph>progress</codeph> 事件在视频文件下载完成前不断发生。
     
      <p>如果在下载视频时设置此属性，则计时器将在 0 处重新开始计时，下一个 <codeph>progress</codeph> 事件在新时间间隔之后发生。</p>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:source:get"><apiName>source</apiName><shortdesc>
      要流式传输的 FLV 文件的相对路径和文件名。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="String"/></apiValueDef><apiDesc>
      要流式传输的 FLV 文件的相对路径和文件名。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:state:get"><apiName>state</apiName><shortdesc>
      VideoDisplay 控件的当前状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/><apiDefaultValue>VideoEvent.DISCONNECTED
     
      </apiDefaultValue></apiValueDef><apiDesc>
      VideoDisplay 控件的当前状态。通过调用 <codeph>load()</codeph>、<codeph>play()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法并设置 <codeph>playHeadTime</codeph> 属性即可设置此属性。
     
      <p>此属性可在 VideoEvent 类中定义下列值：<codeph>VideoEvent.BUFFERING</codeph>、<codeph>VideoEvent.CONNECTION_ERROR</codeph>、<codeph>VideoEvent.DISCONNECTED</codeph>、<codeph>VideoEvent.EXEC_QUEUED_CMD</codeph>、<codeph>VideoEvent.LOADING</codeph>、<codeph>VideoEvent.PAUSED</codeph>、<codeph>VideoEvent.PLAYING</codeph>、<codeph>VideoEvent.RESIZING</codeph>、<codeph>VideoEvent.REWINDING</codeph>、<codeph>VideoEvent.SEEKING</codeph> 和 <codeph>VideoEvent.STOPPED</codeph>。 </p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#VideoEvent"><linktext>mx.events.VideoEvent</linktext></link></related-links></apiValue><apiValue id="mx.controls:VideoDisplay:stateResponsive:get"><apiName>stateResponsive</apiName><shortdesc>
      指定 VideoDisplay 控件是否处于可响应状态。如果是，则为 true；否则，为 false。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
      指定 VideoDisplay 控件是否处于可响应状态。如果是，则为 <codeph>true</codeph>；否则，为 <codeph>false</codeph>。当加载或后退视频时，控件将进入不可响应状态。
      
      <p>当 <codeph>state</codeph> 属性为 <codeph>VideoEvent.CONNECTION_ERROR</codeph>、<codeph>VideoEvent.EXEC_QUEUED_CMD</codeph>、<codeph>VideoEvent.RESIZING</codeph> 或 <codeph>VideoEvent.SEEKING</codeph> 时，控件同样处于可响应状态。 </p>
      
      <p>如果控件为不可响应，将对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用进行排序，然后当控件更改为可响应状态时执行这些方法。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:totalTime:get"><apiName>totalTime</apiName><shortdesc>
      媒体的总长度（以秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/></apiValueDef><apiDesc>
      媒体的总长度（以秒为单位）。对于 FLV 1.0 视频文件，需手动设置此属性。对于 FLV 1.1 和更高版本，此控件将自动计算此值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:videoHeight:get"><apiName>videoHeight</apiName><shortdesc>
      加载的 FLV 文件的高度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      加载的 FLV 文件的高度。如果尚未加载 FLV 文件，则为 <codeph>-1</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:videoWidth:get"><apiName>videoWidth</apiName><shortdesc>
      加载的 FLV 文件的宽度。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
      加载的 FLV 文件的宽度。如果尚未加载 FLV 文件，则为 <codeph>-1</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.controls:VideoDisplay:volume:get"><apiName>volume</apiName><shortdesc>
      音量级别，指定一个介于 0 和 1 之间的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Number"/><apiDefaultValue>0.75
      
      </apiDefaultValue></apiValueDef><apiDesc>
      音量级别，指定一个介于 0 和 1 之间的值。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.controls:LinkBar"><apiName>LinkBar</apiName><shortdesc>
  LinkBar 控件定义 LinkButton 控件的水平或垂直行，用于指定一系列链接目标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion><Exclude kind="style" name="verticalScrollBarStyleName"/><Exclude kind="style" name="horizontalScrollBarStyleName"/><Exclude kind="event" name="click"/><Exclude kind="event" name="scroll"/><Exclude kind="property" name="verticalScrollPosition"/><Exclude kind="property" name="verticalScrollPolicy"/><Exclude kind="property" name="verticalScrollBar"/><Exclude kind="property" name="verticalPageScrollSize"/><Exclude kind="property" name="verticalLineScrollSize"/><Exclude kind="property" name="maxVerticalScrollPosition"/><Exclude kind="property" name="maxHorizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPosition"/><Exclude kind="property" name="horizontalScrollPolicy"/><Exclude kind="property" name="horizontalScrollBar"/><Exclude kind="property" name="horizontalPageScrollSize"/><Exclude kind="property" name="horizontalLineScrollSize"/><DefaultProperty name="dataProvider"/><styles><style format="Length" inherit="no" name="verticalGap" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Number">
<description>
  垂直方向上各子项间的像素数目。
 
  </description>
<default>8
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textSelectedColor" owner="mx.controls:LinkBar" playerVersion="Flash9" type="uint">
<description>
  单击链接时，该链接的文本颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="textRollOverColor" owner="mx.controls:LinkBar" playerVersion="Flash9" type="uint">
<description>
  将鼠标指针移动到链接上方时，该链接的文本颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="yes" name="separatorWidth" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Number">
<description>
  分隔符像素宽度（以像素为单位）。
 
  </description>
<default>1
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="separatorSkin" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Class">
<description>
  LinkBar 中 LinkButton 控件之间的分隔符符号。 
 
  </description>
<default>mx.skins.halo.LinkSeparator
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="separatorColor" owner="mx.controls:LinkBar" playerVersion="Flash9" type="uint">
<description>
  默认分隔符外观使用的分隔符颜色。
 
  </description>
<default>0xC4CCCC
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="selectionColor" owner="mx.controls:LinkBar" playerVersion="Flash9" type="uint">
<description>
  单击 LinkButton 控件时，该控件的背景颜色。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Color" inherit="yes" name="rollOverColor" owner="mx.controls:LinkBar" playerVersion="Flash9" type="uint">
<description>
  将鼠标指针滑过链接时，这些链接的颜色。默认值基于当前的 <codeph>themeColor</codeph>。<codeph/><codeph/>
  
  </description>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingTop" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Number">
<description>
  上边框与 LinkButton 控件之间的像素数目。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="paddingBottom" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Number">
<description>
  下边框与 LinkButton 控件之间的像素数目。
 
  </description>
<default>2
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style inherit="no" name="linkButtonStyleName" owner="mx.controls:LinkBar" playerVersion="Flash9" type="String">
<description>
  CSS 样式声明的名称，此声明指定了链接按钮导航项目使用的样式。
 
  </description>
<default>""
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style><style format="Length" inherit="no" name="horizontalGap" owner="mx.controls:LinkBar" playerVersion="Flash9" type="Number">
<description>
  水平方向上 LinkButton 控件之间的像素数目。
 
  </description>
<default>8
  
  </default>

<playerversion>AIR 1.1
  </playerversion>
	<prolog><asCustoms><langversion>3.0
  </langversion><productversion>Flex 3
 </productversion></asCustoms></prolog></style></styles></asMetadata><asCustoms><mxml><![CDATA[
  <p>The <code>&lt;mx:LinkBar&gt;</code> tag inherits all of the tag
  attributes of its superclass, and adds the following tag attributes:</p>
 
  <pre>
  &lt;mx:LinkBar
    <b>Properties</b>
    selectedIndex="-1"
  
    <b>Styles</b>
    linkButtonStyleName=""
    horizontalGap="8"
    paddingBottom="2"
    paddingTop="2"
    rollOverColor="0xEEFEE6"
    selectionColor="0xCDFFC1"
    separatorColor="<i>No default</i>"
    separatorSkin="0x000000"
    separatorWidth="1"
    textRollOverColor="0x2B333C"
    textSelectedColor="0x000000"
    verticalGap="8"
    &gt;
    ...
      <i>child tags</i>
    ...
  &lt;/mx:LinkBar&gt;
  </pre>
 
  ]]></mxml></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.controls:NavBar</apiBaseClassifier></apiClassifierDef><apiDesc>
  LinkBar 控件定义 LinkButton 控件的水平或垂直行，用于指定一系列链接目标。通常使用 LinkBar 控件来控制 ViewStack 容器的活动子容器或创建一组独立的链接。
 
  <p>LinkBar 控件基于其 <codeph>dataProvider</codeph> 属性的值创建 LinkButton 控件。虽然 LinkBar 是容器的一个子类，但请勿使用 <codeph>Container.addChild()</codeph> 和 <codeph>Container.removeChild()</codeph> 等方法添加或删除 LinkButton 控件。而应该使用 <codeph>addItem()</codeph> 和 <codeph>removeItem()</codeph> 等方法处理 <codeph>dataProvider</codeph> 属性。LinkBar 控件会根据对 <codeph>dataProvider</codeph> 属性所做的更改自动添加或删除必要的子项。</p>
 
  <p>LinkBar 控件具有下列默认特征：</p>
  <adobetable class="innertable">
     
     
     
     
  <tgroup cols="2"><thead><row><entry>特征</entry><entry>说明</entry></row></thead><tbody><row>
        <entry>首选大小</entry>
        <entry>宽度足以容纳所有标签文本以及任何填充和分隔符，高度采用最高子项的高度。</entry>
     </row><row>
        <entry>控件的大小调整规则</entry>
        <entry>默认情况下不调整 LinkBar 控件大小。如果希望根据父容器的大小调整 LinkBar 的大小，请指定所需的百分比大小。</entry>
     </row><row>
        <entry>填充</entry>
        <entry>top、bottom、left 和 right 属性均为 2 个像素。</entry>
     </row></tbody></tgroup></adobetable>
 
  </apiDesc><example conref="LinkBarExample.mxml"><swfblock conref="examples/LinkBarExample.swf"/></example></apiClassifierDetail><related-links><link href="mx.controls.xml#NavBar"><linktext>mx.controls.NavBar</linktext></link><link href="mx.containers.xml#ViewStack"><linktext>mx.containers.ViewStack</linktext></link><link href="mx.controls.xml#LinkButton"><linktext>mx.controls.LinkButton</linktext></link><link href="mx.controls.xml#ToggleButtonBar"><linktext>mx.controls.ToggleButtonBar</linktext></link><link href="mx.controls.xml#ButtonBar"><linktext>mx.controls.ButtonBar</linktext></link></related-links><apiConstructor id="mx.controls:LinkBar:LinkBar"><apiName>LinkBar</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
      构造函数。
      
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.controls:LinkBar:styleChanged"><apiName>styleChanged</apiName><shortdesc>
      
      当样式属性的值发生更改时调用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>styleProp</apiItemName><apiType value="String"/><apiDesc>所更改的样式属性的名称。    
      
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      
      当样式属性的值发生更改时调用。 
     
      </apiDesc></apiOperationDetail></apiOperation><apiOperation id="mx.controls:LinkBar:protected:updateDisplayList"><apiName>updateDisplayList</apiName><shortdesc>
      通过设置此 LinkBar 控件中子项的位置和大小来响应大小更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>unscaledWidth</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的宽度（以像素为单位），而不考虑该组件的 <codeph>scaleX</codeph> 属性值。
     
      </apiDesc></apiParam><apiParam><apiItemName>unscaledHeight</apiItemName><apiType value="Number"/><apiDesc>指定组件在组件坐标中的高度（以像素为单位），而不考虑该组件的 <codeph>scaleY</codeph> 属性值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      通过设置此 LinkBar 控件中子项的位置和大小来响应大小更改。有关 <codeph>updateDisplayList()</codeph> 方法的详细信息，请参阅 <codeph>UIComponent.updateDisplayList()</codeph> 方法。
     
      <p><codeph>LinkBar.updateDisplayList()</codeph> 方法首先调用 <codeph>Box.updateDisplayList()</codeph> 方法来定位 LinkButton 控件。有关详细信息，请参阅 <codeph>Box.updateDisplayList()</codeph> 方法。布置好 LinkButton 控件后，会在这些控件之间放置分隔符。</p>
     
      </apiDesc></apiOperationDetail><related-links><link href="mx.core.xml#UIComponent/updateDisplayList()"><linktext>mx.core.UIComponent.updateDisplayList()</linktext></link><link href="mx.containers.xml#Box/updateDisplayList()"><linktext>mx.containers.Box.updateDisplayList()</linktext></link></related-links></apiOperation><apiValue id="mx.controls:LinkBar:selectedIndex:get"><apiName>selectedIndex</apiName><shortdesc>
      如果 LinkBar 控件使用 ViewStack 容器作为其数据提供程序，则为上一次选择的 LinkButton 控件的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty isBindable="true"/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 LinkBar 控件使用 ViewStack 容器作为其数据提供程序，则为上一次选择的 LinkButton 控件的索引。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>