<?xml version="1.0"?>
<apiPackage id="mx.events"><apiName>mx.events</apiName><apiDetail/><apiClassifier id="mx.events:PropertyChangeEventKind"><apiName>PropertyChangeEventKind</apiName><shortdesc>
  PropertyChangeEventKind 类定义 PropertyChangeEvent 类的 kind 属性的常数值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  PropertyChangeEventKind 类定义 PropertyChangeEvent 类的 <codeph>kind</codeph> 属性的常量值。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#PropertyChangeEvent"><linktext>mx.events.PropertyChangeEvent</linktext></link></related-links><apiValue id="mx.events:PropertyChangeEventKind:DELETE"><apiName>DELETE</apiName><shortdesc>
	  指示该属性已从此对象中删除。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>delete</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示该属性已从此对象中删除。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:PropertyChangeEventKind:UPDATE"><apiName>UPDATE</apiName><shortdesc>
	  指示该属性的值已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示该属性的值已更改。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:MoveEvent"><apiName>MoveEvent</apiName><shortdesc>
  代表当 Flex 组件移动时分派的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  代表当 Flex 组件移动时分派的事件对象。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><adobeApiEvent id="mx.events:MoveEvent:MOVE_move"><apiName>move</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:MoveEvent:MOVE</apiEventType><adobeApiEventClassifier>mx.events:MoveEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:MoveEvent:MoveEvent"><apiName>MoveEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>oldX</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>对象先前的 x 坐标（以像素为单位）。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>oldY</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>对象先前的 y 坐标（以像素为单位）。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:MoveEvent:MOVE"><apiName>MOVE</apiName><shortdesc>
	  MoveEvent.MOVE 常量可为 move 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>MoveEvent.MOVE</codeph> 常量可为 <codeph>move</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>oldX</codeph></entry><entry>对象先前的 x 坐标（以像素为单位）。</entry></row><row><entry><codeph>oldY</codeph></entry><entry>对象先前的 y 坐标（以像素为单位）。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MoveEvent:oldX"><apiName>oldX</apiName><shortdesc>
	  对象先前的 x 坐标（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  对象先前的 <codeph>x</codeph> 坐标（以像素为单位）。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MoveEvent:oldY"><apiName>oldY</apiName><shortdesc>
	  对象先前的 y 坐标（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  对象先前的 <codeph>y</codeph> 坐标（以像素为单位）。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:CollectionEventKind"><apiName>CollectionEventKind</apiName><shortdesc>
  CollectionEventKind 类包含代表 mx.events.CollectionEvent 类 kind 属性的有效值的常量。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  CollectionEventKind 类包含代表 mx.events.CollectionEvent 类 <codeph>kind</codeph> 属性的有效值的常量。这些常量指示对集合进行的更改类型。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#CollectionEvent"><linktext>mx.events.CollectionEvent</linktext></link></related-links><apiValue id="mx.events:CollectionEventKind:ADD"><apiName>ADD</apiName><shortdesc>
      指示集合添加了一个或多个项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>add</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示集合添加了一个或多个项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CollectionEventKind:MOVE"><apiName>MOVE</apiName><shortdesc>
      指示项目已从 CollectionEvent oldLocation 属性确定的位置移动到 location 属性确定的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示项目已从 CollectionEvent <codeph>oldLocation</codeph> 属性确定的位置移动到 <codeph>location</codeph> 属性确定的位置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CollectionEventKind:REFRESH"><apiName>REFRESH</apiName><shortdesc>
      指示集合应用了排序或/和筛选。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>refresh</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示集合应用了排序或/和筛选。此更改可能比 RESET 更容易处理。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CollectionEventKind:REMOVE"><apiName>REMOVE</apiName><shortdesc>
      指示集合删除了一个或多个项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>remove</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示集合删除了一个或多个项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CollectionEventKind:REPLACE"><apiName>REPLACE</apiName><shortdesc>
      指示已替换由 CollectionEvent location 属性确定的位置处的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>replace</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示已替换由 CollectionEvent <codeph>location</codeph> 属性确定的位置处的项目。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CollectionEventKind:RESET"><apiName>RESET</apiName><shortdesc>
      指示集合已彻底更改，需要进行重置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reset</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示集合已彻底更改，需要进行重置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CollectionEventKind:UPDATE"><apiName>UPDATE</apiName><shortdesc>
      指示集合中一个或多个项目进行了更新。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指示集合中一个或多个项目进行了更新。受影响的项目将存储在 <codeph>items</codeph> 属性中。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ColorPickerEvent"><apiName>ColorPickerEvent</apiName><shortdesc>
  代表特定于 ColorPicker 控件的事件，如用户将鼠标滑过或滑离样本面板中的样本时。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  代表特定于 ColorPicker 控件的事件，如用户将鼠标滑过或滑离样本面板中的样本时。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.events:ColorPickerEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ColorPickerEvent:CHANGE</apiEventType><adobeApiEventClassifier>mx.events:ColorPickerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ColorPickerEvent:ENTER_enter"><apiName>enter</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ColorPickerEvent:ENTER</apiEventType><adobeApiEventClassifier>mx.events:ColorPickerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ColorPickerEvent:ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ColorPickerEvent:ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events:ColorPickerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ColorPickerEvent:ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ColorPickerEvent:ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events:ColorPickerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:ColorPickerEvent:ColorPickerEvent"><apiName>ColorPickerEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>Color 的数据提供程序中的从零开始的索引，此索引对应滑过、滑离或者所选的颜色。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiType value="uint"/><apiData>0xFFFFFFFF</apiData><apiDesc>滑过、滑离、选择或者输入的 RGB 颜色。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:ColorPickerEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
	  ColorPickerEvent.CHANGE 常量定义用户从 ColorPicker 控件中选择颜色时分派的事件的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ColorPickerEvent.CHANGE</codeph> 常量定义用户从 ColorPicker 控件中选择颜色时分派的事件的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>color</codeph></entry><entry>选择的 RGB 颜色。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。</entry></row><row><entry><codeph>index</codeph></entry>
	         <entry>Color 的数据提供程序中的从零开始的索引，此索引对应所选的颜色。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ColorPickerEvent:ENTER"><apiName>ENTER</apiName><shortdesc>
	  ColorPickerEvent.ENTER 常量定义用户在颜色选择器框中键入后按 Enter 键时分派的事件的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>enter</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ColorPickerEvent.ENTER</codeph> 常量定义用户在颜色选择器框中键入后按 Enter 键时分派的事件的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>color</codeph></entry><entry>输入的 RGB 颜色。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。</entry></row><row><entry><codeph>index</codeph></entry>
	         <entry>始终为 -1。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ColorPickerEvent:ITEM_ROLL_OUT"><apiName>ITEM_ROLL_OUT</apiName><shortdesc>
 	  ColorPickerEvent.ITEM_ROLL_OUT 常量定义用户将鼠标滑离样本面板中的样本时分派的事件的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemRollOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
 	  <codeph>ColorPickerEvent.ITEM_ROLL_OUT</codeph> 常量定义用户将鼠标滑离样本面板中的样本时分派的事件的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>color</codeph></entry><entry>滑过的 RGB 颜色。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。</entry></row><row><entry><codeph>index</codeph></entry>
	         <entry>Color 的数据提供程序中的从零开始的索引，此索引对应滑过的颜色。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ColorPickerEvent:ITEM_ROLL_OVER"><apiName>ITEM_ROLL_OVER</apiName><shortdesc>
 	  ColorPickerEvent.ITEM_ROLL_OVER 常量定义用户将鼠标滑过样本面板中的样本时分派的事件的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemRollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
 	  <codeph>ColorPickerEvent.ITEM_ROLL_OVER</codeph> 常量定义用户将鼠标滑过样本面板中的样本时分派的事件的 <codeph>type</codeph> 属性值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>color</codeph></entry><entry>用户滑离的 RGB 颜色。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。</entry></row><row><entry><codeph>index</codeph></entry>
	         <entry>Color 的数据提供程序中的从零开始的索引，此索引对应用户滑离的颜色。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ColorPickerEvent:color"><apiName>color</apiName><shortdesc>
	  滑过、滑离、选择或者输入的 RGB 颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="uint"/></apiValueDef><apiDesc>
	  滑过、滑离、选择或者输入的 RGB 颜色。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ColorPickerEvent:index"><apiName>index</apiName><shortdesc>
	  Color 的数据提供程序中的从零开始的索引，此索引对应滑过、滑离或者所选的颜色。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	  Color 的数据提供程序中的从零开始的索引，此索引对应滑过、滑离或者所选的颜色。如果事件类型为 <codeph>ColorPickerEvent.ENTER</codeph>，则默认值为 -1；在这种情况下不对其进行设置，因为用户可以输入与数据提供程序中任何颜色都不匹配的 RGB 字符串。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:EventListenerRequest"><apiName>EventListenerRequest</apiName><shortdesc>
  请求从一个 SystemManager 发送到另一个应用程序中的 SystemManager（通过它们之间的桥），以代表您添加或删除指定事件的侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.events:SWFBridgeRequest</apiBaseClassifier></apiClassifierDef><apiDesc>
  请求从一个 SystemManager 发送到另一个应用程序中的 SystemManager（通过它们之间的桥），以代表您添加或删除指定事件的侦听器。未使用 <codeph>data</codeph> 属性。只能请求特定的事件。在另一个应用程序中触发事件时，将通过桥重新分派该事件，进行请求的 SystemManager 在该桥处拾取事件并从自身重新分派该事件。一般情况下，生成此请求是因为某些其它代码对其 SystemManager 上的一个已批准事件调用了 <codeph>addEventListener()</codeph> 方法。此请求也由 SystemManager 进行分派，以允许封送实现以不同的方式处理添加或删除侦听器的操作。由 SystemManager 分派时，侦听器属性为非 null；
  
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.events:EventListenerRequest:EventListenerRequest"><apiName>EventListenerRequest</apiName><shortdesc>
	  创建一个新的请求，用于添加或删除事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。<codeph>EventListenerRequest.ADD</codeph> 或 <codeph>EventListenerRequest.REMOVE</codeph>。
         
          </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
         
          </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
         
	  </apiDesc></apiParam><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>一般要传递给 <codeph>addEventListener()</codeph> 方法的消息的类型。
         
	  </apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiType value="Function"/><apiData>null</apiData><apiDesc>确定侦听器是运行于捕获阶段、目标阶段还是冒泡阶段。
         
	  </apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>事件侦听器的优先级。优先级由一个 32 位整数指定。
         
	  </apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>确定对侦听器的引用是强引用，还是弱引用。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiType value="Boolean"/><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
	  创建一个新的请求，用于添加或删除事件侦听器。
	 
	  </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.events.xml#IEventDispatcher/addEventListener"><linktext>flash.events.IEventDispatcher.addEventListener</linktext></link></related-links></apiConstructor><apiOperation id="mx.events:EventListenerRequest:marshal"><apiName>marshal</apiName><shortdesc>
	  通过将事件中的相关参数复制到新事件中，封送该事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>用于定义新事件的 EventListenerRequest。
	  
	  </apiDesc><apiOperationClassifier>mx.events:EventListenerRequest</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>要封送的事件。
     	 
     	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  通过将事件中的相关参数复制到新事件中，封送该事件。
     	 
     	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.events:EventListenerRequest:ADD_EVENT_LISTENER_REQUEST"><apiName>ADD_EVENT_LISTENER_REQUEST</apiName><shortdesc>
	  请求添加事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addEventListenerRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  请求添加事件侦听器。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:EventListenerRequest:REMOVE_EVENT_LISTENER_REQUEST"><apiName>REMOVE_EVENT_LISTENER_REQUEST</apiName><shortdesc>
	  请求删除事件侦听器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removeEventListenerRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  请求删除事件侦听器。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:EventListenerRequest:eventType:get"><apiName>eventType</apiName><shortdesc>
	  要侦听的事件的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
	  要侦听的事件的类型。
     
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#Event/type"><linktext>flash.events.Event.type</linktext></link></related-links></apiValue><apiValue id="mx.events:EventListenerRequest:listener:get"><apiName>listener</apiName><shortdesc>
	  要调用的方法或函数
     
	  </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Function"/></apiValueDef><apiDesc>
	  要调用的方法或函数
     
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#IEventDispatcher/addEventListener"><linktext>flash.events.IEventDispatcher.addEventListener</linktext></link></related-links></apiValue><apiValue id="mx.events:EventListenerRequest:priority:get"><apiName>priority</apiName><shortdesc>
	  addEventListener() 的 priority 参数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="int"/></apiValueDef><apiDesc>
	  <codeph>addEventListener()</codeph> 的 <codeph>priority</codeph> 参数。
     
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#IEventDispatcher/addEventListener"><linktext>flash.events.IEventDispatcher.addEventListener</linktext></link></related-links></apiValue><apiValue id="mx.events:EventListenerRequest:useCapture:get"><apiName>useCapture</apiName><shortdesc>
	  addEventListener() 的 useCapture 参数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  <codeph>addEventListener()</codeph> 的 <codeph>useCapture</codeph> 参数。
     
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#IEventDispatcher/addEventListener"><linktext>flash.events.IEventDispatcher.addEventListener</linktext></link></related-links></apiValue><apiValue id="mx.events:EventListenerRequest:useWeakReference:get"><apiName>useWeakReference</apiName><shortdesc>
	  addEventListener() 的 useWeakReference 参数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  <codeph>addEventListener()</codeph> 的 <codeph>useWeakReference</codeph> 参数。
     
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#IEventDispatcher/addEventListener"><linktext>flash.events.IEventDispatcher.addEventListener</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.events:StyleEvent"><apiName>StyleEvent</apiName><shortdesc>
  StyleEvent 类表示下载某种样式 SWF 时供 StyleManager 类使用的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ProgressEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
  StyleEvent 类表示下载某种样式 SWF 时供 StyleManager 类使用的事件对象。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.styles.xml#StyleManager"><linktext>mx.styles.StyleManager</linktext></link></related-links><adobeApiEvent id="mx.events:StyleEvent:COMPLETE_styleComplete"><apiName>styleComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:StyleEvent:COMPLETE</apiEventType><adobeApiEventClassifier>mx.events:StyleEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:StyleEvent:ERROR_styleError"><apiName>styleError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:StyleEvent:ERROR</apiEventType><adobeApiEventClassifier>mx.events:StyleEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:StyleEvent:PROGRESS_styleProgress"><apiName>styleProgress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:StyleEvent:PROGRESS</apiEventType><adobeApiEventClassifier>mx.events:StyleEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:StyleEvent:StyleEvent"><apiName>StyleEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件的类型。可能的值包括：
      <ul>
         <li>“progress”(<codeph>StyleEvent.PROGRESS</codeph>)；</li>
         <li>“complete”(<codeph>StyleEvent.COMPLETE</codeph>)；</li>
         <li>“error”(<codeph>StyleEvent.ERROR</codeph>)；</li>
      </ul>
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。
     
      </apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>在侦听器处理事件时加载的字节数。
     
      </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>如果加载进程成功，最终将加载的字节总数。
     
      </apiDesc></apiParam><apiParam><apiItemName>errorText</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>类型为 StyleEvent.ERROR 时显示的错误的错误消息。
     
      </apiDesc></apiParam><apiTipTexts><apiTipText><codeph>StyleEvent</codeph> 对象的构造函数。
      
      </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:StyleEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
      当样式 SWF 完成下载时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiType value="String"/></apiValueDef><apiDesc>
      当样式 SWF 完成下载时分派。<codeph>StyleEvent.COMPLETE</codeph> 常量可为 <codeph>styleComplete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry><entry>空</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:StyleEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
      当下载样式 SWF 出现错误时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc>
      当下载样式 SWF 出现错误时分派。<codeph>StyleEvent.ERROR</codeph> 常量可为 <codeph>styleError</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>空</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>空</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry>错误消息。<entry/></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:StyleEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
      当下载样式 SWF 时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiType value="String"/></apiValueDef><apiDesc>
      当下载样式 SWF 时分派。<codeph>StyleEvent.PROGRESS</codeph> 常量可为 <codeph>styleProgress</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>加载的字节数。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>要加载的字节总数。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry>空<entry/></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:StyleEvent:errorText"><apiName>errorText</apiName><shortdesc>
      type 为 ERROR 时的错误消息；在其它情况下为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>type</codeph> 为 <codeph>ERROR</codeph> 时的错误消息；在其它情况下为 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:DynamicEvent"><apiName>DynamicEvent</apiName><shortdesc>
  Event 的子类是动态的，这意味着在运行时可以在其实例上设置任意事件属性。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  Event 的子类是动态的，这意味着在运行时可以在其实例上设置任意事件属性。
 
  <p>相反，Event 及它的其它子类是非动态的，这意味着只可以设置在这些类中声明的属性。当原型化应用程序时，使用 DynamicEvent 会容易些，因为用户不必提前写入 Event 子类来声明属性。但是，最终应该消除 DynamicEvent 并且写入 Event 子类，因为这样做更加快速，也更加安全。DynamicEvent 相当灵活，以致于当您设置错误的属性或分配给不正确类型的值时，编辑器无法帮助您捕获错误。</p>
 
  <p>示例:</p>
 
  <pre>
  var event:DynamicEvent = new DynamicEvent("credentialsChanged");
  event.name = name;
  event.passsword = password; // misspelling won't be caught!
  dispatchEvent(event);
  </pre>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.events:DynamicEvent:DynamicEvent"><apiName>DynamicEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor></apiClassifier><apiClassifier id="mx.events:DataGridEventReason"><apiName>DataGridEventReason</apiName><shortdesc>
  DataGridEventReason 类定义 type 属性为 itemEditEnd 时，代表 DataGridEvent 对象的 reason 属性值的常数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  DataGridEventReason 类定义 <codeph>type</codeph> 属性为 <codeph>itemEditEnd</codeph> 时，代表 DataGridEvent 对象的 <codeph>reason</codeph> 属性值的常量。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.events:DataGridEventReason:CANCELLED"><apiName>CANCELLED</apiName><shortdesc>
      指定用户取消了编辑，并且不希望保存已编辑的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancelled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定用户取消了编辑，并且不希望保存已编辑的数据。即使从 <codeph>itemEditEnd</codeph> 事件的事件侦听器中调用 <codeph>preventDefault()</codeph> 方法，Flex 仍通过调用 <codeph>destroyItemEditor()</codeph> 编辑器关闭编辑器。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEventReason:NEW_COLUMN"><apiName>NEW_COLUMN</apiName><shortdesc>
      指定用户已将焦点移到同一行中的新列。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>newColumn</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定用户已将焦点移到同一行中的新列。在事件侦听器中，可以更改焦点，或者阻止更改焦点。例如，事件侦听器可以检查用户是否为当前编辑的项目输入了有效值。如果输入值无效，可以通过调用 <codeph>preventDefault()</codeph> 方法阻止用户移动到新的项目。在这种情况下，项目编辑器保持打开状态，用户继续编辑当前的项目。如果调用 <codeph>preventDefault()</codeph> 方法并调用 <codeph>destroyItemEditor()</codeph> 方法，则会阻止移动到新的项目，但是项目编辑器关闭。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEventReason:NEW_ROW"><apiName>NEW_ROW</apiName><shortdesc>
      指定用户已将焦点移到新行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>newRow</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定用户已将焦点移到新行。处理此原因的方式与处理 <codeph>NEW_COLUMN</codeph> 非常相似。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEventReason:OTHER"><apiName>OTHER</apiName><shortdesc>
      指定 list 控件失去焦点、已滚动，或者由于某种原因处于不允许编辑的状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>other</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定 list 控件失去焦点、已滚动，或者由于某种原因处于不允许编辑的状态。即使从 <codeph>itemEditEnd</codeph> 事件的事件侦听器中调用 <codeph>preventDefault()</codeph> 方法，Flex 仍通过调用 <codeph>destroyItemEditor()</codeph> 编辑器关闭编辑器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:DragEvent"><apiName>DragEvent</apiName><shortdesc>
  DragEvent 类代表作为拖放操作部分进行分派的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
  DragEvent 类代表作为拖放操作部分进行分派的事件对象。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#DragManager"><linktext>mx.managers.DragManager</linktext></link><link href="mx.core.xml#DragSource"><linktext>mx.core.DragSource</linktext></link><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><adobeApiEvent id="mx.events:DragEvent:DRAG_COMPLETE_dragComplete"><apiName>dragComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DragEvent:DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events:DragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DragEvent:DRAG_DROP_dragDrop"><apiName>dragDrop</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DragEvent:DRAG_DROP</apiEventType><adobeApiEventClassifier>mx.events:DragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DragEvent:DRAG_ENTER_dragEnter"><apiName>dragEnter</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DragEvent:DRAG_ENTER</apiEventType><adobeApiEventClassifier>mx.events:DragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DragEvent:DRAG_EXIT_dragExit"><apiName>dragExit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DragEvent:DRAG_EXIT</apiEventType><adobeApiEventClassifier>mx.events:DragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DragEvent:DRAG_OVER_dragOver"><apiName>dragOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DragEvent:DRAG_OVER</apiEventType><adobeApiEventClassifier>mx.events:DragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DragEvent:DRAG_START_dragStart"><apiName>dragStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DragEvent:DRAG_START</apiEventType><adobeApiEventClassifier>mx.events:DragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:DragEvent:DragEvent"><apiName>DragEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>dragInitiator</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiData>null</apiData><apiDesc>指定启动拖动的组件的 IUIComponent。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>dragSource</apiItemName><apiOperationClassifier>mx.core:DragSource</apiOperationClassifier><apiData>null</apiData><apiDesc>包含正在拖动的数据的 DragSource 对象。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>action</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>指定的放置操作，如 <codeph>DragManager.MOVE</codeph>。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示是否已按下 <codeph>Ctrl</codeph> 键。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示是否已按下 <codeph>Alt</codeph> 键。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示是否已按下 <codeph>Shift</codeph> 键。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。通常由 Flex 控件调用且不用于应用程序代码。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:DragEvent:DRAG_COMPLETE"><apiName>DRAG_COMPLETE</apiName><shortdesc>
	  DragEvent.DRAG_COMPLETE 常量可为 dragComplete 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dragComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DragEvent.DRAG_COMPLETE</codeph> 常量可为 <codeph>dragComplete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>action</codeph></entry><entry>引发该事件的操作：<codeph>DragManager.COPY</codeph>、<codeph>DragManager.LINK</codeph>、<codeph>DragManager.MOVE</codeph> 或 <codeph>DragManager.NONE</codeph>。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dragInitiator</codeph></entry><entry>启动拖动的组件。</entry></row><row><entry><codeph>dragSource</codeph></entry><entry>包含正在拖动的数据的 DragSource 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DragEvent:DRAG_DROP"><apiName>DRAG_DROP</apiName><shortdesc>
	  DragEvent.DRAG_DROP 常量可为 dragDrop 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dragDrop</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DragEvent.DRAG_DROP</codeph> 常量可为 <codeph>dragDrop</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>action</codeph></entry><entry>引发该事件的操作：<codeph>DragManager.COPY</codeph>、<codeph>DragManager.LINK</codeph>、<codeph>DragManager.MOVE</codeph> 或 <codeph>DragManager.NONE</codeph>。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dragInitiator</codeph></entry><entry>启动拖动的组件。</entry></row><row><entry><codeph>dragSource</codeph></entry><entry>包含正在拖动的数据的 DragSource 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DragEvent:DRAG_ENTER"><apiName>DRAG_ENTER</apiName><shortdesc>
	  DragEvent.DRAG_ENTER 常量可为 dragEnter 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dragEnter</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DragEvent.DRAG_ENTER</codeph> 常量可为 <codeph>dragEnter</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>action</codeph></entry><entry>导致此事件的操作，始终是 <codeph>DragManager.MOVE</codeph>。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dragInitiator</codeph></entry><entry>启动拖动的组件。</entry></row><row><entry><codeph>dragSource</codeph></entry><entry>包含正在拖动的数据的 DragSource 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DragEvent:DRAG_EXIT"><apiName>DRAG_EXIT</apiName><shortdesc>
	  DragEvent.DRAG_EXIT 常量可为 dragExit 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dragExit</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DragEvent.DRAG_EXIT</codeph> 常量可为 <codeph>dragExit</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>action</codeph></entry><entry>引发该事件的操作：<codeph>DragManager.COPY</codeph>、<codeph>DragManager.LINK</codeph>、<codeph>DragManager.MOVE</codeph> 或 <codeph>DragManager.NONE</codeph>。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dragInitiator</codeph></entry><entry>启动拖动的组件。</entry></row><row><entry><codeph>dragSource</codeph></entry><entry>包含正在拖动的数据的 DragSource 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DragEvent:DRAG_OVER"><apiName>DRAG_OVER</apiName><shortdesc>
	  DragEvent.DRAG_OVER 常量可为 dragOver 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dragOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DragEvent.DRAG_OVER</codeph> 常量可为 <codeph>dragOver</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
	 <p>事件对象的属性有下列值：</p>
	 <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>action</codeph></entry><entry>引发该事件的操作：<codeph>DragManager.COPY</codeph>、<codeph>DragManager.LINK</codeph>、<codeph>DragManager.MOVE</codeph> 或 <codeph>DragManager.NONE</codeph>。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dragInitiator</codeph></entry><entry>启动拖动的组件。</entry></row><row><entry><codeph>dragSource</codeph></entry><entry>包含正在拖动的数据的 DragSource 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DragEvent:DRAG_START"><apiName>DRAG_START</apiName><shortdesc>
	  DragEvent.DRAG_START 常量可为 dragStart 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dragStart</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  DragEvent.DRAG_START 常量可为 <codeph>dragStart</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>action</codeph></entry><entry>引发该事件的操作：<codeph>DragManager.COPY</codeph>、<codeph>DragManager.LINK</codeph>、<codeph>DragManager.MOVE</codeph> 或 <codeph>DragManager.NONE</codeph>。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dragInitiator</codeph></entry><entry>启动拖动的组件。</entry></row><row><entry><codeph>dragSource</codeph></entry><entry>包含正在拖动的数据的 DragSource 对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DragEvent:action"><apiName>action</apiName><shortdesc>
	  所需的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  所需的操作。<codeph>DragManager.COPY</codeph>、<codeph>DragManager.LINK</codeph>、<codeph>DragManager.MOVE</codeph> 或 <codeph>DragManager.NONE</codeph> 中的任意一项。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DragEvent:dragInitiator"><apiName>dragInitiator</apiName><shortdesc>
	  启动拖动的组件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IUIComponent</apiValueClassifier></apiValueDef><apiDesc>
	  启动拖动的组件。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DragEvent:dragSource"><apiName>dragSource</apiName><shortdesc>
	  包含正在拖动的数据的 DragSource 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:DragSource</apiValueClassifier></apiValueDef><apiDesc>
	  包含正在拖动的数据的 DragSource 对象。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DragEvent:draggedItem"><apiName>draggedItem</apiName><shortdesc>
	  如果 dragInitiator 属性包含 IAutomationObject 对象，则此属性在鼠标光标附近包含子 IAutomationObject 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  如果 <codeph>dragInitiator</codeph> 属性包含 IAutomationObject 对象，则此属性在鼠标光标附近包含子 IAutomationObject 对象。如果 <codeph>dragInitiator</codeph> 属性不包含 IAutomationObject 对象，则此属性为 <codeph>null</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:FlexEvent"><apiName>FlexEvent</apiName><shortdesc>
  FlexEvent 类代表传递到很多 Flex 事件的事件侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexEvent 类代表传递到很多 Flex 事件的事件侦听器的事件对象。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.events:FlexEvent:ADD_add"><apiName>add</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:ADD</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:ADD_FOCUS_MANAGER_addFocusManager"><apiName>addFocusManager</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:ADD_FOCUS_MANAGER</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:APPLICATION_COMPLETE_applicationComplete"><apiName>applicationComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:APPLICATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:BUTTON_DOWN_buttonDown"><apiName>buttonDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:BUTTON_DOWN</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:CHANGING_changing"><apiName>changing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:CHANGING</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:CONTENT_CREATION_COMPLETE_contentCreationComplete"><apiName>contentCreationComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:CONTENT_CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:CREATION_COMPLETE_creationComplete"><apiName>creationComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:CREATION_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:CURSOR_UPDATE_cursorUpdate"><apiName>cursorUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:CURSOR_UPDATE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:DATA_CHANGE_dataChange"><apiName>dataChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:DATA_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:ENTER_enter"><apiName>enter</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:ENTER</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:ENTER_FRAME_flexEventEnterFrame"><apiName>flexEventEnterFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:ENTER_FRAME</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:ENTER_STATE_enterState"><apiName>enterState</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:ENTER_STATE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:EXIT_STATE_exitState"><apiName>exitState</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:EXIT_STATE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:FLEX_WINDOW_ACTIVATE_flexWindowActivate"><apiName>flexWindowActivate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:FLEX_WINDOW_ACTIVATE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:FLEX_WINDOW_DEACTIVATE_flexWindowDeactivate"><apiName>flexWindowDeactivate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:FLEX_WINDOW_DEACTIVATE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:HIDE_hide"><apiName>hide</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:HIDE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:IDLE_idle"><apiName>idle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:IDLE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:INITIALIZE_initialize"><apiName>initialize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:INITIALIZE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:INIT_COMPLETE_initComplete"><apiName>initComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:INIT_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="mx.preloaders.xml#DownloadProgressBar"><linktext>mx.preloaders.DownloadProgressBar</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:INIT_PROGRESS_initProgress"><apiName>initProgress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:INIT_PROGRESS</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="mx.preloaders.xml#DownloadProgressBar"><linktext>mx.preloaders.DownloadProgressBar</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:INVALID_invalid"><apiName>invalid</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:INVALID</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:LOADING_loading"><apiName>loading</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:LOADING</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="mx.modules.xml#ModuleLoader"><linktext>mx.modules.ModuleLoader</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:MUTED_CHANGE_mutedChange"><apiName>mutedChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:MUTED_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:PREINITIALIZE_preinitialize"><apiName>preinitialize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:PREINITIALIZE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:REMOVE_remove"><apiName>remove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:REMOVE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:RENDER_flexEventRender"><apiName>flexEventRender</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:RENDER</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:REPEAT_repeat"><apiName>repeat</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:REPEAT</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:REPEAT_END_repeatEnd"><apiName>repeatEnd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:REPEAT_END</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:REPEAT_START_repeatStart"><apiName>repeatStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:REPEAT_START</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:SELECTION_CHANGE_deferredContentCreate"><apiName>deferredContentCreate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:SELECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:SHOW_show"><apiName>show</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:SHOW</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:TRANSFORM_CHANGE_transformChange"><apiName>transformChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:TRANSFORM_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:UPDATE_COMPLETE_updateComplete"><apiName>updateComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:UPDATE_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:URL_CHANGED_urlChanged"><apiName>urlChanged</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:URL_CHANGED</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="mx.modules.xml#ModuleLoader"><linktext>mx.modules.ModuleLoader</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:VALID_valid"><apiName>valid</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:VALID</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexEvent:VALUE_COMMIT_valueCommit"><apiName>valueCommit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexEvent:VALUE_COMMIT</apiEventType><adobeApiEventClassifier>mx.events:FlexEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:FlexEvent:FlexEvent"><apiName>FlexEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:FlexEvent:ADD"><apiName>ADD</apiName><shortdesc>
      FlexEvent.ADD 常量可为 add 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>add</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.ADD</codeph> 常量可为 <codeph>add</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:ADD_FOCUS_MANAGER"><apiName>ADD_FOCUS_MANAGER</apiName><shortdesc>
      FlexEvent.ADD_FOCUS_MANAGER 常量可为 addFocusManager 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addFocusManager</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.ADD_FOCUS_MANAGER</codeph> 常量可为 <codeph>addFocusManager</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。此事件是在指定 focusManager 之后从 IFocusManagerContainer 分派的。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:APPLICATION_COMPLETE"><apiName>APPLICATION_COMPLETE</apiName><shortdesc>
      FlexEvent.APPLICATION_COMPLETE 常量可为 applicationComplete 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>applicationComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.APPLICATION_COMPLETE</codeph> 常量可为 <codeph>applicationComplete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:BUTTON_DOWN"><apiName>BUTTON_DOWN</apiName><shortdesc>
      FlexEvent.BUTTON_DOWN 常量可为 buttonDown 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>buttonDown</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.BUTTON_DOWN</codeph> 常量可为 <codeph>buttonDown</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:CHANGING"><apiName>CHANGING</apiName><shortdesc>
      FlexEvent.CHANGING 常量为 changing 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>changing</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.CHANGING</codeph> 常量为 <codeph>changing</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:CONTENT_CREATION_COMPLETE"><apiName>CONTENT_CREATION_COMPLETE</apiName><shortdesc>
      FlexEvent.CONTENT_CREATION_COMPLETE 常量可为 contentCreationComplete 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>contentCreationComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.CONTENT_CREATION_COMPLETE</codeph> 常量可为 <codeph>contentCreationComplete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:CREATION_COMPLETE"><apiName>CREATION_COMPLETE</apiName><shortdesc>
      FlexEvent.CREATION_COMPLETE 常量可为 creationComplete 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>creationComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.CREATION_COMPLETE</codeph> 常量可为 <codeph>creationComplete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:CURSOR_UPDATE"><apiName>CURSOR_UPDATE</apiName><shortdesc>
      FlexEvent.CURSOR_UPDATE 常量可为 cursorUpdate 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cursorUpdate</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.CURSOR_UPDATE</codeph> 常量可为 <codeph>cursorUpdate</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:DATA_CHANGE"><apiName>DATA_CHANGE</apiName><shortdesc>
      FlexEvent.DATA_CHANGE 常量可为 dataChange 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dataChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.DATA_CHANGE</codeph> 常量可为 <codeph>dataChange</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:ENTER"><apiName>ENTER</apiName><shortdesc>
      FlexEvent.ENTER 常量可为 enter 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>enter</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.ENTER</codeph> 常量可为 <codeph>enter</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:ENTER_FRAME"><apiName>ENTER_FRAME</apiName><shortdesc>
      FlexEvent.ENTER_FRAME 常量为 Event.ENTER_FRAMER 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flexEventEnterFrame</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.ENTER_FRAME</codeph> 常量为 <codeph>Event.ENTER_FRAMER</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。在 <codeph>SystemManager</codeph> 上添加 ENTER_FRAME 的侦听器，就会在 <codeph>stage</codeph>（如果允许访问）上或 <codeph>SystemManager</codeph>（如果不允许访问 <codeph>stage</codeph>）上添加 Event.ENTER_FRAME 事件的侦听器。侦听器应该会收到 Event.ENTER_FRAME 事件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:ENTER_STATE"><apiName>ENTER_STATE</apiName><shortdesc>
      FlexEvent.ENTER_STATE 常量可为 enterState 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>enterState</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.ENTER_STATE</codeph> 常量可为 <codeph>enterState</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:EXIT_STATE"><apiName>EXIT_STATE</apiName><shortdesc>
      FlexEvent.EXIT_STATE 常量可为 exitState 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exitState</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.EXIT_STATE</codeph> 常量可为 <codeph>exitState</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:FLEX_WINDOW_ACTIVATE"><apiName>FLEX_WINDOW_ACTIVATE</apiName><shortdesc>
      FlexEvent.FLEX_WINDOW_ACTIVATE 常量可为 flexWindowActivate 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flexWindowActivate</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.FLEX_WINDOW_ACTIVATE</codeph> 常量可为 <codeph>flexWindowActivate</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。与 flash.events.AIREvent.WINDOW_ACTIVATE 相似，除了当激活 Flex 窗口或弹出窗口时会同时在 Flash 和 AIR 中分派它之外。此事件是从该容器中管理焦点的 focusManager 分派的。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:FLEX_WINDOW_DEACTIVATE"><apiName>FLEX_WINDOW_DEACTIVATE</apiName><shortdesc>
      FlexEvent.FLEX_WINDOW_DEACTIVATE 常量可为 flexWindowDeactivate 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flexWindowDeactivate</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.FLEX_WINDOW_DEACTIVATE</codeph> 常量可为 <codeph>flexWindowDeactivate</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。与 flash.events.AIREvent.FLEX_WINDOW_DEACTIVATE 相似，除了当停用 Flex 窗口或弹出窗口时会同时在 Flash 和 AIR 中分派它之外。此事件是从该容器中管理焦点的 focusManager 分派的。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:HIDE"><apiName>HIDE</apiName><shortdesc>
      FlexEvent.HIDE 常量可为 hide 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hide</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.HIDE</codeph> 常量可为 <codeph>hide</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:IDLE"><apiName>IDLE</apiName><shortdesc>
      FlexEvent.IDLE 常量可为 idle 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>idle</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.IDLE</codeph> 常量可为 <codeph>idle</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:INITIALIZE"><apiName>INITIALIZE</apiName><shortdesc>
      FlexEvent.INITIALIZE 常量可为 initialize 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>initialize</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.INITIALIZE</codeph> 常量可为 <codeph>initialize</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:INIT_COMPLETE"><apiName>INIT_COMPLETE</apiName><shortdesc>
      当 Flex 应用程序完成初始化时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>initComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>
      当 Flex 应用程序完成初始化时分派。您可以在创建自定义下载进度栏时使用此事件。
     
      <p>此事件始终由 Preloader 类分派一次，并且是 Preloader 分派的最后一个事件。当分派此事件时，事件侦听器应该分派 Event.COMPLETE 事件。</p>
     
      <p>在下载进度栏接收到 <codeph>init_complete</codeph> 事件之后，它必须分派 <codeph>complete</codeph> 事件。<codeph>complete</codeph> 事件通知 Preloader，下载进度栏已完成所有操作并可以取消。</p>
      
      <p>下载进度栏可以执行其它任务，如在接收到 <codeph>init_complete</codeph> 事件后、分派 <codeph>complete</codeph> 事件之前播放动画。分派 <codeph>complete</codeph> 事件应该是下载进度栏的最后一个操作。</p>
     
      <p>FlexEvent.INIT_COMPLETE 常量可为 <codeph>initComplete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。</p>
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.preloaders.xml#DownloadProgressBar"><linktext>mx.preloaders.DownloadProgressBar</linktext></link></related-links></apiValue><apiValue id="mx.events:FlexEvent:INIT_PROGRESS"><apiName>INIT_PROGRESS</apiName><shortdesc>
      当 Flex 应用程序完成初始化阶段（通过调用 measure()、commitProperties() 或者 updateDisplayList() 方法定义）时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>initProgress</apiData><apiType value="String"/></apiValueDef><apiDesc>
      当 Flex 应用程序完成初始化阶段（通过调用 <codeph>measure()</codeph>、<codeph>commitProperties()</codeph> 或者 <codeph>updateDisplayList()</codeph> 方法定义）时分派。此事件描述应用程序在初始化阶段的进度。您可以在创建自定义下载进度栏时使用此事件。
     
      <p>FlexEvent.INIT_PROGRESS 常量可为 <codeph>initProgress</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。</p>
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.preloaders.xml#DownloadProgressBar"><linktext>mx.preloaders.DownloadProgressBar</linktext></link></related-links></apiValue><apiValue id="mx.events:FlexEvent:INVALID"><apiName>INVALID</apiName><shortdesc>
      FlexEvent.INVALID 常量可为 invalid 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.INVALID</codeph> 常量可为 <codeph>invalid</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:LOADING"><apiName>LOADING</apiName><shortdesc>
      FlexEvent.LOADING 常量可为 loading 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loading</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.LOADING</codeph> 常量可为 <codeph>loading</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.modules.xml#ModuleLoader"><linktext>mx.modules.ModuleLoader</linktext></link></related-links></apiValue><apiValue id="mx.events:FlexEvent:MUTED_CHANGE"><apiName>MUTED_CHANGE</apiName><shortdesc>
      FlexEvent.MUTED_CHANGE 常量为 mutedChange 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mutedChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.MUTED_CHANGE</codeph> 常量为 <codeph>mutedChange</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:PREINITIALIZE"><apiName>PREINITIALIZE</apiName><shortdesc>
      FlexEvent.PREINITIALIZE 常量可为 preinitialize 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>preinitialize</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.PREINITIALIZE</codeph> 常量可为 <codeph>preinitialize</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:REMOVE"><apiName>REMOVE</apiName><shortdesc>
      FlexEvent.REMOVE 常量可为 remove 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>remove</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.REMOVE</codeph> 常量可为 <codeph>remove</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:RENDER"><apiName>RENDER</apiName><shortdesc>
      FlexEvent.RENDER 常量为 Event.RENDER 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>flexEventRender</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.RENDER</codeph> 常量为 <codeph>Event.RENDER</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。在 <codeph>SystemManager</codeph> 上添加侦听器，就会在 <codeph>stage</codeph> 上或 <codeph>SystemManager</codeph>（如果应用程序无权访问 <codeph>stage</codeph>）上添加 FlexEvent.RENDER 事件的侦听器。侦听器还将生成 Event.RENDER 事件。侦听器函数应该会收到 Event.RENDER 事件。
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:REPEAT"><apiName>REPEAT</apiName><shortdesc>
      FlexEvent.REPEAT 常量可为 repeat 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>repeat</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.REPEAT</codeph> 常量可为 <codeph>repeat</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:REPEAT_END"><apiName>REPEAT_END</apiName><shortdesc>
      FlexEvent.REPEAT_END 常量可为 repeatEnd 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>repeatEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.REPEAT_END</codeph> 常量可为 <codeph>repeatEnd</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:REPEAT_START"><apiName>REPEAT_START</apiName><shortdesc>
      FlexEvent.REPEAT_START 常量可为 repeatStart 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>repeatStart</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.REPEAT_START</codeph> 常量可为 <codeph>repeatStart</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:SELECTION_CHANGE"><apiName>SELECTION_CHANGE</apiName><shortdesc>
      FlexEvent.SELECTION_CHANGE 常量可为 selectionChange 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectionChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.SELECTION_CHANGE</codeph> 常量可为 <codeph>selectionChange</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:SHOW"><apiName>SHOW</apiName><shortdesc>
      FlexEvent.SHOW 常量可为 show 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>show</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.SHOW</codeph> 常量可为 <codeph>show</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:TRANSFORM_CHANGE"><apiName>TRANSFORM_CHANGE</apiName><shortdesc>
      FlexEvent.TRANSFORM_CHANGE 常量可为 transformChange 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>transformChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.TRANSFORM_CHANGE</codeph> 常量可为 <codeph>transformChange</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:UPDATE_COMPLETE"><apiName>UPDATE_COMPLETE</apiName><shortdesc>
      FlexEvent.UPDATE_COMPLETE 常量可为 updateComplete 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>updateComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.UPDATE_COMPLETE</codeph> 常量可为 <codeph>updateComplete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:URL_CHANGED"><apiName>URL_CHANGED</apiName><shortdesc>
      FlexEvent.URL_CHANGED 常量可为 urlChanged 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>urlChanged</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.URL_CHANGED</codeph> 常量可为 <codeph>urlChanged</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.modules.xml#ModuleLoader"><linktext>mx.modules.ModuleLoader</linktext></link></related-links></apiValue><apiValue id="mx.events:FlexEvent:VALID"><apiName>VALID</apiName><shortdesc>
      FlexEvent.VALID 常量可为 valid 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>valid</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.VALID</codeph> 常量可为 <codeph>valid</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexEvent:VALUE_COMMIT"><apiName>VALUE_COMMIT</apiName><shortdesc>
      FlexEvent.VALUE_COMMIT 常量可为 valueCommit 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>valueCommit</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>FlexEvent.VALUE_COMMIT</codeph> 常量可为 <codeph>valueCommit</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:InterDragManagerEvent"><apiName>InterDragManagerEvent</apiName><shortdesc> 
  在位于不同但受信任的多个 ApplicationDomain 中的 DragManager 之间发送的事件，用于处理 DragEvent 向拖动目标的分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.events:DragEvent</apiBaseClassifier></apiClassifierDef><apiDesc> 
  在位于不同但受信任的多个 ApplicationDomain 中的 DragManager 之间发送的事件，用于处理 DragEvent 向拖动目标的分派。一个 DragManager 具有一个随鼠标移动并寻找 dropTarget 变化的 DragProxy。它无法直接向另一个 ApplicationDomain 中的潜在目标分派 DragEvent，因为该 ApplicationDomain 中的代码在类型方面无法与 DragEvent 匹配。DragManager 转而分派另一个 ApplicationDomain 的 DragManager 所侦听的 InterDragManagerEvent，封送 DragEvent 并将其分派到潜在的 dropTarget。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.events:InterDragManagerEvent:InterDragManagerEvent"><apiName>InterDragManagerEvent</apiName><shortdesc> 
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>事件发生点的相对于包含 Sprite 的水平坐标。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>事件发生点的相对于包含 Sprite 的垂直坐标。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiType value="flash.display:InteractiveObject"/><apiData>null</apiData><apiDesc>对与事件相关的显示列表对象的引用。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示是否已按下 <codeph>Ctrl</codeph> 键。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示是否已按下 <codeph>Alt</codeph> 键。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示是否已按下 <codeph>Shift</codeph> 键。	 
	  
	  </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示鼠标主按键是已按下 (true) 还是未按下 (false)。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>指示用户将鼠标滚轮每滚动一个单位应滚动多少行。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>dropTarget</apiItemName><apiType value="flash.display:DisplayObject"/><apiData>null</apiData><apiDesc>另一个应用程序域中的潜在拖动目标（因此它是 DisplayObject 而非某个其它类）。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>dragEventType</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>进行接收的 DragManager 在创建封送 DragEvent 时要使用的 DragEvent 的事件类型。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>dragInitiator</apiItemName><apiOperationClassifier>mx.core:IUIComponent</apiOperationClassifier><apiData>null</apiData><apiDesc>指定启动拖动的组件的 IUIComponent。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>dragSource</apiItemName><apiOperationClassifier>mx.core:DragSource</apiOperationClassifier><apiData>null</apiData><apiDesc>包含正在拖动的数据的 DragSource 对象。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>action</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>指定的放置操作，如 <codeph>DragManager.MOVE</codeph>。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>draggedItem</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>代表被拖动项目的对象。
	  
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc> 
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:InterDragManagerEvent:DISPATCH_DRAG_EVENT"><apiName>DISPATCH_DRAG_EVENT</apiName><shortdesc>
	 向另一个 ApplicationDomain 中的目标分派 DragEvent 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dispatchDragEvent</apiData><apiType value="String"/></apiValueDef><apiDesc>
	 向另一个 ApplicationDomain 中的目标分派 DragEvent 事件。进行接收的 DragManager 封送 DragEvent，并将其分派到 <codeph>dropTarget</codeph> 属性中指定的目标。
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:InterDragManagerEvent:dragEventType"><apiName>dragEventType</apiName><shortdesc>
	  进行接收的 DragManager 在创建封送 DragEvent 时要使用的 DragEvent 的事件类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  进行接收的 DragManager 在创建封送 DragEvent 时要使用的 DragEvent 的事件类型。
	  
	  </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#DragEvent"><linktext>mx.events.DragEvent</linktext></link></related-links></apiValue><apiValue id="mx.events:InterDragManagerEvent:dropTarget"><apiName>dropTarget</apiName><shortdesc>
	  另一个 ApplicationDomain 中的潜在拖动目标（因此它是 DisplayObject 而非某个其它类）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
	  另一个 ApplicationDomain 中的潜在拖动目标（因此它是 DisplayObject 而非某个其它类）。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:CalendarLayoutChangeEvent"><apiName>CalendarLayoutChangeEvent</apiName><shortdesc>
  CalendarLayoutChangeEvent 类代表传递到 DateChooser 和 DateField 控件的 change 事件的事件侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  CalendarLayoutChangeEvent 类代表传递到 DateChooser 和 DateField 控件的 <codeph>change</codeph> 事件的事件侦听器的事件对象。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#DateChooser"><linktext>mx.controls.DateChooser</linktext></link><link href="mx.controls.xml#DateField"><linktext>mx.controls.DateField</linktext></link></related-links><adobeApiEvent id="mx.events:CalendarLayoutChangeEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:CalendarLayoutChangeEvent:CHANGE</apiEventType><adobeApiEventClassifier>mx.events:CalendarLayoutChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:CalendarLayoutChangeEvent:CalendarLayoutChangeEvent"><apiName>CalendarLayoutChangeEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示触发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newDate</apiItemName><apiType value="Date"/><apiData>null</apiData><apiDesc>在控件中选择的日期。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>triggerEvent</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>触发此 change 事件的事件；通常是 <codeph>change</codeph> 事件。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:CalendarLayoutChangeEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
	  CalendarLayoutChangeEvent.CHANGE 常量可为 change 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>CalendarLayoutChangeEvent.CHANGE</codeph> 常量可为 <codeph>change</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>newDate</codeph></entry><entry>在控件中选择的日期。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>触发此 change 事件的事件；通常是 <codeph>change</codeph> 事件。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CalendarLayoutChangeEvent:newDate"><apiName>newDate</apiName><shortdesc>
	  控件的所选日期。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Date"/></apiValueDef><apiDesc>
	  控件的所选日期。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CalendarLayoutChangeEvent:triggerEvent"><apiName>triggerEvent</apiName><shortdesc>
	  触发日期更改的事件；通常是 change 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
	  触发日期更改的事件；通常是 <codeph>change</codeph> 事件。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ItemClickEvent"><apiName>ItemClickEvent</apiName><shortdesc>
  代表单击导航器栏（如 ButtonBar、LinkBar 或 TabBar 控件）上的导航项目时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  代表单击导航器栏（如 ButtonBar、LinkBar 或 TabBar 控件）上的导航项目时分派的事件。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#NavBar"><linktext>mx.controls.NavBar</linktext></link><link href="mx.controls.xml#Button"><linktext>mx.controls.Button</linktext></link><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link></related-links><adobeApiEvent id="mx.events:ItemClickEvent:ITEM_CLICK_itemClick"><apiName>itemClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ItemClickEvent:ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events:ItemClickEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:ItemClickEvent:ItemClickEvent"><apiName>ItemClickEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>label</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>关联的导航项目的标签。 
	 
	  </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>关联的导航项目的索引。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiType value="flash.display:InteractiveObject"/><apiData>null</apiData><apiDesc>生成事件的子对象。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>关联的导航项目的数据提供程序中的项目。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:ItemClickEvent:ITEM_CLICK"><apiName>ITEM_CLICK</apiName><shortdesc>
	  ItemClickEvent.ITEM_CLICK 常量可为 itemClick 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemClick</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ItemClickEvent.ITEM_CLICK</codeph> 常量可为 <codeph>itemClick</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>index</codeph></entry><entry>单击的导航项目的索引。</entry></row><row><entry><codeph>item</codeph></entry><entry>单击的导航项目在数据提供程序中的项目。</entry></row><row><entry><codeph>label</codeph></entry><entry>单击的导航项目的标签。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>生成事件的子对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ItemClickEvent:index"><apiName>index</apiName><shortdesc>
	  关联的导航项目的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	  关联的导航项目的索引。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ItemClickEvent:item"><apiName>item</apiName><shortdesc>
	  关联的导航项目的数据提供程序中的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  关联的导航项目的数据提供程序中的项目。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ItemClickEvent:label"><apiName>label</apiName><shortdesc>
	  关联的导航项目的标签。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  关联的导航项目的标签。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ItemClickEvent:relatedObject"><apiName>relatedObject</apiName><shortdesc>
	  生成事件的子对象；例如，用户在 ButtonBar 控件中单击的按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.display:InteractiveObject"/></apiValueDef><apiDesc>
	  生成事件的子对象；例如，用户在 ButtonBar 控件中单击的按钮。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:MetadataEvent"><apiName>MetadataEvent</apiName><shortdesc>
  MetadataEvent 类可定义元数据和提示点事件的事件类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  MetadataEvent 类可定义元数据和提示点事件的事件类型。这些事件主要由 VideoDisplay 控件使用。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#VideoDisplay"><linktext>mx.controls.VideoDisplay</linktext></link></related-links><adobeApiEvent id="mx.events:MetadataEvent:ACTION_SCRIPT_actionscript"><apiName>actionscript</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:MetadataEvent:ACTION_SCRIPT</apiEventType><adobeApiEventClassifier>mx.events:MetadataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:MetadataEvent:CUE_POINT_cuePoint"><apiName>cuePoint</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:MetadataEvent:CUE_POINT</apiEventType><adobeApiEventClassifier>mx.events:MetadataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:MetadataEvent:METADATA_RECEIVED_metadataReceived"><apiName>metadataReceived</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:MetadataEvent:METADATA_RECEIVED</apiEventType><adobeApiEventClassifier>mx.events:MetadataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:MetadataEvent:MetadataEvent"><apiName>MetadataEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>对于非 <codeph>ACTION_SCRIPT</codeph> 和 <codeph>CUE_POINT</codeph> 类型的事件，<codeph>VideoDisplay.cuePoint</codeph> Array 中的提示点的索引。对于非 <codeph>METADATA_RECEIVED</codeph> 类型的事件，描述 FLV 文件（包括所有的提示点）的对象，它包含的信息与 <codeph>VideoDisplay.metadata</codeph> 属性包含的信息相同。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:MetadataEvent:ACTION_SCRIPT"><apiName>ACTION_SCRIPT</apiName><shortdesc>
      MetadataEvent.ACTION_SCRIPT 常量可为 actionscript 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>actionscript</apiData><apiType value="String"/></apiValueDef><apiDesc>
      MetadataEvent.ACTION_SCRIPT 常量可为 <codeph>actionscript</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。在运行时使用 ActionScript 不会将这些提示点嵌入到 FLV 文件中，但可以对其进行定义。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>info</codeph></entry><entry>VideoDisplay.cuePoint Array 中的提示点的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MetadataEvent:CUE_POINT"><apiName>CUE_POINT</apiName><shortdesc>
      MetadataEvent.CUE_POINT 常量可为 cuePoint 事件定义 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cuePoint</apiData><apiType value="String"/></apiValueDef><apiDesc>
      MetadataEvent.CUE_POINT 常量可为 <codeph>cuePoint</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>info</codeph></entry><entry>VideoDisplay.cuePoint Array 中的提示点的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MetadataEvent:METADATA_RECEIVED"><apiName>METADATA_RECEIVED</apiName><shortdesc>
     MetadataEvent.METADATA_RECEIVED 常量可为 metadataReceived 事件定义 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>metadataReceived</apiData><apiType value="String"/></apiValueDef><apiDesc>
     MetadataEvent.METADATA_RECEIVED 常量可为 <codeph>metadataReceived</codeph> 事件定义 <codeph>type</codeph> 属性的值。
     
     <p>此事件具有以下属性：</p>
     <adobetable class="innertable">
         
         
         
         
         
         
             
     <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>；没有要取消的默认行为。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>info</codeph></entry><entry>描述 FLV 文件（包括所有提示点）的对象。此属性包含的信息与 <codeph>VideoDisplay.metadata</codeph> 属性包含的信息相同。有关详细信息，请参阅 <codeph>VideoDisplay.metadata</codeph> 属性。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>vp</codeph></entry><entry>VideoPlayer 对象的索引。</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MetadataEvent:info"><apiName>info</apiName><shortdesc>
      对于非 ACTION_SCRIPT 和 CUE_POINT 类型的事件，VideoDisplay.cuePoint Array 中的提示点的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      对于非 <codeph>ACTION_SCRIPT</codeph> 和 <codeph>CUE_POINT</codeph> 类型的事件，<codeph>VideoDisplay.cuePoint</codeph> Array 中的提示点的索引。
     
      <p>对于非 <codeph>METADATA_RECEIVED</codeph> 类型的事件，描述 FLV 文件（包括所有的提示点）的对象，它包含的信息与 <codeph>VideoDisplay.metadata</codeph> 属性包含的信息相同。</p>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#VideoDisplay/metadata"><linktext>mx.controls.VideoDisplay.metadata</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.events:IndexChangedEvent"><apiName>IndexChangedEvent</apiName><shortdesc>
  IndexChangedEvent 类代表索引发生更改时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  IndexChangedEvent 类代表索引发生更改时分派的事件。此事件可以指示容器的子项的索引值已发生更改，显示的导航器容器（如 Accordion 或 ViewStack）的子项已发生更改，或者 DataGrid 控件中的列标题的顺序已发生更改。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#Container"><linktext>mx.core.Container</linktext></link></related-links><adobeApiEvent id="mx.events:IndexChangedEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:IndexChangedEvent:CHANGE</apiEventType><adobeApiEventClassifier>mx.events:IndexChangedEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:IndexChangedEvent:CHILD_INDEX_CHANGE_childIndexChange"><apiName>childIndexChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:IndexChangedEvent:CHILD_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:IndexChangedEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:IndexChangedEvent:HEADER_SHIFT_headerShift"><apiName>headerShift</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:IndexChangedEvent:HEADER_SHIFT</apiEventType><adobeApiEventClassifier>mx.events:IndexChangedEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:IndexChangedEvent:IndexChangedEvent"><apiName>IndexChangedEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiData>null</apiData><apiDesc>与索引更改相关联的子对象。
     
      </apiDesc></apiParam><apiParam><apiItemName>oldIndex</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>进行更改之前的从零开始的索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>newIndex</apiItemName><apiType value="Number"/><apiData>-1</apiData><apiDesc>进行更改之后的从零开始的索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>triggerEvent</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>触发此事件的事件。
      
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。通常由 Flex 控件调用且不用于应用程序代码。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:IndexChangedEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
      IndexChangedEvent.CHANGE 常量可为 change 事件定义事件对象的 type 属性的值，指示索引已更改，例如，当 Accordion 控件更改显示的面板或 ViewStack 更改视图时。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
      IndexChangedEvent.CHANGE 常量可为 <codeph>change</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示索引已更改，例如，当 Accordion 控件更改显示的面板或 ViewStack 更改视图时。 
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>inputType</codeph></entry><entry>指示此事件是否是由鼠标或键盘交互操作导致的。</entry></row><row><entry><codeph>newIndex</codeph></entry><entry>进行更改之后的从零开始的索引。</entry></row><row><entry><codeph>oldIndex</codeph></entry><entry>进行更改之前的从零开始的索引。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>包含对与新索引相对应的子对象的引用。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>TriggerEvent</codeph></entry><entry>触发此事件的事件。</entry></row><row><entry><codeph>类型</codeph></entry><entry>IndexChangedEvent.CHANGE</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:IndexChangedEvent:CHILD_INDEX_CHANGE"><apiName>CHILD_INDEX_CHANGE</apiName><shortdesc>
      IndexChangedEvent.CHILD_INDEX_CHANGE 常量可为 childIndexChange 事件定义事件对象的 type 属性的值，指示容器的子项中某个组件的索引已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>childIndexChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      IndexChangedEvent.CHILD_INDEX_CHANGE 常量可为 childIndexChange 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示容器的子项中某个组件的索引已更改。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>inputType</codeph></entry><entry>指示此事件是否是由鼠标或键盘交互操作导致的。</entry></row><row><entry><codeph>newIndex</codeph></entry><entry>更改后子项的从零开始的索引。</entry></row><row><entry><codeph>oldIndex</codeph></entry><entry>更改前子项的从零开始的索引。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>包含对其索引已更改的子对象的引用。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>TriggerEvent</codeph></entry><entry>null</entry></row><row><entry><codeph>类型</codeph></entry><entry>IndexChangedEvent.CHILD_INDEX_CHANGE</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:IndexChangedEvent:HEADER_SHIFT"><apiName>HEADER_SHIFT</apiName><shortdesc>
      IndexChangedEvent.HEADER_SHIFT 常量可为 headerShift 事件定义事件对象的 type 属性的值，指示标题已更改其索引，如，当用户将 DataGrid 列拖动到新的位置时即进行了更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>headerShift</apiData><apiType value="String"/></apiValueDef><apiDesc>
      IndexChangedEvent.HEADER_SHIFT 常量可为 <codeph>headerShift</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示标题已更改其索引，如，当用户将 DataGrid 列拖动到新的位置时即进行了更改。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>inputType</codeph></entry><entry>指示此事件是否是由鼠标或键盘交互操作导致的。</entry></row><row><entry><codeph>newIndex</codeph></entry><entry>更改后标题的从零开始的索引。</entry></row><row><entry><codeph>oldIndex</codeph></entry><entry>更改前标题的从零开始的索引。</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>null</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>TriggerEvent</codeph></entry><entry>触发此事件的事件。</entry></row><row><entry><codeph>类型</codeph></entry><entry>IndexChangedEvent.HEADER_SHIFT</entry></row></tbody></tgroup></adobetable>
       
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:IndexChangedEvent:newIndex"><apiName>newIndex</apiName><shortdesc>
      进行更改之后的从零开始的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      进行更改之后的从零开始的索引。对于 <codeph>change</codeph> 事件，它是当前子项的索引。对于 <codeph>childIndexChange</codeph> 事件，它是当前子项的新索引。对于 <codeph>headerShift</codeph> 事件，它是标题的新索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:IndexChangedEvent:oldIndex"><apiName>oldIndex</apiName><shortdesc>
      进行更改之前的从零开始的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      进行更改之前的从零开始的索引。对于 <codeph>change</codeph> 事件，它是上一子项的索引。对于 <codeph>childIndexChange</codeph> 事件，它是子项的上一个索引。对于 <codeph>headerShift</codeph> 事件，它是标题的上一个索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:IndexChangedEvent:relatedObject"><apiName>relatedObject</apiName><shortdesc>
      其索引已发生更改的子对象，或与新索引相关联的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
      其索引已发生更改的子对象，或与新索引相关联的对象。不为标题更改设置此属性。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:IndexChangedEvent:triggerEvent"><apiName>triggerEvent</apiName><shortdesc>
      触发此事件的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      触发此事件的事件。指示此事件是否是由鼠标或键盘交互操作导致的。当容器分派 <codeph>childIndexChanged</codeph> 事件时，值为 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:SWFBridgeEvent"><apiName>SWFBridgeEvent</apiName><shortdesc>
  这是在不同安全沙箱中的应用程序之间发送的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  这是在不同安全沙箱中的应用程序之间发送的事件。该事件让其它沙箱中的对象了解此沙箱中发生的情况。这些事件实际只是用于说明用途，这一点与 SWFBridgeRequest 不同，后者请求对象代表自身进行一些操作。
  
  <p/>
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.events:SWFBridgeEvent:SWFBridgeEvent"><apiName>SWFBridgeEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>默认情况下为 null 的对象，但可以包含有关事件的信息，具体取决于事件的类型。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.events:SWFBridgeEvent:marshal"><apiName>marshal</apiName><shortdesc>
      将 SWFBridgeRequest 从远程 ApplicationDomain 封送到当前 ApplicationDomain 中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>调用方的 ApplicationDomain 中创建的 SWFBridgeEvent。
      
      </apiDesc><apiOperationClassifier>mx.events:SWFBridgeEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>可能已在不同的 ApplicationDomain 中创建的 SWFBridgeRequest。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将 SWFBridgeRequest 从远程 ApplicationDomain 封送到当前 ApplicationDomain 中。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.events:SWFBridgeEvent:BRIDGE_AIR_WINDOW_ACTIVATE"><apiName>BRIDGE_AIR_WINDOW_ACTIVATE</apiName><shortdesc>
	 向父桥或沙箱根分派，用于向其通知已激活了 AIR 窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bridgeAIRWindowActivate</apiData><apiType value="String"/></apiValueDef><apiDesc>
	 向父桥或沙箱根分派，用于向其通知已激活了 AIR 窗口。
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeEvent:BRIDGE_AIR_WINDOW_DEACTIVATE"><apiName>BRIDGE_AIR_WINDOW_DEACTIVATE</apiName><shortdesc>
	 向父桥或沙箱根分派，用于向其通知已停用了 AIR 窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bridgeAIRWindowDeactivate</apiData><apiType value="String"/></apiValueDef><apiDesc>
	 向父桥或沙箱根分派，用于向其通知已停用了 AIR 窗口。
	 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeEvent:BRIDGE_APPLICATION_ACTIVATE"><apiName>BRIDGE_APPLICATION_ACTIVATE</apiName><shortdesc>
	 向父桥或沙箱根分派，用于向其通知已激活了另一个应用程序。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bridgeApplicationActivate</apiData><apiType value="String"/></apiValueDef><apiDesc>
	 向父桥或沙箱根分派，用于向其通知已激活了另一个应用程序。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeEvent:BRIDGE_APPLICATION_UNLOADING"><apiName>BRIDGE_APPLICATION_UNLOADING</apiName><shortdesc>
      通过桥发送到子应用程序的 SystemManager，用于向其通知即将卸载 SWF。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bridgeApplicationUnloading</apiData><apiType value="String"/></apiValueDef><apiDesc>
      通过桥发送到子应用程序的 SystemManager，用于向其通知即将卸载 SWF。SystemManager 封送并重新分派事件，以使应用程序代码可以删除会阻止 SWF 文件卸载的引用。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeEvent:BRIDGE_FOCUS_MANAGER_ACTIVATE"><apiName>BRIDGE_FOCUS_MANAGER_ACTIVATE</apiName><shortdesc>
	  通过桥向所有其它 FocusManager 分派，用于向其通知另一个 FocusManager 现在处于活动状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bridgeFocusManagerActivate</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  通过桥向所有其它 FocusManager 分派，用于向其通知另一个 FocusManager 现在处于活动状态。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeEvent:BRIDGE_NEW_APPLICATION"><apiName>BRIDGE_NEW_APPLICATION</apiName><shortdesc>
	  通过父桥向其 SWFLoader 分派，用于向其通知已初始化了一个新的 SystemManager。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bridgeNewApplication</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  通过父桥向其 SWFLoader 分派，用于向其通知已初始化了一个新的 SystemManager。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeEvent:BRIDGE_WINDOW_ACTIVATE"><apiName>BRIDGE_WINDOW_ACTIVATE</apiName><shortdesc>
	 向父桥或沙箱根分派，用于向其通知已激活了一个窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bridgeWindowActivate</apiData><apiType value="String"/></apiValueDef><apiDesc>
	 向父桥或沙箱根分派，用于向其通知已激活了一个窗口。对于兼容的应用程序，<codeph>data</codeph> 属性是具有 <codeph>window</codeph> 和 <codeph>notifier</codeph> 这两个属性的对象。<codeph>data.window</codeph> 属性是已激活的 SystemManager 代理。对于不受信任的应用程序，<codeph>data.window</codeph> 属性是窗口的字符串 ID。<codeph>data.notifier</codeph> 属性是分派事件的应用程序的桥。可能不通过桥而向沙箱根直接分派事件，因此 <codeph>event.target</codeph> 可能不是分派事件的应用程序的桥。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeEvent:BRIDGE_WINDOW_DEACTIVATE"><apiName>BRIDGE_WINDOW_DEACTIVATE</apiName><shortdesc>
	 向父桥或沙箱根分派，用于向其通知已激活了一个代理 SystemManager。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>brdigeWindowDeactivate</apiData><apiType value="String"/></apiValueDef><apiDesc>
	 向父桥或沙箱根分派，用于向其通知已激活了一个代理 SystemManager。对于兼容的应用程序，<codeph>data</codeph> 属性是具有 <codeph>window</codeph> 和 <codeph>notifier</codeph> 这两个属性的对象。<codeph>data.window</codeph> 属性是已激活的 SystemManager 代理。对于不受信任的应用程序，<codeph>data.window</codeph> 属性是窗口的字符串 ID。<codeph>data.notifier</codeph> 属性是分派事件的应用程序的桥。可能不通过桥而向沙箱根直接分派事件，因此 <codeph>event.target</codeph> 可能不是分派事件的应用程序的桥。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeEvent:data"><apiName>data</apiName><shortdesc>
	  有关事件的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  有关事件的信息。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:FocusRequestDirection"><apiName>FocusRequestDirection</apiName><shortdesc>
  FocusDirection 类定义可以向其移动焦点的方向的常量值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  FocusDirection 类定义可以向其移动焦点的方向的常量值。这些值与 SWFBridgeRequest.MOVE_FOCUS_REQUEST 请求以及 FocusManager <codeph>moveFocus()</codeph> 方法配合使用。
  
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#SWFBridgeRequest"><linktext>SWFBridgeRequest</linktext></link></related-links><apiValue id="mx.events:FocusRequestDirection:BACKWARD"><apiName>BACKWARD</apiName><shortdesc>
      将焦点向后移至选项卡循环中的上一个控件，如同按下了 SHIFT+TAB 键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>backward</apiData><apiType value="String"/></apiValueDef><apiDesc>
      将焦点向后移至选项卡循环中的上一个控件，如同按下了 SHIFT+TAB 键。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FocusRequestDirection:BOTTOM"><apiName>BOTTOM</apiName><shortdesc>
      将焦点移至选项卡循环中的底部/最后一个控件，如同没有对象在选项卡循环中具有焦点时按下了 SHIFT+TAB 键
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
      将焦点移至选项卡循环中的底部/最后一个控件，如同没有对象在选项卡循环中具有焦点时按下了 SHIFT+TAB 键
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FocusRequestDirection:FORWARD"><apiName>FORWARD</apiName><shortdesc>
      将焦点向前移至选项卡循环中的下一个控件，如同按下了 TAB 键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>forward</apiData><apiType value="String"/></apiValueDef><apiDesc>
      将焦点向前移至选项卡循环中的下一个控件，如同按下了 TAB 键。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FocusRequestDirection:TOP"><apiName>TOP</apiName><shortdesc>
      将焦点移至选项卡循环中的顶部/第一个控件，如同没有对象在选项卡循环中具有焦点时按下了 TAB 键
      
      </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>top</apiData><apiType value="String"/></apiValueDef><apiDesc>
      将焦点移至选项卡循环中的顶部/第一个控件，如同没有对象在选项卡循环中具有焦点时按下了 TAB 键
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ResourceEvent"><apiName>ResourceEvent</apiName><shortdesc>
  ResourceEvent 类代表 ResourceManager 通过调用 loadResourceModule() 方法加载资源模块中的资源包时分派的 Event 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ProgressEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ResourceEvent 类代表 ResourceManager 通过调用 <codeph>loadResourceModule()</codeph> 方法加载资源模块中的资源包时分派的 Event 对象。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.resources.xml#ResourceManager"><linktext>mx.resources.ResourceManager</linktext></link></related-links><adobeApiEvent id="mx.events:ResourceEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ResourceEvent:COMPLETE</apiEventType><adobeApiEventClassifier>mx.events:ResourceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ResourceEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ResourceEvent:ERROR</apiEventType><adobeApiEventClassifier>mx.events:ResourceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ResourceEvent:PROGRESS_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ResourceEvent:PROGRESS</apiEventType><adobeApiEventClassifier>mx.events:ResourceEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:ResourceEvent:ResourceEvent"><apiName>ResourceEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件对象的 <codeph>type</codeph> 属性的值。可能的值包括：
      <ul>
         <li><codeph>"progress"</codeph> (<codeph>ResourceEvent.PROGRESS</codeph>)</li>
         <li><codeph>"complete"</codeph> (<codeph>ResourceEvent.COMPLETE</codeph>)</li>
         <li><codeph>"error"</codeph> (<codeph>ResourceEvent.ERROR</codeph>)</li>
      </ul>
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。
     
      </apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>在侦听器处理事件时加载的字节数。
     
      </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>如果加载进程成功，最终将加载的字节总数。
     
      </apiDesc></apiParam><apiParam><apiItemName>errorText</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc><codeph>type</codeph> 为 <codeph>ResourceEvent.ERROR</codeph> 时显示的错误的错误消息。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:ResourceEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
      资源模块 SWF 文件完成加载时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiType value="String"/></apiValueDef><apiDesc>
      资源模块 SWF 文件完成加载时分派。ResourceEvent.COMPLETE 常量可为 <codeph>complete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的对象。例如，如果使用 <codeph>myButton.addEventListener()</codeph> 注册事件侦听器，则 <codeph>myButton</codeph> 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry><entry>空</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的对象；它不一定是侦听该事件的对象。使用 <codeph>currentTarget</codeph> 属性可始终访问侦听此事件的对象。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ResourceEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
      加载资源模块 SWF 文件出错时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc>
      加载资源模块 SWF 文件出错时分派。ResourceEvent.ERROR 常量可为 <codeph>error</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>空</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>空</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的对象。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 方法注册事件侦听器，则 <codeph>myButton</codeph> 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry>错误消息。<entry/></row><row><entry><codeph>target</codeph></entry><entry>分派事件的对象；它不一定是侦听此事件的对象。使用 <codeph>currentTarget</codeph> 属性可始终访问侦听此事件的对象。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ResourceEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
      加载资源模块 SWF 文件时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiType value="String"/></apiValueDef><apiDesc>
      加载资源模块 SWF 文件时分派。ResourceEvent.PROGRESS 常量可为 <codeph>progress</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>加载的字节数。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>要加载的字节总数。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的对象。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 方法注册事件侦听器，则 <codeph>myButton</codeph> 为 <codeph>currentTarget</codeph> 的值。</entry></row><row><entry><codeph>errorText</codeph></entry>空<entry/></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的对象；它不一定是侦听该事件的对象。使用 <codeph>currentTarget</codeph> 属性可以始终访问侦听该事件的对象。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ResourceEvent:errorText"><apiName>errorText</apiName><shortdesc>
      type 为 ERROR 时的错误消息；在其它情况下为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>type</codeph> 为 <codeph>ERROR</codeph> 时的错误消息；在其它情况下为 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:VideoEvent"><apiName>VideoEvent</apiName><shortdesc>
  VideoEvent 类代表传递给由 VideoDisplay 控件分派的事件的事件侦听器的事件对象，并定义了 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  VideoEvent 类代表传递给由 VideoDisplay 控件分派的事件的事件侦听器的事件对象，并定义了 <codeph>VideoDisplay.state</codeph> 属性的值。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#VideoDisplay"><linktext>mx.controls.VideoDisplay</linktext></link></related-links><adobeApiEvent id="mx.events:VideoEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:VideoEvent:CLOSE</apiEventType><adobeApiEventClassifier>mx.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:VideoEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:VideoEvent:COMPLETE</apiEventType><adobeApiEventClassifier>mx.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:VideoEvent:PLAYHEAD_UPDATE_playheadUpdate"><apiName>playheadUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:VideoEvent:PLAYHEAD_UPDATE</apiEventType><adobeApiEventClassifier>mx.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:VideoEvent:READY_ready"><apiName>ready</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:VideoEvent:READY</apiEventType><adobeApiEventClassifier>mx.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:VideoEvent:REWIND_rewind"><apiName>rewind</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:VideoEvent:REWIND</apiEventType><adobeApiEventClassifier>mx.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:VideoEvent:STATE_CHANGE_stateChange"><apiName>stateChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:VideoEvent:STATE_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:VideoEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:VideoEvent:VideoEvent"><apiName>VideoEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>state</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>事件发生时 <codeph>VideoDisplay.state</codeph> 属性的值。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>playheadTime</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>事件发生时播放头的位置。 	
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:VideoEvent:BUFFERING"><apiName>BUFFERING</apiName><shortdesc>
      调用 play() 或 load() 方法后 VideoDisplay.state 属性立即采用的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>buffering</apiData><apiType value="String"/></apiValueDef><apiDesc>
      调用 <codeph>play()</codeph> 或 <codeph>load()</codeph> 方法后 <codeph>VideoDisplay.state</codeph> 属性立即采用的值。
     
      <p>这是可响应状态。在可响应状态，对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用将立即执行。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
	  VideoEvent.CLOSE 常量可为 close 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>VideoEvent.CLOSE</codeph> 常量可为 <codeph>close</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>state</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.state</codeph> 属性的值。</entry></row><row><entry><codeph>stateResponsive</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.stateResponsive</codeph> 属性的值。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
	  VideoEvent.COMPLETE 常量可为 complete 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>VideoEvent.COMPLETE</codeph> 常量可为 <codeph>complete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>state</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.state</codeph> 属性的值。</entry></row><row><entry><codeph>stateResponsive</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.stateResponsive</codeph> 属性的值。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:CONNECTION_ERROR"><apiName>CONNECTION_ERROR</apiName><shortdesc>
      VideoDisplay 控件无法加载视频流时 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>connectionError</apiData><apiType value="String"/></apiValueDef><apiDesc>
      VideoDisplay 控件无法加载视频流时 <codeph>VideoDisplay.state</codeph> 属性的值。无法连接服务器、找不到视频流或存在其它原因时，会出现这种状态。
     
      <p>这是不可响应状态。如果控件为不可响应，将对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用进行排序，然后当控件更改为可响应状态时执行这些方法。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:DISCONNECTED"><apiName>DISCONNECTED</apiName><shortdesc>
      视频流超时或空闲时 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>disconnected</apiData><apiType value="String"/></apiValueDef><apiDesc>
      视频流超时或空闲时 <codeph>VideoDisplay.state</codeph> 属性的值。
     
      <p>这是可响应状态。在可响应状态，对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用将立即执行。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:EXEC_QUEUED_CMD"><apiName>EXEC_QUEUED_CMD</apiName><shortdesc>
      执行排队的命令时 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>execQueuedCmd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      执行队列中的命令时 <codeph>VideoDisplay.state</codeph> 属性的值。永远不会为此状态分派 <codeph>stateChange</codeph> 事件；该事件仅限内部使用。
     
      <p>这是不可响应状态。如果控件为不可响应，将对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用进行排序，然后当控件更改为可响应状态时执行这些方法。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:LOADING"><apiName>LOADING</apiName><shortdesc>
      调用 play() 或 load() 方法后 VideoDisplay.state 属性立即采用的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>loading</apiData><apiType value="String"/></apiValueDef><apiDesc>
      调用 <codeph>play()</codeph> 或 <codeph>load()</codeph> 方法后 <codeph>VideoDisplay.state</codeph> 属性立即采用的值。
     
      <p>这是不可响应状态。如果控件为不可响应，将对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用进行排序，然后当控件更改为可响应状态时执行这些方法。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:PAUSED"><apiName>PAUSED</apiName><shortdesc>
      FLV 文件已加载但暂停播放时 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>paused</apiData><apiType value="String"/></apiValueDef><apiDesc>
      FLV 文件已加载但暂停播放时 <codeph>VideoDisplay.state</codeph> 属性的值。调用 <codeph>pause()</codeph> 或 <codeph>load()</codeph> 方法时进入此状态。
     
      <p>这是可响应状态。在可响应状态，对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用将立即执行。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:PLAYHEAD_UPDATE"><apiName>PLAYHEAD_UPDATE</apiName><shortdesc>
	  VideoEvent.PLAYHEAD_UPDATE 常量可为 playheadUpdate 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>playheadUpdate</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>VideoEvent.PLAYHEAD_UPDATE</codeph> 常量可为 <codeph>playheadUpdate</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>state</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.state</codeph> 属性的值。</entry></row><row><entry><codeph>stateResponsive</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.stateResponsive</codeph> 属性的值。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:PLAYING"><apiName>PLAYING</apiName><shortdesc>
      FLV 文件已加载并且正在播放时 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>playing</apiData><apiType value="String"/></apiValueDef><apiDesc>
      FLV 文件已加载并且正在播放时 <codeph>VideoDisplay.state</codeph> 属性的值。调用 <codeph>play()</codeph> 方法时进入此状态。
     
      <p>这是可响应状态。在可响应状态，对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用将立即执行。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:READY"><apiName>READY</apiName><shortdesc>
	  VideoEvent.READY 常量可为 ready 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ready</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>VideoEvent.READY</codeph> 常量可为 <codeph>ready</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>state</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.state</codeph> 属性的值。</entry></row><row><entry><codeph>stateResponsive</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.stateResponsive</codeph> 属性的值。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:RESIZING"><apiName>RESIZING</apiName><shortdesc>
      调整 VideoDisplay 控件的大小时 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resizing</apiData><apiType value="String"/></apiValueDef><apiDesc>
      调整 VideoDisplay 控件的大小时 <codeph>VideoDisplay.state</codeph> 属性的值。
     
      <p>这是不可响应状态。如果控件为不可响应，将对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用进行排序，然后当控件更改为可响应状态时执行这些方法。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:REWIND"><apiName>REWIND</apiName><shortdesc>
	  VideoEvent.REWIND 常量可为 rewind 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rewind</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>VideoEvent.REWIND</codeph> 常量可为 <codeph>rewind</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>state</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.state</codeph> 属性的值。</entry></row><row><entry><codeph>stateResponsive</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.stateResponsive</codeph> 属性的值。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:REWINDING"><apiName>REWINDING</apiName><shortdesc>
      停止播放时触发自动后退期间 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rewinding</apiData><apiType value="String"/></apiValueDef><apiDesc>
      停止播放时触发自动后退期间 <codeph>VideoDisplay.state</codeph> 属性的值。后退完成后此状态更改为 <codeph>STOPPED</codeph>。
     
      <p>这是不可响应状态。如果控件为不可响应，将对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用进行排序，然后当控件更改为可响应状态时执行这些方法。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:SEEKING"><apiName>SEEKING</apiName><shortdesc>
      由于设置 VideoDisplay.playHeadTime 属性而进行搜索时 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>seeking</apiData><apiType value="String"/></apiValueDef><apiDesc>
      由于设置 <codeph>VideoDisplay.playHeadTime</codeph> 属性而进行搜索时 <codeph>VideoDisplay.state</codeph> 属性的值。
     
      <p>这是不可响应状态。如果控件为不可响应，将对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用进行排序，然后当控件更改为可响应状态时执行这些方法。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:STATE_CHANGE"><apiName>STATE_CHANGE</apiName><shortdesc>
	  VideoEvent.STATE_CHANGE 常量可为 stateChange 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stateChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>VideoEvent.STATE_CHANGE</codeph> 常量可为 <codeph>stateChange</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>playheadTime</codeph></entry><entry>事件发生时播放头的位置。</entry></row><row><entry><codeph>state</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.state</codeph> 属性的值。</entry></row><row><entry><codeph>stateResponsive</codeph></entry><entry>事件发生时 <codeph>VideoDisplay.stateResponsive</codeph> 属性的值。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:STOPPED"><apiName>STOPPED</apiName><shortdesc>
      FLV 文件已加载但播放已停止时 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>stopped</apiData><apiType value="String"/></apiValueDef><apiDesc>
      FLV 文件已加载但播放已停止时 <codeph>VideoDisplay.state</codeph> 属性的值。当调用 <codeph>stop()</codeph> 方法或播放头到达视频流结尾时，进入此状态。
     
      <p>这是可响应状态。在可响应状态，对 <codeph>play()</codeph>、<codeph>load()</codeph>、<codeph>stop()</codeph> 和 <codeph>pause()</codeph> 方法的调用将立即执行。</p>
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:playheadTime"><apiName>playheadTime</apiName><shortdesc>
	  事件发生时 VideoDisplay 控件播放头的位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  事件发生时 VideoDisplay 控件播放头的位置。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:VideoEvent:state"><apiName>state</apiName><shortdesc>
	  事件发生时 VideoDisplay.state 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  事件发生时 <codeph>VideoDisplay.state</codeph> 属性的值。
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#VideoDisplay/state"><linktext>mx.controls.VideoDisplay.state</linktext></link></related-links></apiValue><apiValue id="mx.events:VideoEvent:stateResponsive:get"><apiName>stateResponsive</apiName><shortdesc>
	  事件发生时 VideoDisplay.stateResponsive 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  事件发生时 <codeph>VideoDisplay.stateResponsive</codeph> 属性的值。
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.controls.xml#VideoDisplay/stateResponsive"><linktext>mx.controls.VideoDisplay.stateResponsive</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.events:EffectEvent"><apiName>EffectEvent</apiName><shortdesc>
  代表特定于 Flex 效果的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  代表特定于 Flex 效果的事件对象。Flex 效果分派下列类型的事件：
  <ul>
    <li><codeph>effectStart</codeph></li>
    <li><codeph>effectStop</codeph></li>
    <li><codeph>effectRepeat</codeph></li>
    <li><codeph>effectEnd</codeph></li>
    <li><codeph>effectRepeat</codeph></li>
  </ul>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links><adobeApiEvent id="mx.events:EffectEvent:EFFECT_END_effectEnd"><apiName>effectEnd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:EffectEvent:EFFECT_END</apiEventType><adobeApiEventClassifier>mx.events:EffectEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.events:EffectEvent:EFFECT_REPEAT_effectRepeat"><apiName>effectRepeat</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:EffectEvent:EFFECT_REPEAT</apiEventType><adobeApiEventClassifier>mx.events:EffectEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.events:EffectEvent:EFFECT_START_effectStart"><apiName>effectStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:EffectEvent:EFFECT_START</apiEventType><adobeApiEventClassifier>mx.events:EffectEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.events:EffectEvent:EFFECT_STOP_effectStop"><apiName>effectStop</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:EffectEvent:EFFECT_STOP</apiEventType><adobeApiEventClassifier>mx.events:EffectEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.events:EffectEvent:EFFECT_UPDATE_effectUpdate"><apiName>effectUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:EffectEvent:EFFECT_UPDATE</apiEventType><adobeApiEventClassifier>mx.events:EffectEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links></adobeApiEvent><apiConstructor id="mx.events:EffectEvent:EffectEvent"><apiName>EffectEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>eventType</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>effectInstance</apiItemName><apiOperationClassifier>mx.effects:IEffectInstance</apiOperationClassifier><apiData>null</apiData><apiDesc>触发事件的效果实例。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:EffectEvent:EFFECT_END"><apiName>EFFECT_END</apiName><shortdesc>
      EffectEvent.EFFECT_END 常量可为 effectEnd 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>effectEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>EffectEvent.EFFECT_END</codeph> 常量可为 <codeph>effectEnd</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。 
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>effectInstance</codeph></entry><entry>事件的效果实例对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links></apiValue><apiValue id="mx.events:EffectEvent:EFFECT_REPEAT"><apiName>EFFECT_REPEAT</apiName><shortdesc>
      EffectEvent.EFFECT_REPEAT 常量可为 effectRepeat 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>effectRepeat</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>EffectEvent.EFFECT_REPEAT</codeph> 常量可为 <codeph>effectRepeat</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。 
      
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>effectInstance</codeph></entry><entry>事件的效果实例对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links></apiValue><apiValue id="mx.events:EffectEvent:EFFECT_START"><apiName>EFFECT_START</apiName><shortdesc>
      EffectEvent.EFFECT_START 常量可为 effectStart 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>effectStart</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>EffectEvent.EFFECT_START</codeph> 常量可为 <codeph>effectStart</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。 
      
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>effectInstance</codeph></entry><entry>事件的效果实例对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links></apiValue><apiValue id="mx.events:EffectEvent:EFFECT_STOP"><apiName>EFFECT_STOP</apiName><shortdesc>
      EffectEvent.EFFECT_STOP 常量可为 effectStop 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>effectStop</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>EffectEvent.EFFECT_STOP</codeph> 常量可为 <codeph>effectStop</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>effectInstance</codeph></entry><entry>事件的效果实例对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links></apiValue><apiValue id="mx.events:EffectEvent:EFFECT_UPDATE"><apiName>EFFECT_UPDATE</apiName><shortdesc>
      EffectEvent.EFFECT_UPDATE 常量可为 effectUpdate 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>effectUpdate</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>EffectEvent.EFFECT_UPDATE</codeph> 常量可为 <codeph>effectUpdate</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。 
      
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>effectInstance</codeph></entry><entry>事件的效果实例对象。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link></related-links></apiValue><apiValue id="mx.events:EffectEvent:effectInstance"><apiName>effectInstance</apiName><shortdesc>
	  事件的效果实例对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.effects:IEffectInstance</apiValueClassifier></apiValueDef><apiDesc>
	  事件的效果实例对象。您可以使用此属性从事件侦听器中访问效果实例对象的属性。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ValidationResultEvent"><apiName>ValidationResultEvent</apiName><shortdesc>
  ValidationResultEvent 类代表传递到 valid 验证程序事件或 invalid 验证程序事件的侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  ValidationResultEvent 类代表传递到 <codeph>valid</codeph> 验证程序事件或 <codeph>invalid</codeph> 验证程序事件的侦听器的事件对象。 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.validators.xml#Validator"><linktext>mx.validators.Validator</linktext></link><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link><link href="mx.validators.xml#RegExpValidationResult"><linktext>mx.validators.RegExpValidationResult</linktext></link></related-links><adobeApiEvent id="mx.events:ValidationResultEvent:INVALID_invalid"><apiName>invalid</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ValidationResultEvent:INVALID</apiEventType><adobeApiEventClassifier>mx.events:ValidationResultEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ValidationResultEvent:VALID_valid"><apiName>valid</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ValidationResultEvent:VALID</apiEventType><adobeApiEventClassifier>mx.events:ValidationResultEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:ValidationResultEvent:ValidationResultEvent"><apiName>ValidationResultEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>field</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>验证失败并触发事件的字段名称。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>results</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>ValidationResult 对象的数组，每个对象对应一个验证的字段。 
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:ValidationResultEvent:INVALID"><apiName>INVALID</apiName><shortdesc>
	  ValidationResultEvent.INVALID 常量可为 invalid 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ValidationResultEvent.INVALID</codeph> 常量可为 <codeph>invalid</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。该常量的值是“invalid”。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>field</codeph></entry><entry>验证失败的字段名称。</entry></row><row><entry><codeph>message</codeph></entry><entry>单个字符串，其中包含结果 Array 中所有 ValidationResult 对象的错误消息。</entry></row><row><entry><codeph>results</codeph></entry><entry>ValidationResult 对象的数组，每个对象对应一个验证的字段。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ValidationResultEvent:VALID"><apiName>VALID</apiName><shortdesc>
	  ValidationResultEvent.VALID 常量可为 valid 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>valid</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ValidationResultEvent.VALID</codeph> 常量可为 <codeph>valid</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。该常量的值是“valid”。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>field</codeph></entry><entry>一个空字 String。</entry></row><row><entry><codeph>message</codeph></entry><entry>一个空字 String。</entry></row><row><entry><codeph>results</codeph></entry><entry>一个空 Array。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ValidationResultEvent:field"><apiName>field</apiName><shortdesc>
	  验证失败并触发事件的字段名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  验证失败并触发事件的字段名称。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ValidationResultEvent:results"><apiName>results</apiName><shortdesc>
	  ValidationResult 对象的数组，每个对象对应一个验证的字段。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/></apiValueDef><apiDesc>
	  ValidationResult 对象的数组，每个对象对应一个验证的字段。 
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.validators.xml#ValidationResult"><linktext>mx.validators.ValidationResult</linktext></link></related-links></apiValue><apiValue id="mx.events:ValidationResultEvent:message:get"><apiName>message</apiName><shortdesc>
	  单个字符串，其中包含结果 Array 中所有 ValidationResult 对象的错误消息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="String"/></apiValueDef><apiDesc>
	  单个字符串，其中包含结果 Array 中所有 ValidationResult 对象的错误消息。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:NumericStepperEvent"><apiName>NumericStepperEvent</apiName><shortdesc>
  代表特定于 NumericStepper 控件的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  代表特定于 NumericStepper 控件的事件。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#NumericStepper"><linktext>mx.controls.NumericStepper</linktext></link></related-links><adobeApiEvent id="mx.events:NumericStepperEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:NumericStepperEvent:CHANGE</apiEventType><adobeApiEventClassifier>mx.events:NumericStepperEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:NumericStepperEvent:NumericStepperEvent"><apiName>NumericStepperEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>分派事件时，NumericStepper 控件的值。
         
          </apiDesc></apiParam><apiParam><apiItemName>triggerEvent</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>如果值根据用户操作发生变化，则包含一个指示输入操作的类型的值，即 <codeph>InteractionInputType.MOUSE</codeph> 或 <codeph>InteractionInputType.KEYBOARD</codeph>。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:NumericStepperEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
	  NumericStepperEvent.CHANGE 常量可为 change 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>NumericStepperEvent.CHANGE</codeph> 常量可为 <codeph>change</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>value</codeph></entry><entry>分派事件时，NumericStepper 控件的值。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:NumericStepperEvent:triggerEvent"><apiName>triggerEvent</apiName><shortdesc>
	  如果此值更改以响应用户操作，则此属性包含指示输入操作类型的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
	  如果此值更改以响应用户操作，则此属性包含指示输入操作类型的值。该值为 <codeph>InteractionInputType.MOUSE</codeph> 或 <codeph>InteractionInputType.KEYBOARD</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:NumericStepperEvent:value"><apiName>value</apiName><shortdesc>
	 分派事件时，NumericStepper 控件的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	 分派事件时，NumericStepper 控件的值。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:MenuEvent"><apiName>MenuEvent</apiName><shortdesc>
  MenuEvent 类代表与 Menu、MenuBar 和 PopUpMenuButton 等控件中的菜单活动相关联的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>mx.events:ListEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
  MenuEvent 类代表与 Menu、MenuBar 和 PopUpMenuButton 等控件中的菜单活动相关联的事件。 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#Menu"><linktext>mx.controls.Menu</linktext></link><link href="mx.controls.xml#MenuBar"><linktext>mx.controls.MenuBar</linktext></link><link href="mx.controls.xml#PopUpMenuButton"><linktext>mx.controls.PopUpMenuButton</linktext></link></related-links><adobeApiEvent id="mx.events:MenuEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:MenuEvent:CHANGE</apiEventType><adobeApiEventClassifier>mx.events:MenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:MenuEvent:ITEM_CLICK_itemClick"><apiName>itemClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:MenuEvent:ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events:MenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:MenuEvent:ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:MenuEvent:ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events:MenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:MenuEvent:ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:MenuEvent:ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events:MenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:MenuEvent:MENU_HIDE_menuHide"><apiName>menuHide</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:MenuEvent:MENU_HIDE</apiEventType><adobeApiEventClassifier>mx.events:MenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:MenuEvent:MENU_SHOW_menuShow"><apiName>menuShow</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:MenuEvent:MENU_SHOW</apiEventType><adobeApiEventClassifier>mx.events:MenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:MenuEvent:MenuEvent"><apiName>MenuEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>true</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>menuBar</apiItemName><apiOperationClassifier>mx.controls:MenuBar</apiOperationClassifier><apiData>null</apiData><apiDesc>作为选定的 Menu 控件的父项的 MenuBar 实例；当目标 Menu 控件不是 MenuBar 控件的子项时，值为 null。
     
      </apiDesc></apiParam><apiParam><apiItemName>menu</apiItemName><apiOperationClassifier>mx.controls:Menu</apiOperationClassifier><apiData>null</apiData><apiDesc>与此事件相关联的特定 Menu 实例，例如隐藏或打开的菜单或子菜单。如果 MenuBar 项目分派此事件，则此属性为 null。 
     
      </apiDesc></apiParam><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>关联菜单项的 dataProvider 中的项目。
     
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiData>null</apiData><apiDesc>相关联菜单项的 ListItemRenderer。
     
      </apiDesc></apiParam><apiParam><apiItemName>label</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>关联菜单项的标签文本。
     
      </apiDesc></apiParam><apiParam><apiItemName>index</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>关联菜单项在菜单中的索引。 
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。通常由 Menu 对象调用。 
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:MenuEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
      MenuEvent.CHANGE 事件类型常量指示由于用户交互，所选内容已更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
      MenuEvent.CHANGE 事件类型常量指示由于用户交互，所选内容已更改。
     
      <p>此事件类型的事件对象属性包含以下值。并非所有属性对于各种事件都有意义。有关详细信息，请参阅详细的属性说明。</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>index</codeph></entry>
             <entry>选定菜单项在菜单中的索引。</entry></row><row><entry><codeph>item</codeph></entry>
             <entry>dataProvider 中选定的项目。</entry></row><row><entry><codeph>itemRenderer</codeph></entry>
             <entry>选定菜单项的项呈示器。</entry></row><row><entry><codeph>label</codeph></entry>
             <entry>选定菜单项的标签文本。</entry></row><row><entry><codeph>menu</codeph></entry>
             <entry>与此事件关联的特定 Menu 实例；如果 MenuBar 项目正在分派此事件时，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>menuBar</codeph></entry>
             <entry>作为 Menu 控件父项的 MenuBar 实例；如果 Menu 控件不是 MenuBar 控件的子项，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>MenuEvent.CHANGE</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MenuEvent:ITEM_CLICK"><apiName>ITEM_CLICK</apiName><shortdesc>
      MenuEvent.ITEM_CLICK 事件类型常量指示用户已选择菜单项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemClick</apiData><apiType value="String"/></apiValueDef><apiDesc>
      MenuEvent.ITEM_CLICK 事件类型常量指示用户已选择菜单项。
     
      <p>此事件类型的事件对象属性包含以下值。并非所有属性对于各种事件都有意义。有关详细信息，请参阅详细的属性说明。</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>index</codeph></entry>
             <entry>选定菜单项在菜单中的索引。</entry></row><row><entry><codeph>item</codeph></entry>
             <entry>dataProvider 中选定的项目。</entry></row><row><entry><codeph>itemRenderer</codeph></entry>
             <entry>选定菜单项的 ListItemRenderer。</entry></row><row><entry><codeph>label</codeph></entry>
             <entry>选定菜单项的标签文本。</entry></row><row><entry><codeph>menu</codeph></entry>
              <entry>与此事件关联的特定 Menu 实例；如果 MenuBar 项目正在分派此事件时，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>menuBar</codeph></entry>
             <entry>作为 Menu 控件父项的 MenuBar 实例；如果 Menu 控件不是 MenuBar 控件的子项，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>MenuEvent.ITEM_CLICK</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MenuEvent:ITEM_ROLL_OUT"><apiName>ITEM_ROLL_OUT</apiName><shortdesc>
      MenuEvent.ITEM_ROLL_OUT 类型常量指示鼠标指针滑离菜单项。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemRollOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
      MenuEvent.ITEM_ROLL_OUT 类型常量指示鼠标指针滑离菜单项。
     
      <p>此事件类型的事件对象属性包含以下值。并非所有属性对于各种事件都有意义。有关详细信息，请参阅详细的属性说明。</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>index</codeph></entry>
             <entry>鼠标指针滑离的菜单项的菜单中的索引。</entry></row><row><entry><codeph>item</codeph></entry>
             <entry>对应于鼠标指针滑离的菜单项的 dataProvider 中的项目。</entry></row><row><entry><codeph>itemRenderer</codeph></entry>
             <entry>鼠标指针滑离的菜单项的 ListItemRenderer。</entry></row><row><entry><codeph>label</codeph></entry>
             <entry>鼠标指针滑离的菜单项的标签文本。</entry></row><row><entry><codeph>menu</codeph></entry>
              <entry>与此事件关联的特定 Menu 实例；如果 MenuBar 项目正在分派此事件时，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>menuBar</codeph></entry>
             <entry>作为 Menu 控件父项的 MenuBar 实例；如果 Menu 控件不是 MenuBar 控件的子项，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>MenuEvent.ITEM_ROLL_OUT</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MenuEvent:ITEM_ROLL_OVER"><apiName>ITEM_ROLL_OVER</apiName><shortdesc>
      MenuEvent.ITEM_ROLL_OVER 类型常量指示鼠标指针悬停在菜单项上。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemRollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
      MenuEvent.ITEM_ROLL_OVER 类型常量指示鼠标指针悬停在菜单项上。
     
      <p>此事件类型的事件对象属性包含以下值。并非所有属性对于各种事件都有意义。有关详细信息，请参阅详细的属性说明。</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>index</codeph></entry>
             <entry>鼠标指针在其上悬停的菜单项的菜单中的索引。</entry></row><row><entry><codeph>item</codeph></entry>
             <entry>与鼠标指针悬停在其上的菜单项关联的 dataProvider 中的项目。</entry></row><row><entry><codeph>itemRenderer</codeph></entry>
             <entry>鼠标指针在其上悬停的菜单项的 ListItemRenderer。</entry></row><row><entry><codeph>label</codeph></entry>
             <entry>鼠标指针在其上悬停的菜单项的标签文本。</entry></row><row><entry><codeph>menu</codeph></entry>
              <entry>与此事件关联的特定 Menu 实例；如果 MenuBar 项目正在分派此事件时，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>menuBar</codeph></entry>
             <entry>作为 Menu 控件父项的 MenuBar 实例；如果 Menu 控件不是 MenuBar 控件的子项，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>MenuEvent.ITEM_ROLL_OVER</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MenuEvent:MENU_HIDE"><apiName>MENU_HIDE</apiName><shortdesc>
      MenuEvent.MENU_HIDE 事件类型常量指示菜单或子菜单已关闭。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuHide</apiData><apiType value="String"/></apiValueDef><apiDesc>
      MenuEvent.MENU_HIDE 事件类型常量指示菜单或子菜单已关闭。
     
      <p>此事件类型的事件对象属性包含以下值。并非所有属性对于各种事件都有意义。有关详细信息，请参阅详细的属性说明。</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>index</codeph></entry>
             <entry>-1。对于这种类型的事件未设置此属性。 </entry></row><row><entry><codeph>item</codeph></entry>
             <entry>null。对于这种类型的事件未设置此属性。</entry></row><row><entry><codeph>itemRenderer</codeph></entry>
             <entry>null。对于这种类型的事件未设置此属性。</entry></row><row><entry><codeph>label</codeph></entry>
             <entry>null。对于这种类型的事件未设置此属性。</entry></row><row><entry><codeph>menu</codeph></entry>
              <entry>与此事件关联的特定 Menu 实例；如果 MenuBar 项目正在分派此事件时，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>menuBar</codeph></entry>
             <entry>作为 Menu 控件父项的 MenuBar 实例；如果 Menu 控件不是 MenuBar 控件的子项，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>MenuEvent.MENU_HIDE</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MenuEvent:MENU_SHOW"><apiName>MENU_SHOW</apiName><shortdesc>
      MenuEvent.MENU_SHOW 类型常量指示鼠标指针已滑离打开的菜单或子菜单。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuShow</apiData><apiType value="String"/></apiValueDef><apiDesc>
      MenuEvent.MENU_SHOW 类型常量指示鼠标指针已滑离打开的菜单或子菜单。
     
      <p>此事件类型的事件对象属性包含以下值。并非所有属性对于各种事件都有意义。有关详细信息，请参阅详细的属性说明。</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>index</codeph></entry>
             <entry>-1。对于这种类型的事件未设置此属性。</entry></row><row><entry><codeph>item</codeph></entry>
             <entry>null。对于这种类型的事件未设置此属性。</entry></row><row><entry><codeph>itemRenderer</codeph></entry>
             <entry>null。对于这种类型的事件未设置此属性。</entry></row><row><entry><codeph>label</codeph></entry>
             <entry><codeph>null。不为这种类型的事件设置此属性。</codeph></entry></row><row><entry><codeph>menu</codeph></entry>
              <entry>与此事件关联的特定 Menu 实例；如果 MenuBar 项目正在分派此事件时，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>menuBar</codeph></entry>
             <entry>作为 Menu 控件父项的 MenuBar 实例；如果 Menu 控件不是 MenuBar 控件的子项，则为 <codeph>null</codeph>。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>MenuEvent.MENU_SHOW</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MenuEvent:index"><apiName>index</apiName><shortdesc>
      相关联菜单项在其父菜单或子菜单中的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      相关联菜单项在其父菜单或子菜单中的索引。对于 menuShow 和 menuHide 事件，此值为 -1。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MenuEvent:item"><apiName>item</apiName><shortdesc>
      dataProvider 中的特定项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      dataProvider 中的特定项目。对于 menuShow 和 menuHide 事件，此值为 null。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MenuEvent:label"><apiName>label</apiName><shortdesc>
      关联菜单项的标签文本。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      关联菜单项的标签文本。对于 menuShow 和 menuHide 事件，此值为 null。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MenuEvent:menu"><apiName>menu</apiName><shortdesc>
      与此事件相关联的特定 Menu 实例，例如隐藏或打开的菜单或子菜单。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.controls:Menu</apiValueClassifier></apiValueDef><apiDesc>
      与此事件相关联的特定 Menu 实例，例如隐藏或打开的菜单或子菜单。如果 MenuBar 项目正在分派此事件，则此属性为 null。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:MenuEvent:menuBar"><apiName>menuBar</apiName><shortdesc>
      作为选定的 Menu 控件的父项的 MenuBar 实例；当目标 Menu 控件不是 MenuBar 控件的子项时，值为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.controls:MenuBar</apiValueClassifier></apiValueDef><apiDesc>
      作为选定的 Menu 控件的父项的 MenuBar 实例；当目标 Menu 控件不是 MenuBar 控件的子项时，值为 null。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:CloseEvent"><apiName>CloseEvent</apiName><shortdesc>
  CloseEvent 类表示特定于弹出窗口的事件对象，如 Alert 控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  CloseEvent 类表示特定于弹出窗口的事件对象，如 Alert 控件。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#Alert"><linktext>mx.controls.Alert</linktext></link></related-links><adobeApiEvent id="mx.events:CloseEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:CloseEvent:CLOSE</apiEventType><adobeApiEventClassifier>mx.events:CloseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:CloseEvent:CloseEvent"><apiName>CloseEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>detail</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>detail 属性的值；标识弹出的控件中单击的按钮。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:CloseEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
      CloseEvent.CLOSE 常量可为 close 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>CloseEvent.CLOSE</codeph> 常量可为 <codeph>close</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>detail</codeph></entry><entry>对于包含多个按钮的控件，<codeph>detail</codeph> 可标识弹出的控件中单击的按钮。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CloseEvent:detail"><apiName>detail</apiName><shortdesc>
      标识弹出的控件中单击的按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      标识弹出的控件中单击的按钮。此属性只适用于包含多个按钮的控件。Alert 控件将此属性设置为下列常量之一：
      <ul>
        <li><codeph>Alert.YES</codeph></li>
        <li><codeph>Alert.NO</codeph></li>
        <li><codeph>Alert.OK</codeph></li>
        <li><codeph>Alert.CANCEL</codeph></li>
      </ul>
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ModuleEvent"><apiName>ModuleEvent</apiName><shortdesc>
  ModuleEvent 类代表传递到与动态加载模块相关的事件的事件侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ProgressEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
  ModuleEvent 类代表传递到与动态加载模块相关的事件的事件侦听器的事件对象。 
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.events:ModuleEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ModuleEvent:ERROR</apiEventType><adobeApiEventClassifier>mx.events:ModuleEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ModuleEvent:PROGRESS_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ModuleEvent:PROGRESS</apiEventType><adobeApiEventClassifier>mx.events:ModuleEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ModuleEvent:READY_ready"><apiName>ready</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ModuleEvent:READY</apiEventType><adobeApiEventClassifier>mx.events:ModuleEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ModuleEvent:SETUP_setup"><apiName>setup</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ModuleEvent:SETUP</apiEventType><adobeApiEventClassifier>mx.events:ModuleEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ModuleEvent:UNLOAD_unload"><apiName>unload</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ModuleEvent:UNLOAD</apiEventType><adobeApiEventClassifier>mx.events:ModuleEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:ModuleEvent:ModuleEvent"><apiName>ModuleEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件的类型。可能的值包括：
      <ul>
         <li>“progress”(<codeph>ModuleEvent.PROGRESS</codeph>)；</li>
         <li>“ready”(<codeph>ModuleEvent.READY</codeph>)；</li>
         <li>“setup”(<codeph>ModuleEvent.SETUP</codeph>)；</li>
         <li>“error”(<codeph>ModuleEvent.ERROR</codeph>)；</li>
         <li>“unload”(<codeph>ModuleEvent.UNLOAD</codeph>)；</li>
      </ul>
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定 Event 对象是否参与事件流的冒泡阶段。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定在事件传播期间是否可以取消 Event 对象。
     
      </apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>在侦听器处理事件时加载的字节数。
     
      </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiType value="uint"/><apiData>0</apiData><apiDesc>如果加载进程成功，将加载的字节总数。
     
      </apiDesc></apiParam><apiParam><apiItemName>errorText</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>事件类型为 <codeph>ModuleEvent.ERROR</codeph> 时显示的错误消息。
     
      </apiDesc></apiParam><apiParam><apiItemName>module</apiItemName><apiOperationClassifier>mx.modules:IModuleInfo</apiOperationClassifier><apiData>null</apiData></apiParam><apiTipTexts><apiTipText><codeph>ModuleEvent</codeph> 对象的构造函数。
      
      </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:ModuleEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
      下载模块出错时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiType value="String"/></apiValueDef><apiDesc>
      下载模块出错时分派。<codeph>ModuleEvent.ERROR</codeph> 常量可为 <codeph>error</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>空</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>空</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry><entry>错误消息。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ModuleEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
      下载模块的过程中分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiType value="String"/></apiValueDef><apiDesc>
      下载模块的过程中分派。下载进程期间定期分派此模块。<codeph>ModuleEvent.PROGRESS</codeph> 常量可为 <codeph>progress</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>加载的字节数。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>要加载的字节总数。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry><entry>空</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ModuleEvent:READY"><apiName>READY</apiName><shortdesc>
      模块完成下载时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ready</apiData><apiType value="String"/></apiValueDef><apiDesc>
      模块完成下载时分派。<codeph>ModuleEvent.READY</codeph> 常量可为 <codeph>complete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>加载的字节数。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>要加载的字节总数。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry><entry>空</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ModuleEvent:SETUP"><apiName>SETUP</apiName><shortdesc>
      已下载了足够的模块内容，您可以获得有关模块的信息时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>setup</apiData><apiType value="String"/></apiValueDef><apiDesc>
      已下载了足够的模块内容，您可以获得有关模块的信息时分派。您可以通过调用模块上的 <codeph>IFlexModuleFactory.info()</codeph> 方法来执行此操作。<codeph>ModuleEvent.SETUP</codeph> 常量可为 <codeph>setup</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>空</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>空</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry><entry>错误消息。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ModuleEvent:UNLOAD"><apiName>UNLOAD</apiName><shortdesc>
      卸载模块时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unload</apiData><apiType value="String"/></apiValueDef><apiDesc>
      卸载模块时分派。<codeph>ModuleEvent.UNLOAD</codeph> 常量可为 <codeph>unload</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>空</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>空</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry><entry>错误消息。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ModuleEvent:errorText"><apiName>errorText</apiName><shortdesc>
      类型为 ModuleEvent.ERROR 时的错误消息；在其它情况下为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      类型为 <codeph>ModuleEvent.ERROR</codeph> 时的错误消息；在其它情况下为 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ModuleEvent:module:get"><apiName>module</apiName><shortdesc>
      target，即特定模块的接口实例。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>mx.modules:IModuleInfo</apiValueClassifier></apiValueDef><apiDesc>
      <codeph>target</codeph>，即特定模块的接口实例。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:InterManagerRequest"><apiName>InterManagerRequest</apiName><shortdesc>
  这是在不同 ApplicationDomain 之间发送的事件，用于向受信任的侦听器通知特定管理器中的活动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  这是在不同 ApplicationDomain 之间发送的事件，用于向受信任的侦听器通知特定管理器中的活动。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.events:InterManagerRequest:InterManagerRequest"><apiName>InterManagerRequest</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>name</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>属性或方法的名称或要实例化的管理器的名称。
     	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>属性的值，或方法的参数的数组（如果非 null）。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。不返回任何内容，但可以修改 <codeph>value</codeph> 属性以表示方法的返回值。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:InterManagerRequest:CURSOR_MANAGER_REQUEST"><apiName>CURSOR_MANAGER_REQUEST</apiName><shortdesc>
      不同 CursorManager 之间的通信使用此请求类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cursorManagerRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      不同 CursorManager 之间的通信使用此请求类型。<codeph>name</codeph> 属性为某个 CursorManager 属性的名称。<codeph>value</codeph> 属性为该属性的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:InterManagerRequest:DRAG_MANAGER_REQUEST"><apiName>DRAG_MANAGER_REQUEST</apiName><shortdesc>
      不同 DragManager 之间的通信使用此请求类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dragManagerRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      不同 DragManager 之间的通信使用此请求类型。<codeph>name</codeph> 属性为某个 DragManager 属性的名称。<codeph>value</codeph> 属性为该属性的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:InterManagerRequest:INIT_MANAGER_REQUEST"><apiName>INIT_MANAGER_REQUEST</apiName><shortdesc>
      让另一个 ApplicationDomain 将该 ApplicationDomain 中的管理器实例化（如果尚未实例化），这样就可以用它侦听后续的 InterManagerRequest。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>initManagerRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      让另一个 ApplicationDomain 将该 ApplicationDomain 中的管理器实例化（如果尚未实例化），这样就可以用它侦听后续的 InterManagerRequest。<codeph>name</codeph> 属性为要实例化的管理器的名称。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:InterManagerRequest:SYSTEM_MANAGER_REQUEST"><apiName>SYSTEM_MANAGER_REQUEST</apiName><shortdesc>
      请求 SystemManager 执行某种操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>systemManagerRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      请求 SystemManager 执行某种操作。<codeph>name</codeph> 属性为要执行的操作的名称。<codeph>value</codeph> 属性为执行该操作所需的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:InterManagerRequest:TOOLTIP_MANAGER_REQUEST"><apiName>TOOLTIP_MANAGER_REQUEST</apiName><shortdesc>
      不同 ToolTipManager 之间的通信使用此请求类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tooltipManagerRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      不同 ToolTipManager 之间的通信使用此请求类型。<codeph>name</codeph> 属性为某个 ToolTipManager 属性的名称。<codeph>value</codeph> 属性为该属性的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:InterManagerRequest:name"><apiName>name</apiName><shortdesc>
      属性或方法的名称或要实例化的管理器的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      属性或方法的名称或要实例化的管理器的名称。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:InterManagerRequest:value"><apiName>value</apiName><shortdesc>
      属性的值，或方法的参数的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      属性的值，或方法的参数的数组。		
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:Request"><apiName>Request</apiName><shortdesc>
  这是期望其数据属性由正在响应的侦听器进行设置的事件.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  这是期望其数据属性由正在响应的侦听器进行设置的事件。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.events:Request:Request"><apiName>Request</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>属性或方法的名称或要实例化的管理器的名称。
     
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。不返回任何内容，但可以修改 <codeph>value</codeph> 属性以表示方法的返回值。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:Request:GET_PARENT_FLEX_MODULE_FACTORY_REQUEST"><apiName>GET_PARENT_FLEX_MODULE_FACTORY_REQUEST</apiName><shortdesc>
      从子应用程序或模块分派，以查找其父应用程序或模块的模块工厂。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>getParentFlexModuleFactoryRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      从子应用程序或模块分派，以查找其父应用程序或模块的模块工厂。该请求的接收方应该将数据属性设置为其模块工厂。该消息是从已加载的模块或应用程序的内容分派的。
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:Request:value"><apiName>value</apiName><shortdesc>
      属性的值，或方法的参数的数组。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/><apiTool name="Flex" version="4"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      属性的值，或方法的参数的数组。       
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:SWFBridgeRequest"><apiName>SWFBridgeRequest</apiName><shortdesc>
  通过两个应用程序 SWF 之间存在的 sharedEvents 分派程序在应用程序之间发送的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  通过两个应用程序 SWF 之间存在的 sharedEvents 分派程序在应用程序之间发送的事件。该事件描述一个请求，即另一个 SWF 中的侦听器对其 SWF 中的对象执行某些操作，并有可能将某些数据返回给进行分派的 SWF。与典型事件不同，SWFBridgeRequests 是事件模型的一个例外，这是因为该事件的属性经过修改，以便将数据返回到进行分派的 SWF。
 
  </apiDesc></apiClassifierDetail><related-links><link href="" invalidHref="flash.display.xml#LoaderInfo/sharedEvents"><linktext>flash.display.LoaderInfo.sharedEvents</linktext></link></related-links><apiConstructor id="mx.events:SWFBridgeRequest:SWFBridgeRequest"><apiName>SWFBridgeRequest</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>requestor</apiItemName><apiType value="flash.events:IEventDispatcher"/><apiData>null</apiData><apiDesc>发送消息的桥。
	  
	  </apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>与事件相关的数据。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.events:SWFBridgeRequest:marshal"><apiName>marshal</apiName><shortdesc>
      将 SWFBridgeRequest 从远程 ApplicationDomain 封送到当前 ApplicationDomain 中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>调用方的 ApplicationDomain 中创建的 SWFBridgeRequest。
      
      </apiDesc><apiOperationClassifier>mx.events:SWFBridgeRequest</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>可能已在不同的 ApplicationDomain 中创建的 SWFBridgeRequest。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将 SWFBridgeRequest 从远程 ApplicationDomain 封送到当前 ApplicationDomain 中。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.events:SWFBridgeRequest:ACTIVATE_FOCUS_REQUEST"><apiName>ACTIVATE_FOCUS_REQUEST</apiName><shortdesc>
	  从顶级焦点管理器发送到次级焦点管理器，因此激活了参与选项卡循环的所有焦点管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activateFocusRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  从顶级焦点管理器发送到次级焦点管理器，因此激活了参与选项卡循环的所有焦点管理器。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:ACTIVATE_POP_UP_REQUEST"><apiName>ACTIVATE_POP_UP_REQUEST</apiName><shortdesc>
      请求激活子应用程序的弹出窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activatePopUpRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      请求激活子应用程序的弹出窗口。此请求通过桥从顶级 SystemManager 发送到子 SystemManager。<codeph>data</codeph> 属性包含弹出窗口的标识符。它并不总是对弹出窗口的实际引用。不返回数据。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:ADD_POP_UP_PLACE_HOLDER_REQUEST"><apiName>ADD_POP_UP_PLACE_HOLDER_REQUEST</apiName><shortdesc>
	  为子 SystemManager 承载的弹出窗口添加占位符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addPopUpPlaceHolderRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  为子 SystemManager 承载的弹出窗口添加占位符。弹出窗口不受信任，因此其必须继续由信任它的子级承载。将向顶级根 SystemManager 发送一个占位符，因此在那里可以管理所有弹出窗口的激活和取消激活。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:ADD_POP_UP_REQUEST"><apiName>ADD_POP_UP_REQUEST</apiName><shortdesc>
	  在目标应用程序上添加弹出窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addPopUpRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  在目标应用程序上添加弹出窗口。目标应用程序不保留该请求，除非进行分派和进行接收的应用程序之间相互信任。
	  
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:CAN_ACTIVATE_POP_UP_REQUEST"><apiName>CAN_ACTIVATE_POP_UP_REQUEST</apiName><shortdesc>
	  测试是否可以激活给定的弹出窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>canActivateRequestPopUpRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  测试是否可以激活给定的弹出窗口。如果弹出窗口不可见或未被启用，则无法将其激活。此消息始终通过桥从顶级 SystemManager 发送到拥有弹出窗口的 SystemManager。<codeph>data</codeph> 属性是弹出窗口的标识符。它并不总是对弹出窗口的实际引用。如果可以激活弹出窗口，则进行接收的 SystemManager 会将请求的 <codeph>data</codeph> 属性设置为 <codeph>true</codeph>。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:CREATE_MODAL_WINDOW_REQUEST"><apiName>CREATE_MODAL_WINDOW_REQUEST</apiName><shortdesc>
      创建模式窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>createModalWindowRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      创建模式窗口。创建 <codeph>show</codeph> 属性之后，可将其用于显示模式窗口。值为 <codeph>true</codeph> 时将显示该模式窗口。值为 <codeph>false</codeph> 时将让模式窗口保持隐藏，直到分派 <codeph>ModalWindowRequest.SHOW</codeph> 请求为止。<codeph>data</codeph> 属性可能有一个 Rectangle，用于描述要从模式窗口中排除的区域。Rectangle 的坐标采用全局坐标。只有当请求方信任请求的接收方时才会提供参数。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:DEACTIVATE_FOCUS_REQUEST"><apiName>DEACTIVATE_FOCUS_REQUEST</apiName><shortdesc>
	  从顶级焦点管理器发送到次级焦点管理器，因此取消激活了参与选项卡循环的所有焦点管理器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deactivateFocusRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  从顶级焦点管理器发送到次级焦点管理器，因此取消激活了参与选项卡循环的所有焦点管理器。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:DEACTIVATE_POP_UP_REQUEST"><apiName>DEACTIVATE_POP_UP_REQUEST</apiName><shortdesc>
          请求取消激活子应用程序的弹出窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deactivatePopUpRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
          请求取消激活子应用程序的弹出窗口。此请求通过桥从子 SystemManager 发送到顶级 SystemManager。data 属性包含弹出窗口的标识符。它并不总是对弹出窗口的实际引用。不返回数据。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:GET_SIZE_REQUEST"><apiName>GET_SIZE_REQUEST</apiName><shortdesc>
	  获取子 SystemManager 的大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>getSizeRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  获取子 SystemManager 的大小。由 SWFLoader 控件向子 SystemManager 分派，以获取其内容的大小。子 SystemManager 更新事件对象中的 <codeph>width</codeph> 和 <codeph>height</codeph> 属性
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:GET_VISIBLE_RECT_REQUEST"><apiName>GET_VISIBLE_RECT_REQUEST</apiName><shortdesc>
      请求父 SystemManager 根据任何可能剪切发出请求的 SWF 的 DisplayObject，计算发出请求的 SWF 的可见部分。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>getVisibleRectRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      请求父 SystemManager 根据任何可能剪切发出请求的 SWF 的 DisplayObject，计算发出请求的 SWF 的可见部分。此请求通过桥发送到父 SystemManager。在 <codeph>data</codeph> 属性中返回结果，该属性为采用全局坐标的 Rectangle。
     
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:HIDE_MODAL_WINDOW_REQUEST"><apiName>HIDE_MODAL_WINDOW_REQUEST</apiName><shortdesc>
      隐藏模式窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hideModalWindowRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      隐藏模式窗口。<codeph>remove</codeph> 属性确定是否从显示列表中删除该模式窗口并将其隐藏。值为 <codeph>true</codeph> 时将删除该模式窗口。值为 <codeph>false</codeph> 时仅隐藏该模式窗口。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:HIDE_MOUSE_CURSOR_REQUEST"><apiName>HIDE_MOUSE_CURSOR_REQUEST</apiName><shortdesc>
      请求鼠标光标在此应用程序之上时应该隐藏。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>hideMouseCursorRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      请求鼠标光标在此应用程序之上时应该隐藏。此请求发送到与父应用程序共享的桥，然后向上传播到顶级根。未使用 <codeph>data</codeph> 属性
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:INVALIDATE_REQUEST"><apiName>INVALIDATE_REQUEST</apiName><shortdesc>
	  请求当前应用程序的加载器使其属性、大小或显示列表失效。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalidateRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  请求当前应用程序的加载器使其属性、大小或显示列表失效。此请求从 SystemManager 发送到其父 SystemManager。<codeph>data</codeph> 属性是各种 InvalidationRequestData 标志的组合。不返回数据。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:IS_BRIDGE_CHILD_REQUEST"><apiName>IS_BRIDGE_CHILD_REQUEST</apiName><shortdesc>
	  测试给定的 DisplayObject 是 SWF 的子级还是其某个子 SWF。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>isBridgeChildRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  测试给定的 DisplayObject 是 SWF 的子级还是其某个子 SWF。此请求从 SystemManager 发送到一个或多个其子级的 SystemManager（通过它们之间的桥）。<codeph>data</codeph> 属性是对 DisplayObject 的引用。如果 DisplayObject 是 SWF 的子级或其某个子 SWF，则进行接收的 SystemManager 会将请求的 <codeph>data</codeph> 属性设置为 <codeph>true</codeph>。 
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:MOVE_FOCUS_REQUEST"><apiName>MOVE_FOCUS_REQUEST</apiName><shortdesc>
	  请求将对焦点的控制权移交给另一个 FocusManager，并让该 FocusManager 根据事件中的 direction 属性将焦点移至其管理之下的一个控件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>moveFocusRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  请求将对焦点的控制权移交给另一个 FocusManager，并让该 FocusManager 根据事件中的 <codeph>direction</codeph> 属性将焦点移至其管理之下的一个控件。将焦点移回父 SWF 的 FocusManager 时，会将 <codeph>direction</codeph> 属性设置为 <codeph>FocusDirection.FORWARD</codeph> 或 <codeph>FocusDirection.BACKWARD</codeph>。将焦点移至子 SWF 的 FocusManager 时，会将 <codeph>direction</codeph> 属性设置为 <codeph>FocusDirection.TOP</codeph> 或 <codeph>FocusDirection.BOTTOM</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:REMOVE_POP_UP_PLACE_HOLDER_REQUEST"><apiName>REMOVE_POP_UP_PLACE_HOLDER_REQUEST</apiName><shortdesc>
	  删除占位符。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removePopUpPlaceHolderRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  删除占位符。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:REMOVE_POP_UP_REQUEST"><apiName>REMOVE_POP_UP_REQUEST</apiName><shortdesc>
	  从 sandboxRoot 的 SystemManager 中删除弹出窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removePopUpRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  从 sandboxRoot 的 SystemManager 中删除弹出窗口。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:RESET_MOUSE_CURSOR_REQUEST"><apiName>RESET_MOUSE_CURSOR_REQUEST</apiName><shortdesc>
      请求为新的鼠标事件重置显示/隐藏鼠标光标逻辑，以使各种应用程序都可以请求应该显示还是隐藏鼠标光标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resetMouseCursorRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      请求为新的鼠标事件重置显示/隐藏鼠标光标逻辑，以使各种应用程序都可以请求应该显示还是隐藏鼠标光标。此请求发送到与父应用程序共享的桥，然后向上传播到顶级根。未使用 data 属性
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:SET_ACTUAL_SIZE_REQUEST"><apiName>SET_ACTUAL_SIZE_REQUEST</apiName><shortdesc>
	  设置 child.systemManager 的大小。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>setActualSizeRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  设置 <codeph>child.systemManager</codeph> 的大小。由 SWFLoader 控件向子 SystemManager 分派。子 SystemManager 应根据事件对象中的 <codeph>width</codeph> 和 <codeph>height</codeph> 属性更新其子级的大小
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:SET_SHOW_FOCUS_INDICATOR_REQUEST"><apiName>SET_SHOW_FOCUS_INDICATOR_REQUEST</apiName><shortdesc> 
      设置每个应用程序的 FocusManager 中的 showFocusIndicator 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>setShowFocusIndicatorRequest</apiData><apiType value="String"/></apiValueDef><apiDesc> 
      设置每个应用程序的 FocusManager 中的 showFocusIndicator 属性的值。data 属性是一个布尔值，其中包含 showFocusIndicator 属性将设置成的值。此请求最初是从设置了其 showFocusIndicator 属性的 FocusManager 发出。从那里开始将请求中继到系统中的每个 FocusManager。  
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:SHOW_MODAL_WINDOW_REQUEST"><apiName>SHOW_MODAL_WINDOW_REQUEST</apiName><shortdesc>
      显示模式窗口。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>showModalWindowRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      显示模式窗口。<codeph>skip</codeph> 属性与此请求配合使用。值为 <codeph>true</codeph> 时指示接收方应该仅仅将请求沿父级链向上转发，而不要处理请求。<codeph>data</codeph> 属性可能有一个 Rectangle，用于描述根据当前父级要排除的区域。这些坐标采用屏幕坐标。只有当请求方信任消息的接收方时才会提供参数。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:SHOW_MOUSE_CURSOR_REQUEST"><apiName>SHOW_MOUSE_CURSOR_REQUEST</apiName><shortdesc>
      向顶级根询问根据鼠标光标的当前位置，是否应该隐藏鼠标光标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>showMouseCursorRequest</apiData><apiType value="String"/></apiValueDef><apiDesc>
      向顶级根询问根据鼠标光标的当前位置，是否应该隐藏鼠标光标。发送到与父应用程序共享的桥，然后向上传播到顶级根。如果应该在此位置显示鼠标光标，则将 data 设置为 true
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:data"><apiName>data</apiName><shortdesc>
	  与事件相关的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  与事件相关的数据。有关如何使用此对象的信息，请参阅每个事件类型。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SWFBridgeRequest:requestor"><apiName>requestor</apiName><shortdesc>
	  发送消息的桥。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.events:IEventDispatcher"/></apiValueDef><apiDesc>
	  发送消息的桥。此属性由进行接收的 SWF 用于跟踪哪个 SWFLoader 保存进行请求的 SWF
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:DataGridEvent"><apiName>DataGridEvent</apiName><shortdesc>
   DataGridEvent 类代表特定于 DataGrid 控件的事件对象，例如当可编辑的网格项获得焦点时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
   DataGridEvent 类代表特定于 DataGrid 控件的事件对象，例如当可编辑的网格项获得焦点时分派的事件。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#DataGrid"><linktext>mx.controls.DataGrid</linktext></link></related-links><adobeApiEvent id="mx.events:DataGridEvent:COLUMN_STRETCH_columnStretch"><apiName>columnStretch</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DataGridEvent:COLUMN_STRETCH</apiEventType><adobeApiEventClassifier>mx.events:DataGridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DataGridEvent:HEADER_RELEASE_headerRelease"><apiName>headerRelease</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DataGridEvent:HEADER_RELEASE</apiEventType><adobeApiEventClassifier>mx.events:DataGridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DataGridEvent:ITEM_EDITOR_CREATE_itemEditorCreate"><apiName>itemEditorCreate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DataGridEvent:ITEM_EDITOR_CREATE</apiEventType><adobeApiEventClassifier>mx.events:DataGridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DataGridEvent:ITEM_EDIT_BEGIN_itemEditBegin"><apiName>itemEditBegin</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DataGridEvent:ITEM_EDIT_BEGIN</apiEventType><adobeApiEventClassifier>mx.events:DataGridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DataGridEvent:ITEM_EDIT_BEGINNING_itemEditBeginning"><apiName>itemEditBeginning</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DataGridEvent:ITEM_EDIT_BEGINNING</apiEventType><adobeApiEventClassifier>mx.events:DataGridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DataGridEvent:ITEM_EDIT_END_itemEditEnd"><apiName>itemEditEnd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DataGridEvent:ITEM_EDIT_END</apiEventType><adobeApiEventClassifier>mx.events:DataGridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DataGridEvent:ITEM_FOCUS_IN_itemFocusIn"><apiName>itemFocusIn</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DataGridEvent:ITEM_FOCUS_IN</apiEventType><adobeApiEventClassifier>mx.events:DataGridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DataGridEvent:ITEM_FOCUS_OUT_itemFocusOut"><apiName>itemFocusOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DataGridEvent:ITEM_FOCUS_OUT</apiEventType><adobeApiEventClassifier>mx.events:DataGridEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:DataGridEvent:DataGridEvent"><apiName>DataGridEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>发生事件的列的索引（从零开始）。
     
      </apiDesc></apiParam><apiParam><apiItemName>dataField</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc> 与列关联的数据中的字段或属性的名称。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>数据提供程序中项目的索引（从零开始）。
     
      </apiDesc></apiParam><apiParam><apiItemName>reason</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>发生 <codeph>itemEditEnd</codeph> 事件的原因。
     
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiData>null</apiData><apiDesc>所编辑的项呈示器或被单击的标题渲染器。
     
      </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>用于重放 <codeph>columnStretch</codeph> 事件的列 x 位置。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。通常由 DataGrid 对象调用；不用于应用程序代码。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:DataGridEvent:COLUMN_STRETCH"><apiName>COLUMN_STRETCH</apiName><shortdesc>
      DataGridEvent.COLUMN_STRETCH 常量可为 columnStretch 事件定义事件对象的 type 属性的值，指示用户已将列水平展开。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>columnStretch</apiData><apiType value="String"/></apiValueDef><apiDesc>
      DataGridEvent.COLUMN_STRETCH 常量可为 <codeph>columnStretch</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示用户已将列水平展开。
      <p>事件对象的属性有下列值：</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> DataGrid 对象的 <codeph>columns</codeph> 数组中项目列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dataField</codeph></entry><entry>与列关联的数据中的字段或属性的名称。</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>null</entry></row><row><entry><codeph>localX</codeph></entry><entry>鼠标的 X 位置</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>数据提供者中项目的索引（从零开始）。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>DataGridEvent.COLUMN_STRETCH</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:HEADER_RELEASE"><apiName>HEADER_RELEASE</apiName><shortdesc>
      DataGridEvent.HEADER_RELEASE 常量可为 headerRelease 事件定义事件对象的 type 属性值，指示用户已在列标题上按下和释放鼠标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>headerRelease</apiData><apiType value="String"/></apiValueDef><apiDesc>
      DataGridEvent.HEADER_RELEASE 常量可为 <codeph>headerRelease</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值，指示用户已在列标题上按下和释放鼠标。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> DataGrid 对象的 <codeph>columns</codeph> 数组中项目列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dataField</codeph></entry><entry>与列关联的数据中的字段或属性的名称。</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>要释放的标题渲染器。</entry></row><row><entry><codeph>localX</codeph></entry><entry>NaN</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>null</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>DataGridEvent.HEADER_RELEASE</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:ITEM_EDITOR_CREATE"><apiName>ITEM_EDITOR_CREATE</apiName><shortdesc>
      DataGridEvent.ITEM_EDITOR_CREATE 常量可为 itemEditorCreate 事件定义事件对象的 type 属性值，指示 datagrid 已完成项目编辑器的创建。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemEditorCreate</apiData><apiType value="String"/></apiValueDef><apiDesc>
      DataGridEvent.ITEM_EDITOR_CREATE 常量可为 <codeph>itemEditorCreate</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值，指示 datagrid 已完成项目编辑器的创建。
     
      <p>此事件不存在默认侦听器。</p>
     
      <p>您通常会为此事件写入您自己的事件侦听器，以在用户可以开始编辑之前允许对 <codeph>itemEditor</codeph> 进行自定义修改。</p>
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> DataGrid 对象的 <codeph>columns</codeph> 数组中项目列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dataField</codeph></entry><entry>null</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>null</entry></row><row><entry><codeph>localX</codeph></entry><entry>NaN</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>数据提供者中项目的索引（从零开始）。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>DataGridEvent.ITEM_EDITOR_CREATE</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:ITEM_EDIT_BEGIN"><apiName>ITEM_EDIT_BEGIN</apiName><shortdesc>
      DataGridEvent.ITEM_EDIT_BEGIN 常量可为 itemEditBegin 事件定义事件对象的 type 属性的值，指示项目可进行编辑。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemEditBegin</apiData><apiType value="String"/></apiValueDef><apiDesc>
      DataGridEvent.ITEM_EDIT_BEGIN 常量可为 <codeph>itemEditBegin</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示项目可进行编辑。 
     
      <p>此事件的默认侦听器执行下列操作：</p>
     
      <ul>
        <li>通过调用 <codeph>createItemEditor()</codeph> 方法创建项目编辑器对象。</li>
        <li>将 <codeph>data</codeph> 属性从项目复制到编辑器。默认情况下，项目编辑器对象是 TextInput 控件的实例。您可以使用 list 控件的 <codeph>itemEditor</codeph> 属性指定自定义项目编辑器类。</li>
     
        <li>设置 list 控件的 <codeph>itemEditorInstance</codeph> 属性，以引用项目编辑器实例。</li>
      </ul>
     
      <p>您可以为此事件编写事件侦听器以修改传递到项目编辑器的数据。例如，您可以修改项目编辑器使用的数据、数据格式或其它信息。</p>
     
      <p>您还可以创建事件侦听器以指定用于编辑项目的项目编辑器。例如，您可能有两个不同的项目编辑器。在事件侦听器中，您可以通过执行下列操作检查要编辑的数据或其它信息，并打开相应的项目编辑器：</p>
     
      <ol>
         <li>调用 <codeph>preventDefault()</codeph> 以阻止 Flex 在默认事件侦听器中调用 <codeph>createItemEditor()</codeph> 方法。</li>
         <li>将 <codeph>itemEditor</codeph> 属性设置为相应编辑器。</li>
         <li>调用 <codeph>createItemEditor()</codeph> 方法。</li>
      </ol>
     
      <p>事件对象的属性有下列值：</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> DataGrid 对象的 <codeph>columns</codeph> 数组中项目列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dataField</codeph></entry><entry>null</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>所编辑的项目的项呈示器。</entry></row><row><entry><codeph>localX</codeph></entry><entry>NaN</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>数据提供者中项目的索引（从零开始）。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>DataGridEvent.ITEM_EDIT_BEGIN</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:ITEM_EDIT_BEGINNING"><apiName>ITEM_EDIT_BEGINNING</apiName><shortdesc>
      DataGridEvent.ITEM__EDIT_BEGINNING 常量可为 itemEditBeginning 事件定义事件对象的 type 属性的值，指示用户已准备编辑项目，例如通过在项目上释放鼠标按键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemEditBeginning</apiData><apiType value="String"/></apiValueDef><apiDesc>
      DataGridEvent.ITEM__EDIT_BEGINNING 常量可为 <codeph>itemEditBeginning</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示用户已准备编辑项目，例如通过在项目上释放鼠标按键。 
     
      <p>此事件的默认侦听器将 <codeph>DataGrid.editedItemPosition</codeph> 属性设置为具有焦点的项目，该项目开始项目编辑会话。</p>
     
      <p>您通常可以为此事件编写自己的事件侦听器，以禁止编辑特定项目。在为此事件自己编写的事件侦听器内调用 <codeph>preventDefault()</codeph> 方法可以阻止默认侦听器执行。</p>
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> DataGrid 对象的 <codeph>columns</codeph> 数组中项目列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dataField</codeph></entry><entry>与项目的列关联的数据中的字段或属性的名称。</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>要编辑的项目的项呈示器。如果此事件由键盘生成，则此属性为 null，因为要编辑的项目可能未在屏幕范围内显示。</entry></row><row><entry><codeph>localX</codeph></entry><entry>NaN</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>数据提供者中项目的索引（从零开始）。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>DataGridEvent.ITEM_EDIT_BEGINNING</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:ITEM_EDIT_END"><apiName>ITEM_EDIT_END</apiName><shortdesc>
      DataGridEvent.ITEM_EDIT_END 常量可为 itemEditEnd 事件定义事件对象的 type 属性的值，指示编辑会话结束。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemEditEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      DataGridEvent.ITEM_EDIT_END 常量可为 <codeph>itemEditEnd</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示编辑会话结束。  
     
      <p>列表组件具有针对此事件的默认处理函数，此程序将数据从项目编辑器复制到 list 控件的数据提供程序。默认事件侦听器执行下列操作：</p>
     
      <ul>
        <li>使用与此事件相关联的 DataGridColumn 的 <codeph>editorDataField</codeph> 属性确定包含新数据的项目编辑器的属性，并使用这些新数据更新数据提供程序项目。因为默认项目编辑器是 TextInput 控件，所以 <codeph>editorDataField</codeph> 属性的默认值为 <codeph>"text"</codeph>，以指定 TextInput 的 <codeph>text</codeph> 属性包含新项目数据。</li>
     
        <li>调用 <codeph>destroyItemEditor()</codeph> 方法以关闭项目编辑器。</li>
      </ul>
     
      <p>通常，您可以为此事件编写事件侦听器，以执行下列操作：</p>
      <ul>
        <li>在事件侦听器中，您可以修改编辑器为列表组件返回的数据。例如，您可以在将数据返回到 list 控件之前重新设置其格式。默认情况下，项目编辑器只可以返回一个值。如果希望返回多个值，必须为 <codeph>itemEditEnd</codeph> 事件编写事件侦听器。</li> 
     
        <li>在事件侦听器中，您可以检查项目编辑器中输入的数据。如果数据不正确，可以调用 <codeph>preventDefault()</codeph> 方法阻止 Flex 将新数据传递回 list 控件和关闭编辑器。 </li>
      </ul>
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> DataGrid 对象的 <codeph>columns</codeph> 数组中项目列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dataField</codeph></entry><entry>与项目的列关联的数据中的字段或属性的名称。</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>所编辑的项目的项呈示器。</entry></row><row><entry><codeph>localX</codeph></entry><entry>NaN</entry></row><row><entry><codeph>reason</codeph></entry><entry>定义事件原因的常量。该值必须是 <codeph>DataGridEventReason</codeph> 类的成员。</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>数据提供者中项目的索引（从零开始）。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>DataGridEvent.ITEM_EDIT_END</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:ITEM_FOCUS_IN"><apiName>ITEM_FOCUS_IN</apiName><shortdesc>
      DataGridEvent.ITEM_FOCUS_IN 常量可为 itemFocusIn 事件定义事件对象的 type 属性的值，指示项目已获得焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFocusIn</apiData><apiType value="String"/></apiValueDef><apiDesc>
      DataGridEvent.ITEM_FOCUS_IN 常量可为 <codeph>itemFocusIn</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示项目已获得焦点。 
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> DataGrid 对象的 <codeph>columns</codeph> 数组中项目列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dataField</codeph></entry><entry>null</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>所编辑的项目的项目编辑器实例。</entry></row><row><entry><codeph>localX</codeph></entry><entry>NaN</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>数据提供者中项目的索引（从零开始）。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>DataGridEvent.ITEM_FOCUS_IN</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:ITEM_FOCUS_OUT"><apiName>ITEM_FOCUS_OUT</apiName><shortdesc>
      DataGridEvent.ITEM_FOCUS_OUT 常量可为 itemFocusOut 事件定义事件对象的 type 属性的值，指示项目已失去焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFocusOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
      DataGridEvent.ITEM_FOCUS_OUT 常量可为 <codeph>itemFocusOut</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示项目已失去焦点。 
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> DataGrid 对象的 <codeph>columns</codeph> 数组中项目列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>dataField</codeph></entry><entry>null</entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>所编辑的项目的项目编辑器实例。</entry></row><row><entry><codeph>localX</codeph></entry><entry>NaN</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>数据提供者中项目的索引（从零开始）。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>DataGridEvent.ITEM_FOCUS_OUT</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:columnIndex"><apiName>columnIndex</apiName><shortdesc>
      与事件关联的列在 DataGrid 对象的 columns 数组中从零开始的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      与事件关联的列在 DataGrid 对象的 <codeph>columns</codeph> 数组中从零开始的索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:dataField"><apiName>dataField</apiName><shortdesc>
      与列关联的数据中的字段或属性的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      与列关联的数据中的字段或属性的名称。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:itemRenderer"><apiName>itemRenderer</apiName><shortdesc>
      用于正在进行编辑的项目的项呈示器，或者正在单击或拉伸的标题渲染器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      用于正在进行编辑的项目的项呈示器，或者正在单击或拉伸的标题渲染器。您可以使用此属性访问数据提供程序。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:localX"><apiName>localX</apiName><shortdesc>
      列的 x 位置；用于重播列拉伸事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      列的 x 位置；用于重播列拉伸事件。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DataGridEvent:reason"><apiName>reason</apiName><shortdesc>
      分派 itemEditEnd 事件的原因。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      分派 <codeph>itemEditEnd</codeph> 事件的原因。仅对类型为 <codeph>ITEM_EDIT_END</codeph> 的事件有效。DataGridEventReason 类中定义的可能值。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#DataGridEventReason"><linktext>DataGridEventReason</linktext></link></related-links></apiValue><apiValue id="mx.events:DataGridEvent:rowIndex"><apiName>rowIndex</apiName><shortdesc>
      数据提供者中项目的索引（从零开始）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      数据提供者中项目的索引（从零开始）。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:BrowserChangeEvent"><apiName>BrowserChangeEvent</apiName><shortdesc>
  BrowserChangeEvent 类代表特定于 BrowserManager 的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  BrowserChangeEvent 类代表特定于 BrowserManager 的事件对象。
 
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.events:BrowserChangeEvent:APPLICATION_URL_CHANGE_applicationURLChange"><apiName>applicationURLChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:BrowserChangeEvent:APPLICATION_URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:BrowserChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:BrowserChangeEvent:BROWSER_URL_CHANGE_browserURLChange"><apiName>browserURLChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:BrowserChangeEvent:BROWSER_URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:BrowserChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:BrowserChangeEvent:URL_CHANGE_urlChange"><apiName>urlChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:BrowserChangeEvent:URL_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:BrowserChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:BrowserChangeEvent:BrowserChangeEvent"><apiName>BrowserChangeEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>浏览器中的当前 URL。
      
      </apiDesc></apiParam><apiParam><apiItemName>lastURL</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>浏览器中以前的 URL。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:BrowserChangeEvent:APPLICATION_URL_CHANGE"><apiName>APPLICATION_URL_CHANGE</apiName><shortdesc>
      BrowserChangeEvent.APPLICATION_URL_CHANGE 常量可为 applicationURLChange 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>applicationURLChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>BrowserChangeEvent.APPLICATION_URL_CHANGE</codeph> 常量可为 <codeph>applicationURLChange</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>lastURL</codeph></entry><entry>BrowserManager 的 <codeph>url</codeph> 属性先前的值。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>url</codeph></entry><entry>BrowserManager 的 <codeph>url</codeph> 属性的新值。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:BrowserChangeEvent:BROWSER_URL_CHANGE"><apiName>BROWSER_URL_CHANGE</apiName><shortdesc>
      BrowserChangeEvent.BROWSER_URL_CHANGE 常量可为 browserURLChange 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>browserURLChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>BrowserChangeEvent.BROWSER_URL_CHANGE</codeph> 常量可为 <codeph>browserURLChange</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>lastURL</codeph></entry><entry>BrowserManager 的 <codeph>url</codeph> 属性先前的值。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>url</codeph></entry><entry>BrowserManager 的 <codeph>url</codeph> 属性的新值。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:BrowserChangeEvent:URL_CHANGE"><apiName>URL_CHANGE</apiName><shortdesc>
      BrowserChangeEvent.URL_CHANGE 常量可为 urlChange 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>urlChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>BrowserChangeEvent.URL_CHANGE</codeph> 常量可为 <codeph>urlChange</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>lastURL</codeph></entry><entry>BrowserManager 的 <codeph>url</codeph> 属性先前的值。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>url</codeph></entry><entry>BrowserManager 的 <codeph>url</codeph> 属性的新值。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:BrowserChangeEvent:lastURL"><apiName>lastURL</apiName><shortdesc>
      BrowserManager 中 url 属性先前的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      BrowserManager 中 <codeph>url</codeph> 属性先前的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:BrowserChangeEvent:url"><apiName>url</apiName><shortdesc>
      BrowserManager 中 url 属性的新值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      BrowserManager 中 <codeph>url</codeph> 属性的新值。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:CuePointEvent"><apiName>CuePointEvent</apiName><shortdesc>
  CuePointEvent 类代表传递到 VideoDisplay 控件分派的提示点事件的事件侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  CuePointEvent 类代表传递到 VideoDisplay 控件分派的提示点事件的事件侦听器的事件对象。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#VideoDisplay"><linktext>mx.controls.VideoDisplay</linktext></link></related-links><adobeApiEvent id="mx.events:CuePointEvent:CUE_POINT_cuePoint"><apiName>cuePoint</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:CuePointEvent:CUE_POINT</apiEventType><adobeApiEventClassifier>mx.events:CuePointEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:CuePointEvent:CuePointEvent"><apiName>CuePointEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cuePointName</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>提示点的名称。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cuePointTime</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>提示点的时间（以秒为单位）。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cuePointType</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>字符串 <codeph>"actionscript"</codeph>。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:CuePointEvent:CUE_POINT"><apiName>CUE_POINT</apiName><shortdesc>
	  CuePointEvent.CUE_POINT 常量可为 cuePoint 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cuePoint</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>CuePointEvent.CUE_POINT</codeph> 常量可为 <codeph>cuePoint</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>cuePointName</codeph></entry><entry>提示点的名称。</entry></row><row><entry><codeph>cuePointTime</codeph></entry><entry>提示点的时间（以秒为单位）。</entry></row><row><entry><codeph>cuePointType</codeph></entry><entry>字符串 <codeph>"actionscript"</codeph>。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CuePointEvent:cuePointName"><apiName>cuePointName</apiName><shortdesc>
	  引发事件的提示点的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  引发事件的提示点的名称。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CuePointEvent:cuePointTime"><apiName>cuePointTime</apiName><shortdesc>
	  引发事件的提示点的时间（以秒为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  引发事件的提示点的时间（以秒为单位）。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CuePointEvent:cuePointType"><apiName>cuePointType</apiName><shortdesc>
	  字符串“actionscript”。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  字符串 <codeph>"actionscript"</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:SandboxMouseEvent"><apiName>SandboxMouseEvent</apiName><shortdesc>
  这是一个在不同安全沙箱中的应用程序之间发送的事件，用于提醒侦听器另一个安全沙箱中的鼠标活动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  这是一个在不同安全沙箱中的应用程序之间发送的事件，用于提醒侦听器另一个安全沙箱中的鼠标活动。为安全起见，SandboxMouseEvent 中不发送 MouseEvent 的某些字段。
  
  </apiDesc></apiClassifierDetail><apiConstructor id="mx.events:SandboxMouseEvent:SandboxMouseEvent"><apiName>SandboxMouseEvent</apiName><shortdesc> 
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示是否已按下 <codeph>Ctrl</codeph> 键。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示是否已按下 <codeph>Alt</codeph> 键。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示是否已按下 <codeph>Shift</codeph> 键。	 
	  
	  </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指示鼠标主按键是已按下 (true) 还是未按下 (false)。
	  
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc> 
	  构造函数。
	  
	  </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.events:SandboxMouseEvent:marshal"><apiName>marshal</apiName><shortdesc>
      将 SWFBridgeRequest 从远程 ApplicationDomain 封送到当前 ApplicationDomain 中。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>调用方的 ApplicationDomain 中创建的 SandboxMouseEvent。
      
      </apiDesc><apiOperationClassifier>mx.events:SandboxMouseEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiType value="flash.events:Event"/><apiDesc>可能已在不同的 ApplicationDomain 中创建的 SWFBridgeRequest。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      将 SWFBridgeRequest 从远程 ApplicationDomain 封送到当前 ApplicationDomain 中。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.events:SandboxMouseEvent:CLICK_SOMEWHERE"><apiName>CLICK_SOMEWHERE</apiName><shortdesc>
	  在沙箱之外的某处单击了鼠标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>clickSomewhere</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  在沙箱之外的某处单击了鼠标。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SandboxMouseEvent:DOUBLE_CLICK_SOMEWHERE"><apiName>DOUBLE_CLICK_SOMEWHERE</apiName><shortdesc>
	  在沙箱之外的某处双击了鼠标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>coubleClickSomewhere</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  在沙箱之外的某处双击了鼠标。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SandboxMouseEvent:MOUSE_DOWN_SOMEWHERE"><apiName>MOUSE_DOWN_SOMEWHERE</apiName><shortdesc>
	  在沙箱之外的某处按下了鼠标按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDownSomewhere</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  在沙箱之外的某处按下了鼠标按钮。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SandboxMouseEvent:MOUSE_MOVE_SOMEWHERE"><apiName>MOUSE_MOVE_SOMEWHERE</apiName><shortdesc>
	  在沙箱之外的某处移动了鼠标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMoveSomewhere</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  在沙箱之外的某处移动了鼠标。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SandboxMouseEvent:MOUSE_UP_SOMEWHERE"><apiName>MOUSE_UP_SOMEWHERE</apiName><shortdesc>
	  在沙箱之外的某处释放了鼠标按钮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUpSomewhere</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  在沙箱之外的某处释放了鼠标按钮。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SandboxMouseEvent:MOUSE_WHEEL_SOMEWHERE"><apiName>MOUSE_WHEEL_SOMEWHERE</apiName><shortdesc>
	  在沙箱之外的某处旋转了鼠标滚轮。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseWheelSomewhere</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  在沙箱之外的某处旋转了鼠标滚轮。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SandboxMouseEvent:altKey"><apiName>altKey</apiName><shortdesc>
	  指示是否按下 Alt 键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  指示是否已按下 <codeph>Alt</codeph> 键。
	  
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/altkey"><linktext>flash.events.MouseEvent.altkey</linktext></link></related-links></apiValue><apiValue id="mx.events:SandboxMouseEvent:buttonDown"><apiName>buttonDown</apiName><shortdesc>
	  指示鼠标主按键是已按下 (true) 还是未按下 (false)。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  指示鼠标主按键是已按下 (true) 还是未按下 (false)。
	  
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/buttonDown"><linktext>flash.events.MouseEvent.buttonDown</linktext></link></related-links></apiValue><apiValue id="mx.events:SandboxMouseEvent:ctrlKey"><apiName>ctrlKey</apiName><shortdesc>
	  指示是否已按下 Ctrl 键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  指示是否已按下 <codeph>Ctrl</codeph> 键。
	  
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/ctrlKey"><linktext>flash.events.MouseEvent.ctrlKey</linktext></link></related-links></apiValue><apiValue id="mx.events:SandboxMouseEvent:shiftKey"><apiName>shiftKey</apiName><shortdesc>
	  指示是否按下 Shift 键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  指示是否已按下 <codeph>Shift</codeph> 键。
	  
	  </apiDesc></apiValueDetail><related-links><link href="" invalidHref="flash.events.xml#MouseEvent/shiftKey"><linktext>flash.events.MouseEvent.shiftKey</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.events:ListEventReason"><apiName>ListEventReason</apiName><shortdesc>
  用于 type 属性的值为 ListEvent.ITEM_EDIT_END 的 ListEvent 对象的 reason 属性的值的常数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  用于 <codeph>type</codeph> 属性的值为 <codeph>ListEvent.ITEM_EDIT_END</codeph> 的 ListEvent 对象的 <codeph>reason</codeph> 属性的值的常量。

  

  </apiDesc></apiClassifierDetail><apiValue id="mx.events:ListEventReason:CANCELLED"><apiName>CANCELLED</apiName><shortdesc>
      指定用户取消了编辑，并且不希望保存已编辑的数据。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancelled</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定用户取消了编辑，并且不希望保存已编辑的数据。即使从 <codeph>itemEditEnd</codeph> 事件的事件侦听器内调用 <codeph>preventDefault()</codeph> 方法，Flex 也仍旧调用 <codeph>destroyItemEditor()</codeph> 方法来关闭编辑器。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEventReason:NEW_ROW"><apiName>NEW_ROW</apiName><shortdesc>
      指定用户将焦点移动到该控件中的新行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>newRow</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定用户将焦点移动到该控件中的新行。在事件侦听器中，可以更改焦点，或者阻止更改焦点。例如，事件侦听器可以检查用户是否为当前编辑的项目输入了有效值。如果输入值无效，可以通过调用 <codeph>preventDefault()</codeph> 方法阻止用户移动到新的项目。在这种情况下，项目编辑器保持打开状态，用户继续编辑当前的项目。如果调用 <codeph>preventDefault()</codeph> 方法并调用 <codeph>destroyItemEditor()</codeph> 方法，则会阻止移动到新的项目，但是项目编辑器关闭。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEventReason:OTHER"><apiName>OTHER</apiName><shortdesc>
      指定 list 控件失去焦点、已滚动，或者由于某种原因处于不允许编辑的状态。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>other</apiData><apiType value="String"/></apiValueDef><apiDesc>
      指定 list 控件失去焦点、已滚动，或者由于某种原因处于不允许编辑的状态。即使从 <codeph>itemEditEnd</codeph> 事件的事件侦听器内调用 <codeph>preventDefault()</codeph> 方法，Flex 也仍旧调用 <codeph>destroyItemEditor()</codeph> 方法来关闭编辑器。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:RSLEvent"><apiName>RSLEvent</apiName><shortdesc>
  RSLEvent 类代表 Preloader 类下载 RSL 时 DownloadProgressBar 类使用的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ProgressEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
  RSLEvent 类代表 Preloader 类下载 RSL 时 DownloadProgressBar 类使用的事件对象。 
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.preloaders.xml#DownloadProgressBar"><linktext>mx.preloaders.DownloadProgressBar</linktext></link><link href="mx.preloaders.xml#Preloader"><linktext>mx.preloaders.Preloader</linktext></link></related-links><adobeApiEvent id="mx.events:RSLEvent:RSL_COMPLETE_rslComplete"><apiName>rslComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:RSLEvent:RSL_COMPLETE</apiEventType><adobeApiEventClassifier>mx.events:RSLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:RSLEvent:RSL_ERROR_rslError"><apiName>rslError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:RSLEvent:RSL_ERROR</apiEventType><adobeApiEventClassifier>mx.events:RSLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:RSLEvent:RSL_PROGRESS_rslProgress"><apiName>rslProgress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:RSLEvent:RSL_PROGRESS</apiEventType><adobeApiEventClassifier>mx.events:RSLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:RSLEvent:RSLEvent"><apiName>RSLEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件的类型。可能的值包括：
	  <ul>
	     <li>“rslProgress”(<codeph>RSLEvent.RSL_PROGRESS</codeph>)；</li>
	     <li>“rslComplete”(<codeph>RSLEvent.RSL_COMPLETE</codeph>)；</li>
	     <li>“rslError”(<codeph>RSLEvent.RSL_ERROR</codeph>)；</li>
	  </ul>
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc> 确定 Event 对象是否参与事件流的冒泡阶段。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>确定是否可以取消 Event 对象。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>在侦听器处理事件时加载的字节数。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>如果加载进程成功，最终将加载的字节总数。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>rslIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>相对于总数的 RSL 的索引编号。这应该是介于 0 和 <codeph>total - 1</codeph> 之间的值。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>rslTotal</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>正在加载的 RSL 总数。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>url</apiItemName><apiType value="flash.net:URLRequest"/><apiData>null</apiData><apiDesc>RSL 的位置。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>errorText</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>类型为 RSLEvent.RSL_ERROR 时显示的错误的错误消息。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>isResourceModule</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>如果在加载 ResourceModule 时发生该事件，则为 true。
	 
	  </apiDesc></apiParam><apiTipTexts><apiTipText><codeph>RSLEvent</codeph> 对象的构造函数。
	  
	  </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:RSLEvent:RSL_COMPLETE"><apiName>RSL_COMPLETE</apiName><shortdesc>
	  当 RSL 完成下载时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rslComplete</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  当 RSL 完成下载时分派。<codeph>RSLEvent.RSL_COMPLETE</codeph> 常量可为 <codeph>rslComplete</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>加载的字节数。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>要加载的字节总数。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry><entry>空</entry></row><row><entry><codeph>isResourceModule</codeph></entry><entry>如果已加载 resourceModule 而不是 RSL，则为 true</entry></row><row><entry><codeph>rslIndex</codeph></entry><entry>当前正在下载的 RSL 的索引编号。 </entry></row><row><entry><codeph>rslTotal</codeph></entry><entry>下载的 RSL 总数。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>url</codeph></entry><entry>表示正在下载的 RSL 位置的 URLRequest 对象。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:RSLEvent:RSL_ERROR"><apiName>RSL_ERROR</apiName><shortdesc>
	  下载 RSL 出错时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rslError</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  下载 RSL 出错时分派。<codeph>RSLEvent.RSL_ERROR</codeph> 常量可为 <codeph>rslError</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
     
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>空</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>空</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry>错误消息。<entry/></row><row><entry><codeph>isResourceModule</codeph></entry><entry>如果已加载 resourceModule 而不是 RSL，则为 true</entry></row><row><entry><codeph>rslIndex</codeph></entry><entry>当前正在下载的 RSL 的索引编号。 </entry></row><row><entry><codeph>rslTotal</codeph></entry><entry>下载的 RSL 总数。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>url</codeph></entry><entry>表示正在下载的 RSL 位置的 URLRequest 对象。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:RSLEvent:RSL_PROGRESS"><apiName>RSL_PROGRESS</apiName><shortdesc>
	  下载 RSL 时分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rslProgress</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  下载 RSL 时分派。<codeph>RSLEvent.RSL_PROGRESS</codeph> 常量可为 <codeph>rslProgress</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>加载的字节数。</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>要加载的字节总数。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>errorText</codeph></entry>空<entry/></row><row><entry><codeph>isResourceModule</codeph></entry><entry>如果已加载 resourceModule 而不是 RSL，则为 true</entry></row><row><entry><codeph>rslIndex</codeph></entry><entry>当前正在下载的 RSL 的索引编号。 </entry></row><row><entry><codeph>rslTotal</codeph></entry><entry>下载的 RSL 总数。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>url</codeph></entry><entry>表示正在下载的 RSL 位置的 URLRequest 对象。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:RSLEvent:errorText"><apiName>errorText</apiName><shortdesc>
	  type 为 RSL_ERROR 时的错误消息；在其它情况下为 null；
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  type 为 RSL_ERROR 时的错误消息；在其它情况下为 null；
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:RSLEvent:isResourceModule"><apiName>isResourceModule</apiName><shortdesc>
	  如果该事件用于加载 resourceModule 而不是 RSL，则为 true
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
	  如果该事件用于加载 resourceModule 而不是 RSL，则为 true
	 </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:RSLEvent:loaderInfo"><apiName>loaderInfo</apiName><shortdesc>
      与此事件相关联的 loaderInfo。</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.display:LoaderInfo"/></apiValueDef><apiDesc>
      与此事件相关联的 loaderInfo。这是仅在 RSLEvent.RSL_COMPLETE 事件中设置的。否则，loaderInfo 将为 null。
     </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:RSLEvent:rslIndex"><apiName>rslIndex</apiName><shortdesc>
	  当前正在下载的 RSL 的索引编号。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	  当前正在下载的 RSL 的索引编号。这是介于 0 和 <codeph>rslTotal - 1</codeph> 之间的数字。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:RSLEvent:rslTotal"><apiName>rslTotal</apiName><shortdesc>
	  preloader 下载的 RSL 总数
	  
	  </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	  preloader 下载的 RSL 总数
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:RSLEvent:url"><apiName>url</apiName><shortdesc>
	  表示正在下载的 RSL 位置的 URLRequest 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.net:URLRequest"/></apiValueDef><apiDesc>
	  表示正在下载的 RSL 位置的 URLRequest 对象。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ToolTipEvent"><apiName>ToolTipEvent</apiName><shortdesc>
  ToolTipEvent 类代表由 ToolTipManager 类生成的 ToolTip 事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  ToolTipEvent 类代表由 ToolTipManager 类生成的 ToolTip 事件。ToolTipManager 类调用应用提示的对象的 <codeph>dispatchEvent()</codeph> 方法来分派事件。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.managers.xml#ToolTipManager"><linktext>mx.managers.ToolTipManager</linktext></link><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><adobeApiEvent id="mx.events:ToolTipEvent:TOOL_TIP_CREATE_toolTipCreate"><apiName>toolTipCreate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ToolTipEvent:TOOL_TIP_CREATE</apiEventType><adobeApiEventClassifier>mx.events:ToolTipEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ToolTipEvent:TOOL_TIP_END_toolTipEnd"><apiName>toolTipEnd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ToolTipEvent:TOOL_TIP_END</apiEventType><adobeApiEventClassifier>mx.events:ToolTipEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ToolTipEvent:TOOL_TIP_HIDE_toolTipHide"><apiName>toolTipHide</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ToolTipEvent:TOOL_TIP_HIDE</apiEventType><adobeApiEventClassifier>mx.events:ToolTipEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ToolTipEvent:TOOL_TIP_SHOW_toolTipShow"><apiName>toolTipShow</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ToolTipEvent:TOOL_TIP_SHOW</apiEventType><adobeApiEventClassifier>mx.events:ToolTipEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ToolTipEvent:TOOL_TIP_SHOWN_toolTipShown"><apiName>toolTipShown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ToolTipEvent:TOOL_TIP_SHOWN</apiEventType><adobeApiEventClassifier>mx.events:ToolTipEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ToolTipEvent:TOOL_TIP_START_toolTipStart"><apiName>toolTipStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ToolTipEvent:TOOL_TIP_START</apiEventType><adobeApiEventClassifier>mx.events:ToolTipEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:ToolTipEvent:ToolTipEvent"><apiName>ToolTipEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>toolTip</apiItemName><apiOperationClassifier>mx.core:IToolTip</apiOperationClassifier><apiData>null</apiData><apiDesc>应用此事件的 ToolTip 对象。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:ToolTipEvent:TOOL_TIP_CREATE"><apiName>TOOL_TIP_CREATE</apiName><shortdesc>
	  ToolTipEvent.TOOL_TIP_CREATE 常量可为 toolTipCreate 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toolTipCreate</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ToolTipEvent.TOOL_TIP_CREATE</codeph> 常量可为 <codeph>toolTipCreate</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。 
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>工具提示 (tooltip)</codeph></entry><entry>应用此事件的 ToolTip 对象。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ToolTipEvent:TOOL_TIP_END"><apiName>TOOL_TIP_END</apiName><shortdesc>
	  ToolTipEvent.TOOL_TIP_END 常量可为 toolTipEnd 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toolTipEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ToolTipEvent.TOOL_TIP_END</codeph> 常量可为 <codeph>toolTipEnd</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。 
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>工具提示 (tooltip)</codeph></entry><entry>应用此事件的 ToolTip 对象。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ToolTipEvent:TOOL_TIP_HIDE"><apiName>TOOL_TIP_HIDE</apiName><shortdesc>
	  ToolTipEvent.TOOL_TIP_HIDE 常量可为 toolTipHide 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toolTipHide</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ToolTipEvent.TOOL_TIP_HIDE</codeph> 常量可为 <codeph>toolTipHide</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。 
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>工具提示 (tooltip)</codeph></entry><entry>应用此事件的 ToolTip 对象。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ToolTipEvent:TOOL_TIP_SHOW"><apiName>TOOL_TIP_SHOW</apiName><shortdesc>
	  ToolTipEvent.TOOL_TIP_SHOW 常量可为 toolTipShow 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toolTipShow</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ToolTipEvent.TOOL_TIP_SHOW</codeph> 常量可为 <codeph>toolTipShow</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。 
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>工具提示 (tooltip)</codeph></entry><entry>应用此事件的 ToolTip 对象。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ToolTipEvent:TOOL_TIP_SHOWN"><apiName>TOOL_TIP_SHOWN</apiName><shortdesc>
	  ToolTipEvent.TOOL_TIP_SHOWN 常量可为 toolTipShown 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toolTipShown</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ToolTipEvent.TOOL_TIP_SHOWN</codeph> 常量可为 <codeph>toolTipShown</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。 
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>工具提示 (tooltip)</codeph></entry><entry>应用此事件的 ToolTip 对象。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ToolTipEvent:TOOL_TIP_START"><apiName>TOOL_TIP_START</apiName><shortdesc>
	  ToolTipEvent.TOOL_TIP_START 常量可为 toolTipStart 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>toolTipStart</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ToolTipEvent.TOOL_TIP_START</codeph> 常量可为 <codeph>toolTipStart</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。 
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>工具提示 (tooltip)</codeph></entry><entry>应用此事件的 ToolTip 对象。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ToolTipEvent:toolTip"><apiName>toolTip</apiName><shortdesc>
	  应用此事件的 ToolTip 对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.core:IToolTip</apiValueClassifier></apiValueDef><apiDesc>
	  应用此事件的 ToolTip 对象。通常情况下，此对象为 ToolTip 对象的实例，但也可以为任一 UIComponent 对象。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:SliderEvent"><apiName>SliderEvent</apiName><shortdesc>
  SliderEvent 类代表传递给 HSlider 和 VSlider 类的事件的事件侦听器的事件对象，这些事件包括 change、thumbDrag、thumbPress 和 thumbRelease。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  SliderEvent 类代表传递给 HSlider 和 VSlider 类的事件的事件侦听器的事件对象，这些事件包括 <codeph>change</codeph>、<codeph>thumbDrag</codeph>、<codeph>thumbPress</codeph> 和 <codeph>thumbRelease</codeph>。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#HSlider"><linktext>mx.controls.HSlider</linktext></link><link href="mx.controls.xml#VSlider"><linktext>mx.controls.VSlider</linktext></link><link href="mx.controls.sliderClasses.xml#Slider"><linktext>mx.controls.sliderClasses.Slider</linktext></link><link href="mx.events.xml#SliderEventClickTarget"><linktext>mx.events.SliderEventClickTarget</linktext></link></related-links><adobeApiEvent id="mx.events:SliderEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:SliderEvent:CHANGE</apiEventType><adobeApiEventClassifier>mx.events:SliderEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:SliderEvent:THUMB_DRAG_thumbDrag"><apiName>thumbDrag</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:SliderEvent:THUMB_DRAG</apiEventType><adobeApiEventClassifier>mx.events:SliderEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:SliderEvent:THUMB_PRESS_thumbPress"><apiName>thumbPress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:SliderEvent:THUMB_PRESS</apiEventType><adobeApiEventClassifier>mx.events:SliderEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:SliderEvent:THUMB_RELEASE_thumbRelease"><apiName>thumbRelease</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:SliderEvent:THUMB_RELEASE</apiEventType><adobeApiEventClassifier>mx.events:SliderEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:SliderEvent:SliderEvent"><apiName>SliderEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>thumbIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>其位置发生更改的缩略图的从零开始的索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>滑块的新值。
     
      </apiDesc></apiParam><apiParam><apiItemName>triggerEvent</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>输入操作的类型。该值为 <codeph>InteractionInputType.MOUSE</codeph> 或 <codeph>InteractionInputType.KEYBOARD</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>clickTarget</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>是否已按下滑块轨道或滑块缩略图。
     
      </apiDesc></apiParam><apiParam><apiItemName>keyCode</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>如果事件是由按键触发的，则为该键的键盘码。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:SliderEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
      SliderEvent.CHANGE 常量可为 change 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>SliderEvent.CHANGE</codeph> 常量可为 <codeph>change</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。 
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>clickTarget</codeph></entry><entry>指定是否已按下滑块轨道或滑块缩略图。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>keyCode</codeph></entry><entry>如果事件是由按键触发的，则为该键的键盘码。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>thumbIndex</codeph></entry><entry>其位置发生更改的缩略图的从零开始的索引。</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>包含指示输入操作类型的值。该值为 <codeph>InteractionInputType.MOUSE</codeph> 或 <codeph>InteractionInputType.KEYBOARD</codeph>。</entry></row><row><entry><codeph>value</codeph></entry><entry>滑块的新值。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SliderEvent:THUMB_DRAG"><apiName>THUMB_DRAG</apiName><shortdesc>
      SliderEvent.THUMB_DRAG 常量可为 thumbDrag 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbDrag</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>SliderEvent.THUMB_DRAG</codeph> 常量可为 <codeph>thumbDrag</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。 
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>clickTarget</codeph></entry><entry>指定是否已按下滑块轨道或滑块缩略图。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>keyCode</codeph></entry><entry>如果事件是由按键触发的，则为该键的键盘码。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>thumbIndex</codeph></entry><entry>其位置发生更改的缩略图的从零开始的索引。</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>包含指示输入操作类型的值。该值为 <codeph>InteractionInputType.MOUSE</codeph> 或 <codeph>InteractionInputType.KEYBOARD</codeph>。</entry></row><row><entry><codeph>value</codeph></entry><entry>滑块的新值。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SliderEvent:THUMB_PRESS"><apiName>THUMB_PRESS</apiName><shortdesc>
      SliderEvent.THUMB_PRESS 常量可为 thumbPress 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbPress</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>SliderEvent.THUMB_PRESS</codeph> 常量可为 <codeph>thumbPress</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。 
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>clickTarget</codeph></entry><entry>指定是否已按下滑块轨道或滑块缩略图。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>keyCode</codeph></entry><entry>如果事件是由按键触发的，则为该键的键盘码。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>thumbIndex</codeph></entry><entry>其位置发生更改的缩略图的从零开始的索引。</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>包含指示输入操作类型的值。该值为 <codeph>InteractionInputType.MOUSE</codeph> 或 <codeph>InteractionInputType.KEYBOARD</codeph>。</entry></row><row><entry><codeph>value</codeph></entry><entry>滑块的新值。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SliderEvent:THUMB_RELEASE"><apiName>THUMB_RELEASE</apiName><shortdesc>
      SliderEvent.THUMB_RELEASE 常量可为 thumbRelease 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbRelease</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>SliderEvent.THUMB_RELEASE</codeph> 常量可为 <codeph>thumbRelease</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。 
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>clickTarget</codeph></entry><entry>指定是否已按下滑块轨道或滑块缩略图。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>keyCode</codeph></entry><entry>如果事件是由按键触发的，则为该键的键盘码。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>thumbIndex</codeph></entry><entry>其位置发生更改的缩略图的从零开始的索引。</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>包含指示输入操作类型的值。该值为 <codeph>InteractionInputType.MOUSE</codeph> 或 <codeph>InteractionInputType.KEYBOARD</codeph>。</entry></row><row><entry><codeph>value</codeph></entry><entry>滑块的新值。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SliderEvent:clickTarget"><apiName>clickTarget</apiName><shortdesc>
      指定是否已按下滑块轨道或滑块缩略图。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      指定是否已按下滑块轨道或滑块缩略图。此属性可以具有以下值之一：<codeph>SliderEventClickTarget.THUMB</codeph> 或者 <codeph>SliderEventClickTarget.TRACK</codeph>。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#SliderEventClickTarget"><linktext>mx.events.SliderEventClickTarget</linktext></link></related-links></apiValue><apiValue id="mx.events:SliderEvent:keyCode"><apiName>keyCode</apiName><shortdesc>
      如果事件是由按键触发的，则为该键的键盘码。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      如果事件是由按键触发的，则为该键的键盘码。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SliderEvent:thumbIndex"><apiName>thumbIndex</apiName><shortdesc>
      其位置发生更改的缩略图的从零开始的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      其位置发生更改的缩略图的从零开始的索引。如果仅有一个缩略图，则此值是 0。如果有两个缩略图，则此值是 0 或 1。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SliderEvent:triggerEvent"><apiName>triggerEvent</apiName><shortdesc>
      指示输入操作的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      指示输入操作的类型。该值为 <codeph>InteractionInputType.MOUSE</codeph> 或 <codeph>InteractionInputType.KEYBOARD</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SliderEvent:value"><apiName>value</apiName><shortdesc>
      滑块的新值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
      滑块的新值。  
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:DividerEvent"><apiName>DividerEvent</apiName><shortdesc>
  代表按下、拖动或者释放分隔符时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  代表按下、拖动或者释放分隔符时分派的事件。这些事件由 DividedBox 控件及其子项分派。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.containers.xml#DividedBox"><linktext>mx.containers.DividedBox</linktext></link></related-links><adobeApiEvent id="mx.events:DividerEvent:DIVIDER_DRAG_dividerDrag"><apiName>dividerDrag</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DividerEvent:DIVIDER_DRAG</apiEventType><adobeApiEventClassifier>mx.events:DividerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DividerEvent:DIVIDER_PRESS_dividerPress"><apiName>dividerPress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DividerEvent:DIVIDER_PRESS</apiEventType><adobeApiEventClassifier>mx.events:DividerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DividerEvent:DIVIDER_RELEASE_dividerRelease"><apiName>dividerRelease</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DividerEvent:DIVIDER_RELEASE</apiEventType><adobeApiEventClassifier>mx.events:DividerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:DividerEvent:DividerEvent"><apiName>DividerEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>dividerIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>生成事件的分隔符的索引。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>拖动分隔符的像素数目。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:DividerEvent:DIVIDER_DRAG"><apiName>DIVIDER_DRAG</apiName><shortdesc>
	  DividerEvent.DIVIDER_DRAG 常量可为 dividerDrag 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dividerDrag</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DividerEvent.DIVIDER_DRAG</codeph> 常量可为 <codeph>dividerDrag</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
	     
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>delta</codeph></entry><entry>包含拖动分隔符的像素数目。正数表示向右或底部的拖动，负数表示向左或顶部的拖动。</entry></row><row><entry><codeph>dividerIndex</codeph></entry><entry>包含正在拖动的分隔符的从零开始的索引。最左边或最上面的分隔符的 <codeph>dividerIndex</codeph> 为 0。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DividerEvent:DIVIDER_PRESS"><apiName>DIVIDER_PRESS</apiName><shortdesc>
	  DividerEvent.DIVIDER_PRESS 常量可为 dividerPress 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dividerPress</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DividerEvent.DIVIDER_PRESS</codeph> 常量可为 <codeph>dividerPress</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
	     
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>delta</codeph></entry><entry>包含拖动分隔符的像素数目。正数表示向右或底部的拖动，负数表示向左或顶部的拖动。</entry></row><row><entry><codeph>dividerIndex</codeph></entry><entry>包含正在拖动的分隔符的从零开始的索引。最左边或最上面的分隔符的 <codeph>dividerIndex</codeph> 为 0。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DividerEvent:DIVIDER_RELEASE"><apiName>DIVIDER_RELEASE</apiName><shortdesc>
	  DividerEvent.DIVIDER_RELEASE 常量可为 dividerRelease 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>dividerRelease</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DividerEvent.DIVIDER_RELEASE</codeph> 常量可为 <codeph>dividerRelease</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
	     
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>delta</codeph></entry><entry>包含拖动分隔符的像素数目。正数表示向右或底部的拖动，负数表示向左或顶部的拖动。</entry></row><row><entry><codeph>dividerIndex</codeph></entry><entry>包含正在拖动的分隔符的从零开始的索引。最左边或最上面的分隔符的 <codeph>dividerIndex</codeph> 为 0。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DividerEvent:delta"><apiName>delta</apiName><shortdesc>
	  分隔符拖动的像素数目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  分隔符拖动的像素数目。正数表示向右或底部的拖动，负数表示向左或顶部的拖动。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DividerEvent:dividerIndex"><apiName>dividerIndex</apiName><shortdesc>
	  按下或拖动的分隔符的从零开始的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
	  按下或拖动的分隔符的从零开始的索引。最左边或最上面的分隔符的 <codeph>dividerIndex</codeph> 为 0。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ScrollEventDetail"><apiName>ScrollEventDetail</apiName><shortdesc>
  表示 ScrollEvent 的 detail 属性的值的常数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  表示 ScrollEvent 的 <codeph>detail</codeph> 属性的值的常量。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#ScrollEvent"><linktext>mx.events.ScrollEvent</linktext></link></related-links><apiValue id="mx.events:ScrollEventDetail:AT_BOTTOM"><apiName>AT_BOTTOM</apiName><shortdesc>
	  指示滚动条在其滚动范围的底部。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>atBottom</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条在其滚动范围的底部。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:AT_LEFT"><apiName>AT_LEFT</apiName><shortdesc>
	  指示滚动条在其滚动范围的左边。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>atLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条在其滚动范围的左边。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:AT_RIGHT"><apiName>AT_RIGHT</apiName><shortdesc>
	  指示滚动条在其滚动范围的右边。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>atRight</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条在其滚动范围的右边。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:AT_TOP"><apiName>AT_TOP</apiName><shortdesc>
	  指示滚动条在其滚动范围的顶部。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>atTop</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条在其滚动范围的顶部。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:LINE_DOWN"><apiName>LINE_DOWN</apiName><shortdesc>
	  指示滚动条向下移动一行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lineDown</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条向下移动一行。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:LINE_LEFT"><apiName>LINE_LEFT</apiName><shortdesc>
	  指示滚动条向左移动一行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lineLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条向左移动一行。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:LINE_RIGHT"><apiName>LINE_RIGHT</apiName><shortdesc>
	  指示滚动条向右移动一行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lineRight</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条向右移动一行。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:LINE_UP"><apiName>LINE_UP</apiName><shortdesc>
	  指示滚动条向上移动一行。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lineUp</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条向上移动一行。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:PAGE_DOWN"><apiName>PAGE_DOWN</apiName><shortdesc>
	  指示滚动条向下移动一页。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pageDown</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条向下移动一页。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:PAGE_LEFT"><apiName>PAGE_LEFT</apiName><shortdesc>
	  指示滚动条向左移动一页。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pageLeft</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条向左移动一页。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:PAGE_RIGHT"><apiName>PAGE_RIGHT</apiName><shortdesc>
	  指示滚动条向右移动一页。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pageRight</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条向右移动一页。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:PAGE_UP"><apiName>PAGE_UP</apiName><shortdesc>
	  指示滚动条向上移动一页。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pageUp</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条向上移动一页。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:THUMB_POSITION"><apiName>THUMB_POSITION</apiName><shortdesc>
	  指示滚动条缩略图停止移动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbPosition</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条缩略图停止移动。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDetail:THUMB_TRACK"><apiName>THUMB_TRACK</apiName><shortdesc>
	  指示滚动条缩略图正在移动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumbTrack</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示滚动条缩略图正在移动。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:TreeEvent"><apiName>TreeEvent</apiName><shortdesc>
  TreeEvent 类代表传递到与树中活动（如打开或关闭树分支时）相关联的事件的事件侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  TreeEvent 类代表传递到与树中活动（如打开或关闭树分支时）相关联的事件的事件侦听器的事件对象。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#Tree"><linktext>mx.controls.Tree</linktext></link></related-links><adobeApiEvent id="mx.events:TreeEvent:ITEM_CLOSE_itemClose"><apiName>itemClose</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:TreeEvent:ITEM_CLOSE</apiEventType><adobeApiEventClassifier>mx.events:TreeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:TreeEvent:ITEM_OPEN_itemOpen"><apiName>itemOpen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:TreeEvent:ITEM_OPEN</apiEventType><adobeApiEventClassifier>mx.events:TreeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:TreeEvent:ITEM_OPENING_itemOpening"><apiName>itemOpening</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:TreeEvent:ITEM_OPENING</apiEventType><adobeApiEventClassifier>mx.events:TreeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:TreeEvent:TreeEvent"><apiName>TreeEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>item</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>应用此事件的 Tree 节点（项目）。
     
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiData>null</apiData><apiDesc>单元格的项呈示器对象。
     
      </apiDesc></apiParam><apiParam><apiItemName>triggerEvent</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>如果打开或关闭节点以响应用户操作，则指示输入操作的类型。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。通常由 Flex Tree 控件调用；但不在应用程序代码中使用。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:TreeEvent:ITEM_CLOSE"><apiName>ITEM_CLOSE</apiName><shortdesc>
      TreeEvent.ITEM_CLOSE 事件类型常量指示树分支已关闭或折叠。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemClose</apiData><apiType value="String"/></apiValueDef><apiDesc>
      TreeEvent.ITEM_CLOSE 事件类型常量指示树分支已关闭或折叠。
     
      <p>此事件类型的事件对象属性包含以下值。并非所有属性对于各种事件都有意义。有关详细信息，请参阅详细的属性说明。</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>itemRenderer</codeph></entry>
             <entry>关闭的节点的 ListItemRenderer</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>triggerEvent</codeph></entry>
             <entry>如果节点关闭以响应用户操作，则确定此操作为键盘操作还是鼠标操作。</entry></row><row><entry><codeph>item</codeph></entry><entry>关闭的 Tree 项目（节点）</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>TreeEvent.ITEM_CLOSE</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:TreeEvent:ITEM_OPEN"><apiName>ITEM_OPEN</apiName><shortdesc>
      TreeEvent.ITEM_OPEN 事件类型常量指示树分支已打开或展开。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemOpen</apiData><apiType value="String"/></apiValueDef><apiDesc>
      TreeEvent.ITEM_OPEN 事件类型常量指示树分支已打开或展开。
     
      <p>此事件类型的事件对象属性包含以下值。并非所有属性对于各种事件都有意义。有关详细信息，请参阅详细的属性说明。</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>itemRenderer</codeph></entry>
             <entry>打开的项目（节点）的 ListItemRenderer</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>triggerEvent</codeph></entry>
             <entry>如果项目（节点）打开以响应用户操作，则确定此操作为键盘操作还是鼠标操作。</entry></row><row><entry><codeph>item</codeph></entry><entry>打开的 Tree 节点。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>TreeEvent.ITEM_OPEN</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:TreeEvent:ITEM_OPENING"><apiName>ITEM_OPENING</apiName><shortdesc>
      TreeEvent.ITEM_OPENING 事件类型常量在树打开或关闭前一刻分派。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemOpening</apiData><apiType value="String"/></apiValueDef><apiDesc>
      TreeEvent.ITEM_OPENING 事件类型常量在树打开或关闭前一刻分派。
     
      <p>此事件类型的事件对象属性包含以下值。并非所有属性对于各种事件都有意义。有关详细信息，请参阅详细的属性说明。</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>animate</codeph></entry><entry>是否为打开或关闭操作设计动画效果。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。</entry></row><row><entry><codeph>dispatchEvent</codeph></entry><entry>打开或关闭动画完成后，是否分派 <codeph>ITEM_OPEN</codeph> 或 <codeph>ITEM_CLOSE</codeph> 事件。true</entry></row><row><entry><codeph>itemRenderer</codeph></entry>
             <entry>打开的项目（节点）的 ListItemRenderer</entry></row><row><entry><codeph>item</codeph></entry><entry>打开的 Tree 节点。</entry></row><row><entry><codeph>opening</codeph></entry><entry>如果项目处于打开状态，则为 true；处于关闭状态，则为 false。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>triggerEvent</codeph></entry>
             <entry>如果项目打开以响应用户操作，则确定此操作为键盘操作还是鼠标操作。</entry></row><row><entry><codeph>type</codeph></entry><entry>TreeEvent.ITEM_OPENING</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:TreeEvent:animate"><apiName>animate</apiName><shortdesc>
      是否为打开或关闭操作设计动画效果；仅用于 ITEM_OPENING 类型事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      是否为打开或关闭操作设计动画效果；仅用于 ITEM_OPENING 类型事件。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:TreeEvent:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
      打开或关闭动画完成后，是否分派事件（ITEM_OPEN 或 ITEM_CLOSE）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      打开或关闭动画完成后，是否分派事件（<codeph>ITEM_OPEN</codeph> 或 <codeph>ITEM_CLOSE</codeph>）。仅用于 ITEM_OPENING 类型事件。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:TreeEvent:item"><apiName>item</apiName><shortdesc>
      项目属性的存储。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      项目属性的存储。如果您使用 XML 数据填充 Tree，请通过以下形式访问节点的属性：<codeph>event.item。@<i>attribute_name</i></codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:TreeEvent:itemRenderer"><apiName>itemRenderer</apiName><shortdesc>
      关闭或打开的节点的 ListItemRenderer。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      关闭或打开的节点的 ListItemRenderer。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:TreeEvent:opening"><apiName>opening</apiName><shortdesc>
      仅用于 ITEM_OPENING 类型事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Boolean"/></apiValueDef><apiDesc>
      仅用于 <codeph>ITEM_OPENING</codeph> 类型事件。指示项目处于打开状态 (<codeph>true</codeph>) 还是关闭状态 (<codeph>false</codeph>)。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:TreeEvent:triggerEvent"><apiName>triggerEvent</apiName><shortdesc>
      触发此事件的低级 MouseEvent 或 KeyboardEvent，如果以编程方式触发此事件则为 null。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
      触发此事件的低级 MouseEvent 或 KeyboardEvent，如果以编程方式触发此事件则为 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:PropertyChangeEvent"><apiName>PropertyChangeEvent</apiName><shortdesc>
 PropertyChangeEvent 类代表对象的一个属性发生更改时传递到事件侦听器的事件对象，并提供有关更改的信息。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 PropertyChangeEvent 类代表对象的一个属性发生更改时传递到事件侦听器的事件对象，并提供有关更改的信息。此事件由集合类使用，并且是集合了解其提供的数据发生更改的唯一方式。Flex 数据绑定机制也使用此事件。
 
 </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#PropertyChangeEventKind"><linktext>PropertyChangeEventKind</linktext></link></related-links><adobeApiEvent id="mx.events:PropertyChangeEvent:PROPERTY_CHANGE_propertyChange"><apiName>propertyChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:PropertyChangeEvent:PROPERTY_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:PropertyChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:PropertyChangeEvent:PropertyChangeEvent"><apiName>PropertyChangeEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示触发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>kind</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>指定更改的类型。可能的值为 <codeph>PropertyChangeEventKind.UPDATE</codeph>、<codeph>PropertyChangeEventKind.DELETE</codeph> 和 <codeph>null</codeph>。
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>指定已更改属性的 String、QName 或 int。
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>更改前的属性的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>更改后的属性的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>发生更改的对象。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="mx.events:PropertyChangeEvent:createUpdateEvent"><apiName>createUpdateEvent</apiName><shortdesc>
      返回具有指定属性的 PropertyChangeEventKind.UPDATE 类型的新 PropertyChangeEvent。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>具有指定属性的新构建的 PropertyChangeEvent。 
      
      </apiDesc><apiOperationClassifier>mx.events:PropertyChangeEvent</apiOperationClassifier></apiReturn><apiParam><apiItemName>source</apiItemName><apiType value="Object"/><apiDesc>发生更改的对象。
     
      </apiDesc></apiParam><apiParam><apiItemName>property</apiItemName><apiType value="Object"/><apiDesc>指定已更改属性的 String、QName 或 int。
     
      </apiDesc></apiParam><apiParam><apiItemName>oldValue</apiItemName><apiType value="Object"/><apiDesc>更改前的属性的值。
     
      </apiDesc></apiParam><apiParam><apiItemName>newValue</apiItemName><apiType value="Object"/><apiDesc>更改后的属性的值。
     
      </apiDesc></apiParam></apiOperationDef><apiDesc>
      返回使用指定属性构建的 <codeph>PropertyChangeEventKind.UPDATE</codeph> 类型的新 PropertyChangeEvent。这是一个便利的方法。
     
      </apiDesc></apiOperationDetail></apiOperation><apiValue id="mx.events:PropertyChangeEvent:PROPERTY_CHANGE"><apiName>PROPERTY_CHANGE</apiName><shortdesc>
      PropertyChangeEvent.PROPERTY_CHANGE 常量可为 PropertyChange 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>propertyChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      <codeph>PropertyChangeEvent.PROPERTY_CHANGE</codeph> 常量可为 <codeph>PropertyChange</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>由构造函数确定；默认值为 false。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>由构造函数确定；默认值为 false。</entry></row><row><entry><codeph>kind</codeph></entry><entry>更改类型；PropertyChangeEventKind.UPDATE 或 PropertyChangeEventKind.DELETE。</entry></row><row><entry><codeph>oldValue</codeph></entry><entry>原始属性值。</entry></row><row><entry><codeph>newValue</codeph></entry><entry>新属性值（如果有）。</entry></row><row><entry><codeph>property</codeph></entry><entry>更改的属性。</entry></row><row><entry><codeph>source</codeph></entry><entry>包含更改属性的对象。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:PropertyChangeEvent:kind"><apiName>kind</apiName><shortdesc>
      指定更改的类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      指定更改的类型。可能的值为 <codeph>PropertyChangeEventKind.UPDATE</codeph>、<codeph>PropertyChangeEventKind.DELETE</codeph> 和 <codeph>null</codeph>。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:PropertyChangeEvent:newValue"><apiName>newValue</apiName><shortdesc>
      更改后的属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      更改后的属性的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:PropertyChangeEvent:oldValue"><apiName>oldValue</apiName><shortdesc>
      更改前的属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      更改前的属性的值。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:PropertyChangeEvent:property"><apiName>property</apiName><shortdesc>
      指定已更改属性的 String、QName 或 int。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      指定已更改属性的 String、QName 或 int。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:PropertyChangeEvent:source"><apiName>source</apiName><shortdesc>
      发生更改的对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
      发生更改的对象。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ResizeEvent"><apiName>ResizeEvent</apiName><shortdesc>
  代表当 Flex 组件的大小更改时分派的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  代表当 Flex 组件的大小更改时分派的事件对象。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><adobeApiEvent id="mx.events:ResizeEvent:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ResizeEvent:RESIZE</apiEventType><adobeApiEventClassifier>mx.events:ResizeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:ResizeEvent:ResizeEvent"><apiName>ResizeEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>oldWidth</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>对象先前的宽度（以像素为单位）。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>oldHeight</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>对象先前的高度（以像素为单位）。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:ResizeEvent:RESIZE"><apiName>RESIZE</apiName><shortdesc>
	  ResizeEvent.RESIZE 常量可为 resize 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ResizeEvent.RESIZE</codeph> 常量可为 <codeph>resize</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>oldHeight</codeph></entry><entry>对象先前的高度（以像素为单位）。</entry></row><row><entry><codeph>oldWidth</codeph></entry><entry>对象先前的宽度（以像素为单位）。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ResizeEvent:oldHeight"><apiName>oldHeight</apiName><shortdesc>
	  对象先前的高度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  对象先前的 <codeph>height</codeph>（以像素为单位）。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ResizeEvent:oldWidth"><apiName>oldWidth</apiName><shortdesc>
	  对象先前的宽度（以像素为单位）。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  对象先前的 <codeph>width</codeph>（以像素为单位）。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:DropdownEvent"><apiName>DropdownEvent</apiName><shortdesc>
  DropdownEvent 类代表传递给 open 和 close 事件的事件侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  DropdownEvent 类代表传递给 <codeph>open</codeph> 和 <codeph>close</codeph> 事件的事件侦听器的事件对象。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.events:DropdownEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DropdownEvent:CLOSE</apiEventType><adobeApiEventClassifier>mx.events:DropdownEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:DropdownEvent:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DropdownEvent:OPEN</apiEventType><adobeApiEventClassifier>mx.events:DropdownEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:DropdownEvent:DropdownEvent"><apiName>DropdownEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>triggerEvent</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>指示触发事件的输入操作类型的值
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:DropdownEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
	  DropdownEvent.CLOSE 常量可为 close 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DropdownEvent.CLOSE</codeph> 常量可为 <codeph>close</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>指示触发事件的输入操作类型的值。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DropdownEvent:OPEN"><apiName>OPEN</apiName><shortdesc>
	  DropdownEvent.OPEN 常量可为 open 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DropdownEvent.OPEN</codeph> 常量可为 <codeph>open</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>指示触发事件的输入操作类型的值。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DropdownEvent:triggerEvent"><apiName>triggerEvent</apiName><shortdesc>
	  如果控件打开或关闭以响应用户操作，则此属性包含指示输入操作类型的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
	  如果控件打开或关闭以响应用户操作，则此属性包含指示输入操作类型的值。该值为 <codeph>InteractionInputType.MOUSE</codeph> 或 <codeph>InteractionInputType.KEYBOARD</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:TweenEvent"><apiName>TweenEvent</apiName><shortdesc>
  代表特定于 Flex 补间效果的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  代表特定于 Flex 补间效果的事件对象。Flex 效果可分派两种类型的补间事件：
  <ul>
    <li><codeph>tweenUpdate</codeph></li>
    <li><codeph>tweenEnd</codeph></li>
  </ul>
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link><link href="mx.effects.xml#Tween"><linktext>mx.effects.Tween</linktext></link></related-links><adobeApiEvent id="mx.events:TweenEvent:TWEEN_END_tweenEnd"><apiName>tweenEnd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:TweenEvent:TWEEN_END</apiEventType><adobeApiEventClassifier>mx.events:TweenEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link><link href="mx.events.xml#EffectEvent"><linktext>mx.events.EffectEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="mx.events:TweenEvent:TWEEN_START_tweenStart"><apiName>tweenStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:TweenEvent:TWEEN_START</apiEventType><adobeApiEventClassifier>mx.events:TweenEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:TweenEvent:TWEEN_UPDATE_tweenUpdate"><apiName>tweenUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:TweenEvent:TWEEN_UPDATE</apiEventType><adobeApiEventClassifier>mx.events:TweenEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:TweenEvent:TweenEvent"><apiName>TweenEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiType value="Object"/><apiData>null</apiData><apiDesc>对于 <codeph>tweenStart</codeph> 或 <codeph>tweenUpdate</codeph> 事件，此值传递给 <codeph>onTweenUpdate()</codeph> 方法；而对于 <codeph>tweenEnd</codeph> 事件，此值则传递给 <codeph>onTweenEnd()</codeph> 方法。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:TweenEvent:TWEEN_END"><apiName>TWEEN_END</apiName><shortdesc>
	  TweenEvent.TWEEN_END 常量可为 tweenEnd 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tweenEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>TweenEvent.TWEEN_END</codeph> 常量可为 <codeph>tweenEnd</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。 
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>value</codeph></entry><entry>传递给 <codeph>onTweenEnd()</codeph> 方法的值。</entry></row></tbody></tgroup></adobetable>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.effects.xml#Effect"><linktext>mx.effects.Effect</linktext></link><link href="mx.effects.xml#TweenEffect"><linktext>mx.effects.TweenEffect</linktext></link><link href="mx.events.xml#EffectEvent"><linktext>mx.events.EffectEvent</linktext></link></related-links></apiValue><apiValue id="mx.events:TweenEvent:TWEEN_START"><apiName>TWEEN_START</apiName><shortdesc>
	  TweenEvent.TWEEN_START 常量可为 tweenStart 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tweenStart</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>TweenEvent.TWEEN_START</codeph> 常量可为 <codeph>tweenStart</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。 
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>value</codeph></entry><entry>传递给 <codeph>onTweenUpdate()</codeph> 方法的值。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:TweenEvent:TWEEN_UPDATE"><apiName>TWEEN_UPDATE</apiName><shortdesc>
	  TweenEvent.TWEEN_UPDATE 常量可为 tweenUpdate 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tweenUpdate</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>TweenEvent.TWEEN_UPDATE</codeph> 常量可为 <codeph>tweenUpdate</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。 
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>value</codeph></entry><entry>传递给 <codeph>onTweenUpdate()</codeph> 方法的值。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:TweenEvent:value"><apiName>value</apiName><shortdesc>
	  对于 tweenStart 事件或 tweenUpdate 事件，此值传递给 onTweenUpdate() 方法；而对于 tweenEnd 事件，此值则传递给 onTweenEnd() 方法。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Object"/></apiValueDef><apiDesc>
	  对于 <codeph>tweenStart</codeph> 或 <codeph>tweenUpdate</codeph> 事件，此值传递给 <codeph>onTweenUpdate()</codeph> 方法；而对于 <codeph>tweenEnd</codeph> 事件，此值则传递给 <codeph>onTweenEnd()</codeph> 方法。
	 
	  <p>有关此属性的精确值，请参阅每个补间效果的实例类。</p>
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.effects.effectClasses.xml#ActionEffectInstance"><linktext>mx.effects.effectClasses.ActionEffectInstance</linktext></link><link href="mx.effects.effectClasses.xml#BlurInstance"><linktext>mx.effects.effectClasses.BlurInstance</linktext></link><link href="mx.effects.effectClasses.xml#DissolveInstance"><linktext>mx.effects.effectClasses.DissolveInstance</linktext></link><link href="mx.effects.effectClasses.xml#FadeInstance"><linktext>mx.effects.effectClasses.FadeInstance</linktext></link><link href="mx.effects.effectClasses.xml#GlowInstance"><linktext>mx.effects.effectClasses.GlowInstance</linktext></link><link href="mx.effects.effectClasses.xml#MaskEffectInstance"><linktext>mx.effects.effectClasses.MaskEffectInstance</linktext></link><link href="mx.effects.effectClasses.xml#MoveInstance"><linktext>mx.effects.effectClasses.MoveInstance</linktext></link><link href="mx.effects.effectClasses.xml#ResizeInstance"><linktext>mx.effects.effectClasses.ResizeInstance</linktext></link><link href="mx.effects.effectClasses.xml#RotateInstance"><linktext>mx.effects.effectClasses.RotateInstance</linktext></link><link href="mx.effects.effectClasses.xml#ZoomInstance"><linktext>mx.effects.effectClasses.ZoomInstance</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="mx.events:InvalidateRequestData"><apiName>InvalidateRequestData</apiName><shortdesc>
  InvalidateRequestData 类定义一些常量，用作 SWFBridgeRequest 对象（与 SWFBridgeRequest.INVALIDATE_REQUEST 请求配合使用时）的 data 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  InvalidateRequestData 类定义一些常量，用作 SWFBridgeRequest 对象（与 <codeph>SWFBridgeRequest.INVALIDATE_REQUEST</codeph> 请求配合使用时）的 <codeph>data</codeph> 属性的值。
  
  </apiDesc></apiClassifierDetail><apiValue id="mx.events:InvalidateRequestData:DISPLAY_LIST"><apiName>DISPLAY_LIST</apiName><shortdesc>
      指示请求处理函数应使其显示列表失效的位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0001</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      指示请求处理函数应使其显示列表失效的位。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:InvalidateRequestData:PROPERTIES"><apiName>PROPERTIES</apiName><shortdesc>
      指示请求处理函数应使其属性失效的位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0002</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      指示请求处理函数应使其属性失效的位。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:InvalidateRequestData:SIZE"><apiName>SIZE</apiName><shortdesc>
      指示请求处理函数应使其大小失效的位。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0x0004</apiData><apiType value="uint"/></apiValueDef><apiDesc>
      指示请求处理函数应使其大小失效的位。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:SliderEventClickTarget"><apiName>SliderEventClickTarget</apiName><shortdesc>
  SliderEventClickTarget 类定义代表 SliderEvent 类的 clickTarget 属性的值的常数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  SliderEventClickTarget 类定义代表 SliderEvent 类的 <codeph>clickTarget</codeph> 属性的值的常量。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#SliderEvent"><linktext>mx.events.SliderEvent</linktext></link></related-links><apiValue id="mx.events:SliderEventClickTarget:THUMB"><apiName>THUMB</apiName><shortdesc>
	  指定已单击 Slider 的滑块。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>thumb</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定已单击 Slider 的滑块。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:SliderEventClickTarget:TRACK"><apiName>TRACK</apiName><shortdesc>
	  指定已单击 Slider 的轨道。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>track</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指定已单击 Slider 的轨道。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:DateChooserEvent"><apiName>DateChooserEvent</apiName><shortdesc>
  DateChooserEvent 类代表传递到 DateChooser 和 DateField 控件的 scroll 事件的事件侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  DateChooserEvent 类代表传递到 DateChooser 和 DateField 控件的 <codeph>scroll</codeph> 事件的事件侦听器的事件对象。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#DateChooser"><linktext>mx.controls.DateChooser</linktext></link><link href="mx.controls.xml#DateField"><linktext>mx.controls.DateField</linktext></link><link href="mx.events.xml#DateChooserEventDetail"><linktext>mx.events.DateChooserEventDetail</linktext></link></related-links><adobeApiEvent id="mx.events:DateChooserEvent:SCROLL_scroll"><apiName>scroll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:DateChooserEvent:SCROLL</apiEventType><adobeApiEventClassifier>mx.events:DateChooserEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:DateChooserEvent:DateChooserEvent"><apiName>DateChooserEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示触发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>detail</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>指示滚动的单位和方向。可能的值为 <codeph>DateChooserEventDetail.NEXT_MONTH</codeph>、<codeph>DateChooserEventDetail.NEXT_YEAR</codeph>、<codeph>DateChooserEventDetail.PREVIOUS_MONTH</codeph> 或 <codeph>DateChooserEventDetail.PREVIOUS_YEAR</codeph>。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>triggerEvent</apiItemName><apiType value="flash.events:Event"/><apiData>null</apiData><apiDesc>触发此 change 事件的事件；通常是 <codeph>scroll</codeph>。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。通常由 DateChooser 对象调用并且不在应用程序代码中使用。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:DateChooserEvent:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	  DateChooserEvent.SCROLL 常量可为 scroll 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>DateChooserEvent.SCROLL</codeph> 常量可为 <codeph>scroll</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>detail</codeph></entry><entry>滚动方向。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>triggerEvent</codeph></entry><entry>触发此 change 事件的事件；通常是 <codeph>scroll</codeph>。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DateChooserEvent:detail"><apiName>detail</apiName><shortdesc>
      指示滚动的方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      指示滚动的方向。DateChooserEventDetail 类定义的值。可能的值为 <codeph>DateChooserEventDetail.NEXT_MONTH</codeph>、<codeph>DateChooserEventDetail.NEXT_YEAR</codeph>、<codeph>DateChooserEventDetail.PREVIOUS_MONTH</codeph> 或 <codeph>DateChooserEventDetail.PREVIOUS_YEAR</codeph>。
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#DateChooserEventDetail"><linktext>mx.events.DateChooserEventDetail</linktext></link></related-links></apiValue><apiValue id="mx.events:DateChooserEvent:triggerEvent"><apiName>triggerEvent</apiName><shortdesc>
	  触发此更改的事件；通常是 scroll。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.events:Event"/></apiValueDef><apiDesc>
	  触发此更改的事件；通常是 <codeph>scroll</codeph>。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:CollectionEvent"><apiName>CollectionEvent</apiName><shortdesc>
  mx.events.CollectionEvent 类表示在相关联的集合发生更改时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  mx.events.CollectionEvent 类表示在相关联的集合发生更改时分派的事件。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#FlexEvent/CURSOR_UPDATE"><linktext>FlexEvent.CURSOR_UPDATE</linktext></link></related-links><adobeApiEvent id="mx.events:CollectionEvent:COLLECTION_CHANGE_collectionChange"><apiName>collectionChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:CollectionEvent:COLLECTION_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:CollectionEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:CollectionEvent:CollectionEvent"><apiName>CollectionEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示触发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>kind</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>指示发生的事件类型。此参数值可以是 CollectionEventKind 类中的一个值，也可以是 <codeph>null</codeph>，用于指示类型未知。
     
      </apiDesc></apiParam><apiParam><apiItemName>location</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc><codeph>kind</codeph> 为 <codeph>CollectionEventKind.ADD</codeph>、<codeph>CollectionEventKind.MOVE</codeph>、<codeph>CollectionEventKind.REMOVE</codeph> 或 <codeph>CollectionEventKind.REPLACE</codeph> 时，此值指示可以在目标集合中找到 <codeph>items</codeph> 属性中指定的项目的位置。
     
      </apiDesc></apiParam><apiParam><apiItemName>oldLocation</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc><codeph>kind</codeph> 为 <codeph>CollectionEventKind.MOVE</codeph> 时，此值指示 <codeph>items</codeph> 属性中指定的项目在目标集合中的原位置。
      
      </apiDesc></apiParam><apiParam><apiItemName>items</apiItemName><apiType value="Array"/><apiData>null</apiData><apiDesc>对象数组，其中包含有关受事件影响的项目的信息，如 <codeph>items</codeph> 属性所述。如果 <codeph>kind</codeph> 为 <codeph>CollectionEventKind.REFRESH</codeph> 或 <codeph>CollectionEventKind.RESET</codeph>，则此 Array 的长度为零。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。
	 
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:CollectionEvent:COLLECTION_CHANGE"><apiName>COLLECTION_CHANGE</apiName><shortdesc>
      CollectionEvent.COLLECTION_CHANGE 常量可为在集合发生更改时分派的事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>collectionChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
      CollectionEvent.COLLECTION_CHANGE 常量可为在集合发生更改时分派的事件定义事件对象的 <codeph>type</codeph> 属性值。
     
      <p>事件对象的属性具有下列值。并非所有属性对于各种事件都有意义。有关详细信息，请参阅详细的属性说明。</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>items</codeph></entry><entry>对象 Array，其中包含有关受事件影响的项目的信息。此字段的内容取决于事件的类型；有关详细信息，请参阅 <codeph>items</codeph> 属性</entry></row><row><entry><codeph>kind</codeph></entry><entry>事件的类型。有效值定义为 CollectionEventKind 类中的常量。</entry></row><row><entry><codeph>location</codeph></entry><entry><codeph>items</codeph> 属性中指定的项目在目标集合中的位置。</entry></row><row><entry><codeph>oldLocation</codeph></entry><entry><codeph>items</codeph> 属性中指定的项目原来在目标集合中的位置。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>CollectionEvent.COLLECTION_CHANGE</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:CollectionEvent:items"><apiName>items</apiName><shortdesc>
	  如果 kind 为 CollectionEventKind.ADD 或 CollectionEventKind.REMOVE，则 items 属性为已添加/已删除项目的 Array。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Array"/><apiDefaultValue>[ ]
     
      </apiDefaultValue></apiValueDef><apiDesc>
	  如果 <codeph>kind</codeph> 为 <codeph>CollectionEventKind.ADD</codeph> 或 <codeph>CollectionEventKind.REMOVE</codeph>，则 <codeph>items</codeph> 属性为已添加/已删除项目的 Array。如果 <codeph>kind</codeph> 为 <codeph>CollectionEventKind.REPLACE</codeph> 或 <codeph>CollectionEventKind.UPDATE</codeph>，则 <codeph>items</codeph> 属性为 PropertyChangeEvent 对象 Array，其中包含受事件影响的项目的相关信息。如果值发生更改，请查询 PropertyChangeEvent 对象的 <codeph>newValue</codeph> 和 <codeph>oldValue</codeph> 字段以了解原来的值和新值。如果 <codeph>kind</codeph> 为 <codeph>CollectionEventKind.REFRESH</codeph> 或 <codeph>CollectionEventKind.RESET</codeph>，则此数组的长度为零。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#PropertyChangeEvent"><linktext>PropertyChangeEvent</linktext></link></related-links></apiValue><apiValue id="mx.events:CollectionEvent:kind"><apiName>kind</apiName><shortdesc>
      指示发生的事件类型。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/><apiDefaultValue>null
	 
	  </apiDefaultValue></apiValueDef><apiDesc>
      指示发生的事件类型。此属性值可以是 CollectionEventKind 类中的一个值，也可以是 <codeph>null</codeph>，用于指示类型未知。
	 
      </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#CollectionEventKind"><linktext>CollectionEventKind</linktext></link></related-links></apiValue><apiValue id="mx.events:CollectionEvent:location"><apiName>location</apiName><shortdesc>
      如果 kind 值为 CollectionEventKind.ADD、CollectionEventKind.MOVE、CollectionEventKind.REMOVE 或 CollectionEventKind.REPLACE，则此属性为 items 属性中指定的项目集合中基于零的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>kind</codeph> 值为 <codeph>CollectionEventKind.ADD</codeph>、<codeph>CollectionEventKind.MOVE</codeph>、<codeph>CollectionEventKind.REMOVE</codeph> 或 <codeph>CollectionEventKind.REPLACE</codeph>，则此属性为 <codeph>items</codeph> 属性中指定的项目集合中基于零的索引。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#CollectionEventKind"><linktext>CollectionEventKind</linktext></link></related-links></apiValue><apiValue id="mx.events:CollectionEvent:oldLocation"><apiName>oldLocation</apiName><shortdesc>
      如果 kind 的值为 CollectionEventKind.MOVE，则此属性为 items 属性中指定的项目在目标集合中原来位置的从零开始的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/><apiDefaultValue>-1
      
      </apiDefaultValue></apiValueDef><apiDesc>
      如果 <codeph>kind</codeph> 的值为 <codeph>CollectionEventKind.MOVE</codeph>，则此属性为 <codeph>items</codeph> 属性中指定的项目在目标集合中原来位置的从零开始的索引。
     
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:FlexMouseEvent"><apiName>FlexMouseEvent</apiName><shortdesc>
  FlexMouseEvent 类表示针对特定于 Flex 鼠标活动而传递给事件侦听器的事件对象。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
  FlexMouseEvent 类表示针对特定于 Flex 鼠标活动而传递给事件侦听器的事件对象。
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.events:FlexMouseEvent:MOUSE_DOWN_OUTSIDE_mouseDownOutside"><apiName>mouseDownOutside</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexMouseEvent:MOUSE_DOWN_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events:FlexMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:FlexMouseEvent:MOUSE_WHEEL_OUTSIDE_mouseWheelOutside"><apiName>mouseWheelOutside</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:FlexMouseEvent:MOUSE_WHEEL_OUTSIDE</apiEventType><adobeApiEventClassifier>mx.events:FlexMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:FlexMouseEvent:FlexMouseEvent"><apiName>FlexMouseEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
      </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>事件发生时所处的水平位置。
	 
      </apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiType value="Number"/><apiData>0</apiData><apiDesc>事件发生时所处的垂直位置。
	 
      </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiType value="flash.display:InteractiveObject"/><apiData>null</apiData><apiDesc>与事件相关的显示列表对象。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>是否按下 Control 键。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>是否按下 Alt 键。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>是否按下 Shift 键。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>是否按下 Control 键。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiType value="int"/><apiData>0</apiData><apiDesc>用户每滚动鼠标滚轮上的一个刻度时，相应应该滚动的行数。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:FlexMouseEvent:MOUSE_DOWN_OUTSIDE"><apiName>MOUSE_DOWN_OUTSIDE</apiName><shortdesc>
	  FlexMouseEvent.MOUSE_DOWN_OUTSIDE 常量可为 mouseDownOutside 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDownOutside</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>FlexMouseEvent.MOUSE_DOWN_OUTSIDE</codeph> 常量可为 <codeph>mouseDownOutside</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry>
	         <entry>指示是 (<codeph>true</codeph>) 否 (<codeph>false</codeph>) 按下 Alt 键。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>buttonDown</codeph></entry>
	         <entry>指示是 (<codeph>true</codeph>) 否 (<codeph>false</codeph>) 按下主鼠标按键。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>ctrlKey</codeph></entry>
	         <entry>指示是 (<codeph>true</codeph>) 否 (<codeph>false</codeph>) 按下 Control 键。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。对于 PopUpManager 事件，对象为弹出窗口。</entry></row><row><entry><codeph>delta</codeph></entry>
	         <entry>指示用户每滚动鼠标滚轮上的一个刻度时，相应应该滚动的行数。对于 PopUpManager 事件，此值为 0。</entry></row><row><entry><codeph>localX</codeph></entry>
	         <entry>事件发生时所处的水平位置。对于 PopUpManager 事件，此值取决于弹出式控件。</entry></row><row><entry><codeph>localY</codeph></entry>
	         <entry>事件发生时所处的垂直位置。对于 PopUpManager 事件，此值取决于弹出式控件。</entry></row><row><entry><codeph>relatedObject</codeph></entry>
	         <entry>对与事件相关的显示列表对象的引用。对于 PopUpManager 事件，此对象是在其上放置鼠标指针的容器。</entry></row><row><entry><codeph>shiftKey</codeph></entry>
	         <entry>指示是 (<codeph>true</codeph>) 否 (<codeph>false</codeph>) 按下 Shift 键。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。对于 PopUpManager 事件，对象为弹出窗口。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:FlexMouseEvent:MOUSE_WHEEL_OUTSIDE"><apiName>MOUSE_WHEEL_OUTSIDE</apiName><shortdesc>
	  FlexMouseEvent.MOUSE_WHEEL_OUTSIDE 常量可为 mouseWheelOutside 事件定义事件对象的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseWheelOutside</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>FlexMouseEvent.MOUSE_WHEEL_OUTSIDE</codeph> 常量可为 <codeph>mouseWheelOutside</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry>
	         <entry>指示是 (<codeph>true</codeph>) 否 (<codeph>false</codeph>) 按下 Alt 键。</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>buttonDown</codeph></entry>
	         <entry>指示是 (<codeph>true</codeph>) 否 (<codeph>false</codeph>) 按下主鼠标按键。</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>ctrlKey</codeph></entry>
	         <entry>指示是 (<codeph>true</codeph>) 否 (<codeph>false</codeph>) 按下 Control 键。</entry></row><row><entry><codeph>currentTarget</codeph></entry>
	         <entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。对于 PopUpManager 事件，对象为弹出窗口。</entry></row><row><entry><codeph>delta</codeph></entry>
	         <entry>指示用户每滚动鼠标滚轮上的一个刻度时，相应应该滚动的行数。对于 PopUpManager 事件，此值为 0。</entry></row><row><entry><codeph>localX</codeph></entry>
	         <entry>事件发生时所处的水平位置。对于 PopUpManager 事件，此值取决于弹出式控件。</entry></row><row><entry><codeph>localY</codeph></entry>
	         <entry>事件发生时所处的垂直位置。对于 PopUpManager 事件，此值取决于弹出式控件。</entry></row><row><entry><codeph>relatedObject</codeph></entry>
	         <entry>对与事件相关的显示列表对象的引用。对于 PopUpManager 事件，此对象是在其上放置鼠标指针的容器。</entry></row><row><entry><codeph>shiftKey</codeph></entry>
	         <entry>指示是 (<codeph>true</codeph>) 否 (<codeph>false</codeph>) 按下 Shift 键。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。对于 PopUpManager 事件，对象为弹出窗口。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ListEvent"><apiName>ListEvent</apiName><shortdesc>
   ListEvent 类代表与基于列表的控件（如 List、Tree、Menu 和 DataGrid）中的项目相关联的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
   ListEvent 类代表与基于列表的控件（如 List、Tree、Menu 和 DataGrid）中的项目相关联的事件。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.controls.xml#List"><linktext>mx.controls.List</linktext></link><link href="mx.controls.listClasses.xml#ListBase"><linktext>mx.controls.listClasses.ListBase</linktext></link></related-links><adobeApiEvent id="mx.events:ListEvent:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ListEvent:CHANGE</apiEventType><adobeApiEventClassifier>mx.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ListEvent:ITEM_CLICK_itemClick"><apiName>itemClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ListEvent:ITEM_CLICK</apiEventType><adobeApiEventClassifier>mx.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ListEvent:ITEM_DOUBLE_CLICK_itemDoubleClick"><apiName>itemDoubleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ListEvent:ITEM_DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>mx.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ListEvent:ITEM_EDIT_BEGIN_itemEditBegin"><apiName>itemEditBegin</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ListEvent:ITEM_EDIT_BEGIN</apiEventType><adobeApiEventClassifier>mx.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ListEvent:ITEM_EDIT_BEGINNING_itemEditBeginning"><apiName>itemEditBeginning</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ListEvent:ITEM_EDIT_BEGINNING</apiEventType><adobeApiEventClassifier>mx.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ListEvent:ITEM_EDIT_END_itemEditEnd"><apiName>itemEditEnd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ListEvent:ITEM_EDIT_END</apiEventType><adobeApiEventClassifier>mx.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ListEvent:ITEM_FOCUS_IN_itemFocusIn"><apiName>itemFocusIn</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ListEvent:ITEM_FOCUS_IN</apiEventType><adobeApiEventClassifier>mx.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ListEvent:ITEM_FOCUS_OUT_itemFocusOut"><apiName>itemFocusOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ListEvent:ITEM_FOCUS_OUT</apiEventType><adobeApiEventClassifier>mx.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ListEvent:ITEM_ROLL_OUT_itemRollOut"><apiName>itemRollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ListEvent:ITEM_ROLL_OUT</apiEventType><adobeApiEventClassifier>mx.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ListEvent:ITEM_ROLL_OVER_itemRollOver"><apiName>itemRollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ListEvent:ITEM_ROLL_OVER</apiEventType><adobeApiEventClassifier>mx.events:ListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:ListEvent:ListEvent"><apiName>ListEvent</apiName><shortdesc>
      构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
     
      </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
     
      </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
     
      </apiDesc></apiParam><apiParam><apiItemName>columnIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>包含渲染器的列的从零开始的索引。
     
      </apiDesc></apiParam><apiParam><apiItemName>rowIndex</apiItemName><apiType value="int"/><apiData>-1</apiData><apiDesc>包含渲染器的行的从零开始的索引；对于正在编辑的事件，则是将要编辑的数据提供程序中项目的索引
     
      </apiDesc></apiParam><apiParam><apiItemName>reason</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>发生 <codeph>itemEditEnd</codeph> 事件的原因。
     
      </apiDesc></apiParam><apiParam><apiItemName>itemRenderer</apiItemName><apiOperationClassifier>mx.controls.listClasses:IListItemRenderer</apiOperationClassifier><apiData>null</apiData><apiDesc>数据提供程序项目的项呈示器。
      
      </apiDesc></apiParam></apiConstructorDef><apiDesc>
      构造函数。通常由 Flex 控件调用且不用于应用程序代码。
     
      </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:ListEvent:CHANGE"><apiName>CHANGE</apiName><shortdesc>
      ListEvent.CHANGE 常量可为 change 事件定义 ListEvent 对象的 type 属性的值，指示由于用户交互所选内容已发生更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ListEvent.CHANGE 常量可为 <codeph>change</codeph> 事件定义 ListEvent 对象的 <codeph>type</codeph> 属性的值，指示由于用户交互所选内容已发生更改。
     
      <p>事件对象的属性有下列值：</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> 与事件相关联的列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>单击的项呈示器。</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>与事件相关联的项目的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>ListEvent.CHANGE</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:ITEM_CLICK"><apiName>ITEM_CLICK</apiName><shortdesc>
      ListEvent.ITEM_CLICK 常量可为 itemClick 事件定义 ListEvent 对象的 type 属性的值，指示用户在控件中某个可视项目上单击了鼠标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemClick</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ListEvent.ITEM_CLICK 常量可为 <codeph>itemClick</codeph> 事件定义 ListEvent 对象的 <codeph>type</codeph> 属性的值，指示用户在控件中某个可视项目上单击了鼠标。
     
      <p>事件对象的属性有下列值：</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> 与事件相关联的列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>单击的项呈示器。</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>与事件相关联的项目的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>ListEvent.ITEM_CLICK</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:ITEM_DOUBLE_CLICK"><apiName>ITEM_DOUBLE_CLICK</apiName><shortdesc>
      ListEvent.ITEM_DOUBLE_CLICK 常量可为 itemDoubleClick 事件定义 ListEvent 对象的 type 属性的值，指示用户在控件中某个可视项目上双击了鼠标。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemDoubleClick</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ListEvent.ITEM_DOUBLE_CLICK 常量可为 <codeph>itemDoubleClick</codeph> 事件定义 ListEvent 对象的 <codeph>type</codeph> 属性的值，指示用户在控件中某个可视项目上双击了鼠标。
     
      <p>若要接收 itemDoubleClick 事件，必须将组件的 <codeph>doubleClickEnabled</codeph> 属性设置为 <codeph>true</codeph>。</p>
     
      <p>事件对象的属性有下列值：</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> 与事件相关联的列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>双击的项呈示器。</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>与事件相关联的项目的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>ListEvent.ITEM_DOUBLE_CLICK</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:ITEM_EDIT_BEGIN"><apiName>ITEM_EDIT_BEGIN</apiName><shortdesc>
      ListEvent.ITEM_EDIT_BEGIN 常量可为 itemEditBegin 事件定义事件对象的 type 属性的值，指示准备编辑的项目。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemEditBegin</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ListEvent.ITEM_EDIT_BEGIN 常量可为 <codeph>itemEditBegin</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性的值，指示准备编辑的项目。 
     
      <p>此事件的默认侦听器执行下列操作：</p>
     
      <ul>
        <li>通过调用 <codeph>createItemEditor()</codeph> 方法来创建项目编辑器对象。</li>
        <li>将 <codeph>data</codeph> 属性从项目复制到编辑器。默认情况下，项目编辑器对象是 TextInput 控件的实例。您可以使用 list 控件的 <codeph>itemEditor</codeph> 属性指定自定义项目编辑器类。</li>
     
        <li>设置 list 控件的 <codeph>itemEditorInstance</codeph> 属性，以引用项目编辑器实例。</li>
      </ul>
     
      <p>您可以为此事件编写事件侦听器以修改传递到项目编辑器的数据。例如，您可以修改项目编辑器使用的数据、数据格式或其它信息。</p>
     
      <p>您还可以创建事件侦听器以指定用于编辑项目的项目编辑器。例如，您可能有两个不同的项目编辑器。在事件侦听器中，您可以通过执行下列操作检查要编辑的数据或其它信息，并打开相应的项目编辑器：</p>
     
      <ol>
         <li>调用 <codeph>preventDefault()</codeph> 以阻止 Flex 在默认事件侦听器中调用 <codeph>createItemEditor()</codeph> 方法。</li>
         <li>将 <codeph>itemEditor</codeph> 属性设置为相应编辑器。</li>
         <li>调用 <codeph>createItemEditor()</codeph> 方法。</li>
      </ol>
     
      <p>事件对象的属性有下列值：</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> 与事件相关联的列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>所编辑的项目的项呈示器。</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>与事件相关联的项目的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>ListEvent.ITEM_EDIT_BEGIN</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:ITEM_EDIT_BEGINNING"><apiName>ITEM_EDIT_BEGINNING</apiName><shortdesc>
      ListEvent.ITEM_EDIT_BEGINNING 常量可为 itemEditBeginning 事件定义 ListEvent 对象的 type 属性的值，指示用户已准备好编辑某个项目，例如，通过在该项目上释放鼠标按键。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemEditBeginning</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ListEvent.ITEM_EDIT_BEGINNING 常量可为 <codeph>itemEditBeginning</codeph> 事件定义 ListEvent 对象的 <codeph>type</codeph> 属性的值，指示用已户准备编辑某个项目，例如，通过在该项目上释放鼠标按键。 
     
      <p>此事件的默认侦听器将 <codeph>List.editedItemPosition</codeph> 属性设置为具有焦点的项目，这可启动项目编辑会话。</p>
     
      <p>您通常可以为此事件编写自己的事件侦听器，以禁止编辑特定项目。在为此事件自己编写的事件侦听器内调用 <codeph>preventDefault()</codeph> 方法可以阻止默认侦听器执行。</p>
     
      <p>事件对象的属性有下列值：</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> 与事件相关联的列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>要编辑的项目的项呈示器。如果此事件由键盘生成，则此属性为 null，因为要编辑的项目可能未在屏幕范围内显示。</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>与事件相关联的项目的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>ListEvent.ITEM_EDIT_BEGIN</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:ITEM_EDIT_END"><apiName>ITEM_EDIT_END</apiName><shortdesc>
      ListEvent.ITEM_EDIT_END 常量可为 itemEditEnd 事件定义 ListEvent 对象的 type 属性的值，指示编辑会话结束。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemEditEnd</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ListEvent.ITEM_EDIT_END 常量可为 <codeph>itemEditEnd</codeph> 事件定义 ListEvent 对象的 <codeph>type</codeph> 属性值，指示编辑会话结束。 
     
      <p>列表组件具有针对此事件的默认处理函数，此程序将数据从项目编辑器复制到 list 控件的数据提供程序。默认事件侦听器执行下列操作：</p>
     
      <ul>
        <li>使用 list 控件的 <codeph>editorDataField</codeph> 属性来确定包含新数据的项目编辑器的属性，并使用这些新数据更新数据提供程序项目。因为默认项目编辑器是 TextInput 控件，所以 <codeph>editorDataField</codeph> 属性的默认值为 <codeph>"text"</codeph>，以指定 TextInput 的 <codeph>text</codeph> 属性包含新项目数据。</li>
     
        <li>调用 <codeph>destroyItemEditor()</codeph> 方法以关闭项目编辑器。</li>
      </ul>
     
      <p>通常，您可以为此事件编写事件侦听器，以执行下列操作：</p>
      <ul>
        <li>在事件侦听器中，您可以修改编辑器为列表组件返回的数据。例如，您可以在将数据返回到 list 控件之前重新设置其格式。默认情况下，项目编辑器只可以返回一个值。如果希望返回多个值，必须为 <codeph>itemEditEnd</codeph> 事件编写事件侦听器。</li> 
     
        <li>在事件侦听器中，您可以检查项目编辑器中输入的数据。如果数据不正确，可以调用 <codeph>preventDefault()</codeph> 方法阻止 Flex 将新数据传递回 list 控件和关闭编辑器。 </li>
      </ul>
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> 与事件相关联的列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>已编辑的项目的项呈示器。</entry></row><row><entry><codeph>reason</codeph></entry><entry>定义事件原因的常量。该值必须是 <codeph>ListEventReson</codeph> 类的成员。</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>与事件相关联的项目的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>ListEvent.ITEM_EDIT_END</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:ITEM_FOCUS_IN"><apiName>ITEM_FOCUS_IN</apiName><shortdesc>
      ListEvent.ITEM_FOCUS_IN 常量可为 itemFocusIn 事件定义 ListEvent 对象的 type 属性的值，指示项目已获得焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFocusIn</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ListEvent.ITEM_FOCUS_IN 常量可为 <codeph>itemFocusIn</codeph> 事件定义 ListEvent 对象的 <codeph>type</codeph> 属性的值，指示项目已获得焦点。
     
      <p>事件对象的属性有下列值：</p>
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>true</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> 与事件相关联的列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>所编辑的项目的项目编辑器实例。</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>与事件相关联的项目的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>ListEvent.ITEM_FOCUS_IN</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:ITEM_FOCUS_OUT"><apiName>ITEM_FOCUS_OUT</apiName><shortdesc>
      ListEvent.ITEM_FOCUS_OUT 常量可为 itemFocusOut 事件定义 ListEvent 对象的 type 属性的值，指示项目已失去焦点。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemFocusOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ListEvent.ITEM_FOCUS_OUT 常量可为 <codeph>itemFocusOut</codeph> 事件定义 ListEvent 对象的 <codeph>type</codeph> 属性的值，指示项目已失去焦点。
     
      <p>事件对象的属性有下列值：</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> 与事件相关联的列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>正在编辑的项目的项目编辑器实例。</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>与事件相关联的项目的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>ListEvent.ITEM_FOCUS_OUT</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:ITEM_ROLL_OUT"><apiName>ITEM_ROLL_OUT</apiName><shortdesc>
      ListEvent.ITEM_ROLL_OUT 常量可为 itemRollOut 事件定义 ListEvent 对象的 type 属性的值，指示用户执行了将鼠标指针从控件中某个可视项目上移开的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemRollOut</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ListEvent.ITEM_ROLL_OUT 常量可为 <codeph>itemRollOut</codeph> 事件定义 ListEvent 对象的 <codeph>type</codeph> 属性的值，指示用户执行了将鼠标指针从控件中某个可视项目上移开的操作。
     
      <p>事件对象的属性有下列值：</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> 与事件相关联的列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>被移开的项呈示器。</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>与事件相关联的项目的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>ListEvent.ITEM_ROLL_OUT</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:ITEM_ROLL_OVER"><apiName>ITEM_ROLL_OVER</apiName><shortdesc>
      ListEvent.ITEM_ROLL_OVER 常量可为 itemRollOver 事件定义 ListEvent 对象的 type 属性的值，指示用户执行了将鼠标指针滑过控件中某个可视项目的操作。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>itemRollOver</apiData><apiType value="String"/></apiValueDef><apiDesc>
      ListEvent.ITEM_ROLL_OVER 常量可为 <codeph>itemRollOver</codeph> 事件定义 ListEvent 对象的 <codeph>type</codeph> 属性的值，指示用户执行了将鼠标指针滑过控件中某个可视项目的操作。
     
      <p>事件对象的属性有下列值：</p>
     
      <adobetable class="innertable">
         
         
         
         
         
         
         
         
         
         
      <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>columnIndex</codeph></entry><entry> 与事件相关联的列的从零开始的索引。</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>itemRenderer</codeph></entry><entry>滑过的项呈示器。</entry></row><row><entry><codeph>reason</codeph></entry><entry>null</entry></row><row><entry><codeph>rowIndex</codeph></entry><entry>与事件相关联的项目的从零开始的索引。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>类型</codeph></entry><entry>ListEvent.ITEM_ROLL_OVER</entry></row></tbody></tgroup></adobetable>
     
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:columnIndex"><apiName>columnIndex</apiName><shortdesc>
      包含在其中发生该事件的项呈示器的列的从零开始的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      包含在其中发生该事件的项呈示器的列的从零开始的索引。
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:itemRenderer"><apiName>itemRenderer</apiName><shortdesc>
      在其中发生该事件的项呈示器。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>mx.controls.listClasses:IListItemRenderer</apiValueClassifier></apiValueDef><apiDesc>
      在其中发生该事件的项呈示器。您可以使用此属性访问数据提供程序。 
      
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ListEvent:reason"><apiName>reason</apiName><shortdesc>
      分派 itemEditEnd 事件的原因。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
      分派 <codeph>itemEditEnd</codeph> 事件的原因。仅对类型为 <codeph>ITEM_EDIT_END</codeph> 的事件有效。这些可能的值是在 ListEventReason 类中定义的。
     
      </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#ListEventReason"><linktext>ListEventReason</linktext></link></related-links></apiValue><apiValue id="mx.events:ListEvent:rowIndex"><apiName>rowIndex</apiName><shortdesc>
      在包含项呈示器（在其中发生了此事件）的行的从零开始的索引中；对于编辑事件，则为在数据提供程序中正在编辑的项目的索引。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="int"/></apiValueDef><apiDesc>
      在包含项呈示器（在其中发生了此事件）的行的从零开始的索引中；对于编辑事件，则为在数据提供程序中正在编辑的项目的索引。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:DateChooserEventDetail"><apiName>DateChooserEventDetail</apiName><shortdesc>
  定义 DateChooserEvent 对象的 detail 属性值的常数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  定义 DateChooserEvent 对象的 <codeph>detail</codeph> 属性值的常量。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#DateChooserEvent"><linktext>mx.events.DateChooserEvent</linktext></link></related-links><apiValue id="mx.events:DateChooserEventDetail:NEXT_MONTH"><apiName>NEXT_MONTH</apiName><shortdesc>
	  指示用户已将日历滚动到下个月。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nextMonth</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示用户已将日历滚动到下个月。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DateChooserEventDetail:NEXT_YEAR"><apiName>NEXT_YEAR</apiName><shortdesc>
	  指示用户已将日历滚动到下一年。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nextYear</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示用户已将日历滚动到下一年。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DateChooserEventDetail:PREVIOUS_MONTH"><apiName>PREVIOUS_MONTH</apiName><shortdesc>
	  指示用户已将日历滚动到上个月。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>previousMonth</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示用户已将日历滚动到上个月。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:DateChooserEventDetail:PREVIOUS_YEAR"><apiName>PREVIOUS_YEAR</apiName><shortdesc>
	  指示用户已将日历滚动到上一年。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>previousYear</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  指示用户已将日历滚动到上一年。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ChildExistenceChangedEvent"><apiName>ChildExistenceChangedEvent</apiName><shortdesc>
  代表创建或删除控件的子项时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  代表创建或删除控件的子项时分派的事件。 
  
  </apiDesc></apiClassifierDetail><adobeApiEvent id="mx.events:ChildExistenceChangedEvent:CHILD_ADD_childAdd"><apiName>childAdd</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ChildExistenceChangedEvent:CHILD_ADD</apiEventType><adobeApiEventClassifier>mx.events:ChildExistenceChangedEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ChildExistenceChangedEvent:CHILD_REMOVE_childRemove"><apiName>childRemove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ChildExistenceChangedEvent:CHILD_REMOVE</apiEventType><adobeApiEventClassifier>mx.events:ChildExistenceChangedEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:ChildExistenceChangedEvent:OVERLAY_CREATED_overlayCreated"><apiName>overlayCreated</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ChildExistenceChangedEvent:OVERLAY_CREATED</apiEventType><adobeApiEventClassifier>mx.events:ChildExistenceChangedEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:ChildExistenceChangedEvent:ChildExistenceChangedEvent"><apiName>ChildExistenceChangedEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiType value="flash.display:DisplayObject"/><apiData>null</apiData><apiDesc>对创建或删除的子对象的引用。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:ChildExistenceChangedEvent:CHILD_ADD"><apiName>CHILD_ADD</apiName><shortdesc>
	  ChildExistenceChangedEvent.CHILD_ADD 常量可为 childAdd 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>childAdd</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ChildExistenceChangedEvent.CHILD_ADD</codeph> 常量可为 <codeph>childAdd</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
	     
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>包含对创建的子对象的引用。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ChildExistenceChangedEvent:CHILD_REMOVE"><apiName>CHILD_REMOVE</apiName><shortdesc>
	  ChildExistenceChangedEvent.CHILD_REMOVE 常量可为 childRemove 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>childRemove</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ChildExistenceChangedEvent.CHILD_REMOVE</codeph> 常量可为 <codeph>childRemove</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
	     
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>包含对要删除的子对象的引用。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ChildExistenceChangedEvent:OVERLAY_CREATED"><apiName>OVERLAY_CREATED</apiName><shortdesc>
	  ChildExistenceChangedEvent.OVERLAY_CREATED 常量可为 overlayCreated 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>overlayCreated</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ChildExistenceChangedEvent.OVERLAY_CREATED</codeph> 常量可为 <codeph>overlayCreated</codeph> 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
	     
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>包含对创建叠加层的子对象的引用。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ChildExistenceChangedEvent:relatedObject"><apiName>relatedObject</apiName><shortdesc>
	  对创建或删除的子对象的引用。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="flash.display:DisplayObject"/></apiValueDef><apiDesc>
	  对创建或删除的子对象的引用。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:StateChangeEvent"><apiName>StateChangeEvent</apiName><shortdesc>
  StateChangeEvent 类代表当组件的 currentState 属性更改时分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  StateChangeEvent 类代表当组件的 <codeph>currentState</codeph> 属性更改时分派的事件。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link><link href="mx.states.xml#State"><linktext>mx.states.State</linktext></link></related-links><adobeApiEvent id="mx.events:StateChangeEvent:CURRENT_STATE_CHANGE_currentStateChange"><apiName>currentStateChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:StateChangeEvent:CURRENT_STATE_CHANGE</apiEventType><adobeApiEventClassifier>mx.events:StateChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="mx.events:StateChangeEvent:CURRENT_STATE_CHANGING_currentStateChanging"><apiName>currentStateChanging</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:StateChangeEvent:CURRENT_STATE_CHANGING</apiEventType><adobeApiEventClassifier>mx.events:StateChangeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:StateChangeEvent:StateChangeEvent"><apiName>StateChangeEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>oldState</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>组件正在退出的视图状态的名称。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>newState</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>组件正在进入的视图状态的名称。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。通常由 Flex 控件调用且不用于应用程序代码。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:StateChangeEvent:CURRENT_STATE_CHANGE"><apiName>CURRENT_STATE_CHANGE</apiName><shortdesc>
	  StateChangeEvent.CURRENT_STATE_CHANGE 常量定义当视图状态更改时分派的事件的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>currentStateChange</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  StateChangeEvent.CURRENT_STATE_CHANGE 常量定义当视图状态更改时分派的事件的 <codeph>type</codeph> 属性的值。该常量的值是“currentStateChange”。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>newState</codeph></entry><entry>已进入的视图状态的名称。</entry></row><row><entry><codeph>oldState</codeph></entry><entry>已退出的视图状态的名称。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>StateChangeEvent.CURRENT_STATE_CHANGE</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:StateChangeEvent:CURRENT_STATE_CHANGING"><apiName>CURRENT_STATE_CHANGING</apiName><shortdesc>
	  StateChangeEvent.CURRENT_STATE_CHANGING 常量定义当视图状态将要更改时分派的事件的 type 属性的值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>currentStateChanging</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  StateChangeEvent.CURRENT_STATE_CHANGING 常量定义当视图状态将要更改时分派的事件的 <codeph>type</codeph> 属性的值。该常量的值是“currentStateChanging”。
	 
	  <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
         
         
         
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>newState</codeph></entry><entry>正在进入的视图状态的名称。</entry></row><row><entry><codeph>oldState</codeph></entry><entry>正在退出的视图状态的名称。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row><row><entry><codeph>type</codeph></entry><entry>StateChangeEvent.CURRENT_STATE_CHANGING</entry></row></tbody></tgroup></adobetable>
	 
      </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:StateChangeEvent:newState"><apiName>newState</apiName><shortdesc>
	  组件正在进入的视图状态的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  组件正在进入的视图状态的名称。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:StateChangeEvent:oldState"><apiName>oldState</apiName><shortdesc>
	  组件正在退出的视图状态的名称。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  组件正在退出的视图状态的名称。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ScrollEventDirection"><apiName>ScrollEventDirection</apiName><shortdesc>
  表示 ScrollEvent 的 direction 属性的值的常数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  表示 ScrollEvent 的 <codeph>direction</codeph> 属性的值的常量。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.events.xml#ScrollEvent"><linktext>mx.events.ScrollEvent</linktext></link></related-links><apiValue id="mx.events:ScrollEventDirection:HORIZONTAL"><apiName>HORIZONTAL</apiName><shortdesc>
	  用户水平滚动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontal</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  用户水平滚动。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEventDirection:VERTICAL"><apiName>VERTICAL</apiName><shortdesc>
	  用户垂直滚动。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>vertical</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  用户垂直滚动。
	  
	  </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="mx.events:ScrollEvent"><apiName>ScrollEvent</apiName><shortdesc>
  代表由 ScrollBar 类分派的事件。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
  代表由 ScrollBar 类分派的事件。
 
  </apiDesc></apiClassifierDetail><related-links><link href="mx.core.xml#UIComponent"><linktext>mx.core.UIComponent</linktext></link></related-links><adobeApiEvent id="mx.events:ScrollEvent:SCROLL_scroll"><apiName>scroll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>mx.events:ScrollEvent:SCROLL</apiEventType><adobeApiEventClassifier>mx.events:ScrollEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="mx.events:ScrollEvent:ScrollEvent"><apiName>ScrollEvent</apiName><shortdesc>
	  构造函数。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiType value="String"/><apiDesc>事件类型；指示引发事件的动作。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定该事件是否可以在显示列表层次结构得到冒泡处理。
         
          </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiType value="Boolean"/><apiData>false</apiData><apiDesc>指定是否可以防止与事件相关联的行为。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>detail</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>提供有关滚动活动类型的具体信息。表示可能的值的常量在 ScrollEventDetail 类中提供。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>新的滚动位置。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>direction</apiItemName><apiType value="String"/><apiData>null</apiData><apiDesc>滚动方向，<codeph>ScrollEventDirection.HORIZONTAL</codeph> 或 <codeph>ScrollEventDirection.VERTICAL</codeph>。
	 
	  </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiType value="Number"/><apiData>unknown</apiData><apiDesc>滚动位置的更改（以像素为单位）。
	  
	  </apiDesc></apiParam></apiConstructorDef><apiDesc>
	  构造函数。
	 
	  </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="mx.events:ScrollEvent:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	  ScrollEvent.SCROLL 常量可为 scroll 事件定义事件对象的 type 属性值。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiType value="String"/></apiValueDef><apiDesc>
	  <codeph>ScrollEvent.SCROLL</codeph> 常量可为 scroll 事件定义事件对象的 <codeph>type</codeph> 属性值。
	 
     <p>事件对象的属性有下列值：</p>
	  <adobetable class="innertable">
	     
         
         
         
 	       
	       
 	       
         
	  <tgroup cols="2"><thead><row><entry>属性</entry><entry>值</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry>false</entry></row><row><entry><codeph>cancelable</codeph></entry><entry>false</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>用于定义处理该事件的事件侦听器的 Object。例如，如果您使用 <codeph>myButton.addEventListener()</codeph> 注册某个事件侦听器，则 myButton 为 <codeph>currentTarget</codeph> 的值。 </entry></row><row><entry><codeph>delta</codeph></entry><entry>包含滚动位置的更改（以像素为单位）。正值指示向下或向右滚动。负值指示向上或向左滚动。</entry></row><row><entry><codeph>direction</codeph></entry><entry>包含滚动方向，<codeph>ScrollEventDirection.HORIZONTAL</codeph> 或 <codeph>ScrollEventDirection.VERTICAL</codeph>。</entry></row><row><entry><codeph>position</codeph></entry><entry>包含新的滚动位置。</entry></row><row><entry><codeph>target</codeph></entry><entry>分派该事件的 Object；它不一定是侦听该事件的 Object。使用 <codeph>currentTarget</codeph> 属性始终可以访问侦听事件的 Object。</entry></row></tbody></tgroup></adobetable>
         
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEvent:delta"><apiName>delta</apiName><shortdesc>
	  滚动导致的滚动位置值的更改。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  滚动导致的滚动位置值的更改。该值以像素为单位。正值指示向下或向右滚动。负值指示向上或向左滚动。
	  
	  </apiDesc></apiValueDetail></apiValue><apiValue id="mx.events:ScrollEvent:detail"><apiName>detail</apiName><shortdesc>
	  提供滚动活动的细节。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  提供滚动活动的细节。表示可能的值的常量在 ScrollEventDetail 类中提供。
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#ScrollEventDetail"><linktext>mx.events.ScrollEventDetail</linktext></link></related-links></apiValue><apiValue id="mx.events:ScrollEvent:direction"><apiName>direction</apiName><shortdesc>
	  运动方向。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="String"/></apiValueDef><apiDesc>
	  运动方向。可能的值为 <codeph>ScrollEventDirection.VERTICAL</codeph> 或 <codeph>ScrollEventDirection.HORIZONTAL</codeph>。
	 
	  </apiDesc></apiValueDetail><related-links><link href="mx.events.xml#ScrollEventDirection"><linktext>mx.events.ScrollEventDirection</linktext></link></related-links></apiValue><apiValue id="mx.events:ScrollEvent:position"><apiName>position</apiName><shortdesc>
	  新的滚动位置。</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.1"/><apiTool name="Flex" version="3"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value="Number"/></apiValueDef><apiDesc>
	  新的滚动位置。
      
      </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>