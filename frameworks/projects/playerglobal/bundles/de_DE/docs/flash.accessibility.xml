<?xml version="1.0"?>
<apiPackage id="flash.accessibility"><apiName>flash.accessibility</apiName><apiDetail/><apiClassifier id="flash.accessibility:AccessibilityImplementation"><apiName>AccessibilityImplementation</apiName><shortdesc>
 </shortdesc><prolog><asMetadata/></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
  Diese Klasse ermöglicht die Kommunikation zwischen einer Komponente und einem Bildschirmleseprogramm. Bildschirmleseprogramme werden verwendet, um Bildschirminhalte für Sehbehinderte in künstliche Sprachausgabe oder Braille umzuwandeln.
 
 <p/>
 
 <p> <i/></p>
 
 <p><xref href="http://msdn.microsoft.com/en-us/library/ms696097(VS.85).aspx"/></p>
 
 <p/>
 
 <p>  <i/></p>
 </apiDesc></apiClassifierDetail><apiConstructor id="flash.accessibility:AccessibilityImplementation:AccessibilityImplementation"><apiName>AccessibilityImplementation</apiName><shortdesc>
	 </shortdesc><prolog/><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	  
	 
	 </apiDesc></apiConstructorDetail><related-links><link href=""><linktext/></link></related-links></apiConstructor><apiOperation id="flash.accessibility:AccessibilityImplementation:accDoDefaultAction"><apiName>accDoDefaultAction</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 
	 
	 <p/>
	 
	 <p><codeph/> <codeph/><codeph/></p>
	 
	 </apiDesc><example> 
	 <codeblock rev="3.0">
	 override public function accDoDefaultAction(childID:uint):void
	 {
	 	if (childID > 0)
	 		ListBase(master).selectedIndex = childID - 1;
	 }</codeblock>
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accLocation"><apiName>accLocation</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc><codeph/><codeph/><codeph/>
	 
	 
	 </apiDesc><apiType value="any"/></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 <codeph/><codeph/>
	 
	 <p><codeph/>  </p>
	 
	 <p> <codeph/> <codeph/></p>	
	 
	 <p><codeph/><codeph/><codeph/><codeph/><codeph/> <codeph/><codeph/><codeph/><codeph/>  <codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/><codeph/><codeph/><codeph/> <codeph/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">
	 override public function accLocation(childID:uint):*
	 
	 {
	 	var listBase:ListBase = ListBase(master);
	 
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;lt; listBase.verticalScrollPosition ||
	 		index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 	{
	 		return null;
	 	}
	 	var item:Object = getItemAt(index);
	 
	 	return listBase.itemToItemRenderer(item);
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link><link href="flash.geom.xml#Rectangle"><linktext>flash.geom.Rectangle</linktext></link><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696118(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:accSelect"><apiName>accSelect</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>selFlag</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>  
	 </apiDesc></apiParam><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
	 
	 <p><codeph/> </p>
	 
	 <p><codeph/><codeph/>  <codeph/></p>
	 
	 <p><codeph/><codeph/> <codeph/><codeph/> </p>
	 
	 <p><codeph/></p>
	 <ul>
	 <li><p><codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/> <codeph/> <codeph/> <codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/><codeph/></p>
	 </li>
	 <li><p><codeph/><codeph/><codeph/></p></li>
	 </ul>
	 
	 <p><codeph/><codeph/><codeph/> <codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/></p>
	 <p><codeph/><i/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function accSelect(selFlag:uint, childID:uint):void
	 {
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:uint = childID - 1;
	 	
	 	if (index &amp;gt;= 0 &amp;&amp; index &amp;lt; listBase.dataProvider.length)
	 		listBase.selectedIndex = index;
	 }
	 </codeblock>
	 	
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms697291(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:getChildIDArray"><apiName>getChildIDArray</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  
	 
	 <p>  </p>
	 
	 <p>  <i/> </p>
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function getChildIDArray():Array
	 {
	 	var childIDs:Array = [];
	 
	 	if (ListBase(master).dataProvider)
	 	{
	 		var n:uint = ListBase(master).dataProvider.length;
	 		for (var i:int = 0; i &amp;lt; n; i++)
	 		{
	 			childIDs[i] = i + 1;
	 		}
	 	}
	 	return childIDs;
	 }
	 </codeblock>
	 
	 </example></apiOperationDetail></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accDefaultAction"><apiName>get_accDefaultAction</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc> 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 
	 
	 <p> </p>
	 
	 <p><codeph/><codeph/> <codeph/></p>
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accDefaultAction(childID:uint):String
	 {
	 	if (childID == 0)
	 		return null;
	 
	 	return "Double Click";
	 }</codeblock>
	  
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696144(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accFocus"><apiName>get_accFocus</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">override public function get_accFocus():uint
	 {
	 var index:uint = ListBase(master).selectedIndex;
	 
	 return index >= 0 ? index + 1 : 0;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696150(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accName"><apiName>get_accName</apiName><shortdesc>
	 </shortdesc><prolog><asCustoms><helpid>3000
	 
	 </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	  </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p><codeph/><codeph/></p>
	 
	 <p><codeph/></p>
	 
	 <p>  <codeph/>  </p>
	 
	 <p><codeph/>  <codeph/> </p>
	 
	 <p><codeph/></p>
	 <ul>
	 <li><p><b/><codeph/><codeph/> <codeph/><codeph/><codeph/></p>
	 </li>
	 <li><p><b/><codeph/><codeph/> <codeph/></p>
     	 </li>
     	 <li><p><b/><codeph/><codeph/> <codeph/><codeph/><codeph/></p>
     	 </li>
	 </ul>
     	 <p> <codeph/><codeph/> </p>
     	 
     	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accName(childID:uint):String
	 {
	 	// Start with the name of the component's parent form 
	  	// if the component is contained within a form
	 	var accName:String = UIComponentAccImpl.getFormName(master);
	 
	 	// If the element requested is the component itself, 
	 	// append the value of any assigned accessibilityProperties.name	
	 	if (childID == 0 &amp;&amp; master.accessibilityProperties 
	 		&amp;&amp; master.accessibilityProperties.name 
	 			&amp;&amp; master.accessibilityProperties.name != "")
	 		accName += master.accessibilityProperties.name + " ";
	 
	 	// Append the value of the childIDs name 
	 // returned by the component-specific override 
	 // of the mx.accessibility.AccImpl.getName() utility function,
	 	// and append the component's status returned by the 
	 // component-specific override of the 
	 // mx.accessibility.AccImpl.getStatusName() utility function
	 	accName += getName(childID) + getStatusName();
	 
	 // Return the assembled String if it is neither empty nor null, 
	 // otherwise return null
	 	return (accName != null &amp;&amp; accName != "") ? accName : null;
	 }</codeblock>
	 
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="flash.accessibility.xml#AccessibilityProperties"><linktext>flash.accessibility.AccessibilityProperties</linktext></link><link href="flash.accessibility.xml#AccessibilityProperties/name"><linktext/></link><link href=""><linktext/></link><link href=""><linktext/></link><link href=""><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696177(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accRole"><apiName>get_accRole</apiName><shortdesc>
	 </shortdesc><prolog><asCustoms><helpid>3000
	  
	 </helpid></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><xref href="../../runtimeErrors.html#2143"/>
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc> 
	  
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	  	 
	 
	 </apiDesc><example>
	 <codeblock rev="3.0">override public function get_accRole(childID:uint):uint
	 {
	 	if (childID == 0)
	 		return role;
	 		
	 	return ROLE_SYSTEM_LISTITEM;
	 }</codeblock>
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="../../accessibilityImplementationConstants.html#roles"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696113(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accSelection"><apiName>get_accSelection</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	  
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function get_accSelection():Array
	 {
	 	var accSelection:Array = [];
	 
	 	var selectedIndices:Array = ListBase(master).selectedIndices;
	 	
	 	var n:int = selectedIndices.length;
	 	for (var i:int = 0; i &amp;lt; n; i++)
	 	{
	 		accSelection[i] = selectedIndices[i] + 1;
	 	}
	 	
	 	return accSelection;
	 }
	 </codeblock>
	 
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696179(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accState"><apiName>get_accState</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc><xref href="../../runtimeErrors.html#2144"/>
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc> <codeph/> 
	 
	 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p><xref href="../../accessibilityImplementationConstants.html"/> <codeph/></p>
	 
	 <p/>
	 
	 <p> </p>
	 
	 </apiDesc><example>
	 
	 <codeblock rev="3.0">
	 override public function get_accState(childID:uint):uint
	 {
	 	var accState:uint = getState(childID);
	 
	 	if (childID &amp;gt; 0) 
	 	{
	 		var listBase:ListBase = ListBase(master);
	 
	 		var index:uint = childID - 1;
	 
	 		// For returning states (OffScreen and Invisible)
	 		// when the list Item is not in the displayed rows.
	 		if (index &amp;lt; listBase.verticalScrollPosition ||
	 			index &amp;gt;= listBase.verticalScrollPosition + listBase.rowCount)
	 		{
	 			accState |= (STATE_SYSTEM_OFFSCREEN |
	 						 STATE_SYSTEM_INVISIBLE);
	 		}
	 		else
	 		{
	 			accState |= STATE_SYSTEM_SELECTABLE;
	 
	 			var item:Object = getItemAt(index);
	 
	 			var renderer:IListItemRenderer =
	 				listBase.itemToItemRenderer(item);
	 
	 			if (renderer != null &amp;&amp; listBase.isItemSelected(renderer.data))
	 				accState |= STATE_SYSTEM_SELECTED | STATE_SYSTEM_FOCUSED;
	 		}
	 	}
	 
	 	return accState;
	 }</codeblock>
	 
	  </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="../../accessibilityImplementationConstants.html#states"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms696191(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:AccessibilityImplementation:get_accValue"><apiName>get_accValue</apiName><shortdesc>
	 </shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>
	  
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc><codeph/>
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 
	 
	 <p> <codeph/><codeph/><codeph/></p>
	 
	 <p><codeph/><codeph/> <codeph/></p>
	 
	 </apiDesc><example><codeph/>
	 
	 <codeblock rev="3.0">override public function get_accValue(childID:uint):String
	 {
	 	var accValue:String;
	 	
	 	var listBase:ListBase = ListBase(master);
	 	
	 	var index:int = listBase.selectedIndex;
	 	if (childID == 0)
	 	{
	 		if (index > -1)
	 		{
	 			var item:Object = getItemAt(index);
	 
	 			if (item is String)
	 			{
	 				accValue = item + " " + (index + 1) + " of " + listBase.dataProvider.length;
	 			}
	 			else
	 			{
	 				accValue = listBase.itemToLabel(item) + " " + (index + 1) +
	 						   " of " + listBase.dataProvider.length;
	 			}
	 		}
	 	}
	 
	 	return accValue;
	 }</codeblock>
	 
	 </example></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation/getChildIDArray()"><linktext/></link><link href="http://msdn.microsoft.com/en-us/library/ms697312(VS.85).aspx"><linktext/></link></related-links></apiOperation><apiValue id="flash.accessibility:AccessibilityImplementation:errno"><apiName>errno</apiName><shortdesc>
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	  <codeph/>  <codeph/>
	 
	 </apiDesc></apiValueDetail><related-links><link href="../../accessibilityImplementationConstants.html"><linktext/></link></related-links></apiValue><apiValue id="flash.accessibility:AccessibilityImplementation:stub"><apiName>stub</apiName><shortdesc>
	 </shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	   
	 
	 <p><codeph/></p> 
	 
	 </apiDesc></apiValueDetail><related-links><link href=""><linktext/></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.accessibility:AccessibilityProperties"><apiName>AccessibilityProperties</apiName><shortdesc>
 Mit der AccessibilityProperties-Klasse können Sie die Darstellung von Flash-Objekten in Hilfen zur Unterstützung der Barrierefreiheit, z. B. Bildschirmleseprogrammen, beeinflussen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Mit der AccessibilityProperties-Klasse können Sie die Darstellung von Flash-Objekten in Hilfen zur Unterstützung der Barrierefreiheit, z. B. Bildschirmleseprogrammen, beeinflussen.
 
 <p>Sie können allen Anzeigeobjekten ein AccessibilityProperties-Objekt zuordnen. Dieses wird von Flash Player jedoch nur für bestimmte Objektarten gelesen: ganze SWF-Dateien (dargestellt durch <codeph>DisplayObject.root</codeph>), Containerobjekte (<codeph>DisplayObjectContainer</codeph> und Unterklassen), Schaltflächen (<codeph>SimpleButton</codeph> und Unterklassen) sowie Text (<codeph>TextField</codeph> und Unterklassen).</p>
 
 <p>Die <codeph>name</codeph>-Eigenschaft dieser Objekte ist die wichtigste festzulegende Eigenschaft, da Hilfen zur Barrierefreiheit die Objektnamen als Grundlage für die Benutzernavigation verwendet werden. Verwechseln Sie nicht <codeph>AccessibilityProperties.name</codeph> mit <codeph>DisplayObject.name</codeph>. Dies sind unterschiedliche und voneinander unabhängige Eigenschaften. Die <codeph>AccessibilityProperties.name</codeph>-Eigenschaft ist ein Name, der von Hilfen zur Barrierefreiheit vorgelesen wird. Bei <codeph>DisplayObject.name</codeph> hingegen handelt es sich im Wesentlichen um einen Variablennamen, der nur im ActionScript-Code verfügbar ist.</p>
 
 <p product="flash">Diese Eigenschaften von <codeph>AccessibilityProperties</codeph>-Objekten setzen die Eigenschaften außer Kraft, die beim Authoring im Bedienfeld „Eingabehilfen“ (Hilfen zur Barrierefreiheit) verfügbar sind.</p>
 
 <p>Um zu ermitteln, ob Flash Player in einer Umgebung ausgeführt wird, die Hilfen zur Barrierefreiheit unterstützt, verwenden Sie die <codeph>Capabilities.hasAccessibility</codeph>-Eigenschaft. Wenn Sie AccessibilityProperties-Objekte ändern, müssen Sie die <codeph>Accessibility.updateProperties()</codeph>-Methode aufrufen, damit die Änderungen wirksam werden.</p>
 
 
 </apiDesc><example conref="examples\AccessibilityPropertiesExample.as"> Im folgenden Beispiel wird mit den Klassen <codeph>AccessibilityExample</codeph>, <codeph>CustomAccessibleButton</codeph>, <codeph>CustomSimpleButton</codeph> und <codeph>ButtonDisplayState</codeph> ein Menü erstellt, das mit den Hilfen zur Barrierefreiheit kompatibel ist und mit den gängigen Bildschirmleseprogrammen funktioniert. Die Hauptfunktionalität der Klasse <codeph>AccessibilityProperties</codeph> lautet wie folgt:
 
 <ol TYPE="1">
    <li> Rufen Sie die <codeph>configureAssets</codeph>-Methode auf, die eine benutzerdefinierte Schaltfläche erstellt und ihre Werte für Bezeichnung und Beschreibung festlegt. Dies sind die Werte, die das Bildschirmleseprogramm an Endbenutzer weitergibt.</li>        
    <li>Rufen Sie <codeph>setTimeOut()</codeph> auf, um sicherzustellen, dass Flash Player genügend Zeit hat, das Bildschirmleseprogramm zu erkennen, bevor die Eigenschaften aktualisiert werden.</li>
    </ol>
 
 <p><b>Hinweis:</b> Rufen Sie <codeph>setTimeout()</codeph> auf, bevor Sie <codeph>Accessibility.active</codeph> aktivieren, um Flash Player die zwei Sekunden zu geben, die die Anwendung zum Herstellen der Verbindung zu einem Bildschirmleseprogramm benötigt (falls vorhanden). Wenn Sie keine ausreichende Zeitverzögerung angeben, wird beim Aufrufen von <codeph>setTimeout</codeph> ggf. auch <codeph>false</codeph> zurückgegeben, wenn ein Bildschirmleseprogramm verfügbar ist.</p>
 
 <p>Das folgende Beispiel verarbeitet die <codeph>Accessibility.updateProperties()</codeph>-Methode nur, wenn beim Aufrufen von <codeph>Accessibility.active</codeph> der Wert <codeph>true</codeph> zurückgegeben wird. Dies ist nur der Fall, wenn Flash Player gerade über eine Verbindung zu einem aktiven Bildschirmleseprogramm verfügt. Wenn Sie <codeph>updateProperties</codeph> aufrufen, ohne dass ein Bildschirmleseprogramm aktiv ist, wird eine <codeph>IllegalOperationError</codeph>-Ausnahme ausgelöst.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityPropertiesExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityPropertiesExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }


import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;
    
class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label1:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityPropertiesExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityPropertiesExample.BUTTON_HEIGHT : _height;
            
        button = buildButton(_width, _height);
        label1 = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
            
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label1.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>flash.accessibility.Accessibility.updateProperties()</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.display.xml#InteractiveObject/tabIndex"><linktext>flash.display.InteractiveObject.tabIndex</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link></related-links><apiConstructor id="flash.accessibility:AccessibilityProperties:AccessibilityProperties"><apiName>AccessibilityProperties</apiName><shortdesc>
	 Erstellt ein neues AccessibilityProperties-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Erstellt ein neues AccessibilityProperties-Objekt.
     </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.accessibility:AccessibilityProperties:description"><apiName>description</apiName><shortdesc>
	 Gibt eine Beschreibung dieses Anzeigeobjekts in der barrierefreien Darstellung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt eine Beschreibung dieses Anzeigeobjekts in der barrierefreien Darstellung. Wenn zu einem Objekt eine große Menge an Informationen angeboten werden soll, wählen Sie am besten einem kurzen Namen und weisen die übrigen Angaben der <codeph>description</codeph>-Eigenschaft zu. Gilt für ganze SWF-Dateien, Container, Schaltflächen und Text. Der Standardwert lautet "" (ein leerer String).
     <p product="flash">Entspricht dem Feld „Beschreibung“ im Bedienfeld „Eingabehilfen“.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:forceSimple"><apiName>forceSimple</apiName><shortdesc>
	 Der Wert true bewirkt, dass Flash Player untergeordnete Objekte dieses Anzeigeobjekts von der barrierefreien Darstellung ausschließt.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Der Wert <codeph>true</codeph> bewirkt, dass Flash Player untergeordnete Objekte dieses Anzeigeobjekts von der barrierefreien Darstellung ausschließt. Der Standardwert lautet <codeph>false</codeph>. Gilt für ganze SWF-Dateien und Container.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:name"><apiName>name</apiName><shortdesc>
	 Gibt einen Namen für dieses Anzeigeobjekt in der barrierefreien Darstellung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt einen Namen für dieses Anzeigeobjekt in der barrierefreien Darstellung an. Gilt für ganze SWF-Dateien, Container, Schaltflächen und Text. Nicht zu verwechseln mit der davon unabhängigen Eigenschaft <codeph>DisplayObject.name. </codeph> Der Standardwert lautet "" (ein leerer String).
     <p product="flash">Entspricht dem Feld „Name“ im Bedienfeld „Eingabehilfen“.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:noAutoLabeling"><apiName>noAutoLabeling</apiName><shortdesc>
	 Wenn dieser Wert „true“ ist, wird das standardmäßig aktivierte System der automatischen Bezeichnerzuweisung von Flash Player deaktiviert.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn dieser Wert <codeph>true</codeph> lautet, wird das standardmäßig aktivierte System der automatischen Bezeichnerzuweisung von Flash Player deaktiviert. Bei der automatischen Bezeichnerzuweisung werden Textobjekte innerhalb von Schaltflächen als Schaltflächennamen und Textobjekte in der Nähe von Textfeldern als Textfeldnamen behandelt. Der Standardwert lautet <codeph>false</codeph>. Gilt nur für ganze SWF-Dateien.
     <p>Der Wert der Eigenschaft <codeph>noAutoLabeling</codeph> wird ignoriert, sofern Sie ihn nicht angeben, bevor die SWF-Datei zum ersten Mal auf Barrierefreiheit geprüft wird. Wenn Sie beabsichtigen, <codeph>noAutoLabeling</codeph> auf den Wert <codeph>true</codeph> einzustellen, sollten Sie dies im Programmcode so früh wie möglich tun.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:shortcut"><apiName>shortcut</apiName><shortdesc>
	 Gibt eine Tastenkombination an, die diesem Anzeigeobjekt zugeordnet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt eine Tastenkombination an, die diesem Anzeigeobjekt zugeordnet ist. Geben Sie diesen String nur für Steuerelemente der Benutzeroberfläche an, denen Sie eine Tastenkombination zugewiesen haben. Gilt für Container, Schaltflächen und Text. Der Standardwert lautet "" (ein leerer String).
	 
	 <p><b>Hinweis</b>: Durch das Zuweisen dieser Eigenschaft wird dem Objekt nicht automatisch die entsprechende Tastenkombination zugewiesen. Dafür müssen Sie selbst sorgen, indem Sie beispielsweise auf entsprechende <codeph>KeyboardEvent</codeph>-Ereignisse warten.</p>
	 
	 <p>Die Syntax dieses Strings verwendet lange Namen für die Zusatztasten und das Pluszeichen (+) zur Angabe von Tastenkombinationen. Beispiele für gültige Strings sind „Strg+F“, „Strg+Umschalt+Z“ usw.</p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.accessibility:AccessibilityProperties:silent"><apiName>silent</apiName><shortdesc>
	 Wenn dieser Wert „true“ ist, wird dieses Anzeigeobjekt von der barrierefreien Darstellung ausgenommen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn dieser Wert <codeph>true</codeph> ist, wird dieses Anzeigeobjekt von der barrierefreien Darstellung ausgenommen. Der Standardwert lautet <codeph>false</codeph>. Gilt für ganze SWF-Dateien, Container, Schaltflächen und Text.
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.accessibility:Accessibility"><apiName>Accessibility</apiName><shortdesc>
 Die Accessibility-Klasse verwaltet die Kommunikation mit Bildschirmleseprogrammen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Accessibility, Accessibility object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die Accessibility-Klasse verwaltet die Kommunikation mit Bildschirmleseprogrammen. Bildschirmleseprogramme sind eine Art unterstützende Technologie für Sehbehinderte, die auf diese Weise eine akustische Umsetzung des Bildschirminhalts erhalten. Die Methoden der Accessibility-Klasse sind statisch, d. h., Sie müssen keine Instanz der Klasse erzeugen, um ihre Methoden verwenden zu können.
 
 <p>Verwenden Sie die <codeph>DisplayObject.accessibilityProperties</codeph>-Eigenschaft, um die Eingabehilfeneigenschaften (für die Barrierefreiheit) eines bestimmten Objekts abzurufen und festzulegen, z. B. für eine Schaltfläche, einen Movieclip oder ein Textfeld. Um zu ermitteln, ob der Player in einer Umgebung ausgeführt wird, die Eingabehilfen/Barrierefreiheit unterstützt, verwenden Sie die <codeph>Capabilities.hasAccessibility</codeph>-Eigenschaft. </p>
 
 </apiDesc><example conref="examples\AccessibilityExample.as"> Im folgenden Beispiel wird mit den Beispielklassen <codeph>AccessibilityExample</codeph>, <codeph>CustomAccessibleButton</codeph>, <codeph>CustomSimpleButton</codeph> und <codeph>ButtonDisplayState</codeph> ein Menü erstellt, das mit Eingabehilfen-/Barrierefreiheit kompatibel ist und mit den meisten Bildschirmleseprogrammen funktioniert. In diesem Beispiel werden die folgenden Aufgaben ausgeführt:
 <ol>
    <li>Überwacht die <codeph>Accessibility.active</codeph>-Eigenschaft, um zu ermitteln, ob derzeit ein Bildschirmleseprogramm aktiv ist und ein Datenaustausch mit dem Player stattfindet.</li>
    <li>Wenn die <codeph>active</codeph>-Eigenschaft <codeph>true</codeph> lautet, ruft das Beispiel die <codeph>updateProperties()</codeph>-Methode auf, um die für die Eingabehilfen/Barrierefreiheit relevanten Änderungen anzuwenden, die in diesem Beispiel an den Schaltflächen vorgenommen wurden.</li>
    <li>Das Beispiel ruft die <codeph>flash.utils.setTimeout()</codeph>-Methode auf und gibt an, dass die <codeph>updateAccessibility()</codeph>-Abschlussmethode nach zwei Sekunden aufgerufen werden soll.</li>
 </ol>
 
 <p><b>Hinweis: </b> Rufen Sie <codeph>setTimeout()</codeph> auf, bevor Sie <codeph>Accessibility.active</codeph> aktivieren, um Flash Player die zwei Sekunden zu geben, die die Anwendung zum Herstellen der Verbindung zu einem Bildschirmleseprogramm benötigt (falls vorhanden). Wenn Sie keine ausreichende Zeitverzögerung angeben, wird beim Aufrufen von <codeph>setTimeout</codeph> ggf. auch dann <codeph>false</codeph> zurückgegeben, wenn ein Bildschirmleseprogramm verfügbar ist.
 </p>
 <p>Das folgende Beispiel verarbeitet die <codeph>Accessibility.updateProperties()</codeph>-Methode nur, wenn beim Aufrufen von <codeph>Accessibility.active</codeph> der Wert <codeph>true</codeph> zurückgegeben wird. Dies ist nur der Fall, wenn Flash Player gerade über eine Verbindung zu einem aktiven Bildschirmleseprogramm verfügt. Wenn Sie <codeph>updateProperties</codeph> aufrufen, ohne dass ein Bildschirmleseprogramm aktiv ist, wird eine <codeph>IllegalOperationError</codeph>-Ausnahme ausgelöst.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.accessibility.Accessibility;
    import flash.utils.setTimeout;
    
    public class AccessibilityExample extends Sprite {
        public static const BUTTON_WIDTH:uint = 90;
        public static const BUTTON_HEIGHT:uint = 20;
        
        private var gutter:uint = 5;
        private var menuLabels:Array = new Array("PROJECTS", "PORTFOLIO", "CONTACT");
        private var menuDescriptions:Array = new Array("Learn more about our projects"
                                                     , "See our portfolio"
                                                     , "Get in touch with our team");
        
        public function AccessibilityExample() {
            configureAssets();
            setTimeout(updateAccessibility, 2000); 
        }
        
        private function updateAccessibility():void {
            trace("Accessibility.active: " + Accessibility.active);
            if(Accessibility.active) {
                Accessibility.updateProperties();
            }
        }
        
        private function configureAssets():void {
            var child:CustomAccessibleButton;
            for(var i:uint; i &lt; menuLabels.length; i++) {
                child = new CustomAccessibleButton();
                child.y = (numChildren * (BUTTON_HEIGHT + gutter));
                child.setLabel(menuLabels[i]);
                child.setDescription(menuDescriptions[i]);
                addChild(child);
            }
        }
    }
}
    
import flash.accessibility.AccessibilityProperties;
import flash.display.Shape;
import flash.display.SimpleButton;
import flash.display.Sprite;
import flash.events.Event;
import flash.text.TextFormat;
import flash.text.TextField;


class CustomAccessibleButton extends Sprite {
    private var button:SimpleButton;
    private var label:TextField;
    private var description:String;
    private var _name:String;
        
    public function CustomAccessibleButton(_width:uint = 0, _height:uint = 0) {
        _width = (_width == 0) ? AccessibilityExample.BUTTON_WIDTH : _width;
        _height = (_height == 0) ? AccessibilityExample.BUTTON_HEIGHT : _height;
        
        button = buildButton(_width, _height);
        label = buildLabel(_width, _height);
            
        addEventListener(Event.ADDED, addedHandler);
    }
        
    private function addedHandler(event:Event):void {
        trace("addedHandler: " + this._name);
        var accessProps:AccessibilityProperties = new AccessibilityProperties();
        accessProps.name = this._name;
        accessProps.description = description;
        accessibilityProperties = accessProps;
        removeEventListener(Event.ADDED, addedHandler);
    }
        
    private function buildButton(_width:uint, _height:uint):SimpleButton {
        var child:SimpleButton = new CustomSimpleButton(_width, _height);
        addChild(child);
        return child;
    }

    private function buildLabel(_width:uint, _height:uint):TextField {
        var format:TextFormat = new TextFormat();
        format.font = "Verdana";
        format.size = 11;
        format.color = 0xFFFFFF;
        format.align = TextFormatAlign.CENTER;
        format.bold = true;
        
        var child:TextField = new TextField();
        child.y = 1;
        child.width = _width;
        child.height = _height;
        child.selectable = false;
        child.defaultTextFormat = format;
        child.mouseEnabled = false;
            
        addChild(child);
        return child;
    }
        
    public function setLabel(text:String):void {
        label.text = text;
        this._name = text;
    }
        
    public function setDescription(text:String):void {
        description = text;
    }
}
    
class CustomSimpleButton extends SimpleButton {
    private var upColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function CustomSimpleButton(_width:uint, _height:uint) {
        downState = new ButtonDisplayState(downColor, _width, _height);
        overState = new ButtonDisplayState(overColor, _width, _height);
        upState = new ButtonDisplayState(upColor, _width, _height);
        hitTestState = new ButtonDisplayState(upColor, _width, _height);
        useHandCursor = true;
    }        
}

class ButtonDisplayState extends Shape {
    private var bgColor:uint;
    private var _width:uint;
    private var _height:uint;

    public function ButtonDisplayState(bgColor:uint, _width:uint, _height:uint) {
        this.bgColor = bgColor;
        this._width = _width;
        this._height = _height;
        draw();
    }

    private function draw():void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, _width, _height);
        graphics.endFill();
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket</linktext></link></related-links><apiOperation id="flash.accessibility:Accessibility:sendEvent"><apiName>sendEvent</apiName><shortdesc>
	 
	 </shortdesc><prolog><asCustoms><nonHTML>A Boolean value indicating whether the event is one of the standard event types
	 that can be generated from an HTML form. When set to true, this parameter helps prevent
	 some problems that may occur with screen readers that interpret Flash content as part of
	 the HTML page. The default value is false.
	 </nonHTML></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiDesc>
	 </apiDesc></apiParam><apiParam><apiItemName>childID</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc> <codeph/>
	 </apiDesc></apiParam><apiParam><apiItemName>eventType</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc> 
	 </apiDesc></apiParam><apiParam><apiItemName>nonHTML</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiOperationDef><apiDesc>
	 
	   <codeph/><codeph/>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.accessibility.xml#AccessibilityImplementation"><linktext/></link><link href="" invalidHref="mx.accessibility.AccImpl.xml"><linktext/></link></related-links></apiOperation><apiOperation id="flash.accessibility:Accessibility:updateProperties"><apiName>updateProperties</apiName><shortdesc>
	Weist Flash Player an, alle mithilfe der DisplayObject.accessibilityProperties-Eigenschaft vorgenommenen Änderungen bezüglich Eingabehilfen/Barrierefreiheit zu übernehmen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>accessibility; Accessibility.updateProperties, updateProperties, screen reader,
	MSAA
    </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Barrierefreiheit/Eingabehilfen werden in dieser Flash Player-Version nicht unterstützt. Rufen Sie die <codeph>Accessibility.updateProperties()</codeph>-Methode nicht auf, wenn die <codeph>flash.system.Capabilities.hasAccessibility</codeph>-Eigenschaft auf <codeph>false</codeph> gesetzt ist.
	
	
	</apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Weist Flash Player an, alle mithilfe der <codeph>DisplayObject.accessibilityProperties</codeph>-Eigenschaft vorgenommenen Änderungen bezüglich Eingabehilfen/Barrierefreiheit zu übernehmen. Sie müssen diese Methode aufrufen, damit die Änderungen wirksam werden. 
	
	<p>Wenn Sie die Eingabehilfeneigenschaften für die Barrierefreiheit mehrerer Objekte ändern, ist nur ein einziger Aufruf der <codeph>Accessibility.updateProperties()</codeph>-Methode erforderlich. Mehrere Aufrufe können zu verminderter Leistung und fehlerhaften Ergebnissen der Bildschirmleserausgabe führen.</p>
	
	<p/>
	<pre>
	if (my_displayObj.accProps == undefined ) {
	  my_displayObj.accProps = new Object();
	}
	my_displayObj.accProps.name = "Photo of Mount Rushmore";
	Accessibility.updateProperties();
	</pre>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.accessibility.xml#Accessibility/active"><linktext>active</linktext></link><link href="flash.display.xml#DisplayObject/accessibilityProperties"><linktext>flash.display.DisplayObject.accessibilityProperties</linktext></link><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link></related-links></apiOperation><apiValue id="flash.accessibility:Accessibility:active:get"><apiName>active</apiName><shortdesc>
	Gibt an, ob derzeit ein Bildschirmleseprogramm aktiv ist und ein Datenaustausch mit dem Player stattfindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Accessibility.isActive, Accessibility, isActive, screen reader, MSAA
    </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob derzeit ein Bildschirmleseprogramm aktiv ist und ein Datenaustausch mit dem Player stattfindet. 
	
	<p><b/><sup/><codeph/> Der Grund dafür ist die asynchrone Kommunikation zwischen Flash und Eingabehilfen-Clients für Barrierefreiheit . Sie können dieses Problem umgehen, indem Sie die Methode erst mit einer Verzögerung von ein bis zwei Sekunden nach dem Laden des Dokuments aufrufen.</p>
	
	Um zu ermitteln, ob der Player in einer Umgebung ausgeführt wird, die Bildschirmleseprogramme unterstützt, verwenden Sie die <codeph>Capabilities.hasAccessibility</codeph>-Eigenschaft. 
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Capabilities/hasAccessibility"><linktext>flash.system.Capabilities.hasAccessibility</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>updateProperties()</linktext></link></related-links></apiValue></apiClassifier></apiPackage>