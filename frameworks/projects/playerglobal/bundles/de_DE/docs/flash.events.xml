<?xml version="1.0"?>
<apiPackage id="flash.events"><apiName>flash.events</apiName><apiDetail/><apiClassifier id="flash.events:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
 Ein KeyboardEvent-Objekt wird als Reaktion auf Tastatureingaben des Benutzers ausgelöst.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für Keyboard-Ereignisse.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein KeyboardEvent-Objekt wird als Reaktion auf Tastatureingaben des Benutzers ausgelöst. Es gibt zwei Arten von Tastaturereignissen: <codeph>KeyboardEvent.KEY_DOWN</codeph> und <codeph>KeyboardEvent.KEY_UP</codeph>
 
 <p>Da Zuordnungen zwischen Tasten und spezifischen Zeichen zwischen verschiedenen Geräten und Betriebssystemen variieren, verwenden Sie den Ereignistyp TextEvent für die Verarbeitung von eingegebenen Zeichen.</p>
 
 <p>Um global auf Tastenereignisse zu warten, überwachen Sie die Aufnahme- und Ziel- oder Bubbling-Phase auf der Bühne.</p>
 
 </apiDesc><example conref="examples\KeyboardEventExample.as"> Im folgenden Beispiel werden anhand der Klasse <codeph>KeyboardEventExample</codeph> Tastaturereignisse und die zugehörigen Listener-Funktionen erläutert. In diesem Beispiel werden die folgenden Aufgaben ausgeführt:
 <ol>
  <li>Die neue Sprite-Instanz <codeph>child</codeph> wird erstellt.</li>
     <li>Es werden Eigenschaften für die spätere Verwendung bei der Festlegung von Farbe und Größe eines Quadrats deklariert.</li>
     <li>Mithilfe von Sprite-Methoden wird ein hellblaues Quadrat gezeichnet, das unter Zuhilfenahme der <codeph>addChild()</codeph>-Methode mit den Standardkoordinaten (0,0) auf der Bühne dargestellt wird.</li>
     <li>Es werden ein Mausereignis und zwei Tastaturereignisse hinzugefügt:
     <ul>
      <li><codeph>click</codeph>/<codeph>clickHandler</codeph>, das ausgelöst wird, wenn Sie auf das Quadrat klicken, um den Fokus auf das <codeph>child</codeph>-Sprite zu verlagern, damit es auf Tastaturereignisse warten kann.</li>
         <li><codeph>keyDown</codeph>/<codeph>keyDownHandler</codeph> wird bei jedem Tastendruck ausgelöst. Die Abonnentenmethode druckt Informationen zum Ereignis mithilfe der <codeph>trace()</codeph>-Anweisung.</li>
         <li><codeph>keyUp</codeph>/<codeph>keyUpHandler</codeph> wird bei jedem Loslassen einer Taste ausgelöst.</li>
     </ul></li>
 </ol>
 
 <p>Wenn Sie dieses Beispiel testen, müssen Sie zunächst auf das Quadrat klicken, damit das Tastaturereignis funktioniert.</p>
 <p product="flash">Wenn Sie in Flash den Befehl „Film testen“ verwenden, reagiert möglicherweise die Authoring-Oberfläche anstelle des Ereignis-Listeners am child-Sprite auf bestimmte Tasten.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.*;

    public class KeyboardEventExample extends Sprite {
        private var child:Sprite = new Sprite();
        private var bgColor:uint = 0x00CCFF;
        private var size:uint = 80;

        public function KeyboardEventExample() {
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            addChild(child);
            child.addEventListener(MouseEvent.CLICK, clickHandler);
            child.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
            child.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            
        }

        private function clickHandler(event:MouseEvent):void {
            stage.focus = child;
        }

        private function keyDownHandler(event:KeyboardEvent):void {
            trace("keyDownHandler: " + event.keyCode);
            trace("ctrlKey: " + event.ctrlKey);
            trace("keyLocation: " + event.keyLocation);
            trace("shiftKey: " + event.shiftKey);
            trace("altKey: " + event.altKey);

        }

        private function keyUpHandler(event:KeyboardEvent):void {
            trace("keyUpHandler: " + event.keyCode);
        }
        
        
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.ui.xml#KeyLocation"><linktext>KeyLocation</linktext></link></related-links><adobeApiEvent id="flash.events:KeyboardEvent:KEY_DOWN_keyDown"><apiName>keyDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_DOWN</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:KeyboardEvent:KEY_UP_keyUp"><apiName>keyUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_UP</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:KeyboardEvent:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt, das bestimmte Informationen über Tastaturereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Folgende Werte sind möglich: <codeph>KeyboardEvent.KEY_DOWN</codeph> und <codeph>KeyboardEvent.KEY_UP</codeph>
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann.
	</apiDesc></apiParam><apiParam><apiItemName>charCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Der Zeichencodewert der gedrückten bzw. losgelassenen Taste. Die zurückgegebenen Codewerte sind Werte für die englische Tastatur. Wenn Sie beispielsweise auf einer japanischen Tastatur Umschalt+3 drücken, gibt <codeph>Keyboard.charCode()</codeph> wie auch bei einer englischen Tastatur das Zeichen # zurück.
	</apiDesc></apiParam><apiParam><apiItemName>keyCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Der Tastencodewert der gedrückten bzw. losgelassenen Taste.
	</apiDesc></apiParam><apiParam><apiItemName>keyLocationValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Die Position der Taste auf der Tastatur.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Unter Windows wird damit angezeigt, ob die Strg-Taste aktiviert ist. Unter Mac OS wird damit angezeigt, ob die Strg-Taste oder die Befehlstaste aktiviert ist.
	</apiDesc></apiParam><apiParam><apiItemName>altKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Alt-Taste als Zusatztaste aktiviert ist (nur Windows).
	</apiDesc></apiParam><apiParam><apiItemName>shiftKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Umschalttaste als Zusatztaste aktiviert ist.
	</apiDesc></apiParam><apiParam><apiItemName>controlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob unter Mac die Ctrl-Taste oder unter Windows oder Linux die Strg-Taste aktiviert ist.
	</apiDesc></apiParam><apiParam><apiItemName>commandKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Befehlstaste aktiviert ist (nur Mac).
	 
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für KeyboardEvent-Objekte.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt, das bestimmte Informationen über Tastaturereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.events.xml#KeyboardEvent/charCode"><linktext>Keyboard.charCode</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:KeyboardEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des KeyboardEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues KeyboardEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des KeyboardEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des KeyboardEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des KeyboardEvent-Objekts enthält.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des KeyboardEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph> [KeyboardEvent type= <i>value</i> bubbles= <i>value</i> cancelable= <i>value</i> ... shiftKey= <i>value</i> ] </codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Gibt an, dass die Anzeige nach der Verarbeitung dieses Ereignisses wiedergegeben werden sollte, falls die Anzeigeliste geändert wurde
	
	</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Gibt an, dass die Anzeige nach der Verarbeitung dieses Ereignisses wiedergegeben werden sollte, falls die Anzeigeliste geändert wurde
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:KeyboardEvent:KEY_DOWN"><apiName>KEY_DOWN</apiName><shortdesc>
	Die KeyboardEvent.KEY_DOWN-Konstante definiert den Wert der type-Eigenschaft eines keyDown-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>KeyboardEvent.KEY_DOWN</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>keyDown</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry>Wert <codeph>true</codeph> in AIR, Wert <codeph>false</codeph> in Flash Player; in AIR wird durch Abbrechen dieses Ereignisses verhindert, dass das Zeichen in ein Textfeld eingegeben wird.</entry></row><row><entry><codeph>charCode</codeph></entry><entry>Der Zeichencodewert der gedrückten bzw. losgelassenen Taste.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac, wenn die Befehlstaste aktiviert ist. Andernfalls wird <codeph>false</codeph> zurückgegeben</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> unter Windows und Linux, wenn die Strg-Taste aktiviert ist. <codeph>true</codeph> unter Mac, wenn die Ctrl-Taste aktiviert ist. Andernfalls wird <codeph>false</codeph> zurückgegeben</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows und Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>Der Tastencodewert der gedrückten bzw. losgelassenen Taste.</entry></row><row><entry><codeph>KeyLocation</codeph></entry><entry>Die Position der Taste auf der Tastatur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz mit dem Fokus. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:KEY_UP"><apiName>KEY_UP</apiName><shortdesc>
	Die KeyboardEvent.KEY_UP-Konstante definiert den Wert der type-Eigenschaft eines keyDown-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>KeyboardEvent.KEY_UP</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>keyDown</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>charCode</codeph></entry><entry>Enthält den Zeichencodewert der gedrückten bzw. losgelassenen Taste.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac, wenn die Befehlstaste aktiviert ist. Andernfalls wird <codeph>false</codeph> zurückgegeben</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> unter Windows und Linux, wenn die Strg-Taste aktiviert ist. <codeph>true</codeph> unter Mac, wenn die Ctrl-Taste aktiviert ist. Andernfalls wird <codeph>false</codeph> zurückgegeben</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows, falls die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>Der Tastencodewert der gedrückten bzw. losgelassenen Taste.</entry></row><row><entry><codeph>KeyLocation</codeph></entry><entry>Die Position der Taste auf der Tastatur.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz mit dem Fokus. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
	Gibt unter Windows an, ob die Alt-Taste aktiviert ist (true) oder deaktiviert (false); gibt unter Mac OS an, ob die Wahltaste aktiviert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt unter Windows an, ob die Alt-Taste aktiviert ist (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>); gibt unter Mac OS an, ob die Wahltaste aktiviert ist.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:charCode:get"><apiName>charCode</apiName><shortdesc>
	Enthält den Zeichencodewert der gedrückten bzw. losgelassenen Taste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Enthält den Zeichencodewert der gedrückten bzw. losgelassenen Taste. Die Codewerte sind Werte für die englische Tastatur. Wenn Sie beispielsweise auf einer japanischen Tastatur Umschalt+3 drücken, gibt <codeph>charCode</codeph> wie auch bei einer englischen Tastatur das Zeichen # zurück.
	<p><b>Hinweis: </b>Wenn ein Eingabenmethoden-Editor (Input Method Editor/IME) ausgeführt wird, meldet <codeph>charCode</codeph> keine genauen Zeichencodes.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	Gibt an, ob die Befehlstaste aktiviert (true) oder deaktiviert (false) ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob die Befehlstaste aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Wird nur unter Mac OS unterstützt. Unter Mac OS hat die <codeph>commandKey</codeph>-Eigenschaft denselben Wert wie die <codeph>ctrlKey</codeph>-Eigenschaft.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	Gibt an, ob die Ctrl-Taste aktiviert (true) oder deaktiviert (false) ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob die Ctrl-Taste aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Unter Windows und Linux ist dieser Wert auch „true“, wenn die Strg-Taste aktiviert ist.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	Zeigt unter Windows und Linux an, ob die Strg-Taste aktiviert (true) oder deaktiviert (false) ist; zeigt unter Mac OS an, ob die Ctrl-Taste oder die Befehlstaste aktiviert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Zeigt unter Windows und Linux an, ob die Strg-Taste aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist; zeigt unter Mac OS an, ob die Ctrl-Taste oder die Befehlstaste aktiviert ist.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	Der Tastencodewert der gedrückten bzw. losgelassenen Taste.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Der Tastencodewert der gedrückten bzw. losgelassenen Taste.
	<p><b>Hinweis: </b>Wenn ein Eingabenmethoden-Editor (Input Method Editor/IME) ausgeführt wird, meldet <codeph>keyCode</codeph> keine genauen Zeichencodes.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:keyLocation:get"><apiName>keyLocation</apiName><shortdesc>
	Gibt die Position der Taste auf der Tastatur an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Gibt die Position der Taste auf der Tastatur an. Dies eignet sich beispielsweise zum Unterscheiden von Tasten, die mehrmals auf einer Tastatur vorhanden sind. Beispielsweise können Sie anhand des Wertes dieser Eigenschaft zwischen der linken und rechten Umschalttaste unterscheiden: <codeph>KeyLocation.LEFT</codeph> für die linke und <codeph>KeyLocation.RIGHT</codeph> für die rechte Umschalttaste. Ein weiteres Beispiel ist das Unterscheiden zwischen den Zahlentasten auf der Standardtastatur (<codeph>KeyLocation.STANDARD</codeph>) und den Zahlentasten im Ziffernblock (<codeph>KeyLocation.NUM_PAD</codeph>).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Gibt an, ob die Umschalttaste als Zusatztaste aktiviert (true) oder deaktiviert (false) ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob die Umschalttaste als Zusatztaste aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
 Ein NativeWindow-Objekt löst Ereignisse der NativeWindowCisplayStateEvent-Klasse aus, wenn sich der Fensteranzeigestatus ändert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für NativeWindow-Ereignisse, die den Anzeigestatus des Fensters ändern.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein NativeWindow-Objekt löst Ereignisse der NativeWindowCisplayStateEvent-Klasse aus, wenn sich der Fensteranzeigestatus ändert. Es gibt zwei Arten von Ereignissen:
 <ul>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGING"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</linktext></link><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGE"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE_displayStateChange"><apiName>displayStateChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING_displayStateChanging"><apiName>displayStateChanging</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowDisplayStateEvent:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
    Erstellt ein Ereignisobjekt mit spezifischen Informationen, die für Fensteranzeigestatusereignisse relevant sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Folgende Werte sind möglich:
    <ul>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt.
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann.
    </apiDesc></apiParam><apiParam><apiItemName>beforeDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Der <codeph>displayState</codeph> vor der Änderung.
    </apiDesc></apiParam><apiParam><apiItemName>afterDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Der <codeph>displayState</codeph> nach der Änderung. 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Erstellt ein Ereignisobjekt mit spezifischen Informationen, die für Fensteranzeigestatusereignisse relevant sind. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowDisplayStateEvent:clone"><apiName>clone</apiName><shortdesc>
    Erstellt eine Kopie des NativeWindowDisplayStateEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues NativeWindowDisplayStateEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Erstellt eine Kopie des NativeWindowDisplayStateEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowDisplayStateEvent:toString"><apiName>toString</apiName><shortdesc>
    Gibt einen String zurück, der alle Eigenschaften des NativeWindowDisplayStateEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des NativeWindowDisplayStateEvent-Objekts enthält.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Gibt einen String zurück, der alle Eigenschaften des NativeWindowDisplayStateEvent-Objekts enthält. Der String hat das folgende Format:
    <p><codeph>[NativeWindowDisplayStateEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> beforeDisplayState=<i>Wert</i> afterDisplayState=<i>Wert</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE"><apiName>DISPLAY_STATE_CHANGE</apiName><shortdesc>
    Definiert den Wert der type-Eigenschaft eines displayStateChange-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>displayStateChange</codeph>-Ereignisobjekts. Dieses Ereignis verfügt über die folgenden Eigenschaften:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Eigenschaften</entry><entry>Werte</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>Der alte Anzeigestatus des Fensters.</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>Der neue Anzeigestatus des Fensters.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die NativeWindow-Instanz, deren Status sich gerade geändert hat. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Nein.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Gibt das Objekt an, das das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING"><apiName>DISPLAY_STATE_CHANGING</apiName><shortdesc>
    Definiert den Wert der type-Eigenschaft eines displayStateChanging-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChanging</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>displayStateChanging</codeph>-Ereignisobjekts. Dieses Ereignis verfügt über die folgenden Eigenschaften:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Eigenschaften</entry><entry>Werte</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>Der Status des Fenster vor der ausstehenden Änderung.</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>Der Status des Fenster nach der ausstehenden Änderung.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die NativeWindow-Instanz, deren Status sich gerade geändert hat. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Nein.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Gibt das Objekt an, das das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; das Abbrechen des Ereignisses verhindert die Änderung.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:afterDisplayState:get"><apiName>afterDisplayState</apiName><shortdesc>
     Der Anzeigezustand des NativeWindow nach der Änderung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Der Anzeigezustand des NativeWindow nach der Änderung.  
     
     <p>Wenn es sich bei dem Ereignis um <codeph>displayStateChanging</codeph> handelt, wurde der Anzeigestatus noch nicht geändert. <codeph>afterDisplayState</codeph> zeigt den neuen Anzeigestatus an, wenn das Ereignis nicht abgebrochen wird. Wenn es sich bei dem Ereignis um <codeph>displayStateChanged</codeph> handelt, zeigt <codeph>afterDisplayState</codeph> den aktuellen Wert an.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:beforeDisplayState:get"><apiName>beforeDisplayState</apiName><shortdesc>
     Der Anzeigezustand des NativeWindow vor der Änderung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Der Anzeigezustand des NativeWindow vor der Änderung.  
     
     <p>Wenn es sich bei dem Ereignis um <codeph>displayStateChanging</codeph> handelt, wurde der Anzeigestatus noch nicht geändert; <codeph>beforeDisplayState</codeph> zeigt den aktuellen Anzeigestatus des Fensters an. Wenn es sich bei dem Ereignis um <codeph>displayStateChanged</codeph> handelt, zeigt <codeph>beforeDisplayState</codeph> den vorherigen Wert an.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
Das Stage-Objekt löst immer dann ein FullScreenEvent-Objekt aus, wenn die Bühne in den Vollbildmodus versetzt wird oder diesen verlässt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für FullScreenEvent-Ereignisse.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ActivityEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Das Stage-Objekt löst immer dann ein FullScreenEvent-Objekt aus, wenn die Bühne in den Vollbildmodus versetzt wird oder diesen verlässt. Es gibt nur einen Typ eines <codeph>fullScreen</codeph>-Ereignisses: <codeph>FullScreenEvent.FULL_SCREEN</codeph>.

</apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links><adobeApiEvent id="flash.events:FullScreenEvent:FULL_SCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FullScreenEvent:FULL_SCREEN</apiEventType><adobeApiEventClassifier>flash.events:FullScreenEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FullScreenEvent:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt, das Informationen über fullScreen-Ereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines <codeph>fullScreen</codeph>-Ereignisses: <codeph>FullScreenEvent.FULL_SCREEN</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen. 
	</apiDesc></apiParam><apiParam><apiItemName>fullScreen</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob das Gerät aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) wird. Ereignis-Listener können über die Eigenschaft <codeph>activating</codeph> auf diese Informationen zugreifen.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für FullScreenEvent-Objekte.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt, das Informationen über <codeph>fullScreen</codeph>-Ereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
    </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FullScreenEvent/FULL_SCREEN"><linktext>FullScreenEvent.FULL_SCREEN</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FullScreenEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des FullScreenEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues FullScreenEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des FullScreenEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FullScreenEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt einen String zurück, der alle Eigenschaften des FullScreenEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des FullScreenEvent-Objekts enthält.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt einen String zurück, der alle Eigenschaften des FullScreenEvent-Objekts enthält. Das folgende Format wird verwendet:
	<p><codeph>[FullScreenEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> activating=<i>Wert</i>]</codeph></p>
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FullScreenEvent:FULL_SCREEN"><apiName>FULL_SCREEN</apiName><shortdesc>
	Die Konstante „FullScreenEvent.FULL_SCREEN“ definiert den Wert der Eigenschaft „type“ eines fullScreen-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die Konstante <codeph>FullScreenEvent.FULL_SCREEN</codeph> definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>fullScreen</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>fullScreen</codeph></entry><entry><codeph>true</codeph> bei Vollbildanzeige und <codeph>false</codeph> bei normaler Anzeige.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Stage-Objekt.</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></apiValue><apiValue id="flash.events:FullScreenEvent:fullScreen:get"><apiName>fullScreen</apiName><shortdesc>
	Gibt an, ob das Stage-Objekt im Vollbildmodus angezeigt wird (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob das Stage-Objekt im Vollbildmodus angezeigt wird (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>).
	
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
 Ein Timer-Objekt löst ein TimerEvent-Objekt aus, wenn das Timer-Objekt das von der Timer.delay-Eigenschaft angegebene Intervall erreich.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für Timer-Ereignisse.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein Timer-Objekt löst ein TimerEvent-Objekt aus, wenn das Timer-Objekt das von der <codeph>Timer.delay</codeph>-Eigenschaft angegebene Intervall erreich.
 
 </apiDesc><example conref="examples\TimerEventExample.as"> Im folgenden Beispiel wird anhand der Klasse „TimerExample“ erläutert, wie die Listener-Methode <codeph>timerHandler()</codeph> instanziiert und für auszulösende neue „TimerEvent“-Ereignisse (bei Aufruf der Timer-Methode <codeph>start()</codeph>) konfiguriert werden kann.  
<codeblock>
package {
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.display.Sprite;

    public class TimerEventExample extends Sprite {

        public function TimerEventExample() {
            var myTimer:Timer = new Timer(1000, 2);
            myTimer.addEventListener(TimerEvent.TIMER, timerHandler);
            myTimer.start();
        }

        public function timerHandler(event:TimerEvent):void {
            trace("timerHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#Timer"><linktext>flash.utils.Timer</linktext></link></related-links><adobeApiEvent id="flash.events:TimerEvent:TIMER_timer"><apiName>timer</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TimerEvent:TIMER_COMPLETE_timerComplete"><apiName>timerComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TimerEvent:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt mit bestimmten Informationen, die für timer-Ereignisse wichtig sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt eine Bubbling-Phase durchführt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für TimerEvent-Objekte.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt mit bestimmten Informationen, die für <codeph>timer</codeph>-Ereignisse wichtig sind. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:TimerEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des TimerEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues TimerEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des TimerEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des TimerEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des TimerEvent-Objekts enthält.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des TimerEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph> [TimerEvent type= <i>value</i> bubbles= <i>value</i> cancelable= <i>value</i> ] </codeph></p>
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Weist Flash Player oder die AIR-Laufzeitumgebung nach Abschluss der Verarbeitung dieses Ereignisses zur Wiedergabe an, wenn die Anzeigeliste geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Weist <ph platform="actionscript">Flash Player oder </ph>die AIR-Laufzeitumgebung nach Abschluss der Verarbeitung dieses Ereignisses zur Wiedergabe an, wenn die Anzeigeliste geändert wurde.
 	
 	</apiDesc><example conref="examples\TimerEvent.updateAfterEventExample.as"> Nachstehend finden Sie ein Beispiel für die <codeph>TimerEvent.updateAfterEvent()</codeph>-Methode.   
<codeblock>
function onTimer(event:TimerEvent):void {
    if (40 &lt; my_mc.x &amp;&amp; my_mc.x &lt; 375) {
        my_mc.x-= 50;
    } else {
        my_mc.x=374;
    }
    event.updateAfterEvent();
}

var moveTimer:Timer=new Timer(50,250);
moveTimer.addEventListener(TimerEvent.TIMER,onTimer);
moveTimer.start();
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.events:TimerEvent:TIMER"><apiName>TIMER</apiName><shortdesc>
    Definiert den Wert der Eigenschaft „type“ eines timer-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timer</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>timer</codeph>-Ereignisobjekts.
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Timer-Objekt, das sein Intervall erreicht hat.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></apiValue><apiValue id="flash.events:TimerEvent:TIMER_COMPLETE"><apiName>TIMER_COMPLETE</apiName><shortdesc>
    Definiert den Wert der Eigenschaft „type“ eines timerComplete-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timerComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>timerComplete</codeph>-Ereignisobjekts.
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Timer-Objekt, das seine Anforderungen abgearbeitet hat.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
Ein IOErrorEvent-Objekt wird ausgelöst, wenn ein Sende- oder Ladevorgang aufgrund eines Fehlers fehlschlägt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für IOErrorEvent-Ereignisse.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Ein IOErrorEvent-Objekt wird ausgelöst, wenn ein Sende- oder Ladevorgang aufgrund eines Fehlers fehlschlägt.

<p>Sie können prüfen, ob error-Ereignisse ohne Listener vorliegen, indem Sie die Debugger-Version von Flash Player oder AIR Debug Launcher (ADL) verwenden. Es wird der String angezeigt, der vom <codeph>text</codeph>-Parameter des IOErrorEvent-Konstruktors definiert wird. Es gibt nur einen Typ eines Eingabe/Ausgabe-Fehlerereignisses: <codeph>IOErrorEvent.IO_ERROR</codeph>. </p>

</apiDesc><example conref="examples\IOErrorEventExample.as"> Im folgenden Beispiel wird anhand der Klasse <codeph>IOErrorEventExample</codeph> gezeigt, wie ein Fehlerereignisobjekt ausgelöst wird, wenn versucht wird, eine nicht vorhandene Datei zu laden. In diesem Beispiel werden die folgenden Aufgaben ausgeführt:
 <ol>
    <li>Der Klassenkonstruktor erstellt eine neue Instanz eines URLLoader-Objekts und weist ihr die Variable <codeph>loader</codeph> zu.</li>
    <li>Mit der URLLoader-Instanz wird ein Ereignis-Listener vom Typ <codeph>ioError</codeph> instanziiert, die mit der Abonnentenmethode <codeph>ioErrorHandler()</codeph> verknüpft ist. Die Methode dient zum Drucken von Informationen über das Ereignis mithilfe der Methode <codeph>trace()</codeph>.</li>
    <li>Der Konstruktor erstellt eine neue Instanz eines URLRequest-Objekts (<codeph>request</codeph>) und übergibt dabei <codeph>MissingFile.xml</codeph>, damit der Dateiname und -speicherort bekannt sind.</li>
    <li>Die Variable <codeph>request</codeph> wird anschließend an <codeph>loader.load()</codeph> übergeben. Diese Methode versucht, die fehlende Datei zu laden. Da die Datei fehlt, sendet die Ereignisprozedur ein <codeph>ioError</codeph>-Ereignis.</li>
 </ol>
 
 <p> <b>Hinweise:</b>
 <ul>
     <li>Für die Kompilierung der SWF-Datei müssen Sie die Option „Sicherheit bei lokaler Wiedergabe“ auf „Nur auf lokale Dateien zugreifen“ einstellen.</li>
     <li>Auf der Ebene der SWF-Datei darf sich keine Datei mit dem Namen „MissingFile.xml“ befinden. </li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.IOErrorEvent;
    import flash.net.URLLoader;
    import flash.net.URLRequest;

    public class IOErrorEventExample extends Sprite {
        public function IOErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);

            var request:URLRequest = new URLRequest("MissingFile.xml");
            loader.load(request);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:IOErrorEvent:IO_ERROR_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IOErrorEvent:IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IOErrorEvent:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt, das bestimmte Informationen über ioError-Ereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines Eingabe/Ausgabe-Fehlerereignisses: <codeph>IOErrorEvent.IO_ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Der als Fehlermeldung anzuzeigende Text. Ereignis-Listener können über die Eigenschaft <codeph>text</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Eine mit dem spezifischen Fehler verknüpfte Referenznummer (wird nur in Adobe AIR unterstützt). 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für IOErrorEvent-Objekte.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt, das bestimmte Informationen über <codeph>ioError</codeph>-Ereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IOErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des IOErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues IOErrorEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des IOErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IOErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des IOErrorEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des IOErrorEvent-Objekts enthält.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des IOErrorEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[IOErrorEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> text=<i>Wert</i> errorID=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IOErrorEvent:IO_ERROR"><apiName>IO_ERROR</apiName><shortdesc>
	Definiert den Wert der Eigenschaft „type“ eines ioError-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ioError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>ioError</codeph>-Ereignisobjekts.
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>errorID</codeph></entry><entry>Die Referenznummer des spezifischen Fehlers (nur AIR).</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Netzwerkobjekt, bei dem der Eingabe/Ausgabe-Fehler auftritt.</entry></row><row><entry><codeph>text</codeph></entry><entry>Der als Fehlermeldung anzuzeigende Text.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
Ein NetConnection-, NetStream- oder SharedObject-Objekt löst NetStatusEvent-Objekte aus, wenn es seinen Status meldet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für NetStatusEvent-Ereignisse.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
Ein NetConnection-, NetStream- oder SharedObject-Objekt löst NetStatusEvent-Objekte aus, wenn es seinen Status meldet. Es gibt nur einen Typ eines status-Ereignisses: <codeph>NetStatusEvent.NET_STATUS</codeph>.

</apiDesc><example conref="examples\NetStatusEventExample.as"> Im folgenden Beispiel wird ein Video-Objekt mit den Klassen NetConnection und NetStream verwendet, um eine FLV-Datei zu laden und abzuspielen.
 <p>Bei diesem Beispiel wird die <codeph>netStatusHandler</codeph>-Methode als Listener für das NetStatusEvent-Ereignis <codeph>NetConnection.netStatus</codeph> registriert. Sobald der Status (Erfolg/Fehler) des <codeph>NetConnection.connect()</codeph>-Versuchs feststeht, wird diese Methode vom <codeph>netStatus</codeph>-Ereignis ausgelöst. Wenn der Versuch, eine Verbindung zum NetConnection-Objekt herzustellen, erfolgreich ist (wenn also die Eigenschaft <codeph>info</codeph> des vom <codeph>netStatus</codeph>-Ereignis ausgelösten NetStatusEvent-Objekts die <codeph>code</codeph>-Eigenschaft für Erfolg aufweist), werden die Video- und NetStream-Objekte erstellt und die Methoden <codeph>Video.attachNetStream()</codeph> und <codeph>NetStream.play()</codeph> aufgerufen.</p>
 
 <p><b>Hinweis:</b> Zur Ausführung dieses Beispiels benötigen Sie eine FLV-Datei, deren Name und Speicherort mit der an <codeph>videoURL</codeph> übergebenen Variablen übereinstimmt. In diesem Fall ist das eine FLV-Datei mit dem Namen „Video.flv“, die in dem Ordner abgelegt ist, in dem sich die SWF-Datei befindet.</p>
<codeblock>

 package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class NetStatusEventExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function NetStatusEventExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
        
        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

    }
 }
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.net.xml#SharedObject"><linktext>flash.net.SharedObject</linktext></link><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>NetStatusEvent.NET_STATUS</linktext></link></related-links><adobeApiEvent id="flash.events:NetStatusEvent:NET_STATUS_netStatus"><apiName>netStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NetStatusEvent:NET_STATUS</apiEventType><adobeApiEventClassifier>flash.events:NetStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NetStatusEvent:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt, das Informationen über netStatus-Ereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines status-Ereignisses: <codeph>NetStatusEvent.NET_STATUS</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>Ein Objekt mit Eigenschaften, die den Status des Objekts beschreiben. Ereignis-Listener können über die Eigenschaft <codeph>info</codeph> auf dieses Objekt zugreifen.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für NetStatusEvent-Objekte.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt, das Informationen über <codeph>netStatus</codeph>-Ereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>flash.events.NetStatusEvent.NET_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:NetStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des NetStatusEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues NetStatusEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des NetStatusEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NetStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des NetStatusEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des NetStatusEvent-Objekts enthält.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des NetStatusEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[NetStatusEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> info=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NetStatusEvent:NET_STATUS"><apiName>NET_STATUS</apiName><shortdesc>
    Definiert den Wert der Eigenschaft type eines netStatus-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>netStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>netStatus</codeph>-Ereignisobjekts.
  	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>info</codeph></entry><entry>Ein Objekt mit Eigenschaften, die den Status oder die Fehlerbedingung des Objekts beschreiben.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NetConnection- oder NetStream-Objekt, dessen Status protokolliert wird. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:NetStatusEvent:info:get"><apiName>info</apiName><shortdesc>
	 Ein Objekt mit Eigenschaften, die den Status oder die Fehlerbedingung des Objekts beschreiben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Ein Objekt mit Eigenschaften, die den Status oder die Fehlerbedingung des Objekts beschreiben.
	 
	 <p>Das Informationsobjekt kann eine <codeph>code</codeph>-Eigenschaft besitzen, in der eine Zeichenfolge enthalten ist, die ein bestimmtes Ereignis oder eine <codeph>level</codeph>-Eigenschaft darstellt, die wiederum eine <codeph>"status"</codeph> oder <codeph>"error"</codeph> lautende Zeichenfolge enthält. </p>
	 
	 <p>Das Informationsobjekt kann auch etwas anderes sein. Die Eigenschaften <codeph>code</codeph> und <codeph>level</codeph> funktionieren bei einigen Implementierungen möglicherweise nicht korrekt, und einige Server senden andere Objekte.  </p>
	 
	 <p>P2P-Verbindungen senden Meldungen an eine <codeph>NetConnection</codeph> mit einem <codeph>stream</codeph>-Parameter im Informationsobjekt, der angibt, zu welchem <codeph>NetStream</codeph> die Meldung gehört. <ph product="flex">Beispielsweise senden die Flex Data Services sogenannte Message-Objekte, die zu Fehlermeldungen führen, wenn Sie versuchen, auf eine der Eigenschaften <codeph>code</codeph> oder <codeph>level</codeph> zuzugreifen.</ph></p> 
	 
	 <p>In der folgenden Tabelle sind die möglichen Stringwerte der Eigenschaften <codeph>code</codeph> und <codeph>level</codeph> aufgeführt.</p>
 <adobetable class="innertable">
  
 
 

  
   
  
  
    
  
  
  
  
  
  
  
  
  
   
   
   
  
  
  
  
  
  
  
  
  
  
  
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
<tgroup cols="3"><thead><row><entry>Code-Eigenschaft</entry><entry>Level-Eigenschaft</entry><entry>Bedeutung</entry></row></thead><tbody><row>
     <entry><codeph>"NetStream.Buffer.Empty"</codeph></entry>
     <entry><codeph>"status"</codeph></entry>
     <entry>Daten werden nicht schnell genug empfangen, um den Zwischenspeicher zu füllen. Der Datenfluss wird unterbrochen, bis der Zwischenspeicher wieder gefüllt ist. Dann wird die <codeph>NetStream.Buffer.Full</codeph>-Meldung gesendet und die Wiedergabe des Streams fortgesetzt.</entry>
 </row><row>
     <entry><codeph>"NetStream.Buffer.Full"</codeph></entry>
     <entry><codeph>"status"</codeph></entry>
     <entry>Der Puffer ist voll, und der Stream wird wiedergegeben.</entry>
</row><row>
    <entry><codeph>"NetStream.Buffer.Flush"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Der Datenstream ist abgeschlossen, der Puffer wird geleert.</entry>
  </row><row>
    <entry><codeph>"NetStream.Failed"</codeph> </entry>
    <entry>„Fehler“</entry>
    <entry>Nur Flash Media Server. Aus einem anderen als in den anderen Ereigniscodes aufgeführten Gründen ist ein Fehler aufgetreten.
    </entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Das Veröffentlichen war erfolgreich.</entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.BadName"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Versuch, einen Stream zu veröffentlichen, der bereits von einer anderen Person veröffentlicht wurde.</entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.Idle"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Der Herausgeber des Streams ist inaktiv und überträgt keine Daten.</entry>
  </row><row>
    <entry><codeph>"NetStream.Unpublish.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Der Unveröffentlichungs-Vorgang war erfolgreich.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Die Wiedergabe hat begonnen.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Stop"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Die Wiedergabe wurde angehalten.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Es ist ein Fehler bei der Wiedergabe aufgetreten. Die Ursache für diesen Fehler wird nicht in dieser Tabelle aufgeführt. Eventuell hat der Abonnent keinen Lesezugriff.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.StreamNotFound"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Die an die Methode <codeph>play()</codeph> übergebene FLV-Datei wurde nicht gefunden.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Reset"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Verursacht durch das Zurücksetzen der Wiedergabeliste.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.PublishNotify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Die erste Veröffentlichung an einen Stream wird an alle Abonnenten gesendet.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.UnpublishNotify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Eine Anweisung zur Rücknahme der Veröffentlichung aus einem Stream wird an alle Abonnenten gesendet.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.InsufficientBW"</codeph> </entry>
    <entry>„Warnung“</entry>
    <entry>Nur Flash Media Server. Der Client verfügt nicht über ausreichend Bandbreite, um die Daten mit normaler Geschwindigkeit abzuspielen. </entry>
  </row><row>
    <entry><codeph>"NetStream.Play.FileStructureInvalid"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Die Anwendung erkennt eine ungültige Dateistruktur und versucht nicht, diesen Dateityp abzuspielen. Für AIR und Flash Player 9.0.115.0 und höher.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.NoSupportedTrackFound"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Die Anwendung erkennt keine unterstützten Titel (Video, Audio oder Daten) und versucht nicht, die Datei abzuspielen. Für AIR und Flash Player 9.0.115.0 und höher.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Transition"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Nur Flash Media Server. Als Folge des Bitrate-Streamwechsels wechselt der Stream auf einen anderen Stream. Dieser Code zeigt ein Erfolgsstatusereignis für den <codeph>NetStream.play2()</codeph>-Aufruf zum Initiieren eines Streamwechsels an. Ist der Wechsel nicht erfolgreich, so sendet der Server stattdessen ein <codeph>NetStream.Play.Failed</codeph>-Ereignis. Für Flash Player 10 und neuere Versionen.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Transition"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Nur bei Flash Media Server 3.5 und höher. Der Server hat den Befehl zum Wechseln auf einen anderen Stream infolge eines Bitrate-Streamwechsels erhalten. Dieser Code zeigt ein Erfolgsstatusereignis für den <codeph>NetStream.play2()</codeph>-Aufruf zum Initiieren eines Streamwechsels an. Ist der Wechsel nicht erfolgreich, so sendet der Server stattdessen ein <codeph>NetStream.Play.Failed</codeph>-Ereignis. Beim Streamwechsel wird ein <codeph>onPlayStatus</codeph>-Ereignis mit dem Code „NetStream.Play.TransitionComplete“ ausgelöst. Für Flash Player 10 und neuere Versionen.</entry>
  </row><row>
    <entry><codeph>"NetStream.Pause.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Der Stream wurde unterbrochen.</entry>
  </row><row>
    <entry><codeph>"NetStream.Unpause.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Der Stream wird fortgesetzt.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Die Aufzeichnung hat begonnen.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.NoAccess"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Versuch, einen Stream aufzuzeichnen, der noch wiedergegeben wird, oder der Client besitzt keine Zugriffsrechte.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Stop"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Aufzeichnung angehalten.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Ein Versuch, einen Stream aufzuzeichnen, ist fehlgeschlagen.</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Die Suche schlug fehlt. Dies kann auftreten, wenn der Stream nicht gesucht werden kann.</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.InvalidTime"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Bei einem progressiv heruntergeladenen Video hat der Benutzer eine Position gesucht, die hinter dem Ende der bisher heruntergeladenen Videodaten bzw. hinter dem Ende der fertig heruntergeladenen Videodatei liegt. Die Eigenschaft <codeph>message.details</codeph> enthält einen Zeitcode, der die letzte gültige Suchposition angibt.</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Der Suchvorgang ist abgeschlossen.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.BadVersion"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Paket wurde in einem nicht erkannten Format kodiert.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Die <codeph>NetConnection.call</codeph>-Methode konnte die serverseitige Methode bzw. den serverseitigen Befehl nicht aufrufen.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.Prohibited"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Ein Action Message Format (AMF)-Vorgang wurde aus Sicherheitsgründen verhindert. Entweder befindet sich die AMF URL nicht in derselben Domäne wie die Datei mit dem Code, der die <codeph>NetConnection.call()</codeph>-Methode aufruft, oder der AMF-Server hat keine Richtliniendatei, die die Domäne der Datei mit dem Code, der die <codeph>NetConnection.call()</codeph>-Methode aufruft, als vertrauenswürdig einstuft. 
	</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Closed"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Die Verbindung wurde erfolgreich geschlossen.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Der Versuch zur Herstellung einer Verbindung ist fehlgeschlagen.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Der Versuch zur Herstellung einer Verbindung war erfolgreich.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Rejected"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Der Verbindungsversuch verfügt nicht über eine Berechtigung für den Zugriff auf die Anwendung.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Closed"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Die P2P-Verbindung wurde erfolgreich beendet. Die <codeph>info.stream</codeph>-Eigenschaft gibt an, welcher Stream beendet wurde.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Der P2P-Verbindungsversuch ist fehlgeschlagen. Die <codeph>info.stream</codeph>-Eigenschaft gibt an, welcher Stream fehlgeschlagen ist.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Der P2P-Verbindungsversuch war erfolgreich. Die <codeph>info.stream</codeph>-Eigenschaft gibt an, welcher Stream erfolgreich war.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Rejected"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Der P2P-Verbindungsversuch verfügt nicht über die Berechtigung für den Zugriff auf den anderen Peer. Die <codeph>info.stream</codeph>-Eigenschaft gibt an, welcher Stream abgelehnt wurde.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.AppShutdown"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Die angegebene Anwendung wird heruntergefahren.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.InvalidApp"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Der beim Herstellen der Verbindung angegebene Anwendungsname ist ungültig.</entry>
  </row><row>
    <entry><codeph>"SharedObject.Flush.Success"</codeph></entry>
  	<entry><codeph>"status"</codeph></entry>
  	<entry>Der Status „pending“ ist aufgelöst, und der Aufruf <codeph>SharedObject.flush()</codeph> wurde erfolgreich durchgeführt.</entry>
  </row><row> 
    <entry><codeph>"SharedObject.Flush.Failed"</codeph></entry>
 	<entry><codeph>"error"</codeph></entry>
  	<entry>Der Status „pending“ ist aufgelöst, aber der Aufruf <codeph>SharedObject.flush()</codeph> ist fehlgeschlagen.</entry>
  </row><row>
    <entry><codeph>"SharedObject.BadPersistence"</codeph></entry>
  	<entry><codeph>"error"</codeph></entry>
  	<entry>Es wurde eine Anfrage zur Erstellung eines freigegebenen Objekts mit Persistenzflags gestellt. Diese Anforderung kann jedoch nicht gewährt werden, da das Objekt bereits mit anderen Flags erstellt wurde.</entry> 
  </row><row>
    <entry><codeph>"SharedObject.UriMismatch"</codeph></entry>
  	<entry><codeph>"error"</codeph></entry>
  	<entry>Es wurde versucht, eine Verbindung mit einem NetConnection-Objekt herzustellen, das einen anderen URI (URL) als das freigegebene Objekt aufweist.</entry> 
</row></tbody></tgroup></adobetable>
	<p>Falls wiederholt Pufferfehler angezeigt werden, sollten Sie versuchen, den Puffer mit der Eigenschaft <codeph>NetStream.bufferTime</codeph> zu ändern.</p>

	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection-Klasse</linktext></link><link href="flash.net.xml#NetStream"><linktext>NetStream-Klasse</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
 Ein MouseEvent-Objekt wird in den Ereignisablauf gesendet, wenn Mausereignisse auftreten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für Mouse-Ereignisse.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein MouseEvent-Objekt wird in den Ereignisablauf gesendet, wenn Mausereignisse auftreten. Ein Mausereignis wird im Allgemeinen durch ein Benutzereingabegerät wie z. B. eine Maus oder ein Trackball erzeugt, das einen Zeiger verwendet. 
 
 <p>Wenn verschachtelte Knoten involviert sind, zielen Mausereignisse auf den tiefstmöglich verschachtelten Knoten, der in der Anzeigeliste sichtbar ist. Dieser Knoten wird als <i>Zielknoten</i> bezeichnet. Damit ein übergeordnetes Element eines Zielknotens eine Benachrichtigung bei einem Mausereignis empfängt, verwenden Sie <codeph>EventDispatcher.addEventListener()</codeph> an dem übergeordneten Knoten. Dabei muss der Parameter <codeph>type</codeph> auf das Mausereignis gesetzt werden, das Sie erfassen möchten.</p>
 
 </apiDesc><example conref="examples\MouseEventExample.as"> Im folgenden Beispiel wird anhand der Klassen <codeph>MouseEventExample</codeph> und <codeph>ChildSprite</codeph> erläutert, wie Mausereignisse bei einem einfachen Bild ausgelöst werden. In diesem Beispiel werden die folgenden Aufgaben ausgeführt:
 <ol>
    <li>Im Beispiel werden Eigenschaften für die Größe (100 x 100 Pixel) und die Hintergrundfarbe (Orange) zur späteren Verwendung beim Zeichnen des Quadrats deklariert.</li>
     <li>Der Konstruktor erstellt das neue ChildSprite-Objekt <codeph>child</codeph>. Der Konstruktor zeichnet zuerst ein orangefarbenes Quadrat mit einer Größe von 100 x 100 Pixeln an den Koordinaten (0,0), indem er die Methode <codeph>draw()</codeph> aufruft und anschließend sieben Ereignis-Listener bzw. -Abonnenten hinzufügt.
     <ul>
         <li><codeph>click</codeph>/<codeph>clickHandler()</codeph>: Wird ausgelöst, wenn der Benutzer einmal mit der linken Maustaste auf das Quadrat klickt.</li>
         <li><codeph>doubleClick</codeph>/<codeph>doubleClickHandler()</codeph>: Wird ausgelöst, wenn der Benutzer mit der linken Maustaste auf das Quadrat doppelklickt.</li>
         <li><codeph>mouseDown</codeph>/<codeph>mouseDownHandler()</codeph>: Wenn auf das ChildSprite-Objekt (das orangefarbene Quadrat) geklickt wird, wird eine <codeph>trace()</codeph>-Meldung angezeigt. <codeph>ChildSprite.draw()</codeph> wird aufgerufen, wodurch ein dunkelgelbes Quadrat anstelle des hellblauen aus <codeph>mouseOverHandler()</codeph> gezeichnet wird. Mit der Methode <codeph>mouseDownHandler()</codeph> werden auch ein <codeph>mouseMove</codeph>-Ereignis-Listener und ein <codeph>mouseMoveHandler()</codeph>-Abonnent (siehe Beschreibung unten) für die Verarbeitung der Mausbewegungen hinzugefügt. Als Nächstes wird die <codeph>startDrag()</codeph>-Methode aufgerufen, die das Ziehen des Sprite-Objekts ermöglicht.</li>
         <li><codeph>mouseOut</codeph>/<codeph>mouseOutHandler()</codeph>: Wird ausgelöst, wenn der Mauszeiger vom Quadrat wegbewegt wird. Die <codeph>draw()</codeph>-Methode wird aufgerufen, um die normale Größe und Farbe des Quadrats wiederherzustellen.</li>
         <li><codeph>mouseOver</codeph>/<codeph>mouseOverHandler()</codeph>: Wird ausgelöst, wenn sich der Mauszeiger über dem Quadrat befindet. Mit dieser Methode wird das Quadrat größer und mit dunkelgelber Hintergrundfarbe neu gezeichnet.</li>
         <li><codeph>mouseUp</codeph>/<codeph>mouseUpHandler()</codeph>: Wenn die Maustaste losgelassen wird, wird der <codeph>mouseMove</codeph>-Ereignis-Listener entfernt, und <codeph>stopDrag</codeph> wird aufgerufen. Hiermit wird das Quadrat an seiner Position fixiert.</li> 
      <li><codeph>mouseMove</codeph>/<codeph>mouseMoveHandler()</codeph>: Wird als Teil der <codeph>mouseDownHandler()</codeph>-Funktion aufgerufen und ausgelöst, wenn der Benutzer die linke Maustaste gedrückt hält und das Quadrat zieht.</li>
         <li><codeph>mouseWheel</codeph>/<codeph>mouseWheelHandler()</codeph>: Wird ausgelöst, wenn der Benutzer das Mausrad dreht, während sich der Mauszeiger auf dem Quadrat befindet.</li>
 </ul></li>
    <li>Die ChildSprite-Instanz <codeph>child</codeph> wird der Anzeigeliste mithilfe der Methode <codeph>addChild()</codeph>, die ein sofortiges Zeichnen des orangefarbenen Quadrats bewirkt, hinzugefügt.</li>
 </ol> 
 
 <p><b>Hinweise:</b></p>
 <ul>
     <li>Die <codeph>MouseEventExample</codeph>-Klasse muss der Dokumentenstamm sein.</li>
    <li>Bei einigen der oben aufgeführten Ereignis-Listener-Methoden wird eine lokale <codeph>sprite</codeph>-Variable deklariert, der die Umwandlung von <codeph>event.target</codeph> in den Typ „Sprite“ zugewiesen wird.</li>
 </ul>
<codeblock>
package {
    import flash.display.Sprite;

    public class MouseEventExample extends Sprite {
        private var size:uint = 100;
        private var bgColor:uint = 0xFFCC00;

        public function MouseEventExample() {
            var child:ChildSprite = new ChildSprite();
            addChild(child);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite {
    private var size:uint = 50;
    private var overSize:uint = 60;
    private var backgroundColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function ChildSprite() {
        draw(size, size, backgroundColor);
            doubleClickEnabled = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
        addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
    }

    private function draw(w:uint, h:uint, bgColor:uint):void {
        graphics.clear();
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        trace("clickHandler");
    }

    private function doubleClickHandler(event:MouseEvent):void {
        trace("doubleClickHandler");
    }

    private function mouseDownHandler(event:MouseEvent):void {
        trace("mouseDownHandler");
        draw(overSize, overSize, downColor);

        var sprite:Sprite = Sprite(event.target);
        sprite.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.startDrag();
    }

    private function mouseMoveHandler(event:MouseEvent):void {
        trace("mouseMoveHandler");
        event.updateAfterEvent();
    }

    private function mouseOutHandler(event:MouseEvent):void {
        trace("mouseOutHandler");
        draw(size, size, backgroundColor);
    }

    private function mouseOverHandler(event:MouseEvent):void {
        trace("mouseOverHandler");
        draw(overSize, overSize, overColor);
    }

    private function mouseWheelHandler(event:MouseEvent):void {
        trace("mouseWheelHandler delta: " + event.delta);
    }

    private function mouseUpHandler(event:MouseEvent):void {
        trace("mouseUpHandler");
        var sprite:Sprite = Sprite(event.target);
        sprite.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.stopDrag();
        draw(overSize, overSize, overColor);
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:MouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:CONTEXT_MENU_contextMenu"><apiName>contextMenu</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CONTEXT_MENU</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:DOUBLE_CLICK_doubleClick"><apiName>doubleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_CLICK_middleClick"><apiName>middleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN_middleMouseDown"><apiName>middleMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_UP_middleMouseUp"><apiName>middleMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_MOVE_mouseMove"><apiName>mouseMove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_MOVE</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> Das folgende Beispiel ist ein einfaches Zeichenprogramm. Der Benutzer kann auf dem Haupt-Sprite-Objekt zeichnen oder auf einen kleineren rechteckigen Sprite-Objekt. 
   
 <p>Im Konstruktor wird ein rechteckiges <codeph>innerRect</codeph>-Sprite-Objekt erstellt und der Linienstil wird auf grün eingestellt. Der Linienstil für das Zeichnen im <codeph>MouseEvent_MOUSE_MOVEExample</codeph>-Sprite-Container wird auf rot eingestellt. Separate Ereignis-Listeners für die <codeph>MouseEvent.MOUSE_UP</codeph>- und <codeph>MouseEvent.MOUSE_DOWN</codeph>-Ereignisse werden für das Haupt-Sprite-Objekt der Anwendung und das <codeph>innerRect</codeph>-Sprite-Objekt hinzugefügt. In beiden Fällen verschieben die Listener-Methoden für Mouse-Down-Ereignisse die aktuelle Zeichenposition zur Position des Mauszeigers und fügen einen Listener für das<codeph>MouseEvent.MOUSE_MOVE</codeph>-Ereignis hinzu. Wenn der Mauszeiger verschoben wird, folgen die aufgerufenen Listener-Methoden dem Zeiger und zeichnen mit der <codeph>graphics.LineTo()</codeph>-Methode eine Linie. (<b>Hinweis:</b> Das <codeph>innerRect</codeph>-Sprite-Objekt verdeckt die roten Linien des Haupt-Sprite-Objekts, die hinter dem Rechteck gezeichnet sind.) Wenn das <codeph>MouseEvent.MOUSE_UP</codeph>-Ereignis auftritt, wird der Listener für das <codeph>MOUSE_MOVE</codeph>-Ereignis entfernet und das Zeichnen wird beendet.</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OUT_mouseOut"><apiName>mouseOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OVER_mouseOver"><apiName>mouseOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_WHEEL_mouseWheel"><apiName>mouseWheel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_WHEEL</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN_RightMouseDown"><apiName>RightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OUT_rollOut"><apiName>rollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OVER_rollOver"><apiName>rollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:MouseEvent:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
     Erstellt ein Ereignisobjekt, das Informationen über Mausereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Folgende Werte sind möglich: <codeph>MouseEvent.CLICK</codeph>, <codeph>MouseEvent.DOUBLE_CLICK</codeph>, <codeph>MouseEvent.MOUSE_DOWN</codeph>, <codeph>MouseEvent.MOUSE_MOVE</codeph>, <codeph>MouseEvent.MOUSE_OUT</codeph>, <codeph>MouseEvent.MOUSE_OVER</codeph>, <codeph>MouseEvent.MOUSE_UP</codeph>, <codeph>MouseEvent.MIDDLE_CLICK</codeph>, <codeph>MouseEvent.MIDDLE_MOUSE_DOWN</codeph>, <codeph>MouseEvent.MIDDLE_MOUSE_UP</codeph>, <codeph>MouseEvent.RIGHT_CLICK</codeph>, <codeph>MouseEvent.RIGHT_MOUSE_DOWN</codeph>, <codeph>MouseEvent.RIGHT_MOUSE_UP</codeph>, <codeph>MouseEvent.MOUSE_WHEEL</codeph>, <codeph>MouseEvent.ROLL_OUT</codeph> und <codeph>MouseEvent.ROLL_OVER</codeph>. 
	 
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann.
	 </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.
	 </apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.
	 </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Die andere InteractiveObject-Instanz, die von dem Ereignis betroffen ist. Wenn beispielsweise ein <codeph>mouseOut</codeph>-Ereignis auftritt, stellt <codeph>relatedObject</codeph> das Anzeigelistenobjekt dar, auf das das Zeigegerät jetzt zeigt.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Unter Windows oder Linux wird damit angezeigt, ob die Strg-Taste aktiviert ist. Unter Mac OS wird damit angezeigt, ob die Ctrl-Taste oder die Befehlstaste aktiviert ist.
     </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Alt-Taste aktiviert ist (nur Windows oder Linux).
	 </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob der Umschalttasten-Modifizierer aktiviert ist.
	 </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die primäre Maustaste gedrückt wird.
	 </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Gibt an, wie viele Zeilen pro Raststellung des Mausrads durchlaufen werden sollen. Ein positiver Deltawert bedeutet einen Bildlauf nach oben. Ein negativer Wert steht für einen Bildlauf nach unten. Typische Werte sind 1 bis 3, wobei ein schnellerer Bildlauf größere Werte zur Folge haben kann. Dieser Parameter wird nur für das Ereignis <codeph>MouseEvent.mouseWheel</codeph> verwendet.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>(nur AIR); gibt an, ob die Befehlstaste aktiviert ist (nur Mac). Dieser Parameter wird nur für die folgenden Ereignisse verwendet <codeph>MouseEvent.click</codeph>, <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleClick</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightClick</codeph>, <codeph>MouseEvent.rightMouseDown</codeph>, <codeph>MouseEvent.rightMouseUp</codeph> und <codeph>MouseEvent.doubleClick</codeph>. Dieser Parameter gilt nur für Adobe AIR. Setzen Sie ihn nicht für Flash Player-Inhalte.
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>(nur AIR); gibt an, ob die Ctrl- oder Strg-Taste aktiviert ist. Dieser Parameter wird nur für die folgenden Ereignisse verwendet <codeph>MouseEvent.click</codeph>, <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleClick</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightClick</codeph>, <codeph>MouseEvent.rightMouseDown</codeph>, <codeph>MouseEvent.rightMouseUp</codeph> und <codeph>MouseEvent.doubleClick</codeph>. Dieser Parameter gilt nur für Adobe AIR. Setzen Sie ihn nicht für Flash Player-Inhalte.
	</apiDesc></apiParam><apiParam><apiItemName>clickCount</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>(nur AIR); gibt an, ob das Mausereignis Teil einer Sequenz mit mehreren Klicks ist oder nicht. Dieser Parameter hat den Wert null für alle Mausereignisse außer <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightMouseDown</codeph> und <codeph>MouseEvent.rightMouseUp</codeph>. Das Warten auf einfache Klicks, Doppelklicks und Sequenzen mit mehreren Klicks ist mit dem <codeph>clickCount</codeph>-Parameter möglich. Dieser Parameter gilt nur für Adobe AIR. Setzen Sie ihn nicht für Flash Player-Inhalte.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für MouseEvent-Objekte.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Erstellt ein Ereignisobjekt, das Informationen über Mausereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
     
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:MouseEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des MouseEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues MouseEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des MouseEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des MouseEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des MouseEvent-Objekts enthält.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des MouseEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph> [MouseEvent type= <i>value</i> bubbles= <i>value</i> cancelable= <i>value</i> ... delta= <i>value</i> ] </codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Weist Flash Player oder Adobe AIR nach Abschluss der Verarbeitung dieses Ereignisses zur Wiedergabe an, wenn die Anzeigeliste geändert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Weist Flash Player oder Adobe AIR nach Abschluss der Verarbeitung dieses Ereignisses zur Wiedergabe an, wenn die Anzeigeliste geändert wurde.
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:MouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines Klickereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>click</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:CONTEXT_MENU"><apiName>CONTEXT_MENU</apiName><shortdesc>
	Die MouseEvent.CONTEXT_MENU-Konstante definiert den Wert der type-Eigenschaft eines contextMenu-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>contextMenu</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>MouseEvent.CONTEXT_MENU</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>contextMenu</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die rechte Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Anzahl der Mausklicks, um anzuzeigen, ob das Ereignis Teil einer Sequenz mit mehreren Klicks ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:DOUBLE_CLICK"><apiName>DOUBLE_CLICK</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines doubleClick-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>doubleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>doubleClick</codeph>-Ereignisobjekts. Die <codeph>doubleClickEnabled</codeph>-Eigenschaft muss <codeph>true</codeph> sein, damit ein Objekt das <codeph>doubleClick</codeph>-Ereignis auslösen kann.
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_CLICK"><apiName>MIDDLE_CLICK</apiName><shortdesc>
	Definiert den Wert der type-Eigenschaft eines middleClick-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>middleClick</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN"><apiName>MIDDLE_MOUSE_DOWN</apiName><shortdesc>
	Definiert den Wert der type-Eigenschaft eines middleMouseDown-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>middleMouseDown</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die mittlere Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Anzahl der Mausklicks, um anzuzeigen, ob das Ereignis Teil einer Sequenz mit mehreren Klicks ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_UP"><apiName>MIDDLE_MOUSE_UP</apiName><shortdesc>
	Definiert den Wert der type-Eigenschaft eines middleMouseUp-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>middleMouseUp</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die mittlere Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Anzahl der Mausklicks, um anzuzeigen, ob das Ereignis Teil einer Sequenz mit mehreren Klicks ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines mouseDown-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>mouseDown</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows und Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Anzahl der Mausklicks, um anzuzeigen, ob das Ereignis Teil einer Sequenz mit mehreren Klicks ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>Die Verwendung dieser Konstante wird im Beispiel für die <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>-Konstante veranschaulicht. 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_MOVE"><apiName>MOUSE_MOVE</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines mouseMove-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMove</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>mouseMove</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> Das folgende Beispiel ist ein einfaches Zeichenprogramm. Der Benutzer kann auf dem Haupt-Sprite-Objekt zeichnen oder auf einen kleineren rechteckigen Sprite-Objekt. 
   
 <p>Im Konstruktor wird ein rechteckiges <codeph>innerRect</codeph>-Sprite-Objekt erstellt und der Linienstil wird auf grün eingestellt. Der Linienstil für das Zeichnen im <codeph>MouseEvent_MOUSE_MOVEExample</codeph>-Sprite-Container wird auf rot eingestellt. Separate Ereignis-Listeners für die <codeph>MouseEvent.MOUSE_UP</codeph>- und <codeph>MouseEvent.MOUSE_DOWN</codeph>-Ereignisse werden für das Haupt-Sprite-Objekt der Anwendung und das <codeph>innerRect</codeph>-Sprite-Objekt hinzugefügt. In beiden Fällen verschieben die Listener-Methoden für Mouse-Down-Ereignisse die aktuelle Zeichenposition zur Position des Mauszeigers und fügen einen Listener für das<codeph>MouseEvent.MOUSE_MOVE</codeph>-Ereignis hinzu. Wenn der Mauszeiger verschoben wird, folgen die aufgerufenen Listener-Methoden dem Zeiger und zeichnen mit der <codeph>graphics.LineTo()</codeph>-Methode eine Linie. (<b>Hinweis:</b> Das <codeph>innerRect</codeph>-Sprite-Objekt verdeckt die roten Linien des Haupt-Sprite-Objekts, die hinter dem Rechteck gezeichnet sind.) Wenn das <codeph>MouseEvent.MOUSE_UP</codeph>-Ereignis auftritt, wird der Listener für das <codeph>MOUSE_MOVE</codeph>-Ereignis entfernet und das Zeichnen wird beendet.</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OUT"><apiName>MOUSE_OUT</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines mouseOut-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>mouseOut</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Das Anzeigelistenobjekt, auf das das Zeigegerät jetzt zeigt.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OVER"><apiName>MOUSE_OVER</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines mouseOver-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>mouseOver</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Das Anzeigelistenobjekt, auf das das Zeigegerät gezeigt hat.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines mouseUp-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>mouseUp</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Anzahl der Mausklicks, um anzuzeigen, ob das Ereignis Teil einer Sequenz mit mehreren Klicks ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>Die Verwendung dieser Konstante wird im Beispiel für die <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>-Konstante veranschaulicht. 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_WHEEL"><apiName>MOUSE_WHEEL</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines mouseWheel-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseWheel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>mouseWheel</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>delta</codeph></entry><entry>Die Anzahl der Zeilen, die jede Raststellung im Mausrad repräsentiert.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	Definiert den Wert der type-Eigenschaft eines rightClick-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>rightClick</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	Definiert den Wert der type-Eigenschaft eines rightMouseDown-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>rightMouseDown</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph/></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Anzahl der Mausklicks, um anzuzeigen, ob das Ereignis Teil einer Sequenz mit mehreren Klicks ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	Definiert den Wert der type-Eigenschaft eines rightMouseUp-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>rightMouseUp</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die rechte Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Anzahl der Mausklicks, um anzuzeigen, ob das Ereignis Teil einer Sequenz mit mehreren Klicks ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OUT"><apiName>ROLL_OUT</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines rollOut-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>rollOut</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Das Anzeigelistenobjekt, auf das das Zeigegerät jetzt zeigt.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OVER"><apiName>ROLL_OVER</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines rollOver-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>rollOver</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph>, wenn die Alt-Taste aktiviert ist (Windows oder Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Das Anzeigelistenobjekt, auf das das Zeigegerät gezeigt hat.</entry></row><row><entry><codeph>localX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz unter dem Zeigegerät. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
    Gibt an, ob die Alt-Taste aktiviert (true) oder deaktiviert (false) ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Reserved in case Desktop Player wants to capture this key in a future implementation.
	The Option key modifier on Macintosh system must be represented using this key modifier. So far, it seems
    only the Windows version is hooked up.
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    Gibt an, ob die Alt-Taste aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Wird nur für Windows und Linux unterstützt.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:buttonDown:get"><apiName>buttonDown</apiName><shortdesc>
	Gibt an, ob die primäre Maustaste gedrückt (true) ist oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob die primäre Maustaste gedrückt (<codeph>true</codeph>) ist oder nicht (<codeph>false</codeph>).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:clickCount:get"><apiName>clickCount</apiName><shortdesc>
	Gibt an, ob das Mouse-Down-Ereignis Teil einer Sequenz mit mehreren Klicks ist oder nicht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob das Mouse-Down-Ereignis Teil einer Sequenz mit mehreren Klicks ist oder nicht. Dieser Parameter hat den Wert null für alle Mausereignisse außer <codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightMouseDown</codeph> und <codeph>MouseEvent.rightMouseUp</codeph>. Das Warten auf einfache Klicks, Doppelklicks und Sequenzen mit mehreren Klicks ist mit dem <codeph>clickCount</codeph>-Parameter möglich. Zum Beispiel haben die ersten Ereignisse <codeph>MouseEvent.mouseDown</codeph> und <codeph>MouseEvent.mouseUp</codeph> für <codeph>clickCount</codeph> den Wert 1 und die zweiten <codeph>MouseEvent.mouseDown</codeph>- und <codeph>MouseEvent.mouseUp</codeph>-Ereignisse in einer Doppelklicksequenz haben für <codeph>clickCount</codeph> den Wert 2. Wenn die Maus ausreichend bewegt wird oder die Mehrfachklicksequenz unterbrochen wird, hat das nächste <codeph>MouseEvent.mouseDown</codeph> für clickCount den Wert 1. Das doubleClick-Ereignis wird weiterhin wie erwartet ausgelöst.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	Gibt an, ob die Befehlstaste aktiviert ist (nur Mac). Der Wert der commandKey-Eigenschaft hat denselben Wert wie die ctrlKey-Eigenschaft auf dem Mac.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob die Befehlstaste aktiviert ist (nur Mac). 
	
	<p>Der Wert der <codeph>commandKey</codeph>-Eigenschaft hat denselben Wert wie die <codeph>ctrlKey</codeph>-Eigenschaft auf dem Mac. Ist unter Windows und Linux immer „false“.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	Gibt an, ob unter Mac OS die Ctrl-Taste oder unter Windows oder Linux die Strg-Taste aktiviert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob unter Mac OS die Ctrl-Taste oder unter Windows oder Linux die Strg-Taste aktiviert ist.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	Gibt unter Windows oder Linux an, ob die Strg-Taste aktiviert (true) oder deaktiviert (false) ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt unter Windows oder Linux an, ob die Strg-Taste aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Unter Mac wird damit angezeigt, ob die Ctrl-Taste oder die Befehlstaste aktiviert ist.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:delta:get"><apiName>delta</apiName><shortdesc>
	Gibt an, wie viele Zeilen pro Raststellung des Mausrads durchlaufen werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, wie viele Zeilen pro Raststellung des Mausrads durchlaufen werden sollen. Ein positiver Deltawert bedeutet einen Bildlauf nach oben. Ein negativer Wert steht für einen Bildlauf nach unten. Typische Werte sind 1 bis 3, wobei ein schnellerer Bildlauf größere Werte zur Folge haben kann. Diese Einstellung hängt von dem Gerät und dem Betriebssystem ab und wird in der Regel vom Benutzer eingestellt. Diese Eigenschaft gilt nur für das Ereignis <codeph>MouseEvent.mouseWheel</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 Falls „true“, ist die relatedObject-Eigenschaft aus Gründen, die mit der Sicherheitssandbox zusammenhängen, auf null gesetzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn <codeph>true</codeph>, ist die <codeph>relatedObject</codeph>-Eigenschaft aus Gründen, die mit der Sicherheitssandbox zusammenhängen, auf <codeph>null </codeph> gesetzt. Ist der Nominalwert von <codeph>relatedObject</codeph> ein Verweis auf ein DisplayObject in einer anderen Sandbox, wird <codeph>relatedObject</codeph> auf <codeph>null</codeph> gesetzt, es sei denn, die Berechtigung gilt über die Sandboxgrenzen hinweg für beide Richtungen. Die Berechtigung wird eingerichtet, indem aus einer SWF-Datei <codeph>Security.allowDomain()</codeph> aufgerufen wird oder eine Richtliniendatei vom Server einer Bilddatei bereitgestellt und die <codeph>LoaderContext.checkPolicyFile</codeph>-Eigenschaft beim Laden des Bilds gesetzt wird.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/relatedObject"><linktext>MouseEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:localX:get"><apiName>localX</apiName><shortdesc>
	Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.
	
	</apiDesc><example>Die Verwendung dieser Eigenschaft wird im Beispiel für die <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>-Konstante veranschaulicht.
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:localY:get"><apiName>localY</apiName><shortdesc>
	Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.
	
	</apiDesc><example>Die Verwendung dieser Eigenschaft wird im Beispiel für die <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>-Konstante veranschaulicht.
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	Ein Verweis auf ein Anzeigelistenobjekt, das in Relation zum Ereignis steht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Ein Verweis auf ein Anzeigelistenobjekt, das in Relation zum Ereignis steht. Wenn beispielsweise ein <codeph>mouseOut</codeph>-Ereignis auftritt, stellt <codeph>relatedObject</codeph> das Anzeigelistenobjekt dar, auf das das Zeigegerät jetzt zeigt. Diese Eigenschaft gilt für die Ereignisse <codeph>mouseOut</codeph>, <codeph>mouseOver</codeph>, <codeph>rollOut</codeph> und <codeph>rollOver</codeph>.
	<p>Der Wert dieser Eigenschaft kann in zwei Fällen <codeph>null</codeph> sein: Wenn es kein verwandtes Objekt gibt oder wenn es eines gibt, dieses aber eine Sicherheitssandbox ist, auf die Sie keinen Zugriff haben. Verwenden Sie die <codeph>isRelatedObjectInaccessible()</codeph>-Eigenschaft, um festzustellen, welcher dieser Gründe zutrifft.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/isRelatedObjectInaccessible"><linktext>MouseEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Gibt an, ob die Umschalttaste aktiviert (true) oder deaktiviert (false) ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob die Umschalttaste aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageX:get"><apiName>stageX</apiName><shortdesc>
	Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten. Diese Eigenschaft wird berechnet, wenn die Eigenschaft <codeph>localX</codeph> eingerichtet wird.
	
	</apiDesc><example>Die Verwendung dieser Eigenschaft wird im Beispiel für die <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>-Konstante veranschaulicht. 
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageY:get"><apiName>stageY</apiName><shortdesc>
	Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in globalen Bühnenkoordinaten. Diese Eigenschaft wird berechnet, wenn die Eigenschaft <codeph>localY</codeph> eingerichtet wird.
	
	</apiDesc><example>Die Verwendung dieser Eigenschaft wird im Beispiel für die <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref>-Konstante veranschaulicht.
	</example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
	
	Ein NetStream-Objekt löst ein DRMStatusEvent-Objekt aus, wenn der mit DRM (Digital Rights Management) geschützte Inhalt erfolgreich abgespielt wird (wenn der Gutschein verifiziert wurde und der Benutzer authentifiziert wurde und berechtigt ist, den Inhalt anzuzeigen).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für DRM-fähige Objekte.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	
	Ein NetStream-Objekt löst ein DRMStatusEvent-Objekt aus, wenn der mit DRM (Digital Rights Management) geschützte Inhalt erfolgreich abgespielt wird (wenn der Gutschein verifiziert wurde und der Benutzer authentifiziert wurde und berechtigt ist, den Inhalt anzuzeigen). Das DRMStatusEvent-Objekt enthält Informationen über den Gutschein, zum Beispiel. ob der Inhalt offline zur Verfügung gestellt werden kann oder wann der Gutschein abläuft und der Inhalt nicht mehr angezeigt werden kann. Die Anwendung kann diese Daten verwenden, um den Benutzer über den Status der Richtlinien und Berechtigungen zu informieren.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMStatusEvent/DRM_STATUS"><linktext>DRMStatusEvent.DRM_STATUS</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link><link href="flash.net.drm.xml#DRMVoucher"><linktext>flash.net.drm.DRMVoucher</linktext></link></related-links><adobeApiEvent id="flash.events:DRMStatusEvent:DRM_STATUS_drmStatus"><apiName>drmStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMStatusEvent:DRM_STATUS</apiEventType><adobeApiEventClassifier>flash.events:DRMStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:DRMStatusEvent:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
 	    Erstellt ein Ereignisobjekt, das bestimmte Informationen über DRM-Statusereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent, constructor
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ von DRMAuthenticate-Ereignissen: <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
		</apiDesc></apiParam><apiParam><apiItemName>inPolicies</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>Das benutzerdefinierte Objekt, das benutzerdefinierte DRM-Eigenschaften enthält.  		
		</apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Der Kontext des Ereignisses.  		
		</apiDesc></apiParam><apiParam><apiItemName>inAvailableOffline</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob der Inhalt offline betrachtet werden kann.
		</apiDesc></apiParam><apiParam><apiItemName>inAnonymous</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob anonyme Benutzer auf den Inhalt zugreifen können.
		</apiDesc></apiParam><apiParam><apiItemName>inVoucherEndDate</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Das Datum, an dem der Inhaltsgutschein abläuft, ausgedrückt als Zeitraum.
		</apiDesc></apiParam><apiParam><apiItemName>inOfflineLeasePeriod</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Die Anzahl der Tage, die dem Benutzer zur Offline-Ansicht des Inhalts verbleiben. 
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inVoucher</apiItemName><apiOperationClassifier>flash.net.drm:DRMVoucher</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inLocal</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
 	    Erstellt ein Ereignisobjekt, das bestimmte Informationen über DRM-Statusereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMStatusEvent:clone"><apiName>clone</apiName><shortdesc>
		Erstellt eine Kopie des DRMStatusEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues DRMStatusEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Erstellt eine Kopie des DRMStatusEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMStatusEvent:toString"><apiName>toString</apiName><shortdesc>
		Gibt einen String zurück, der alle Eigenschaften des DRMStatusEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des DRMStatusEvent-Objekts enthält.
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Gibt einen String zurück, der alle Eigenschaften des DRMStatusEvent-Objekts enthält. 
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMStatusEvent:DRM_STATUS"><apiName>DRM_STATUS</apiName><shortdesc>
		Die DRMStatusEvent.DRM_STATUS-Konstante definiert den Wert der type-Eigenschaft eines drmStatus-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Die <codeph>DRMStatusEvent.DRM_STATUS</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>drmStatus</codeph>-Ereignisobjekts. 
		
		
		<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>detail</codeph></entry><entry>Ein String, der den Kontext des Statusereignisses erläutert.</entry></row><row><entry><codeph>isAnonymous</codeph></entry><entry>Gibt an, ob der mit DRM-Verschlüsselung geschützte Inhalt verfügbar ist, ohne dass der Benutzer Authentifizierungsdaten eingeben muss.</entry></row><row><entry><codeph>isAvailableOffline</codeph></entry><entry>Gibt an, ob der mit DRM-Verschlüsselung geschützte Inhalt offline verfügbar ist.</entry></row><row><entry><codeph>offlineLeasePeriod</codeph></entry><entry>Die verbleibende Anzahl der Tage, an denen der Inhalt offline angezeigt werden kann.</entry></row><row><entry><codeph>Richtlinien</codeph></entry><entry>Ein benutzerdefiniertes Objekt des DRM-Statusereignisses.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NetStream-Objekt.</entry></row><row><entry><codeph>voucherEndDate</codeph></entry><entry>Das absolute Datum, an dem der Gutschein abläuft und der Inhalt nicht mehr von Benutzern angezeigt werden kann.</entry></row><row><entry><codeph>contentData</codeph></entry><entry>Die DRMContentData für den Inhalt.</entry></row><row><entry><codeph>voucher</codeph></entry><entry>Das DRMVoucher-Objekt für den Inhalt.</entry></row><row><entry><codeph>isLocal</codeph></entry><entry>Gibt an, ob der Inhalt im lokalen Dateisystem gespeichert ist.</entry></row></tbody></tgroup></adobetable>
		
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:detail:get"><apiName>detail</apiName><shortdesc>
		Ein String, der den Kontext des Statusereignisses erläutert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.detail, detail
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Ein String, der den Kontext des Statusereignisses erläutert.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAnonymous:get"><apiName>isAnonymous</apiName><shortdesc>
		Gibt an, ob der durch Digital Rights Management (DRM)-Verschlüsselung geschützte Inhalt verfügbar ist, ohne dass ein Benutzer Authentifizierungsdaten eingeben muss. In diesem Fall ist der Wert true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAnonymous, isAnonymous
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		Gibt an, ob der durch Digital Rights Management (DRM)-Verschlüsselung geschützte Inhalt verfügbar ist, ohne dass ein Benutzer Authentifizierungsdaten eingeben muss. In diesem Fall ist der Wert <codeph>true</codeph>. Andernfalls ist der Wert <codeph>false</codeph> und ein Benutzer muss ein Benutzernamen und ein Kennwort eingeben, die mit den vom Content Provider erwarteten übereinstimmen. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAvailableOffline:get"><apiName>isAvailableOffline</apiName><shortdesc>
		Gibt an, ob der durch Digital Rights Management (DRM)-Verschlüsselung geschützte Inhalt offline verfügbar ist. In diesem Fall ist der Wert true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAvailableOffline, isAvailableOffline
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		Gibt an, ob der durch Digital Rights Management (DRM)-Verschlüsselung geschützte Inhalt offline verfügbar ist. In diesem Fall ist der Wert <codeph>true</codeph>. Andernfalls ist der Wert <codeph>false</codeph>.
		<p>
		Damit der digital geschützte Inhalt offline zur Verfügung steht, muss der entsprechende Gutschein auf dem lokalen Computer des Benutzer zwischengespeichert sein. (Die Anwendung entscheidet, ob der Inhalt lokal gespeichert werden soll, damit er offline verfügbar ist.)
		</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:offlineLeasePeriod:get"><apiName>offlineLeasePeriod</apiName><shortdesc>
		Die verbleibende Anzahl der Tage, an denen der Inhalt offline angezeigt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.offlineLeasePeriod, offlineLeasePeriod
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
		Die verbleibende Anzahl der Tage, an denen der Inhalt offline angezeigt werden kann.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:policies:get"><apiName>policies</apiName><shortdesc>
		Ein benutzerdefiniertes Objekt des DRM-Statusereignisses.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.policies, policies
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
		Ein benutzerdefiniertes Objekt des DRM-Statusereignisses.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucherEndDate:get"><apiName>voucherEndDate</apiName><shortdesc>
		Das absolute Datum, an dem der Gutschein abläuft und der Inhalt nicht mehr von Benutzern angezeigt werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.voucherEndDate, voucherEndDate
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Date</apiValueClassifier></apiValueDef><apiDesc>
		Das absolute Datum, an dem der Gutschein abläuft und der Inhalt nicht mehr von Benutzern angezeigt werden kann. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 Ein DRMContentData-Objekt, das die nötigen Informationen enthält, um einen Gutschein für das Anzeigen des DRM-geschützten Inhalts zu erhalten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 Ein DRMContentData-Objekt, das die nötigen Informationen enthält, um einen Gutschein für das Anzeigen des DRM-geschützten Inhalts zu erhalten.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isLocal:set"><apiName>isLocal</apiName><shortdesc>
		 Gibt an, ob der Gutschein im lokalen Gutschein-Store zwischengespeichert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Gibt an, ob der Gutschein im lokalen Gutschein-Store zwischengespeichert ist.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucher:set"><apiName>voucher</apiName><shortdesc>
		 Ein DRMVoucher-Objekt für den Inhalt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMVoucher</apiValueClassifier></apiValueDef><apiDesc>
		 Ein DRMVoucher-Objekt für den Inhalt.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	Ein Objekt löst ein AsyncErrorEvent-Ereignis aus, wenn eine Ausnahme vom nativen asynchronen Code ausgegeben wird, z. B. LocalConnection, NetConnection, SharedObject oder NetStream.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für AsyncErrorEvent-Ereignisse.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	Ein Objekt löst ein AsyncErrorEvent-Ereignis aus, wenn eine Ausnahme vom nativen asynchronen Code ausgegeben wird, z. B. LocalConnection, NetConnection, <ph platform="actionscript">SharedObject</ph> oder NetStream. Es gibt nur einen Typ eines asynchronen Fehlerereignisses: <codeph>AsyncErrorEvent.ASYNC_ERROR</codeph>.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#AsyncErrorEvent/ASYNC_ERROR"><linktext>ASYNC_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:AsyncErrorEvent:ASYNC_ERROR_asyncError"><apiName>asyncError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:AsyncErrorEvent:ASYNC_ERROR</apiEventType><adobeApiEventClassifier>flash.events:AsyncErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:AsyncErrorEvent:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	Erstellt ein AsyncErrorEvent-Objekt, das Informationen über asyncError-Ereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines Fehlerereignisses: <codeph>ErrorEvent.ERROR</codeph>.
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt eine Bubbling-Phase durchführt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen. <ph platform="javascript">Diese Eigenschaft gilt für Anzeigeobjekte in SWF-Inhalten, die die ActionScript 3.0-Anzeigearchitektur verwenden.</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen. 
	
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Der als Fehlermeldung anzuzeigende Text. Ereignis-Listener können über die Eigenschaft <codeph>text</codeph> auf diese Informationen zugreifen.
	
	</apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier><apiData>null</apiData><apiDesc>Die eingetretene Ausnahme. Wenn error nicht null ist, wird die <codeph>errorId</codeph>-Eigenschaft des Ereignisse von der <codeph>errorId</codeph>-Eigenschaft des Fehlers festgelegt.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für AsyncErrorEvent-Objekte.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein AsyncErrorEvent-Objekt, das Informationen über asyncError-Ereignisse enthält. MS">AsyncErrorEvent-Objekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:AsyncErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des AsyncErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues AsyncErrorEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des AsyncErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:AsyncErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des AsyncErrorEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des AsyncErrorEvent-Objekts enthält.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des AsyncErrorEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[AsyncErrorEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> ... error=<i>Wert</i> errorID=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:AsyncErrorEvent:ASYNC_ERROR"><apiName>ASYNC_ERROR</apiName><shortdesc>
	Die Konstante AsyncErrorEvent.ASYNC_ERROR definiert den Wert der type-Eigenschaft eines asyncError-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>asyncError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die Konstante <codeph>AsyncErrorEvent.ASYNC_ERROR</codeph> definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>asyncError</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph><ph platform="javascript"> Diese Eigenschaft gilt für ActionScript 3.0-Anzeigeobjekte (in SWF-Dateien).</ph></entry> </row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann. <ph platform="javascript">Diese Eigenschaft gilt für Anzeigeobjekte in SWF-Inhalten, die die ActionScript 3.0-Anzeigearchitektur verwenden.</ph></entry> </row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet. <ph platform="javascript">Diese Eigenschaft gilt für Anzeigeobjekte in SWF-Inhalten, die die ActionScript 3.0-Anzeigearchitektur verwenden.</ph></entry> </row><row><entry><codeph>target</codeph></entry> <entry>Das Objekt, das das Ereignis auslöst.</entry> </row><row><entry><codeph>error</codeph></entry><entry>Der Fehler, der das Ereignis ausgelöst hat.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AsyncErrorEvent:error"><apiName>error</apiName><shortdesc>
	Der ausgegebene Ausnahmefehler.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Error</apiValueClassifier></apiValueDef><apiDesc>
	Der ausgegebene Ausnahmefehler.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
 Ein Objekt sendet ein StatusEvent-Objekt, wenn ein Gerät (z. B. eine Kamera oder ein Mikrofon) oder ein Objekt (z. B. ein LocalConnection-Objekt) den Status meldet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\StatusEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für StatusEvent-Ereignisse.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein Objekt sendet ein StatusEvent-Objekt, wenn ein Gerät (z. B. eine Kamera oder ein Mikrofon) oder ein Objekt (z. B. ein LocalConnection-Objekt) den Status meldet. Es gibt nur einen Typ eines status-Ereignisses: <codeph>StatusEvent.STATUS</codeph> .
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link><link href="air.net.xml#ServiceMonitor"><linktext>air.net.ServiceMonitor</linktext></link></related-links><adobeApiEvent id="flash.events:StatusEvent:STATUS_status"><apiName>status</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:StatusEvent:STATUS</apiEventType><adobeApiEventClassifier>flash.events:StatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:StatusEvent:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
	 Erstellt ein Ereignisobjekt, das Informationen über Status-Ereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines status-Ereignisses: <codeph>StatusEvent.STATUS</codeph> .
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen. 
	 </apiDesc></apiParam><apiParam><apiItemName>code</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Eine Beschreibung des Objektstatus. Ereignis-Listener können über die Eigenschaft <codeph>code</codeph> auf diese Informationen zugreifen.
	 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Die Kategorie der Meldung, z. B. <codeph>"status"</codeph>, <codeph>"warning"</codeph> oder <codeph>"error"</codeph>. Ereignis-Listener können über die Eigenschaft <codeph>level</codeph> auf diese Informationen zugreifen.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für StatusEvent-Objekte.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Erstellt ein Ereignisobjekt, das Informationen über Status-Ereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#StatusEvent/STATUS"><linktext>STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:StatusEvent:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine Kopie des StatusEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues StatusEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine Kopie des StatusEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:StatusEvent:toString"><apiName>toString</apiName><shortdesc>
	 Gibt eine Zeichenfolge zurück, die alle Eigenschaften des StatusEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des StatusEvent-Objekts enthält.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt eine Zeichenfolge zurück, die alle Eigenschaften des StatusEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	 <p><codeph>[StatusEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> code=<i>Wert</i> level=<i>Wert</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:StatusEvent:STATUS"><apiName>STATUS</apiName><shortdesc>
     Definiert den Wert der Eigenschaft type eines status-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>status</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>status</codeph>-Ereignisobjekts.
	 <p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>code</codeph></entry><entry>Eine Beschreibung des Objektstatus.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>Ebene</codeph></entry><entry>Die Kategorie der Meldung, z. B. <codeph>"status"</codeph>, <codeph>"warning"</codeph> oder <codeph>"error"</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt, dessen Status gemeldet wird.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:code:get"><apiName>code</apiName><shortdesc>
	 Eine Beschreibung des Objektstatus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Eine Beschreibung des Objektstatus.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:level:get"><apiName>level</apiName><shortdesc>
 	 Die Meldungskategorie wie „Status“, „Warnung“ oder „Fehler“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
 	 Die Kategorie der Meldung, z. B. <codeph>"status"</codeph>, <codeph>"warning"</codeph> oder <codeph>"error"</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
	 Der DRMManager löst ein DRMAuthenticationErrorEvent-Objekt aus, wenn ein Aufruf der authenticate()-Methode des DRMManager-Objekts fehlschlägt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Der DRMManager löst ein DRMAuthenticationErrorEvent-Objekt aus, wenn ein Aufruf der <codeph>authenticate()</codeph>-Methode des DRMManager-Objekts fehlschlägt.
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationErrorEvent:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
		 Erstellt eine neue Instanz eines DRMAuthenticationErrorEvent-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>der Ereignistypstring
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>ob das Ereignis in der Anzeigeliste fortgesetzt wird
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>ob das Ereignis abgebrochen werden kann
		 </apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>die Fehlerbeschreibung
		 </apiDesc></apiParam><apiParam><apiItemName>inErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>die ID des allgemeinen Fehlertyps
		 </apiDesc></apiParam><apiParam><apiItemName>inSubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>die ID, die den spezifischen Fehler innerhalb des Fehlertyps angibt
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>die URL des angemeldeten Servers
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>die authentifizierte Domäne des angemeldeten Servers
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Erstellt eine neue Instanz eines DRMAuthenticationErrorEvent-Objekts.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:DRMAuthenticationErrorEvent:AUTHENTICATION_ERROR"><apiName>AUTHENTICATION_ERROR</apiName><shortdesc>
		 Die im type-Parameter zu verwendende Stringkonstante für das Authentifizierungsfehlerereignis beim Hinzufügen und Entfernen von Ereignis-Listenern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>AuthenticationError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Die im type-Parameter zu verwendende Stringkonstante für das Authentifizierungsfehlerereignis beim Hinzufügen und Entfernen von Ereignis-Listenern.
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationErrorEvent:subErrorID:set"><apiName>subErrorID</apiName><shortdesc>
		 Ein ausführlicherer Fehlercode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		 Ein ausführlicherer Fehlercode.
		  
	 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:IEventDispatcher"><apiName>IEventDispatcher</apiName><shortdesc>
Die IEventDispatcher-Schnittstelle definiert Methoden zum Hinzufügen bzw. Entfernen von Ereignis-Listenern, prüft, ob bestimmte Typen von Ereignis-Listenern registriert sind und löst Ereignisse aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier/></apiClassifierDef><apiDesc>
Die IEventDispatcher-Schnittstelle definiert Methoden zum Hinzufügen bzw. Entfernen von Ereignis-Listenern, prüft, ob bestimmte Typen von Ereignis-Listenern registriert sind und löst Ereignisse aus.

<p>Ereignisziele sind ein wichtiger Bestandteil des Ereignismodells in Flash<sup>®</sup> Player und Adobe AIR. Das Ereignisziel dient als zentraler Punkt bei dem Ablauf der Ereignisse durch die Hierarchie der Anzeigeliste. Wenn ein Ereignis wie ein Mausklick oder ein Tastenanschlag eintritt, wird vom Root der Anzeigeliste aus ein Ereignisobjekt in den Ereignisablauf gesendet. Dieser Weg zum Ereignisziel und zurück ist im Prinzip in drei Phasen unterteilt: die Aufnahmephase umfasst den Weg vom Root zum letzten Knoten vor dem Ereigniszielknoten, die Zielphase umfasst nur den Ereigniszielknoten, und die Bubbling-Phase umfasst alle weiteren Knoten, auf die das Objekt auf dem Rückweg zum Root der Anzeigeliste trifft.</p>

<p>Im Allgemeinen besteht der einfachste Weg für eine benutzerdefinierte Klasse, die Fähigkeit zum Auslösen eines Ereignisses zu erhalten darin, die EventDispatcher-Klasse zu erweitern. Wenn dies nicht möglich ist (d. h., wenn die Klasse bereits eine andere Klasse erweitert), können Sie stattdessen die IEventDispatcher-Schnittstelle implementieren, ein EventDispatcher-Mitglied erstellen und einfache Hooks schreiben, um alle Aufrufe an einen aggregierten EventDispatcher zu leiten.</p>

</apiDesc><example conref="examples\IEventDispatcherExample.as"> Im folgenden Beispiel wird anhand der Klassen IEventDispatcherExample und DecoratedDispatcher erläutert, wie die IEventDispatcher-Klasse implementiert und verwendet werden kann. Im Beispiel wird jede DecoratedDispatcher-Methode auf die gleiche Weise wie bei EventDispatcher implementiert. Innerhalb des Kontruktors für IEventDispatcherExample wird eine neue Instanz (<codeph>decorDispatcher</codeph>) der DecoratedDispatcher-Klasse erstellt, und die Variable <codeph>decorDispatcher</codeph> wird verwendet, um <codeph>addEventListener()</codeph> zusammen mit dem benutzerdefinierten <codeph>doSomething</codeph>-Ereignis aufzurufen. Letzteres wird im Anschluss von <codeph>didSomething()</codeph> verarbeitet, und es wird eine Textzeile unter Verwendung von <codeph>trace()</codeph> gedruckt.
<codeblock> 
package {
        import flash.events.Event;
        import flash.display.Sprite;
       
        public class IEventDispatcherExample extends Sprite {
                public function IEventDispatcherExample() {
                        var decorDispatcher:DecoratedDispatcher = new DecoratedDispatcher();
                        decorDispatcher.addEventListener("doSomething", didSomething);
                        decorDispatcher.dispatchEvent(new Event("doSomething"));
                }
               
                public function didSomething(evt:Event):void {
                        trace(">> didSomething");
                }
        }
}

import flash.events.IEventDispatcher;
import flash.events.EventDispatcher;
import flash.events.Event;
               
class DecoratedDispatcher implements IEventDispatcher {       
    private var dispatcher:EventDispatcher;
               
    public function DecoratedDispatcher() {
        dispatcher = new EventDispatcher(this);
    }
           
    public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void{
        dispatcher.addEventListener(type, listener, useCapture, priority);
    }
           
    public function dispatchEvent(evt:Event):Boolean{
        return dispatcher.dispatchEvent(evt);
    }
    
    public function hasEventListener(type:String):Boolean{
        return dispatcher.hasEventListener(type);
    }
    
    public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void{
        dispatcher.removeEventListener(type, listener, useCapture);
    }
                   
    public function willTrigger(type:String):Boolean {
        return dispatcher.willTrigger(type);
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	Registriert ein Ereignis-Listener-Objekt bei einem EventDispatcher-Objekt, sodass der Listener über ein Ereignis benachrichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses.
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Die Listener-Funktion, die das Ereignis verarbeitet. Diese Funktion muss, wie das nachfolgende Beispiel zeigt, ein Ereignisobjekt als einzigen Parameter akzeptieren und keinen Wert zurückgeben:
	<p><codeph>function(evt:Event):void</codeph></p>
	Der Name der Funktion ist beliebig.
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob der Listener in der Aufnahmephase oder in der Ziel- und Bubbling-Phase arbeitet. Ist <codeph>useCapture</codeph> auf <codeph>true</codeph> gesetzt, so verarbeitet der Listener das Ereignis nur während der Aufnahmephase und nicht während der Ziel- oder Bubbling-Phase. Hat <codeph>useCapture</codeph> hingegen den Wert <codeph>false</codeph>, verarbeitet der Listener das Ereignis nur während der Ziel- oder Bubbling-Phase. Damit das Ereignis in allen drei Phasen aktiv ist, rufen Sie <codeph>addEventListener()</codeph> zweimal auf; einmal ist <codeph>useCapture</codeph> auf <codeph>true</codeph> gesetzt, und beim zweiten Mal hat <codeph>useCapture</codeph> den Wert <codeph>false</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Die Prioritätsstufe des Ereignis-Listeners. Prioritäten werden über eine 32-Bit-Ganzzahl zugewiesen. Je höher die Zahl, desto höher die Priorität. Alle Listener mit der Priorität <i>n</i> werden vor Listenern mit der Priorität <i>n-1</i> verarbeitet. Wenn zwei oder mehr Listener die gleiche Priorität aufweisen, werden sie in der Reihenfolge verarbeitet, in der sie hinzugefügt wurden. Die Standardpriorität ist 0. 
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob der Verweis auf den Listener stark oder schwach ist. Ein starker Verweis (der Standard) verhindert, dass der Listener von einem Garbage Collector entfernt wird. Ein schwacher Verweis hingegen nicht. <p>Funktionen von Mitgliedern auf Klassenebene unterliegen nicht der Garbage Collection. Daher können Sie <codeph>useWeakReference</codeph> für Mitgliedsfunktionen auf Klassenebene auf <codeph>true</codeph> setzen, ohne sie der Garbage Collection zu unterziehen. Wenn Sie <codeph>useWeakReference</codeph> für einen Listener, der eine verschachtelte innere Funktion ist, auf <codeph>true</codeph> setzen, wird Garbage Collection auf diese Funktion angewendet, die damit nicht mehr permanent gespeichert wird. Indem Sie Verweise auf die innere Funktion erstellen (d. h sie in einer anderen Variable speichern), umgehen Sie die Garbage Collection, sodass die Funktion permanent gespeichert bleibt.</p>
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Registriert ein Ereignis-Listener-Objekt bei einem EventDispatcher-Objekt, sodass der Listener über ein Ereignis benachrichtigt wird. Sie können Ereignis-Listener bei allen Knoten in der Anzeigeliste für eine bestimmte Art von Ereignis, Phase oder Priorität registrieren.
	<p>Nachdem Sie einen Ereignis-Listener erfolgreich registriert haben, können Sie seine Priorität nicht durch weitere Aufrufe von <codeph>addEventListener()</codeph> ändern. Um die Priorität eines Listeners zu ändern, müssen Sie zunächst <codeph>removeEventListener()</codeph> aufrufen. Anschließend können Sie den Listener mit der neuen Prioritätsstufe erneut aufrufen.</p>
	<p>Nach der Registrierung des Listeners haben nachfolgende Aufrufe von <codeph>addEventListener()</codeph> mit einem anderen <codeph>type</codeph>- oder <codeph>useCapture</codeph>-Wert eine separate Listener-Registrierung zur Folge. Wenn Sie beispielsweise zuerst einen Listener registrieren, für den <codeph>useCapture</codeph> auf <codeph>true</codeph> gesetzt ist, wird dieser nur während der Aufnahmephase aktiv sein. Wenn Sie <codeph>addEventListener()</codeph> für dasselbe Listener-Objekt erneut aufrufen, diesmal aber <codeph>useCapture</codeph> auf <codeph>false</codeph> gesetzt ist, werden zwei separate Listener angelegt: einer, der während der Aufnahmephase aktiv ist und ein zweiter, der während der Ziel- und Bubbling-Phase aktiv ist.</p>
	<p>Sie können einen Ereignis-Listener nicht nur für die Ziel- oder Bubbling-Phase registrieren. Die beiden Phasen hängen während der Registrierung immer zusammen, da Bubbling nur für übergeordnete Elemente des Zielknotens gilt.</p>
	<p>Wenn Sie einen Ereignis-Listener nicht mehr benötigen, entfernen sie ihn, indem Sie <codeph>EventDispatcher.removeEventListener()</codeph> aufrufen, andernfalls könnte es zu Speicherproblemen kommen. Objekte mit registrierten Ereignis-Listenern werden nicht automatisch aus dem Speicher entfernt, da der Garbage Collector (Speichermanagement) keine Objekte entfernt, die noch Verweise enthalten.</p>
	<p>Beim Kopieren einer EventDispatcher-Instanz werden zugewiesene Ereignis-Listener nicht kopiert. (Wenn ein neu angelegter Knoten einen Ereignis-Listener benötigt, müssen Sie den Listener nach dem Erstellen des Knotens zuweisen.) Wenn Sie jedoch eine EventDispatcher-Instanz verschieben, werden zugewiesene Ereignis-Listener ebenfalls verschoben.</p>
	<p>Wenn der Ereignis-Listener bei einem Knoten registriert ist und dieser Knoten ein Ereignis durchgeführt, so wird der Ereignis-Listener nicht während der aktuellen Phase ausgelöst, kann aber in einer späteren Phase im Ereignisablauf gesendet werden, etwa in der Bubbling-Phase.</p>
	<p>Wird ein Ereignis-Listener von einem Knoten entfernt, während mit dem Knoten ein Ereignis durchgeführt wird, so wird er von den aktuellen Aktionen immer noch ausgelöst. Nachdem er entfernt worden ist, wird der Ereignis-Listener nicht wieder aufgerufen (es sei denn er wird für spätere Verarbeitungsvorgänge erneut aufgerufen). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	Sendet ein Ereignis in den Ereignisablauf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Wert <codeph>true</codeph> (sofern nicht <codeph>preventDefault()</codeph>) wird bei dem Ereignis aufgerufen. In diesem Fall wird <codeph>false</codeph> zurückgegeben.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>Das Ereignisobjekt, das in den Ereignisablauf gesendet wird.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Sendet ein Ereignis in den Ereignisablauf. Das Ereignisziel ist das EventDispatcher-Objekt, für das die Methode <codeph>dispatchEvent()</codeph> aufgerufen wird.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	Überprüft, ob das EventDispatcher-Objekt Listener für einen bestimmten Ereignistyp registriert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Wert <codeph>true</codeph>, wenn ein Listener des angegebenen Typs registriert ist; andernfalls <codeph>false</codeph>.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Überprüft, ob das EventDispatcher-Objekt Listener für einen bestimmten Ereignistyp registriert hat. Dadurch können Sie bestimmen, wo ein EventDispatcher-Objekt die Verarbeitung eines Ereignistyps in der Ereignisablaufhierarchie geändert hat. Um festzustellen, ob ein bestimmter Ereignistyp einen Ereignis-Listener auslöst, verwenden Sie <codeph>IEventDispatcher.willTrigger()</codeph>.
	<p>Der Unterschied zwischen <codeph>hasEventListener()</codeph> und <codeph>willTrigger()</codeph> besteht darin, dass <codeph>hasEventListener()</codeph> nur das Objekt untersucht, zu dem es gehört, während <codeph>willTrigger()</codeph> den gesamten Ereignisablauf auf das im Parameter <codeph>type</codeph> angegebene Ereignis untersucht.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#IEventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	Entfernt einen Listener aus dem EventDispatcher-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses.
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Das zu entfernende Listener-Objekt.
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob der Listener in der Aufnahmephase oder in der Ziel- und Bubbling-Phase registriert wurde. Wenn der Listener sowohl für die Aufnahme- als auch für die Bubbling-Phase registriert wurde, sind auch zwei Aufrufe von <codeph>removeEventListener()</codeph> erforderlich, um beide zu entfernen: ein Aufruf, bei dem <codeph>useCapture</codeph> auf <codeph>true</codeph> gesetzt ist, und einer, bei dem <codeph>useCapture</codeph> auf <codeph>false</codeph> gesetzt ist. 
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Entfernt einen Listener aus dem EventDispatcher-Objekt. Wenn kein entsprechender Listener mit dem EventDispatcher-Objekt registriert ist, hat ein Aufruf dieser Methode keine Auswirkungen.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	Überprüft, ob bei diesem EventDispatcher-Objekt oder bei einem seiner übergeordneten Objekte ein Ereignis-Listener für einen bestimmten Ereignistyp registriert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Wert <codeph>true</codeph>, wenn ein Listener des angegebenen Typs ausgelöst wird; andernfalls <codeph>false</codeph>.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Überprüft, ob bei diesem EventDispatcher-Objekt oder bei einem seiner übergeordneten Objekte ein Ereignis-Listener für einen bestimmten Ereignistyp registriert ist. Diese Methode liefert den Wert <codeph>true</codeph>, wenn während irgendeiner Phase des Ereignisablaufs ein Ereignis-Listener aufgerufen wird, wenn ein Ereignis des angegebenen Typs für dieses EventDispatcher-Objekt oder eines seiner untergeordneten Elemente ausgelöst wird.
	<p>Der Unterschied zwischen <codeph>hasEventListener()</codeph> und <codeph>willTrigger()</codeph> besteht darin, dass <codeph>hasEventListener()</codeph> nur das Objekt untersucht, zu dem es gehört, während <codeph>willTrigger()</codeph> den gesamten Ereignisablauf auf das im Parameter <codeph>type</codeph> angegebene Ereignis untersucht.</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
	Ein HTMLLoader-Objekt löst ein HTMLUncaughtScriptExceptionEvent-Objekt aus, wenn eine JavaScript-Ausnahme ausgegeben wird und nicht mit einer catch-Anweisung verarbeitet wird.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	Ein HTMLLoader-Objekt löst ein HTMLUncaughtScriptExceptionEvent-Objekt aus, wenn eine JavaScript-Ausnahme ausgegeben wird und nicht mit einer <codeph>catch</codeph>-Anweisung verarbeitet wird.
	
	</apiDesc></apiClassifierDetail><related-links><link href="../../flash/html/HTMLLoader.html"><linktext>HTMLLoader</linktext></link></related-links><adobeApiEvent id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException"><apiName>uncaughtScriptException</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier>flash.events:HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:HTMLUncaughtScriptExceptionEvent:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
		Erstellt ein HTMLUncaughtScriptExceptionEvent-Objekt, das als ein Parameter an Ereignis-Listener übergeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>exceptionValue</apiItemName><apiType value=""/><apiDesc>Wenn ein JavaScript-Prozess eine nicht erfasste Ausnahme ausgibt, ist <codeph>exceptionValue</codeph> das Ergebnis der Ausdrucksevaluierung in der throw-Anweisung, die zu der nicht erfassten Ausnahme geführt hat. Die <codeph>exceptionValue</codeph>-Eigenschaft kann ein Grundwert, ein Verweis auf ein JavaScript-Objekt oder ein Verweis auf ein ActionScript-Objekt sein.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Erstellt ein HTMLUncaughtScriptExceptionEvent-Objekt, das als ein Parameter an Ereignis-Listener übergeben wird.
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:HTMLUncaughtScriptExceptionEvent:clone"><apiName>clone</apiName><shortdesc>
		 
		Erstellt eine Kopie des HTMLUncaughtScriptExceptionEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Die Kopie des HTMLUncaughtScriptExceptionEvent-Objekts.
		
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		Erstellt eine Kopie des HTMLUncaughtScriptExceptionEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION"><apiName>UNCAUGHT_SCRIPT_EXCEPTION</apiName><shortdesc>
		Die Konstante HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION definiert den Wert der type-Eigenschaft eines uncaughtScriptException-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncaughtScriptException</apiData><apiType value=""/></apiValueDef><apiDesc>
		Die Konstante <codeph>HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</codeph> definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>uncaughtScriptException</codeph>-Ereignisobjekts.
		
		 
		 <p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>exceptionValue</codeph></entry><entry>Das Ergebnis der Evaluierung des Ausdrucks in der <codeph>throw</codeph>-Anweisung, der zu der nicht erfassten Ausnahme geführt hat.</entry></row><row><entry><codeph>stackTrace</codeph></entry><entry>Ein Array von Objekten, die den Stack-Trace zu dem Zeitpunkt repräsentieren, an dem die <codeph>throw</codeph>-Anweisung, die zu der nicht erfassten Ausnahme führte, ausgeführt wurde.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das HTMLLoader-Objekt.</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:exceptionValue"><apiName>exceptionValue</apiName><shortdesc>
	Das Ergebnis der Evaluierung des Ausdrucks in der throw-Anweisung, der zu der nicht erfassten Ausnahme geführt hat.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	Das Ergebnis der Evaluierung des Ausdrucks in der throw-Anweisung, der zu der nicht erfassten Ausnahme geführt hat. Die <codeph>exceptionValue</codeph>-Eigenschaft kann ein Grundwert, ein Verweis auf ein JavaScript-Objekt oder ein Verweis auf ein ActionScript-Objekt sein.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:stackTrace:get"><apiName>stackTrace</apiName><shortdesc>
	Ein Array von Objekten, die den Stack-Trace zu dem Zeitpunkt repräsentieren, an dem die throw-Anweisung, die zu der nicht erfassten Ausnahme führte, ausgeführt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	Ein Array von Objekten, die den Stack-Trace zu dem Zeitpunkt repräsentieren, an dem die throw-Anweisung, die zu der nicht erfassten Ausnahme führte, ausgeführt wurde. Jedes Objekt im Array weist drei Eigenschaften auf:
	
	<ul>
	
		<li><codeph>sourceURL</codeph> (ein String): Die URL des Skripts des Call-Stack-Frames.</li>
	
		<li><codeph>line</codeph> (eine Zahl): Die Zeilennummer in der <codeph>sourceURL</codeph>-Ressource des Call-Stack-Frames.</li>
	
		<li><codeph>functionName</codeph> (ein String): Der Name der Funktion für den Call-Stack-Frame.</li>
	
	</ul>
	  	 
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
 Eine SQLErrorEvent-Instanz wird von einer SQLConnection- oder SQLStatement-Instanz ausgelöst, wenn während der Ausführung eines Datenbankvorgangs im asynchronen Modus ein Fehler auftritt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 Eine SQLErrorEvent-Instanz wird von einer SQLConnection- oder SQLStatement-Instanz ausgelöst, wenn während der Ausführung eines Datenbankvorgangs im asynchronen Modus ein Fehler auftritt. Die SQLErrorEvent-Instanz, die als Ereignisobjekt an Listener übergeben wird, ermöglicht den Zugriff auf Informationen über die Ursache des Fehlers und den Vorgang, der ausgeführt werden sollte.
 
 <p>Die spezifischen Details des Fehlers finden sich im SQLError-Objekt der <codeph>error</codeph>-Eigenschaft der SQLErrorEvent-Instanz.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLErrorEvent:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
     Erstellt ein SQLErrorEvent-Objekt, das als Argument an Ereignis-Listener übergeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Typ des Ereignisses, aufrufbar über die <codeph>type</codeph>-Eigenschaft. Das SQLErrorEvent definiert einen Ereignistyp, das <codeph>error</codeph>-Ereignis, das von der <codeph>SQLErrorEvent.ERROR</codeph>-Konstante repräsentiert wird.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Der Standardwert ist <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Der Standardwert ist <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier><apiData>null</apiData><apiDesc>Das SQLError-Objekt, das die Details zum Fehler enthält.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Dient zum Erstellen eines neuen SQLErrorEvent-Objekts.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Erstellt ein SQLErrorEvent-Objekt, das als Argument an Ereignis-Listener übergeben wird.
     
     </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.errors.SQLError;.xml"><linktext>flash.errors.SQLError;</linktext></link><link href="flash.events.xml#SQLErrorEvent/ERROR"><linktext>ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SQLErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine Kopie des SQLErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues SQLErrorEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine Kopie des SQLErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SQLErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	 Gibt einen String zurück, der alle Eigenschaften des SQLErrorEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des SQLErrorEvent-Objekts enthält.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt einen String zurück, der alle Eigenschaften des SQLErrorEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	 
	 <p><codeph>[SQLErrorEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> error=<i>Wert</i>]</codeph></p>
	 
	 <p>Der Fehlerwert hat das folgende Format: <codeph>SQLError : <i>Meldungswert</i> code=<i>Wert</i> operation=<i>Wert</i></codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
     Die SQLErrorEvent.ERROR-Konstante definiert den Wert der type-Eigenschaft eines error-Ereignisses, das ausgelöst wird, wenn ein Aufruf einer Methode einer SQLConnection-Instanz oder einer SQLStatement-Instanz mit einem Fehler beendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLErrorEvent.ERROR</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines error-Ereignisses, das ausgelöst wird, wenn ein Aufruf einer Methode einer SQLConnection-Instanz oder einer SQLStatement-Instanz mit einem Fehler beendet wird. Das <codeph>error</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>error</codeph></entry><entry>Ein SQLError-Objekt, das Informationen über den aufgetretenen Fehlertyp und den Vorgang, der den Fehler ausgelöst hat, enthält.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection- oder SQLStatement-Objekt, dessen Fehlerstatus gemeldet wird.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLErrorEvent:error:get"><apiName>error</apiName><shortdesc>
     Ein SQLError-Objekt, das ausführliche Informationen zur Ursache des Fehlers enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.errors:SQLError</apiValueClassifier></apiValueDef><apiDesc>
     Ein SQLError-Objekt, das ausführliche Informationen zur Ursache des Fehlers enthält.
     
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
Ein Objekt löst ein ErrorEvent-Objekt aus, wenn ein Fehler zum Fehlschlagen eines Netzwerkvorgangs führt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für ErrorEvent-Ereignisse.
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Ein Objekt löst ein ErrorEvent-Objekt aus, wenn ein Fehler zum Fehlschlagen eines Netzwerkvorgangs führt. Es gibt nur einen Typ eines <codeph>error</codeph>-Ereignisses: <codeph>ErrorEvent.ERROR</codeph>.

<p>Die ErrorEvent-Klasse dient auch als Basisklasse für die Klassen AsyncErrorEvent, IOErrorEvent, SecurityErrorEvent und SQLErrorEvent .</p>

<p>Sie können prüfen, ob <codeph>error</codeph>-Ereignisse ohne Listener vorliegen, indem Sie die <ph platform="actionscript">Debugger-Version von Flash Player oder die</ph> AIR Debug Launcher (ADL)-Anwendung verwenden. Die <ph platform="actionscript">Debugger-Version von Flash Player oder die</ph> AIR Debug Launcher (ADL)-Anwendung zeigt diese Ereignisse als Strings an (definiert durch den <codeph>text</codeph>-Parameter des ErrorEvent-Konstruktors).</p>

</apiDesc><example conref="examples\ErrorEventExample.as"> Im folgenden Beispiel wird die Verwendung einer einzelnen Fehlerprozedur (<codeph>errorHandler()</codeph>), die mehrere Arten von Fehlerereignissen erfasst, demonstriert. Wenn ein <codeph>ioError</codeph>-Ereignis eintritt, versucht die Prozedur einen Ladevorgang aus dem Netzwerk. Hierbei wird ein <codeph>securityError</codeph> ausgelöst.
 
 <p><b>Hinweis: </b> Dieses Beispiel funktioniert nicht, wenn sich eine Datei mit dem Namen „MissingFile.xml“ im gleichen Ordner wie die SWF-Datei befindet.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.*;

    public class ErrorEventExample extends Sprite {
        private var loader:URLLoader;
        private var request:URLRequest;
        
        public function ErrorEventExample() {
            loader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);

            request = new URLRequest();
            loadFromFileSystem();
        }
        
        private function loadFromFileSystem():void {
            request.url = "MissingFile.xml";
            loader.load(request);
        }

        private function loadFromNetwork():void {
            request.url = "http://www.[yourDomain].com/MissingFile.xml";
            loader.load(request);
        }
        
        private function errorHandler(event:ErrorEvent):void {
            trace("errorHandler: " + event);
            if(event is IOErrorEvent) {
                loadFromNetwork();
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:ErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:ErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ErrorEvent:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt, das Informationen über Fehlerereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines Fehlerereignisses: <codeph>ErrorEvent.ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt eine Bubbling-Phase durchführt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen. 
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Der als Fehlermeldung anzuzeigende Text. Ereignis-Listener können über die Eigenschaft <codeph>text</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Eine mit dem spezifischen Fehler verknüpfte Referenznummer (wird nur in Adobe AIR unterstützt).
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für ErrorEvent-Objekte.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt, das Informationen über Fehlerereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des ErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues ErrorEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des ErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des ErrorEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des ErrorEvent-Objekts enthält.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des ErrorEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[ErrorEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> text=<i>Wert</i> errorID=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
	Definiert den Wert der Eigenschaft „type“ eines error-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>error</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt, bei dem der Netzwerkvorgang fehlschlägt.</entry></row><row><entry><codeph>text</codeph></entry><entry>Der als Fehlermeldung anzuzeigende Text.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ErrorEvent:errorID:get"><apiName>errorID</apiName><shortdesc>
	Enthält die Verweisnummer, die dem spezifischen Fehler zugeordnet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Enthält die Verweisnummer, die dem spezifischen Fehler zugeordnet ist. Bei einem selbst definierten ErrorEvent-Objekt entspricht diese Nummer dem Wert des im Konstruktor bereitgestellten <codeph>id</codeph>-Parameters. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
 Ein ProgressEvent-Objekt wird ausgelöst, wenn eine Ladevorgang gestartet wurde oder ein Socket Daten empfangen hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für ProgressEvent-Ereignisse.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein ProgressEvent-Objekt wird ausgelöst, wenn eine Ladevorgang gestartet wurde oder ein Socket Daten empfangen hat. Diese Ereignisse werden in der Regel erzeugt, wenn SWF-Dateien, Bilder oder Daten in eine Anwendung geladen werden. Es gibt zwei Arten von Fortschrittsereignissen: <codeph>ProgressEvent.PROGRESS</codeph> und <codeph>ProgressEvent.SOCKET_DATA</codeph>.
 
 </apiDesc><example conref="examples\ProgressEventExample.as"> Im folgenden Beispiel wird anhand der Klasse <codeph>ProgressEventExample</codeph> gezeigt, wie verschiedene Ereignis-Listener beim Herunterladen einer Datei verwendet werden. In diesem Beispiel werden die folgenden Aufgaben ausgeführt:
 <ol>
  <li>Die Eigenschaften <codeph>downloadURL</codeph> und <codeph>fileName</codeph> werden mit dem Speicherort und dem Namen der Download-Datei erstellt.</li>
  <li>Im Konstruktor <codeph>ProgressEventExample</codeph> wird ein neues FileReference-Objekt mit dem Namen <codeph>file</codeph> erstellt, das dann an die <codeph>configureListeners()</codeph>-Methode übergeben wird.</li>
  <li>Die Eigenschaften <codeph>downloadURL</codeph> und <codeph>fileName</codeph> werden an <codeph>file.download()</codeph> übergeben. Diese Methode ermittelt dann den Speicherort für den Download der Datei.</li>
  <li>Die <codeph>configureListeners()</codeph>-Methode fügt sieben Ereignis-Listener und die verknüpften Abonnentenmethoden hinzu:
  <ol outputclass="A">
      <li><codeph>cancel</codeph>/<codeph>cancelHandler()</codeph> wird ausgelöst, wenn das Herunterladen der Datei abgebrochen wird.</li> 
      <li><codeph>complete</codeph>/<codeph>complereHandler()</codeph> wird ausgelöst, wenn das Herunterladen der Dateien abgeschlossen ist.</li> 
      <li><codeph>ioError</codeph>/<codeph>ioErrorHandler()</codeph> wird ausgelöst, wenn die Download-Datei nicht verfügbar oder unzugänglich ist.</li> 
      <li><codeph>open</codeph>/<codeph>openHandler()</codeph>wird nach Beginn des Download-Vorgangs ausgelöst.</li> 
      <li><codeph>progress</codeph>/<codeph>progressHandler()</codeph> wird beim Beginn und beim Ende des Download-Vorgangs ausgelöst.</li> 
      <li><codeph>securityError</codeph>/<codeph>securityErrorHandler</codeph> wird ausgelöst, wenn die lokalen Sicherheitseinstellungen für die Wiedergabe nicht mit der Art des Datenzugriffs für die Download-Datei übereinstimmen (lokaler Zugriff bzw. Netzwerkzugriff). Siehe Hinweise unten.</li> 
      <li><codeph>select</codeph>/<codeph>selectHandler()</codeph> wird bei Auswahl des Download-Objekts ausgelöst.</li> 
  </ol>
  </li>
 </ol>
 <p> <b>Hinweise:</b>
 <ul>
  <li>Für die Kompilierung der SWF-Datei müssen Sie die Option „Sicherheit bei lokaler Wiedergabe“ auf „Nur auf Netzwerk zugreifen“ einstellen.</li>
  <li>Bei diesem Beispiel ist die Datei SomeFile.pdf erforderlich.</li> 
  <li>Obwohl in diesem Beispiel alle verfügbaren Ereignisse des FileReference-Objekts verwendet werden, ist in den meisten Situationen nur ein Teil davon erforderlich.</li>
 </ul>
 </p>
 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class ProgressEventExample extends Sprite {
        private var downloadURL:String = "http://www.[yourDomain].com/SomeFile.pdf";
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function ProgressEventExample() {
            var request:URLRequest = new URLRequest(downloadURL);
            file = new FileReference();
            configureListeners(file);
            file.download(request, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.filesystem.xml"><linktext>FileStream-Klasse</linktext></link><link href="flash.display.xml#LoaderInfo"><linktext>LoaderInfo-Klasse</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket-Klasse</linktext></link></related-links><adobeApiEvent id="flash.events:ProgressEvent:PROGRESS_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ProgressEvent:SOCKET_DATA_socketData"><apiName>socketData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:SOCKET_DATA</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ProgressEvent:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt, das Informationen über progress-Ereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Folgende Werte sind möglich:<codeph>ProgressEvent.PROGRESS</codeph> und <codeph>ProgressEvent.SOCKET_DATA</codeph>.
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. 
	</apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Die Anzahl der geladenen Elemente oder Byte zu dem Zeitpunkt, zu dem der Listener das Ereignis verarbeitet.
	</apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Die Gesamtanzahl der Elemente oder Byte, die bei einem erfolgreichen Ladevorgang geladen werden.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für <codeph>ProgressEvent</codeph>-Objekte.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt, das Informationen über progress-Ereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ProgressEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des ProgressEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues ProgressEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des ProgressEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ProgressEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des ProgressEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des <codeph>ProgressEvent</codeph>-Objekts enthält.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des ProgressEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[ProgressEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> bytesLoaded=<i>Wert</i> bytesTotal=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ProgressEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
	Definiert den Wert der Eigenschaft „type“ eines progress-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>progress</codeph>-Ereignisobjekts.
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>Die Anzahl der geladenen Elemente oder Byte zu dem Zeitpunkt, zu dem der Listener das Ereignis verarbeitet.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>Die Gesamtanzahl der Elemente oder Byte, die bei einem erfolgreichen Ladevorgang schließlich geladen werden.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt, dessen Fortschritt protokolliert wird. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:SOCKET_DATA"><apiName>SOCKET_DATA</apiName><shortdesc>
	Definiert den Wert der Eigenschaft „type“ eines socketData-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>socketData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>socketData</codeph>-Ereignisobjekts.
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	     
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, das das Ereignis aktiv verarbeitet.</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>Die Anzahl der geladenen Elemente oder Byte zu dem Zeitpunkt, zu dem der Listener das Ereignis verarbeitet.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>0. Diese Eigenschaft wird von <codeph>socketData</codeph>-Ereignisobjekten nicht verwendet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Socket-Objekt, dessen Fortschritt protokolliert wird.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
	Die Anzahl der geladenen Elemente oder Bytes zu dem Zeitpunkt, zu dem der Listener das Ereignis verarbeitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Die Anzahl der geladenen Elemente oder Bytes zu dem Zeitpunkt, zu dem der Listener das Ereignis verarbeitet.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
	Die Gesamtanzahl der Elemente oder Byte, die bei einem erfolgreichen Ladevorgang geladen werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Die Gesamtanzahl der Elemente oder Byte, die bei einem erfolgreichen Ladevorgang geladen werden. Wenn das Fortschrittsereignis ausgelöst oder einem Socket-Objekt hinzugefügt wird, ist der Wert von bytesTotal immer 0, falls nicht im bytesTotal-Parameter des Konstruktors ein Wert angegeben wird. Die tatsächliche Anzahl der Byte, die zurück order vorwärts gesendet werden, wird nicht festgelegt und ist Sache des Anwendungsentwicklers.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
	 Ein ShaderEvent wird ausgelöst, wenn ein von einem ShaderJob gestarteter Shadervorgang beendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Ein ShaderEvent wird ausgelöst, wenn ein von einem ShaderJob gestarteter Shadervorgang beendet wird.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#ShaderJob"><linktext>flash.display.ShaderJob</linktext></link></related-links><adobeApiEvent id="flash.events:ShaderEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ShaderEvent:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:ShaderEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ShaderEvent:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
		 Erstellt ein ShaderEvent-Objekt, das an Ereignis-Listener übergeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses, verfügbar in der <codeph>type</codeph>-Eigenschaft.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Der Standardwert ist <codeph>false</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Der Standardwert ist <codeph>false</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bitmap</apiItemName><apiOperationClassifier>flash.display:BitmapData</apiOperationClassifier><apiData>null</apiData><apiDesc>Das BitmapData-Objekt, das das Ergebnis des beendeten Vorgangs enthält (oder <codeph>null</codeph>, wenn das Ziel kein BitmapData-Objekt war).
		 
		 </apiDesc></apiParam><apiParam><apiItemName>array</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>Das ByteArray-Objekt, das das Ergebnis des beendeten Vorgangs enthält (oder <codeph>null</codeph>, wenn das Ziel kein ByteArray-Objekt war).
		 
		 </apiDesc></apiParam><apiParam><apiItemName>vector</apiItemName><apiType value="Vector$Number"/><apiData>null</apiData><apiDesc>Die Vector.&lt;Number>-Instanz, die das Ergebnis des beendeten Vorgangs enthält (oder <codeph>null</codeph>, wenn das Ziel keine Vector.&lt;Number>-Instanz) war.
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Erstellt ein ShaderEvent-Objekt, das an Ereignis-Listener übergeben wird.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ShaderEvent:clone"><apiName>clone</apiName><shortdesc>
		 Erstellt eine Kopie des ShaderEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues ShaderEvent-Objekt mit Eigenschaftswerten, die den Werten des Originals entsprechen.
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Erstellt eine Kopie des ShaderEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ShaderEvent:toString"><apiName>toString</apiName><shortdesc>
		 Gibt einen String zurück, der alle Eigenschaften des ShaderEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des ShaderEvent-Objekts enthält.
		 
		 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Gibt einen String zurück, der alle Eigenschaften des ShaderEvent-Objekts enthält. Der String liegt im folgenden Format vor:
		 
		 <p><codeph>[ShaderEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> eventPhase=<i>Wert</i> bitmapData=<i>Wert</i> byteArray=<i>Wert</i> vector=<i>Wert</i>]</codeph></p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ShaderEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
		 Definiert den Wert der Eigenschaft „type“ eines complete-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>complete</codeph>-Ereignisobjekts.
		 
		 <p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		     
		      
		  <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bitmapData</codeph></entry><entry>Das BitmapData-Objekt, das das Ergebnis des beendeten Vorgangs enthält (oder <codeph>null</codeph>, wenn das Ziel kein BitmapData-Objekt war).</entry></row><row><entry><codeph>byteArray</codeph></entry><entry>Das ByteArray-Objekt, das das Ergebnis des beendeten Vorgangs enthält (oder <codeph>null</codeph>, wenn das Ziel kein ByteArray-Objekt war).</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das ShaderJob-Objekt, dessen Fertigstellung protokolliert wird.</entry></row><row><entry><codeph>vector</codeph></entry><entry>Die Vector.&lt;Number>-Instanz, die das Ergebnis des beendeten Vorgangs enthält (oder <codeph>null</codeph>, wenn das Ziel keine Vector.&lt;Number>-Instanz) war.</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:bitmapData:get"><apiName>bitmapData</apiName><shortdesc>
		 Das BitmapData-Objekt, das an die ShaderJob.start()-Methode übergeben wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:BitmapData</apiValueClassifier></apiValueDef><apiDesc>
		 Das BitmapData-Objekt, das an die <codeph>ShaderJob.start()</codeph>-Methode übergeben wurde. Wenn ein ByteArray oder Vector.&lt;Number> an die <codeph>start()</codeph>-Methode übergeben wurde, ist diese Eigenschaft <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:byteArray:get"><apiName>byteArray</apiName><shortdesc>
		 
		 Das ByteArray-Objekt, das an die ShaderJob.start()-Methode übergeben wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 
		 Das ByteArray-Objekt, das an die <codeph>ShaderJob.start()</codeph>-Methode übergeben wurde. Wenn ein BitmapData- oder Vector.&lt;Number>-Objekt an die <codeph>start()</codeph>-Methode übergeben wurde, ist diese Eigenschaft <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:vector:get"><apiName>vector</apiName><shortdesc>
		 
         Das Vector.&lt;Number>-Objekt, das an die ShaderJob.start()-Methode übergeben wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Number"/></apiValueDef><apiDesc>
		 
         Das Vector.&lt;Number>-Objekt, das an die <codeph>ShaderJob.start()</codeph>-Methode übergeben wurde. Wenn ein BitmapData- oder ByteArray-Objekt an die <codeph>start()</codeph>-Methode übergeben wurde, ist diese Eigenschaft <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
 Native Ziehereignisse werden von den interaktiven Objekten ausgelöst, die an einem Ziehen-und-Ablegen-Vorgang beteiligt sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 Native Ziehereignisse werden von den interaktiven Objekten ausgelöst, die an einem Ziehen-und-Ablegen-Vorgang beteiligt sind.
 
 <p>Das initiierende Objekt löst folgende Ereignisse aus:</p> 
 <ul>
    <li><codeph>nativeDragStart</codeph>: Zu Beginn des Ziehvorgangs.</li>
    <li><codeph>nativeDragUpdate</codeph>: Während des Ziehvorgangs.</li>
    <li><codeph>nativeDragComplete</codeph>: Wenn der Benutzer das gezogene Element loslässt (egal, ob das Ablegen akzeptiert wurde oder nicht).</li>
 </ul>
 
 <p>Das initiierende Objekt ist das interaktive Objekt, das im Aufruf von <codeph>NativeDragManager.doDrag()</codeph>, mit dem der Ziehvorgang beginnt, an das NativeDragManager-Objekt übergeben wird.</p>
 
 <p>Potenzielle interaktive Zielobjekte lösen folgende Ereignisse aus:</p>
 <ul>
    <li><codeph>nativeDragEnter</codeph>: Wenn sich die Ziehbewegung über die Objektgrenzen auf das Objekt bewegt.</li>
    <li><codeph>nativeDragOver</codeph>: Wenn die Ziehbewegung innerhalb der Objektgrenzen verbleibt.</li>
    <li><codeph>nativeDragExit</codeph>: Wenn die Ziehbewegung die Objektgrenzen verlässt.</li>
    <li><codeph>nativeDragDrop</codeph>: Wenn der Benutzer das gezogene Element über dem Objekt loslässt und das Objekt das Ablegen durch einen früheren Aufruf von <codeph>NativeDragManager.acceptDragDrop()</codeph> akzeptiert hat.</li>
 </ul>
 
 <p>Normalerweise evaluiert die Prozedur für das <codeph>nativeDragEnter</codeph>- oder <codeph>nativeDragOver</codeph>-Ereignis die gezogenen Daten zusammen mit den zulässigen Ziehaktionen, um festzustellen, ob ein interaktives Objekt das Ablegen akzeptieren kann. Um festzulegen, dass ein interaktives Objekt ein gültiges Ziel ist, muss die Ereignisprozedur die <codeph>NativeDragManager.acceptDrop()</codeph>-Funktion aufrufen, die einen Verweis an das Objekt übergibt. Wenn der Benutzer die Maustaste über dem vorgesehenen Objekt loslässt, wird dieses zum Ablageziel und löst das <codeph>nativeDragDrop</codeph>-Ereignis aus.</p>
 
 <p>Jedes Objekt vom Typ InteractiveObject kann ein Ziehinitiator oder ein Ablageziel sein.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#NativeDragManager"><linktext>flash.desktop.NativeDragManager</linktext></link><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link><link href="flash.display.xml#InteractiveObject"><linktext>flash.display.InteractiveObject</linktext></link></related-links><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE_nativeDragComplete"><apiName>nativeDragComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP_nativeDragDrop"><apiName>nativeDragDrop</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_DROP</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER_nativeDragEnter"><apiName>nativeDragEnter</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_ENTER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT_nativeDragExit"><apiName>nativeDragExit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_EXIT</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER_nativeDragOver"><apiName>nativeDragOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_OVER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_START_nativeDragStart"><apiName>nativeDragStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_START</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE_nativeDragUpdate"><apiName>nativeDragUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeDragEvent:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
    Erstellt ein Event-Objekt mit spezifischen Informationen, die für native Ziehen-und-Ablegen-Ereignisse relevant sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Folgende Werte sind möglich: <codeph>NativeDragEvent.NATIVE_DRAG_START</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_UPDATE</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_ENTER</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_OVER</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_EXIT</codeph>, <codeph>NativeDragEvent.NATIVE_DRAG_DROP</codeph> und <codeph>NativeDragEvent.NATIVE_DRAG_COMPLETE</codeph>.
	
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs beteiligt ist.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Gibt an, ob das Ereignisobjekt abgebrochen werden kann.
	</apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Die horizontale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.
	</apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Die vertikale Koordinate, an der das Ereignis aufgetreten ist, in Relation zum umgebenden Sprite.
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Das entsprechende interaktive Anzeigeobjekt. 
    </apiDesc></apiParam><apiParam><apiItemName>clipboard</apiItemName><apiOperationClassifier>flash.desktop:Clipboard</apiOperationClassifier><apiData>null</apiData><apiDesc>Das Clipboard-Objekt mit den zu übertragenden Daten.
    </apiDesc></apiParam><apiParam><apiItemName>allowedActions</apiItemName><apiOperationClassifier>flash.desktop:NativeDragOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>Das NativeDragOptions-Objekt, das die zulässigen Aktionen definiert (verschieben, kopieren und verknüpfen).
    </apiDesc></apiParam><apiParam><apiItemName>dropAction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Die aktuelle Aktion.
    
 	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Strg-Taste aktiviert ist.
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Alt-Taste aktiviert ist.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Umschalttaste aktiviert ist.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Befehlstaste aktiviert ist.
	
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Erstellt ein Event-Objekt mit spezifischen Informationen, die für native Ziehen-und-Ablegen-Ereignisse relevant sind.
    
	<p>Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben. Das Auslösen eines Ziehereignisses löst nicht das zugehörige Verhalten aus.</p>
	
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeDragEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie dieses NativeDragEvent-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues NativeDragEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie dieses NativeDragEvent-Objekts.
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeDragEvent:toString"><apiName>toString</apiName><shortdesc>
	 Formatiert die Eigenschaften dieses NativeDragEvent-Objekts als ein String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Die Eigenschaften dieses NativeDragEvent-Objekts als ein String.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Formatiert die Eigenschaften dieses NativeDragEvent-Objekts als ein String.
	 
	 <p>Der String liegt im folgenden Format vor:</p>
	 <p><codeph>[NativeDragEvent type=Wert bubbles=Wert cancelable=Wert ... commandKey=Wert]</codeph></p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE"><apiName>NATIVE_DRAG_COMPLETE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE definiert den Wert der type-Eigenschaft eines nativeDragComplete-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>nativeDragComplete</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Das NativeDragOptions-Objekt, das die für diesen Ziehvorgang relevanten Aktionen angibt.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Das Clipboard-Objekt, das die gezogenen Daten enthält. </entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Die vom Ablageziel gewählte Aktion (oder <codeph>none</codeph>, wenn keine Aktion festgelegt wurde).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP"><apiName>NATIVE_DRAG_DROP</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_DROP definiert den Wert der type-Eigenschaft eines nativeDragDrop-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragDrop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_DROP definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>nativeDragDrop</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Das NativeDragOptions-Objekt, das die für diesen Ziehvorgang relevanten Aktionen angibt.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; das Abbrechen dieses Ereignisses bricht den Ziehvorgang ab.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Das Clipboard-Objekt, das die gezogenen Daten enthält. Die Zwischenablage kann auch gelesen werden, wenn das Objekt, das dieses Ereignis auslöst, sich nicht in derselben Sicherheitsdomäne wie der Initiator befindet.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Die vom Ablageziel gewählte Aktion (oder <codeph>none</codeph>, wenn keine Aktion festgelegt wurde).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER"><apiName>NATIVE_DRAG_ENTER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_ENTER definiert den Wert der type-Eigenschaft eines nativeDragEnter-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragEnter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_ENTER definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>nativeDragEnter</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Das NativeDragOptions-Objekt, das die für diesen Ziehvorgang relevanten Aktionen angibt.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Das Clipboard-Objekt, das die gezogenen Daten enthält. Die Zwischenablage kann nur gelesen werden, wenn das Objekt, das dieses Ereignis auslöst, sich in derselben Sicherheitsdomäne wie der Initiator befindet.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Die vom Ablageziel gewählte Aktion (oder <codeph>none</codeph>, wenn keine Aktion festgelegt wurde).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT"><apiName>NATIVE_DRAG_EXIT</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_EXIT definiert den Wert der type-Eigenschaft eines nativeDragExit-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragExit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_EXIT definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>nativeDragExit</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Das NativeDragOptions-Objekt, das die für diesen Ziehvorgang relevanten Aktionen angibt.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Das Clipboard-Objekt, das die gezogenen Daten enthält. Die Zwischenablage kann nur gelesen werden, wenn das Objekt, das dieses Ereignis auslöst, sich in derselben Sicherheitsdomäne wie der Initiator befindet.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Die vom Ablageziel gewählte Aktion (oder <codeph>none</codeph>, wenn keine Aktion festgelegt wurde).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER"><apiName>NATIVE_DRAG_OVER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_OVER definiert den Wert der type-Eigenschaft eines nativeDragOver-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_OVER definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>nativeDragOver</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Das NativeDragOptions-Objekt, das die für diesen Ziehvorgang relevanten Aktionen angibt.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; das Abbrechen dieses Ereignisses bricht den Ziehvorgang ab.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Das Clipboard-Objekt, das die gezogenen Daten enthält. Die Zwischenablage kann nur gelesen werden, wenn das Objekt, das dieses Ereignis auslöst, sich in derselben Sicherheitsdomäne wie der Initiator befindet.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Die vom Ablageziel gewählte Aktion (oder <codeph>none</codeph>, wenn keine Aktion festgelegt wurde).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_START"><apiName>NATIVE_DRAG_START</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_START definiert den Wert der type-Eigenschaft eines nativeDragStart-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragStart</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_START definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>nativeDragStart</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Das NativeDragOptions-Objekt, das die für diesen Ziehvorgang relevanten Aktionen angibt.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; das Abbrechen dieses Ereignisses bricht den Ziehvorgang ab.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Das Clipboard-Objekt, das die gezogenen Daten enthält. </entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Die vom Ablageziel gewählte Aktion (oder <codeph>none</codeph>, wenn keine Aktion festgelegt wurde).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE"><apiName>NATIVE_DRAG_UPDATE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE definiert den Wert der type-Eigenschaft eines nativeDragUpdate-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragUpdate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>nativeDragUpdate</codeph>-Ereignisobjekts.
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>Das NativeDragOptions-Objekt, das die für diesen Ziehvorgang relevanten Aktionen angibt.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>Das Clipboard-Objekt, das die gezogenen Daten enthält. </entry></row><row><entry><codeph>dropAction</codeph></entry><entry>Die vom Ablageziel gewählte Aktion (oder <codeph>none</codeph>, wenn keine Aktion festgelegt wurde).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:allowedActions"><apiName>allowedActions</apiName><shortdesc>
	Das NativeDragOptions-Objekt, das die Aktionen festlegt, die vom Anzeigeobjekt, das diesen Ziehvorgang eingeleitet hat, zugelassen sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:NativeDragOptions</apiValueClassifier></apiValueDef><apiDesc>
	Das NativeDragOptions-Objekt, das die Aktionen festlegt, die vom Anzeigeobjekt, das diesen Ziehvorgang eingeleitet hat, zugelassen sind.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:clipboard"><apiName>clipboard</apiName><shortdesc>
	 Das Clipboard-Objekt, das in diesem Ziehvorgang die Daten enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:Clipboard</apiValueClassifier></apiValueDef><apiDesc>
	 Das Clipboard-Objekt, das in diesem Ziehvorgang die Daten enthält.
	 
	 <p>Wenn sich das Objekt, das das Ereignis auslöst, nicht in derselben Sicherheitsdomäne befindet wie das initiierende Objekt, kann die Zwischenablage nur in der Prozedur für ein <codeph>nativeDragDrop</codeph>-Ereignis gelesen werden.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:dropAction"><apiName>dropAction</apiName><shortdesc>
	Die aktuelle Aktion.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die aktuelle Aktion. Im <codeph>nativeDragComplete</codeph>-Ereignis protokolliert die <codeph>dropAction</codeph>-Eigenschaft die endgültige Aktion. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
	 Der DRMManager löst ein DRMAuthenticationCompleteEvent-Objekt aus, wenn der Aufruf der authenticate()-Methode des DRMManager-Objekts erfolgreich ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Der DRMManager löst ein DRMAuthenticationCompleteEvent-Objekt aus, wenn der Aufruf der <codeph>authenticate()</codeph>-Methode des DRMManager-Objekts erfolgreich ist.
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationCompleteEvent:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
		 Erstellt eine neue Instanz eines DRMAuthenticationCompleteEvent-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>der Ereignistypstring
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>ob das Ereignis in der Anzeigeliste fortgesetzt wird
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>ob das Ereignis abgebrochen werden kann
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>die URL des angemeldeten Servers
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>die authentifizierte Domäne des angemeldeten Servers
		 </apiDesc></apiParam><apiParam><apiItemName>inToken</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>das Authentifizierungstoken
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Erstellt eine neue Instanz eines DRMAuthenticationCompleteEvent-Objekts.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticationCompleteEvent:clone"><apiName>clone</apiName><shortdesc> 
	 Dupliziert eine Instanz einer Event-Unterklasse.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein mit dem Original identisches neues Ereignisobjekt.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
	 Dupliziert eine Instanz einer Event-Unterklasse.
	 
     <p>Gibt ein neues Ereignisobjekt zurück, das eine Kopie der ursprünglichen Instanz des Ereignisobjekts ist. Normalerweise rufen Sie <codeph>clone()</codeph> nicht auf; es wird automatisch von der EventDispatcher-Klasse aufgerufen, wenn Sie ein Ereignis neu auslösen, das heißt, wenn Sie <codeph>dispatchEvent(event)</codeph> von einer Prozedur aus aufrufen, die <codeph>event</codeph> verarbeitet.</p>
	 
	 <p>Das neue Ereignisobjekt übernimmt alle Eigenschaften des Originals.</p> 
	 
	 <p platform="actionscript">Wenn Sie Ihre eigene benutzerdefinierte Event-Klasse erstellen, müssen Sie die übernommene <codeph>Event.clone()</codeph>-Methode außer Kraft setzen, um die Eigenschaften Ihrer benutzerdefinierten Klasse zu duplizieren. Wenn Sie nicht alle der Ereignis-Unterklasse hinzugefügten Eigenschaften eingestellt haben, weisen sie nicht die korrekten Werte auf, wenn Listener das neu ausgelöste Ereignis verarbeiten.</p>
	 
	 <p platform="actionscript">In dem folgenden Beispiel ist <codeph>PingEvent</codeph> eine Unterklasse von <codeph>Event</codeph> und implementiert aus diesem Grund eine eigene Version von <codeph>clone()</codeph>.</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticationCompleteEvent:AUTHENTICATION_COMPLETE"><apiName>AUTHENTICATION_COMPLETE</apiName><shortdesc>
		 Die Stringkonstante im Typparameter beim Hinzufügen und Entfernen von Ereignis-Listenern für das Ereignis bei abgeschlossener Authentifizierung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>authenticationComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Die Stringkonstante im Typparameter beim Hinzufügen und Entfernen von Ereignis-Listenern für das Ereignis bei abgeschlossener Authentifizierung.
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:domain:set"><apiName>domain</apiName><shortdesc>
		 Die Inhaltsdomäne des Medienrechteservers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Die Inhaltsdomäne des Medienrechteservers. (Keine Netzwerk- oder Internetdomänenname.)
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:serverURL:set"><apiName>serverURL</apiName><shortdesc>
		 Die URL des Medienrechteservers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Die URL des Medienrechteservers.
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:token:set"><apiName>token</apiName><shortdesc>
		 Das Authentifizierungstoken.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 Das Authentifizierungstoken.
		 
		 <p>Die Authentifizierung wird dem Sitzungscache von DRMManager automatisch hinzugefügt. Sie können das Token speichern und zur Authentifizierung des Benutzers in künftigen Sitzungen verwenden. Verwenden Sie ein Token mit der <codeph>setAuthenticationToken()</codeph>-Methode von DRMManager wieder. Die Gültigkeitsdauer des Tokens sowie andere Eigenschaften werden vom Server, der das Token generiert, bestimmt.</p>
		   
		 </apiDesc></apiValueDetail><related-links><link href="flash.net.drm.xml#DRMManager/setAuthenticationToken()"><linktext>flash.net.drm.DRMManager.setAuthenticationToken()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
 Ein IMEEvent-Objekt wird ausgelöst, wenn der Benutzer Text über einen Eingabemethoden-Editor (IME) eingibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\IMEEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für IMEEvent-Ereignisse.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein IMEEvent-Objekt wird ausgelöst, wenn der Benutzer Text über einen Eingabemethoden-Editor (IME) eingibt. IMEs werden in der Regel zur Eingabe von Text für Sprachen mit Ideogrammen anstelle von Buchstaben verwendet, beispielsweise Japanisch, Chinesisch und Koreanisch. Es gibt nur ein IME-Ereignis: <codeph>IMEEvent.IME_COMPOSITION</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links><adobeApiEvent id="flash.events:IMEEvent:IME_COMPOSITION_imeComposition"><apiName>imeComposition</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IMEEvent:IME_COMPOSITION</apiEventType><adobeApiEventClassifier>flash.events:IMEEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IMEEvent:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
	 Erstellt ein Ereignisobjekt mit bestimmten Informationen, die für IME-Ereignisse wichtig sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur ein IME-Ereignis: <codeph>IMEEvent.IME_COMPOSITION</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen. 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Die vom IME gelesene Zeichenfolge. Dies ist die Originalzeichenfolge, so wie sie vom Benutzer eingegeben wurde, vor der Auswahl eines Kandidaten. Die endgültig zusammengesetzte Zeichenfolge wird in einem <codeph>TextEvent.TEXT_INPUT</codeph>-Ereignis an das Objekt mit dem Tastaturfokus gesendet. Ereignis-Listener können über die Eigenschaft <codeph>text</codeph> auf diese Informationen zugreifen.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für IMEEvent-Objekte.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Erstellt ein Ereignisobjekt mit bestimmten Informationen, die für IME-Ereignisse wichtig sind. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IMEEvent:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine Kopie des IMEEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues IMEEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen. 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine Kopie des IMEEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IMEEvent:toString"><apiName>toString</apiName><shortdesc>
	 Gibt eine Zeichenfolge zurück, die alle Eigenschaften des IMEEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des IMEEvent-Objekts enthält.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt eine Zeichenfolge zurück, die alle Eigenschaften des IMEEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	 <p><codeph>[IMEEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> text=<i>Wert</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IMEEvent:IME_COMPOSITION"><apiName>IME_COMPOSITION</apiName><shortdesc>
	 Definiert den Wert der Eigenschaft type eines imeComposition-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeComposition</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>imeComposition</codeph>-Ereignisobjekts. 
	 <p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das IME-Objekt.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DataEvent"><apiName>DataEvent</apiName><shortdesc>
Ein Objekt löst ein DataEvent-Objekt aus, wenn Grunddaten fertig geladen wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für DataEvent-Ereignisse.

</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Ein Objekt löst ein DataEvent-Objekt aus, wenn Grunddaten fertig geladen wurden. Es gibt zwei Arten von Datenereignissen: 
<ul><li><codeph>DataEvent.DATA</codeph>: wird bei gesendeten oder empfangenen Daten ausgelöst.</li>
<li><codeph>DataEvent.UPLOAD_COMPLETE_DATA</codeph>: wird bei gesendeten Daten oder bei Antwort des Servers ausgelöst.</li></ul>

</apiDesc><example conref="examples\DataEventExample.as"> Im folgenden Beispiel wird ein XMLSocket erstellt und eine Verbindung mit einem Socket-Server an Port 8080 von <codeph>yourDomain</codeph> hergestellt. Dem XMLSocket-Objekt wird ein Ereignis-Listener zugewiesen, der auf <codeph>data</codeph>-Ereignisse wartet. Diese Ereignisse werden beim Empfang von unformatierten Daten ausgelöst.
 
 <p> <b>Hinweise:</b> 
 <ul>
    <li>Um in diesem Beispiel ein <codeph>securityError</codeph>-Ereignis zu generieren, müssen Sie „Sicherheit bei lokaler Wiedergabe“ auf „Nur auf Netzwerk zugreifen“ setzen, um die SWF-Datei zu kompilieren.</li>
    <li>Sie benötigen einen Server, der auf [ <codeph>yourDomain</codeph> ] ausgeführt wird und über Port 8080 angeschlossen ist.</li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.DataEvent;
    import flash.net.XMLSocket;

    public class DataEventExample extends Sprite {
        private var hostName:String = "[yourDomain]";
        private var port:uint = 8080;
        private var socket:XMLSocket;

        public function DataEventExample() {
            socket = new XMLSocket();
            socket.addEventListener(DataEvent.DATA, dataHandler);
            socket.connect(hostName, port);
        }

        private function dataHandler(event:DataEvent):void {
            trace("dataHandler: " + event.data);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#FileReference"><linktext>flash.net.FileReference</linktext></link><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link></related-links><adobeApiEvent id="flash.events:DataEvent:DATA_data"><apiName>data</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA_uploadCompleteData"><apiName>uploadCompleteData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:UPLOAD_COMPLETE_DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DataEvent:DataEvent"><apiName>DataEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt, das Informationen über Datenereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines Datenereignisses: <codeph>DataEvent.DATA</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Die in Flash Player oder Adobe AIR geladenen Grunddaten. Ereignis-Listener können über die Eigenschaft <codeph>data</codeph> auf diese Informationen zugreifen.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für DataEvent-Objekte.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt, das Informationen über Datenereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link><link href="flash.events.xml#DataEvent/DATA"><linktext>DataEvent.DATA</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:DataEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des DataEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues DataEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des DataEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DataEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des DataEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des DataEvent-Objekts enthält.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des DataEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[DataEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> data=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DataEvent:DATA"><apiName>DATA</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines Datenereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>data</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>data</codeph>-Ereignisobjekts.  
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>data</codeph></entry><entry>Die in Flash Player oder Adobe AIR geladenen Grunddaten. </entry></row><row><entry><codeph>target</codeph></entry><entry>Das XMLSocket-Objekt, das Daten empfängt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA"><apiName>UPLOAD_COMPLETE_DATA</apiName><shortdesc>
	Definiert den Wert der Eigenschaft type eines uploadCompleteData-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uploadCompleteData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>uploadCompleteData</codeph>-Ereignisobjekts.
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>data</codeph></entry><entry>Die unformatierten Daten, die nach einem erfolgreichen Datei-Upload vom Server zurückgegeben werden.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das FileReference-Objekt, das nach einem erfolgreichen Upload Daten empfängt.</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:data:get"><apiName>data</apiName><shortdesc>
	Die in Flash Player oder Adobe AIR geladenen Grunddaten. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die in Flash Player oder Adobe AIR geladenen Grunddaten. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
Ein Objekt löst ein SecurityErrorEvent-Objekt aus, um das Auftreten eines Sicherheitsfehlers zu melden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für SecurityErrorEvent-Ereignisse.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Ein Objekt löst ein SecurityErrorEvent-Objekt aus, um das Auftreten eines Sicherheitsfehlers zu melden. Sicherheitsfehler, die über diese Klasse gemeldet werden, werden im Allgemeinen von asynchronen Vorgängen erzeugt, z. B. dem Laden von Daten, in denen Sicherheitsverletzungen nicht sofort festgestellt werden können. Ihr Ereignis-Listener kann auf die Eigenschaft <codeph>text</codeph> eines Objekts zugreifen, um festzustellen, welche Operation versucht wurde und welche URLs involviert waren. Gibt es keine Ereignis-Listener, zeigt <ph platform="actionscript">die Debugger-Version von Flash Player oder </ph>die AIR Debug Launcher (ADL)-Anwendung automatisch eine Fehlermeldung mit dem Inhalt der <codeph>text</codeph>-Eigenschaft an. Es gibt nur einen Typ eines Sicherheitsfehler-Ereignisses: <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph>.

<p>Sicherheitsfehler-Ereignisse sind finale Ereignisse, die von einem beliebigen Zielobjekt gesendet werden können. Dies bedeutet, dass andere Ereignisse, einschließlich generischer Fehlerereignisse, nicht für ein Zielobjekt gesendet werden, bei dem ein Sicherheitsfehler auftritt.</p>

</apiDesc><example conref="examples\SecurityErrorEventExample.as"> Im folgenden Beispiel wird anhand der Klasse <codeph>SecurityErrorEventExample</codeph> erläutert, wie die Listener-Methode <codeph>securityErrorHandler()</codeph> instanziiert und für auszulösende <codeph>securityError</codeph>-Ereignisse konfiguriert werden kann. Dieses Ereignis tritt ein, wenn sich ein <codeph>URLRequest</codeph>-Speicherort nicht in genau der gleichen Domäne wie die aufrufende SWF-Datei befindet und in der angeforderten Domäne kein domänenübergreifender Zugriff über eine entsprechende Richtliniendatei eingerichtet ist.
 <p>Ersetzen Sie zur Erstellung eines <codeph>SecurityErrorEvent</codeph> die Adresse <codeph>http://www.[yourdomain].com</codeph> durch einen Pfad, für den kein domänenübergreifender Zugriff eingerichtet wurde.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.SecurityErrorEvent;

    public class SecurityErrorEventExample extends Sprite {
        public function SecurityErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com");
            loader.load(request);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.system.xml#Security"><linktext>Security-Klasse</linktext></link><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:SecurityErrorEvent:SECURITY_ERROR_securityError"><apiName>securityError</apiName><prolog><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SecurityErrorEvent:SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SecurityErrorEvent:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
	Erstellt ein Event-Objekt, das Informationen über Sicherheitsfehler-Ereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines Fehlerereignisses: <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Der als Fehlermeldung anzuzeigende Text. Ereignis-Listener können über die <codeph>text</codeph>-Eigenschaft auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Eine Verweisnummer, die dem spezifischen Fehler zugeordnet ist. 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für SecurityErrorEvent-Objekte.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Event-Objekt, das Informationen über Sicherheitsfehler-Ereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SecurityErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des SecurityErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues securityErrorEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des SecurityErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SecurityErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des SecurityErrorEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des SecurityErrorEvent-Objekts enthält.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des SecurityErrorEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[securityErrorEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> text=<i>Wert</i> errorID=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SecurityErrorEvent:SECURITY_ERROR"><apiName>SECURITY_ERROR</apiName><shortdesc>
	Die Konstante SecurityErrorEvent.SECURITY_ERROR definiert den Wert der type-Eigenschaft eines securityError-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>securityError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die Konstante <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph> definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>securityError</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Netzwerkobjekt, das den Sicherheitsfehler ausgibt.</entry></row><row><entry><codeph>text</codeph></entry><entry>Der als Fehlermeldung anzuzeigende Text.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:TextEvent"><apiName>TextEvent</apiName><shortdesc>
 Ein Objekt sendet ein TextEvent-Objekt, wenn ein Benutzer Text in ein Textfeld eingibt oder auf einen Hyperlink in einem HTML-konformen Textfeld klickt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für TextEvent-Ereignisse.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein Objekt sendet ein TextEvent-Objekt, wenn ein Benutzer Text in ein Textfeld eingibt oder auf einen Hyperlink in einem HTML-konformen Textfeld klickt. Es gibt zwei Arten von Textereignissen: <codeph>TextEvent.LINK</codeph> und <codeph>TextEvent.TEXT_INPUT</codeph>.
 
 </apiDesc><example conref="examples\TextEventExample.as"> Im folgenden Beispiel werden mit der Klasse „TextEventExample“ Textfelder erstellt und Listener für verschiedene Textereignisse in diesen Textfeldern eingerichtet. In diesem Beispiel werden die folgenden Aufgaben ausgeführt:
 <ol>
     <li>Im Beispiel werden Konstanten für die beiden später verwendeten URLs deklariert.</li>
    <li>Im Beispiel werden zwei Variablen vom Typ „TextField“ für die spätere Verwendung deklariert.</li>
     <li>Der Klassenkonstruktor ruft die folgenden beiden Methoden auf:
     <ul>
       <li><codeph>init()</codeph> initialisiert die TextField-Objekte und fügt Ereignis-Listener hinzu.</li>
       <li><codeph>draw()</codeph> fügt die TextField-Objekte der Anzeigeliste hinzu und weist den anzuzeigenden Text zu.</li>
  </ul></li>
     <li>Die Listener <codeph>linkHandler()</codeph> und <codeph>textInputHandler()</codeph> reagieren auf die für ihren Ereignistyp relevanten Ereignisse. Mit der Methode <codeph>linkHandler()</codeph> wird ein Webbrowser geöffnet (falls dies noch nicht der Fall ist), und die URL-Adresse, auf die geklickt wurde, wird angesteuert. Mit der Methode <codeph>textInputHandler()</codeph> werden lediglich Informationen angezeigt, wenn eine Taste im zugehörigen Textfeld gedrückt wird.</li>
 </ol>
 
 <p><b>Hinweis: </b> Die Domäne in diesem Beispiel ist fiktiv. <codeph>[yourDomain]</codeph> muss durch einen tatsächlichen Domänennamen ausgetauscht werden.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;
    import flash.events.TextEvent;
    import flash.net.URLRequest;
    import flash.net.navigateToURL;
    
    public class TextEventExample extends Sprite {
        private const DOMAIN_1_URL:String = "http://www.[yourDomain].com";
        private const DOMAIN_2_URL:String = "http://www.[yourDomain].com";
        private var linkTxt:TextField;
        private var textInputTxt:TextField;
        
        public function TextEventExample() {
            init();
            draw();
        }
        
        private function init():void {
            linkTxt = new TextField();
            linkTxt.addEventListener(TextEvent.LINK, linkHandler);
            linkTxt.height = 60;
            linkTxt.autoSize = TextFieldAutoSize.LEFT;            
            linkTxt.multiline = true;
                
            textInputTxt = new TextField();
            textInputTxt.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);
            textInputTxt.type = TextFieldType.INPUT;
            textInputTxt.background = true;
            textInputTxt.border = true;
            textInputTxt.height = 20;            
        }
        
        private function draw():void {
            addChild(linkTxt);
            linkTxt.htmlText += createLink(DOMAIN_1_URL, "Click to go to first domain");
            linkTxt.htmlText += "&lt;br />";
            linkTxt.htmlText += createLink(DOMAIN_2_URL, "Click to go to second domain");

            addChild(textInputTxt);
            textInputTxt.y = linkTxt.height;
            textInputTxt.text = "type here";
        }
        
        private function createLink(url:String, text:String):String {
            var link:String = "";
            link += "&lt;font color='#0000FF'>";
            link += "&lt;u>";
            link += "&lt;b>";
            link += "&lt;a href='event:" + url + "'>" + text + "&lt;/a>";
            link += "&lt;/b>";
            link += "&lt;/u>";
            link += "&lt;/font>";
            return link;
        }
        
        private function linkHandler(e:TextEvent):void {
            var request:URLRequest = new URLRequest(e.text);
            navigateToURL(request);
        }
        
        private function textInputHandler(e:TextEvent):void {
            trace(">> ============================");
            trace(">> e.text: " + e.text);
            trace(">> textInputTxt.text: " + textInputTxt.text);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><adobeApiEvent id="flash.events:TextEvent:LINK_link"><apiName>link</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:LINK</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_LINKExample.as"> In diesem Beispiel wird ein Textereignis ausgelöst, wenn ein Benutzer auf einen Hyperlink im HTML-Text klickt. Abhängig vom Link wird der Benutzer zu einer bestimmten Website geleitet (basierend auf dem Betriebssystem) oder es wird ein Kreis gezeichnet (basierend auf dem vom Benutzer ausgewählten Radius). 
   
 <p>Es wird ein Textfeld erstellt und dessen Inhalt wird mithilfe der Eigenschaft <codeph>htmlText</codeph> auf einen String im HTML-Format festgelegt. Die Hyperlinks sind unterstrichen, damit sie vom Benutzer leichter erkannt werden. (Adobe Flash Player ändert den Mauszeiger nur, wenn sich der Zeiger über dem Link befindet.) Um sicherzustellen, dass der Mausklick des Benutzers eine ActionScript-Methode aufruft, beginnt die URL des Hyperlinks mit dem String <codeph>"event:"</codeph>, und für das <codeph>TextEvent.LINK</codeph>-Ereignis wird ein Listener hinzugefügt.</p> 
 
 <p>Die <codeph>linkHandler()</codeph>-Methode, die beim Klicken des Benutzers auf einen Hyperlink ausgelöst wird, verwaltet alle Link-Ereignisse für das Textfeld. Die erste if-Anweisung überprüft die <codeph>text</codeph>-Eigenschaft des Ereignisses, die den Rest der URL nach dem <codeph>"event:"</codeph>-String enthält. Wenn der Benutzer auf den Link für das Betriebssystem geklickt hat, wird der Name des aktuellen Betriebssystems des Benutzers aus der <codeph>Capabilities.os</codeph>-Eigenschaft des Systems verwendet, um den Benutzer zu der entsprechenden Website zu leiten. Andernfalls wird der ausgewählte Radius, der von der <codeph>text</codeph>-Eigenschaft des Ereignisses übergeben wird, verwendet, um einen Kreis unter dem Textfeld zu zeichnen. Jedes Mal, wenn der Benutzer auf den Radius-Link klickt, wird der zuvor gezeichnete Kreis gelöscht und ein neuer Kreis mit dem ausgewählten Radius gezeichnet. </p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TextEvent:TEXT_INPUT_textInput"><apiName>textInput</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_TEXT_INPUTExample.as"> Im folgenden Beispiel wird der Benutzer durch das Generieren eines speziellen Kombinationsschlüssels (ähnlich einem Kennwort) geleitet. Dieser Kombinationsschlüssel besteht aus sieben alphanumerischen Zeichen, wobei das zweite und das fünfte Zeichen Ziffern sind.
 
 <p>Drei Textfelder für Anweisungen, die Benutzereingabe und die Warnungen (Fehlermeldungen) werden erstellt. Ein Ereignis-Listener wird hinzugefügt, um auf die Texteingabe des Benutzers zu reagieren, indem die Methode <codeph>textInputHandler()</codeph> ausgelöst wird. (Jedes Mal, wenn der Benutzer Text eingibt, wird ein <codeph>TextEvent.TEXT_INPUT</codeph>-Ereignis ausgelöst. </p>
 <p><b>Hinweis:</b> Die Textereignisse werden ausgelöst, wenn der Benutzer Textzeichen eingibt, aber nicht, wenn zum Beispiel die Rücktaste gedrückt wird. Um alle Tastaturereignisse zu erfassen, verwenden Sie einen Listener für das <codeph>KeyboardEvent</codeph>-Ereignis.)</p>
 
 <p>Die Methode <codeph>textInputHandler()</codeph> kontrolliert und verwaltet die Benutzereingabe. Die Methode <codeph>preventDefault()</codeph> wird verwendet, um zu verhindern, dass Adobe Flash Player den Text sofort im Eingabetextfeld anzeigt. Die Anwendung ist dann für die Aktualisierung des Feldes zuständig. Um Löschungen oder Änderungen, die der Benutzer an den bereits eingegebenen Zeichen (<codeph>result</codeph>-String) vorgenommen hat, rückgängig zu machen, wird der Inhalt des Eingabetextfelds dem <codeph>result</codeph>-String zugewiesen, wenn ein Benutzer neue Zeichen eingibt. Um die Einheitlichkeit der Benutzeroberfläche zu gewährleisten, platziert die <codeph>setSelection()</codeph>-Methode die Einfügemarke hinter dem zuletzt ausgewählten Zeichen im Textfeld.</p>
 
 <p>Die erste if-Anweisung in der <codeph>textInputHandler()</codeph>-Methode überprüft das zweite und das fünfte Zeichen des eingegebenen Kombinationsschlüssels, bei dem es sich jeweils um eine Ziffer handeln muss. Wenn die Benutzereingabe korrekt ist, wird die Methode <codeph>updateCombination()</codeph> aufgerufen und der Kombinationsschlüsselstring (<codeph>result</codeph>) wird an die Benutzereingabe angehängt. Die <codeph>updateCombination()</codeph>-Methode verschiebt auch die Einfügemarke hinter das ausgewählte Zeichen. Nachdem die sieben Zeichen eingegeben wurden, ändert die letzte if-Anweisung in der <codeph>textInputHandler()</codeph>-Methode den Typ des Textfelds <codeph>inputTextField</codeph> von <codeph>INPUT</codeph> zu <codeph>DYNAMIC</codeph>, was bedeutet, dass der Benutzer keine Zeichen mehr eingeben oder ändern kann.</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TextEvent:TextEvent"><apiName>TextEvent</apiName><shortdesc>
	 Erstellt ein Ereignisobjekt, das Informationen über Textereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Folgende Werte sind möglich: <codeph>TextEvent.LINK</codeph> und <codeph>TextEvent.TEXT_INPUT</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen. 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Vom Benutzer eingegebener Text. Ereignis-Listener können über die Eigenschaft <codeph>text</codeph> auf diese Informationen zugreifen.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für TextEvent-Objekte.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Erstellt ein Ereignisobjekt, das Informationen über Textereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:TextEvent:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine Kopie des TextEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues TextEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine Kopie des TextEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TextEvent:toString"><apiName>toString</apiName><shortdesc>
	 Gibt eine Zeichenfolge zurück, die alle Eigenschaften des TextEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des TextEvent-Objekts enthält.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt eine Zeichenfolge zurück, die alle Eigenschaften des TextEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	 <p><codeph>[TextEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> text=<i>Wert</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:TextEvent:LINK"><apiName>LINK</apiName><shortdesc>
     Definiert den Wert der Eigenschaft „type“ eines link-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>link</codeph>-Ereignisobjekts.
	 
	 <p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Es wurde auf das Textfeld mit dem Hyperlink geklickt. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row><row><entry><codeph>text</codeph></entry><entry>Der Rest der URL nach „event:“</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_LINKExample.as"> In diesem Beispiel wird ein Textereignis ausgelöst, wenn ein Benutzer auf einen Hyperlink im HTML-Text klickt. Abhängig vom Link wird der Benutzer zu einer bestimmten Website geleitet (basierend auf dem Betriebssystem) oder es wird ein Kreis gezeichnet (basierend auf dem vom Benutzer ausgewählten Radius). 
   
 <p>Es wird ein Textfeld erstellt und dessen Inhalt wird mithilfe der Eigenschaft <codeph>htmlText</codeph> auf einen String im HTML-Format festgelegt. Die Hyperlinks sind unterstrichen, damit sie vom Benutzer leichter erkannt werden. (Adobe Flash Player ändert den Mauszeiger nur, wenn sich der Zeiger über dem Link befindet.) Um sicherzustellen, dass der Mausklick des Benutzers eine ActionScript-Methode aufruft, beginnt die URL des Hyperlinks mit dem String <codeph>"event:"</codeph>, und für das <codeph>TextEvent.LINK</codeph>-Ereignis wird ein Listener hinzugefügt.</p> 
 
 <p>Die <codeph>linkHandler()</codeph>-Methode, die beim Klicken des Benutzers auf einen Hyperlink ausgelöst wird, verwaltet alle Link-Ereignisse für das Textfeld. Die erste if-Anweisung überprüft die <codeph>text</codeph>-Eigenschaft des Ereignisses, die den Rest der URL nach dem <codeph>"event:"</codeph>-String enthält. Wenn der Benutzer auf den Link für das Betriebssystem geklickt hat, wird der Name des aktuellen Betriebssystems des Benutzers aus der <codeph>Capabilities.os</codeph>-Eigenschaft des Systems verwendet, um den Benutzer zu der entsprechenden Website zu leiten. Andernfalls wird der ausgewählte Radius, der von der <codeph>text</codeph>-Eigenschaft des Ereignisses übergeben wird, verwendet, um einen Kreis unter dem Textfeld zu zeichnen. Jedes Mal, wenn der Benutzer auf den Radius-Link klickt, wird der zuvor gezeichnete Kreis gelöscht und ein neuer Kreis mit dem ausgewählten Radius gezeichnet. </p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u>&lt;a href=\"event:20\">20 pixels&lt;/a>&lt;/u>.&lt;br>" 
                         +  "Draw a circle with the radius of &lt;u>&lt;a href=\"event:50\">50 pixels&lt;/a>&lt;/u>.&lt;br>&lt;br>"
                         +  "&lt;u>&lt;a href=\"event:os\">Learn about your operating system.&lt;/a>&lt;/u>&lt;br>";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:TEXT_INPUT"><apiName>TEXT_INPUT</apiName><shortdesc>
     Definiert den Wert der Eigenschaft "type" eines textInput-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textInput</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>textInput</codeph>-Ereignisobjekts.
     <p><b>Hinweis</b>: Dieses Ereignis wird für die Entf- und Rücktaste nicht ausgelöst.</p>     
	 <p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; rufen Sie die Methode <codeph>preventDefault()</codeph> auf, um das Standardverhalten abzubrechen.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Textfeld, in das die Zeichen eingegeben werden. Das Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row><row><entry><codeph>text</codeph></entry><entry>Das bzw. die Zeichen wird/werden vom Benutzer eingegeben.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_TEXT_INPUTExample.as"> Im folgenden Beispiel wird der Benutzer durch das Generieren eines speziellen Kombinationsschlüssels (ähnlich einem Kennwort) geleitet. Dieser Kombinationsschlüssel besteht aus sieben alphanumerischen Zeichen, wobei das zweite und das fünfte Zeichen Ziffern sind.
 
 <p>Drei Textfelder für Anweisungen, die Benutzereingabe und die Warnungen (Fehlermeldungen) werden erstellt. Ein Ereignis-Listener wird hinzugefügt, um auf die Texteingabe des Benutzers zu reagieren, indem die Methode <codeph>textInputHandler()</codeph> ausgelöst wird. (Jedes Mal, wenn der Benutzer Text eingibt, wird ein <codeph>TextEvent.TEXT_INPUT</codeph>-Ereignis ausgelöst. </p>
 <p><b>Hinweis:</b> Die Textereignisse werden ausgelöst, wenn der Benutzer Textzeichen eingibt, aber nicht, wenn zum Beispiel die Rücktaste gedrückt wird. Um alle Tastaturereignisse zu erfassen, verwenden Sie einen Listener für das <codeph>KeyboardEvent</codeph>-Ereignis.)</p>
 
 <p>Die Methode <codeph>textInputHandler()</codeph> kontrolliert und verwaltet die Benutzereingabe. Die Methode <codeph>preventDefault()</codeph> wird verwendet, um zu verhindern, dass Adobe Flash Player den Text sofort im Eingabetextfeld anzeigt. Die Anwendung ist dann für die Aktualisierung des Feldes zuständig. Um Löschungen oder Änderungen, die der Benutzer an den bereits eingegebenen Zeichen (<codeph>result</codeph>-String) vorgenommen hat, rückgängig zu machen, wird der Inhalt des Eingabetextfelds dem <codeph>result</codeph>-String zugewiesen, wenn ein Benutzer neue Zeichen eingibt. Um die Einheitlichkeit der Benutzeroberfläche zu gewährleisten, platziert die <codeph>setSelection()</codeph>-Methode die Einfügemarke hinter dem zuletzt ausgewählten Zeichen im Textfeld.</p>
 
 <p>Die erste if-Anweisung in der <codeph>textInputHandler()</codeph>-Methode überprüft das zweite und das fünfte Zeichen des eingegebenen Kombinationsschlüssels, bei dem es sich jeweils um eine Ziffer handeln muss. Wenn die Benutzereingabe korrekt ist, wird die Methode <codeph>updateCombination()</codeph> aufgerufen und der Kombinationsschlüsselstring (<codeph>result</codeph>) wird an die Benutzereingabe angehängt. Die <codeph>updateCombination()</codeph>-Methode verschiebt auch die Einfügemarke hinter das ausgewählte Zeichen. Nachdem die sieben Zeichen eingegeben wurden, ändert die letzte if-Anweisung in der <codeph>textInputHandler()</codeph>-Methode den Typ des Textfelds <codeph>inputTextField</codeph> von <codeph>INPUT</codeph> zu <codeph>DYNAMIC</codeph>, was bedeutet, dass der Benutzer keine Zeichen mehr eingeben oder ändern kann.</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:text:get"><apiName>text</apiName><shortdesc>
	 Bei einem textInput-Ereignis das bzw. die vom Benutzer eingegebene(n) Zeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Bei einem <codeph>textInput</codeph>-Ereignis das bzw. die vom Benutzer eingegebenen Zeichen. Bei einem <codeph>link</codeph>-Ereignis der Text des Attributs <codeph>event</codeph> des <codeph>href</codeph>-Attributs des <codeph>&lt;a></codeph>-Tags.
	 
	 </apiDesc><example>Im folgenden Code wird gezeigt, wie das <codeph>link</codeph>-Ereignis ausgelöst wird, wenn ein Benutzer auf den Hypertext-Link klickt:
	 
	<codeblock>
	import flash.text.TextField;
	import flash.events.TextEvent;			
	
	var tf:TextField = new TextField();
	tf.htmlText = "&lt;a href='event:myEvent'>Click Me.&lt;/a>";
	tf.addEventListener("link", clickHandler);
	addChild(tf);
	
	function clickHandler(e:TextEvent):void {
		trace(e.type); // link
		trace(e.text); // myEvent
	}
	</codeblock>
	 
	 </example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:Event"><apiName>Event</apiName><shortdesc>
 Die Event-Klasse wird als Basisklasse bei der Erstellung von Ereignisobjekten verwendet, die beim Auftreten eines Ereignisses als Parameter an Ereignis-Listener übergeben werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Basisklasse des Ereignisobjekts.
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die Event-Klasse wird als Basisklasse bei der Erstellung von Ereignisobjekten verwendet, die beim Auftreten eines Ereignisses als Parameter an Ereignis-Listener übergeben werden.
 
 <p>Die Eigenschaften der Event-Klasse enthalten allgemeine Informationen über ein Ereignis, z. B. den Ereignistyp und ob das Standardverhalten eines Ereignisses abgebrochen werden kann. Für viele Ereignisse, beispielsweise die von den Konstanten der Event-Klasse dargestellten Ereignisse, sind die allgemeinen Informationen ausreichend. Andere Ereignisse benötigen jedoch ausführlichere Informationen. <ph platform="actionscript">Ereignisse, die mit einem Mausklick verknüpft sind, erfordern beispielsweise zusätzliche Informationen über die Position des Klick-Ereignisses, und ob bestimmte Tasten während des Klick-Ereignisses gedrückt wurden. Diese zusätzlichen Informationen können Sie durch das Erweitern der Event-Klasse an Ereignis-Listener übergeben. Genau dies wird von der MouseEvent-Klasse vorgenommen. ActionScript 3.0</ph><ph platform="javascript">Die Adobe<sup>®</sup> AIR™</ph>-API definiert verschiedene Unterklassen der Event-Klasse für allgemeine Ereignisse, die zusätzliche Informationen erfordern. Ereignisse, die mit den einzelnen Event-Unterklassen verknüpft sind, sind in der Dokumentation der einzelnen Klassen beschrieben.</p>
 
 <p>Die Methoden der Event-Klasse können in den Ereignis-Listener-Funktionen eingesetzt werden, um das Verhalten des Ereignisobjekts zu beeinflussen. Einigen Ereignissen ist ein Standardverhalten zugewiesen.<ph platform="actionscript"> So markiert das <codeph>doubleClick</codeph>-Ereignis z. B. standardmäßig das zum Zeitpunkt des Ereignisses unter dem Mauszeiger befindliche Wort.</ph> <ph platform="javascript">Das <codeph>closing</codeph>-Ereignis, das von einem NativeWindow-Objekt ausgelöst wird, hat zum Beispiel ein Standardverhalten, mit dem das Fenster geschlossen wird.</ph> Ihr Ereignis-Listener kann dieses Verhalten abbrechen, indem er die <codeph>preventDefault()</codeph>-Methode aufruft. <ph platform="actionscript">Sie können auch den aktuellen Ereignis-Listener zum letzten Listener machen, der ein Ereignis verarbeitet, indem Sie die <codeph>stopPropagation()</codeph>- oder <codeph>stopImmediatePropagation()</codeph>-Methode aufrufen.</ph></p>
 
 <p platform="javascript"><b>Hinweis:</b> Mit einigen Konstanten in dieser Klasse wird die <codeph>type</codeph>-Eigenschaft für Ereignisse definiert, die von der ActionScript 3.0-Anzeigeliste ausgelöst werden und im SWF-Inhalt verwendet werden. Mit einigen Konstanten dieser Klasse wird jedoch die <codeph>type</codeph>-Eigenschaft für Ereignisse definiert, die <i>nicht</i> mit der ActionScript 3.0-Anzeigeliste zusammenhängen. Diese Konstanten sind hilfreich, wenn JavaScript-Code in der AIR-Laufzeitumgebung ausgeführt wird.</p>
 
 </apiDesc><example conref="examples\EventExample.as"> Im folgenden Beispiel wird anhand der <codeph>EventExample</codeph>-Klasse und der benutzerdefinierten Klasse <codeph>Square</codeph> die Verwaltung von Ereignis-Bubbling demonstriert.
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class EventExample extends Sprite {
        
        public function EventExample() {
            var square_0:Square = new Square(300, 0x336633);
            addChild(square_0);
            
            var square_1:Square = new Square(250, 0x669966);
            square_0.addChild(square_1);

            var square_2:Square = new Square(200, 0x66CC66);
            square_1.addChild(square_2);

            var square_3:Square = new Square(150, 0xAA0000);
            square_3.shouldBubble = false;
            square_2.addChild(square_3);

            var square_4:Square = new Square(100, 0x66FF66);
            square_3.addChild(square_4);

            var square_5:Square = new Square(50, 0xCC0000);
            square_5.shouldBubble = false;
            square_4.addChild(square_5);

            this.addEventListener(MouseEvent.CLICK, clickHandler);
        }
        
        private function clickHandler(e:Event):void {
            trace(">> stage: " + e.type + " event from " + e.target.name + " called on " + this.name);
            trace(">> --------------------------------------------");
        }
    }
}

import flash.display.Sprite;
import flash.events.Event;
import flash.events.MouseEvent;

class Square extends Sprite {
    private var sideLen:int;
    private var color:Number;
    public var shouldBubble:Boolean = true;

    public function Square(sideLen:int, color:Number) {
        this.sideLen = sideLen;
        this.color = color;
        init();
        draw();
    }
        
    private function init():void {
        buttonMode = true;
        this.addEventListener(MouseEvent.CLICK, firstClickHandler);
        this.addEventListener(MouseEvent.CLICK, secondClickHandler);
        this.addEventListener(MouseEvent.CLICK, thirdClickHandler);
    }
        
    private function draw():void {
        this.graphics.beginFill(color);
        this.graphics.drawRect(0, 0, sideLen, sideLen);
    }
        
    private function firstClickHandler(e:Event):void {
        trace(">> 1e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopPropagation();
        }
    }

    private function secondClickHandler(e:Event):void {
        trace(">> 2e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopImmediatePropagation();
            trace(">> --------------------------------------------");
        }
    }

    private function thirdClickHandler(e:Event):void {
        trace(">> 3e: " + e.type + " event from " + e.target.name + " called on " + this.name);
    }
}
</codeblock></example><example conref="examples\EventExample2.as"> Im folgenden Beispiel wird der Unterschied zwischen den Ereignissen <codeph>ADDED</codeph> und <codeph>ADDED_TO_STAGE</codeph> sowie den Ereignissen <codeph>REMOVED</codeph> und <codeph>REMOVED_FROM_STAGE</codeph> interaktiv gezeigt. Durch Klicken auf ein Sprite wird es mit seinem gesamten geschachtelten Inhalt von der Bühne entfernt. Durch Klicken auf das größte Sprite werden ein <codeph>REMOVED</codeph>-Ereignis sowie drei <codeph>REMOVED_FROM_STAGE</codeph>-Ereignisse ausgelöst.
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.events.*;

    public class EventExample2 extends Sprite {
        public function EventExample2():void {
            var parentSprite:Sprite = createSprite("parentSprite",200);
            var childSprite:Sprite = createSprite("childSprite",100);
            var childOfChildSprite:Sprite = createSprite("childOfChildSprite",50);
            
            trace(":: Adding to Stage ::");
            this.addChild(parentSprite);
            trace(":: Adding to Stage ::");
            parentSprite.addChild(childSprite);
            trace(":: Adding to Stage ::");
            childSprite.addChild(childOfChildSprite);
        }
        private function createSprite(name:String,size:uint):Sprite {
            trace(":: Creating Sprite ::");
            var newSprite:Sprite = new Sprite();
            newSprite.name = name;
            newSprite.graphics.beginFill(0xFFFFFF * Math.random(),1);
            newSprite.graphics.drawRect(0,0,size,size);
            newSprite.graphics.endFill();
            newSprite.addEventListener(Event.ADDED, spriteAdded);
            newSprite.addEventListener(Event.ADDED_TO_STAGE, spriteAddedToStage);
            newSprite.addEventListener(Event.REMOVED, spriteRemoved);
            newSprite.addEventListener(Event.REMOVED_FROM_STAGE, spriteRemovedFromStage);
            newSprite.addEventListener(MouseEvent.CLICK, remove);
            return newSprite;
        }
        private function remove(event:Event) {
            if(event.target == event.currentTarget) {
                trace(":: Removing Clicked Sprite ::");
                var target:Sprite = Sprite(event.target);
                target.parent.removeChild(target);
            }
        }
        private function spriteRemovedFromStage(event:Event):void {
            trace("REMOVED_FROM_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteRemoved(event:Event):void {
            trace("REMOVED: " + event.target.name + " from " + event.currentTarget.name);
        }
        private function spriteAddedToStage(event:Event):void {
            trace("ADDED_TO_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteAdded(event:Event):void {
            trace("ADDED: " + event.target.name + " within " + event.currentTarget.name);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="flash.events:Event:ACTIVATE_activate"><apiName>activate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_added"><apiName>added</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_TO_STAGE_addedToStage"><apiName>addedToStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED_TO_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CANCEL_cancel"><apiName>cancel</apiName><prolog><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLEAR_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLEAR</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSING_closing"><apiName>closing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CONNECT_connect"><apiName>connect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CONNECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COPY_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COPY</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CUT_cut"><apiName>cut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CUT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DEACTIVATE_deactivate"><apiName>deactivate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DISPLAYING_displaying"><apiName>displaying</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DISPLAYING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ENTER_FRAME_enterFrame"><apiName>enterFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ENTER_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXITING_exiting"><apiName>exiting</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXITING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXIT_FRAME_exitFrame"><apiName>exitFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXIT_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FRAME_CONSTRUCTED_frameConstructed"><apiName>frameConstructed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FRAME_CONSTRUCTED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FULLSCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FULLSCREEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_BOUNDS_CHANGE_htmlBoundsChange"><apiName>htmlBoundsChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_BOUNDS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>htmlBoundsChange-Ereignis</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_DOM_INITIALIZE_htmlDOMInitialize"><apiName>htmlDOMInitialize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>htmlDOMInitialize-Ereignis</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_RENDER_htmlRender"><apiName>htmlRender</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>htmlRender-Ereignis</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ID3_id3"><apiName>id3</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ID3</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:INIT_init"><apiName>init</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:INIT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:LOCATION_CHANGE_locationChange"><apiName>locationChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:LOCATION_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>locationChange-Ereignis</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:MOUSE_LEAVE_mouseLeave"><apiName>mouseLeave</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:MOUSE_LEAVE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:NETWORK_CHANGE_networkChange"><apiName>networkChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:NETWORK_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:OPEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:PASTE_paste"><apiName>paste</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:PASTE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_removed"><apiName>removed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_FROM_STAGE_removedFromStage"><apiName>removedFromStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED_FROM_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RENDER_render"><apiName>render</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SCROLL_scroll"><apiName>scroll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SCROLL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_ALL_selectAll"><apiName>selectAll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT_ALL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SOUND_COMPLETE_soundComplete"><apiName>soundComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SOUND_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_CHILDREN_CHANGE_tabChildrenChange"><apiName>tabChildrenChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_CHILDREN_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_ENABLED_CHANGE_tabEnabledChange"><apiName>tabEnabledChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_ENABLED_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_INDEX_CHANGE_tabIndexChange"><apiName>tabIndexChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:UNLOAD_unload"><apiName>unload</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:UNLOAD</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_IDLE_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_IDLE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_PRESENT_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_PRESENT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:Event:Event"><apiName>Event</apiName><shortdesc>
     Erstellt ein Ereignisobjekt, das als ein Parameter an Ereignis-Listener übergeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Typ des Ereignisses, auf den als <codeph>Event.type</codeph> zugegriffen werden kann.
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Der Standardwert ist <codeph>false</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Der Standardwert lautet <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Dient zum Erstellen eines neuen Ereignisobjekts.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Erstellt ein Ereignisobjekt, das als ein Parameter an Ereignis-Listener übergeben wird.
     
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:Event:clone"><apiName>clone</apiName><shortdesc>
	 Dupliziert eine Instanz einer Event-Unterklasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein mit dem Original identisches neues Ereignisobjekt.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Dupliziert eine Instanz einer Event-Unterklasse.
	 
     <p>Gibt ein neues Ereignisobjekt zurück, das eine Kopie der ursprünglichen Instanz des Ereignisobjekts ist. Normalerweise rufen Sie <codeph>clone()</codeph> nicht auf; es wird automatisch von der EventDispatcher-Klasse aufgerufen, wenn Sie ein Ereignis neu auslösen, das heißt, wenn Sie <codeph>dispatchEvent(event)</codeph> von einer Prozedur aus aufrufen, die <codeph>event</codeph> verarbeitet.</p>
	 
	 <p>Das neue Ereignisobjekt übernimmt alle Eigenschaften des Originals.</p> 
	 
	 <p platform="actionscript">Wenn Sie Ihre eigene benutzerdefinierte Event-Klasse erstellen, müssen Sie die übernommene <codeph>Event.clone()</codeph>-Methode außer Kraft setzen, um die Eigenschaften Ihrer benutzerdefinierten Klasse zu duplizieren. Wenn Sie nicht alle der Ereignis-Unterklasse hinzugefügten Eigenschaften eingestellt haben, weisen sie nicht die korrekten Werte auf, wenn Listener das neu ausgelöste Ereignis verarbeiten.</p>
	 
	 <p platform="actionscript">In dem folgenden Beispiel ist <codeph>PingEvent</codeph> eine Unterklasse von <codeph>Event</codeph> und implementiert aus diesem Grund eine eigene Version von <codeph>clone()</codeph>.</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:formatToString"><apiName>formatToString</apiName><shortdesc>
	 Eine Dienstprogrammfunktion zur Implementierung der toString()-Methode in benutzerdefinierten ActionScript 3.0 Event-Klassen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Name Ihrer benutzerdefinierten Event-Klasse und der String-Wert Ihres <codeph>...arguments</codeph>-Parameters.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>className</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Name Ihrer benutzerdefinierten Event-Klasse. <ph platform="actionscript">Im obigen Beispiel lautet der <codeph>className</codeph>-Parameter <codeph>PingEvent</codeph>.</ph>
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>Die Eigenschaften der Event-Klasse<ph platform="actionscript"> und die Eigenschaften, die Sie Ihrer benutzerdefinierten Event-Klasse hinzufügen. Im vorigen Beispiel umfasst der <codeph>...arguments</codeph>-Parameter <codeph>type</codeph>, <codeph>bubbles</codeph>, <codeph>cancelable</codeph>, <codeph>eventPhase</codeph> und <codeph>URL</codeph></ph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Eine Dienstprogrammfunktion zur Implementierung der <codeph>toString()</codeph>-Methode in benutzerdefinierten ActionScript 3.0 Event-Klassen. <ph platform="actionscript">Das Außerkraftsetzen der <codeph>toString()</codeph>-Methode wird empfohlen, ist jedoch nicht erforderlich.</ph>
	 
	 <pre platform="actionscript">
	 class PingEvent extends Event {
	  var URL:String;
	 
	 public override function toString():String { 
	  return formatToString("PingEvent", "type", "bubbles", "cancelable", "eventPhase", "URL"); 
	    }
	 }
	 </pre>
	 
	 <p platform="javascript">Diese Methode wird beim Erstellen von ActionScript 3.0-Klassen für SWF-Inhalte verwendet.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:isDefaultPrevented"><apiName>isDefaultPrevented</apiName><shortdesc>
	Überprüft, ob die preventDefault()-Methode bei dem Ereignis aufgerufen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Wenn <codeph>preventDefault()</codeph> aufgerufen wurde, wird <codeph>true</codeph> zurückgegeben, andernfalls wird <codeph>false</codeph> zurückgegeben.
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Überprüft, ob die <codeph>preventDefault()</codeph>-Methode bei dem Ereignis aufgerufen wurde. Wenn die <codeph>preventDefault()</codeph>-Methode aufgerufen wurde, wird <codeph>true</codeph> zurückgegeben, andernfalls wird <codeph>false</codeph> zurückgegeben.
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:preventDefault"><apiName>preventDefault</apiName><shortdesc>
	Bricht das Standardverhalten eines Ereignisses ab, wenn dieses Verhalten abgebrochen werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Bricht das Standardverhalten eines Ereignisses ab, wenn dieses Verhalten abgebrochen werden kann.
	
	<p>Vielen Ereignissen sind Standardverhalten zugewiesen, die standardmäßig ausgeführt werden. <ph platform="actionscript">Wenn ein Benutzer beispielsweise Text in ein Textfeld eingibt, so besteht das Standardverhalten darin, dass die Zeichen in dem Textfeld angezeigt werden. Da das Standardverhalten des <codeph>TextEvent.TEXT_INPUT</codeph>-Ereignisses abgebrochen werden kann, können Sie die Anzeige der Zeichen mithilfe der Methode <codeph>preventDefault()</codeph> verhindern.</ph> <ph platform="javascript">Wenn ein Benutzer zum Beispiel auf das Schließen-Feld eines Fensters klickt, ist das Standardverhalten das Schließen des Fensters. Da das Standardverhalten des <codeph>closing</codeph>-Ereignisses abgebrochen werden kann, können Sie das Schließen des Fensters mithilfe der <codeph>preventDefault()</codeph>-Methode verhindern.</ph>
	</p>
	
    <p platform="actionscript">Ein Beispiel für ein Verhalten, das nicht abgebrochen werden kann, ist das Standardverhalten, das dem <codeph>Event.REMOVED</codeph>-Ereignis zugewiesen ist. Dieses Verhalten wird immer dann erzeugt, wenn Flash Player ein Anzeigeobjekt aus der Anzeigeliste entfernt. Dieses Standardverhalten (das Entfernen des Elements) kann nicht abgebrochen werden, daher hat die Methode <codeph>preventDefault()</codeph> keine Auswirkung auf dieses Standardverhalten. </p>
	
	<p>Mit der Eigenschaft <codeph>Event.cancelable</codeph> können Sie überprüfen, ob Sie das einem bestimmten Ereignis zugewiesene Standardverhalten abbrechen können. Wenn der Wert von <codeph>Event.cancelable</codeph> auf <codeph>true</codeph> lautet, kann <codeph>preventDefault()</codeph> zum Abbruch des Ereignisses verwendet werden. Ansonsten hat <codeph>preventDefault()</codeph> keine Auswirkungen.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/isDefaultPrevented()"><linktext>flash.events.Event.isDefaultPrevented()</linktext></link><link href="flash.events.xml#Event/cancelable"><linktext>Event.cancelable</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopImmediatePropagation"><apiName>stopImmediatePropagation</apiName><shortdesc>
	Verhindert die Verarbeitung von Ereignis-Listenern im aktuellen Knoten und in Knoten, die dem aktuellen Knoten im Ereignisablauf nachfolgen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Verhindert die Verarbeitung von Ereignis-Listenern im aktuellen Knoten und in Knoten, die dem aktuellen Knoten im Ereignisablauf nachfolgen. <ph platform="actionscript">Diese Methode wirkt sich sofort und auf die Ereignis-Listener im aktuellen Knoten aus. Im Gegensatz dazu wirkt sich die Methode <codeph>stopPropagation()</codeph> nicht aus, bis alle Ereignis-Listener im aktuellen Knoten vollständig verarbeitet wurden.</ph>
	
	<p platform="actionscript"><b>Hinweis: </b> Diese Methode bricht nicht das diesem Ereignis zugewiesene Standardverhalten ab. Weitere Informationen zu dieser Funktionalität finden Sie unter <codeph>preventDefault()</codeph>.</p>
	
	<p platform="javascript">Der Ereignisablauf wird für Anzeigeobjekte im SWF-Inhalt definiert, die das ActionScript 3.0-Anzeigeobjektmodell verwenden.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopPropagation()"><linktext>flash.events.Event.stopPropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopPropagation"><apiName>stopPropagation</apiName><shortdesc>
	Verhindert die Verarbeitung von Ereignis-Listenern in Knoten, die dem aktuellen Knoten im Ereignisablauf nachfolgen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Verhindert die Verarbeitung von Ereignis-Listenern in Knoten, die dem aktuellen Knoten im Ereignisablauf nachfolgen. <ph platform="actionscript">Diese Methode wirkt sich nicht auf Ereignis-Listener im aktuellen Knoten (<codeph>currentTarget</codeph>) aus. Im Gegensatz dazu verhindert die Methode <codeph>stopImmediatePropagation()</codeph> die Verarbeitung von Ereignis-Listenern im aktuellen und in den nachfolgenden Knoten. Weitere Aufrufe dieser Methode haben keine Auswirkungen. Diese Methode kann in jeder Phase des Ereignisablaufs aufgerufen werden.</ph>
	
	<p platform="actionscript"><b>Hinweis: </b> Diese Methode bricht nicht das diesem Ereignis zugewiesene Standardverhalten ab. Weitere Informationen zu dieser Funktionalität finden Sie unter <codeph>preventDefault()</codeph>.</p>
	
	<p platform="javascript">Der Ereignisablauf wird für Anzeigeobjekte im SWF-Inhalt definiert, die das ActionScript 3.0-Anzeigeobjektmodell verwenden.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopImmediatePropagation()"><linktext>flash.events.Event.stopImmediatePropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des Ereignisobjekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des Ereignisobjekts enthält.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des Ereignisobjekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[Event type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:Event:ACTIVATE"><apiName>ACTIVATE</apiName><shortdesc>
	Die ACTIVATE-Konstante bestimmt den Wert der type-Eigenschaft eines activate-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>ACTIVATE</codeph>-Konstante bestimmt den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>activate</codeph>-Ereignisobjekts. 
	<p><b>Hinweis:</b> Dieses Ereignis verfügt weder über eine Aufnahmephase noch über eine Bubbling-Phase. Das bedeutet, dass Ereignis-Listener potenziellen Zielen direkt hinzugefügt werden müssen, unabhängig davon, ob sich das Ziel in der Anzeigeliste befindet oder nicht.</p>
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede DisplayObject-Instanz, die einen Listener besitzt, der für das <codeph>activate</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED"><apiName>ADDED</apiName><shortdesc>
	Die Event.ADDED-Konstante definiert den Wert der type-Eigenschaft eines added-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>added</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.ADDED</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>added</codeph>-Ereignisobjekts. 
	
	<p platform="javascript">Das <codeph>added</codeph>-Ereignis gilt für die ActionScript 3.0-Anzeigeliste und ist für JavaScript-Code nicht relevant.</p>
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die DisplayObject-Instanz, die in die Anzeigeliste aufgenommen wird. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED_TO_STAGE"><apiName>ADDED_TO_STAGE</apiName><shortdesc>
	Die Event.ADDED_TO_STAGE-Konstante definiert den Wert der type-Eigenschaft eines addedToStage-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addedToStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.ADDED_TO_STAGE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>addedToStage</codeph>-Ereignisobjekts. 
	
	<p platform="javascript">Das <codeph>addedToStage</codeph>-Ereignis gilt für die ActionScript 3.0-Anzeigeliste und ist für JavaScript-Code nicht relevant.</p>
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die DisplayObject-Instanz, die der Anzeigeliste für die Bühne hinzugefügt wird. Dies erfolgt entweder direkt oder über das Hinzufügen einer Unterstruktur, die die DisplayObject-Instanz enthält. Wenn die DisplayObject-Instanz direkt hinzugefügt wird, findet das <codeph>added</codeph>-Ereignis vor diesem Ereignis statt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CANCEL"><apiName>CANCEL</apiName><shortdesc>
	Die Event.CANCEL-Konstante definiert den Wert der type-Eigenschaft eines cancel-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.CANCEL</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>cancel</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Ein Verweis auf das Objekt, dessen Operation abgebrochen wurde.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CHANGE"><apiName>CHANGE</apiName><shortdesc>
	Die Event.CHANGE-Konstante definiert den Wert der type-Eigenschaft eines change-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.CHANGE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>change</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt, dessen Wert geändert wurde. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLEAR"><apiName>CLEAR</apiName><shortdesc>
	Die Event.CLEAR-Konstante definiert den Wert der type-Eigenschaft eines clear-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>clear</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.CLEAR</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>clear</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede IntertactiveObject-Instanz, die einen Listener besitzt, der für das <codeph>clear</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Hinweis:</b> TextField-Objekte lösen folgende Ereignisse <i>nicht</i> aus: <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> und <codeph>selectAll</codeph>. TextField-Objekte enthalten die Befehle „Ausschneiden“, „Kopieren“, „Einfügen“, „Löschen“ und „Alles auswählen“ immer im Kontextmenü. Diese Befehle können aus dem Kontextmenü von TextField-Objekten nicht entfernt werden. Bei TextField-Objekten werden beim Auswählen dieser Befehle (oder der entsprechenden Zugriffstastenkombinationen) keine <codeph>clear</codeph>-, <codeph>copy</codeph>-, <codeph>cut</codeph>-, <codeph>paste</codeph>- oder <codeph>selectAll</codeph>-Ereignisse ausgelöst. Andere Klassen jedoch, die die InteractiveObject-Klasse erweitern, einschließlich von mithilfe der Flash Text Engine (FTE) erstellte Komponenten, können diese Ereignisse auslösen.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSE"><apiName>CLOSE</apiName><shortdesc>
	Die Event.CLOSE-Konstante definiert den Wert der type-Eigenschaft eines close-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.CLOSE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>close</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt, dessen Verbindung geschlossen wurde.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSING"><apiName>CLOSING</apiName><shortdesc>
	Die Event.CLOSING-Konstante definiert den Wert der type-Eigenschaft eines closing-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>closing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.CLOSING</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>closing</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; das Abbrechen dieses Ereignisobjekts stoppt den Schließvorgang.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt, dessen Verbindung geschlossen werden soll.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
	Die Event.COMPLETE-Konstante definiert den Wert der type-Eigenschaft eines complete-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.COMPLETE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>complete</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Netzwerkobjekt, dessen Ladevorgang beendet ist. 
	    </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CONNECT"><apiName>CONNECT</apiName><shortdesc>
	Die Event.CONNECT-Konstante definiert den Wert der type-Eigenschaft eines connect-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>connect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.CONNECT</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>connect</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Socket- oder XMLSocket-Objekt, das eine Netzwerkverbindung hergestellt hat.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COPY"><apiName>COPY</apiName><shortdesc>
	Definiert den Wert der type-Eigenschaft eines copy-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>copy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>copy</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede IntertactiveObject-Instanz, die einen Listener besitzt, der für das <codeph>copy</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Hinweis:</b> TextField-Objekte lösen folgende Ereignisse <i>nicht</i> aus: <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> und <codeph>selectAll</codeph>. TextField-Objekte enthalten die Befehle „Ausschneiden“, „Kopieren“, „Einfügen“, „Löschen“ und „Alles auswählen“ immer im Kontextmenü. Diese Befehle können aus dem Kontextmenü von TextField-Objekten nicht entfernt werden. Bei TextField-Objekten werden beim Auswählen dieser Befehle (oder der entsprechenden Zugriffstastenkombinationen) keine <codeph>clear</codeph>-, <codeph>copy</codeph>-, <codeph>cut</codeph>-, <codeph>paste</codeph>- oder <codeph>selectAll</codeph>-Ereignisse ausgelöst. Andere Klassen jedoch, die die InteractiveObject-Klasse erweitern, einschließlich von mithilfe der Flash Text Engine (FTE) erstellte Komponenten, können diese Ereignisse auslösen.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CUT"><apiName>CUT</apiName><shortdesc>
	Definiert den Wert der type-Eigenschaft eines cut-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>cut</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede IntertactiveObject-Instanz, die einen Listener besitzt, der für das <codeph>cut</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Hinweis:</b> TextField-Objekte lösen folgende Ereignisse <i>nicht</i> aus: <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> und <codeph>selectAll</codeph>. TextField-Objekte enthalten die Befehle „Ausschneiden“, „Kopieren“, „Einfügen“, „Löschen“ und „Alles auswählen“ immer im Kontextmenü. Diese Befehle können aus dem Kontextmenü von TextField-Objekten nicht entfernt werden. Bei TextField-Objekten werden beim Auswählen dieser Befehle (oder der entsprechenden Zugriffstastenkombinationen) keine <codeph>clear</codeph>-, <codeph>copy</codeph>-, <codeph>cut</codeph>-, <codeph>paste</codeph>- oder <codeph>selectAll</codeph>-Ereignisse ausgelöst. Andere Klassen jedoch, die die InteractiveObject-Klasse erweitern, einschließlich von mithilfe der Flash Text Engine (FTE) erstellte Komponenten, können diese Ereignisse auslösen.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DEACTIVATE"><apiName>DEACTIVATE</apiName><shortdesc>
	Die Event.DEACTIVATE-Konstante definiert den Wert der type-Eigenschaft eines deactivate-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deactivate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.DEACTIVATE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>deactivate</codeph>-Ereignisobjekts. 
	<p><b>Hinweis:</b> Dieses Ereignis verfügt weder über eine Aufnahmephase noch über eine Bubbling-Phase. Das bedeutet, dass Ereignis-Listener potenziellen Zielen direkt hinzugefügt werden müssen, unabhängig davon, ob sich das Ziel in der Anzeigeliste befindet oder nicht.</p>
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede DisplayObject-Instanz, die einen Listener besitzt, der für das <codeph>deactivate</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DISPLAYING"><apiName>DISPLAYING</apiName><shortdesc>
	 Die Event.DISPLAYING-Konstante definiert den Wert der type-Eigenschaft eines displaying-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displaying</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Die <codeph>Event.DISPLAYING</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>displaying</codeph>-Ereignisobjekts. 
	 <p><b>Hinweis:</b> Dieses Ereignis durchläuft keine "Aufnahmephase" und wird direkt an das Ziel gesendet – unabhängig davon, ob sich dieses auf der Anzeigeliste befindet.</p>
	 <p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	  <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt, das angezeigt werden soll.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ENTER_FRAME"><apiName>ENTER_FRAME</apiName><shortdesc>
	Die Event.ENTER_FRAME-Konstante definiert den Wert der type-Eigenschaft eines enterFrame-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>enterFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.ENTER_FRAME</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>enterFrame</codeph>-Ereignisobjekts. 
	<p><b>Hinweis:</b> Dieses Ereignis verfügt weder über eine Aufnahmephase noch über eine Bubbling-Phase. Das bedeutet, dass Ereignis-Listener potenziellen Zielen direkt hinzugefügt werden müssen, unabhängig davon, ob sich das Ziel in der Anzeigeliste befindet oder nicht.</p>
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede DisplayObject-Instanz, die einen Listener besitzt, der für das <codeph>enterFrame</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXITING"><apiName>EXITING</apiName><shortdesc>
	Die Event.EXITING-Konstante definiert den Wert der type-Eigenschaft eines exiting-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exiting</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.EXITING</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>exiting</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; das Abbrechen dieses Ereignisobjekts stoppt den Beenden-Vorgang.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das NativeApplication-Objekt.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NativeApplication-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXIT_FRAME"><apiName>EXIT_FRAME</apiName><shortdesc>
	Die Event.EXIT_FRAME-Konstante definiert den Wert der type-Eigenschaft eines exitFrame-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exitFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.EXIT_FRAME</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>exitFrame</codeph>-Ereignisobjekts. 
	<p><b>Hinweis:</b> Dieses Ereignis verfügt weder über eine Aufnahmephase noch über eine Bubbling-Phase. Das bedeutet, dass Ereignis-Listener potenziellen Zielen direkt hinzugefügt werden müssen, unabhängig davon, ob sich das Ziel in der Anzeigeliste befindet oder nicht.</p>
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede DisplayObject-Instanz, die einen Listener besitzt, der für das <codeph>enterFrame</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FRAME_CONSTRUCTED"><apiName>FRAME_CONSTRUCTED</apiName><shortdesc>
	Die Event.FRAME_CONSTRUCTED-Konstante definiert den Wert der type-Eigenschaft eines frameConstructed-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>frameConstructed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.FRAME_CONSTRUCTED</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>frameConstructed</codeph>-Ereignisobjekts. 
	
	<p><b>Hinweis:</b> Dieses Ereignis verfügt weder über eine Aufnahmephase noch über eine Bubbling-Phase. Das bedeutet, dass Ereignis-Listener potenziellen Zielen direkt hinzugefügt werden müssen, unabhängig davon, ob sich das Ziel in der Anzeigeliste befindet oder nicht.</p>
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede DisplayObject-Instanz, die einen Listener besitzt, der für das <codeph>frameConstructed</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FULLSCREEN"><apiName>FULLSCREEN</apiName><shortdesc>
	Die Event.FULL_SCREEN-Konstante definiert den Wert der type-Eigenschaft eines fullScreen-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.FULL_SCREEN</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>fullScreen</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Stage-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_BOUNDS_CHANGE"><apiName>HTML_BOUNDS_CHANGE</apiName><shortdesc>
	Die Event.HTML_BOUNDS_CHANGE-Konstante definiert den Wert der type-Eigenschaft eines htmlBoundsChange-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlBoundsChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.HTML_BOUNDS_CHANGE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>htmlBoundsChange</codeph>-Ereignisobjekts.
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das HTMLLoader-Objekt.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das HTMLLoader-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>htmlBoundsChange-Ereignis</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_DOM_INITIALIZE"><apiName>HTML_DOM_INITIALIZE</apiName><shortdesc>
	Die Event.HTML_DOM_INITIALIZE-Konstante definiert den Wert der type-Eigenschaft eines htmlDOMInitialize-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlDOMInitialize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.HTML_DOM_INITIALIZE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>htmlDOMInitialize</codeph>-Ereignisobjekts.
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das HTMLLoader-Objekt.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das HTMLLoader-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>htmlDOMInitialize-Ereignis</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_RENDER"><apiName>HTML_RENDER</apiName><shortdesc>
	Die Event.HTML_RENDER-Konstante definiert den Wert der type-Eigenschaft eines htmlRender-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlRender</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.HTML_RENDER</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>htmlRender</codeph>-Ereignisobjekts.
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das HTMLLoader-Objekt.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das HTMLLoader-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>htmlRender-Ereignis</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ID3"><apiName>ID3</apiName><shortdesc>
	Die Event.ID3-Konstante definiert den Wert der type-Eigenschaft eines id3-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>id3</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.ID3</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>id3</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Sound-Objekt, über das die MP3-Datei geladen wird, für die nun ID3-Daten verfügbar sind. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:INIT"><apiName>INIT</apiName><shortdesc>
	Die Event.INIT-Konstante definiert den Wert der type-Eigenschaft eines init-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>init</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.INIT</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>init</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das LoaderInfo-Objekt, das mit der zu ladenden SWF-Datei verknüpft ist.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:LOCATION_CHANGE"><apiName>LOCATION_CHANGE</apiName><shortdesc>
	Die Event.LOCATION_CHANGE-Konstante definiert den Wert der type-Eigenschaft eines locationChange-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>locationChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.LOCATION_CHANGE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>locationChange</codeph>-Ereignisobjekts.
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das HTMLLoader-Objekt.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das HTMLLoader-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>locationChange-Ereignis</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:MOUSE_LEAVE"><apiName>MOUSE_LEAVE</apiName><shortdesc>
	Die Event.MOUSE_LEAVE-Konstante definiert den Wert der type-Eigenschaft eines mouseLeave-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseLeave</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.MOUSE_LEAVE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>mouseLeave</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Stage-Objekt. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:NETWORK_CHANGE"><apiName>NETWORK_CHANGE</apiName><shortdesc>
	Die Event.NETWORK_CHANGE-Konstante definiert den Wert der type-Eigenschaft eines networkChange-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>networkChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.NETWORK_CHANGE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>networkChange</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NativeApplication-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:OPEN"><apiName>OPEN</apiName><shortdesc>
	Die Event.OPEN-Konstante definiert den Wert der type-Eigenschaft eines open-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.OPEN</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>open</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Netzwerkobjekt, über das eine Verbindung geöffnet wurde. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:PASTE"><apiName>PASTE</apiName><shortdesc>
	Die Event.PASTE-Konstante definiert den Wert der type-Eigenschaft eines paste-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>paste</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.PASTE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>paste</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede IntertactiveObject-Instanz, die einen Listener besitzt, der für das <codeph>paste</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Hinweis:</b> TextField-Objekte lösen folgende Ereignisse <i>nicht</i> aus: <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> und <codeph>selectAll</codeph>. TextField-Objekte enthalten die Befehle „Ausschneiden“, „Kopieren“, „Einfügen“, „Löschen“ und „Alles auswählen“ immer im Kontextmenü. Diese Befehle können aus dem Kontextmenü von TextField-Objekten nicht entfernt werden. Bei TextField-Objekten werden beim Auswählen dieser Befehle (oder der entsprechenden Zugriffstastenkombinationen) keine <codeph>clear</codeph>-, <codeph>copy</codeph>-, <codeph>cut</codeph>-, <codeph>paste</codeph>- oder <codeph>selectAll</codeph>-Ereignisse ausgelöst. Andere Klassen jedoch, die die InteractiveObject-Klasse erweitern, einschließlich von mithilfe der Flash Text Engine (FTE) erstellte Komponenten, können diese Ereignisse auslösen.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED"><apiName>REMOVED</apiName><shortdesc>
	Die Event.REMOVED-Konstante definiert den Wert der type-Eigenschaft eines removed-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.REMOVED</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>removed</codeph>-Ereignisobjekts. 
	
	<p platform="javascript">Das <codeph>removed</codeph>-Ereignis gilt für die ActionScript 3.0-Anzeigeliste und ist für JavaScript-Code nicht relevant.</p>
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die DisplayObject-Instanz, die aus der Anzeigeliste entfernt werden soll. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED_FROM_STAGE"><apiName>REMOVED_FROM_STAGE</apiName><shortdesc>
	Die Event.REMOVED_FROM_STAGE-Konstante definiert den Wert der type-Eigenschaft eines removedFromStage-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removedFromStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.REMOVED_FROM_STAGE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>removedFromStage</codeph>-Ereignisobjekts. 
	
	<p platform="javascript">Das <codeph>removedFromStage</codeph>-Ereignis gilt für die ActionScript 3.0-Anzeigeliste und ist für JavaScript-Code nicht relevant.</p>
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die DisplayObject-Instanz, die aus der Anzeigeliste für die Bühne entfernt wird. Dies erfolgt entweder direkt oder über das Entfernen einer Unterstruktur, die die DisplayObject-Instanz enthält. Wenn die DisplayObject-Instanz direkt entfernt wird, findet das <codeph>removed</codeph>-Ereignis vor diesem Ereignis statt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RENDER"><apiName>RENDER</apiName><shortdesc>
	Die Event.RENDER-Konstante definiert den Wert der type-Eigenschaft eines render-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>render</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.RENDER</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>render</codeph>-Ereignisobjekts. 
	<p><b>Hinweis:</b> Dieses Ereignis verfügt weder über eine Aufnahmephase noch über eine Bubbling-Phase. Das bedeutet, dass Ereignis-Listener potenziellen Zielen direkt hinzugefügt werden müssen, unabhängig davon, ob sich das Ziel in der Anzeigeliste befindet oder nicht.</p>
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Das Standardverhalten kann nicht abgebrochen werden.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede DisplayObject-Instanz, die einen Listener besitzt, der für das <codeph>render</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RESIZE"><apiName>RESIZE</apiName><shortdesc>
	Die Event.RESIZE-Konstante definiert den Wert der type-Eigenschaft eines resize-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.RESIZE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>resize</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Stage-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	Die Event.SCROLL-Konstante definiert den Wert der type-Eigenschaft eines scroll-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.SCROLL</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>scroll</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das TextField-Objekt, für das ein Bildlauf durchgeführt wurde. Die <codeph>target</codeph>-Eigenschaft entspricht nicht immer dem Objekt in der Anzeigeliste, das den Ereignis-Listener registriert hat. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT"><apiName>SELECT</apiName><shortdesc>
	Die Event.SELECT-Konstante definiert den Wert der type-Eigenschaft eines select-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>select</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.SELECT</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>select</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt, auf dem ein Objekt ausgewählt wurde.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT_ALL"><apiName>SELECT_ALL</apiName><shortdesc>
	Die Event.SELECT_ALL-Konstante definiert den Wert der type-Eigenschaft eines selectALL-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectAll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.SELECT_ALL</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>selectALL</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Jede IntertactiveObject-Instanz, die einen Listener besitzt, der für das <codeph>selectAll</codeph>-Ereignis registriert ist.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Hinweis:</b> TextField-Objekte lösen folgende Ereignisse <i>nicht</i> aus: <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph> und <codeph>selectAll</codeph>. TextField-Objekte enthalten die Befehle „Ausschneiden“, „Kopieren“, „Einfügen“, „Löschen“ und „Alles auswählen“ immer im Kontextmenü. Diese Befehle können aus dem Kontextmenü von TextField-Objekten nicht entfernt werden. Bei TextField-Objekten werden beim Auswählen dieser Befehle (oder der entsprechenden Zugriffstastenkombinationen) keine <codeph>clear</codeph>-, <codeph>copy</codeph>-, <codeph>cut</codeph>-, <codeph>paste</codeph>- oder <codeph>selectAll</codeph>-Ereignisse ausgelöst. Andere Klassen jedoch, die die InteractiveObject-Klasse erweitern, einschließlich von mithilfe der Flash Text Engine (FTE) erstellte Komponenten, können diese Ereignisse auslösen.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SOUND_COMPLETE"><apiName>SOUND_COMPLETE</apiName><shortdesc>
	Die Event.SOUND_COMPLETE-Konstante definiert den Wert der type-Eigenschaft eines soundComplete-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>soundComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.SOUND_COMPLETE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>soundComplete</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SoundChannel-Objekt, in dem die Wiedergabe eines Sounds beendet wurde.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_CHILDREN_CHANGE"><apiName>TAB_CHILDREN_CHANGE</apiName><shortdesc>
	Die Event.TAB_CHILDREN_CHANGE-Konstante definiert den Wert der type-Eigenschaft eines tabChildrenChange-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabChildrenChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.TAB_CHILDREN_CHANGE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>tabChildrenChange</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt, dessen tabChildren-Flag sich geändert hat. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_ENABLED_CHANGE"><apiName>TAB_ENABLED_CHANGE</apiName><shortdesc>
	Die Event.TAB_ENABLED_CHANGE-Konstante definiert den Wert der type-Eigenschaft eines tabEnabledChange-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabEnabledChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.TAB_ENABLED_CHANGE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>tabEnabledChange</codeph>-Ereignisobjekts. 
	
	<p platform="javascript">Das <codeph>tabEnabledChange</codeph>-Ereignis gilt für die ActionScript 3.0-Anzeigeliste und ist für JavaScript-Code nicht relevant.</p>
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das interaktive Objekt (InteractiveObject), dessen tabEnabled-Flag sich geändert hat. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_INDEX_CHANGE"><apiName>TAB_INDEX_CHANGE</apiName><shortdesc>
	Die Event.TAB_INDEX_CHANGE-Konstante definiert den Wert der type-Eigenschaft eines tabIndexChange-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabIndexChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.TAB_INDEX_CHANGE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>tabIndexChange</codeph>-Ereignisobjekts. 
	
	<p platform="javascript">Das <codeph>tabIndexChange</codeph>-Ereignis gilt für die ActionScript 3.0-Anzeigeliste und ist für JavaScript-Code nicht relevant.</p>
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt dessen Tabulatorindex (tabIndex) sich geändert hat. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:UNLOAD"><apiName>UNLOAD</apiName><shortdesc>
	Die Event.UNLOAD-Konstante definiert den Wert der type-Eigenschaft eines unload-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unload</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.UNLOAD</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>unload</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das LoaderInfo-Objekt, das mit der zu entfernenden oder zu ersetzenden SWF-Datei verknüpft ist.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_IDLE"><apiName>USER_IDLE</apiName><shortdesc>
	Die Event.USER_IDLE-Konstante definiert den Wert der type-Eigenschaft eines userIdle-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userIdle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.USER_IDLE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>userIdle</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NativeApplication-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_PRESENT"><apiName>USER_PRESENT</apiName><shortdesc>
	Die Event.USER_PRESENT-Konstante definiert den Wert der type-Eigenschaft eines userPresent-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userPresent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>Event.USER_PRESENT</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>userPresent</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NativeApplication-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:bubbles:get"><apiName>bubbles</apiName><shortdesc>
	Gibt an, ob es sich bei dem Ereignis um ein Bubbling-Ereignis handelt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob es sich bei dem Ereignis um ein Bubbling-Ereignis handelt. Wenn das Ereignis eine Bubbling-Phase ausführen kann, lautet der Wert <codeph>true</codeph>, andernfalls <codeph>false</codeph>.
	
	<p platform="javascript">Das Ereignis-Bubbling wird für Anzeigeobjekte im SWF-Inhalt definiert, der das ActionScript 3.0-Anzeigeobjektmodell verwendet. Die <codeph>bubbles</codeph>-Eigenschaft ist nur in ActionScript 3.0-Code relevant.</p>
	
	<p platform="actionscript">Wenn ein Ereignis auftritt, durchläuft es die drei Phasen des Ereignisablaufs: die Aufnahmephase, die vom Anfang der Anzeigelistenhierarchie bis zum Knoten direkt vor dem Zielknoten verläuft; die Zielphase, die den Zielknoten umfasst; und die Bubbling-Phase, die von dem Zielknoten nachfolgenden Knoten bis zur Anzeigelistenhierarchie verläuft.</p>
	
	<p platform="actionscript">Einige Ereignisse, wie zum Beispiel <codeph>activate</codeph> und <codeph>unload</codeph>, haben keine Bubbling-Phase. Die Eigenschaft <codeph>bubbles</codeph> weist für Ereignisse ohne Bubbling-Phase den Wert <codeph>false</codeph> auf.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:cancelable:get"><apiName>cancelable</apiName><shortdesc>
	Gibt an, ob das mit dem Ereignis verknüpfte Verhalten verhindert werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob das mit dem Ereignis verknüpfte Verhalten verhindert werden kann. Wenn das Verhalten abgebrochen werden kann, lautet der Wert <codeph>true</codeph>, andernfalls <codeph>false</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>Event.preventDefault()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
	Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet. Wenn ein Benutzer auf eine OK-Schaltfläche klickt, kann es sich bei dem Zielknoten um den Knoten handeln, in dem die Schaltfläche enthalten ist, oder um eines der übergeordneten Elemente, die einen Ereignis-Listener für dieses Ereignis registriert hatten.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:eventPhase:get"><apiName>eventPhase</apiName><shortdesc>
	Die aktuelle Phase im Ereignisablauf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Die aktuelle Phase im Ereignisablauf. Diese Eigenschaft kann die folgenden numerischen Werte enthalten:
	<ul>
	    <li> Die Aufnahmephase (<codeph>EventPhase.CAPTURING_PHASE</codeph>).</li>
	    <li> Die Zielphase (<codeph>EventPhase.AT_TARGET</codeph>).</li>
	    <li> Die Bubbling-Phase (<codeph>EventPhase.BUBBLING_PHASE</codeph>).</li></ul>
	
	<p platform="javascript">Der Ereignisablauf wird für Anzeigeobjekte im SWF-Inhalt definiert, die das ActionScript 3.0-Anzeigeobjektmodell verwenden. Die <codeph>eventPhase</codeph>-Eigenschaft ist nur in ActionScript 3.0-Code relevant.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:target:get"><apiName>target</apiName><shortdesc>
	Das Ereignis-Ziel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	Das Ereignis-Ziel. Diese Eigenschaft enthält den Zielknoten. Wenn ein Benutzer beispielsweise auf eine OK-Schaltfläche klickt, ist der Zielknoten der Anzeigelistenknoten, der diese Schaltfläche enthält.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:type:get"><apiName>type</apiName><shortdesc>
	Der Ereignistyp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Der Ereignistyp. Der Typ ist abhängig von der Groß- und Kleinschreibung.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc> 
  Wird ausgelöst, wenn der Player neue Audiodaten anfordert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Wird ausgelöst, wenn der Player neue Audiodaten anfordert. 
 
  <p>Verwenden Sie dieses Ereignis, wenn Sie dynamisch generiertes Audio verwalten möchten. In dieser Umgebung enthält das Sound-Objekt keine Sounddaten an sich. Es fungiert stattdessen als Socket für Sounddaten, die zum Objekt gestreamt werden. Das Streamen erfolgt mittels einer Funktion, die Sie diesem Ereignis zuweisen. </p>
 
  <p>Sie verwenden in Ihrer Funktion die <codeph>ByteArray.writeFloat()</codeph>-Methode, um in ein ByteArray-Objekt (<codeph>event.data</codeph>) zu schreiben, das die Beispieldaten, die sie abspielen möchten, enthält.</p>
 
  <p>Wenn Sie <codeph>Sound.play()</codeph> aufrufen, startet der Player den Aufruf Ihrer Ereignisprozedur und fordert Datensegmente an, die Soundbeispiele enthalten. Der Player sendet kontinuierlich Ereignisse, während der Sound abgespielt wird, solange Sie Daten zur Verfügung stellen oder bis <codeph>SoundChannel.stop()</codeph> aufgerufen wird.</p>
 
  <p>Die Wartezeit des Ereignisses ist von Plattform zu Plattform unterschiedlich und kann sich in zukünftigen Versionen von Flash Player ändern. Machen Sie sich nicht von einer bestimmten Wartezeit abhängig; berechnen Sie sie stattdessen selbst. Zur Berechnung der Wartezeit in ActionScript verwenden Sie die Formel <codeph>((SampleDataEvent.position/44.1) - SoundChannelObject.position)</codeph>.</p>
 
  <p>Stellen Sie in einem <codeph>SampleDataEvent</codeph>-Objekt zwischen 2.048 und 8.192 Beispiele bereit. Um die beste Leistung zu erzielen, stellen Sie so viele Beispiele wie möglich zur Verfügung. Je weniger Beispiele Sie zur Verfügung stellen, desto wahrscheinlicher ist es, dass während des Abspielens Knackgeräusche und Ähnliches auftritt. Dies kann von Plattform zu Plattform unterschiedlich sein und in verschiedenen Situationen auftreten, zum Beispiel wenn die Browsergröße verändert wird. Wenn Sie Code schreiben, der mit nur 2.048 Beispielen auf einer Plattform funktioniert, kann es vorkommen, dass derselbe Code auf einer anderen Plattform nicht so gut funktioniert. Wenn Sie die geringst mögliche Wartezeit benötigen, überlegen Sie sich, ob Sie die Menge der Daten vom Benutzer auswählen lassen.</p>
 
  <p>Wenn Sie weniger als 2.048 Soundbeispiele bereitstellen, spielt Flash Player die verbleibenden Beispiele ab und stoppt dann die Wiedergabe, als wäre das Ende der Sounddatei erreicht, und generiert ein SoundComplete-Ereignis.</p>
 
  <p>Sie können auch anhand der <codeph>Sound.extract()</codeph>-Methode Daten aus einem Sound-Objekt extrahieren und diese zum Abspielen in den dynamischen Stream schreiben.  </p>
 
  <p>Wenn Sie dieses Ereignis mit einem Sound-Objekt verwenden, sind als weitere Sound-Methoden nur noch <codeph>Sound.extract()</codeph> und <codeph>Sound.play()</codeph> aktiviert. Das Aufrufen anderer Methoden oder Eigenschaften verursacht eine Ausnahme aufgrund eines ungültigen Aufrufs („invalid call“). Alle Methoden und Eigenschaften des SoundChannel-Objekts sind nach wie vor aktiviert.</p>
 
 </apiDesc><example conref="examples\Sound_sampleDataExample.as"> Das folgende Beispiel spielt eine einfache Sinuswelle ab.
 
<codeblock>
var mySound:Sound = new Sound();
function sineWaveGenerator(event:SampleDataEvent):void {
    for ( var c:int=0; c&lt;8192; c++ ) {
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
    }
}

mySound.addEventListener(SampleDataEvent.SAMPLE_DATA,sineWaveGenerator);
mySound.play();
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Sound"><linktext>flash.media.Sound</linktext></link></related-links><adobeApiEvent id="flash.events:SampleDataEvent:SAMPLE_DATA_sampleData"><apiName>sampleData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SampleDataEvent:SAMPLE_DATA</apiEventType><adobeApiEventClassifier>flash.events:SampleDataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SampleDataEvent:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc>
		Erstellt ein Ereignisobjekt, das Informationen über Audiodatenereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Dieser Wert lautet <codeph>Event.SAMPLE_DATA</codeph>.
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. 
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. 
		</apiDesc></apiParam><apiParam><apiItemName>theposition</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Die Position der Daten im Audiostream.
		</apiDesc></apiParam><apiParam><apiItemName>thedata</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>Ein Bytearray mit Daten.
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Erstellt ein Ereignisobjekt, das Informationen über Audiodatenereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben. 
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SampleDataEvent:clone"><apiName>clone</apiName><shortdesc>
		Erstellt eine Kopie des SampleDataEvent-Objekts und stellt den Wert aller Eigenschaften so ein, dass sie den Werten des Originals entsprechen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues SampleDataEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Erstellt eine Kopie des SampleDataEvent-Objekts und stellt den Wert aller Eigenschaften so ein, dass sie den Werten des Originals entsprechen. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SampleDataEvent:toString"><apiName>toString</apiName><shortdesc>
		Gibt einen String zurück, der alle Eigenschaften des SampleDataEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des <codeph>SampleDataEvent</codeph>-Objekts enthält.
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Gibt einen String zurück, der alle Eigenschaften des SampleDataEvent-Objekts enthält. Der String liegt im folgenden Format vor:
		<p><codeph>[SampleDataEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> theposition=<i>Wert</i> thedata=<i>Wert</i>]</codeph></p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SampleDataEvent:SAMPLE_DATA"><apiName>SAMPLE_DATA</apiName><shortdesc>
		Definiert den Wert der type-Eigenschaft eines SampleDataEvent-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sampleData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>SampleDataEvent </codeph>-Ereignisobjekts. 
		<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
		<adobetable class="innertable">
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>position</codeph></entry><entry>Der Speicherort, an dem die Audiodaten bereitgestellt sind.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:SampleDataEvent:data:get"><apiName>data</apiName><shortdesc>
		Die Daten im Audiostream.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		Die Daten im Audiostream.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SampleDataEvent:position:get"><apiName>position</apiName><shortdesc>
		Die Position der Daten im Audiostream.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		Die Position der Daten im Audiostream.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 Das NativeApplication-Objekt einer AIR-Anwendung löst ein invoke-Ereignis aus, wenn die Anwendung aufgerufen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Das NativeApplication-Objekt einer AIR-Anwendung löst ein <codeph>invoke</codeph>-Ereignis aus, wenn die Anwendung aufgerufen wird. 
	 
	 <p>Das NativeApplication-Objekt löst ein <codeph>invoke</codeph>-Ereignis immer dann aus, wenn eine Anwendung gestartet wird. Das Ereignis kann aber auch zu anderen Zeitpunkten ausgelöst werden. Eine laufende Anwendung löst zum Beispiel ein zusätzliches InvokeEvent-Ereignis aus, wenn ein Benutzer eine mit der Anwendung verknüpfte Datei aktiviert.</p>
	 
	 <p>Es kann jeweils nur eine Instanz einer bestimmten Anwendung gestartet werden. Bei nachfolgenden Versuchen, die Anwendung zu starten, löst das NativeApplication-Objekt der laufenden Instanz ein neues <codeph>invoke</codeph>-Ereignis aus. Die Anwendung ist dafür zuständig, dieses Ereignis zu verarbeiten und die entsprechende Aktion auszuführen, zum Beispiel ein neues Anwendungsfenster zum Anzeigen der Daten in der Datei zu öffnen.</p>
	  
	 <p>InvokeEvent-Objekte werden vom NativeApplication-Objekt (<codeph>NativeApplication.nativeApplication</codeph>) ausgelöst. Um <codeph>invoke</codeph>-Ereignisse zu erhalten, rufen Sie die <codeph>addEventListener()</codeph>-Methode des NativeApplication-Objekts auf. Wenn ein Ereignis-Listener für ein <codeph>invoke-</codeph>Ereignis registriert wird, empfängt er auch alle <codeph>invoke</codeph>-Ereignisse, die vor der Registrierung aufgetreten sind. Diese früheren Ereignisse werden nach der Rückgabe des Aufrufs von <codeph>addEventListener()</codeph> ausgelöst, jedoch nicht unbedingt vor einem neuen <codeph>invoke</codeph>-Ereignis, das möglicherweise nach der Registrierung ausgelöst wird. Sie sollten sich also nicht auf eine bestimmte Auslösereihenfolge verlassen.</p> 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#BrowserInvokeEvent"><linktext>flash.events.BrowserInvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:InvokeEvent:INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:InvokeEvent:INVOKE</apiEventType><adobeApiEventClassifier>flash.events:InvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:InvokeEvent:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 Die Konstruktorfunktion für die InvokeEvent-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses, auf den als <codeph>Event.type</codeph> zugegriffen werden kann.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Auf <codeph>false</codeph> eingestellt für ein InvokeEvent-Objekt.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Auf <codeph>false</codeph> eingestellt für ein InvokeEvent-Objekt.
	 </apiDesc></apiParam><apiParam><apiItemName>dir</apiItemName><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Ordner, der verwendet werden sollte, um relative Pfade im <codeph>arguments</codeph>-Array aufzulösen.
	 </apiDesc></apiParam><apiParam><apiItemName>argv</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Ein Array von Argumenten (Strings), die an die Anwendung zu übergeben sind.
	 </apiDesc></apiParam><apiParam><apiItemName>reason</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>standard</apiData><apiDesc>die Ursache des Ereignisses; entweder <codeph>InvokeEventReason.LOGIN</codeph> oder <codeph>InvokeEventReason.STANDARD</codeph>. (Dieser Parameter ist ab AIR 1.5.1 verfügbar.) 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Die Konstruktorfunktion für die InvokeEvent-Klasse.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:InvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 Erstellt eine neue Kopie dieses Ereignisses.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Die Kopie des Ereignisses.
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Erstellt eine neue Kopie dieses Ereignisses.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:InvokeEvent:INVOKE"><apiName>INVOKE</apiName><shortdesc>
	 Die InvokeEvent.INVOKE-Konstante definiert den Wert der type-Eigenschaft eines InvokeEvent-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Die <codeph>InvokeEvent.INVOKE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines InvokeEvent-Objekts.
	 
     <p>Das InvokeEvent-Ereignisobjekt hat folgende Eigenschaften:</p>
 	 <adobetable class="innertable">
        
	     
	    
	    
	     
	    
	     
	        
	  <tgroup cols="2"><thead><row><entry>Eigenschaften</entry><entry>Werte</entry></row></thead><tbody><row><entry><codeph>Arguments</codeph></entry><entry>Das Array von Stringargumenten, die während dieses Aufrufs übergeben werden.</entry></row><row><entry><codeph>currentDirectory</codeph></entry><entry>ein File-Objekt, das den Ordner darstellt, der für die Auflösung relativer Pfade im Argumentarray verwendet wird.</entry></row><row><entry><codeph>reason</codeph></entry><entry>ein Code, der angibt, ob das invoke-Ereignis ausgelöst wurde, weil die Anwendung beim Anmelden automatisch gestartet wurde (<codeph>InvokeEventReason.LOGIN</codeph>), oder aus einem anderen Grund (<codeph>InvokeEventReason.STANDARD</codeph>). Verfügbar ab AIR 1.5.1.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Gibt das Objekt an, welches das InvokeEvent -Objekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Immer das NativeApplication-Objekt. 
	    </entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue><apiValue id="flash.events:InvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 Das Array von Stringargumenten, die während dieses Aufrufs übergeben werden.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 Das Array von Stringargumenten, die während dieses Aufrufs übergeben werden. Wenn es sich um einen Befehlszeilenaufruf handelt, enthält das Array die Befehlszeilenargumente (<i>ohne</i> den Prozessnamen).
		 
		 <p><i>Hinweis:</i> Wenn unter Mac<sup>®</sup> OS X mehrere Dateien ausgewählt und geöffnet wurden, löst AIR ein einzelnes <codeph>invoke</codeph>-Ereignis aus, das im <codeph>arguments</codeph>-Array die Namen aller ausgewählten Dateien enthält. Unter Windows<sup>®</sup> und Linux löst AIR hingegen ein separates <codeph>invoke</codeph>-Ereignis für jede ausgewählte Datei aus, das nur den jeweiligen Dateinamen im <codeph>arguments</codeph>-Array enthält.
		 </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:currentDirectory:get"><apiName>currentDirectory</apiName><shortdesc>
		 Der Ordner, der verwendet werden sollte, um relative Pfade im Argument-Array aufzulösen.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
		 Der Ordner, der verwendet werden sollte, um relative Pfade im <codeph>arguments</codeph>-Array aufzulösen. 
		 
		 <p>Wenn eine Anwendung von der Befehlszeile aus gestartet wird, ist die Eigenschaft normalerweise auf das aktuelle Arbeitsverzeichnis der Befehlszeilen-Shell eingestellt, von der aus die Anwendung gestartet wurde. Wenn eine Anwendung von der GUI-Shell aus gestartet wird, wird für diese Eigenschaft normalerweise das erste Systemstammverzeichnis verwendet.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:reason:get"><apiName>reason</apiName><shortdesc>
		 Die Ursache für dieses InvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Die Ursache für dieses InvokeEvent. Diese Eigenschaft gibt an, ob die Anwendung vom Benutzer manuell oder beim Anmelden automatisch gestartet wurde. Mögliche Werte werden als Konstanten in der <codeph>InvokeEventReason</codeph>-Klasse aufgelistet.
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>InvokeEventReason-Konstante</entry><entry>Bedeutung</entry></row></thead><tbody><row>
		 	<entry><codeph>LOGIN</codeph></entry>
		 	<entry>Wurde bei der Anmeldung automatisch gestartet.</entry>
		 
		 </row><row>
		 	<entry><codeph>STANDARD</codeph></entry>
		 	<entry>Wurde aufgrund anderer Ursachen gestartet.</entry>
		 
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
Die Anwendung sendet HTTPStatusEvent-Objekte, wenn eine Netzwerkanfrage einen HTTP-Statuscode zurückgibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
Die Anwendung sendet HTTPStatusEvent-Objekte, wenn eine Netzwerkanfrage einen HTTP-Statuscode zurückgibt. 

<p>MS">HTTPStatusEvent-Objekte werden immer vor Fehler- oder Abschlussereignissen gesendet. Ein HTTPStatusEvent-Objekt muss nicht unbedingt auf einen Fehlerzustand hinweisen; er reflektiert einfach den HTTP-Statuscode (sofern vorhanden), der vom Netzwerkstapel bereitgestellt wird. <ph platform="actionscript">Einige Flash Player-Umgebungen sind eventuell nicht in der Lage, HTTP-Statuscodes zu erfassen; in diesen Fällen wird immer ein Statuscode 0 gemeldet.</ph> </p>

<p><ph platform="actionscript">In Flash Player gibt es nur einen Typ HTTPStatus-Ereignis: <codeph>httpStatus</codeph>.</ph> In der AIR-Laufzeitumgebung kann ein FileReference, URLLoader oder URLStream registriert werden, um auf <codeph>httpResponseStatus</codeph> zu warten, wozu die Eigenschaften <codeph>responseURL</codeph> und <codeph>responseHeaders</codeph> gehören. Diese Eigenschaften sind in einem <codeph>httpStatus</codeph>-Ereignis nicht definiert.</p>

</apiDesc><example conref="examples\HTTPStatusEventExample.as"> Im folgenden Beispiel wird versucht, eine nicht vorhandene Datei vom Stammverzeichnis des Webservers unter http://www.[yourDomain].com zu laden. Dabei sollte ein <codeph>httpStatusHandler</codeph>-Ereignis mit Status 404 ausgelöst werden, der darauf hinweist, dass die Datei nicht gefunden wurde. Das Ereignis <codeph>httpStatusHandler</codeph> wird von der Methode <codeph>httpStatusHandler()</codeph> bearbeitet, mit der zwei Zeilen mit Informationen zum Ereignis gedruckt werden.
 
 <p> <b>Hinweise:</b> 
 <ol>
    <li>Um in diesem Beispiel ein <codeph>securityError</codeph>-Ereignis zu generieren, müssen Sie bei der Kompilierung der SWF-Datei die Einstellung „Sicherheit bei lokaler Wiedergabe“ auf „Nur auf Netzwerk zugreifen“ setzen.</li>
    <li>Sie benötigen einen Server, der auf http://www.[yourDomain].com ausgeführt wird und Port 80 überwacht. Ansonsten erhalten Sie ein <codeph>httpStatusHandler</codeph>-Ereignis mit Statuscode 0 statt 404.</li>
    <li>Es darf sich keine Datei mit dem Namen "MissingFile.html" im Stammverzeichnis des Webservers unter http://www.[yourDomain].com befinden. Ansonsten wird nicht das richtige <codeph>httpStatusHandler</codeph>-Ereignis empfangen.</li>
 </ol>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.HTTPStatusEvent;

    public class HTTPStatusEventExample extends Sprite {

        public function HTTPStatusEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com/MissingFile.html");
            loader.load(request);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
            trace("status: " + event.status);
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS_httpResponseStatus"><apiName>httpResponseStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:HTTPStatusEvent:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt, das Informationen über HTTP-Status-Ereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines HTTPStatus-Ereignisses: <codeph>HTTPStatusEvent.HTTP_STATUS</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Numerischer Status. Ereignis-Listener können über die Eigenschaft <codeph>status</codeph> auf diese Informationen zugreifen.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für HTTPStatusEvent-Objekte.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt, das Informationen über HTTP-Status-Ereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#HTTPStatusEvent/HTTP_STATUS"><linktext>HTTP_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:HTTPStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des HTTPStatusEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues HTTPStatusEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des HTTPStatusEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:HTTPStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des HTTPStatusEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des HTTPStatusEvent-Objekts enthält.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des HTTPStatusEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[HTTPStatusEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> status=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS"><apiName>HTTP_RESPONSE_STATUS</apiName><shortdesc>
	Anders als das httpStatus-Ereignis wird das httpResponseStatus-Ereignis ausgelöst, bevor Antwortdaten vorliegen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpResponseStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Anders als das <codeph>httpStatus</codeph>-Ereignis wird das <codeph>httpResponseStatus</codeph>-Ereignis ausgelöst, bevor Antwortdaten vorliegen. Außerdem enthält das <codeph>httpResponseStatus</codeph>-Ereignis Werte für die Eigenschaften <codeph>responseHeaders</codeph> und <codeph>responseURL</codeph> (die für ein <codeph>httpStatus</codeph>-Ereignis nicht definiert sind). Beachten Sie, dass das Ereignis <codeph>httpResponseStatus</codeph> (falls vorhanden) vor (und zusätzlich zu) jedem <codeph>complete</codeph>- oder <codeph>error</codeph>-Ereignis gesendet wird. 
	
	<p>Die <codeph>HTTPStatusEvent.HTTP_RESPONSE_STATUS</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>httpResponseStatus</codeph>-Ereignisobjekts. </p>
	
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>responseURL</codeph></entry><entry>Die URL, von der die Antwort zurückgegeben wurde.</entry></row><row><entry><codeph>responseHeaders</codeph></entry><entry>Die Antwortheader, die die Antwort zurückgegeben hat, als Array von URLRequestHeader-Objekten.</entry></row><row><entry><codeph>status</codeph></entry><entry>Der vom Server zurückgegebene HTTP-Statuscode.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Netzwerkobjekt, das den HTTP-Statuscode empfängt. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:HTTP_STATUS"><apiName>HTTP_STATUS</apiName><shortdesc>
	Die HTTPStatusEvent.HTTP_STATUS-Konstante definiert den Wert der type-Eigenschaft eines httpStatus-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>HTTPStatusEvent.HTTP_STATUS</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>httpStatus</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>status</codeph></entry><entry>Der vom Server zurückgegebene HTTP-Statuscode.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Netzwerkobjekt, das den HTTP-Statuscode empfängt. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseHeaders:get"><apiName>responseHeaders</apiName><shortdesc>
	 Die Antwortheader, die die Antwort zurückgegeben hat, als Array von URLRequestHeader-Objekten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 Die Antwortheader, die die Antwort zurückgegeben hat, als Array von URLRequestHeader-Objekten.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestHeader"><linktext>flash.net.URLRequestHeader</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseURL:get"><apiName>responseURL</apiName><shortdesc>
	 Die URL, von der die Antwort zurückgegeben wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Die URL, von der die Antwort zurückgegeben wurde. Bei Umleitungen ist dies eine andere URL als die Anforderungs-URL.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTTPStatusEvent:status:get"><apiName>status</apiName><shortdesc>
	Der vom Server zurückgegebene HTTP-Statuscode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Der vom Server zurückgegebene HTTP-Statuscode. So zeigt der Wert 404 beispielsweise an, dass der Server den angeforderten URI nicht gefunden hat. Informationen zu den Werten der einzelnen HTTP-Statuscodes finden Sie unter <xref href="ftp://ftp.isi.edu/in-notes/rfc2616.txt">ftp://ftp.isi.edu/in-notes/rfc2616.txt</xref> in den Abschnitten 10.4 und 10.5 der HTTP-Spezifikation.
	
	<p>Wenn <ph platform="actionscript">Flash Player oder </ph>AIR keinen Statuscode vom Server erhält oder keine Verbindung herstellen kann, wird der Standardwert 0 (null) an den Code übergeben. <ph platform="actionscript">Dieser Wert kann von jedem Player generiert werden (wenn beispielsweise eine fehlerhafte URL angefordert wird). Er wird aber in jedem Fall vom Flash Player Plug-In generiert, wenn es in einem der folgenden Browser ausgeführt wird, die dem Player grundsätzlich keine HTTP-Statuscodes übergeben: Netscape, Mozilla, Safari, Opera und Internet Explorer für Macintosh.</ph></p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
	 Ein File-Objekt löst ein FileListEvent-Objekt aus, wenn ein Aufruf der getDirectoryListingAsync()-Methode eines File-Objekts erfolgreich einen Satz von Dateien und Ordnern auflistet oder wenn ein Benutzer Dateien nach einem Aufruf der browseForOpenMultiple()-Methode auswählt.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ein File-Objekt löst ein FileListEvent-Objekt nach erfolgreichen Aufrufen der getDirectoryListingAsync()- oder browseForOpenMultiple()-Methode auf.
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Ein File-Objekt löst ein FileListEvent-Objekt aus, wenn ein Aufruf der <codeph>getDirectoryListingAsync()</codeph>-Methode eines File-Objekts erfolgreich einen Satz von Dateien und Ordnern auflistet oder wenn ein Benutzer Dateien nach einem Aufruf der <codeph>browseForOpenMultiple()</codeph>-Methode auswählt. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="../../flash/filesystem/File.html#getDirectoryListingAsync()"><linktext>File.getDirectoryListingAsync()</linktext></link></related-links><adobeApiEvent id="flash.events:FileListEvent:DIRECTORY_LISTING_directoryListing"><apiName>directoryListing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:FileListEvent:SELECT_MULTIPLE_selectMultiple"><apiName>selectMultiple</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:FileListEvent:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
		Die Konstruktorfunktion für ein FileListEvent-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Ereignistyp. 
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Bestimmt, ob das Ereignisobjekt aufsteigt (<codeph>false</codeph> für ein FileListEvent-Objekt).
		
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Bestimmt, ob das Event-Objekt abgebrochen werden kann (<codeph>false</codeph> für ein FileListEvent-Objekt).
		
		</apiDesc></apiParam><apiParam><apiItemName>files</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Ein Array von File-Objekten.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Die Konstruktorfunktion für ein FileListEvent-Objekt. 
		
		<p>Die Laufzeitumgebung erstellt mithilfe dieser Klasse FileListEvent-Objekte. Sie verwenden diesen Konstruktor nicht direkt im Code.</p>
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:FileListEvent:DIRECTORY_LISTING"><apiName>DIRECTORY_LISTING</apiName><shortdesc>
		 Die Konstante FileListEvent.DIRECTORY_LISTING definiert den Wert der type-Eigenschaft des Ereignisobjekts für ein directoryListing-Ereignis.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoryListing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Die Konstante <codeph>FileListEvent.DIRECTORY_LISTING</codeph> definiert den Wert der <codeph>type</codeph>-Eigenschaft des Ereignisobjekts für ein <codeph>directoryListing</codeph>-Ereignis.
		 
		 <p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>files</codeph></entry><entry>Ein Array von File-Objekten, das die gefundenen Dateien und Ordner repräsentiert.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das FileListEvent-Objekt.</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:SELECT_MULTIPLE"><apiName>SELECT_MULTIPLE</apiName><shortdesc>
		 Die Konstante FileListEvent.SELECT_MULTIPLE definiert den Wert der type-Eigenschaft des Ereignisobjekts für ein selectMultiple-Ereignis.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectMultiple</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Die Konstante <codeph>FileListEvent.SELECT_MULTIPLE</codeph> definiert den Wert der <codeph>type</codeph>-Eigenschaft des Ereignisobjekts für ein <codeph>selectMultiple</codeph>-Ereignis.
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>files</codeph></entry><entry>Ein Array von File-Objekten, das die ausgewählten Dateien repräsentiert.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das FileListEvent-Objekt.</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:files"><apiName>files</apiName><shortdesc>
		 Ein Array von File-Objekten, das die gefundenen oder ausgewählten Dateien und Verzeichnisse repräsentiert.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 Ein Array von File-Objekten, das die gefundenen oder ausgewählten Dateien und Verzeichnisse repräsentiert. 
		 
		 <p>Für die <codeph>File.getDirectoryListingAsync()</codeph>-Methode ist dies die Liste der Dateien und Verzeichnisse, die auf der Stammebene des Odners gefunden wurden, das vom File-Objekt, das die Methode aufgerufen hat, repräsentiert wird. Für die <codeph>File.browseForOpenMultiple()</codeph>-Methode ist dies die Liste der vom Benutzer ausgewählten Dateien.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
 Ein NativeWindow-Objekt löst ein NativeWindowBoundsEvent-Objekt aus, wenn die Größe oder Position des Fensters geändert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für NativeWindow-Ereignisse, die die Größe und/oder Position des Fensters ändern.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein NativeWindow-Objekt löst ein NativeWindowBoundsEvent-Objekt aus, wenn die Größe oder Position des Fensters geändert wird. Es gibt vier Arten von Ereignissen:
 <ul>
     <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowBoundsEvent/MOVING"><linktext>flash.events.NativeWindowBoundsEvent.MOVING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/MOVE"><linktext>flash.events.NativeWindowBoundsEvent.MOVE</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZING"><linktext>flash.events.NativeWindowBoundsEvent.RESIZING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZE"><linktext>flash.events.NativeWindowBoundsEvent.RESIZE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVE_move"><apiName>move</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVING_moving"><apiName>moving</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZING_resizing"><apiName>resizing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowBoundsEvent:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
    Erstellt ein Event-Objekt mit spezifischen Informationen, die für Fenstergrenzen-Ereignisse relevant sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Folgende Werte sind möglich:
    <ul>
        <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Gibt an, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs beteiligt ist.
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob das Ereignisobjekt abgebrochen werden kann.
    </apiDesc></apiParam><apiParam><apiItemName>beforeBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>Gibt die Grenzen vor der letzten oder der ausstehenden Änderung an.
    </apiDesc></apiParam><apiParam><apiItemName>afterBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>Gibt die Grenzen nach der letzten oder der ausstehenden Änderung an. 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Erstellt ein Event-Objekt mit spezifischen Informationen, die für Fenstergrenzen-Ereignisse relevant sind. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowBoundsEvent:clone"><apiName>clone</apiName><shortdesc>
    Erstellt eine Kopie des NativeWindowBoundsEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues NativeWindowBoundsEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Erstellt eine Kopie des NativeWindowBoundsEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowBoundsEvent:toString"><apiName>toString</apiName><shortdesc>
    Gibt einen String zurück, der alle Eigenschaften des NativeWindowBoundsEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des NativeWindowBoundsEvent-Objekts enthält.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Gibt einen String zurück, der alle Eigenschaften des NativeWindowBoundsEvent-Objekts enthält. Der String hat das folgende Format:
    <p><codeph>[NativeWindowBoundsEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> previousDisplayState=<i>Wert</i> currentDisplayState=<i>Wert</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowBoundsEvent:MOVE"><apiName>MOVE</apiName><shortdesc>
    Definiert den Wert der type-Eigenschaft eines move-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>move</codeph>-Ereignisobjekts. Dieses Ereignis verfügt über die folgenden Eigenschaften:
    <adobetable class="innertable">
        
         
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>Eigenschaften</entry><entry>Werte</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Die neuen Grenzen des Fensters.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Die alten Grenzen des Fensters.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NativeWindow-Objekt, dessen Status sich gerade geändert hat. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Nein.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Gibt das Objekt an, das das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:MOVING"><apiName>MOVING</apiName><shortdesc>
    Definiert den Wert der type-Eigenschaft eines moving-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>moving</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>moving</codeph>-Ereignisobjekts. Dieses Ereignis verfügt über die folgenden Eigenschaften:
    <adobetable class="innertable">
        
         
         
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Eigenschaften</entry><entry>Werte</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Die Grenzen des Fenster nach der ausstehenden Änderung.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Die Grenzen des Fenster vor der ausstehenden Änderung.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Nein.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; das Abbrechen des Ereignisses verhindert das Verschieben des Fensters.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Gibt das Objekt an, das das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NativeWindow-Objekt, dessen Status sich gerade geändert hat.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZE"><apiName>RESIZE</apiName><shortdesc>
    Definiert den Wert der Eigenschaft type eines resize-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>resize</codeph>-Ereignisobjekts. Dieses Ereignis verfügt über die folgenden Eigenschaften:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Eigenschaften</entry><entry>Werte</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Die neuen Grenzen des Fensters.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Die alten Grenzen des Fensters.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NativeWindow-Objekt, dessen Status sich gerade geändert hat. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Nein.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Gibt das Objekt an, das das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZING"><apiName>RESIZING</apiName><shortdesc>
    Definiert den Wert der type-Eigenschaft eines resizing-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resizing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>resizing</codeph>-Ereignisobjekts. Dieses Ereignis verfügt über die folgenden Eigenschaften:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Eigenschaften</entry><entry>Werte</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>Die Grenzen des Fenster nach der ausstehenden Änderung.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>Die Grenzen des Fenster vor der ausstehenden Änderung.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NativeWindow-Objekt, dessen Status sich gerade geändert hat. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Nein.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Gibt das Objekt an, das das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; das Abbrechen des Ereignisses verhindert das Verschieben des Fensters.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:afterBounds:get"><apiName>afterBounds</apiName><shortdesc>
     Die Grenzen des Fensters nach der Änderung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     Die Grenzen des Fensters nach der Änderung.
       
     <p>Wenn es sich bei dem Ereignis um <codeph>moving</codeph> (Verschieben) oder <codeph>resizing</codeph> (Größe ändern) handelt, wurden die Grenzen noch nicht geändert; <codeph>afterBounds</codeph> gibt die neuen Grenzen an, falls das Ereignis nicht abgebrochen wird. Wenn es sich bei dem Ereignis um <codeph>move</codeph> oder <codeph>resize</codeph> handelt, gibt <codeph>afterBounds</codeph> die neuen Grenzen an.
     </p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:beforeBounds:get"><apiName>beforeBounds</apiName><shortdesc>
     Die Grenzen des Fensters vor der Änderung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     Die Grenzen des Fensters vor der Änderung.  
     
     <p>Wenn es sich bei dem Ereignis um <codeph>move</codeph> oder <codeph>resize</codeph> handelt, wurden die Grenzen noch nicht geändert; <codeph>beforeBounds</codeph> gibt die aktuellen Grenzen an. Wenn es sich bei dem Ereignis um <codeph>move</codeph> oder <codeph>resize</codeph> handelt, gibt <codeph>beforeBounds</codeph> den Originalwert an.
     </p>
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
Das SystemTrayIcon-Objekt löst als Reaktion auf eine Interaktion mit der Maus Ereignisse vom Typ ScreenMouseEvent aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekt für ScreenMouseEvent-Ereignisse.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
Das SystemTrayIcon-Objekt löst als Reaktion auf eine Interaktion mit der Maus Ereignisse vom Typ ScreenMouseEvent aus.

<p>Das ScreenMouseEvent-Objekt erweitert die MouseEvent-Klasse, sodass zwei weitere Eigenschaften bereitgestellt werden, <codeph>screenX</codeph> und <codeph>screenY</codeph>, die die Mauskoordinaten in Relation zum primären Desktopbildschirm anstatt zu einem Anwendungsfenster oder der Bühne protokollieren.</p>
 
</apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#SystemTrayIcon"><linktext>flash.desktop.SystemTrayIcon</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links><adobeApiEvent id="flash.events:ScreenMouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN_rightMouseDown"><apiName>rightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ScreenMouseEvent:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
	Erstellt ein ScreenMouseEvent-Objekt, das die Mausposition in Bildschirmkoordinaten enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Die X-Position des Klicks in Bildschirmkoordinaten. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Die Y-Position des Klicks in Bildschirmkoordinaten. 
	</apiDesc></apiParam><apiParam><apiItemName>screenX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Auf <codeph>false</codeph> eingestellt, da Bildschirmmausereignisse nie fortgesetzt werden. 
	</apiDesc></apiParam><apiParam><apiItemName>screenY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Auf <codeph>false</codeph> eingestellt, da es kein Standardverhalten gibt, das abgebrochen werden kann.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Unter Windows und Linux wird damit angezeigt, ob die Strg-Taste beim Auslösen dieses Ereignisses gedrückt war. Unter Mac OS wird damit angezeigt, ob die Ctrl-Taste oder die Befehlstaste gedrückt war.
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Mit der Einstellung <codeph>true</codeph> wird angegeben, dass die Alt-Taste gedrückt war, als dieses Ereignis auftrat.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Mit der Einstellung <codeph>true</codeph> wird angegeben, dass die Umschalttaste gedrückt war, als dieses Ereignis auftrat.
	</apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Mit der Einstellung <codeph>true</codeph> wird angegeben, dass eine Maustaste gedrückt war, als dieses Ereignis auftrat.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Befehlstaste gedrückt war (nur Mac).
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Strg- oder Ctrl-Taste gedrückt war.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für ScreenMouseEvent-Objekte.
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein ScreenMouseEvent-Objekt, das die Mausposition in Bildschirmkoordinaten enthält.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ScreenMouseEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des ScreenMouseEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues ScreenMouseEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des ScreenMouseEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ScreenMouseEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt einen String zurück, der alle Eigenschaften des ScreenMouseEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des ScreenMouseEvent-Objekts enthält.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt einen String zurück, der alle Eigenschaften des ScreenMouseEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[ScreenMouseEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> status=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ScreenMouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	Die ScreenMouseEvent.CLICK-Konstante definiert den Wert der type-Eigenschaft eines click-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>ScreenMouseEvent.CLICK</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>click</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden relevanten Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Die horizontale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Die vertikale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SystemTrayIcon-Objekt unter dem Zeigegerät.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	Die ScreenMouseEvent.MOUSE_DOWN-Konstante definiert den Wert der type-Eigenschaft eines mouseDown-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>ScreenMouseEvent.MOUSE_DOWN</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>mouseDown </codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden relevanten Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Die horizontale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Die vertikale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SystemTrayIcon-Objekt unter dem Zeigegerät.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	Die ScreenMouseEvent.MOUSE_UP-Konstante definiert den Wert der type-Eigenschaft eines mouseUp-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>ScreenMouseEvent.MOUSE_UP</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>mouseUp</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden relevanten Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Die horizontale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Die vertikale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SystemTrayIcon-Objekt unter dem Zeigegerät.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	Die ScreenMouseEvent.RIGHT_CLICK-Konstante definiert den Wert der type-Eigenschaft eines rightClick-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>ScreenMouseEvent.RIGHT_CLICK</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>rightClick</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden relevanten Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Die horizontale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Die vertikale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SystemTrayIcon-Objekt unter dem Zeigegerät.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	Die ScreenMouseEvent.RIGHT_MOUSE_DOWN-Konstante definiert den Wert der type-Eigenschaft eines rightMouseDown-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>ScreenMouseEvent.RIGHT_MOUSE_DOWN</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>rightMouseDown</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden relevanten Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Die horizontale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Die vertikale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SystemTrayIcon-Objekt unter dem Zeigegerät.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	Die ScreenMouseEvent.RIGHT_MOUSE_UP-Konstante definiert den Wert der type-Eigenschaft eines rightMouseUp-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die <codeph>ScreenMouseEvent.RIGHT_MOUSE_UP</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>rightMouseUp</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden relevanten Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph>, wenn die primäre Maustaste gedrückt wird; andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> unter Windows oder Linux, wenn die Strg-Taste aktiv ist. <codeph>true</codeph> unter Mac OS, falls die Strg-Taste oder die Befehlstaste aktiv ist. Andernfalls wird <codeph>false</codeph> zurückgegeben.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> unter Mac OS, falls die Befehlstaste aktiviert ist; <codeph>false</codeph>, wenn sie deaktiviert ist. Unter Windows immer <codeph>false</codeph> </entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph>, wenn die Strg- oder Ctrl-Taste aktiv ist; <codeph>false</codeph>, wenn sie nicht aktiv ist.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>Die horizontale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>Die vertikale Koordinate, bei der das Ereignis aufgetreten ist, in Bildschirmkoordinaten.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SystemTrayIcon-Objekt unter dem Zeigegerät.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenX:get"><apiName>screenX</apiName><shortdesc>
	Die X-Position des Klicks in Bildschirmkoordinaten. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Die X-Position des Klicks in Bildschirmkoordinaten. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenY:get"><apiName>screenY</apiName><shortdesc>
	Die Y-Position des Klicks in Bildschirmkoordinaten. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	Die Y-Position des Klicks in Bildschirmkoordinaten. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
    Ein NetStream-Objekt löst ein DRMAuthenticateEvent-Objekt aus, wenn versucht wird, DRM (digitales Rechtemanagement)-verschlüsselte Inhalte abzuspielen, die bei der Authentifizierung Benutzerdaten erfordern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für DRM-fähige Objekte.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
    Ein NetStream-Objekt löst ein DRMAuthenticateEvent-Objekt aus, wenn versucht wird, DRM (digitales Rechtemanagement)-verschlüsselte Inhalte abzuspielen, die bei der Authentifizierung Benutzerdaten erfordern. 
	<p>
	Die DRMAuthenticateEvent-Prozedur ist zuständig für das Sammeln der erforderlichen Benutzerdaten (zum Beispiel Benutzernamen, Kennwort und Typ) und die Übergabe der Werte an die <codeph>NetStream.setDRMAuthenticationCredentials()</codeph>-Methode zur Authentifizierung. Jede AIR-Anwendung muss einen Mechanismus zur Verfügung stellen, mit dem die Benutzerdaten erhalten werden. Die Anwendung könnte dem Benutzer zum Beispiel eine einfache Benutzeroberfläche zur Eingabe des Benutzernamens und des Kennworts, optional auch des Typs, anzeigen.  
	</p> 
	<p>
	Wenn die Benutzerauthentifizierung fehlschlägt, startet die Anwendung einen neuen Versuch und löst ein neues DRMAuthenticateEvent-Ereignis für das NetStream-Objekts aus.
	</p>
	
	</apiDesc><example conref="examples\DRMAuthenticateEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMAuthenticateEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMAuthenticateEventExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMAuthenticateEventExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMAuthenticateEvent.DRM_AUTHENTICATE, drmAuthenticateEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

         private function drmAuthenticateEventHandler(event:DRMAuthenticateEvent):void {
            videoStream.setDRMAuthenticationCredentials("User", "password", "drm");
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()"><linktext>flash.net.NetStream.setDRMAuthenticationCredentials()</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/DRM_AUTHENTICATE"><linktext>DRMAuthenticateEvent.DRM_AUTHENTICATE</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link></related-links><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMAuthenticateEvent:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
 	    Erstellt ein Event-Objekt, das bestimmte Informationen über DRM-Authentifizierungsereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ von DRMAuthenticate-Ereignissen: <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
		</apiDesc></apiParam><apiParam><apiItemName>header</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Der verschlüsselte Inhaltsdateiheader, der vom Server bereitgestellt wird.
  		</apiDesc></apiParam><apiParam><apiItemName>userPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc> Eine vom Server bereitgestellte Eingabeaufforderung für den Benutzernamen.
		</apiDesc></apiParam><apiParam><apiItemName>passPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Eine vom Server bereitgestellte Eingabeaufforderung für das Kennwort.
		</apiDesc></apiParam><apiParam><apiItemName>urlPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Eine vom Server bereitgestellte Eingabeaufforderung für eine anzuzeigende URL.
		</apiDesc></apiParam><apiParam><apiItemName>authenticationType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Zeigt an, ob die angegebenen Benutzerdaten für die Authentifizierung für den Flash Media Rights Management Server (FMRMS) oder eine Proxyserver bestimmt sind.
		</apiDesc></apiParam><apiParam><apiItemName>netstream</apiItemName><apiOperationClassifier>flash.net:NetStream</apiOperationClassifier><apiData>null</apiData><apiDesc>Das NetStream-Objekt, das dieses Ereignis eingeleitet hat.
 	    
 	    </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	    Erstellt ein Event-Objekt, das bestimmte Informationen über DRM-Authentifizierungsereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticateEvent:clone"><apiName>clone</apiName><shortdesc>
		Erstellt eine Kopie des DRMAuthenticateEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues DRMAuthenticateEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Erstellt eine Kopie des DRMAuthenticateEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMAuthenticateEvent:toString"><apiName>toString</apiName><shortdesc>
		Gibt einen String zurück, der alle Eigenschaften des DRMAuthenticateEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des DRMAuthenticateEvent-Objekts enthält.
		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Gibt einen String zurück, der alle Eigenschaften des DRMAuthenticateEvent-Objekts enthält. Der String liegt im folgenden Format vor: 
     	<p><codeph>[DRMAuthenticateEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> eventPhase=<i>Wert</i> header=<i>Wert</i> usernamePrompt=<i>Wert</i> passwordPrompt=<i>Wert</i> urlPrompt=<i>Wert</i>] authenticationType=<i>Wert</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM"><apiName>AUTHENTICATION_TYPE_DRM</apiName><shortdesc>
		Die DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM-Konstante definiert den Wert der authenticationType-Eigenschaft eines DRMAuthenticateEvent-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drm</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Die <codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM</codeph>-Konstante definiert den Wert der <codeph>authenticationType</codeph>-Eigenschaft eines DRMAuthenticateEvent-Objekts. 
		
		<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Zeigt an, ob die angegebenen Benutzerdaten für die Authentifizierung für den Flash Media Rights Management Server (FMRMS) oder eine Proxyserver bestimmt sind.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>header</codeph></entry><entry>Der verschlüsselte Inhaltsdateiheader, der vom Server bereitgestellt wird.</entry></row><row><entry><codeph>netstream</codeph></entry><entry>Das NetStream-Objekt, das dieses Ereignis eingeleitet hat.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>Eine vom Server bereitgestellte Eingabeaufforderung für das Kennwort.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NetStream-Objekt.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>Eine vom Server bereitgestellte Eingabeaufforderung für eine anzuzeigende URL.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>Eine vom Server bereitgestellte Eingabeaufforderung für den Benutzernamen.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY"><apiName>AUTHENTICATION_TYPE_PROXY</apiName><shortdesc>
		Die DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY-Konstante definiert den Wert der authenticationType-Eigenschaft eines DRMAuthenticateEvent-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proxy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Die <codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY</codeph>-Konstante definiert den Wert der <codeph>authenticationType</codeph>-Eigenschaft eines DRMAuthenticateEvent-Objekts. 
		
		<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Zeigt an, ob die angegebenen Benutzerdaten für die Authentifizierung für den Flash Media Rights Management Server (FMRMS) oder eine Proxyserver bestimmt sind.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>header</codeph></entry><entry>Der verschlüsselte Inhaltsdateiheader, der vom Server bereitgestellt wird.</entry></row><row><entry><codeph>netstream</codeph></entry><entry>Das NetStream-Objekt, das dieses Ereignis eingeleitet hat.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>Eine vom Server bereitgestellte Eingabeaufforderung für das Kennwort.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NetStream-Objekt.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>Eine vom Server bereitgestellte Eingabeaufforderung für eine anzuzeigende URL.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>Eine vom Server bereitgestellte Eingabeaufforderung für den Benutzernamen.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE"><apiName>DRM_AUTHENTICATE</apiName><shortdesc>
		Die DRMAuthenticateEvent.DRM_AUTHENTICATE-Konstante definiert den Wert der type-Eigenschaft eines DRMAuthenticateEvent-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmAuthenticate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Die <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines DRMAuthenticateEvent-Objekts. 
		
		<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Zeigt an, ob die angegebenen Benutzerdaten für die Authentifizierung für den Flash Media Rights Management Server (FMRMS) oder eine Proxyserver bestimmt sind.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>header</codeph></entry><entry>Der verschlüsselte Inhaltsdateiheader, der vom Server bereitgestellt wird.</entry></row><row><entry><codeph>netstream</codeph></entry><entry>Das NetStream-Objekt, das dieses Ereignis eingeleitet hat.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>Eine vom Server bereitgestellte Eingabeaufforderung für das Kennwort.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NetStream-Objekt.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>Eine vom Server bereitgestellte Eingabeaufforderung für eine anzuzeigende URL.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>Eine vom Server bereitgestellte Eingabeaufforderung für den Benutzernamen.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:authenticationType:get"><apiName>authenticationType</apiName><shortdesc>
		Zeigt an, ob die angegebenen Benutzerdaten für die Authentifizierung für Flash Media Rights Management Server (FMRMS) oder eine Proxyserver bestimmt sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.authenticationType, authenticationType
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Zeigt an, ob die angegebenen Benutzerdaten für die Authentifizierung für Flash Media Rights Management Server (FMRMS) oder eine Proxyserver bestimmt sind. Die <codeph>"proxy"</codeph>-Option ermöglicht der Anwendung zum Beispiel die Authentifizierung für einen Proxyserver, wenn ein Unternehmen diesen Schritt verlangt, bevor der Benutzer Zugriff auf das Internet hat. Sofern keine anonyme Authentifizierung verwendet wird, muss sich der Benutzer nach der Proxyauthentifizierung immer noch für den FMRMS authentifizieren, um den Gutschein zu erhalten und den Inhalt abzuspielen. Sie können <codeph>setDRMAuthenticationcredentials()</codeph> ein zweites Mal verwenden, diesmal mit der <codeph>"drm"</codeph>-Option, um die Authentifizierung für den FMRMS auszuführen.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:header:get"><apiName>header</apiName><shortdesc>
		Der verschlüsselte Inhaltsdateiheader, der vom Server bereitgestellt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.header, header
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Der verschlüsselte Inhaltsdateiheader, der vom Server bereitgestellt wird. Er enthält Informationen über den Kontext des verschlüsselten Inhalts.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:netstream:get"><apiName>netstream</apiName><shortdesc>
		Das NetStream-Objekt, das dieses Ereignis eingeleitet hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.netstream, netstream
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.net:NetStream</apiValueClassifier></apiValueDef><apiDesc>
		Das NetStream-Objekt, das dieses Ereignis eingeleitet hat.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:passwordPrompt:get"><apiName>passwordPrompt</apiName><shortdesc>
		Eine vom Server bereitgestellte Eingabeaufforderung für das Kennwort.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.passwordPrompt, passwordPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Eine vom Server bereitgestellte Eingabeaufforderung für das Kennwort. Der String kann Anweisungen enthalten, die den erforderlichen Typ des Kennworts betreffen.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:urlPrompt:get"><apiName>urlPrompt</apiName><shortdesc>
		Eine vom Server bereitgestellte Eingabeaufforderung für eine URL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.urlPrompt, urlPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Eine vom Server bereitgestellte Eingabeaufforderung für eine URL. Der String kann angeben, wohin Benutzername und Kennwort gesendet werden.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:usernamePrompt:get"><apiName>usernamePrompt</apiName><shortdesc>
		Eine vom Server bereitgestellte Eingabeaufforderung für den Benutzernamen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.usernamePrompt, usernamePrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Eine vom Server bereitgestellte Eingabeaufforderung für den Benutzernamen. Der String kann Anweisungen enthalten, die den erforderlichen Typ des Benutzernamens betreffen. Ein Content-Provider könnte zum Beispiel eine E-Mail-Adresse als Benutzernamen verlangen.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
 Ein InteractiveObject löst ein ContextMenuEvent-Objekt aus, wenn der Benutzer das Kontextmenü öffnet oder damit interagiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für ContextMenuEvent-Ereignisse.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein InteractiveObject löst ein ContextMenuEvent-Objekt aus, wenn der Benutzer das Kontextmenü öffnet oder damit interagiert. Es gibt zwei Arten von ContextMenuEvent-Objekten:
 <ul>
   <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
   <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\ContextMenuEventExample.as"> Im folgenden Beispiel wird die Klasse <codeph>ContextMenuEventExample</codeph> zur Entfernung des Standard-Kontextmenüs von der Bühne und zum Hinzufügen eines neuen Menüpunkts, mit dem die Farbe eines Quadrats auf der Bühne geändert wird, verwendet. In diesem Beispiel werden die folgenden Aufgaben ausgeführt:
 
 <ol>
     <li>Die Eigenschaft <codeph>myContextMenu</codeph> wird deklariert, und anschließend wird ein neues ContextMenu-Objekt mit der Eigenschaft <codeph>redRectangle</codeph> (vom Typ "Sprite") deklariert.</li>
     <li>Die Methode <codeph>removeDefaultItems()</codeph> wird aufgerufen. Bei dieser Methode werden alle integrierten Kontextmenüelemente mit Ausnahme der Option zum Drucken entfernt.</li>
 
     <li>Die Methode <codeph>addCustomMenuItems()</codeph> wird aufgerufen. Bei dieser Methode wird das <codeph>defaultItems</codeph>-Array um eine Option <codeph>ReverseColours</codeph> zur Farbumkehr erweitert. Hierfür wird die <codeph>push()</codeph>-Methode "Array" eingesetzt. Ein <codeph>menuItemSelect</codeph>-Ereignis-Listener wird dem ContextMenuItem-Objekt hinzugefügt. Die verknüpfte Methode lautet <codeph>menuItemSelectHandler()</codeph>. Bei dieser Methode werden einige <codeph>trace()</codeph>-Anweisungen gedruckt, wenn der Benutzer die Option zur Farbumkehr im Kontextmenü wählt. Außerdem wird das rote Quadrat schwarz und der schwarze Text rot.</li>
 
     <li>Im Konstruktor wird ein <codeph>menuSelect</codeph>-Ereignis-Listener zusammen mit der verknüpften Methode <codeph>menuSelectHandler()</codeph> hinzugefügt. Hiermit werden drei <codeph>trace()</codeph>-Anweisungen gedruckt, wenn ein Element im Kontextmenü ausgewählt wird.</li>
 
 <li>Der Konstruktor ruft die Methode <codeph>addChildren()</codeph> auf, mit der ein rotes Quadrat gezeichnet und der Anzeigeliste hinzugefügt wird. Das Quadrat wird sofort angezeigt.</li>
 
     <li>Zum Schluss wird <codeph>myContextMenu</codeph> dem Kontextmenü der Eigenschaft <codeph>redRectangle</codeph> zugewiesen, sodass das benutzerdefinierte Kontextmenü nur angezeigt wird, wenn sich der Mauszeiger über dem Quadrat befindet.</li>
 </ol>
<codeblock>
package {
    import flash.ui.ContextMenu;
    import flash.ui.ContextMenuItem;
    import flash.ui.ContextMenuBuiltInItems;
    import flash.events.ContextMenuEvent;
    import flash.display.Sprite;
    import flash.display.Shape;
    import flash.text.TextField;

    public class ContextMenuEventExample extends Sprite {
        private var myContextMenu:ContextMenu;
        private var menuLabel:String = "Reverse Colors";
        private var textLabel:String = "Right Click";
        private var redRectangle:Sprite;
        private var label:TextField;
        private var size:uint = 100;
        private var black:uint = 0x000000;
        private var red:uint = 0xFF0000;

        public function ContextMenuEventExample() {
            myContextMenu = new ContextMenu();
            removeDefaultItems();
            addCustomMenuItems();
            myContextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);

            addChildren();
            redRectangle.contextMenu = myContextMenu;
        }

        private function addChildren():void {
            redRectangle = new Sprite();
            redRectangle.graphics.beginFill(red);
            redRectangle.graphics.drawRect(0, 0, size, size);
            addChild(redRectangle);
            redRectangle.x = size;
            redRectangle.y = size;
            label = createLabel();
            redRectangle.addChild(label);
        }

        private function removeDefaultItems():void {
            myContextMenu.hideBuiltInItems();
            var defaultItems:ContextMenuBuiltInItems = myContextMenu.builtInItems;
            defaultItems.print = true;
        }

        private function addCustomMenuItems():void {
            var item:ContextMenuItem = new ContextMenuItem(menuLabel);
            myContextMenu.customItems.push(item);
            item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
        }

        private function menuSelectHandler(event:ContextMenuEvent):void {
            trace("menuSelectHandler: " + event);
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            trace("menuItemSelectHandler: " + event);
            var textColor:uint = (label.textColor == black) ? red : black;
            var bgColor:uint = (label.textColor == black) ? black : red;
            redRectangle.graphics.clear();
            redRectangle.graphics.beginFill(bgColor);
            redRectangle.graphics.drawRect(0, 0, size, size);
            label.textColor = textColor;
        }

        private function createLabel():TextField {
            var txtField:TextField = new TextField();
            txtField.text = textLabel;
            return txtField;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.ui.xml#ContextMenu"><linktext>ContextMenu-Klasse</linktext></link><link href="flash.ui.xml#ContextMenuItem"><linktext>ContextMenuItem-Klasse</linktext></link></related-links><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT_menuItemSelect"><apiName>menuItemSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_ITEM_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_SELECT_menuSelect"><apiName>menuSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ContextMenuEvent:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt, das bestimmte Informationen über Menüereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Folgende Werte sind möglich:
	<ul>
	    <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
	    <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
	</ul>
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
	</apiDesc></apiParam><apiParam><apiItemName>mouseTarget</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Das Anzeigelistenobjekt, auf das der Benutzer mit rechts geklickt hat, um das Kontextmenü anzuzeigen. Hierbei kann es sich um <codeph>contextMenuOwner</codeph> oder um eines seiner untergeordneten Elemente in der Anzeigeliste handeln.
	</apiDesc></apiParam><apiParam><apiItemName>contextMenuOwner</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Das Anzeigelistenobjekt, dem das Menü zugeordnet ist. Hierbei kann es sich um <codeph>mouseTarget</codeph> oder um eines seiner übergeordneten Elemente in der Anzeigeliste handeln.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für ContextMenuEvent-Objekte.
 	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt, das bestimmte Informationen über Menüereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ContextMenuEvent/MENU_ITEM_SELECT"><linktext>ContextMenuEvent.MENU_ITEM_SELECT</linktext></link><link href="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ContextMenuEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des ContextMenuEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues ContextMenuEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des ContextMenuEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ContextMenuEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des ContextMenuEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des ContextMenuEvent-Objekts enthält.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des ContextMenuEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph> [ContextMenuEvent type= <i>value</i> bubbles= <i>value</i> cancelable= <i>value</i> ... contextMenuOwner= <i>value</i> ] </codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT"><apiName>MENU_ITEM_SELECT</apiName><shortdesc>
	Definiert den Wert der Eigenschaft "type" eines menuItemSelect-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuItemSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>menuItemSelect</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
		<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>Das Anzeigelistenobjekt, dem das Menü zugeordnet ist.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>Das Anzeigelistenobjekt, auf das der Benutzer mit rechts geklickt hat, um das Kontextmenü anzuzeigen.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das ausgewählte ContextMenuItem-Objekt. Das Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:MENU_SELECT"><apiName>MENU_SELECT</apiName><shortdesc>
	Definiert den Wert der Eigenschaft "type" eines menuSelect-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>menuSelect</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>Das Anzeigelistenobjekt, dem das Menü zugeordnet ist.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>Das Anzeigelistenobjekt, auf das der Benutzer mit rechts geklickt hat, um das Kontextmenü anzuzeigen.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das ContextMenu-Objekt, das angezeigt werden soll. Das Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:contextMenuOwner:get"><apiName>contextMenuOwner</apiName><shortdesc>
	Das Anzeigelistenobjekt, dem das Menü zugeordnet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Das Anzeigelistenobjekt, dem das Menü zugeordnet ist. Hierbei kann es sich um ein Mausziel (<codeph>mouseTarget</codeph>) oder um eines seiner übergeordneten Elemente in der Anzeigeliste handeln.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ContextMenuEvent:isMouseTargetInaccessible:get"><apiName>isMouseTargetInaccessible</apiName><shortdesc>
	 Gibt an, ob die mouseTarget-Eigenschaft aus Sicherheitsgründen auf null gesetzt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob die <codeph>mouseTarget</codeph>-Eigenschaft aus Sicherheitsgründen auf <codeph>null</codeph> gesetzt wurde. Ist der Nominalwert von <codeph>menuTarget</codeph> ein Verweis auf ein <codeph>DisplayObject</codeph> in einer anderen Sicherheitssandbox, wird <codeph>menuTarget</codeph> auf <codeph>null</codeph> gesetzt, es sei denn, die Berechtigung gilt über die Sandboxgrenzen hinweg für beide Richtungen. Die Berechtigung wird durch das Aufrufen von <codeph>Security.allowDomain()</codeph> aus einer SWF-Datei hergestellt, oder indem vom Server der Bilddatei eine Richtliniendatei bereitgestellt und das <codeph>LoaderContext.checkPolicyFile</codeph>-Flag beim Laden des Bilds gesetzt wird.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/mouseTarget"><linktext>ContextMenuEvent.mouseTarget</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:mouseTarget:get"><apiName>mouseTarget</apiName><shortdesc>
	Das Anzeigelistenobjekt, auf das der Benutzer mit rechts geklickt hat, um das Kontextmenü anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Das Anzeigelistenobjekt, auf das der Benutzer mit rechts geklickt hat, um das Kontextmenü anzuzeigen. Hierbei kann es sich um das Anzeigelistenobjekt handeln, mit dem das Menü verknüpft ist (<codeph>contextMenuOwner</codeph>), oder um eines seiner untergeordneten Elemente in der Anzeigeliste.
	<p>Der Wert dieser Eigenschaft kann in zwei Fällen <codeph>null</codeph> sein: Wenn kein Mausziel vorhanden ist (beispielsweise, wenn Sie die Maus über den Hintergrund bewegen) oder wenn eines vorhanden ist, dieses aber eine Sicherheitssandbox ist, auf die Sie keinen Zugriff haben. Verwenden Sie die <codeph>isMouseTargetInaccessible()</codeph>-Eigenschaft, um festzustellen, welcher dieser Gründe zutrifft.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/isMouseTargetInaccessible"><linktext>ContextMenuEvent.isMouseTargetInaccessible</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
 Adobe AIR löst SQLEvent-Objekte aus, wenn einer der Vorgänge, die von einer SQLConnection-Instanz oder einer SQLStatement-Instanz ausgeführt werden, erfolgreich abgeschlossen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Adobe AIR löst SQLEvent-Objekte aus, wenn einer der Vorgänge, die von einer SQLConnection-Instanz oder einer SQLStatement-Instanz ausgeführt werden, erfolgreich abgeschlossen wird.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLEvent:ANALYZE_analyze"><apiName>analyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ATTACH_attach"><apiName>attach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ATTACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:BEGIN_begin"><apiName>begin</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:BEGIN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CANCEL_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMMIT_commit"><apiName>commit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMMIT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMPACT_compact"><apiName>compact</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMPACT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DEANALYZE_deanalyze"><apiName>deanalyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DEANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DETACH_detach"><apiName>detach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DETACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:OPEN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:REENCRYPT_reencrypt"><apiName>reencrypt</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:REENCRYPT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:RESULT_result"><apiName>result</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:RESULT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ROLLBACK_rollback"><apiName>rollback</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ROLLBACK</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:SCHEMA_schema"><apiName>schema</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:SCHEMA</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLEvent:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
     Erstellt ein SQLEvent-Objekt, das als ein Parameter an Ereignis-Listener übergeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Typ des Ereignisses, verfügbar in der <codeph>type</codeph>-Eigenschaft.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Der Standardwert ist <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Der Standardwert ist <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Dient zum Erstellen eines neuen SQLEvent-Objekts.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Erstellt ein SQLEvent-Objekt, das als ein Parameter an Ereignis-Listener übergeben wird.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLEvent:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine Kopie des SQLEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues SQLEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine Kopie des SQLEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLEvent:ANALYZE"><apiName>ANALYZE</apiName><shortdesc>
     Die SQLEvent.ANALYZE-Konstante definiert den Wert der type-Eigenschaft eines analyze-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>analyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.ANALYZE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>analyze</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.analyze()</codeph>-Methode erfolgreich abgeschlossen wird. Das <codeph>analyze</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ATTACH"><apiName>ATTACH</apiName><shortdesc>
     Die SQLEvent.ATTACH-Konstante definiert den Wert der type-Eigenschaft eines attach-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>attach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.ATTACH</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>attach</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.attach()</codeph>-Methode erfolgreich abgeschlossen wird. Das <codeph>attach</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:BEGIN"><apiName>BEGIN</apiName><shortdesc>
     Die SQLEvent.BEGIN-Konstante definiert den Wert der type-Eigenschaft eines begin-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>begin</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.BEGIN</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>begin</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.begin()</codeph>-Methode erfolgreich abgeschlossen wird. Das <codeph>begin</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CANCEL"><apiName>CANCEL</apiName><shortdesc>
     Die SQLEvent.CANCEL-Konstante definiert den Wert der type-Eigenschaft eines cancel-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.CANCEL</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>cancel</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.cancel()</codeph>-Methode erfolgreich abgeschlossen wird. Das <codeph>cancel</codeph>-Ereignis hat folgende Eigenschaften:
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection- oder SQLStatement-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
     Die SQLEvent.CLOSE-Konstante definiert den Wert der type-Eigenschaft eines close-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.CLOSE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>close</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.close()</codeph>-Methode erfolgreich abgeschlossen wird. Das <codeph>close</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMMIT"><apiName>COMMIT</apiName><shortdesc>
     Die SQLEvent.COMMIT-Konstante definiert den Wert der type-Eigenschaft eines commit-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>commit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.COMMIT</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>commit</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.commit()</codeph>-Methode erfolgreich abgeschlossen wird. Das <codeph>commit</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMPACT"><apiName>COMPACT</apiName><shortdesc>
     Die SQLEvent.COMPACT-Konstante definiert den Wert der type-Eigenschaft eines compact-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compact</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.COMPACT</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>compact</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.compact()</codeph>-Methode erfolgreich abgeschlossen wird. Das <codeph>compact</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DEANALYZE"><apiName>DEANALYZE</apiName><shortdesc>
     Die SQLEvent.DEANALYZE-Konstante definiert den Wert der type-Eigenschaft eines deanalyze-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deanalyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.DEANALYZE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>deanalyze</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.deanalyze()</codeph>-Methode erfolgreich abgeschlossen wird. Das <codeph>deanalyze</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DETACH"><apiName>DETACH</apiName><shortdesc>
     Die SQLEvent.DETACH-Konstante definiert den Wert der type-Eigenschaft eines detach-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>detach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.DETACH</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>detach</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.detach()</codeph>-Methode erfolgreich abgeschlossen wird.
     
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:OPEN"><apiName>OPEN</apiName><shortdesc>
     Die SQLEvent.OPEN-Konstante definiert den Wert der type-Eigenschaft eines open-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.OPEN</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>open</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.detach()</codeph>- oder <codeph>SQLConnection.openAsync()</codeph>Methode erfolgreich abgeschlossen wird. Das <codeph>open</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:REENCRYPT"><apiName>REENCRYPT</apiName><shortdesc>
     Die SQLEvent.REENCRYPT-Konstante definiert den Wert der type-Eigenschaft eines reencrypt-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reencrypt</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.REENCRYPT</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>reencrypt</codeph>-Ereignisobjekts. Dieser Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.reencrypt()</codeph>-Methode erfolgreich abgeschlossen wird. Das <codeph>reencrypt</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:RESULT"><apiName>RESULT</apiName><shortdesc>
     Die SQLEvent.RESULT-Konstante definiert den Wert der type-Eigenschaft eines result-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>result</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.RESULT</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>result</codeph>-Ereignisobjekts. Wird ausgelöst, wenn die <codeph>SQLStatement.execute()</codeph>- oder <codeph>SQLStatement.next()</codeph>-Methode erfolgreich abgeschlossen wird. Nachdem das <codeph>SQLEvent.RESULT</codeph>-Ereignis ausgelöst wurde, kann die <codeph>SQLStatement.getResult()</codeph>-Methode aufgerufen werden, um auf die Ergebnisdaten zuzugreifen. Das <codeph>result</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLStatement-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ROLLBACK"><apiName>ROLLBACK</apiName><shortdesc>
     Die SQLEvent.ROLLBACK-Konstante definiert den Wert der type-Eigenschaft eines rollback-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollback</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.ROLLBACK</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>rollback</codeph>-Ereignisobjekts. Der Ereignistyp wird ausgelöst, wenn ein Aufruf der <codeph>SQLConnection.rollback()</codeph>-Methode erfolgreich abgeschlossen wird. Das <codeph>rollback</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:SCHEMA"><apiName>SCHEMA</apiName><shortdesc>
     Die SQLEvent.SCHEMA-Konstante definiert den Wert der type-Eigenschaft eines schema-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>schema</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLEvent.SCHEMA</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>schema</codeph>-Ereignisobjekts. Wird ausgelöst, wenn die <codeph>SQLConnection.loadSchema()</codeph>-Methode erfolgreich abgeschlossen wurde. Nachdem das <codeph>SQLEvent.SCHEMA</codeph>-Ereignis ausgelöst wurde, können mit der <codeph>SQLConnection.getSchemaResult()</codeph>-Methode die Schemainformationen abgerufen werden. Das <codeph>schema</codeph>-Ereignis hat folgende Eigenschaften:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, das den Vorgang ausgeführt hat.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
 Ein SQLUpdateEvent-Objekt wird von einem SQLConnection-Objekt ausgelöst, wenn in einer Tabelle, die der SQLConnection-Instanz zugeordnet ist, Daten geändert werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein SQLUpdateEvent-Objekt wird von einem SQLConnection-Objekt ausgelöst, wenn in einer Tabelle, die der SQLConnection-Instanz zugeordnet ist, Daten geändert werden. Eine Datenänderung kann auftreten, wenn eine SQL <codeph>INSERT</codeph>-, <codeph>UPDATE</codeph>- oder <codeph>DELETE</codeph>-Anweisung ausgeführt wurde, entweder direkt oder als Ergebnis einer Auslösung in Verbindung mit der Ausführung der Anweisung.
 
 </apiDesc><example conref="examples\SQLUpdateEvent.class.1.as"> Im folgenden Beispiel wird die Verwendung einer SQLUpdateEvent-Instanz als Antwort auf ein <codeph>update</codeph>-Ereignis gezeigt.
<codeblock>

var dbStatement:SQLStatement;

function initConnection():void
{
    var dbFile:File = new File(File.separator + "employee.db");
    db.addEventListener(SQLEvent.OPEN, dbOpenHandler);
    db.addEventListener(SQLUpdateEvent.UPDATE, dbUpdateHandler);

    dbStatement.text = "UPDATE employees SET name = :name WHERE id = :id";
    dbStatement.parameters[:name] = "Bruce";
    dbStatement.parameters[:id] = 100;

    dbStatement.sqlConnection = db;

    db.open(dbFile);
}

function dbUpdateHandler(event:SQLUpdateEvent):void
{
    trace(event.type + " for table '" + event.table + "' was fired for row with ID:" + event.rowID);
}

function dbOpenHandler(event:SQLEvent):void
{
    dbStatement.execute();
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.events:SQLUpdateEvent:DELETE_delete"><apiName>delete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:DELETE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:INSERT_insert"><apiName>insert</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:INSERT</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:UPDATE_update"><apiName>update</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:UPDATE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:SQLUpdateEvent:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
     Erstellt eine neue SQLUpdateEvent-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Typ des Ereignisses, verfügbar über die <codeph>type</codeph>-Eigenschaft.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Der Standardwert ist <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Der Standardwert ist <codeph>false</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>table</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Gibt den Namen der Tabelle an, deren Daten geändert wurden.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>rowID</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Der eindeutige Zeilenbezeichner der Zeile, die eingefügt, gelöscht oder aktualisiert wurde.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Dient zum Erstellen eines neuen SQLUpdateEvent-Objekts.
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Erstellt eine neue SQLUpdateEvent-Instanz.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLUpdateEvent:clone"><apiName>clone</apiName><shortdesc>
     Erstellt eine Kopie des SQLUpdateEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues SQLUpdateEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
     
     </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     Erstellt eine Kopie des SQLUpdateEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLUpdateEvent:DELETE"><apiName>DELETE</apiName><shortdesc>
     Die SQLUpdateEvent.DELETE-Konstante definiert den Wert der type-Eigenschaft eines delete-SQLConnection-Ereignisses.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>delete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLUpdateEvent.DELETE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>delete</codeph>-SQLConnection-Ereignisses. Das <codeph>delete</codeph>-Ereignis hat folgende Eigenschaften:
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>Der eindeutige Zeilenbezeichner der Zeile, die eingefügt, gelöscht oder aktualisiert wurde.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, für das der Vorgang ausgeführt wurde.</entry></row><row><entry><codeph>table</codeph></entry><entry>Der Name der Tabelle, in der die Änderung aufgetreten ist.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:INSERT"><apiName>INSERT</apiName><shortdesc>
     Die SQLUpdateEvent.INSERT-Konstante definiert den Wert der type-Eigenschaft eines insert-SQLConnection-Ereignisses.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insert</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die <codeph>SQLUpdateEvent.INSERT</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>insert</codeph>-SQLConnection-Ereignisses. Das <codeph>insert</codeph>-Ereignis hat folgende Eigenschaften:
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>Der eindeutige Zeilenbezeichner der Zeile, die eingefügt, gelöscht oder aktualisiert wurde.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, für das der Vorgang ausgeführt wurde.</entry></row><row><entry><codeph>table</codeph></entry><entry>Der Name der Tabelle, in der die Änderung aufgetreten ist.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:UPDATE"><apiName>UPDATE</apiName><shortdesc>
	 Die SQLUpdateEvent.UPDATE-Konstante definiert den Wert der type-Eigenschaft eines update-SQLConnection-Ereignisses.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Die <codeph>SQLUpdateEvent.UPDATE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>update</codeph>-SQLConnection-Ereignisses.
	 
	 <p>Das <codeph>update</codeph>-Ereignis hat folgende Eigenschaften:</p>
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>Der eindeutige Zeilenbezeichner der Zeile, die eingefügt, gelöscht oder aktualisiert wurde.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das SQLConnection-Objekt, für das der Vorgang ausgeführt wurde.</entry></row><row><entry><codeph>table</codeph></entry><entry>Der Name der Tabelle, in der die Änderung aufgetreten ist.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:rowID:get"><apiName>rowID</apiName><shortdesc>
     Der eindeutige Zeilenbezeichner der Zeile, die eingefügt, gelöscht oder aktualisiert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     Der eindeutige Zeilenbezeichner der Zeile, die eingefügt, gelöscht oder aktualisiert wurde.
	 
	 <p>Ein Zeilenbezeichner wird verwenden, um eine Zeile in einer Tabelle einer Datenbank eindeutig zu identifizieren. Der Wert wird häufig von der Datenbank generiert.</p>
	 
	 <p>Den Zeilenbezeichner für eine einzelne SQL <codeph>INSERT</codeph>-Anweisung erhalten Sie über die <codeph>lastInsertRowID</codeph>-Eigenschaft des SQLResult-Objekts, das von der <codeph>getResult()</codeph>-Methode des SQLStatement-Objekts zurückgegeben wird (wenn der Aufruf erfolgt, nachdem das SQLStatement das <codeph>result</codeph>-Ereignis auslöst).</p>
	 
	 <p>Weitere Informationen zu Primärschlüsseln und generierten Zeilenbezeichnern finden Sie in den Abschnitten „<xref href="../../localDatabaseSQLSupport.html#createTable">CREATE TABLE</xref>“ und „<xref href="../../localDatabaseSQLSupport.html#expressions">Ausdrücke</xref>“ im Anhang „<xref href="../../localDatabaseSQLSupport.html">SQL-Unterstützung in lokalen Datenbanken</xref>“.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/lastInsertRowID"><linktext>flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.data.xml#SQLResult/lastInsertRowID"><linktext>flash.data.SQLResult.lastInsertRowID</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLUpdateEvent:table:get"><apiName>table</apiName><shortdesc>
     Der Name der Tabelle, deren Datenänderung zur Auslösung des Ereignisses geführt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Der Name der Tabelle, deren Datenänderung zur Auslösung des Ereignisses geführt hat.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
	AIR löst ein DRMErrorEvent-Objekt aus, wenn ein NetStream-Objekt versucht, eine mit DRM (Digital Rights Management) verschlüsselte Datei abzuspielen und dabei ein DRM-Fehler auftritt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für DRM-fähige Objekte.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	AIR löst ein DRMErrorEvent-Objekt aus, wenn ein NetStream-Objekt versucht, eine mit DRM (Digital Rights Management) verschlüsselte Datei abzuspielen und dabei ein DRM-Fehler auftritt. Ein DRMErrorEvent-Objekt wird zum Beispiel ausgelöst, wenn der Content-Provider die Anzeigeanwendung nicht unterstützt oder wenn die Autorisierung des Benutzers fehlschlägt, weil der Benutzer den Inhalt möglicherweise nicht gekauft hat.
	<p>
	Bei ungültigen Benutzerdaten verarbeitet das DRMAuthenticateEvent-Objekt den Fehler, indem die Auslösung wiederholt erfolgt, bis der Benützer gültige Daten eingibt oder bis die AIR-Anwendung weitere Versuche verhindert. Die Anwendung sollte alle anderen DRM-Fehlerereignisse überwachen, um die DRM-bezogenen Fehler zu erkennen, zu identifizieren und zu verarbeiten.
	</p>
	<p>
	Diese Klasse stellt Eigenschaften bereit, die das Objekt enthalten, das den Fehler ausgegeben hat, sowie den Fehlercode und, falls zutreffend, einen untergeordneten Fehlercode und eine Textnachricht, die Informationen zum Fehler enthält.
	</p> 
	
	<adobetable class="innertable">
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
 	  
 	  
 	  
 	  
 	  
	<tgroup cols="4"><thead><row><entry>Fehlercode</entry><entry>Untergeordneter Fehlercode</entry><entry>Fehlerdetails</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	    <entry><codeph>3300</codeph></entry>
	    <entry><codeph><i>Adobe Policy Server-Fehlercode</i></codeph></entry>
	    <entry>–</entry>
	    <entry>Die Anwendung hat einen ungültigen Gutschein erkannt, der mit dem Inhalt verknüpft ist.</entry>
	  </row><row>
	    <entry><codeph>3301</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Die Benutzerauthentifizierung ist fehlgeschlagen.</entry>
	  </row><row>
	    <entry><codeph>3302</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Secure Sockets Layer (SSL) wird vom Flash Media Rights Management Server (FMRMS) nicht unterstützt.</entry>
	  </row><row>
	    <entry><codeph>3303</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Der Inhalt ist abgelaufen und steht nicht mehr für die Anzeige zur Verfügung.</entry>
	  </row><row>
	    <entry><codeph>3304</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Die Benutzerautorisierung ist fehlgeschlagen. Dies kann auch dann auftreten, wenn der Benutzer authentifiziert wurde, zum Beispiel, wenn der Benutzer nicht die Berechtigung zum Anzeigen des Inhalts erworben hat.</entry>
	  </row><row>
	    <entry><codeph>3305</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>Server URL</i></codeph></entry>
	    <entry>Verbindung zum Server kann nicht hergestellt werden.</entry>
	  </row><row>
	    <entry><codeph>3306</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Es ist ein Client-Update erforderlich; Flash Media Rights Management Server benötigt eine neue DRM-Client-Engine.</entry>
	  </row><row>
	    <entry><codeph>3307</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Allgemeiner interner DRM-Fehler.</entry>
	  </row><row>
	    <entry><codeph>3308</codeph></entry>
	    <entry><codeph><i>Ausführlicher Entschlüsselungsfehlercode</i></codeph></entry>
	    <entry>–</entry>
	    <entry>Falscher Lizenzschlüssel.</entry>
	  </row><row>
	    <entry><codeph>3309</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Videoinhalt ist beschädigt.</entry>
	  </row><row>
	    <entry><codeph>3310</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>publisherID</i>:<i>applicationID</i></codeph></entry>
	    <entry>Die ID der Anzeigeanwendung entspricht keiner gültigen ID; die vom Herausgeber des Inhalts unterstützt wird. Der Content Provider unterstützt die Anwendung nicht.</entry>
	  </row><row>
	    <entry><codeph>3311</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph>Min=x:max=y</codeph></entry>
	    <entry>Anwendungsversion entspricht nicht dem Angaben im Gutschein.</entry>
	  </row><row>
	    <entry><codeph>3312</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Die Überprüfung des Gutscheins, der mit dem verschlüsselten Inhalt verknüpft ist, ist fehlgeschlagen. Dies kann darauf hindeuten, dass der Inhalt beschädigt ist.</entry>
	  </row><row>
	    <entry><codeph>3313</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Der mit dem verschlüsselten Inhalt verknüpfte Gutschein konnte nicht in Microsafe gespeichert werden.</entry>
	  </row><row>
	    <entry><codeph>3314</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Die Überprüfung der Integrität des FLV-Headers ist fehlgeschlagen. Dies kann darauf hindeuten, dass der Inhalt beschädigt ist.</entry>
	  </row><row>
	    <entry><codeph>3315</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>–</entry>
	    <entry>Die Remotewiedergabe von DRM-geschützten Inhalten ist nicht zulässig.</entry>
	  </row><row>
 	    <entry><codeph>3316</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>–</entry>
 	    <entry>AdobeCP-Modul fehlt.</entry>
 	  </row><row>
 	    <entry><codeph>3317</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>–</entry>
 	    <entry>Das AdobeCP-Modul konnte nicht geladen werden.</entry>
 	  </row><row>
 	    <entry><codeph>3318</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>–</entry>
 	    <entry>Inkompatible AdobeCP-Version gefunden.</entry>
 	  </row><row>
 	    <entry><codeph>3319</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>–</entry>
 	    <entry>Fehlender AdobeCP-API-Eingabepunkt.</entry>
 	  </row><row>
 	    <entry><codeph>3320</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>–</entry>
 	    <entry>AdobeCP-Modul ist nicht authentifiziert. </entry>
 	  </row></tbody></tgroup></adobetable>
 	
 	</apiDesc><example conref="examples\DRMErrorEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMVideoExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMVideoExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMErrorEvent.DRM_ERROR, drmErrorEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

        private function drmErrorEventHandler(event:DRMErrorEvent):void {
            trace(event.toString());
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMErrorEvent/DRM_ERROR"><linktext>DRMErrorEvent.DRM_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:DRMErrorEvent:DRM_ERROR_drmError"><apiName>drmError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMErrorEvent:DRM_ERROR</apiEventType><adobeApiEventClassifier>flash.events:DRMErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMErrorEvent:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
 	    Erstellt ein Event-Objekt, das bestimmte Informationen über DRM-Fehlerereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ von DRMAuthenticate-Ereignissen: <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
		</apiDesc></apiParam><apiParam><apiItemName>inErrorDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Die spezifischen syntaktischen Details zum Fehler (falls zutreffend).
  		</apiDesc></apiParam><apiParam><apiItemName>inErrorCode</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Der Hauptfehlercode.
		</apiDesc></apiParam><apiParam><apiItemName>insubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Die sekundäre Fehler-ID.
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
 	    Erstellt ein Event-Objekt, das bestimmte Informationen über DRM-Fehlerereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMErrorEvent:clone"><apiName>clone</apiName><shortdesc>
		Erstellt eine Kopie des DRMErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues DRMErrorEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Erstellt eine Kopie des DRMErrorEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMErrorEvent:toString"><apiName>toString</apiName><shortdesc>
		Gibt einen String zurück, der alle Eigenschaften des DRMErrorEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des DRMErrorEvent-Objekts enthält.
  		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Gibt einen String zurück, der alle Eigenschaften des DRMErrorEvent-Objekts enthält. Der String liegt im folgenden Format vor: 
     	<p><codeph>[DRMErrorEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> eventPhase=<i>Wert</i> errroID=<i>Wert</i> subErrorID=<i>Wert</i> text=<i>Wert</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMErrorEvent:DRM_ERROR"><apiName>DRM_ERROR</apiName><shortdesc>
		Die Konstante DRMErrorEvent.DRM_ERROR definiert den Wert der type-Eigenschaft eines drmError-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Die Konstante <codeph>DRMErrorEvent.DRM_ERROR</codeph> definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>drmError</codeph>-Ereignisobjekts. 
		
		<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>errorID</codeph></entry><entry>Ein dem Problem zugewiesener Fehlercode im Zahlenformat.</entry></row><row><entry><codeph>subErrorID</codeph></entry><entry>Ein Fehlercode, der ausführlichere Informationen zum zugrundeliegenden Problem angibt.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das NetStream-Objekt.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMErrorEvent:subErrorID:get"><apiName>subErrorID</apiName><shortdesc>
		Eine Fehler-ID, die ausführlichere Informationen zu dem zugrundeliegenden Problem bereitstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent.subErrorID, subErrorID
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		Eine Fehler-ID, die ausführlichere Informationen zu dem zugrundeliegenden Problem bereitstellt.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMErrorEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 Die DRMContentData für die Mediendatei.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 Die DRMContentData für die Mediendatei.
		 
		 <p>Sie können das Objekt, auf das mit der <codeph>contentData</codeph>-Eigenschaft verwiesen wird, verwenden, um den zugehörigen DRM-Gutschein aus dem Gutscheincache von DRMManager abzurufen. Die Gutscheineigenschaften beschreiben die dem Benutzer zugängliche Lizenz und erklären ggf., weshalb der DRM-geschützte Inhalt nicht angezeigt werden kann.</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
Die EventDispatcher-Klasse ist die Basisklasse für alle runtime-Klassen, die Ereignisse auslösen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die EventDispatcher-Klasse ist die Basisklasse für alle <ph platform="javascript">runtime</ph>-Klassen, die Ereignisse auslösen. <ph platform="actionscript">Die EventDispatcher-Klasse implementiert die EventDispatcher-Schnittstelle und ist die Basisklasse der DisplayObject-Klasse. In der EventDispatcher-Klasse ist es möglich, dass jedes Objekt in der Anzeigeliste ein Ereignisziel sein kann, und als solches die Methoden der IEventDispatcher-Schnittstelle verwendet.</ph>

<p platform="actionscript">Ereignisziele sind ein wichtiger Bestandteil des Ereignismodells in Flash<sup>®</sup> Player und Adobe<sup>® </sup> AIR<sup>®</sup>. Das Ereignisziel dient als zentraler Punkt bei dem Ablauf der Ereignisse durch die Hierarchie der Anzeigeliste. Wenn ein Ereignis wie ein Mausklick oder ein Tastenanschlag eintritt, sendet Flash Player oder die AIR-Anwendung vom Root der Anzeigeliste aus ein Ereignisobjekt in den Ereignisablauf. Das Ereignisobjekt durchläuft die Anzeigeliste, bis es das Ereignisziel erreicht. An diesem Punkt angekommen, beginnt es den Rückweg durch die Anzeigeliste. Dieser Weg zum Ereignisziel und zurück ist im Prinzip in drei Phasen unterteilt: die Aufnahmephase umfasst den Weg vom Root zum letzten Knoten vor dem Ereigniszielknoten, die Zielphase umfasst nur den Ereigniszielknoten, und die Bubbling-Phase umfasst alle weiteren Knoten, auf die das Objekt auf dem Rückweg zum Root der Anzeigeliste trifft.</p>

<p platform="actionscript">Im Allgemeinen besteht der einfachste Weg für eine benutzerdefinierte Klasse, die Fähigkeit zum Auslösen eines Ereignisses zu erhalten darin, die EventDispatcher-Klasse zu erweitern. Wenn dies nicht möglich ist (d. h., wenn die Klasse bereits eine andere Klasse erweitert), können Sie stattdessen die IEventDispatcher-Schnittstelle implementieren, ein EventDispatcher-Mitglied erstellen und einfache Hooks schreiben, um alle Aufrufe an einen aggregierten EventDispatcher zu leiten.</p>

<p platform="javascript">Sie können Funktionen registrieren, um Laufzeitereignisse zu verarbeiten, indem Sie die <codeph>addEventListener()</codeph>-Methode des Objekts, das das Ereignis auslöst, verwenden.</p>

</apiDesc><example conref="examples\EventDispatcherExample.as"> Im folgenden Beispiel wird anhand der Klassen <codeph>EventDispatcherExample</codeph> und <codeph>CustomDispatcher</codeph> (einer Unterklasse von <codeph>EventDispatcher</codeph>) erläutert, wie ein benutzerdefiniertes Ereignis erstellt und ausgelöst wird. In diesem Beispiel werden die folgenden Aufgaben ausgeführt:
 <ol>
     <li>Der Konstruktor von <codeph>EventDispatcherExample</codeph> erstellt eine lokale <codeph>dispatcher</codeph>-Variable und weist sie einer neuen CustomDispatcher-Instanz zu.</li>
     <li>In <codeph>CustomDispatcher</codeph> wird der Name <codeph>action</codeph> für das Ereignis über einen String festgelegt, und die Methode <codeph>doAction()</codeph> wird deklariert. Bei Aufruf erstellt diese Methode das Ereignis <codeph>action</codeph> und löst es mit der Methode <codeph>EventDispatcher.dispatchEvent()</codeph> aus.</li>
     <li>Anschließend wird die Eigenschaft <codeph>dispatcher</codeph> verwendet, um den Ereignis-Listener <codeph>action</codeph> und die verknüpfte Abonnentenmethode <codeph>actionHandler()</codeph> zum Drucken von Informationen über das Ereignis beim Auslösungszeitpunkt hinzuzufügen.</li>
     <li>Die <codeph>doAction()</codeph>-Methode wird aufgerufen, und das <codeph>action</codeph>-Ereignis wird ausgelöst.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;

    public class EventDispatcherExample extends Sprite {

        public function EventDispatcherExample() {
            var dispatcher:CustomDispatcher = new CustomDispatcher();
            dispatcher.addEventListener(CustomDispatcher.ACTION, actionHandler);
            dispatcher.doAction();
        }

        private function actionHandler(event:Event):void {
            trace("actionHandler: " + event);
        }
    }
}

import flash.events.EventDispatcher;
import flash.events.Event;

class CustomDispatcher extends EventDispatcher {
    public static var ACTION:String = "action";

    public function doAction():void {
        dispatchEvent(new Event(CustomDispatcher.ACTION));
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.DEACTIVATE_deactivate"><apiName>deactivate</apiName><shortdesc>
 [broadcast event] Wird ausgelöst, wenn Flash Player- oder die AIR-Anwendung den Fokus verliert und inaktiv wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [broadcast event] Wird ausgelöst, wenn die<ph platform="actionscript"> Flash Player- oder</ph> AIR-Anwendung den Fokus verliert und inaktiv wird. Bei diesem Ereignis handelt es sich um ein broadcast-Ereignis. Das bedeutet, dass es von allen EventDispatcher-Objekten ausgelöst wird, die einen Listener für dieses Ereignis registriert haben. <ph platform="actionscript">Weitere Informationen zu broadcast-Ereignissen finden Sie im Abschnitt zur DisplayObject-Klasse.</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.ACTIVATE_activate"><apiName>activate</apiName><shortdesc>
 [broadcast event] Wird ausgelöst, wenn Flash Player oder eine AIR-Anwendung den Betriebssystemfokus erhält und aktiv wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [broadcast event] Wird ausgelöst, wenn die<ph platform="actionscript"> Flash Player- oder</ph> AIR-Anwendung den Betriebssystemfokus erhält und aktiv wird. Bei diesem Ereignis handelt es sich um ein broadcast-Ereignis. Das bedeutet, dass es von allen EventDispatcher-Objekten ausgelöst wird, die einen Listener für dieses Ereignis registriert haben. <ph platform="actionscript">Weitere Informationen zu broadcast-Ereignissen finden Sie im Abschnitt zur DisplayObject-Klasse.</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:EventDispatcher:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
	Aggregiert eine Instanz der EventDispatcher-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flash.events:IEventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Das Zielobjekt für Ereignisse, die zum EventDispatcher-Objekt gesendet werden. <ph platform="actionscript">Dieser Parameter wird verwendet, wenn die EventDispatcher-Instanz von einer Klasse aggregiert wird, die IEventDispatcher implementiert; dies ist notwendig, damit das enthaltene Objekt als Ziel für Ereignisse verwendet werden kann. Verwenden Sie diesen Parameter nicht in einfachen Fällen, in denen eine Klasse die EventDispatcher-Klasse erweitert.</ph><ph platform="javascript">Zielobjekte sind nur relevant in Anzeigeobjekten in SWF-Inhalten, die die ActionScript 3.0-Anzeigelistenarchitektur verwenden. </ph>
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	Aggregiert eine Instanz der EventDispatcher-Klasse.
	
    <p>Die EventDispatcher-Klasse wird im Allgemeinen als Basisklasse<ph platform="javascript"> in ActionScript 3.0-Code, der in SWF-Inhalten eingesetzt wird,</ph> verwendet. Die<ph platform="actionscript"> meisten</ph> <ph platform="javascript">JavaScript-</ph>Entwickler benötigen diese Konstruktorfunktion also nicht. <ph platform="actionscript">Dennoch wird dieser Konstruktor von erfahrenen Entwicklern benötigt, die die IEventDispatcher-Schnittstelle implementieren. Wenn Sie nicht in der Lage sind, die EventDispatcher-Klasse zu erweitern und stattdessen die IEventDispatcher-Schnittstelle implementieren müssen, verwenden Sie diesen Konstruktor, um eine Instanz der EventDispatcher-Klasse zu aggregieren.</ph></p>
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:EventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	Registriert ein Ereignis-Listener-Objekt bei einem EventDispatcher-Objekt, sodass der Listener über ein Ereignis benachrichtigt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene <codeph>listener</codeph> ist keine Funktion.
	</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses.
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Die Listener-Funktion, die das Ereignis verarbeitet. Diese Funktion muss, wie das nachfolgende Beispiel zeigt, ein Ereignisobjekt als einzigen Parameter akzeptieren und keinen<ph platform="actionscript"> Wert zurückgeben: </ph> <ph platform="javascript">.</ph>
	
    <codeblock platform="actionscript">function(evt:Event):void</codeblock>
	
	<p>Der Name der Funktion ist beliebig.</p>
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">Dieser Parameter gilt für Anzeigeobjekte in der ActionScript 3.0-Anzeigelistenarchitektur, die von SWF-Material verwendet wird.</ph> <ph platform="actionscript">Legt fest, ob der Listener in der Aufnahmephase oder in der Ziel- und Bubbling-Phase arbeitet. Ist <codeph>useCapture</codeph> auf <codeph>true</codeph> gesetzt, so verarbeitet der Listener das Ereignis nur während der Aufnahmephase und nicht während der Ziel- oder Bubbling-Phase. Hat <codeph>useCapture</codeph> hingegen den Wert <codeph>false</codeph>, verarbeitet der Listener das Ereignis nur während der Ziel- oder Bubbing-Phase. Um auf das Ereignis in allen drei Phasen zu warten, rufen Sie <codeph>addEventListener()</codeph> zweimal auf; einmal ist <codeph>useCapture</codeph> auf <codeph>true</codeph> gesetzt, und beim zweiten Mal hat <codeph>useCapture</codeph> den Wert <codeph>false</codeph>.</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Die Prioritätsstufe des Ereignis-Listeners. Die Priorität wird durch eine vorzeichenbehaftete 32-Bit-Ganzzahl zugewiesen. Je höher die Zahl, desto höher die Priorität. Alle Listener mit der Priorität <i>n</i> werden vor Listenern mit der Priorität <i>n</i> -1 verarbeitet. Wenn zwei oder mehr Listener die gleiche Priorität aufweisen, werden sie in der Reihenfolge verarbeitet, in der sie hinzugefügt wurden. Die Standardpriorität ist 0.
	
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob der Verweis auf den Listener stark oder schwach ist. Ein starker Verweis (der Standard) verhindert, dass der Listener von einem Garbage Collector entfernt wird. Ein schwacher Verweis hingegen nicht. <p>Funktionen von Mitgliedern auf Klassenebene werden nicht vom Garbagekollektor entfernt. Daher können Sie <codeph>useWeakReference</codeph> für Mitgliedsfunktionen auf Klassenebene auf <codeph>true</codeph> setzen, ohne dass sie vom Garbagekollektor entfernt werden. Wenn Sie <codeph>useWeakReference</codeph> auf <codeph>true</codeph> setzen bei einem Listener, der eine verschachtelte innere Funktion ist, wird die Funktion vom Garbagekollektor entfernt. Indem Sie Verweise auf die innere Funktion erstellen (d. h sie in einer anderen Variable speichern), umgehen Sie die Garbage Collection, sodass die Funktion permanent gespeichert bleibt.</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Registriert ein Ereignis-Listener-Objekt bei einem EventDispatcher-Objekt, sodass der Listener über ein Ereignis benachrichtigt wird. <ph platform="actionscript">Sie können Ereignis-Listener bei allen Knoten in der Anzeigeliste für eine bestimmte Art von Ereignis, Phase oder Priorität registrieren.</ph>
	
	<p platform="javascript">JavaScript-Code in der AIR-Laufzeitumgebung verwendet diese Methode, um Ereignis-Listener für Ereignisse, die von den AIR-APIs definiert werden, zu registrieren. Bei anderen JavaScript-Ereignissen (wie z. B. dem <codeph>onload</codeph>-Ereignis des DOM-<codeph>body</codeph>-Objekts) können Sie Standardtechniken für Ereignisprozeduren verwenden, wie bei Inhalten, die im Browser ausgeführt werden.</p>
	
	<p>Nachdem Sie einen Ereignis-Listener erfolgreich registriert haben, können Sie seine Priorität nicht durch weitere Aufrufe von <codeph>addEventListener()</codeph> ändern. Um die Priorität eines Listeners zu ändern, müssen Sie zunächst <codeph>removeListener()</codeph> aufrufen. Anschließend können Sie den Listener mit der neuen Prioritätsstufe erneut aufrufen. </p>
	
	<p>Nach der Registrierung des Listeners haben nachfolgende Aufrufe von <codeph>addEventListener()</codeph> mit einem anderen <codeph>type</codeph>- oder <codeph>useCapture</codeph>-Wert eine separate Listener-Registrierung zur Folge. <ph platform="actionscript">Wenn Sie beispielsweise zuerst einen Listener registrieren, für den <codeph>useCapture</codeph> auf <codeph>true</codeph> gesetzt ist, wird dieser nur während der Aufnahmephase aktiv sein. Wenn Sie <codeph>addEventListener()</codeph> für dasselbe Listener-Objekt erneut aufrufen, diesmal aber <codeph>useCapture</codeph> auf <codeph>false</codeph> gesetzt ist, werden zwei separate Listener angelegt: einer, der während der Aufnahmephase aktiv ist und ein zweiter, der während der Ziel- und Bubbling-Phase aktiv ist.</ph>
	</p>
	
	<p platform="actionscript">Sie können einen Ereignis-Listener nicht nur für die Ziel- oder Bubbling-Phase registrieren. Die beiden Phasen hängen während der Registrierung immer zusammen, da Bubbling nur für übergeordnete Elemente des Zielknotens gilt.</p>
	
	<p>Wenn Sie einen Ereignis-Listener nicht mehr brauchen, entfernen sie ihn, indem Sie <codeph>removeEventListener()</codeph> aufrufen. Andernfalls könnte es zu Speicherproblemen kommen. Ereignis-Listener werden nicht automatisch aus dem Speicher entfernt, da der Garbage Collector den Listener nicht entfernt, solange das auslösende Objekt vorhanden ist (sofern der <codeph>useWeakReference</codeph>-Parameter auf <codeph>true</codeph> gesetzt ist).</p>
		
	<p>Beim Kopieren einer EventDispatcher-Instanz werden zugewiesene Ereignis-Listener nicht kopiert. (Wenn ein neu angelegter Knoten einen Ereignis-Listener benötigt, müssen Sie den Listener nach dem Erstellen des Knotens zuweisen.) Wenn Sie jedoch eine EventDispatcher-Instanz verschieben, werden zugewiesene Ereignis-Listener ebenfalls verschoben.</p>
	
	
	<p platform="actionscript">Wenn der Ereignis-Listener bei einem Knoten registriert wird, während mit diesem Knoten ein Ereignis durchgeführt wird, so wird der Ereignis-Listener während der aktuellen Phase nicht ausgelöst, kann aber während einer späteren Phase im Ereignisablauf ausgelöst werden, etwa während der Bubbling-Phase.</p>
	
	<p platform="actionscript">Wird ein Ereignis-Listener von einem Knoten entfernt, während mit dem Knoten ein Ereignis durchgeführt wird, so wird er von den aktuellen Aktionen immer noch ausgelöst. Nachdem er entfernt worden ist, wird der Ereignis-Listener nicht wieder aufgerufen (es sei denn er wird für spätere Verarbeitungsvorgänge erneut aufgerufen). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	Sendet ein Ereignis in den Ereignisablauf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Das Rekursionslimit für das Auslösen von Ereignissen wurde erreicht.
	</apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Wert <codeph>true</codeph>, wenn das Ereignis erfolgreich ausgelöst wurde. Der Wert <codeph>false</codeph> weist entweder auf einen Fehler hin oder auf die Tatsache, dass <codeph>preventDefault()</codeph> für das Ereignis aufgerufen worden ist.
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>Das Ereignisobjekt, das in den Ereignisablauf integriert wird. Wenn das Ereignis zurückgesendet wird, wird automatisch ein Klon des Ereignisses erstellt. Nachdem ein Ereignis ausgelöst wurde, lässt sich seine <codeph>target</codeph>-Eigenschaft nicht mehr ändern, daher funktioniert ein Zurücksenden des Ereignisses nur, wenn Sie eine neue Kopie des Ereignisses erstellen.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Sendet ein Ereignis in den Ereignisablauf. Das Ereignisziel ist das EventDispatcher-Objekt, für das die Methode <codeph>dispatchEvent()</codeph> aufgerufen wird.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	Überprüft, ob das EventDispatcher-Objekt Listener für einen bestimmten Ereignistyp registriert hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Wert <codeph>true</codeph>, wenn ein Listener des angegebenen Typs registriert ist; andernfalls <codeph>false</codeph>.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Überprüft, ob das EventDispatcher-Objekt Listener für einen bestimmten Ereignistyp registriert hat. Dadurch können Sie bestimmen, wo ein EventDispatcher-Objekt die Verarbeitung eines Ereignistyps in der Ereignisablaufhierarchie geändert hat. Um festzustellen, ob ein bestimmter Ereignistyp einen Ereignis-Listener auslöst, verwenden Sie <codeph>willTrigger()</codeph>.
	
	<p>Der Unterschied zwischen <codeph>hasEventListener()</codeph> und <codeph>willTrigger()</codeph> besteht darin, dass <codeph>hasEventListener()</codeph> nur das Objekt untersucht, zu dem es gehört, während <codeph>willTrigger()</codeph> den gesamten Ereignisablauf auf das im Parameter <codeph>type</codeph> angegebene Ereignis untersucht. <ph platform="javascript">Der Ereignisablauf gilt für die ActionScript 3.0-Anzeigeliste, die in SWF-Inhalt verwendet wird.</ph>
	</p>
	
	<p>Wird <codeph>hasEventListener()</codeph> von einem LoaderInfo-Objekt aus aufgerufen, werden nur die Listener berücksichtigt, die dem Aufrufer zugänglich sind.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#EventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:EventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	Entfernt einen Listener aus dem EventDispatcher-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses.
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>Das zu entfernende Listener-Objekt.
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">Dieser Parameter gilt für Anzeigeobjekte in der ActionScript 3.0-Anzeigelistenarchitektur, die von SWF-Material verwendet wird.</ph> <ph platform="actionscript">Gibt an, ob der Listener für die Aufnahmephase oder die Zielphase und Bubbling-Phase registriert wurde. Wenn der Listener sowohl für die Aufnahme- als auch für die Bubbling-Phase registriert wurde, sind auch zwei Aufrufe von <codeph>removeEventListener()</codeph> erforderlich, um beide zu entfernen: ein Aufruf, bei dem <codeph>useCapture</codeph> auf <codeph>true</codeph> gesetzt ist, und einer, bei dem <codeph>useCapture</codeph> auf <codeph>false</codeph> gesetzt ist.</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Entfernt einen Listener aus dem EventDispatcher-Objekt. Wenn kein entsprechender Listener mit dem EventDispatcher-Objekt registriert ist, hat ein Aufruf dieser Methode keine Auswirkungen.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	Überprüft, ob bei diesem EventDispatcher-Objekt oder bei einem seiner übergeordneten Objekte ein Ereignis-Listener für einen bestimmten Ereignistyp registriert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Wert <codeph>true</codeph>, wenn ein Listener des angegebenen Typs ausgelöst wird; andernfalls <codeph>false</codeph>.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Überprüft, ob bei diesem EventDispatcher-Objekt oder bei einem seiner übergeordneten Objekte ein Ereignis-Listener für einen bestimmten Ereignistyp registriert ist. Diese Methode liefert den Wert <codeph>true</codeph>, wenn während irgendeiner Phase des Ereignisablaufs ein Ereignis-Listener aufgerufen wird, wenn ein Ereignis des angegebenen Typs für dieses EventDispatcher-Objekt oder eines seiner nachfolgenden Elemente ausgelöst wird.
	
	<p>Der Unterschied zwischen der <codeph>hasEventListener()</codeph>- und der <codeph>willTrigger()</codeph>-Methode besteht darin, dass die Methode <codeph>hasEventListener()</codeph> nur das Objekt untersucht, zu dem sie gehört, während die <codeph>willTrigger()</codeph>-Methode den gesamten Ereignisablauf auf das im Parameter <codeph>type</codeph> angegebene Ereignis untersucht. <ph platform="javascript">Der Ereignisablauf gilt für die ActionScript 3.0-Anzeigeliste, die in SWF-Inhalt verwendet wird.</ph></p>
	
	<p>Wird <codeph>willTrigger()</codeph> von einem LoaderInfo-Objekt aus aufgerufen, werden nur die Listener berücksichtigt, die dem Aufrufer zugänglich sind.</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:EventPhase"><apiName>EventPhase</apiName><shortdesc>
 Die EventPhase-Klasse stellt Werte für die eventPhase-Eigenschaft der Event-Klasse bereit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\EventPhaseExample.as -noswf
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die EventPhase-Klasse stellt Werte für die <codeph>eventPhase</codeph>-Eigenschaft der Event-Klasse bereit.
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#Event"><linktext>Event-Klasse</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>EventDispatcher-Klasse</linktext></link></related-links><apiValue id="flash.events:EventPhase:AT_TARGET"><apiName>AT_TARGET</apiName><shortdesc>
	Die Zielphase, die zweite Phase im Ereignisablauf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Die Zielphase, die zweite Phase im Ereignisablauf.
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:BUBBLING_PHASE"><apiName>BUBBLING_PHASE</apiName><shortdesc>
	Die Bubbling-Phase, die dritte Phase im Ereignisablauf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Die Bubbling-Phase, die dritte Phase im Ereignisablauf.
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:CAPTURING_PHASE"><apiName>CAPTURING_PHASE</apiName><shortdesc>
	Die Aufnahmephase, die erste Phase im Ereignisablauf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Die Aufnahmephase, die erste Phase im Ereignisablauf.
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
 Ein Objekt löst ein FocusEvent-Objekt aus, wenn der Benutzer den Fokus von einem Objekt in der Anzeigeliste zum Nächsten bewegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für Focus-Ereignisse.
 
  
  </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein Objekt löst ein FocusEvent-Objekt aus, wenn der Benutzer den Fokus von einem Objekt in der Anzeigeliste zum Nächsten bewegt. Es gibt vier Arten von focus-Ereignissen:
 <ul>
     <li><codeph>FocusEvent.FOCUS_IN</codeph></li>
     <li><codeph>FocusEvent.FOCUS_OUT</codeph></li>
     <li><codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph></li>
     <li><codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\FocusEventExample.as"> Im folgenden Beispiel wird anhand der Klassen <codeph>FocusEventExample</codeph> und <codeph>CustomSprite</codeph> gezeigt, wie Focus-Ereignisse im Zusammenhang mit Stage-Elementen zur Erfassung von Ereignis- und Druckinformationen verwendet werden können. In diesem Beispiel werden die folgenden Aufgaben ausgeführt:
 <ol>
     <li>Die Eigenschaften <codeph>child</codeph> (vom Typ "Sprite") und <codeph>childCount</codeph> (vom Typ "uint") werden deklariert.</li>
    <li>Mit einer <codeph>for</codeph>-Schleife werden am Punkt (0,0) fünf hellblaue Quadrate gezeichnet. Zuerst wird einer neuen CustomSprite-Instanz die Eigenschaft <codeph>child</codeph> zugewiesen. Jedes Mal, wenn ein CustomSprite-Objekt erstellt wird, passiert Folgendes:
     <ul>
             <li>Die Eigenschaft <codeph>size</codeph> vom Typ "uint" wird auf 50 Pixel gesetzt, und <codeph>bgColor</codeph> wird auf hellblau gesetzt. </li>
             <li>Die Eigenschaften <codeph>buttonMode</codeph> und <codeph>useHandCursor</codeph> der Klasse "Sprite" werden innerhalb des Konstruktors auf <codeph>true</codeph> gesetzt.</li>
             <li>Es wird ein Ereignis-Listener vom Typ <codeph>click</codeph> zusammen mit dem verknüpften Abonnenten <codeph>clickHandler()</codeph> instanziiert. Die Abonnentenmethode erstellt eine lokale <codeph>target</codeph>-Variable vom Typ „Sprite“ und weist sie dem Feld zu, auf das geklickt wurde. Anschließend wird der Fokus der Bühne der Variablen <codeph>target</codeph> zugewiesen.</li>
             <li>Die Methode <codeph>draw()</codeph> wird aufgerufen. Hierdurch wird ein 50 x 50 Pixel großes Quadrat mit den Methoden <codeph>beginFill()</codeph>, <codeph>drawRect()</codeph> und <codeph>endFill()</codeph> der Graphics-Klasse und der Instanzeigenschaften erstellt.</li>
      </ul></li>
         <li>In der „for“-Schleife wird die Methode <codeph>configureListeners()</codeph> aufgerufen, die drei Ereignis-Listener/-Abonnenten instanziiert:
         <ul>
             <li><codeph>focusIn</codeph>/<codeph>focusInHandler()</codeph> wird ausgelöst, nachdem auf ein beliebiges Anzeigelistenobjekt (Feld) geklickt worden ist (<codeph>click</codeph>-Ereignis).</li>
             <li><codeph>focusOut</codeph>/<codeph>focusOutHandler()</codeph> wird ausgelöst, wenn auf ein anderes Feld geklickt wird oder die Bühne nicht mehr den Fokus besitzt (z. B., weil jemand außerhalb von Flash Player geklickt hat).</li>
             <li><codeph>keyFocusChange</codeph>/<codeph>keyFocusChangeHandler()</codeph> wird ausgelöst, wenn Sie mit der Tabulatortaste oder den Nach-links- und Nach-rechts-Pfeiltasten ein Anzeigelistenobjekt auswählen. Mit der <codeph>keyFocusChangeHandler()</codeph>-Methode werden die Aktionen der Nach-links- und Nach-rechts-Pfeiltasten überwacht. Außerdem wird die Methode <codeph>preventDefault()</codeph> zur Deaktivierung aufgerufen.</li>
             
      </ul></li>
     <li>In der <codeph>for</codeph>-Schleife wird jedes Quadrat der Anzeigeliste hinzugefügt und angezeigt (im gleichen Bereich). Hierfür kommt die Methode <codeph>addChild()</codeph> zum Einsatz.</li>
     <li>Der Konstruktor ruft anschließend die Methode <codeph>refreshLayout()</codeph> auf, mit der die orangefarbenen Quadrate mit jeweils 5 Pixel Abstand oben in der Anzeige (y = 0) verteilt werden.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.FocusEvent;
    import flash.events.IEventDispatcher;

    public class FocusEventExample extends Sprite {
        private var gutter:uint = 5;
        private var childCount:uint = 5;

        public function FocusEventExample() {
            var child:Sprite;
            for(var i:uint; i &lt; childCount; i++) {
                child = new CustomSprite();
                configureListeners(child);
                addChild(child);
            }
            refreshLayout();
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
            dispatcher.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
            dispatcher.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
            dispatcher.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler);
        }

        private function refreshLayout():void {
            var ln:uint = numChildren;
            var child:DisplayObject = getChildAt(0);
            var lastChild:DisplayObject = child;
            for(var i:uint = 1; i &lt; ln; i++) {
                child = getChildAt(i);
                child.x = lastChild.x + lastChild.width + gutter;
                lastChild = child;
            }
        }

        private function focusInHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusInHandler: " + target.name);
        }

        private function focusOutHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusOutHandler: " + target.name);
        }

        private function keyFocusChangeHandler(event:FocusEvent):void {
            if(event.keyCode == 39 || event.keyCode == 37){
                event.preventDefault()
            }
            var target:CustomSprite = CustomSprite(event.target);
            trace("keyFocusChangeHandler: " + target.name);
        }
        private function mouseFocusChangeHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("mouseFocusChangeHandler: " + target.name);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class CustomSprite extends Sprite {
    private var size:uint = 50;
    private var bgColor:uint = 0x00CCFF;

    public function CustomSprite() {
        buttonMode = true;
        useHandCursor = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        draw(size, size);
    }

    private function draw(w:uint, h:uint):void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        var target:Sprite = Sprite(event.target);
        trace("clickHandler: " + target.name);
        stage.focus = target;
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:FocusEvent:FOCUS_IN_focusIn"><apiName>focusIn</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_IN</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:FOCUS_OUT_focusOut"><apiName>focusOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_OUT</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:KEY_FOCUS_CHANGE_keyFocusChange"><apiName>keyFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:KEY_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE_mouseFocusChange"><apiName>mouseFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:MOUSE_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FocusEvent:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
    Erstellt ein Ereignisobjekt mit bestimmten Informationen, die für Fokus-Ereignisse wichtig sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Folgende Werte sind möglich: <codeph>FocusEvent.FOCUS_IN</codeph>, <codeph>FocusEvent.FOCUS_OUT</codeph>, <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph> und <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph>.
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann.
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Gibt die andere InteractiveObject-Instanz an, die von dem Fokuswechsel betroffen ist. Wenn beispielsweise ein <codeph>focusIn</codeph>-Ereignis auftritt, stellt <codeph>relatedObject</codeph> das InteractiveObject dar, das den Fokus verloren hat.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob die Umschalttaste als Zusatztaste aktiviert ist.
	</apiDesc></apiParam><apiParam><apiItemName>keyCode</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Gibt den Tastencodewert der Taste an, die zum Auslösen eines <codeph>keyFocusChange</codeph>-Ereignisses gedrückt wird.
	</apiDesc></apiParam><apiParam><apiItemName>direction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>none</apiData><apiDesc>Gibt an, aus welcher Richtung das interaktive Zielobjekt aktiviert wurde. Hat den Wert <codeph>FocusDirection.NONE</codeph> (der Standardwert) für alle Ereignisse außer <codeph>focusIn</codeph>.
    
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für FocusEvent-Objekte.
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    Erstellt ein Ereignisobjekt mit bestimmten Informationen, die für Fokus-Ereignisse wichtig sind. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
    
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FOCUS_IN</linktext></link><link href="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FOCUS_OUT</linktext></link><link href="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>KEY_FOCUS_CHANGE</linktext></link><link href="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>MOUSE_FOCUS_CHANGE</linktext></link><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FocusEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des FocusEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues FocusEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des FocusEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FocusEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des FocusEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des FocusEvent-Objekts enthält.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des FocusEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	<p><codeph>[FocusEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> relatedObject=<i>Wert</i> shiftKey=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FocusEvent:FOCUS_IN"><apiName>FOCUS_IN</apiName><shortdesc>
	Definiert den Wert der Eigenschaft „type“ eines focusIn-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusIn</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>focusIn</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0; gilt nur für <codeph>keyFocusChange</codeph>-Ereignisse.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Die andere InteractiveObject-Instanz, die von dem Fokuswechsel betroffen ist.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>; gilt nur für <codeph>keyFocusChange</codeph>-Ereignisse.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz, die gerade den Fokus erhalten hat. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.
	</entry></row><row><entry><codeph>direction</codeph></entry><entry>Die Richtung, aus der der Fokus zugewiesen wurde. Diese Eigenschaft meldet den Wert des <codeph>direction</codeph>-Parameters der <codeph>assignFocus()</codeph>-Methode auf der Bühne. Wird der Fokus durch andere Mittel geändert, ist der Wert immer <codeph>FocusDirection.NONE</codeph>. Gilt nur für <codeph>focusIn</codeph>-Ereignisse. Für alle anderen focus-Ereignisse ist der Wert <codeph>FocusDirection.NONE</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:FOCUS_OUT"><apiName>FOCUS_OUT</apiName><shortdesc>
	Definiert den Wert der Eigenschaft „type“ eines focusOut-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>focusOut</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0; gilt nur für <codeph>keyFocusChange</codeph>-Ereignisse.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Die andere InteractiveObject-Instanz, die von dem Fokuswechsel betroffen ist.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>; gilt nur für <codeph>keyFocusChange</codeph>-Ereignisse.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz, die gerade den Fokus verloren hat. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:KEY_FOCUS_CHANGE"><apiName>KEY_FOCUS_CHANGE</apiName><shortdesc>
	Definiert den Wert der Eigenschaft „type“ eines keyFocusChange-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>keyFocusChange</codeph>-Ereignisobjekts. 
	
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; rufen Sie die Methode <codeph>preventDefault()</codeph> auf, um das Standardverhalten abzubrechen.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>Der Tastencodewert der Taste, die zum Auslösen eines <codeph>keyFocusChange</codeph>-Ereignisses gedrückt wird.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Die andere InteractiveObject-Instanz, die von dem Fokuswechsel betroffen ist.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph>, wenn die Umschalttaste als Zusatztaste aktiviert ist, andernfalls <codeph>false</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz, die gerade den Fokus besitzt. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE"><apiName>MOUSE_FOCUS_CHANGE</apiName><shortdesc>
	Definiert den Wert der Eigenschaft „type“ eines mouseFocusChange-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>mouseFocusChange</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; rufen Sie die Methode <codeph>preventDefault()</codeph> auf, um das Standardverhalten abzubrechen.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0; gilt nur für <codeph>keyFocusChange</codeph>-Ereignisse.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>Die andere InteractiveObject-Instanz, die von dem Fokuswechsel betroffen ist.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>; gilt nur für <codeph>keyFocusChange</codeph>-Ereignisse.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die InteractiveObject-Instanz, die gerade den Fokus besitzt. Das unter <codeph>target</codeph> angegebene Ziel ist nicht immer das Objekt in der Anzeigeliste, in der der Ereignis-Listener registriert wurde. Mit der Eigenschaft <codeph>currentTarget</codeph> können Sie auf das Objekt in der Anzeigeliste zugreifen, das das Ereignis derzeit verarbeitet.
	</entry></row></tbody></tgroup></adobetable>
	
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:direction:get"><apiName>direction</apiName><shortdesc>
	Gibt die Richtung des Fokus für ein focusIn-Ereignis an.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Gibt die Richtung des Fokus für ein <codeph>focusIn</codeph>-Ereignis an.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link><link href="flash.display.xml#Stage/assignFocus()"><linktext>flash.display.Stage.assignFocus()</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 Falls „true“, ist die relatedObject-Eigenschaft aus Gründen, die mit der Sicherheitssandbox zusammenhängen, auf null gesetzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn <codeph>true</codeph>, ist die <codeph>relatedObject</codeph>-Eigenschaft aus Gründen, die mit der Sicherheitssandbox zusammenhängen, auf <codeph>null </codeph> gesetzt. Ist der Nominalwert von <codeph>relatedObject</codeph> ein Verweis auf ein DisplayObject in einer anderen Sandbox, wird <codeph>relatedObject</codeph> auf <codeph>null</codeph> gesetzt, es sei denn, die Berechtigung gilt über die Sandboxgrenzen hinweg für beide Richtungen. Die Berechtigung wird eingerichtet, indem aus einer SWF-Datei <codeph>Security.allowDomain()</codeph> aufgerufen wird oder eine Richtliniendatei vom Server einer Bilddatei bereitgestellt und die <codeph>LoaderContext.checkPolicyFile</codeph>-Eigenschaft beim Laden des Bilds gesetzt wird.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/relatedObject"><linktext>FocusEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	Der Tastencodewert der Taste, die zum Auslösen eines „keyFocusChange“-Ereignisses gedrückt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Der Tastencodewert der Taste, die zum Auslösen eines <codeph>keyFocusChange</codeph>-Ereignisses gedrückt wird.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FocusEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	Ein Verweis auf die andere InteractiveObject-Instanz, die von dem Fokuswechsel betroffen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	Ein Verweis auf die andere InteractiveObject-Instanz, die von dem Fokuswechsel betroffen ist. Wenn beispielsweise ein <codeph>focusOut</codeph>-Ereignis auftritt, stellt <codeph>relatedObject</codeph> die InteractiveObject-Instanz dar, die den Fokus erhalten hat.
	<p>Der Wert dieser Eigenschaft kann in zwei Fällen <codeph>null</codeph> sein: Wenn es kein verwandtes Objekt gibt oder wenn es eines gibt, dieses aber eine Sicherheitssandbox ist, auf die Sie keinen Zugriff haben. Verwenden Sie die <codeph>isRelatedObjectInaccessible()</codeph>-Eigenschaft, um festzustellen, welcher dieser Gründe zutrifft.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/isRelatedObjectInaccessible"><linktext>FocusEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Gibt an, ob die Umschalttaste als Zusatztaste aktiviert ist. In diesem Fall lautet der Wert „true“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob die Umschalttaste als Zusatztaste aktiviert ist. In diesem Fall lautet der Wert <codeph>true</codeph>. Andernfalls ist der Wert <codeph>false</codeph>. Diese Eigenschaft wird nur dann verwendet, wenn „FocusEvent“ den Typ <codeph>keyFocusChange</codeph> hat.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 Das NativeApplication-Objekt einer AIR-Anwendung löst ein browserInvoke-Ereignis aus, wenn die Anwendung durch eine SWF-Datei im Browser mit der Browseraufruffunktion aufgerufen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 Das NativeApplication-Objekt einer AIR-Anwendung löst ein <codeph>browserInvoke</codeph>-Ereignis aus, wenn die Anwendung durch eine SWF-Datei im Browser mit der Browseraufruffunktion aufgerufen wurde. Das NativeApplication-Objekt löst ein <codeph>browserInvoke</codeph>-Ereignis auch dann aus, wenn ein Benutzer die nahtlose Installationsfunktion im Browser instanziiert und die SWF-Datei im Browser ein Array an den <codeph>arguments</codeph>-Parameter der <codeph>launchApplication()</codeph>-Methode der „air.swf“-Datei übergibt. (Weitere Informationen finden Sie unter „Verteilen, Installieren und Ausführen von AIR-Anwendungen“ im AIR-Entwicklerhandbuch.)
	 
	 <p>Der Aufruf durch den Browser ist nur dann zulässig, wenn in der Anwendungsdeskriptordatei einer Anwendung Folgendes angegeben ist:</p>
	 
	 <codeblock>&lt;allowBrowserInvocation>true&lt;/allowBrowserInvocation></codeblock>
	 
	 <p>Wenn die Anwendung nicht ausgeführt wird, löst das NativeApplication-Objekt ein InvokeEvent-Ereignis und ein <codeph>browserInvoke</codeph>-Ereignis aus, wenn der Aufruf über den Browser erfolgt. Andernfalls, wenn die Anwendung <i>bereits ausgeführt wird</i>, löst das NativeApplication-Objekt nur ein <codeph>browserInvoke</codeph>-Ereignis aus, wenn der Aufruf über den Browser erfolgt. </p>
	 
	 <p> Wenn die Anwendung als Ergebnis einer nahtlosen Installation vom Browser aufgerufen wird (wenn der Benutzer sich für den sofortigen Start nach der Installation entschieden hat), löst das NativeApplication-Objekt ein BrowserInvoke-Ereignis nur dann aus, wenn Argumente übergeben werden (über die SWF-Datei im Browser, die ein Array an den <codeph>arguments</codeph>-Parameter der <codeph>installApplication()</codeph>-Methode der „air.swf“-Datei übergibt). Weitere Informationen finden Sie unter „Verteilen, Installieren und Ausführen von AIR-Anwendungen“ im AIR-Entwicklerhandbuch.</p>
	 
	 <p>Wie auch das <codeph>invokeEvent</codeph>-Ereignis werden <codeph>browserInvokeEvent</codeph>-Ereignisse vom NativeApplication-Objekt (<codeph>NativeApplication.nativeApplication</codeph>) ausgelöst. Um <codeph>browserInvoke</codeph>-Ereignisse zu erhalten, rufen Sie die <codeph>addEventListener()</codeph>-Methode des NativeApplication-Objekts auf. Wenn ein Ereignis-Listener für ein <codeph>browserInvoke</codeph>-Ereignis registriert wird, empfängt er auch alle <codeph>browserInvoke</codeph>-Ereignisse, die vor der Registrierung aufgetreten sind. Diese werden nach der Rückgabe des Aufrufs von <codeph>addEventListener()</codeph> ausgelöst, jedoch nicht unbedingt vor anderen <codeph>browserInvoke</codeph>-Ereignissen, die möglicherweise nach der Registrierung empfangen wurden. Auf diese Weise können Sie <codeph>browserInvoke</codeph>-Ereignisse verarbeiten, die aufgetreten sind, bevor Ihr Initialisierungscode ausgeführt wurde (zum Beispiel wenn die Anwendung ursprünglich über den Browser aufgerufen wurde). Denken Sie daran, dass beim Hinzufügen eines Ereignis-Listeners zu einem späteren Zeitpunkt während der Ausführung (nach der Initialisierung der Anwendung) dieser alle <codeph>browserInvoke</codeph>-Ereignisse empfängt, die seit dem Starten der Anwendung aufgetreten sind.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#InvokeEvent"><linktext>flash.events.InvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:BrowserInvokeEvent:BROWSER_INVOKE</apiEventType><adobeApiEventClassifier>flash.events:BrowserInvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:BrowserInvokeEvent:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 Die Konstruktorfunktion für die BrowserInvokeEvent-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ des Ereignisses, auf den als <codeph>Event.type</codeph> zugegriffen werden kann.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Einstellung <codeph>false</codeph> für ein BrowserInvokeEvent-Objekt.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Einstellung <codeph>false</codeph> für ein BrowserInvokeEvent-Objekt.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>Ein Array von Argumenten (Strings), die an die Anwendung zu übergeben sind.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>sandboxType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Sandbox-Typ für den Browserinhalt.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Die Sicherheitsdomäne für den Browserinhalt.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isHTTPS</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Ob der Browserinhalt das HTTPS-URL-Schema verwendet.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isUserEvent</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Ob der Browseraufruf das Ergebnis eines Benutzerereignisses war.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Die Konstruktorfunktion für die BrowserInvokeEvent-Klasse. Im Allgemeinen rufen Entwickler den <codeph>BrowserInvokeEvent()</codeph>-Konstruktor nicht direkt auf. Nur die Laufzeitumgebung sollte ein BrowserInvokeEvent-Objekt erstellen.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:BrowserInvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 Erstellt eine neue Kopie dieses Ereignisses.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Die Kopie des Ereignisses.
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Erstellt eine neue Kopie dieses Ereignisses.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE"><apiName>BROWSER_INVOKE</apiName><shortdesc>
		 Die BrowserInvokeEvent.BROWSER_INVOKE-Konstante definiert den Wert der type-Eigenschaft eines BrowserInvokeEvent-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>browserInvoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Die <codeph>BrowserInvokeEvent.BROWSER_INVOKE</codeph>-Konstante definiert den Wert der <codeph>type</codeph>-Eigenschaft eines BrowserInvokeEvent-Objekts.
		 
		 <p>Das BrowserInvokeEvent-Ereignisobjekt hat folgende Eigenschaften:</p>
		 <adobetable class="innertable">
		    
		     
		    
		    
		    
		    
		     
		    
		     
		        
		  <tgroup cols="2"><thead><row><entry>Eigenschaften</entry><entry>Werte</entry></row></thead><tbody><row><entry><codeph>Arguments</codeph></entry><entry>Das Array von Stringargumenten, die während dieses Aufrufs übergeben werden.</entry></row><row><entry><codeph>sandBoxType</codeph></entry><entry>Ein String, der den Sandboxtyp für den Browserinhalt angibt (<codeph>Security.APPLICATION</codeph>, <codeph>Security.LOCAL_TRUSTED</codeph>, <codeph>Security.LOCAL_WITH_FILE</codeph>, <codeph>Security.LOCAL_LOCAL_WITH_NETWORK</codeph> oder <codeph>Security.REMOTE</codeph>).</entry></row><row><entry><codeph>securityDomain</codeph></entry><entry>Ein String, der die Sicherheitsdomäne des Browsers angibt (zum Beispiel <codeph>"www.example.com"</codeph>).</entry></row><row><entry><codeph>isHTTPS</codeph></entry><entry>Ob der Browserinhalt das HTTPS-URL-Schema verwendet (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>)</entry></row><row><entry><codeph>isUserEvent</codeph></entry><entry>Ob der Browseraufruf aus einem Benutzerereignis resultiert (in AIR 1.0 immer <codeph>true</codeph>).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>Nein.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Gibt das Objekt an, welches das InvokeEvent -Objekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Immer das NativeApplication-Objekt. 
		    </entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 Ein Array von Argumenten (Strings), die an die Anwendung zu übergeben sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 Ein Array von Argumenten (Strings), die an die Anwendung zu übergeben sind.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isHTTPS:get"><apiName>isHTTPS</apiName><shortdesc>
		 Ob der Browserinhalt das HTTPS-URL-Schema verwendet (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Ob der Browserinhalt das HTTPS-URL-Schema verwendet (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>).
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isUserEvent:get"><apiName>isUserEvent</apiName><shortdesc>
		 Ob der Browseraufruf in einem Benutzerereignis resultiert (z. B. Mausklick).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Ob der Browseraufruf in einem Benutzerereignis resultiert (z. B. Mausklick). In AIR 1.0 ist dies immer auf <codeph>true</codeph> gesetzt; AIR benötigt ein Benutzerereignis für die Initiierung des Aufrufs der Browseraufruffunktion.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:sandboxType:get"><apiName>sandboxType</apiName><shortdesc>
		 Der Sandbox-Typ für den Browserinhalt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Der Sandbox-Typ für den Browserinhalt. Dieser Parameter kann auf einen der folgenden Werte eingestellt sein:
		 
		 <ul>
		 
		 	<li><codeph>Security.APPLICATION</codeph> – Der Inhalt befindet sich in der Sicherheits-Sandbox der Anwendung.</li>
		 
		 	<li><codeph>Security.LOCAL_TRUSTED</codeph>: Der Inhalt befindet sich in der lokalen vertrauenswürdigen Sicherheitssandbox.</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_FILE</codeph> – Der Inhalt befindet sich in der local-with-filesystem-Sicherheits-Sandbox.</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_NETWORK</codeph> – Der Inhalt befindet sich in der local-with-networking-Sicherheits-Sandbox.</li>
		 
		 	<li><codeph>Security.REMOTE</codeph> – Der Inhalt befindet sich in einer Remote(-Netzwerk)-Domäne.</li>
		 
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>flash.system.Security.sandboxType</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:securityDomain:get"><apiName>securityDomain</apiName><shortdesc>
		 Die Sicherheitsdomäne für den Browserinhalt, zum Beispiel „www.adobe.com“ oder „www.example.org“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Die Sicherheitsdomäne für den Browserinhalt, zum Beispiel <codeph>www.adobe.com</codeph> oder <codeph>www.example.org</codeph>. Diese Eigenschaft wird nur für Inhalte in der Remote-Sicherheitssandbox (für Inhalte in einer Netzwerkdomäne) eingestellt, nicht für Inhalte in einer lokalen Sicherheitssandbox oder in der Sicherheitssandbox der Anwendung.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
 Ein FileStream-Objekt löst OutputProgressEvent-Objekte aus, wenn ausstehende asynchrone Dateischreibvorgänge ausgeführt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für Ausgabefortschrittereignisse (für asynchrone Dateischreibvorgänge).
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein FileStream-Objekt löst OutputProgressEvent-Objekte aus, wenn ausstehende asynchrone Dateischreibvorgänge ausgeführt werden. Es gibt nur einen Typ Ausgabefortschrittereignis: <codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links><adobeApiEvent id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS_outputProgress"><apiName>outputProgress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:OutputProgressEvent:OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:OutputProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:OutputProgressEvent:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
    Erstellt ein Ereignisobjekt, das Informationen über Ausgabefortschrittereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Es gibt nur einen Fehlerereignistyp: <codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph>.
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. 
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. 
    </apiDesc></apiParam><apiParam><apiItemName>bytesPending</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Die Anzahl der noch nicht geschriebenen Byte. 
    </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>Die Gesamtzahl der Byte, die geschrieben wurden oder deren Schreiben noch ausstehend ist.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für OutputProgressEvent-Objekte.
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    Erstellt ein Ereignisobjekt, das Informationen über Ausgabefortschrittereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:OutputProgressEvent:clone"><apiName>clone</apiName><shortdesc>
    Erstellt eine Kopie des OutputProgressEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues OutputProgressEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Erstellt eine Kopie des OutputProgressEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:OutputProgressEvent:toString"><apiName>toString</apiName><shortdesc>
    Gibt einen String zurück, der alle Eigenschaften des OutputProgressEvent-Objekts enthält. </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein String, der alle Eigenschaften des OutputProgressEvent-Objekts enthält.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Gibt einen String zurück, der alle Eigenschaften des OutputProgressEvent-Objekts enthält. Der String liegt im folgenden Format vor:
    
    <p><codeph>[OutputProgressEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> eventPhase=<i>Wert</i> bytesPending=<i>Wert</i> bytesTotal=<i>Wert</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS"><apiName>OUTPUT_PROGRESS</apiName><shortdesc>
    Definiert den Wert der type-Eigenschaft eines outputProgress-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>outputProgress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>outputProgress</codeph>-Ereignisobjekts.
    
    <p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
    
    <adobetable class="innertable">
        
        
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesPending</codeph></entry><entry>Die Anzahl der verbleibenden Byte, die noch geschrieben werden müssen, zum Zeitpunkt der Verarbeitung des Ereignisses durch den Listener.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>Die Gesamtanzahl der Byte, die bei einem erfolgreichen Schreibvorgang schließlich geschrieben werden.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Der Protokollierungsstatus des FileStream-Objekts. </entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesPending:get"><apiName>bytesPending</apiName><shortdesc>
    Die Anzahl der Byte, die noch nicht geschrieben sind, während der Listener das Ereignis verarbeitet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    Die Anzahl der Byte, die noch nicht geschrieben sind, während der Listener das Ereignis verarbeitet.
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
    Die Gesamtzahl der bisher geschriebenen Byte plus die Anzahl der noch zu schreibenden Byte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    Die Gesamtzahl der bisher geschriebenen Byte plus die Anzahl der noch zu schreibenden Byte.
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
 Ein SharedObject-Objekt, das ein remotes freigegebenes Objekt repräsentiert, löst ein SyncEvent-Objekt aus, wenn das remote freigegebene Objekt vom Server aktualisiert wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\SyncEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für SyncEvent-Ereignisse.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein SharedObject-Objekt, das ein remotes freigegebenes Objekt repräsentiert, löst ein SyncEvent-Objekt aus, wenn das remote freigegebene Objekt vom Server aktualisiert wird. Es gibt nur einen Typ eines <codeph>sync</codeph>-Ereignisses: <codeph>SyncEvent.SYNC</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#SharedObject"><linktext>SharedObject-Klasse</linktext></link></related-links><adobeApiEvent id="flash.events:SyncEvent:SYNC_sync"><apiName>sync</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SyncEvent:SYNC</apiEventType><adobeApiEventClassifier>flash.events:SyncEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SyncEvent:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
	 Erstellt ein Ereignisobjekt, das Informationen über sync-Ereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines sync-Ereignisses: <codeph>SyncEvent.SYNC</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen. 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen.
	 </apiDesc></apiParam><apiParam><apiItemName>changeList</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Ein Objekte-Array, das die Synchronisation mit dem freigegebenen Remote-Objekt (SharedObject) beschreibt. Ereignis-Listener können über die Eigenschaft <codeph>changeList</codeph> auf dieses Objekt zugreifen.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für SyncEvent-Objekte.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Erstellt ein Ereignisobjekt, das Informationen über <codeph>sync</codeph>-Ereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SyncEvent/changeList"><linktext>changeList</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SyncEvent:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine Kopie des SyncEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues SyncEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine Kopie des SyncEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SyncEvent:toString"><apiName>toString</apiName><shortdesc>
	 Gibt eine Zeichenfolge zurück, die alle Eigenschaften des SyncEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des SyncEvent-Objekts enthält.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt eine Zeichenfolge zurück, die alle Eigenschaften des SyncEvent-Objekts enthält. Der String liegt im folgenden Format vor:
	 <p><codeph>[SyncEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> list=<i>Wert</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SyncEvent:SYNC"><apiName>SYNC</apiName><shortdesc>
     Definiert den Wert der Eigenschaft type eines sync-Ereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sync</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Definiert den Wert der Eigenschaft <codeph>type</codeph> eines <codeph>sync</codeph>-Ereignisobjekts.
	 <p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>changeList</codeph></entry><entry>Ein Array mit Eigenschaften, die den Array-Status wiedergeben.</entry></row><row><entry><codeph>target</codeph></entry><entry>Die vom Server aktualisierte SharedObject-Instanz.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></apiValue><apiValue id="flash.events:SyncEvent:changeList:get"><apiName>changeList</apiName><shortdesc>
     Ein Array mit Objekten; jedes Objekt enthält Eigenschaften, die die geänderten Mitglieder eines gemeinsamen Remote-Objekts beschreiben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     Ein Array mit Objekten; jedes Objekt enthält Eigenschaften, die die geänderten Mitglieder eines gemeinsamen Remote-Objekts beschreiben. Die Eigenschaften jedes Objekts sind <codeph>code</codeph>, <codeph>name</codeph> und <codeph>oldValue</codeph>. 
     <p>Wenn Sie zum ersten Mal eine Verbindung zu einem gemeinsamen Remote-Objekt herstellen, das permanent lokal und/oder auf dem Server gespeichert ist, werden alle Eigenschaften für dieses Objekt auf leere Strings gesetzt.</p><p>Andernfalls setzt Flash <codeph>code</codeph> auf <codeph>"clear"</codeph>, <codeph>"success"</codeph>, <codeph>"reject"</codeph>, <codeph>"change"</codeph> oder <codeph>"delete"</codeph>. </p>
     <ul><li>Der Wert <codeph>"clear"</codeph> bedeutet entweder, dass Sie erfolgreich eine Verbindung zu einem gemeinsam genutzten Remote-Objekt hergestellt haben, das noch nicht permanent auf dem Server oder dem Client gespeichert ist, oder dass alle Eigenschaften des Objekts gelöscht wurden – zum Beispiel, wenn seit der letzten Synchronisation der Client- und Serverkopien des Objekts so viele Änderungen vorgenommen wurden, dass Flash Player das Client-Objekt mit dem Server-Objekt erneut synchronisiert. Im zweiten Fall wird <codeph>SyncEvent.SYNC</codeph> ausgelöst und der Wert für „code“ wird auf <codeph>"change"</codeph> gesetzt. </li>
     <li>Bei <codeph>"success"</codeph> wurde das gemeinsam genutzte Objekt vom Client geändert. </li>
     <li>Der Wert <codeph>"reject"</codeph> bedeutet, dass der Client erfolglos versucht hat, das Objekt zu ändern, und das Objekt stattdessen von einem anderen Client geändert wurde. </li>
     <li>Bei <codeph>"change"</codeph> wurde das Objekt von einem anderen Client geändert oder vom Server erneut synchronisiert. </li>
     <li>Der Wert <codeph>"delete"</codeph> bedeutet, dass das Attribut gelöscht wurde. </li></ul>
     <p>Die Eigenschaft <codeph>name</codeph> enthält den Namen der Eigenschaft, die geändert wurde.</p>
     <p>Die Eigenschaft <codeph>oldValue</codeph> enthält den vorherigen Wert der geänderten Eigenschaft. Dieser Parameter lautet <codeph>null</codeph>, es sei denn, der Code weist den Wert <codeph>"reject"</codeph> oder <codeph>"change"</codeph> auf.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection-Klasse</linktext></link><link href="flash.net.xml#NetStream"><linktext>NetStream-Klasse</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
Eine Kamera oder ein Mikrofon sendet ein ActivityEvent-Objekt, wenn eine Kamera oder ein Mikrofon meldet, dass sie bzw. es aktiviert oder deaktiviert wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Ereignisobjekte für ActivityEvent-Ereignisse.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
Eine Kamera oder ein Mikrofon sendet ein ActivityEvent-Objekt, wenn eine Kamera oder ein Mikrofon meldet, dass sie bzw. es aktiviert oder deaktiviert wurde. Es gibt nur einen Typ eines activity-Ereignisses: <codeph>ActivityEvent.ACTIVITY</codeph>.

</apiDesc><example conref="examples\ActivityEventExample.as"> Im folgenden Beispiel wird die Verwendung der ActivityEvent-Klasse demonstriert. Dem Mikrofon wird die Ereignis-Listener-Methode <codeph>activityHandler()</codeph> zugewiesen, und es wird immer Text generiert, wenn das Mikrofon ein <codeph>activity</codeph>-Ereignis auslöst.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.ActivityEvent;
    import flash.media.Microphone;

    public class ActivityEventExample extends Sprite {
        public function ActivityEventExample() {
            var mic:Microphone = Microphone.getMicrophone();
            mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
        }

        private function activityHandler(event:ActivityEvent):void {
            trace("event: " + event);
            trace("event.activating: " + event.activating);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links><adobeApiEvent id="flash.events:ActivityEvent:ACTIVITY_activity"><apiName>activity</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ActivityEvent:ACTIVITY</apiEventType><adobeApiEventClassifier>flash.events:ActivityEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ActivityEvent:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
	Erstellt ein Ereignisobjekt, das Informationen über Aktivitätsereignisse enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> Der Ereignistyp. Ereignis-Listener können über die übernommene Eigenschaft <codeph>type</codeph> auf diese Informationen zugreifen. Es gibt nur einen Typ eines activity-Ereignisses: <codeph>ActivityEvent.ACTIVITY</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt an der Bubbling-Phase des Ereignisablaufs teilnimmt. Ereignis-Listener können über die übernommene Eigenschaft <codeph>bubbles</codeph> auf diese Informationen zugreifen.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob das Ereignisobjekt abgebrochen werden kann. Ereignis-Listener können über die übernommene Eigenschaft <codeph>cancelable</codeph> auf diese Informationen zugreifen. 
	</apiDesc></apiParam><apiParam><apiItemName>activating</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob das Gerät aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) wird. Ereignis-Listener können über die Eigenschaft <codeph>activating</codeph> auf diese Informationen zugreifen.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Konstruktor für ActivityEvent-Objekte.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Erstellt ein Ereignisobjekt, das Informationen über Aktivitätsereignisse enthält. Ereignisobjekte werden Ereignis-Listenern als Parameter übergeben.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ActivityEvent:clone"><apiName>clone</apiName><shortdesc>
	Erstellt eine Kopie des ActivityEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Ein neues ActivityEvent-Objekt mit Eigenschaftswerten, die denen des Originals entsprechen.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Erstellt eine Kopie des ActivityEvent-Objekts und stellt den Wert jeder Eigenschaft so ein, dass er dem Wert des Originals entspricht. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ActivityEvent:toString"><apiName>toString</apiName><shortdesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des ActivityEvent-Objekts enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Zeichenfolge, die alle Eigenschaften des ActivityEvent-Objekts enthält.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Gibt eine Zeichenfolge zurück, die alle Eigenschaften des ActivityEvent-Objekts enthält. Das folgende Format wird verwendet:
	<p><codeph>[ActivityEvent type=<i>Wert</i> bubbles=<i>Wert</i> cancelable=<i>Wert</i> activating=<i>Wert</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ActivityEvent:ACTIVITY"><apiName>ACTIVITY</apiName><shortdesc>
	Die Konstante ActivityEvent.ACTIVITY definiert den Wert der type-Eigenschaft eines Aktivitätsereignisobjekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activity</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Die Konstante <codeph>ActivityEvent.ACTIVITY</codeph> definiert den Wert der <codeph>type</codeph>-Eigenschaft eines <codeph>activity</codeph>-Ereignisobjekts. 
	<p>Dieses Ereignis verfügt über die folgenden Eigenschaften:</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Wert</entry></row></thead><tbody><row><entry><codeph>activating</codeph></entry><entry><codeph>true</codeph>, wenn das Gerät aktiviert wird, oder <codeph>false</codeph>, wenn es deaktiviert wird.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>. Es gibt kein Standardverhalten, das abgebrochen werden kann.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Das Objekt, welches das Ereignisobjekt aktiv mit einem Ereignis-Listener verarbeitet.</entry></row><row><entry><codeph>target</codeph></entry><entry>Das Objekt, mit dem eine Sitzung gestartet oder beendet wird, z. B. ein Camera- oder Microphone-Objekt.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></apiValue><apiValue id="flash.events:ActivityEvent:activating:get"><apiName>activating</apiName><shortdesc>
	Gibt an, ob das Gerät aktiviert (true) oder deaktiviert (false) wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Gibt an, ob das Gerät aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) wird.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>