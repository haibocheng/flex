<?xml version="1.0"?>
<apiPackage id="flash.filesystem"><apiName>flash.filesystem</apiName><apiDetail/><apiClassifier id="flash.filesystem:FileStream"><apiName>FileStream</apiName><shortdesc>
 Ein FileStream-Objekt wird zum Lesen und Schreiben von Dateien verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.utils:IDataInput</apiBaseInterface><apiBaseInterface>flash.utils:IDataOutput</apiBaseInterface><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein FileStream-Objekt wird zum Lesen und Schreiben von Dateien verwendet. Dateien können durch einen Aufruf der <codeph>open()</codeph>-Methode synchron geöffnet werden oder asynchron durch einen Aufruf der <codeph>openAsync()</codeph>-Methode.
 
 <p>Der Vorteil beim asynchronen Öffnen liegt darin, dass anderer Code ausgeführt werden kann, während Adobe AIR Lese- und Schreibvorgänge im Hintergrund ausführt. Beim asynchronen Öffnen werden <codeph>progress</codeph>-Ereignisse ausgelöst, während die Vorgänge fortschreiten.</p>
 
 <p>Ein synchron geöffnetes File-Objekt verhält sich in vielem wie ein ByteArray-Objekt; eine asynchron geöffnetes File-Objekt verhält sich dagegen eher wie ein Socket- oder URLStream-Objekt. Wenn ein File-Objekt synchron geöffnet wird, hält der Aufrufer an, während die angeforderten Daten aus der zugrundeliegenden Datei gelesen bzw. in die Datei geschrieben werden. Wurde die Datei asynchron geöffnet, werden in den Stream geschriebene Daten sofort gepuffert und später in die Datei geschrieben.</p>
 
 <p>Sowohl beim synchronen als auch beim asynchronen Lesen aus einer Datei ist die tatsächliche Lesemethode synchron. In beiden Fällen wird aus Daten gelesen, die zurzeit „verfügbar“ sind. Der Unterschied ist, dass beim synchronen Lesen alle Daten jederzeit verfügbar sind, wohingegen beim asynchronen Lesen Daten nach und nach verfügbar sind, während die Daten in den Lesepuffer gestreamt werden. In beiden Fällen werden die Daten, die derzeit synchron gelesen werden können, durch die <codeph>bytesAvailable</codeph>-Eigenschaft repräsentiert.</p>
 
 <p>Eine Anwendung, die asynchrone Eingaben verarbeitet, registriert sich normalerweise für <codeph>progress</codeph>-Ereignisse und nimmt die Daten auf, wenn sie verfügbar sind, indem sie Lesemethoden aufruft. Alternativ dazu kann eine Anwendung auch einfach warten, bis alle Daten verfügbar sind, indem sie sich für das <codeph>complete</codeph>-Ereignis registriert, und die gesamten Daten verarbeiten, wenn das <codeph>complete</codeph>-Ereignis ausgelöst wird. </p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.filesystem:FileStream_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
 Gibt an, dass das Ende des Streams erreicht wurde.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Gibt an, dass das Ende des Streams erreicht wurde.
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.filesystem.xml#FileStream/position"><linktext>position</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.OutputProgressEvent.OUTPUT_PROGRESS_outputProgress"><apiName>outputProgress</apiName><shortdesc>
 Gibt an, dass gepufferte Daten in die Datei geschrieben wurden.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.OutputProgressEvent.OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.OutputProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Gibt an, dass gepufferte Daten in die Datei geschrieben wurden.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.ProgressEvent.PROGRESS_progress"><apiName>progress</apiName><shortdesc>
 Gibt an, dass neue Daten im Stream verfügbar sind.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.ProgressEvent.PROGRESS</apiEventType><adobeApiEventClassifier>flash.events.ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Gibt an, dass neue Daten im Stream verfügbar sind.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
 Gibt an, dass bei einem asynchronen Datei-E/A-Vorgang ein Fehler aufgetreten ist.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Gibt an, dass bei einem asynchronen Datei-E/A-Vorgang ein Fehler aufgetreten ist.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream_flash.events.Event.CLOSE_close"><apiName>close</apiName><shortdesc>
 Gibt an, dass der Stream durch einen ausdrücklichen Aufruf der close()-Methode geschlossen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CLOSE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Gibt an, dass der Stream durch einen ausdrücklichen Aufruf der <codeph>close()</codeph>-Methode geschlossen wurde.
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.filesystem.xml#FileStream/close()"><linktext>close()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.filesystem:FileStream:FileStream"><apiName>FileStream</apiName><shortdesc>
	 Erstellt ein FileStream-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
	 Erstellt ein FileStream-Objekt. Verwenden Sie die <codeph>open()</codeph>- oder <codeph>openAsync()</codeph>-Methode, um eine Datei zu öffnen.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.filesystem.xml#FileStream/open()"><linktext>open()</linktext></link><link href="flash.filesystem.xml#FileStream/openAsync()"><linktext>openAsync()</linktext></link></related-links></apiConstructor><apiOperation id="flash.filesystem:FileStream:close"><apiName>close</apiName><shortdesc>
	 Schließt das FileStream-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Schließt das FileStream-Objekt. 
	 
	 <p>Nach dem Aufrufen der <codeph>close()</codeph>-Methode können Sie keine Daten mehr lesen oder schreiben. Wenn die Datei asynchron geöffnet wurde (das FileStream-Objekt hat die Datei mit der <codeph>openAsync()</codeph>-Methode geöffnet), löst das Objekt nach dem Aufruf der <codeph>close()</codeph>-Methode ein <codeph>close</codeph>-Ereignis aus. </p>
	 
	 <p>Beim Schließen der Anwendung werden automatisch alle Dateien, die mit FileStream-Objekten in der Anwendung verknüpft sind, geschlossen. Am besten registrieren Sie ein <codeph>closed</codeph>-Ereignis für alle asynchron geöffneten FileStream-Objekte, in die noch Daten geschrieben werden müssen, bevor die Anwendung geschlossen wird (um sicherzustellen, dass die Daten geschrieben werden).</p>
	 
	 <p>Sie können das FileStream-Objekt erneut verwenden, indem Sie die <codeph>open()</codeph>- oder <codeph>openAsync()</codeph>-Methode aufrufen. Damit werden alle Dateien geschlossen, die dem FileStream-Objekt zugewiesen sind, das Objekt löst jedoch nicht das <codeph>close</codeph>-Ereignis aus.</p>
	 
	 <p>Wenn ein FileStream-Objekt asynchron geöffnet wurde (mit der <codeph>openAsync()</codeph>-Methode), wird es nicht (durch den Garbagekollektor) aus dem Speichermanagement entfernt, solange noch ausstehende Vorgänge vorliegen und für deren Abschluss Ereignisprozeduren registriert sind. Dies gilt auch dann, wenn Sie das <codeph>close()</codeph>-Ereignis für ein FileStream-Objekt aufrufen und Eigenschaften und Variablen löschen, die auf das Objekt verweisen. Ein sonst nicht referenziertes FileStream-Objekt bleibt bestehen, solange eine der folgenden Situationen eintreten kann: </p>
	 
	 <ul>
	 
	 	<li>Bei Lesevorgängen wurde das Ende der Datei nicht erreicht (und das <codeph>complete</codeph>-Ereignis wurde nicht ausgelöst). </li>
	 
	 	<li>Es stehen noch zu schreibende Ausgabedaten zur Verfügung und ausgabebezogene Ereignisse (zum Beispiel das <codeph>outputProgress</codeph>-Ereignis oder das <codeph>ioError</codeph>-Ereignis) haben Ereignis-Listener registriert. </li>
	 
	 </ul>
	 
	 </apiDesc><example conref="examples\FileStream.close.1.as">     Im folgenden Beispiel wird ein FileStream-Objekt <i>asynchron</i> geöffnet und eine Textdatei mit dem Namen „test.txt“ in den Unterordner „Apollo Test“ in den Dokumentordner des Benutzers geschrieben. Ein Aufruf der <codeph>close()</codeph>-Methode des FileStream-Objekts schließt die Datei, wenn die Daten geschrieben wurden. 
<codeblock>
import flash.filesystem.*;
import flash.events.Event;
            
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.openAsync(file, FileMode.WRITE);
fileStream.writeUTFBytes("Hello");
fileStream.addEventListener(Event.CLOSE, fileClosed);
fileStream.close();

function fileClosed(event:Event):void {
    trace("closed");
}            
</codeblock></example><example conref="examples\FileStream.close.2.as">     Im folgenden Beispiel wird ein FileStream-Objekt <i>synchron</i> geöffnet und eine Textdatei mit dem Namen „test.txt“ in den Unterordner „Apollo Test“ in den Dokumentordner des Benutzers geschrieben. Ein Aufruf der <codeph>close()</codeph>-Methode des FileStream-Objekts schließt die Datei, wenn die Daten geschrieben wurden.
<codeblock>
import flash.filesystem.*;
            
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.WRITE);
fileStream.writeUTF("Hello");
fileStream.close();
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#FileStream/open()"><linktext>open()</linktext></link><link href="flash.filesystem.xml#FileStream/event:close"><linktext>close-Ereignis</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:close_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei, die asynchron geöffnet wurde, wird geschlossen.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Die Datei, die asynchron geöffnet wurde, wird geschlossen.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:open"><apiName>open</apiName><shortdesc>
	 Öffnet das FileStream-Objekt synchron, wobei auf die im file-Parameter festgelegte Datei verwiesen wird.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei ist nicht vorhanden; Sie haben keine entsprechende Berechtigung zum Öffnen der Datei; Sie öffnen eine Datei für den Lesezugriff, verfügen aber nicht über die Leseberechtigung; oder Sie öffnen eine Datei für den Schreibzugriff, verfügen aber nicht über die Schreibberechtigung. 
	 
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Der Dateispeicherort befindet sich im Anwendungsordner und der <codeph>fileMode</codeph>-Parameter ist auf den Modus „anhängen“, „aktualisieren“ oder „schreiben“ gesetzt. 
	 
	 </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>file</apiItemName><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier><apiDesc>Das File-Objekt, das die zu öffnende Datei angibt.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>fileMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Ein String der FileMode-Klasse, der die Fähigkeiten des FileStreams definiert, zum Beispiel die Fähigkeit, aus der Datei zu lesen oder in die Datei zu schreiben.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Öffnet das FileStream-Objekt synchron, wobei auf die im <codeph>file</codeph>-Parameter festgelegte Datei verwiesen wird. 
	 
	 <p>Wenn das FileStream-Objekt bereits geöffnet ist, wird die Datei durch den Aufruf dieser Methode vor dem Öffnen geschlossen und es werden keine weiteren Ereignisse (einschließlich <codeph>close</codeph>) für die zuvor geöffnete Datei übergegeben.</p>
	 
	 <p>Auf Systemen, die Dateisperren unterstützen, ist eine Datei, die im Modus „schreiben“ (<codeph>FileMode.WRITE</codeph> oder „aktualisieren“ <codeph>FileMode.UPDATE</codeph>) geöffnet wurde, erst lesbar, wenn sie geschlossen ist.</p>
	 
	 <p>Sobald Sie mit den Dateivorgängen fertig sind, rufen Sie die <codeph>close()</codeph>-Methode des FileStream-Objekts auf. Manche Betriebssysteme beschränken die Anzahl der gleichzeitig geöffneten Dateien.</p>
	 
	 </apiDesc><example conref="examples\FileStream.open.1.as"> Im folgenden Beispiel wird die Datei „test.txt“ im Unterordner „Apollo Test“ des Dokumentordners des Benutzers synchron geöffnet. Dann wird die Datei in einen String gelesen, wobei für die Textkodierung der Systemzeichensatz verwendet wird.
<codeblock>
import flash.filesystem.*;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.READ);
var str:String = fileStream.readMultiByte(file.size, File.systemCharset);
trace(str);
fileStream.close();
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#FileStream/close()"><linktext>close()</linktext></link><link href="flash.filesystem.xml#File"><linktext>File</linktext></link><link href="flash.filesystem.xml#FileMode"><linktext>FileMode</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:FileStream:openAsync"><apiName>openAsync</apiName><shortdesc>
	 Öffnet das FileStream-Objekt asynchron, wobei auf die im file-Parameter festgelegte Datei verwiesen wird.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der Dateispeicherort befindet sich im Anwendungsordner und der <codeph>fileMode</codeph>-Parameter ist auf den Modus „anhängen“, „aktualisieren“ oder „schreiben“ gesetzt. 
	 
	 </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>file</apiItemName><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier><apiDesc>Das File-Objekt, das die zu öffnende Datei angibt.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>fileMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Ein String der FileMode-Klasse, der die Fähigkeiten des FileStreams definiert, zum Beispiel die Fähigkeit, aus der Datei zu lesen oder in die Datei zu schreiben.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Öffnet das FileStream-Objekt asynchron, wobei auf die im <codeph>file</codeph>-Parameter festgelegte Datei verwiesen wird. 
	 
	 <p>Wenn das FileStream-Objekt bereits geöffnet ist, wird die Datei durch den Aufruf dieser Methode vor dem Öffnen geschlossen und es werden keine weiteren Ereignisse (einschließlich <codeph>close</codeph>) für die zuvor geöffnete Datei weitergegeben.</p>
	 
	 <p>Wenn der <codeph>fileMode</codeph>-Parameter den Wert <codeph>FileMode.READ</codeph> oder <codeph>FileMode.UPDATE</codeph> aufweist, liest AIR Daten in den Eingabepuffer, sowie die Datei geöffnet wird, und <codeph>progress</codeph>- und <codeph>open</codeph>-Ereignisse werden ausgelöst, während die Daten in den Eingabepuffer gelesen werden.</p>
	 
	 <p>Auf Systemen, die Dateisperren unterstützen, ist eine Datei, die im Modus „schreiben“ (<codeph>FileMode.WRITE</codeph> oder „aktualisieren“ <codeph>FileMode.UPDATE</codeph>) geöffnet wurde, erst lesbar, wenn sie geschlossen ist.</p>
	 
	 <p>Sobald Sie mit den Dateivorgängen fertig sind, rufen Sie die <codeph>close()</codeph>-Methode des FileStream-Objekts auf. Manche Betriebssysteme beschränken die Anzahl der gleichzeitig geöffneten Dateien.</p>
	 
`	 </apiDesc><example conref="examples\FileStream.openAsync.1.as"> Im folgenden Beispiel wird die Datei „test.txt“ im Unterordner „Apollo Test“ des Dokumentordners des Benutzers asynchron geöffnet. Dann wird die Datei in einen String gelesen, wobei für die Textkodierung der Systemzeichensatz verwendet wird.
<codeblock>
import flash.filesystem.*;
import flash.events.Event;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.addEventListener(Event.COMPLETE, fileCompleteHandler)
fileStream.openAsync(file, FileMode.READ);

function fileCompleteHandler(event:Event):void {
    var str:String = fileStream.readMultiByte(fileStream.bytesAvailable, File.systemCharset);
    trace(str);
    fileStream.close();
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#FileStream/close()"><linktext>close()</linktext></link><link href="flash.filesystem.xml#FileStream/event:complete"><linktext>complete-Ereignis</linktext></link><link href="flash.filesystem.xml#FileStream/event:ioError"><linktext>ioError event</linktext></link><link href="flash.filesystem.xml#FileStream/event:progress"><linktext>progress-Ereignis</linktext></link><link href="flash.filesystem.xml#FileMode"><linktext>FileMode</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:openAsync_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei ist nicht vorhanden; Sie haben keine entsprechende Berechtigung zum Öffnen der Datei; Sie öffnen eine Datei für den Lesezugriff, verfügen aber nicht über die Leseberechtigung; oder Sie öffnen eine Datei für den Schreibzugriff, verfügen aber nicht über die Schreibberechtigung. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Die Datei ist nicht vorhanden; Sie haben keine entsprechende Berechtigung zum Öffnen der Datei; Sie öffnen eine Datei für den Lesezugriff, verfügen aber nicht über die Leseberechtigung; oder Sie öffnen eine Datei für den Schreibzugriff, verfügen aber nicht über die Schreibberechtigung.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream:openAsync_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn Daten in den Eingabepuffer gelesen werden. (Beim Öffnen der Datei muss der <codeph>fileMode</codeph>-Parameter den Wert <codeph>FileMode.READ</codeph> oder <codeph>FileMode.UPDATE</codeph> aufweisen.)
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn Daten in den Eingabepuffer gelesen werden.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:FileStream:openAsync_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Dateidaten wurden in den Eingabepuffer gelesen. (Beim Öffnen der Datei muss der <codeph>fileMode</codeph>-Parameter den Wert <codeph>FileMode.READ</codeph> oder <codeph>FileMode.UPDATE</codeph> aufweisen.)
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Die Dateidaten wurden in den Eingabepuffer gelesen. </shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readBoolean"><apiName>readBoolean</apiName><shortdesc>
	
	 Liest einen booleschen Wert vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Ein boolescher Wert. Der Wert ist <codeph>true</codeph>, wenn das Byte ungleich 0 ist, oder andernfalls <codeph>false</codeph>.
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	
	 Liest einen booleschen Wert vom Dateistream, Bytestream oder Bytearray. Es wird ein einzelnes Byte gelesen und <codeph>true</codeph> zurückgegeben, wenn das Byte ungleich 0 ist; andernfalls wird <codeph>false</codeph> zurückgegeben.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readBoolean_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readByte"><apiName>readByte</apiName><shortdesc>
	
	 Liest ein vorzeichenbehaftetes Byte vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Rückgabewert liegt im Bereich von -128 bis 127.
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	
	 Liest ein vorzeichenbehaftetes Byte vom Dateistream, Bytestream oder Byte-Array.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readByte_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readBytes"><apiName>readBytes</apiName><shortdesc>
	
	 Liest die Anzahl der vom length-Parameter angegebenen Datenbyte aus dem Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bytes</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>Das <codeph>ByteArray</codeph>-Objekt, in das die Daten eingelesen werden.
	 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Der Offset innerhalb des mit dem Parameter <codeph>bytes</codeph> angegebenen Bereichs, ab dem das Lesen der Daten beginnt.
	 </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Die Anzahl der zu lesenden Byte. Der Standardwert 0 bewirkt, dass alle verfügbaren Daten gelesen werden.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Liest die Anzahl der vom <codeph>length</codeph>-Parameter angegebenen Datenbyte aus dem Dateistream, Bytestream oder Bytearray. Die Bytedaten werden ab der im Parameter <codeph>bytes</codeph> festgelegten Position in das im Parameter <codeph>offset</codeph> angegebenen ByteArray-Objekt gelesen.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readBytes_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readDouble"><apiName>readDouble</apiName><shortdesc>
	
	 Liest eine IEEE 754-Gleitkommazahl mit doppelter Genauigkeit vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Eine Gleitkommazahl nach IEEE 754 mit doppelter Genauigkeit.
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	
	 Liest eine IEEE 754-Gleitkommazahl mit doppelter Genauigkeit vom Dateistream, Bytestream oder Byte-Array.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readDouble_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readFloat"><apiName>readFloat</apiName><shortdesc>
	
	 Liest eine IEEE 754-Gleitkommazahl mit einfacher Genauigkeit vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Eine Gleitkommazahl nach IEEE 754 mit einfacher Genauigkeit.
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	
	 Liest eine IEEE 754-Gleitkommazahl mit einfacher Genauigkeit vom Dateistream, Bytestream oder Byte-Array.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readFloat_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readInt"><apiName>readInt</apiName><shortdesc>
	
	 Liest eine vorzeichenbehaftete 32-Bit-Ganzzahl vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Rückgabewert liegt im Bereich von -2147483648 bis 2147483647.
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	
	 Liest eine vorzeichenbehaftete 32-Bit-Ganzzahl vom Dateistream, Bytestream oder Byte-Array.
     </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readInt_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readMultiByte"><apiName>readMultiByte</apiName><shortdesc>
	
	 Liest einen Multibyte-String der angegebenen Länge unter Verwendung des angegebenen Zeichensatzes vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Ein UTF-8-kodierter String.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>Die Anzahl der aus dem Bytestream zu lesenden Byte.
	 </apiDesc></apiParam><apiParam><apiItemName>charSet</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der String, der den zum Interpretieren der Byte zu verwendenden Zeichensatz angibt. Mögliche Zeichensatz-Strings sind unter anderem <codeph>"shift-jis"</codeph>, <codeph>"cn-gb"</codeph> und <codeph>"iso-8859-1"</codeph>. Eine vollständige Liste finden Sie unter <xref href="../../charset-codes.html">Unterstützte Zeichensätze</xref>. 
	 
     <p><b>Hinweis:</b> Wird der Wert des <codeph>charSet</codeph>-Parameters vom aktuellen System nicht erkannt, verwenden <ph platform="actionscript">Adobe<sup>®</sup> Flash<sup>®</sup> Player oder</ph> Adobe<sup>®</sup> AIR<sup>®</sup> die Standard-Codepage des Systems als Zeichensatz. Beispielsweise kann ein Wert des Parameters <codeph>charSet</codeph> wie bei <codeph>myTest.readMultiByte(22, "iso-8859-01")</codeph>, wo <codeph>01</codeph> anstelle von <codeph>1</codeph> eingesetzt wird, auf Ihrem Entwicklungsrechner funktionieren, aber auf keinem anderen Rechner. Auf dem anderen Computer verwendet der <ph platform="actionscript">Flash Player</ph> oder die AIR-Laufzeitumgebung die Standard-Codepage des Systems.</p>
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Liest einen Multibyte-String der angegebenen Länge unter Verwendung des angegebenen Zeichensatzes vom Dateistream, Bytestream oder Byte-Array.
	 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/systemCharset"><linktext>File.systemCharset</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:readMultiByte_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readObject"><apiName>readObject</apiName><shortdesc>
	
	 Liest ein Objekt vom Dateistream, Bytestream oder Byte-Array, das im serialisierten AMF-Format kodiert ist.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das deserialisierte Objekt.
	 
	 </apiDesc><apiType value="any"/></apiReturn></apiOperationDef><apiDesc>
	
	 Liest ein Objekt vom Dateistream, Bytestream oder Byte-Array, das im serialisierten AMF-Format kodiert ist.
	 </apiDesc></apiOperationDetail><related-links><link href="../../flash/net/package.html#registerClassAlias()"><linktext>flash.net.registerClassAlias()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:readObject_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readShort"><apiName>readShort</apiName><shortdesc>
	
	 Liest eine vorzeichenbehaftete 16-Bit-Ganzzahl vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Rückgabewert liegt im Bereich von -32768 bis 32767.
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	
	 Liest eine vorzeichenbehaftete 16-Bit-Ganzzahl vom Dateistream, Bytestream oder Byte-Array.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readShort_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUTF"><apiName>readUTF</apiName><shortdesc>
	
	 Liest einen UTF-8-String vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Ein durch die Bytedarstellung von Zeichen erstellter UTF-8-String.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	
	 Liest einen UTF-8-String vom Dateistream, Bytestream oder Bytearray. Es wird davon ausgegangen, dass dem String eine short-Ganzzahl ohne Vorzeichen mit der Länge in Byte vorangestellt ist.
	 
	 <p>Diese Methode entspricht der <codeph>readUTF()</codeph>-Methode der Java<sup>®</sup>-Schnittstelle „IDataInput“.</p>
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUTF_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUTFBytes"><apiName>readUTFBytes</apiName><shortdesc>
	
	 Liest eine Folge von UTF-8-Byte der Anzahl vom Byte-Datenstrom oder Byte-Array und gibt einen String zurück.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Ein durch die Bytedarstellung von Zeichen erstellter UTF-8-String der angegebenen Länge.	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>Die Anzahl der zu lesenden Byte.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Liest eine Folge von UTF-8-Byte der Anzahl vom Byte-Datenstrom oder Byte-Array und gibt einen String zurück.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUTFBytes_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedByte"><apiName>readUnsignedByte</apiName><shortdesc>
	
	 Liest ein vorzeichenloses Byte vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Rückgabewert liegt im Bereich von 0 bis 255. 	   
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	
	 Liest ein vorzeichenloses Byte vom Dateistream, Bytestream oder Byte-Array.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedByte_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedInt"><apiName>readUnsignedInt</apiName><shortdesc>
	
	 Liest eine vorzeichenlose 32-Bit-Ganzzahl vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Rückgabewert liegt im Bereich von 0 bis 4294967295.
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	
	 Liest eine vorzeichenlose 32-Bit-Ganzzahl vom Dateistream, Bytestream oder Byte-Array.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedInt_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:readUnsignedShort"><apiName>readUnsignedShort</apiName><shortdesc>
	
	 Liest eine vorzeichenlose 16-Bit-Ganzzahl vom Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Lesefunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiException><apiDesc>Die Position, die zum Lesen der Daten angegeben wurde, übersteigt die Anzahl der verfügbaren Byte (angegeben durch die <codeph>bytesAvailable</codeph>-Eigenschaft).
	
	</apiDesc><apiItemName>EOFError</apiItemName><apiOperationClassifier>flash.errors:EOFError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Rückgabewert liegt im Bereich von 0 bis 65535. 
	 </apiDesc><apiOperationClassifier>uint</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	
	 Liest eine vorzeichenlose 16-Bit-Ganzzahl vom Dateistream, Bytestream oder Byte-Array.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:readUnsignedShort_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet. Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Die Datei kann nicht gelesen werden oder die Datei ist nicht geöffnet.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:truncate"><apiName>truncate</apiName><shortdesc>
	 Schneidet die Datei an der Stelle ab, die durch die position-Eigenschaft des FileStream-Objekts angegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei ist nicht zum Schreiben geöffnet.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Schneidet die Datei an der Stelle ab, die durch die <codeph>position</codeph>-Eigenschaft des FileStream-Objekts angegeben wird.  
	 
	 <p>Byte von der Stelle, die durch die <codeph>position</codeph>-Eigenschaft angegeben wird, bis zum Ende der Datei werden gelöscht. Die Datei muss zum Schreiben geöffnet sein.</p>
	 
	 </apiDesc><example conref="examples\FileStream.truncate.1.as"> Im folgenden Beispiel wird die Datei „test.txt“ im Unterordner „Apollo Test“ des Dokumentordners des Benutzers synchron geöffnet. Die Datei wird dann auf eine Länge von 100 Zeichen gekürzt, falls sie länger ist.
<codeblock>
import flash.filesystem.*;

var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.UPDATE);
if (file.size > 100) {
    fileStream.position = 100;
    fileStream.truncate();
}
fileStream.close();
</codeblock></example><example conref="examples\FileStream.truncate.2.as"> Im folgenden Beispiel wird die Datei „test.txt“ im Unterordner „Apollo Test“ des Dokumentordners des Benutzers <i>asynchron </i> geöffnet. Die Datei wird dann auf eine Länge von 100 Zeichen gekürzt, falls sie länger ist.
<codeblock>
var file:File = File.documentsDirectory;
file = file.resolvePath("Apollo Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.openAsync(file, FileMode.UPDATE);
trace("start", file.size)
if (file.size > 100) {
    fileStream.position = 100;
    fileStream.truncate();
}
fileStream.addEventListener(Event.CLOSE, fileClosed);
fileStream.close();
function fileClosed(event:Event):void {
    trace("closed", file.size); 
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#FileStream/position"><linktext>position</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:FileStream:writeBoolean"><apiName>writeBoolean</apiName><shortdesc>
	
	 Schreibt einen booleschen Wert.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Ein boolescher Wert, der angibt, welches Byte geschrieben wird. Hat der Parameter den Wert <codeph>true</codeph>, wird 1 geschrieben; bei <codeph>false</codeph> wird 0 geschrieben.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt einen booleschen Wert. Entsprechend dem Parameter <codeph>value</codeph> wird ein einzelnes Byte geschrieben: 1, wenn der Wert <codeph>true</codeph> ist oder 0, wenn der Wert <codeph>false</codeph> ist.
	 
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeBoolean_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeByte"><apiName>writeByte</apiName><shortdesc>
	
	 Schreibt ein Byte.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Ein Byte-Wert als Ganzzahl.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt ein Byte. Die unteren 8 Bit des Parameters werden verwendet, die oberen 24 Bit werden ignoriert.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeByte_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeBytes"><apiName>writeBytes</apiName><shortdesc>
	
	 Schreibt eine Bytesequenz vom angegebenen Byte-Array in den Dateistream, Bytestream oder das Byte-Array, beginnend mit dem durch „offset“ festgelegten Byte (unter Verwendung einer auf null basierenden Indexposition) mit einer durch „length“ festgelegten Länge.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>bytes</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiDesc>Das zu schreibende Byte-Array.
	 </apiDesc></apiParam><apiParam><apiItemName>offset</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Eine auf null basierende Indexposition, welche die Array-Position festlegt, ab der geschrieben werden soll.
	 </apiDesc></apiParam><apiParam><apiItemName>length</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Eine vorzeichenlose Ganzzahl, die festlegt, wie viele Byte des Puffers geschrieben werden sollen.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt eine <codeph>Byte</codeph>-Sequenz vom angegebenen Bytearray in den Dateistream, Bytestream oder das Bytearray, beginnend mit dem durch <codeph>offset</codeph> festgelegten Byte (unter Verwendung einer auf null basierenden Indexposition) mit einer durch <codeph>length</codeph> festgelegten Länge.
	 
	 <p>Wird der Parameter <codeph>length</codeph> weggelassen, wird die Standardlänge 0 verwendet und der gesamte Puffer wird ab der Position <codeph>offset</codeph> geschrieben. Wird auch der Parameter <codeph>offset</codeph> weggelassen, so wird der gesamte Pufferinhalt geschrieben. </p>
	 
	 <p>Wenn sich die Parameter <codeph>offset</codeph> bzw. <codeph>length</codeph> außerhalb des gültigen Bereichs befinden, werden sie auf den Anfang bzw. auf das Ende des <codeph>bytes</codeph>-Array gesetzt.</p>
 	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeBytes_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeDouble"><apiName>writeDouble</apiName><shortdesc>
	
	 Schreibt eine Gleitkommazahl nach IEEE 754 mit doppelter Genauigkeit (64 Bit).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Eine Gleitkommazahl mit doppelter Genauigkeit (64 Bit).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt eine Gleitkommazahl nach IEEE 754 mit doppelter Genauigkeit (64 Bit).
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeDouble_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeFloat"><apiName>writeFloat</apiName><shortdesc>
	
	 Schreibt eine Gleitkommazahl nach IEEE 754 mit einfacher Genauigkeit (32 Bit).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Eine Gleitkommazahl mit einfacher Genauigkeit (32 Bit).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt eine Gleitkommazahl nach IEEE 754 mit einfacher Genauigkeit (32 Bit).
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeFloat_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeInt"><apiName>writeInt</apiName><shortdesc>
	
	 Schreibt eine vorzeichenbehaftete 32-Bit-Ganzzahl.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Ein Byte-Wert als vorzeichenbehaftete Ganzzahl.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt eine vorzeichenbehaftete 32-Bit-Ganzzahl.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeInt_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeMultiByte"><apiName>writeMultiByte</apiName><shortdesc>
	
	 Schreibt einen Multibyte-String unter Verwendung des angegebenen Zeichensatzes in den Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der String-Wert, der geschrieben werden soll.
	 </apiDesc></apiParam><apiParam><apiItemName>charSet</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der String, der den zu verwendenden Zeichensatz angibt. Mögliche Zeichensatz-Strings sind unter anderem <codeph>"shift-jis"</codeph>, <codeph>"cn-gb"</codeph> und <codeph>"iso-8859-1"</codeph>. Eine vollständige Liste finden Sie unter <xref href="../../charset-codes.html">Unterstützte Zeichensätze</xref>. 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt einen Multibyte-String unter Verwendung des angegebenen Zeichensatzes in den Dateistream, Bytestream oder Byte-Array. 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/systemCharset"><linktext>File.systemCharset</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:writeMultiByte_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeObject"><apiName>writeObject</apiName><shortdesc>
	
	 Schreibt ein Objekt im serialisierten AMF-Format in den Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>object</apiItemName><apiType value=""/><apiDesc>Das zu serialisierende Objekt
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt ein Objekt im serialisierten AMF-Format in den Dateistream, Bytestream oder Byte-Array.
	 </apiDesc></apiOperationDetail><related-links><link href="../../flash/net/package.html#registerClassAlias()"><linktext>flash.net.registerClassAlias()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:FileStream:writeObject_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeShort"><apiName>writeShort</apiName><shortdesc>
	
	 Schreibt eine 16-Bit-Ganzzahl.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Ein Byte-Wert als Ganzzahl.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt eine 16-Bit-Ganzzahl. Die unteren 16 Bit des Parameters werden verwendet, die oberen 16 Bit werden ignoriert.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeShort_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUTF"><apiName>writeUTF</apiName><shortdesc>
	
	 Schreibt einen UTF-8-String in den Dateistream, Bytestream oder Byte-Array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der String-Wert, der geschrieben werden soll.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt einen UTF-8-String in den Dateistream, Bytestream oder Bytearray. Die Länge des UTF-8-Strings in Byte als 16-Bit-Ganzzahl wird zuerst geschrieben, gefolgt von den Byte für die Zeichen des Strings.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUTF_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUTFBytes"><apiName>writeUTFBytes</apiName><shortdesc>
	
	 Schreibt einen UTF-8-String.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der String-Wert, der geschrieben werden soll.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt einen UTF-8-String. Entspricht <codeph>writeUTF()</codeph>, doch dem String wird kein 16-Bit-Wort mit der Längenangabe vorangestellt.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUTFBytes_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:FileStream:writeUnsignedInt"><apiName>writeUnsignedInt</apiName><shortdesc>
	
	 Schreibt eine vorzeichenlose 32-Bit-Ganzzahl.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei wurde nicht geöffnet; die Datei wurde geöffnet, jedoch nicht mit Schreibfunktionen; oder bei einer Datei, die für synchrone Vorgänge geöffnet wurde (mit der <codeph>open()</codeph>-Methode), kann die Datei nicht gelesen werden (weil sie zum Beispiel nicht vorhanden ist).
	
	</apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>Ein Byte-Wert als vorzeichenlose Ganzzahl.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	
	 Schreibt eine vorzeichenlose 32-Bit-Ganzzahl.
	 </apiDesc></apiOperationDetail><adobeApiEvent id="flash.filesystem:FileStream:writeUnsignedInt_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist). Dieses Ereignis wird nur für Dateien ausgelöst, die für asynchrone Vorgänge geöffnet wurden (mit der <codeph>openAsync()</codeph>-Methode).
	
	</apiDesc></adobeApiEventDetail><shortdesc>Sie können nicht in die Datei schreiben (zum Beispiel, weil die Datei nicht vorhanden ist).</shortdesc></adobeApiEvent></apiOperation><apiValue id="flash.filesystem:FileStream:bytesAvailable:get"><apiName>bytesAvailable</apiName><shortdesc>
	
	 Gibt für die zum Lesen verfügbaren Daten im Eingabepuffer die Anzahl der Byte an.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	
	 Gibt für die zum Lesen verfügbaren Daten im Eingabepuffer die Anzahl der Byte an. Aus dem Programmcode der Benutzer muss <codeph>bytesAvailable</codeph> aufgerufen werden, um sicherzustellen, dass genügend Daten verfügbar sind, bevor diese mit einer der Lesemethoden gelesen werden.
	 </apiDesc><example conref="examples\FileStream.bytesAvailable.1.as"/></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:endian:get"><apiName>endian</apiName><shortdesc>
	
	 Die Bytereihenfolge der Daten. Entweder die Konstante BIG_ENDIAN oder LITTLE_ENDIAN der Endian-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	
	 Die Bytereihenfolge der Daten. Entweder die Konstante <codeph>BIG_ENDIAN</codeph> oder <codeph>LITTLE_ENDIAN</codeph> der Endian-Klasse.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:objectEncoding:get"><apiName>objectEncoding</apiName><shortdesc>
     Gibt an, ob das Format AMF3 oder AMF0 verwendet wird, wenn binäre Daten mit der readObject()-Methode gelesen oder mit der writeObject()-Methode geschrieben werden.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob das Format AMF3 oder AMF0 verwendet wird, wenn binäre Daten mit der <codeph>readObject()</codeph>-Methode gelesen oder der <codeph>writeObject()</codeph>-Methode geschrieben werden.
	 
	 <p>Der Wert ist eine Konstante der ObjectEncoding-Klasse. Standardmäßig wird das Format AMF3 verwendet.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#ObjectEncoding"><linktext>ObjectEncoding</linktext></link><link href="flash.filesystem.xml#FileStream/readObject()"><linktext>readObject()</linktext></link><link href="flash.filesystem.xml#FileStream/writeObject()"><linktext>writeObject()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:FileStream:position:get"><apiName>position</apiName><shortdesc>
	 Die aktuelle Position in der Datei. </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Die aktuelle Position in der Datei.  
	 
	 <p>Dieser Wert wird auf eine der folgenden Weise geändert:</p>
	 
	 <ul>
	 
	 	<li>Wenn Sie die Eigenschaft ausdrücklich festlegen</li>
	 
	 	<li>Wenn aus dem FileStream-Objekt gelesen wird (mit einer der Lesemethoden)</li>
	 
	 	<li>Wenn in das FileStream-Objekt geschrieben wird</li>
	 
	 </ul>
	 
	 <p>Die Position wird als Number (nicht als uint) definiert, um Dateien mit einer Länge von mehr als 2<sup>32</sup> Byte zu unterstützen. Der Wert dieser Eigenschaft ist immer eine ganze Zahl unter 2<sup>53</sup>. Wenn Sie diesen Wert auf eine Zahl mit Dezimalstellen einstellen, wird der Wert auf die nächste ganze Zahl abgerundet.</p>
	 
	 <p>Wenn die <codeph>position</codeph>-Eigenschaft beim asynchronen Lesen einer Datei festgelegt wird, beginnt die Anwendung, den Lesepuffer mit den Daten ab der angegebenen Position zu füllen und die <codeph>bytesAvailable</codeph>-Eigenschaft kann auf 0 gesetzt werden. Warten Sie auf ein <codeph>complete</codeph>-Ereignis, bevor Sie eine read-Methode zum Lesen der Daten verwenden oder warten Sie auf ein <codeph>progress</codeph>-Ereignis und überprüfen Sie die <codeph>bytesAvailable</codeph>-Eigenschaft, bevor Sie eine read-Methode verwenden.</p>
	  
	 </apiDesc><example conref="examples\FileStream.position.1.as"> Im folgenden Beispiel wird die <codeph>position</codeph>-Eigenschaft des FileStream-Objekts aktualisiert, während die Anwendung Daten aus einer Datei liest.
<codeblock>
import flash.fileSystem.*;
import flash.utils.ByteArray;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory.resolvePath("Apollo Test/test.txt");
var stream:FileStream = new FileStream();
stream.addEventListener(Event.COMPLETE, readBytes);
stream.openAsync(sourceFile, File);

function readBytes(e:Event):void {
    var bytes:ByteArray = new ByteArray();
    trace("position 0:", stream.position); // 0
    bytes[0] = stream.readByte();
    trace("position 1:", stream.position); // 1
    fileStream.readBytes(bytes, stream.position, 4); 
    trace("position 2:", stream.position); // 5
    stream.close();
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileStream:readAhead:get"><apiName>readAhead</apiName><shortdesc>
	 Beim asynchronen Lesen von Dateien die Menge der angeforderten Daten.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>Should the readAhead value dwindle to 0 as the data is read in.
	 
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Beim asynchronen Lesen von Dateien die Menge der angeforderten Daten.
	 
	 <p>Diese Eigenschaft legt fest, wie viele Daten ein asynchroner Stream hinter der aktuellen Position zu lesen versucht. Der Standardwert dieser Eigenschaft ist unendlich; standardmäßig wird eine zum asynchronen Lesen geöffnete Datei bis zum Ende der Datei gelesen.</p>
	 
	 <p>Das Lesen der Daten aus dem Lesepuffer ändert nicht den Wert der <codeph>readAhead</codeph>-Eigenschaft. Wenn Sie Daten aus dem Puffer lesen, werden neue Daten eingelesen, um den Lesepuffer zu füllen.</p>
	 
	 <p>Die <codeph>readAhead</codeph>-Eigenschaft hat keine Auswirkung auf eine synchron geöffnete Datei.</p>
	 
	 <p>Während Daten asynchron eingelesen werden, löst das FileStream-Objekt <codeph>progress</codeph>-Ereignisse aus. Überprüfen Sie in der Ereignisprozedurmethode des <codeph>progress</codeph>-Ereignisses, ob die erforderliche Anzahl an Bytes verfügbar ist (indem Sie die <codeph>bytesAvailable</codeph>-Eigenschaft überprüfen) und lesen Sie die Daten dann mit einer Lesemethode aus dem Lesepuffer.</p>
	 
	 </apiDesc><example conref="examples\FileStream.readAhead.1.as">     Im folgenden Beispiel wird mit der <codeph>readAhead</codeph>-Eigenschaft die Datenmenge, die in eine Datei gelesen wird, auf 100 Byte begrenzt:
<codeblock>
import flash.filesystem.*;

var file:File = File.desktopDirectory.resolvePath("test.txt");
var fileStream:FileStream = new FileStream();
fileStream.readAhead = 100;
fileStream.addEventListener(ProgressEvent.PROGRESS, readProgressHandler)
fileStream.openAsync(file, FileMode.READ);
var results:ByteArray;

function readProgressHandler(event:ProgressEvent):void {
    if (fileStream.bytesAvailable >= 100) {
        fileStream.readBytes(results, 0, 100);
    }
}
</codeblock><swfblock conref="examples\FileStream.readAhead.1.swf"/></example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.filesystem:FileMode"><apiName>FileMode</apiName><shortdesc>
 Die FileMode-Klasse definiert Stringkonstanten, die im fileMode-Parameter der Methoden open() und openAsync() der FileStream-Klasse verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die FileMode-Klasse definiert Stringkonstanten, die im <codeph>fileMode</codeph>-Parameter der Methoden <codeph>open()</codeph> und <codeph>openAsync()</codeph> der FileStream-Klasse verwendet werden. Der <codeph>fileMode</codeph>-Parameter dieser Methoden bestimmt die Möglichkeiten des FileStream-Objekts, nachdem die Datei geöffnet wurde. 
 
 <p>Die folgenden Funktionen stehen in verschiedenen Kombinationen zur Verfügung, basierend auf der im <codeph>fileMode</codeph>-Parameterwert festgelegten open-Methode:</p>
 
 <ul>
 
 	<li>Lesen – Das FileStream-Objekt kann Daten aus der Datei lesen.</li>
 	<li>Schreiben – Das FileStream-Objekt kann Daten in die Datei schreiben.</li>
 	<li>Erstellen – Das FileStream-Objekt erstellt beim Öffnen eine nicht vorhandene Datei.</li>
 	<li>Beim Öffnen kürzen – Daten in der Datei werden beim Öffnen gelöscht (bevor Daten geschrieben werden).</li>
 	<li>Geschriebene Daten anhängen – Daten werden immer an das Ende der Datei geschrieben (wenn eine Schreibmethode aufgerufen wird).</li>
 
 </ul>
 
 <p>In der folgenden Tabelle sind die Funktionen aller Konstanten in der FileMode-Klasse aufgeführt, die als <codeph>fileMode</codeph>-Parameter einer open-Methode eines FileStream-Objekts zur Verfügung stehen:</p>
 
 <adobetable class="innertable">
 
 
 
 
 
 <tgroup cols="6"><thead><row><entry>FileMode-Konstante</entry><entry align="center">Lesen</entry><entry align="center">Schreiben</entry><entry align="center">Erstellen</entry><entry align="center">Beim Öffnen kürzen</entry><entry align="center">Geschriebene Daten anhängen</entry></row></thead><tbody><row>
 	<entry><codeph>READ</codeph></entry>
 	<entry align="center"> • </entry>
 	<entry> </entry>
 	<entry> </entry>
 	<entry> </entry>
 	<entry> </entry>
 </row><row>
 	<entry><codeph>WRITE</codeph></entry>
 	<entry> </entry>
 	<entry align="center"> • </entry>
 	<entry align="center"> • </entry>
 	<entry align="center"> • </entry>
 	<entry> </entry>
 </row><row>
 	<entry><codeph>APPEND</codeph></entry>
 	<entry> </entry>
 	<entry align="center"> • </entry>
 	<entry align="center"> • </entry>
 	<entry/>
 	<entry align="center"> • </entry>
 </row><row>
 	<entry><codeph>UPDATE</codeph></entry>
 	<entry align="center"> • </entry>
 	<entry align="center"> • </entry>
 	<entry align="center"> • </entry>
 	<entry align="center"/>
 	<entry> </entry>
 </row></tbody></tgroup></adobetable>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.filesystem.xml#FileStream/open()"><linktext>FileStream.open()</linktext></link><link href="flash.filesystem.xml#FileStream/openAsync()"><linktext>FileStream.openAsync()</linktext></link></related-links><apiValue id="flash.filesystem:FileMode:APPEND"><apiName>APPEND</apiName><shortdesc> 
	Wird verwendet für eine Datei, die im Schreibmodus geöffnet wird, wobei alle geschriebenen Daten an das Ende der Datei angehängt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>append</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet für eine Datei, die im Schreibmodus geöffnet wird, wobei alle geschriebenen Daten an das Ende der Datei angehängt werden. Beim Öffnen werden nicht vorhandene Dateien erstellt. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:READ"><apiName>READ</apiName><shortdesc> 
	Wird verwendet für eine Datei, die im schreibgeschützten Modus geöffnet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>read</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet für eine Datei, die im schreibgeschützten Modus geöffnet wird. Die Datei muss vorhanden sein (fehlende Dateien werden nicht erstellt).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:UPDATE"><apiName>UPDATE</apiName><shortdesc> 
	Wird verwendet für eine Datei, die im Lesen/Schreiben-Modus geöffnet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet für eine Datei, die im Lesen/Schreiben-Modus geöffnet wird. Beim Öffnen werden nicht vorhandene Dateien erstellt. 
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:FileMode:WRITE"><apiName>WRITE</apiName><shortdesc> 
	Wird verwendet für eine Datei, die im lesegeschützten Modus geöffnet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>write</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet für eine Datei, die im lesegeschützten Modus geöffnet wird. Beim Öffnen werden nicht vorhandene Dateien erstellt und vorhandene Dateien gekürzt (die darin enthaltenen Daten werden gelöscht).
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.filesystem:File"><apiName>File</apiName><shortdesc>
 Ein File-Objekt stellt einen Pfad zu einer Datei oder einem Ordner dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.net:FileReference</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein File-Objekt stellt einen Pfad zu einer Datei oder einem Ordner dar. Dabei kann es sich um eine vorhandene oder noch nicht vorhandene Datei (bzw. Ordner) handeln, zum Beispiel kann es den Pfad zu einer zu erstellenden Datei (oder Ordner) darstellen. 
 
  <p>Die File-Klasse verfügt über verschiedene Eigenschaften und Methoden für das Abrufen von Informationen zum Dateisystem und zum Ausführen von Vorgängen (z. B Kopieren von Dateien und Ordnern).</p>
  
  <p>Sie können File-Objekte zusammen mit der FileStream-Klasse verwenden, um Dateien zu lesen und zu schreiben. </p>
  
  <p>Die File-Klasse erweitert die FileReference-Klasse. Die FileReference-Klasse, die sowohl in Flash<sup>®</sup> Player als auch in Adobe<sup>®</sup> AIR<sup>®</sup> verfügbar ist, stellt einen Zeiger auf eine Datei dar. Die File-Klasse fügt jedoch Eigenschaften und Methoden hinzu, die aus Sicherheitsgründen in Flash Player (in einer SWF-Datei, die in einem Browser ausgeführt wird) nicht angezeigt werden.</p>
  
  <p>Die File-Klasse enthält statische Eigenschaften, mit denen Sie auf häufig verwendete Ordnerspeicherorte verweisen können. Zu diesen statischen Eigenschaften gehören:</p>
  
  <ul>
  	<li><codeph>File.applicationStorageDirectory</codeph>: ein für jede der installierten AIR-Anwendungen eindeutiger Speicherordner</li>
      <li><codeph>File.applicationDirectory</codeph>: der schreibgeschützte Ordner, in dem die Anwendung (ggf. zusammen mit Assets) installiert ist</li>
      <li><codeph>File.desktopDirectory</codeph>: der Desktopordner des Benutzers</li>
      <li><codeph>File.documentsDirectory</codeph>: der Dokumentordner des Benutzers</li>
      <li><codeph>File.userDirectory</codeph>: der Benutzerordner</li>
  </ul>
  
  <p>Diese Eigenschaften verfügen auf verschiedenen Betriebssystemen über verschiedene gültige Werte. Beispiel: Unter Mac OS, Linux und Windows sind die nativen Pfade zum Desktopordner des Benutzers jeweils unterschiedlich. Die <codeph>File.desktopDirectory</codeph>-Eigenschaft verweist jedoch auf den richtigen Desktopordnerpfad für diese Plattformen. Wenn Ihre Anwendungen auf allen Plattformen funktionieren sollen, verwenden Sie diese Eigenschaften als Basis für Verweise auf andere von der Anwendung verwendete Dateien. Verwenden Sie anschließend die <codeph>resolvePath()</codeph>-Methode für die genauere Festlegung des Pfads. Der nachfolgende Code verweist z. B. auf die Datei „preferences.xml“ im Speicherordner der Anwendung.</p>
  
  <codeblock platform="actionscript"> var prefsFile:File = File.applicationStorageDirectory;
  prefsFile = prefsFile.resolvePath("preferences.xml");</codeblock>
  
  <codeblock platform="javascript"> var prefsFile = air.File.applicationStorageDirectory;
  prefsFile = prefsFile.resolvePath("preferences.xml");</codeblock>
  
  <p>Wenn Sie beim Verweis auf eine Datei den genauen nativen Pfad verwenden, funktioniert der Verweis nur auf einer Plattform. Das folgende File-Objekt würde beispielsweise nur unter Windows funktionieren:</p> 
  
  <codeblock platform="actionscript">new File("C:\Documents and Settings\joe\My Documents\test.txt")</codeblock>
  <codeblock platform="javascript">new air.File("C:\Documents and Settings\joe\My Documents\test.txt")</codeblock>
  
  <p>Der Anwendungsspeicherordner ist besonders hilfreich. Er gibt einen anwendungsspezifischen Speicherordner für die AIR-Anwendung an. Er wird in der <codeph>File.applicationStorageDirectory</codeph>-Eigenschaft festgelegt.</p>
  
  <p>Es dürfen keine Inhalte aus dem Anwendungsordner (der Ordner, in dem die AIR-Anwendung installiert ist) entfernt oder diesem hinzugefügt werden. Dadurch könnte die AIR-Anwendung beschädigt und die Anwendungssignatur ungültig werden. Standardmäßig lässt AIR Sie nicht in den Anwendungsordner schreiben, da dieses für alle Benutzerkonten auf allen Betriebssystemen schreibgeschützt ist. Verwenden Sie den Anwendungsspeicherordner, um interne Anwendungsdateien zu schreiben. Verwenden Sie den Dokumentordner, um Dateien zu schreiben, die Benutzer außerhalb Ihrer Anwendung verwenden, z. B. bearbeitete Bild- oder Textdateien.</p>
  
  </apiDesc></apiClassifierDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>FileStream</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File_flash.events.FileListEvent.DIRECTORY_LISTING_directoryListing"><apiName>directoryListing</apiName><shortdesc>
 Wird ausgelöst, wenn eine Ordnerliste als Ergebnis eines Aufrufs der getDirectoryListingAsync()-Methode verfügbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.FileListEvent.DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier>flash.events.FileListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Wird ausgelöst, wenn eine Ordnerliste als Ergebnis eines Aufrufs der <codeph>getDirectoryListingAsync()</codeph>-Methode verfügbar ist.
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.filesystem.xml#File/getDirectoryListingAsync()"><linktext>File.getDirectoryListingAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.FileListEvent.SELECT_MULTIPLE_selectMultiple"><apiName>selectMultiple</apiName><shortdesc>
 Wird ausgelöst, wenn der Benutzer Dateien aus einem Dialogfeld auswählt, das durch den Aufruf der browseForOpenMultiple()-Methode geöffnet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.FileListEvent.SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier>flash.events.FileListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Wird ausgelöst, wenn der Benutzer Dateien aus einem Dialogfeld auswählt, das durch den Aufruf der <codeph>browseForOpenMultiple()</codeph>-Methode geöffnet wurde. 
 
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.filesystem.xml#File/browseForMultiple()"><linktext>browseForMultiple()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.SELECT_select"><apiName>select</apiName><shortdesc>
 Wird ausgelöst, wenn der Benutzer eine Datei oder einen Ordner aus einem Dialogfeld zur Datei- oder Ordnernavigation auswählt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.SELECT</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Wird ausgelöst, wenn der Benutzer eine Datei oder einen Ordner aus einem Dialogfeld zur Datei- oder Ordnernavigation auswählt. 
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.SecurityErrorEvent.SECURITY_ERROR_securityError"><apiName>securityError</apiName><shortdesc>
 Wird ausgelöst, wenn ein Vorgang eine Sicherheitsbeschränkung verletzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.SecurityErrorEvent.SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events.SecurityErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Wird ausgelöst, wenn ein Vorgang eine Sicherheitsbeschränkung verletzt.
 
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.IOErrorEvent.IO_ERROR_ioError"><apiName>ioError</apiName><shortdesc>
 Wird ausgelöst, wenn während eines asynchronen Dateivorgangs ein Fehler auftritt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IOErrorEvent.IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events.IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Wird ausgelöst, wenn während eines asynchronen Dateivorgangs ein Fehler auftritt.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
 Wird ausgelöst, wenn ein asynchroner Vorgang abgeschlossen ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Wird ausgelöst, wenn ein asynchroner Vorgang abgeschlossen ist.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.filesystem:File_flash.events.Event.CANCEL_cancel"><apiName>cancel</apiName><shortdesc>
 Wird ausgelöst, wenn ein ausstehender asynchroner Vorgang abgebrochen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.CANCEL</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Wird ausgelöst, wenn ein ausstehender asynchroner Vorgang abgebrochen wird.
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.filesystem:File:File"><apiName>File</apiName><shortdesc>
	Die Konstruktorfunktion für die File-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Die Syntax des <codeph>path</codeph>-Parameters ist ungültig.
	
	</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>path</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Pfad zu der Datei. Sie können den Pfad mit einer URL oder in der (plattformspezifischen) Schreibweise für native Pfade festlegen. 
	
	<p>Wenn Sie eine URL angeben, können Sie eines der folgenden URL-Schemas verwenden: <codeph>file</codeph>, <codeph>app</codeph> oder <codeph>app-storage</codeph>. Die folgenden Werte sind gültige Werte für den <codeph>path</codeph>-Parameter unter Verwendung der URL-Schreibweise: </p>
	
	<ul>
	
		<li><codeph>"app:/DesktopPathTest.xml"</codeph></li> 
		<li><codeph>"app-storage:/preferences.xml"</codeph></li> 
		<li><codeph>"file:///C:/Documente%20und%20Einstellungen/bob/Desktop"</codeph> (der Desktop auf dem Windows-Computer von Bob)</li>
		<li><codeph>"file:///Users/bob/Desktop"</codeph> (der Desktop auf dem Mac-Computer von Bob)</li>
	
	</ul>
	
	<p>Die <codeph>app</codeph>- und <codeph>app-storage</codeph>-URL-Schemas sind hilfreich, weil sie auf allen Dateisystemen auf eine gültige Datei verweisen können. In den beiden anderen Beispielen, die das <codeph>file</codeph>-URL-Schema verwenden, um auf den Desktopordner des Benutzers zu verweisen, wäre es jedoch besser, <i>kein</i> <codeph>path</codeph>-Argument an den <codeph>File()</codeph>-Konstruktor zu übergeben und dann dem <codeph>File.desktopDirectory</codeph>-File-Objekt zuzuweisen. Dies ist eine plattform- und benutzerunabhängige Möglichkeit, auf den Desktopordner zuzugreifen.</p>
	
	<p>Wenn Sie einen nativen Pfad angeben, können Sie unter Windows entweder den umgekehrten Schrägstrich oder den Schrägstrich als Pfadtrennzeichen in diesem Argument verwenden. Unter Mac OS und Linux verwenden Sie den Schrägstrich. Die folgenden Werte sind gültige Werte für den <codeph>path</codeph>-Parameter unter Verwendung der Nativer-Pfad-Schreibweise:</p>
	
	<ul>
	
		<li><codeph>"C:/Dokumente und Einstellungen/bob/Desktop"</codeph></li>
		<li><codeph>"/Users/bob/Desktop"</codeph></li>
	
	</ul>
	
	<p>Für diese beiden Beispiele sollten Sie jedoch <i>kein</i> <codeph>path</codeph>-Argument an den <codeph>File()</codeph>-Konstruktor übergeben und dann dem <codeph>File.desktopDirectory</codeph>-File-Objekt zuweisen. Dies ist eine plattform- und benutzerunabhängige Möglichkeit, auf den Desktopordner zuzugreifen.</p>
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	Die Konstruktorfunktion für die File-Klasse. 
	
	<p>Wenn Sie ein <codeph>path</codeph>-Argument übergeben, zeigt das File-Objekt auf den angegebenen Pfad und die Eigenschaften <codeph>nativePath</codeph> und <codeph>url</codeph> werden diesem Pfad entsprechend eingestellt.</p>
	
	<p>Obwohl Sie zum Festlegen eines Dateipfads ein <codeph>path</codeph>-Argument übergeben können, sollten Sie überlegen, ob dadurch vielleicht plattformspezifischer Code entsteht. Beispiel: Ein nativer Pfad wie <codeph>"C:\\\\Dokumente und Einstellungen\\klaus\\Desktop"</codeph> oder eine URL wie <codeph>"file:///C:/Dokumente%20und%20Einstellungen/klaus/Desktop"</codeph> ist nur unter Windows gültig. Es ist besser, stattdessen die folgenden statischen Eigenschaften zu verwenden, die häufig verwendete Ordner repräsentieren und auf allen Plattformen gültig sind:</p>
	
	<ul>
	<li><codeph>File.applicationDirectory</codeph></li>
	<li><codeph>File.applicationStorageDirectory</codeph></li>
	<li><codeph>File.desktopDirectory</codeph></li>
	<li><codeph>File.documentsDirectory</codeph></li>
	<li><codeph>File.userDirectory</codeph></li>
	</ul>
	
	<p>Mit der <codeph>resolvePath()</codeph>-Methode erhalten Sie einen Pfad relativ zu diesen Ordnern. Beispiel: Mithilfe des folgenden Codes verweist ein File-Objekt auf die Datei „settings.xml“ im Anwendungsspeicherordner:</p>
	
	<codeblock platform="actionscript">var file:File = File.applicationStorageDirectory.resolvePath("settings.xml");</codeblock>
	
	<codeblock platform="javascript">var file = air.File.applicationStorageDirectory.resolvePath("settings.xml");</codeblock>
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.filesystem.xml#File/nativePath"><linktext>nativePath</linktext></link></related-links></apiConstructor><apiOperation id="flash.filesystem:File:browseForDirectory"><apiName>browseForDirectory</apiName><shortdesc>
	 Zeigt ein Dialogfeld zur Ordnerauswahl an, in dem der Benutzer einen Ordner auswählen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der String, der in der Titelleiste des Dialogfelds angezeigt wird.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Zeigt ein Dialogfeld zur Ordnerauswahl an, in dem der Benutzer einen Ordner auswählen kann. Wenn der Benutzer den Ordner auswählt, wird das <codeph>select</codeph>-Ereignis ausgelöst. Die <codeph>target</codeph>-Eigenschaft des <codeph>select</codeph>-Ereignisses ist das File-Objekt, das auf den ausgewählten Ordner weist.
	 
	 </apiDesc><example conref="examples\File.browseForDirectory.1.as"> Im folgenden Beispiel wird die <codeph>File.browseForDirectory()</codeph>-Methode verwendet, damit der Benutzer einen Ordner auswählen kann. Wenn der Ordner ausgewählt ist, listet der Code den Inhalt des ausgewählten Ordners in der <codeph>trace()</codeph>-Ausgabe aus.
<codeblock>
import flash.filesystem.File;
import flash.events.Event;

var directory:File = File.documentsDirectory;

try
{
    directory.browseForDirectory("Select Directory");
    directory.addEventListener(Event.SELECT, directorySelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function directorySelected(event:Event):void 
{
    directory = event.target as File;
    var files:Array = directory.getDirectoryListing();
    for(var i:uint = 0; i &lt; files.length; i++)
    {
        trace(files[i].name);
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/browseForOpen()"><linktext>browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/browseForSave()"><linktext>browseForSave()</linktext></link><link href="flash.filesystem.xml#File/event:select"><linktext>select</linktext></link><link href="flash.net.xml#FileFilter"><linktext>flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForDirectory_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn der Benutzer im Dialogfeld „Datei öffnen“ auf die Schaltfläche „Abbrechen“ klickt. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn der Benutzer im Dialogfeld „Datei öffnen“ auf die Schaltfläche „Abbrechen“ klickt.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForDirectory_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn der Benutzer einen Ordner auswählt und das Dialogfeld zur Ordnerauswahl schließt. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn der Benutzer einen Ordner auswählt und das Dialogfeld zur Ordnerauswahl schließt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForOpen"><apiName>browseForOpen</apiName><shortdesc>
	 Zeigt das Dialogfeld „Datei öffnen“ an, in dem der Benutzer eine Datei zum Öffnen auswählen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der String, der in der Titelleiste des Dialogfelds angezeigt wird.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>typeFilter</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Ein Array mit FileFilter-Instanzen zur Filterung der im Dialogfeld angezeigten Dateien. Wenn Sie diesen Parameter weglassen, werden alle Dateien angezeigt. Weitere Informationen finden Sie im Abschnitt zur FileFilter-Klasse.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Zeigt das Dialogfeld „Datei öffnen“ an, in dem der Benutzer eine Datei zum Öffnen auswählen kann.
	 
	 <p>Wenn der Benutzer die Datei auswählt, wird das <codeph>select</codeph>-Ereignis ausgelöst. Die <codeph>target</codeph>-Eigenschaft des <codeph>select</codeph>-Ereignisses ist das File-Objekt, das auf die ausgewählte Datei weist.</p>
	 
	 </apiDesc><example conref="examples\File.browseForOpen.1.as"> Im folgenden Beispiel wird die <codeph>File.browseForOpen()</codeph>-Methode verwendet, damit der Benutzer eine Textdatei auswählen kann. Wenn die Datei ausgewählt ist, liest der Code die Dateidaten in einen String.
<codeblock>
import flash.filesystem.*;
import flash.events.Event;
import flash.net.FileFilter;

var fileToOpen:File = new File();
var txtFilter:FileFilter = new FileFilter("Text", "*.as;*.css;*.html;*.txt;*.xml");

try 
{
    fileToOpen.browseForOpen("Open", [txtFilter]);
    fileToOpen.addEventListener(Event.SELECT, fileSelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function fileSelected(event:Event):void 
{
    var stream:FileStream = new FileStream();
    stream.open(event.target, FileMode.READ);
    var fileData:String = stream.readUTFBytes(stream.bytesAvailable);
    trace(fileData);
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/browseForSave()"><linktext>browseForSave()</linktext></link><link href="flash.filesystem.xml#File/browseForOpenMultiple()"><linktext>browseForOpenMultiple()</linktext></link><link href="flash.filesystem.xml#File/browseDirectory()"><linktext>browseDirectory()</linktext></link><link href="flash.filesystem.xml#File/event:select"><linktext>select</linktext></link><link href="flash.net.xml#FileFilter"><linktext>flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForOpen_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn der Benutzer im Dialogfeld „Datei öffnen“ auf die Schaltfläche „Abbrechen“ klickt. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn der Benutzer im Dialogfeld „Datei öffnen“ auf die Schaltfläche „Abbrechen“ klickt.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpen_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn der Benutzer eine Datei auswählt und das Dialogfeld „Datei öffnen“ schließt. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn der Benutzer eine Datei auswählt und das Dialogfeld „Datei öffnen“ schließt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForOpenMultiple"><apiName>browseForOpenMultiple</apiName><shortdesc>
	 Zeigt ein Dialogfeld „Datei öffnen“ an, in dem der Benutzer eine oder mehrere Dateien zum Öffnen auswählen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der String, der in der Titelleiste des Dialogfelds angezeigt wird.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>typeFilter</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>Ein Array mit FileFilter-Instanzen zur Filterung der im Dialogfeld angezeigten Dateien. Wenn Sie diesen Parameter weglassen, werden alle Dateien angezeigt. Weitere Informationen finden Sie im Abschnitt zur FileFilter-Klasse.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Zeigt ein Dialogfeld „Datei öffnen“ an, in dem der Benutzer eine oder mehrere Dateien zum Öffnen auswählen kann.
	 
	 <p>Wenn der Benutzer die Dateien auswählt, wird das <codeph>selectMultiple</codeph>-Ereignis ausgelöst. Die <codeph>target</codeph>-Eigenschaft des <codeph>select</codeph>-Ereignisses ist dieses File-Objekt. Anders als bei <codeph>browseForOpen()</codeph> wird mit der <codeph>browseForOpenMultiple()</codeph>-Methode dieses File-Objekt nicht aktualisiert, um auf eine der ausgewählten Dateien zu verweisen. Stattdessen enthält das daraus resultierende <codeph>selectMultiple</codeph>-Ereignis ein Array mit den ausgewählten Dateien.</p>
	 
	 </apiDesc><example conref="examples\File.browseForOpenMultiple.1.as"> Im folgenden Beispiel wird die <codeph>File.browseForOpenMultiple()</codeph>-Methode verwendet, damit der Benutzer mehrere Dateien auswählen kann. Wenn die Dateien ausgewählt sind, gibt der Code deren Pfade aus.
<codeblock>
import flash.filesystem.*;
import flash.events.FileListEvent;

var docsDir:File = File.documentsDirectory;
try
{
    docsDir.browseForOpenMultiple("Select Files");
    docsDir.addEventListener(FileListEvent.SELECT_MULTIPLE, filesSelected);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function filesSelected(event:FileListEvent):void 
{
    for (var i:uint = 0; i &lt; event.files.length; i++) 
    {
        trace(event.files[i].nativePath);
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/browseForSave()"><linktext>browseForSave()</linktext></link><link href="flash.filesystem.xml#File/browseForOpen()"><linktext>browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/browseDirectory()"><linktext>browseDirectory()</linktext></link><link href="flash.filesystem.xml#File/event:selectMultiple"><linktext>selectMultiple</linktext></link><link href="flash.net.xml#FileFilter"><linktext>flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn der Benutzer im Dialogfeld „Datei öffnen“ auf die Schaltfläche „Abbrechen“ klickt. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn der Benutzer im Dialogfeld „Datei öffnen“ auf die Schaltfläche „Abbrechen“ klickt.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForOpenMultiple_selectMultiple"><apiName>selectMultiple</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn der Benutzer Dateien auswählt und das Dialogfeld „Datei öffnen“ schließt. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn der Benutzer Dateien auswählt und das Dialogfeld „Datei öffnen“ schließt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:browseForSave"><apiName>browseForSave</apiName><shortdesc>
	 Zeigt ein Dialogfeld zum Speichern der Datei an, in dem der Benutzer einen Speicherort auswählen kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der String, der in der Titelleiste des Dialogfelds angezeigt wird.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Zeigt ein Dialogfeld zum Speichern der Datei an, in dem der Benutzer einen Speicherort auswählen kann. 
	 
	 <p>Wenn der Benutzer die Datei auswählt, wird das <codeph>select</codeph>-Ereignis ausgelöst. Die <codeph>target</codeph>-Eigenschaft des <codeph>select</codeph>-Ereignisses ist das File-Objekt, das auf das ausgewählte Save-Ziel weist.</p>
	 
	 </apiDesc><example conref="examples\File.browseForSave.1.as"> Im folgenden Beispiel wird die <codeph>File.browseForSave()</codeph>-Methode verwendet, damit der Benutzer einen Pfad zum Speichern der Datei auswählen kann. Wenn die Dateien ausgewählt sind, speichert der Code Daten in den ausgewählten Dateipfad.
<codeblock>
import flash.filesystem.*;
import flash.events.Event;

var docsDir:File = File.documentsDirectory;
try
{
    docsDir.browseForSave("Save As");
    docsDir.addEventListener(Event.SELECT, saveData);
}
catch (error:Error)
{
    trace("Failed:", error.message);
}

function saveData(event:Event):void 
{
    var newFile:File = event.target as File;
    var str:String = "Hello.";
    if (!newFile.exists)
    {
        var stream:FileStream = new FileStream();
        stream.open(newFile, FileMode.WRITE);
        stream.writeUTFBytes(str);
        stream.close();
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/browseDirectory()"><linktext>browseDirectory()</linktext></link><link href="flash.filesystem.xml#File/browseForOpen()"><linktext>browseForOpen()</linktext></link><link href="flash.filesystem.xml#File/event:select"><linktext>select</linktext></link><link href="flash.net.xml#FileFilter"><linktext>flash.net.FileFilter</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:browseForSave_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn der Benutzer im Dialogfeld „Save File“ (Datei speichern) auf die Schaltfläche „Cancel“ (Abbrechen) klickt. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn der Benutzer im Dialogfeld „Save File“ (Datei speichern) auf die Schaltfläche „Cancel“ (Abbrechen) klickt.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:browseForSave_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn der Benutzer eine Datei auswählt und das Dialogfeld „Save File“ (Datei speichern) schließt. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn der Benutzer eine Datei auswählt und das Dialogfeld „Save File“ (Datei speichern) schließt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:cancel"><apiName>cancel</apiName><shortdesc>
	 Bricht alle ausstehenden asynchronen Vorgänge ab.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Bricht alle ausstehenden asynchronen Vorgänge ab.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:canonicalize"><apiName>canonicalize</apiName><shortdesc>
	 Kanonisiert den File-Pfad (macht ihn vorschriftsmäßig).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Kanonisiert den File-Pfad (macht ihn vorschriftsmäßig).
	 
	 <p>Wenn das File-Objekt eine vorhandene Datei oder einen vorhandenen Ordner repräsentiert, wird der Pfad bei der Kanonisierung korrigiert, sodass die Groß- und Kleinschreibung dem tatsächlichen Datei- oder Ordnernamen entspricht. Wenn es sich bei dem File-Objekt um einen symbolischen Link handelt, wird er Pfad bei der Kanonisierung so korrigiert, dass er der Datei oder dem Ordner entspricht, auf den der Link zeigt, unabhängig davon, ob die Datei oder der Ordner tatsächlich vorhanden ist. Bei Dateisystemen, die die Groß-/Kleinschreibung berücksichtigen (z. B. unter Linux), passt die <codeph>canonicalize()</codeph>-Methode im Fall von mehreren Dateien mit den gleichen Dateinamen, die sich nur in der Groß-/Kleinschreibung unterscheiden, den Pfad auf die erste gefundene Datei an (die Reihenfolge wird durch das Dateisystem bestimmt).</p>
	 
	 <p>Zusätzlich werden bei der Kanonisierung unter Windows kurze Dateinamen in lange umgewandelt.</p>
	 
	 </apiDesc><example conref="examples\File.canonicalize.2.as">     Im folgenden Beispiel wird die <codeph>canonicalize()</codeph>-Methode verwendet, um die richtige Groß- und Kleinschreibung eines Verzeichnisnamens zu finden. Erstellen Sie einen Ordner mit dem Namen „AIR Test“ auf dem Desktop Ihres Computers, bevor Sie dieses Beispiel ausführen.
<codeblock>
import flash.filesystem.*;

var path:File = File.desktopDirectory.resolvePath("air test");
trace(path.nativePath); 
path.canonicalize();
trace(path.nativePath); // ...\AIR Test

</codeblock></example><example conref="examples\File.canonicalize.1.as">     Im folgenden Beispiel wird die <codeph>canonicalize()</codeph>-Methode verwendet, um anhand des kurzen Namens den langen Namen eins Windows-Verzeichnisses zu finden. Im Beispiel wird davon ausgegangen, dass es im Stamm des C:-Laufwerks ein Verzeichnis „AIR Test“ gibt und dass das System dem Verzeichnis den Kurznamen „AIR~1“ zugewiesen hat.
<codeblock>
import flash.filesystem.*;

var path:File = new File();
path.nativePath = "C:\\AIR~1";
path.canonicalize();
trace(path.nativePath); // C:\AIR Test
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:clone"><apiName>clone</apiName><shortdesc>
	 Gibt eine Kopie dieses File-Objekts zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt eine Kopie dieses File-Objekts zurück. Ereignisregistrierungen werden nicht kopiert.
	 
	 <p><i>Hinweis:</i> Diese Methode kopiert <i>nicht</i> die Datei selbst. Sie erstellt lediglich eine Kopie der Instanz des <ph platform="actionscript">ActionScript</ph> <ph platform="javascript">JavaScript</ph>-File-Objekts. Verwenden Sie die <codeph>copyTo()</codeph>-Methode, um eine Datei zu kopieren.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:copyTo"><apiName>copyTo</apiName><shortdesc>
	 Kopiert die Datei oder den Ordner vom Speicherort, der durch dieses File-Objekt festgelegt ist, an den Speicherort, der im newLocation-Parameter festgelegt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Quelle existiert nicht; oder das Ziel existiert und <codeph>overwrite</codeph> ist <codeph>false</codeph>; oder die Quelle konnte nicht ins Ziel kopiert werden; oder die Quelle und das Ziel verweisen auf dieselbe Datei oder denselben Ordner und <codeph>overwrite</codeph> ist auf <codeph>true</codeph> gesetzt. Unter Windows können Sie eine Datei, die zurzeit geöffnet ist, oder ein Verzeichnis, das eine zurzeit geöffnete Datei enthält, nicht kopieren.
	 
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newLocation</apiItemName><apiOperationClassifier>flash.net:FileReference</apiOperationClassifier><apiDesc>Das Ziel der neuen Datei. Beachten Sie, dass dieses File-Objekt die resultierende (kopierte) Datei bzw. das Verzeichnis angibt, <i>nicht</i> den Pfad zum Verzeichnis, das die Datei oder das Verzeichnis enthält.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>overwrite</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Bei der Einstellung <codeph>false</codeph> schlägt der Kopiervorgang fehl, wenn die vom <codeph>target</codeph>-Parameter angegebene Datei bereits vorhanden ist. Bei der Einstellung <codeph>true</codeph> werden bei dem Vorgang Dateien oder Ordner mit demselben Namen überschrieben.  
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Kopiert die Datei oder den Ordner vom Speicherort, der durch dieses File-Objekt festgelegt ist, an den Speicherort, der im <codeph>newLocation</codeph>-Parameter festgelegt ist. Beim Kopieren werden die erforderlichen übergeordneten Verzeichnisse erstellt (falls möglich).
	 
	 </apiDesc><example conref="examples\File.copyTo.1.as"> Im folgenden Beispiel wird eine Datei mit der <codeph>copyTo()</codeph>-Methode kopiert. Erstellen Sie im Unterordner „AIR Test“ des Dokumentordners auf Ihrem Computer eine Datei mit dem Namen „test1.txt“, bevor Sie diesen Code ausführen. Die resultierende kopierte Datei wird test2.txt genannt und befindet sich ebenfalls im Unterverzeichnis „AIR Test“. Wenn der <codeph>clobber</codeph>-Parameter auf <codeph>true</codeph> gesetzt wird, wird eine ggf. vorhandene Datei namens „test2.txt“ überschrieben.
<codeblock>
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:FileReference = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:FileReference = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

if (sourceFile.copyTo(destination, true)) {
    trace("Done.");
}
</codeblock></example><example conref="examples\File.copyTo.2.as"> Im folgenden Beispiel wird eine Datei mit der <codeph>copyTo()</codeph>-Methode kopiert. Erstellen Sie im Unterordner „AIR Test“ des Stammordners auf Ihrem Computer eine Datei mit dem Namen „test1.txt“, bevor Sie diesen Code ausführen. Die resultierende kopierte Datei wird test2.txt benannt. Die <codeph>try</codeph>- und <codeph>catch</codeph>-Anweisungen zeigen, wie auf Fehler reagiert werden soll.
<codeblock>
import flash.filesystem.File;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

try 
{
    sourceFile.copyTo(destination, true);
}
catch (error:Error)
{
    trace("Error:", error.message);
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/copyToAsync()"><linktext>copyToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveTo()"><linktext>moveTo()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:copyToAsync"><apiName>copyToAsync</apiName><shortdesc>
	 Beginnt mit dem Kopieren der Datei oder des Verzeichnisses am Speicherort, der durch dieses File-Objekt angegeben wird, an den Speicherort, der durch den destination-Parameter angegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newLocation</apiItemName><apiOperationClassifier>flash.net:FileReference</apiOperationClassifier><apiDesc>Das Ziel der neuen Datei. Beachten Sie, dass dieses File-Objekt die resultierende (kopierte) Datei bzw. das Verzeichnis angibt, <i>nicht</i> den Pfad zum Verzeichnis, das die Datei oder das Verzeichnis enthält.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>overwrite</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Bei der Einstellung <codeph>false</codeph> schlägt der Kopiervorgang fehl, wenn die durch die <codeph>target</codeph>-Datei festgelegte Datei bereits vorhanden ist. Bei der Einstellung <codeph>true</codeph> werden alle Dateien oder Ordner mit demselben Namen überschrieben.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Beginnt mit dem Kopieren der Datei oder des Verzeichnisses am Speicherort, der durch dieses File-Objekt angegeben wird, an den Speicherort, der durch den <codeph>destination</codeph>-Parameter angegeben wird.  
	 
	 <p>Nach dem Abschluss wird entweder ein <codeph>complete</codeph>-Ereignis (erfolgreich) oder ein <codeph>ioError</codeph>-Ereignis (nicht erfolgreich) ausgelöst. Beim Kopieren werden die erforderlichen übergeordneten Verzeichnisse erstellt (falls möglich).</p>
	 
	 </apiDesc><example conref="examples\File.copyToAsync.1.as"> Im folgenden Beispiel wird eine Datei mit der <codeph>copyToAsync()</codeph>-Methode kopiert. Erstellen Sie eine Datei mit dem Namen test1.txt im Unterverzeichnis „AIR Test“ des Dokumenteverzeichnisses auf Ihrem Computer, bevor Sie diesen Code ausführen. Die resultierende kopierte Datei wird test2.txt genannt und befindet sich ebenfalls im Unterverzeichnis „AIR Test“. Wenn der <codeph>clobber</codeph>-Parameter auf <codeph>true</codeph> gesetzt wird, wird eine ggf. vorhandene Datei namens „test2.txt“ überschrieben.
<codeblock>
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/test2.txt");

sourceFile.copyToAsync(destination, true);
sourceFile.addEventListener(Event.COMPLETE, fileCopiedHandler);

function fileCopiedHandler(event:Event):void {
    trace("Done.");
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/copyTo()"><linktext>copyTo()</linktext></link><link href="flash.filesystem.xml#File/moveToAsync()"><linktext>moveToAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:copyToAsync_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn die Datei oder das Verzeichnis erfolgreich kopiert wurde. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn die Datei oder das Verzeichnis erfolgreich kopiert wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:copyToAsync_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Quelle existiert nicht; oder das Ziel existiert und <codeph>overwrite</codeph> ist <codeph>false</codeph>; oder die Quelle konnte nicht ins Ziel kopiert werden; oder die Quelle und das Ziel verweisen auf dieselbe Datei oder denselben Ordner und <codeph>overwrite</codeph> ist auf <codeph>true</codeph> gesetzt. Unter Windows können Sie eine Datei, die zurzeit geöffnet ist, oder ein Verzeichnis, das eine zurzeit geöffnete Datei enthält, nicht kopieren.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Die Quelle existiert nicht; oder das Ziel existiert und „overwrite“ ist „false“; oder die Quelle konnte nicht ins Ziel kopiert werden; oder die Quelle und das Ziel verweisen auf dieselbe Datei oder denselben Ordner und „overwrite“ ist auf „true“ gesetzt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:createDirectory"><apiName>createDirectory</apiName><shortdesc>
	 Erstellt den angegebenen Ordner und alle erforderlichen übergeordneten Ordner.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der Ordner war nicht vorhanden und konnte nicht erstellt werden. 
	 
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Erstellt den angegebenen Ordner und alle erforderlichen übergeordneten Ordner. Wenn der Ordner bereits vorhanden ist, wird keine Aktion ausgeführt.
	 
	 </apiDesc><example conref="examples\File.createDirectory.1.as">     Im folgenden Beispiel wird eine Datei mit dem Namen „test.txt“·vom Desktop in den Unterordner „AIR Test“ des Dokumentordners verschoben. Der Aufruf der <codeph>createDirectory()</codeph>-Methode stellt sicher, dass der Ordner „AIR Test“ vorhanden ist, bevor die Datei verschoben wird.
<codeblock>
import flash.filesystem.*;

var source:File = File.desktopDirectory.resolvePath("test.txt");
var target:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var targetParent:File = target.parent;
targetParent.createDirectory();
source.moveTo(target, true);
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:createTempDirectory"><apiName>createTempDirectory</apiName><shortdesc>
	 Gibt einen Verweis auf einen neuen temporären Ordner zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein File-Objekt, das auf den neuen temporären Ordner verweist.
	 
	 </apiDesc><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt einen Verweis auf einen neuen temporären Ordner zurück. Dies ist ein neuer Ordner im temporären Ordner des Systems.
	 
	 <p>Mit dieser Methode können Sie einen neuen, eindeutigen Ordner identifizieren, ohne dass Sie das System abfragen müssen, ob der Ordner neu und eindeutig ist.</p>
	 
	 <p>Da der Ordner nicht automatisch gelöscht wird, sollten Sie ihn evtl. löschen, bevor Sie die Anwendung schließen.</p>
	 
	 </apiDesc><example conref="examples\File.createTempDirectory.1.as"> Im folgenden Code wird die <codeph>createTempFile()</codeph>-Methode verwendet, um einen Verweis auf einen neuen temporären Ordner zu erhalten.
<codeblock>
import flash.File;

var temp:File = File.createTempDirectory();
trace(temp.nativePath);
</codeblock> Jedes Mal, wenn Sie diesen Code ausführen, wird eine neue (eindeutige) Datei erstellt. 
</example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/createTempFile()"><linktext>createTempFile()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:createTempFile"><apiName>createTempFile</apiName><shortdesc>
	 Gibt einen Verweis auf eine neue temporäre Datei zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein File-Objekt, das auf die neue temporäre Datei verweist.
	 
	 </apiDesc><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt einen Verweis auf eine neue temporäre Datei zurück. Dies ist eine neue Datei im temporären Ordner des Systems.
	 
	 <p>Mit dieser Methode können Sie eine neue, eindeutige Datei identifizieren, ohne dass Sie das System abfragen müssen, ob die Datei neu und eindeutig ist.</p>
	 
	 <p>Da die Datei nicht automatisch gelöscht wird, sollten Sie sie evtl. löschen, bevor Sie die Anwendung schließen.</p>
	 
	 </apiDesc><example conref="examples\File.createTempFile.1.as"> Im folgenden Code wird die <codeph>createTempFile()</codeph>-Methode verwendet, um einen Verweis auf eine neue temporäre Datei zu erhalten.
<codeblock>
import flash.File;

var temp:File = File.createTempFile();
trace(temp.nativePath);
</codeblock> Jedes Mal, wenn Sie diesen Code ausführen, wird eine neue (eindeutige) Datei erstellt. 
</example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/createTempDirectory()"><linktext>createTempDirectory()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:deleteDirectory"><apiName>deleteDirectory</apiName><shortdesc>
	 Löscht das Verzeichnis.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der Ordner ist nicht vorhanden oder konnte nicht gelöscht werden. Unter Windows können Sie ein Verzeichnis, das eine zurzeit geöffnete Datei enthält, nicht löschen.
	 
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deleteDirectoryContents</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob ein Ordner, der Dateien oder Unterordner enthält, gelöscht werden soll. Wenn <codeph>false</codeph>, wird beim Aufruf dieser Methode eine Ausnahme ausgegeben, wenn der Ordner Dateien oder Ordner enthält.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Löscht das Verzeichnis. Wenn diese Datei ein symbolischer Link auf einen Ordner ist, wird dieser Link entfernt, nicht der Ordner.
	 
	 </apiDesc><example conref="examples\File.deleteDirectory.1.as"> Im folgenden Beispiel wird ein leerer Ordner erstellt, der anschließend mit der <codeph>deleteDirectory()</codeph>-Methode gelöscht wird. 
<codeblock>
import flash.filesystem.File;

var directory:File = File.documentsDirectory.resolvePath("Empty Junk Directory/");
File.createDirectory(directory);
trace(directory.exists); // true
directory.deleteDirectory();
trace(directory.exists); // false
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/deleteDirectoryAsync()"><linktext>deleteDirectoryAsync()</linktext></link><link href="flash.filesystem.xml#File/deleteFile()"><linktext>deleteFile()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()"><linktext>moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:deleteDirectoryAsync"><apiName>deleteDirectoryAsync</apiName><shortdesc>
	 Löscht das Verzeichnis asynchron.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>deleteDirectoryContents</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Legt fest, ob ein Ordner, der Dateien oder Unterordner enthält, gelöscht werden soll. Bei der Einstellung <codeph>false</codeph> löst das File-Objekt ein <codeph>ioError</codeph>-Ereignis aus, wenn das Verzeichnis Dateien oder Verzeichnisse enthält.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Löscht das Verzeichnis asynchron. Wenn diese Datei ein symbolischer Link auf einen Ordner ist, wird dieser Link entfernt, nicht der Ordner.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/deleteDirectory()"><linktext>deleteDirectory()</linktext></link><link href="flash.filesystem.xml#File/deleteFileAsync()"><linktext>deleteFileAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()"><linktext>moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:deleteDirectoryAsync_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn das Verzeichnis erfolgreich gelöscht wurde. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn das Verzeichnis erfolgreich gelöscht wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:deleteDirectoryAsync_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Das Verzeichnis ist nicht vorhanden oder konnte nicht gelöscht werden. Unter Windows können Sie ein Verzeichnis, das eine zurzeit geöffnete Datei enthält, nicht löschen.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Das Verzeichnis ist nicht vorhanden oder konnte nicht gelöscht werden.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:deleteFile"><apiName>deleteFile</apiName><shortdesc>
	 Löscht die Datei.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Datei ist nicht vorhanden oder konnte nicht gelöscht werden. Unter Windows können Sie eine Datei nicht löschen, wenn sie zurzeit geöffnet ist.
	 
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Löscht die Datei. Wenn diese Datei ein symbolischer Link ist, wird dieser Link entfernt, nicht die Zieldatei.
	 
	 </apiDesc><example conref="examples\File.deleteFile.1.as"> Im folgenden Beispiel wird eine temporäre Datei erstellt. Dann wird die <codeph>deleteFile()</codeph>-Methode aufgerufen, um die Datei zu löschen.
<codeblock>
import flash.filesystem.*;

var file:File = File.createTempFile();
trace(file.exists); // true
file.deleteFile();
trace(file.exists); // false
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/deleteDirectory()"><linktext>deleteDirectory()</linktext></link><link href="flash.filesystem.xml#File/deleteFileAsync()"><linktext>deleteFileAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()"><linktext>moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:deleteFileAsync"><apiName>deleteFileAsync</apiName><shortdesc>
	 Löscht die Datei asynchron.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Löscht die Datei asynchron. Wenn diese Datei ein symbolischer Link ist, wird dieser Link entfernt, nicht die Zieldatei.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/deleteDirectoryAsync()"><linktext>deleteDirectoryAsync()</linktext></link><link href="flash.filesystem.xml#File/deleteFile()"><linktext>deleteFile()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()"><linktext>moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:deleteFileAsync_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn die Datei erfolgreich gelöscht wurde. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn die Datei erfolgreich gelöscht wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:deleteFileAsync_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Datei ist nicht vorhanden oder konnte nicht gelöscht werden. Unter Windows können Sie eine Datei nicht löschen, wenn sie zurzeit geöffnet ist.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Die Datei ist nicht vorhanden oder konnte nicht gelöscht werden.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:getDirectoryListing"><apiName>getDirectoryListing</apiName><shortdesc>
	 Gibt ein Array von File-Objekten zurück, die Dateien und Verzeichnissen im durch dieses File-Objekt repräsentierten Verzeichnis entsprechen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein Array von File-Objekten.
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt ein Array von File-Objekten zurück, die Dateien und Verzeichnissen im durch dieses File-Objekt repräsentierten Verzeichnis entsprechen. Diese Methode untersucht nicht den Inhalt der Unterverzeichnisse.
	 
	 </apiDesc><example conref="examples\File.getDirectoryListing.1.as"> Im folgenden Beispiel wird die <codeph>getDirectoryListing()</codeph>-Methode verwendet, um den Inhalt des Benutzerverzeichnisses aufzuführen.
<codeblock>
import flash.filesystem.File;

var directory:File = File.userDirectory;
var list:Array = directory.getDirectoryListing();
for (var i:uint = 0; i &lt; list.length; i++) {
    trace(list[i].nativePath);
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/getDirectoryListingAsync()"><linktext>getDirectoryListingAsync()</linktext></link><link href="flash.filesystem.xml#File/getRootDirectories()"><linktext>getRootDirectories()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:getDirectoryListingAsync"><apiName>getDirectoryListingAsync</apiName><shortdesc>
	 Ruft asynchron ein Array von File-Objekten ab, die dem Inhalt des durch dieses File-Objekt repräsentierten Verzeichnisses entsprechen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Ruft asynchron ein Array von File-Objekten ab, die dem Inhalt des durch dieses File-Objekt repräsentierten Verzeichnisses entsprechen. 
	 
	 </apiDesc><example conref="examples\File.getDirectoryListingAsync.1.as"> Im folgenden Beispiel wird die <codeph>getDirectoryListingAsync()</codeph>-Methode verwendet, um den Inhalt des Benutzerverzeichnisses aufzuführen.
<codeblock>
import flash.filesystem.File;
import flash.events.FileListEvent;

var directory:File = File.userDirectory;
directory.getDirectoryListingAsync();
directory.addEventListener(FileListEvent.DIRECTORY_LISTING, directoryListingHandler);

function directoryListingHandler(event:FileListEvent):void {
    var list:Array = event.files;
    for (var i:uint = 0; i &lt; list.length; i++) {
        trace(list[i].nativePath);
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/getDirectoryListing()"><linktext>getDirectoryListing()</linktext></link><link href="flash.filesystem.xml#File/getRootDirectories()"><linktext>getRootDirectories()</linktext></link><link href="flash.filesystem.xml#File/event:directoryListing"><linktext>directoryListing event</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:getDirectoryListingAsync_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:ErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Sie haben keine Berechtigung zum Lesen dieses Verzeichnisses. oder das Verzeichnis ist nicht vorhanden.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Sie haben keine Berechtigung zum Lesen dieses Verzeichnisses. oder das Verzeichnis ist nicht vorhanden.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:getDirectoryListingAsync_directoryListing"><apiName>directoryListing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Der Verzeichnisinhalt wurde erfolgreich aufgeführt. Das <codeph>contents</codeph>-Ereignis enthält eine <codeph>files</codeph>-Eigenschaft. Dabei handelt es sich um das daraus resultierende Array von File-Objekten.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Der Verzeichnisinhalt wurde erfolgreich aufgeführt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:getRelativePath"><apiName>getRelativePath</apiName><shortdesc>
	 Sucht den relativen Pfad zwischen zwei Dateipfaden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der Verweis hat den Wert <codeph>null</codeph>.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der Aufrufer befindet sich nicht in der Sicherheitssandbox der Anwendung.
	 
	 </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der relative Pfad zwischen dieser Datei (diesem Ordner) und der <codeph>ref</codeph>-Datei (-Ordner), falls möglich; andernfalls <codeph>null</codeph>.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>ref</apiItemName><apiOperationClassifier>flash.net:FileReference</apiOperationClassifier><apiDesc> Ein File-Objekt, für das der Pfad angegeben wird.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>useDotDot</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Gibt an, ob der resultierende relative Pfad „..“-Komponenten verwenden kann.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sucht den relativen Pfad zwischen zwei Dateipfaden.
	 
	 <p>Der relative Pfad ist die Liste der Komponenten, die an diesen Verweis angehängt werden können, um den zweiten (Parameter-)Verweis zu suchen. Der relative Pfad wird mit dem Trennzeichen „/“ zurückgegeben.</p>
	 
	 <p>Relative Pfade können optional „..“-Verweise enthalten, sie überschreiten jedoch keine offensichtlichen Datenträgergrenzen.</p>
	 
	 </apiDesc><example conref="examples\File.getRelativePath.1.as"/></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:getRootDirectories"><apiName>getRootDirectories</apiName><shortdesc>
	 Gibt ein Array von File-Objekten zurück, wobei die Stammverzeichnisse des Dateisystems aufgelistet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>Ein Array von File-Objekten, das die Stammverzeichnisse auflistet. 
	 
	 </apiDesc><apiOperationClassifier>Array</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt ein Array von File-Objekten zurück, wobei die Stammverzeichnisse des Dateisystems aufgelistet werden. 
	 
	 <p>Unter Windows ist dies zum Beispiel eine Liste der Datenträger wie Laufwerk C: und Laufwerk D:. Ein leeres Laufwerk, z. B. ein CD- oder DVD-Laufwerk, das keinen Datenträger enthält, ist nicht im Array enthalten. Unter Mac OS und Linux gibt diese Methode immer den eindeutige Stammordner des Geräts zurück (den „/“-Ordner).</p>
	 
	 </apiDesc><example conref="examples\File.getRootDirectories.1.as"> Mit dem folgenden Code wird eine Liste der Stammverzeichnisse ausgegeben:
<codeblock>
import flash.filesystem.File;
var rootDirs:Array = File.getRootDirectories();

for (var i:uint = 0; i &lt; rootDirs.length; i++) {
    trace(rootDirs[i].nativePath);
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.filesystem:File:moveTo"><apiName>moveTo</apiName><shortdesc>
	 Verschiebt die Datei oder das Verzeichnis am Speicherort, der durch dieses File-Objekt angegeben wird, an den Speicherort, der durch den destination-Parameter angegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die Quelle existiert nicht; oder das Ziel existiert und <codeph>overwrite</codeph> ist auf <codeph>false</codeph> gesetzt; oder die Quelldatei bzw. der Quellordner konnte nicht an den Zielort kopiert werden; oder die Quelle und das Ziel verweisen auf dieselbe Datei oder denselben Ordner und <codeph>overwrite</codeph> ist auf <codeph>true</codeph> gesetzt. Unter Windows können Sie eine Datei, die zurzeit geöffnet ist, oder ein Verzeichnis, das eine zurzeit geöffnete Datei enthält, nicht verschieben.
	 
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newLocation</apiItemName><apiOperationClassifier>flash.net:FileReference</apiOperationClassifier><apiDesc>Der Zielspeicherort für den Verschiebevorgang. Dieses Objekt gibt den Pfad zur resultierenden (verschobenen) Datei bzw. zum Verzeichnis an, <i>nicht</i> den Pfad zum Verzeichnis, das die Datei oder das Verzeichnis enthält.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>overwrite</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Bei der Einstellung <codeph>false</codeph> schlägt das Verschieben fehl, wenn die <codeph>target</codeph>-Datei bereits vorhanden ist. Bei der Einstellung <codeph>true</codeph> werden alle Dateien oder Ordner mit demselben Namen überschrieben. 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Verschiebt die Datei oder das Verzeichnis am Speicherort, der durch dieses File-Objekt angegeben wird, an den Speicherort, der durch den <codeph>destination</codeph>-Parameter angegeben wird. 
	 
	 <p>Um eine Datei umzubenennen, stellen Sie den <codeph>destination</codeph>-Parameter so ein, dass er auf einen Pfad zeigt, der sich im Verzeichnis der Datei befindet, jedoch einen anderen Dateinamen verwendet.</p>
	 
	 <p>Beim Verschieben werden die erforderlichen übergeordneten Verzeichnisse erstellt (falls möglich).</p>
	 
	 </apiDesc><example conref="examples\File.moveTo.1.as"> Im folgenden Beispiel wird eine Datei mit der <codeph>moveTo()</codeph>-Methode umbenannt. Der ursprüngliche Dateiname ist „test1.txt“, der neue Name ist „test2.txt“. Da sowohl das File-Quell- als auch das -Zielobjekt auf denselben Ordner verweisen (der Unterordner „Apollo Test“ im Dokumentordner des Benutzers), wird die Datei mit der <codeph>moveTo()</codeph>-Methode umbenannt (und nicht in einen neuen Ordner verschoben). Erstellen Sie im Unterordner „AIR Test“ des Dokumentordners auf Ihrem Computer eine Datei mit dem Namen „test1.txt“, bevor Sie diesen Code ausführen. Wenn der <codeph>clobber</codeph>-Parameter auf <codeph>true</codeph> gesetzt wird, wird eine ggf. vorhandene Datei namens „test2.txt“ überschrieben.
<codeblock>

import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("Apollo Test/test2.txt");

try  
{
    sourceFile.moveTo(destination, true);
}
catch (error:Error)
{
    trace("Error:" error.message);
}
</codeblock></example><example conref="examples\File.moveTo.2.as"> Im folgenden Beispiel wird eine Datei mit der <codeph>moveTo()</codeph>-Methode verschoben. Die ursprüngliche Datei ist die Datei „test1.txt“ im Unterordner „Apollo Test“ des Dokumentordners des Benutzers und die Methode verschiebt die Datei in den Unterordner „Results“. Erstellen Sie im Unterordner „AIR Test“ des Stammordners auf Ihrem Computer eine Datei mit dem Namen „test1.txt“, bevor Sie diesen Code ausführen. Die <codeph>try</codeph>- und <codeph>catch</codeph>-Anweisungen zeigen, wie auf Fehler reagiert werden soll.
<codeblock>
import flash.filesystem.File;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("AIR Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("AIR Test/Results/test1.txt");

try 
{
    sourceFile.moveTo(destination, true);
}
catch (error:Error)
{
    trace("Error:" error.message);
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/copyTo()"><linktext>copyTo()</linktext></link><link href="flash.filesystem.xml#File/moveToAsync()"><linktext>moveToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveToTrash()"><linktext>moveToTrash()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:moveToAsync"><apiName>moveToAsync</apiName><shortdesc>
	 Beginnt mit dem Verschieben der Datei oder des Verzeichnisses am Speicherort, der durch dieses File-Objekt angegeben wird, an den Speicherort, der durch den newLocation-Parameter angegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>newLocation</apiItemName><apiOperationClassifier>flash.net:FileReference</apiOperationClassifier><apiDesc>Der Zielspeicherort für den Verschiebevorgang. Dieses Objekt gibt den Pfad zur resultierenden (verschobenen) Datei bzw. zum Verzeichnis an, <i>nicht</i> den Pfad zum Verzeichnis, das die Datei oder das Verzeichnis enthält.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>overwrite</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Bei der Einstellung <codeph>false</codeph> schlägt das Verschieben fehl, wenn die <codeph>target</codeph>-Datei bereits vorhanden ist. Bei der Einstellung <codeph>true</codeph> werden alle Dateien oder Ordner mit demselben Namen überschrieben.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Beginnt mit dem Verschieben der Datei oder des Verzeichnisses am Speicherort, der durch dieses File-Objekt angegeben wird, an den Speicherort, der durch den <codeph>newLocation</codeph>-Parameter angegeben wird. 
	 
	 <p>Um eine Datei umzubenennen, stellen Sie den <codeph>destination</codeph>-Parameter so ein, dass er auf einen Pfad zeigt, der sich im Verzeichnis der Datei befindet, jedoch einen anderen Dateinamen verwendet.</p>
	 
	 <p>Beim Verschieben werden die erforderlichen übergeordneten Verzeichnisse erstellt (falls möglich).</p>
	 
	 </apiDesc><example conref="examples\File.moveToAsync.1.as"> Im folgenden Beispiel wird eine Datei mit der <codeph>moveToAsync()</codeph>-Methode eine Datei umbenannt. Der ursprüngliche Dateiname ist „test1.txt“ und der neue Name ist „test2.txt“. Da sowohl das File-Quell- als auch das -Zielobjekt auf denselben Ordner verweisen (der Unterordner „Apollo Test“ im Dokumentordner des Benutzers), wird die Datei mit der <codeph>moveToAsync()</codeph>-Methode umbenannt (und nicht in einen neuen Ordner verschoben). Erstellen Sie im Unterordner „Apollo Test“ des Dokumentordners auf Ihrem Computer eine Datei mit dem Namen „test1.txt“, bevor Sie diesen Code ausführen. Wenn der <codeph>clobber</codeph>-Parameter auf <codeph>true</codeph> gesetzt wird, wird eine ggf. vorhandene Datei namens „test2.txt“ überschrieben.
<codeblock>
import flash.filesystem.File;
import flash.events.Event;

var sourceFile:File = File.documentsDirectory;
sourceFile = sourceFile.resolvePath("Apollo Test/test1.txt");
var destination:File = File.documentsDirectory;
destination = destination.resolvePath("Apollo Test/test2.txt");

var sourceFile.moveToAsync(destination, true);
sourceFile.addEventListener(Event.COMPLETE, fileMoveCompleteHandler);

function fileMoveCompleteHandler(event:Event):void 
{
    trace("Done.")
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/copyToAsync()"><linktext>copyToAsync()</linktext></link><link href="flash.filesystem.xml#File/moveTo()"><linktext>moveTo()</linktext></link><link href="flash.filesystem.xml#File/moveToTrashAsync()"><linktext>moveToTrashAsync()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:moveToAsync_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn die Datei oder das Verzeichnis erfolgreich verschoben wurde. 
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn die Datei oder das Verzeichnis erfolgreich verschoben wurde.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:moveToAsync_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Die Quelle existiert nicht; oder das Ziel existiert und <codeph>overwrite</codeph> ist <codeph>false</codeph>; oder die Quelle konnte nicht ins Ziel verschoben werden; oder die Quelle und das Ziel verweisen auf dieselbe Datei oder denselben Ordner und <codeph>overwrite</codeph> ist auf <codeph>true</codeph> gesetzt. Unter Windows können Sie eine Datei, die zurzeit geöffnet ist, oder ein Verzeichnis, das eine zurzeit geöffnete Datei enthält, nicht verschieben.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Die Quelle existiert nicht; oder das Ziel existiert und „overwrite“ ist „false“; oder die Quelle konnte nicht ins Ziel verschoben werden; oder die Quelle und das Ziel verweisen auf dieselbe Datei oder denselben Ordner und „overwrite“ ist auf „true“ gesetzt.</shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:moveToTrash"><apiName>moveToTrash</apiName><shortdesc>
	 Verschiebt eine Datei oder ein Verzeichnis in den Papierkorb.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>TBC: what to do when Trash is not supported?  SB part of general policy about optional system facilities.
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Das Betriebssystem hat den Vorgang nicht zugelassen oder die Datei bzw. der Ordner ist nicht vorhanden. Unter Windows können Sie eine Datei, die zurzeit geöffnet ist, oder ein Verzeichnis, das eine zurzeit geöffnete Datei enthält, nicht verschieben.
	 
	 </apiDesc><apiItemName>IOError</apiItemName><apiOperationClassifier>flash.errors:IOError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Verschiebt eine Datei oder ein Verzeichnis in den Papierkorb.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/moveToTrashAsync()"><linktext>moveToTrashAsync()</linktext></link></related-links></apiOperation><apiOperation id="flash.filesystem:File:moveToTrashAsync"><apiName>moveToTrashAsync</apiName><shortdesc>
	 Verschiebt eine Datei oder einen Ordner asynchron in den Papierkorb.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>TBC: what to do when Trash is not supported?  SB part of general policy about optional system facilities.
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Verschiebt eine Datei oder einen Ordner asynchron in den Papierkorb. 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.filesystem.xml#File/moveToTrash()"><linktext>moveToTrash()</linktext></link></related-links><adobeApiEvent id="flash.filesystem:File:moveToTrashAsync_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Das Betriebssystem hat den Vorgang nicht zugelassen oder die Datei bzw. der Ordner ist nicht vorhanden. Unter Windows können Sie eine Datei, die zurzeit geöffnet ist, oder ein Verzeichnis, das eine zurzeit geöffnete Datei enthält, nicht verschieben.
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Das Betriebssystem hat den Vorgang nicht zugelassen oder die Datei bzw. der Ordner ist nicht vorhanden.</shortdesc></adobeApiEvent><adobeApiEvent id="flash.filesystem:File:moveToTrashAsync_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>Wird ausgelöst, wenn die Datei oder das Verzeichnis erfolgreich in den Papierkorb verschoben wurde.  
	 
	 </apiDesc></adobeApiEventDetail><shortdesc>Wird ausgelöst, wenn die Datei oder das Verzeichnis erfolgreich in den Papierkorb verschoben wurde. </shortdesc></adobeApiEvent></apiOperation><apiOperation id="flash.filesystem:File:resolvePath"><apiName>resolvePath</apiName><shortdesc>
	 Erstellt ein neues File-Objekt mit einem Pfad relativ zum Pfad dieses File-Objekts, basierend auf dem path-Parameter (ein String).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein neues File-Objekt, das auf den resultierenden Pfad verweist.
	 
	 </apiDesc><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier></apiReturn><apiParam><apiItemName>path</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Pfad, der an den Pfad dieses File-Objekts angehängt wird (wenn der <codeph>path</codeph>-Parameter ein relativer Pfad ist), oder der zurückzugebende Pfad (wenn der <codeph>path</codeph>-Parameter ein absoluter Pfad ist).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Erstellt ein neues File-Objekt mit einem Pfad relativ zum Pfad dieses File-Objekts, basierend auf dem <codeph>path</codeph>-Parameter (ein String).
	 
	 <p>Sie können wie beim <codeph>path</codeph>-Parameter einen relativen oder absoluten Pfad verwenden.</p>
	 
	 <p>Wenn Sie einen relativen Pfad festlegen, wird der festgelegte <codeph>path</codeph> an den Pfad des File-Objekts angehängt. Die Verwendung von „..“ im <codeph>path</codeph> kann jedoch einen Ergebnispfad zurückgeben, der kein untergeordnetes Element des File-Objekts ist. Der resultierende Verweis muss nicht auf einen tatsächlichen Speicherort in einem Dateisystem verweisen. </p>
	 
	 <p>Wenn Sie einen absoluten Dateiverweis festlegen, gibt die Methode das File-Objekt, das auf diesen Pfad verweist, zurück. Der absolute Dateiverweis sollte eine gültige Syntax für native Pfade des Betriebssystems des Benutzers verwenden (z. B. <codeph>"C:\\test"</codeph> unter Windows). Verwenden Sie <i>keine</i> URLs (z. B. <codeph>"file:///c:/test"</codeph>) als <codeph>path</codeph>-Parameter.</p>
	 
	 <p>Alle resultierenden Pfade werden wie folgt normalisiert: </p>
	 
	 <ul>
	 
	 	<li>Jedes „.“-Element wird ignoriert.</li>
	 
	 	<li>Alle „..“-Elemente konsumieren den übergeordneten Eintrag.  </li>
	 
	 	<li>Kein „..“-Verweis, der den Stammordner des Dateisystems oder den anwendungspersistenten Speicherstamm erreicht, passiert diesen Knoten; solche Verweise werden ignoriert.</li>
	 
	 </ul>
	 
	 <p>Als Pfadtrennzeichen sollten Sie immer den Schrägstrich (<codeph>/</codeph>) verwenden. Unter Windows können Sie auch den umgekehrten Schrägstrich (<codeph>\</codeph>) verwenden, was auf anderen Plattformen jedoch dazu führen kann, dass Anwendungen nicht funktionieren.</p>
	 
	 <p>Unter Linux muss bei Datei- und Ordnernamen die Groß-/Kleinschreibung berücksichtigt werden.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.filesystem:File:applicationDirectory:get"><apiName>applicationDirectory</apiName><shortdesc>
	 Der Ordner mit den installierten Dateien der Anwendung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
	 Der Ordner mit den installierten Dateien der Anwendung.
	 
	 <p>Die <codeph>url</codeph>-Eigenschaft für dieses Objekt verwendet das URL-Schema <codeph>app</codeph> (nicht das URL-Schema <codeph>file</codeph>). Dies bedeutet, dass der <codeph>url</codeph>-String mit <codeph>"app:"</codeph> beginnt (nicht mit <codeph>"file:"</codeph>). Wenn Sie ein File-Objekt relativ zum <codeph>File.applicationDirectory</codeph>-Ordner erstellen (mit der <codeph>resolvePath()</codeph>-Methode), verwendet die <codeph>url</codeph>-Eigenschaft des File-Objekts ebenfalls das <codeph>app</codeph>-URL-Schema. 
	 </p>
	 
	 <p><i>Hinweis:</i> Sie können nicht in Dateien oder Ordner schreiben, die Pfade mit dem <codeph>app</codeph>-URL-Schema aufweisen. Es ist auch nicht möglich, Dateien oder Ordner zu löschen oder zu erstellen, für deren Pfad das <codeph>app</codeph>-URL-Schema verwendet wird. Aus Sicherheitsgründen sollte der Inhalt im Anwendungsverzeichnis nicht geändert werden. Wenn Sie anwendungsspezifische Daten speichern möchten, sollten Sie das Anwendungsspeicherverzeichnis (<codeph>File.applicationStorageDirectory</codeph>) verwenden. Wenn Sie möchten, dass Inhalte im Anwendungsspeicherordner Zugriff auf anwendungsberechtigte Funktionen (AIR-APIs) haben, können Sie diese Funktionen mithilfe einer Sandbox-Brücke bereitstellen.</p>
	 
	 <p>Die <codeph>applicationDirectory</codeph>-Eigenschaft stellt eine Möglichkeit zum Verweisen auf den Anwendungsordner bereit, die auf allen Plattformen funktioniert. Wenn Sie ein File-Objekt mithilfe der <codeph>nativePath</codeph>- oder <codeph>url</codeph>-Eigenschaft so einrichten, dass es auf den Anwendungsordner verweist, funktioniert dies nur auf der Plattform, auf der der Pfad gültig ist.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.filesystem.xml#File/applicationStorageDirectory"><linktext>applicationStorageDirectory</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:applicationStorageDirectory:get"><apiName>applicationStorageDirectory</apiName><shortdesc>
     Das private Speicherverzeichnis der Anwendung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
     Das private Speicherverzeichnis der Anwendung. 
	 
	 <p>Jede AIR-Anwendung verfügt über einen eindeutigen, dauerhaften Anwendungsspeicherordner, der erstellt wird, wenn Sie zum ersten Mal auf <codeph>File.applicationStorageDirectory</codeph> zugreifen. Dieses Verzeichnis ist ein praktischer Speicherort für anwendungsspezifische Daten.</p>
	 
	 <p>Wenn Sie eine AIR-Anwendung deinstallieren, löscht das Deinstallationsprogramm die Dateien im Anwendungsspeicherordner nicht.</p>
	 
	 <p>Die <codeph>url</codeph>-Eigenschaft für dieses Objekt verwendet das URL-Schema <codeph>app-storage</codeph> (nicht das URL-Schema <codeph>file</codeph>). Dies bedeutet, dass der <codeph>url</codeph>-String mit <codeph>"app-storage:"</codeph> beginnt (nicht mit <codeph>"file:"</codeph>). Wenn Sie ein File-Objekt relativ zum <codeph>File.applicationStoreDirectory</codeph>-Ordner erstellen (mit der <codeph>resolvePath()</codeph>-Methode), verwendet die <codeph>url</codeph> des File-Objekts ebenfalls das <codeph>app-storage</codeph>-URL-Schema (wie im Beispiel).</p>
	 
	 <p>Die <codeph>applicationStorageDirectory</codeph>-Eigenschaft stellt eine Möglichkeit zum Verweisen auf den Anwendungsordner bereit, die auf allen Plattformen funktioniert. Wenn Sie ein File-Objekt mithilfe der <codeph>nativePath</codeph>- oder <codeph>url</codeph>-Eigenschaft so einrichten, dass es auf den Anwendungsspeicherordner verweist, funktioniert dies nur auf der Plattform, auf der der Pfad gültig ist.</p>
	 
	 </apiDesc><example conref="examples\File.applicationStorageDirectory.1.as"> Im folgenden Beispiel wird ein File-Objekt erstellt, das auf den Unterordner „images“ des Anwendungsspeicherordners verweist.
<codeblock>
import flash.filesystem.File;

var tempFiles:File = File.applicationStorageDirectory;
tempFiles = tempFiles.resolvePath("images/");
trace(tempFiles.url); // app-storage:/images
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:desktopDirectory:get"><apiName>desktopDirectory</apiName><shortdesc>
	 Das Desktopverzeichnis des Benutzers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
	 Das Desktopverzeichnis des Benutzers.
	 
	 <p>Die <codeph>desktopDirectory</codeph>-Eigenschaft stellt eine Möglichkeit zum Verweisen auf den Anwendungsordner bereit, die auf allen Plattformen funktioniert. Wenn Sie ein File-Objekt mithilfe der <codeph>nativePath</codeph>- oder <codeph>url</codeph>-Eigenschaft so einrichten, dass es auf den Desktopordner verweist, funktioniert dies nur auf der Plattform, auf der der Pfad gültig ist.</p>
	 
	 </apiDesc><example conref="examples\File.desktopDirectory.1.as"> Im folgenden Beispiel wird eine Liste mit Dateien und Verzeichnissen ausgegeben, die im Desktopverzeichnis des Benutzers enthalten sind.
<codeblock>
import flash.filesystem.File;
var desktop:File = File.desktopDirectory;

var files:Array = desktop.getDirectoryListing();

for (var i:uint = 0; i &lt; files.length; i++) {
    trace(files[i].nativePath);
}
</codeblock><swfblock conref="examples\File.desktopDirectory.1.swf"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:documentsDirectory:get"><apiName>documentsDirectory</apiName><shortdesc>
	 Das Dokumentverzeichnis des Benutzers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
	 Das Dokumentverzeichnis des Benutzers.
	 
	 <p>Unter Windows ist dies der Ordner „Eigene Dateien“ (zum Beispiel C:\Dokumente und Einstellungen\Benutzername\Eigene Dateien). Unter Mac OS ist dies standardmäßig /Benutzer/Benutzername/Dokumente. Unter Linux lautet der Standardspeicherort auf einem deutschen System „/home/Benutzername/Dokumentes“ und die Eigenschaft berücksichtigt die <codeph>xdg-user-dirs</codeph>-Einstellung.</p>
	 
	 <p>Die <codeph>documentsDirectory</codeph>-Eigenschaft stellt eine Möglichkeit zum Verweisen auf den Anwendungsordner bereit, die auf allen Plattformen funktioniert. Wenn Sie ein File-Objekt mithilfe der <codeph>nativePath</codeph>- oder <codeph>url</codeph>-Eigenschaft so einrichten, dass es auf den Dokumentordner verweist, funktioniert dies nur auf der Plattform, auf der der Pfad gültig ist.</p>
	 
	 </apiDesc><example conref="examples\File.documentsDirectory.1.as"> Im folgenden Beispiel werden die <codeph>File.documentsDirectory</codeph>-Eigenschaft und die <codeph>File.createDirectory()</codeph>-Methode verwendet, um sicherzustellen, dass ein Verzeichnis mit dem Namen „AIR Test“ im Dokumentverzeichnis des Benutzers vorhanden ist.
<codeblock>
import flash.filesystem.File;

var directory:File = File.documentsDirectory;
directory = directory.resolvePath("AIR Test");

File.createDirectory(directory);
trace(directory.exists); // true
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:exists:get"><apiName>exists</apiName><shortdesc>
     Gibt an, ob die Datei bzw. der Ordner, auf die/den verwiesen wird, vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob die Datei bzw. der Ordner, auf die/den verwiesen wird, vorhanden ist. Der Wert ist <codeph>true</codeph>, wenn das File-Objekt auf eine vorhandene Datei oder einen vorhandenen Ordner verweist; andernfalls ist er <codeph>false</codeph>.
	 
	 </apiDesc><example conref="examples\File.exists.1.as"> Im folgenden Beispiel wird eine temporäre Datei erstellt und dann gelöscht. Mit der <codeph>File.exists</codeph>-Eigenschaft wird das Vorhandensein der Datei überprüft.
<codeblock>
import flash.filesystem.*;

var temp:File = File.createTempFile();
trace(temp.exists); // true
temp.deleteFile();
trace(temp.exists); // false
</codeblock><swfblock conref="examples\File.exists.1.swf"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:icon:get"><apiName>icon</apiName><shortdesc>
	 Ein Icon-Objekt, das die für diese Datei definierten Symbole enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.desktop:Icon</apiValueClassifier></apiValueDef><apiDesc>
	 Ein Icon-Objekt, das die für diese Datei definierten Symbole enthält. Ein Icon-Objekt ist ein Array von BitmapData-Objekten, die den verschiedenen Zuständen des Symbols entsprechen. Unter Linux enthält das Icon-Objekt keine Symbole.
	 
	 </apiDesc><example conref="examples\File.icon.1.as"> Im folgenden Beispiel wird im <codeph>icon</codeph>-Array das Bild mit der größten Höhe gesucht und ein Bitmap-Objekt für dieses Bild eingerichtet.
<codeblock>
import flash.filesystem.File;
import flash.display.*;

var directory:File = File.documentsDirectory;
var bitmaps:Array = directory.icon.bitmaps;
var bmpData:BitmapData = new BitmapData(1, 1);
for (var i:uint = 0; i &lt; bitmaps.length; i++) {
    if (bitmaps[i].height > bmpData.height) {
        bmpData = directory.icon.bitmaps[i];
    }
}
var iconBmp:Bitmap = new Bitmap(bmpData);
</codeblock> Sie können dieses Bitmap-Objekt als untergeordnetes Element eines Anzeigeobjektcontainers (zum Beispiel ein Sprite-Objekt oder ein Flex UIComponent-Objekt).
</example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isDirectory:get"><apiName>isDirectory</apiName><shortdesc>
     Gibt an, ob auf einen Ordner verwiesen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob auf einen Ordner verwiesen wird. Der Wert ist <codeph>true</codeph>, wenn das File-Objekt auf ein Verzeichnis verweist; andernfalls <codeph>false</codeph>.
	 
	 </apiDesc><example conref="examples\File.isDirectory.1.as"> Im folgenden Beispiel wird ein Array mit File-Objekten erstellt, die auf Dateien und Ordner im Benutzerordner verweisen. Mit der <codeph>isDirectory</codeph>-Eigenschaft werden dann nur die File-Objekte angezeigt, die auf Ordner (nicht auf Dateien) verweisen.
<codeblock>
import flash.filesystem.*;

var userDirFiles:Array = File.userDirectory.getDirectoryListing();
for (var i:uint = 0; i &lt; userDirFiles.length; i++) {
    if (userDirFiles[i].isDirectory) {
        trace(userDirFiles[i].nativePath);
    }
}    
</codeblock><swfblock conref="examples\File.isDirectory.1.swf"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isHidden:get"><apiName>isHidden</apiName><shortdesc>
     Gibt an, ob die Datei bzw. der Ordner, auf die bzw. den verwiesen wird, versteckt ist. Der Wert ist „true“, wenn die Datei/der Ordner, auf die/den verwiesen wird, ausgeblendet ist, andernfalls ist er „false“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>(Waiting for Stan's OK:)
	 
	 <ul>
	 
	 	<li>On Windows, a file or directory is designated as hidden by specifying the 
	 Hidden attribute (for example, in the File Properties dialog box) for the file.</li>
	 
	 	<li>On Mac OS and Linux, files can be designated as hidden for a number of reasons. Files with 
	 names that begin with the dot (.) character are designated as hidden. A .hidden file 
	 in the root directory lists other hidden files. Also, there is a bit in the file that, 
	 when set, makes it hidden.</li>
	 
	 </ul>
	 
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob die Datei bzw. der Ordner, auf die bzw. den verwiesen wird, versteckt ist. Der Wert ist <codeph>true</codeph>, wenn die Datei/der Ordner, auf die/den verwiesen wird, ausgeblendet ist, andernfalls ist er <codeph>false</codeph>.
	 
	 </apiDesc><example conref="examples\File.isHidden.1.as"> Im folgenden Beispiel wird ein Array von File-Objekten erstellt, die auf Dateien und Ordner im Benutzerordner verweisen. Mit der <codeph>isHidden</codeph>-Eigenschaft werden versteckte Dateien und Ordner aufgelistet.
<codeblock>
import flash.filesystem.*;

var userDirFiles:Array = File.userDirectory.getDirectoryListing();
for (var i:uint = 0; i &lt; userDirFiles.length; i++) {
    if (userDirFiles[i].isHidden) {
        trace(userDirFiles[i].nativePath);
    }
}    
</codeblock><swfblock conref="examples\File.isHidden.1.swf"/></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isPackage:get"><apiName>isPackage</apiName><shortdesc>
     Gibt an, ob der Ordner, auf den verwiesen wird, ein Paket ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob der Ordner, auf den verwiesen wird, ein Paket ist.
     
	 <p>Der Wert ist <codeph>true</codeph>, wenn der Ordner ein Paket ist, andernfalls ist er <codeph>false</codeph>. Beachten Sie, dass die File-Klasse das direkte Erstellen von Paketen nicht zulässt.</p>
	 
	 <ul>
	 
	 	<li>Unter Mac OS können Verzeichnisse als Pakete gekennzeichnet werden und erscheinen dann im Finder als einzelne Dateien, nicht als Verzeichnisse. Diese Eigenschaft ist auf <codeph>true </codeph> gesetzt, wenn der Ordner, auf den verwiesen wird, ein Paket ist. Der Wert <codeph>false</codeph> wird zurückgegeben, wenn die Datei kein Ordner, nicht vorhanden oder kein Paket ist.</li>
	 
	 	<li>Unter anderen Betriebssystemen ist diese Eigenschaft immer auf <codeph>false</codeph> gesetzt.</li>
	 
	 </ul>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:isSymbolicLink:get"><apiName>isSymbolicLink</apiName><shortdesc>
     Gibt an, ob der Verweis ein symbolischer Link ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob der Verweis ein symbolischer Link ist.
     
	 <p>Der Wert ist <codeph>true</codeph>, wenn das File-Objekt ein symbolischer Link ist; andernfalls ist er <codeph>false</codeph>. Beachten Sie, dass die File-Klasse das direkte Erstellen von symbolischen Links nicht zulässt.</p>
	 
	 <p>Symbolische Links ermöglichen, dass eine Datei auf eine andere Datei oder ein Verzeichnis auf der Festplatte zeigt. Obwohl sie sich ähneln, sind symbolische Links nicht dasselbe wie Aliasnamen unter Mac OS oder Verknüpfungen unter Windows. Ein Alias oder eine Verknüpfung wird immer als Datei (nicht als Verzeichnis) betrachtet, und das Lesen und Schreiben von oder in einen Alias oder in eine Verknüpfung betrifft nie die ursprüngliche Datei oder das ursprüngliche Verzeichnis, auf die bzw. das verwiesen wird. Abgesehen davon verhält sich ein symbolischer Link genau wie die Datei bzw. der Ordner, auf die bzw. den verwiesen wird. Der symbolische Link kann als Datei oder als Verzeichnis betrachtet werden. Das Lesen von einem oder in einen symbolischen Link betrifft die Datei oder das Verzeichnis, auf die bzw. das verwiesen wird, nicht den symbolischen Link selbst. Beim Löschen eines symbolischen Links wird der Link gelöscht, nicht das Ziel des Links.</p>
	 
	 <p>Symbolische Links werden von Mac<sup>®</sup> OS<sup>®</sup>, Linux und Windows<sup>®</sup> Vista<sup>®</sup> unterstützt. Unter Windows wird zusätzlich die <codeph>isSymbolicLink</codeph>-Eigenschaft für ein File-Objekt, das auf einen Verknüpfungspunkt (im NTFS-Dateisystem verwendet) verweist, mit dem Wert <codeph>true</codeph> belegt.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:lineEnding:get"><apiName>lineEnding</apiName><shortdesc>
	 Die vom Host-Betriebssystem verwendete Zeilenende-Zeichenfolge.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Die vom Host-Betriebssystem verwendete Zeilenende-Zeichenfolge.
	 
	 <p>Unter Mac OS und Linux ist dies das Zeilenvorschubzeichen (hexadezimaler Zeichencode 0x0A). Unter Windows ist dies das Wagenrücklaufzeichen (hexadezimaler Zeichencode 0x0D) gefolgt vom Zeilenvorschubzeichen (hexadezimaler Zeichencode 0x0A).</p>
	 
	 </apiDesc><example conref="examples\File.lineEnding.1.as"> Im folgenden Beispiel wird ein String (<codeph>str</codeph>) in eine Textdatei geschrieben und mit der statischen Eigenschaft <codeph>File.lineEnding</codeph> werden alle Instanzen des Zeichens für eine neue Zeile (im Code durch den regulären Ausdruck <codeph>/\n/g</codeph> dargestellt) durch das vom Hostbetriebssystem verwendete Zeilenende-Zeichen ersetzt.
<codeblock>
import flash.filesystem.*;

var str:String = "Hello\n" + 
        "World\n";
str = str.replace(/\n/g, File.lineEnding);
var file:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.WRITE);
fileStream.writeUTF(str);
fileStream.close();
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:nativePath:get"><apiName>nativePath</apiName><shortdesc>
	 Der vollständige Pfad in der Schreibweise des Host-Betriebssystems.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Der Aufrufer befindet sich nicht in der Sicherheits-Sandbox der Anwendung.
	 
	 </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiException><apiDesc>Die Syntax des Pfads ist ungültig.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Der vollständige Pfad in der Schreibweise des Host-Betriebssystems. Unter Mac OS und Linux wird der Schrägstrich (/) als Pfadtrennzeichen verwendet. Unter Windows <i>setzen</i> Sie die <codeph>nativePath</codeph>-Eigenschaft jedoch entweder mit dem Schrägstrich (/) oder dem umgekehrten Schrägstrich (\) als Pfadtrennzeichen. AIR ersetzt Schrägstriche (/) automatisch durch umgekehrte Schrägstriche (\).
	 
	<p>Bevor Sie Code zum direkten <i>Setzen</i> der <codeph>nativePath</codeph>-Eigenschaft schreiben, sollten Sie überlegen, ob dies nicht plattformspezifischen Code ergibt. So ist beispielsweise der native Pfad <codeph>"C:\\Dokumente und Einstellungen\\klaus\\Desktop"</codeph> nur unter Windows gültig. Es ist besser, stattdessen die folgenden statischen Eigenschaften zu verwenden, die häufig verwendete Ordner repräsentieren und auf allen Plattformen gültig sind:</p>
	
	<ul>
	<li><codeph>File.applicationDirectory</codeph></li>
	<li><codeph>File.applicationStorageDirectory</codeph></li>
	<li><codeph>File.desktopDirectory</codeph></li>
	<li><codeph>File.documentsDirectory</codeph></li>
	<li><codeph>File.userDirectory</codeph></li>
	</ul>
	
	<p>Mit der <codeph>resolvePath()</codeph>-Methode erhalten Sie einen Pfad relativ zu diesen Ordnern.</p>
	
	<p product="flex">Manche Flex-APIs, wie z. B die <codeph>source</codeph>-Eigenschaft der SWFLoader-Klasse, verwenden eine URL (die <codeph>url</codeph>-Eigenschaft eines File-Objekts) anstatt eines nativen Pfads (die <codeph>nativePath</codeph>-Eigenschaft).</p>
	
	<p platform="javascript">Manche APIs, wie z. B die <codeph>src</codeph>-Eigenschaft eines IMG-Objekts, verwenden eine URL (die <codeph>url</codeph>-Eigenschaft eines File-Objekts) anstatt eines nativen Pfads (die <codeph>nativePath</codeph>-Eigenschaft).</p>
	
	 </apiDesc><example conref="examples\File.nativePath.1.as"> Im folgenden Beispiel wird der Unterschied zwischen der <codeph>nativePath</codeph>-Eigenschaft und der <codeph>url</codeph>-Eigenschaft eines File-Objekts deutlich. Die Kommentare zeigen Ergebnisse auf einem Beispiel-Windows-Computer.
<codeblock>
import flash.filesystem.File;

var docs:File = File.documentsDirectory;
trace(docs.nativePath); // C:\Documents and Settings\turing\My Documents
trace(docs.url); // file:///C:/Documents%20and%20Settings/turing/My%20Documents
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:parent:get"><apiName>parent</apiName><shortdesc>
     Das Verzeichnis, das die Datei oder das Verzeichnis, auf die bzw. das durch dieses File-Objekt verwiesen wird, enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
     Das Verzeichnis, das die Datei oder das Verzeichnis, auf die bzw. das durch dieses File-Objekt verwiesen wird, enthält. 
	 
	 <p>Auch wenn die Datei oder der Ordner nicht vorhanden ist, gibt die <codeph>parent</codeph>-Eigenschaft das File-Objekt zurück, das auf den Ordner mit der Datei verweist (selbst wenn dieser Ordner nicht vorhanden ist.</p>
	 
	 <p>Diese Eigenschaft ist identisch mit dem Rückgabewert für <codeph>resolvePath("..")</codeph>, außer dass der übergeordnete Ordner eines Stammordners <codeph>null</codeph> ist.</p>
	 
	 </apiDesc><example conref="examples\File.parent.1.as"> Im folgenden Beispiel wird die <codeph>parent</codeph>-Eigenschaft verwendet, um auf das Verzeichnis zu verweisen, das eine temporäre Datei enthält.
<codeblock>
import flash.filesystem.File;

var tempFile:File = File.createTempDirectory();
trace(tempFile.parent.nativePath);
tempFile.deleteFile();
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:separator:get"><apiName>separator</apiName><shortdesc>
	 Das vom Betriebssystem verwendete Trennzeichen für Pfadkomponenten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Das vom Betriebssystem verwendete Trennzeichen für Pfadkomponenten.
	 
	 <p>Unter Mac OS und Linux ist dies der Schrägstrich (/). Unter Windows ist dies der umgekehrte Schrägstrich (\).</p>
	 
	 <p><i>Hinweis:</i> Wenn Sie den umgekehrten Schrägstrich in einem Stringliteral verwenden, denken Sie daran, das Zeichen zweimal einzugeben (wie in <codeph>"ordner\\datei.ext"</codeph>). Jeder doppelte umgekehrte Schrägstrich in einem Stringliteral repräsentiert einen einzelnen umgekehrten Schrägstrich im String.</p>
	 
	 </apiDesc><example conref="examples\File.separator.1.as"> Im folgenden Beispiel wird mit der <codeph>getRelativePath()</codeph>-Methode der relative Pfad zwischen einem Verzeichnis und einer Datei abgerufen. Im Beispiel wird dann die statische Eigenschaft <codeph>File.separator</codeph> verwendet, um Schrägstriche (/) im Pfad durch das vom Betriebssystem verwendete Trennzeichen ersetzt. Dies ist unter Windows der umgekehrte Schrägstrich (\) und unter anderen Betriebssystemen der Schrägstrich.
<codeblock>
import flash.filesystem.File;

var directory:File = File.documentsDirectory.resolvePath("Apollo Test");
var file:File = File.documentsDirectory.resolvePath("Apollo Test/employees/bob/test.txt");

var relativePath:String = directory.getRelativePath(file); // employees/bob/test.txt
relativePath = relativePath.replace(/\//g, File.separator);
trace(relativePath); 
</codeblock> In diesem Beispiel verwendet die <codeph>replace()</codeph>-Methode einen regulären Ausdruck, <codeph>/\//g</codeph>, um <i>alle</i> Schrägstriche zu ändern.
</example></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:spaceAvailable:get"><apiName>spaceAvailable</apiName><shortdesc>
	 Der an diesem Dateispeicherort verfügbare Speicherplatz in Byte.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Der an diesem Dateispeicherort verfügbare Speicherplatz in Byte. 
	 
	 <p> Wenn das File-Objekt auf einen Ordner verweist, gibt <codeph>spaceAvailable</codeph> den Speicherplatz im Ordner, der für Dateien zur Verfügung steht, an. Wenn das File-Objekt auf eine Datei verweist, gibt <codeph>spaceAvailable</codeph> den Speicherplatz, den die Datei einnehmen könnte, an. Wenn der Dateispeicherort nicht vorhanden ist, ist <codeph>spaceAvailable</codeph> auf 0 gesetzt. Wenn das File-Objekt ein symbolischer Link ist, gibt <codeph>spaceAvailable</codeph> den Speicherplatz an, der am Speicherort, auf den der symbolische Link verweist, zur Verfügung steht.</p>
	 
	 <p>Normalerweise ist der verfügbare Speicherplatz für einen Ordner oder eine Datei derselbe wie der verfügbare Speicherplatz auf dem Laufwerk, auf dem sich der Ordner bzw. die Datei befindet. Der verfügbare Speicherplatz kann jedoch auch Kontenkontingente und ordnerspezifische Begrenzungen berücksichtigen.</p>
	 
	 <p>Wenn Sie einem Laufwerk eine Datei oder einen Ordner hinzufügen, wird dabei im Allgemeinen mehr Speicherplatz benötigt, als die Datei bzw. der Inhalt des Ordners tatsächlich belegen. Das Betriebssystem kann zum Beispiel zusätzlichen Speicherplatz zum Speichern von Indexinformationen benötigen. Auch Festplattensektoren benötigen unter Umständen zusätzlichen Speicher. Der verfügbare Speicherplatz ändert sich zudem dynamisch. Sie können also nicht davon ausgehen, dass Sie den <i>gesamten</i> gemeldeten Speicherplatz für das Speichern von Dateien verwenden können.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.filesystem:File:systemCharset:get"><apiName>systemCharset</apiName><shortdesc>
	 Die vom Host-Betriebssystem verwendete Standardkodierung.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Die vom Host-Betriebssystem verwendete Standardkodierung. 
	 
	 <p>Mögliche Werte sind unter anderem <codeph>"windows-1252"</codeph> <codeph>"shift-jis"</codeph>, <codeph>"cn-gb"</codeph>, <codeph>"iso-8859-1"</codeph>. Eine vollständige Liste finden Sie unter <xref href="../../charset-codes.html">Unterstützte Zeichensätze</xref>.</p>
	 
	 <p>Sie können diesen Wert verwenden, wenn Sie die <codeph>readMultiByte()</codeph>- und <codeph>writeMultiByte()</codeph>-Methode der FileStream-Klasse verwenden.</p>
	 
	 </apiDesc><example conref="examples\File.systemCharSet.1.as"> Im folgenden Beispiel wird eine Datei geöffnet („test.txt“ im Unterordner „AIR Test“ des Dokumentordners des Benutzers) und die statische Eigenschaft <codeph>File.systemCharset</codeph> als <codeph>charSet</codeph>-Parameter eines Aufrufs der <codeph>readMultiByte()</codeph>-Methode eines FileStream-Objekts verwendet.
<codeblock>
import flash.filesystem.File;

var file:File = File.documentsDirectory.resolvePath("AIR Test/test.txt");
var fileStream:FileStream = new FileStream();
fileStream.open(file, FileMode.READ);
var str:String = fileStream.readMultiByte(file.size, File.systemCharset);
trace(str);    
</codeblock></example></apiValueDetail><related-links><link href="flash.filesystem.xml#FileStream/readMultiByte()"><linktext>FileStream.readMultiByte()</linktext></link><link href="flash.filesystem.xml#FileStream/writeMultiByte()"><linktext>FileStream.writeMultiByte()</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:url:get"><apiName>url</apiName><shortdesc>
	 Die URL für diesen Dateipfad.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>The URL will have a null "host" specification. (As opposed to "localhost". This is more confusing than 
	 informative.
	 
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Die URL-Syntax ist ungültig. 
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der Aufrufer befindet sich nicht in der Sicherheits-Sandbox der Anwendung.
	 
	 </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die URL für diesen Dateipfad.
	 
	 <p>Wenn es sich dabei um einen Verweis auf einen Pfad im Anwendungsspeicherordner handelt, ist das URL-Schema <codeph>"app-storage"</codeph>; wenn es sich um einen Verweis auf einen Pfad im Anwendungsordner handelt, ist das URL-Schema <codeph>"app"</codeph>; andernfalls ist es <codeph>"file"</codeph>. </p>
	 
	 <p>Sie können Leerzeichen (anstelle von <codeph>"%20"</codeph>) verwenden beim <i>Zuweisen</i> eines Werts zur <codeph>url</codeph>-Eigenschaft. AIR kodiert die Strings automatisch (konvertiert zum Beispiel Leerzeichen in <codeph>"%20"</codeph>).</p>
	 
	 </apiDesc><example conref="examples\File.nativePath.1.as"> Im folgenden Beispiel wird der Unterschied zwischen der <codeph>nativePath</codeph>-Eigenschaft und der <codeph>url</codeph>-Eigenschaft eines File-Objekts deutlich. Die Kommentare zeigen Ergebnisse auf einem Beispiel-Windows-Computer.
<codeblock>
import flash.filesystem.File;

var docs:File = File.documentsDirectory;
trace(docs.nativePath); // C:\Documents and Settings\turing\My Documents
trace(docs.url); // file:///C:/Documents%20and%20Settings/turing/My%20Documents
</codeblock></example></apiValueDetail><related-links><link href="flash.filesystem.xml#File/nativePath"><linktext>nativePath</linktext></link><link href="../../package.html#decodeURI()"><linktext>decodeURI() global function</linktext></link><link href="../../package.html#decodeURIComponent()"><linktext>decodeURIComponent() global function</linktext></link><link href="../../package.html#encodeURI()"><linktext>decodeURI() global function</linktext></link><link href="../../package.html#encodeURIComponent()"><linktext>decodeURIComponent() global function</linktext></link></related-links></apiValue><apiValue id="flash.filesystem:File:userDirectory:get"><apiName>userDirectory</apiName><shortdesc>
	 Das Verzeichnis des Benutzers.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
	 Das Verzeichnis des Benutzers.
	 
	 <p>Unter Windows ist das der Ordner, der dem Ordner „Eigene Dateien“ übergeordnet ist (z. B. C:\Dokumente und Einstellungen\Benutzername). Unter Mac OS ist dies /Benutzer/Benutzername. Unter Linux ist dies /home/Benutzername.</p>
	 
	 <p>Die <codeph>userDirectory</codeph>-Eigenschaft stellt eine Möglichkeit zum Verweisen auf den Anwendungsordner bereit, die auf allen Plattformen funktioniert. Wenn Sie die <codeph>nativePath</codeph>- oder <codeph>url</codeph>-Eigenschaft eines File-Objekts direkt setzen, funktioniert sie nur auf der Plattform, auf der der Pfad gültig ist.</p>
	 
	 </apiDesc><example conref="examples\File.userDirectory.1.as"> Im folgenden Beispiel wird eine Liste von Dateien und Verzeichnissen ausgegeben, die sich auf der Stammebene des Benutzerverzeichnisses befinden:
<codeblock>
import flash.filesystem.File;

var files:Array = File.userDirectory.listDirectory();
for (var i:uint = 0; i &lt; files.length; i++) {
    trace(files[i].nativePath);
}
</codeblock></example></apiValueDetail></apiValue></apiClassifier></apiPackage>