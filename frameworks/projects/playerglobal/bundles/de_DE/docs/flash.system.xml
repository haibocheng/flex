<?xml version="1.0"?>
<apiPackage id="flash.system"><apiName>flash.system</apiName><apiDetail/><apiClassifier id="flash.system:Security"><apiName>Security</apiName><shortdesc>
 Mit der Security-Klasse können Sie angeben, wie Inhalte in unterschiedlichen Domänen miteinander kommunizieren können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, XMLNode object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Mit der Security-Klasse können Sie angeben, wie Inhalte in unterschiedlichen Domänen miteinander kommunizieren können.
 
 </apiDesc><example conref="examples\SecurityExample.as"> Das folgende Beispiel demonstriert, wie Sie mit einem <codeph>click</codeph>-Ereignis eines Sprite-Objekts das Bedienfeld für die Einstellungen des lokalen Speichers in den Flash Player-Einstellungen anzeigen können. Der Bühne wird mithilfe von <codeph>draw()</codeph> ein orangefarbenes Feld hinzugefügt. Zu <codeph>draw()</codeph> wird ein <codeph>click</codeph>-Ereignis-Listener mit dem Namen <codeph>clickHandler()</codeph> hinzugefügt, der auf <codeph>click</codeph>-Ereignisse reagiert, indem Flash Player veranlasst wird, das Bedienfeld für die Einstellungen des lokalen Speichers zu öffnen.
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.*;
    import flash.system.Security;
    import flash.system.SecurityPanel;

    public class SecurityExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function SecurityExample() {
            draw();
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;

            var label:TextField = new TextField();
            label.text = "settings";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            child.addEventListener(MouseEvent.CLICK, clickHandler);
            addChild(child);
        }

        private function clickHandler(event:MouseEvent):void {
            Security.showSettings(SecurityPanel.LOCAL_STORAGE);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.system:Security:allowDomain"><apiName>allowDomain</apiName><shortdesc>
     Lässt SWF-Dateien in den identifizierten Domänen auf Objekte und Variablen in der SWF-Datei zugreifen, die den allowDomain()-Aufruf enthalten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.allowDomain, allowDomain
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Wenn diese Methode von Code in der Sicherheitssandbox der AIR-Anwendung aufgerufen wird, wird ein SecurityError-Ausnahmefehler zurückgegeben. Inhalt außerhalb der Sicherheitssandbox der Anwendung kann kein Cross-Scripting für Inhalte in der Sicherheitssandbox der Anwendung ausführen. 
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>Ein oder mehrere Strings bzw. URLRequest-Objekte zur Bezeichnung der Domänen, über die Sie den Zugriff gewähren möchten. Sie können die Sonderdomäne „~~“ angeben, um den Zugriff über alle Domänen zu ermöglichen.  
     
     <p product="flashonly">Nur durch Angabe von „~~“ kann der Zugriff auf nicht lokale SWF-Dateien über lokale SWF-Dateien ermöglicht werden, die unter Verwendung von „Nur auf Netzwerk zugreifen“ für die Option „Sicherheit bei lokaler Wiedergabe“ im Flash-Authoringtool veröffentlicht wurden.</p>
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Hiermit können SWF-Dateien und HTML-Dateien auf Objekte und Variablen in der aufrufenden SWF-Datei zugreifen.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     <ph platform="actionscript">Lässt SWF-Dateien in den identifizierten Domänen auf Objekte und Variablen in der SWF-Datei zugreifen, die den <codeph>allowDomain()</codeph>-Aufruf enthalten.</ph>
     
     <p platform="javascript">Diese Methode gilt für das Cross-Scripting von ActionScript 3.0-Code (im SWF-Inhalt). Sie gilt nicht für JavaScript-Code, der in HTML-basierten AIR-Anwendungen ausgeführt wird.</p>
     
     <p platform="actionscript"><i>Hinweis:</i> Der Aufruf dieser Methode vom Code in der Sandbox der AIR-Anwendung verursacht eine SecurityError-Ausnahme. Inhalt außerhalb der Sicherheitsdomäne der Anwendung kann kein direktes Cross-Scripting für Inhalte in der Anwendungssandbox ausführen. Allerdings kann Inhalt außerhalb der Anwendungssandbox über eine Sandboxbrücke mit Inhalt in der Sicherheitssandbox der Anwendung kommunizieren.</p>
     
     <p platform="actionscript">Wenn zwei SWF-Dateien von derselben Domäne aus bereitgestellt werden, z. B. von http://mysite.com/swfA.swf und http://mysite.com/swfB.swf, kann swfA.swf Variablen, Objekte, Eigenschaften, Methoden usw. in swfB.swf untersuchen und ändern, und swfB.swf kann dasselbe bei swfA.swf tun. Dies wird als <i>Skripterstellung über mehrere Filme</i> oder <i>Cross-Scripting</i> bezeichnet.</p>
     
     <p platform="actionscript">Wenn zwei SWF-Dateien über verschiedene Domänen bereitgestellt werden, beispielsweise http://siteA.com/swfA.swf und http://siteB.com/siteB.swf, kann swfA.swf in Flash Player keine Skripterstellung von swfB.swf durchführen und umgekehrt. Eine SWF-Datei erteilt SWF-Dateien von anderen Domänen die Skriptfreigabe durch Aufrufen von <codeph>Security.allowDomain()</codeph>. Dies wird als <i>Cross-Domain-Scripting</i> bezeichnet. Durch Aufrufen von <codeph>Security.allowDomain("siteA.com")</codeph> erteilt siteB.swf der Datei siteA.swf die Berechtigung zur Skripterstellung.</p>
     
     <p platform="actionscript">In domänenübergreifenden Situationen ist es wichtig, die betreffenden beiden Seiten klar zu trennen. Im Folgenden wird die Seite, die das Cross-Scripting durchführt, als <i>zugreifende Seite</i> (in der Regel die zugreifende SWF-Datei) und die andere Seite als <i>Seite, auf die zugegriffen wird</i> (in der Regel die SWF-Datei, auf die zugegriffen wird), bezeichnet. Wenn siteA.swf die Skripterstellung von siteB.swf durchführt, handelt es sich bei siteA.swf um die zugreifende Seite und bei siteB.swf um die Seite, auf die zugegriffen wird.</p>
     
     <p platform="actionscript"><adobeimage alt="Diagramm zu Cross-Domain-Scripting" href="../../images/crossScript_load.jpg"/></p>
     
     <p platform="actionscript">Mit <codeph>allowDomain()</codeph> hergestellte Cross-Domain-Berechtigungen sind asymmetrisch. Im vorherigen Beispiel kann siteA.swf die Skripterstellung von siteB.swf durchführen, siteB.swf jedoch keine Skripterstellung von siteA.swf, da siteA.swf nicht <codeph>allowDomain()</codeph> aufgerufen hat, um SWF-Dateien auf siteB.com die Berechtigung zur Skripterstellung zu erteilen. Sie können jedoch symmetrische Berechtigungen einrichten, indem Sie <codeph>allowDomain()</codeph> aus beiden SWF-Dateien aufrufen.</p>
     
     <p platform="actionscript">Flash Player schützt SWF-Dateien nicht nur vor Cross-Domain-Scripting durch andere SWF-Dateien, sondern auch vor Cross-Domain-Scripting durch HTML-Dateien. HTML-für-SWF-Skripterstellung kann bei älteren Browserfunktionen wie z. B. <codeph>SetVariable</codeph> oder bei Callbacks über <codeph>ExternalInterface.addCallback()</codeph> auftreten. Bei domänenübergreifender HTML-für-SWF-Skripterstellung muss die SWF-Datei, auf die zugegriffen wird, <codeph>allowDomain()</codeph> genauso aufrufen, als ob es sich bei der zugreifenden Seite um eine SWF-Datei handelt, andernfalls schlägt der Vorgang fehl.</p>
     
     <p platform="actionscript">Die Angabe einer IP-Adresse als Argument für <codeph>allowDomain()</codeph> gestattet keinen Zugriff durch alle zugreifenden Seiten, die von der angegebenen IP-Adresse stammen. Stattdessen erhält hierdurch nur eine Seite Zugriff, die in der URL die angegebene IP-Adresse und nicht den Domänennamen enthält, der dieser IP-Adresse zugeordnet ist.</p> 
     
     <p platform="actionscript"><b>Versionsspezifische Unterschiede</b></p>
     <p platform="actionscript">Die domänenübergreifenden Sicherheitsregeln von Flash Player wurden von Version zu Version weiterentwickelt. Die Unterschiede sind in der folgenden Tabelle zusammengefasst.</p>
     
     <adobetable class="innertable" platform="actionscript">
     
     
     
     
     
     <tgroup cols="5"><thead><row><entry>Aktuellste am Cross-Scripting beteiligte SWF-Version</entry><entry><codeph>allowDomain()</codeph> erforderlich?</entry><entry><codeph>allowInsecureDomain()</codeph> erforderlich?</entry><entry>Welche SWF-Datei muss <codeph>allowDomain()</codeph> oder <codeph>allowInsecureDomain()</codeph> aufrufen?</entry><entry>Was kann in <codeph>allowDomain()</codeph> bzw. <codeph>allowInsecureDomain()</codeph> angegeben werden?</entry></row></thead><tbody><row>
       <entry align="center">5 oder frühere Version</entry>
       <entry>Nein</entry>
       <entry align="center">Nein</entry>
       <entry align="center">n. zutr.</entry>
       <entry align="center">n. zutr.</entry>
     </row><row>
       <entry align="center">6</entry>
       <entry>Ja, wenn übergeordnete Domänen nicht übereinstimmen.</entry>
       <entry align="center">Nein</entry>
       <entry>Die SWF-Datei, auf die zugegriffen wird, oder jede SWF-Datei mit der gleichen Superdomäne wie die SWF-Datei, auf die zugegriffen wird.</entry>
       <entry><ul>
         <li>Textbasierte Domäne (mysite.com)</li>
         <li>IP-Adresse (192.168.1.1)</li>
       </ul></entry>
     </row><row>
       <entry align="center">7</entry>
       <entry>Ja, wenn Domänen nicht exakt übereinstimmen.</entry>
       <entry>Ja, wenn Zugriff von HTTP auf HTTPS stattfindet (auch wenn die Domänen exakt übereinstimmen)</entry>
       <entry>Die SWF-Datei, auf die zugegriffen wird, oder jede SWF-Datei mit der gleichen Domäne wie die SWF-Datei, auf die zugegriffen wird.</entry>
       <entry><ul>
         <li>Textbasierte Domäne (mysite.com)</li>
         <li>IP-Adresse (192.168.1.1)</li>
       </ul></entry>
     </row><row>
       <entry align="center">8 oder spätere Version</entry>
       <entry>Ja, wenn Domänen nicht exakt übereinstimmen.</entry>
       <entry>Ja, wenn Zugriff von HTTP auf HTTPS stattfindet (auch wenn die Domänen exakt übereinstimmen)</entry>
       <entry>SWF-Datei, auf die zugegriffen wird</entry>
       <entry><ul>
         <li>Textbasierte Domäne (mysite.com)</li>
         <li>IP-Adresse (192.168.1.1)</li>
         <li>Platzhalter (~~)</li>
       </ul></entry>
     </row></tbody></tgroup></adobetable>
      
     <p platform="actionscript">Die Versionen, die das Verhalten von Flash Player steuern, sind <i>SWF-Versionen</i> (Veröffentlichungsversionen einer SWF), nicht die Version von Flash Player selbst. Beispiel: Wenn Flash Player 8 eine SWF wiedergibt, die für Version 7 veröffentlicht wurde, wendet Flash Player das Verhalten von Version 7 an. Hierdurch wird sichergestellt, dass Upgrades des Players keinen Einfluss auf das Verhalten von <codeph>Security.allowDomain()</codeph> in bereitgestellten SWF-Dateien haben.</p>
     
     <p platform="actionscript">Die Spalte „Version“ in der vorherigen Tabelle gibt jeweils die neueste SWF-Version an, die an einem Cross-Scripting-Vorgang beteiligt ist. Flash Player bestimmt das Verhalten entweder aufgrund der Version der zugreifenden SWF-Datei oder der Version der SWF-Datei, auf die zugegriffen wird, je nachdem, welche der beiden Versionen neuer ist.</p>
     
     <p platform="actionscript">Die folgenden Absätze enthalten weitere Informationen zu den Sicherheitsänderungen in Flash Player mit Bezug auf <codeph>Security.allowDomain()</codeph>.</p>
     
     <p platform="actionscript"><b>Version 5</b>. Beim Cross-Domain-Scripting liegen keine Beschränkungen vor.</p>
     
     <p platform="actionscript"><b>Version 6</b>. Einführung der Cross-Domain-Scripting-Sicherheit. Standardmäßig verbietet Flash Player das Cross-Domain-Scripting. Mit <codeph>Security.allowDomain()</codeph> kann es jedoch zugelassen werden. Um festzustellen, ob sich zwei Dateien in derselben Domäne befinden, verwendet Flash Player die Superdomäne der jeweiligen Datei. Diese entspricht exakt dem Hostnamen aus der URL der Datei, minus dem ersten Segment, bis zu einem Minimum von zwei Segmenten. Beispiel: Die Superdomäne www.mysite.com lautet einfach mysite.com. In diesem Fall könnten SWF-Dateien sowohl von www.mysite.com als auch von store.mysite.com Skripten füreinander erstellen, ohne <codeph>Security.allowDomain()</codeph> aufzurufen.</p>
     
     <p platform="actionscript"><b>Version 7</b>. Superdomänen-Übereinstimmung wird durch exakte Domänenübereinstimmung ersetzt. Zwei Dateien haben aufeinander nur dann Skriptzugriff, wenn die Hostnamen in ihren URLs identisch sind. Andernfalls ist ein Aufruf von <codeph>Security.allowDomain()</codeph> erforderlich. In der Standardeinstellung haben Dateien, die aus Nicht-HTTPS-URLs geladen werden, keinen Skriptzugriff mehr auf Dateien, die aus HTTPS-URLs geladen werden, auch wenn diese Dateien aus exakt derselben Domäne geladen werden. Diese Einschränkung trägt zum Schutz von HTTPS-Dateien bei, da eine Nicht-HTTPS-Datei beim Herunterladen geändert werden kann. Eine absichtlich geänderte Nicht-HTTPS-Datei kann eine HTTPS-Datei beschädigen, die ansonsten gegen Aktionen dieser Art geschützt wäre. Mit <codeph>Security.allowInsecureDomain()</codeph> können HTTPS-SWF-Dateien, auf die zugegriffen wird, diese Einschränkung bei Bedarf aufheben. Von der Verwendung von <codeph>Security.allowInsecureDomain()</codeph> wird jedoch abgeraten.</p>
     
     <p platform="actionscript"><b>Version 8</b>. Änderungen in zwei wichtigen Bereichen:</p>
     
     <ul platform="actionscript">
       <li>Durch Aufrufen von <codeph>Security.allowDomain()</codeph> sind Cross-Scripting-Vorgänge nun nur noch dann möglich, wenn die SWF-Datei, auf die zugegriffen wird, die Datei ist, die <codeph>Security.allowDomain()</codeph> aufgerufen hat. Mit anderen Worten: Eine SWF-Datei, die <codeph>Security.allowDomain()</codeph> aufruft, gibt nun nur den Zugriff auf sich selbst frei. In früheren Versionen ermöglichte der Aufruf von <codeph>Security.allowDomain()</codeph> Cross-Scripting-Vorgänge, bei denen die SWF-Datei, auf die zugegriffen wurde, jede SWF-Datei in der Domäne der SWF-Datei sein konnte, die <codeph>Security.allowDomain()</codeph> aufgerufen hat. Durch den Aufruf von <codeph>Security.allowDomain()</codeph> wurde bisher die gesamte Domäne der aufrufenden SWF-Datei freigegeben.</li>
     
       <li>Für <codeph>Security.allowDomain("~~")</codeph> und <codeph>Security.allowInsecureDomain("~~")</codeph> werden nun Werte mit Platzhalterzeichen unterstützt. Der Platzhalter (~~) ermöglicht Cross-Scripting-Vorgänge, bei denen die zugreifende Datei jede beliebige Datei aus einer beliebigen Quelle sein kann. Der Platzhalter ist gewissermaßen eine globale Berechtigung. Berechtigungen durch Platzhalter sind zum Aktivieren bestimmter Vorgänge unter den Sicherheitsregeln für lokale Dateien erforderlich. Insbesondere bei einer lokalen SWF-Datei mit Berechtigung für den Netzwerkzugriff zum Erstellen von Skripten für eine SWF-Datei im Internet muss die Internet-SWF-Datei, auf die zugegriffen wird, die <codeph>Security.allowDomain("~~")</codeph>-Methode aufrufen, um der Tatsache Rechnung zu tragen, dass der Ursprung einer lokalen SWF-Datei unbekannt ist. (Wenn die Internet-SWF-Datei von einer HTTPS-URL geladen wird, muss die Internet-SWF-Datei stattdessen die <codeph>Security.allowInsecureDomain("~~")</codeph>-Methode aufrufen.)</li>
     </ul>
       
     <p platform="actionscript">Von Zeit zu Zeit stellt sich Ihnen folgende Situation: Sie laden eine untergeordnete SWF-Datei aus einer anderen Domäne und möchten dieser das Scripting für die übergeordnete SWF-Datei ermöglichen, Ihnen ist jedoch die endgültige Domäne der untergeordneten SWF-Datei nicht bekannt. Dies ist beispielsweise der Fall, wenn Sie Weiterleitungen mit Lastausgleich oder Server von Dritten verwenden.</p>
     
     <p platform="actionscript">Sie können dann die <codeph>url</codeph>-Eigenschaft des URLRequest-Objekts verwenden, das für <codeph>Loader.load()</codeph> übergeben wird. Wenn Sie beispielsweise eine untergeordnete SWF-Datei in einer übergeordneten SWF-Datei laden, können Sie auf die <codeph>contentLoaderInfo</codeph>-Eigenschaft des Loader-Objekts für die übergeordnete SWF-Datei zugreifen: </p>
     <codeblock platform="actionscript">Security.allowDomain(loader.contentLoaderInfo.url)</codeblock>
     
     <p platform="actionscript">Warten Sie, bis der Ladevorgang der untergeordneten SWF-Datei gestartet wird, um den korrekten Wert der <codeph>url</codeph>-Eigenschaft abrufen zu können. Über das <codeph>progress</codeph>-Ereignis können Sie bestimmen, wann der Ladevorgang der untergeordneten SWF-Datei gestartet wurde.</p>
     
     <p platform="actionscript">Es kann auch die entgegengesetzte Situation auftreten: Angenommen, Sie haben eine untergeordnete SWF-Datei erstellt, die das Scripting durch die übergeordnete SWF-Datei ermöglichen soll, der jedoch die Domäne der übergeordneten SWF-Datei nicht bekannt ist. In diesem Fall können Sie auf die <codeph>loaderInfo</codeph>-Eigenschaft des Anzeigeobjekts zugreifen, bei dem es sich um das Stammobjekt der SWF-Datei handelt. Rufen Sie <codeph>Security.allowDomain(this.root.loaderInfo.loaderURL)</codeph> in der untergeordneten SWF-Datei auf. Sie müssen nicht warten, bis die übergeordnete SWF-Datei geladen wurde, da der Ladevorgang der übergeordneten Datei bereits abgeschlossen ist, wenn der Ladevorgang für die untergeordnete SWF-Datei erfolgt.</p>
     
     <p platform="actionscript">Wenn Sie eine Datei für Flash Player 8 oder eine spätere Version veröffentlichen, können Sie in diesen Fällen auch <codeph>Security.allowDomain("~~")</codeph> aufrufen. Dies ist jedoch mitunter gefährlich, da hierdurch die aufrufende SWF-Datei für den Zugriff durch jede andere SWF-Datei der Domäne geöffnet wird. In der Regel ist es sicherer, die Eigenschaft <codeph>_url</codeph> zu verwenden.</p> 
     
     <p platform="actionscript">Weitere Informationen zur Sicherheit finden Sie in den folgenden Abschnitten:</p>
     
     <ul platform="actionscript">
     
     <li product="flex">Das Kapitel <xref href="http://www.adobe.com/go/flex3_progAS3_security_de" scope="external">Sicherheit</xref> im Handbuch <i>Programmieren mit ActionScript 3.0</i> und die neusten Kommentare zu den LiveDocs.</li>
     
     <li product="flash">Das Kapitel <xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_en" scope="external">Sicherheit</xref> im Handbuch <i>Programmieren mit ActionScript 3.0</i> und die neuesten Kommentare in den LiveDocs.</li>
     
       <li>Der Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external">Sicherheit </xref> im Flash Player Developer Center.</li>
     
     </ul>
     
     
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.external.xml#ExternalInterface/addCallback()"><linktext>ExternalInterface.addCallback()</linktext></link><link href="flash.events.xml#Event/COMPLETE"><linktext>flash.events.Event.COMPLETE</linktext></link><link href="flash.display.xml#DisplayObject/parent"><linktext>flash.display.DisplayObject.parent</linktext></link><link href="flash.net.xml#URLRequest/url"><linktext>flash.net.URLRequest.url</linktext></link><link href="flash.system.xml#Security/allowInsecureDomain()"><linktext>allowInsecureDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:Security:allowInsecureDomain"><apiName>allowInsecureDomain</apiName><shortdesc>
     Hiermit können SWF- und HTML-Dateien in den angegebenen Domänen auf Objekte und Variablen in der aufrufenden SWF-Datei zugreifen, die über das HTTPS-Protokoll gehostet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.allowInsecureDomain, allowInsecureDomain
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Der Aufruf dieser Methode vom Code in der Sicherheitssandbox der AIR-Anwendung verursacht eine SecurityError-Ausnahme. Inhalt außerhalb der Sicherheitssandbox der Anwendung kann kein Cross-Scripting für Inhalte in der Sicherheitssandbox der Anwendung ausführen. 
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>domains</apiItemName><apiType value="restParam"/><apiDesc>Ein oder mehrere Strings bzw. URLRequest-Objekte zur Bezeichnung der Domänen, über die Sie den Zugriff gewähren möchten. Sie können die Sonderdomäne „~~“ angeben, um den Zugriff über alle Domänen zu ermöglichen.  
     
     <p class="flashonly">Nur durch Angabe von „~~“ kann der Zugriff auf nicht lokale SWF-Dateien über lokale SWF-Dateien ermöglicht werden, die unter Verwendung der Option „Nur auf Netzwerk zugreifen“ für die Einstellung „Sicherheit bei lokaler Wiedergabe“ („Datei“ > „Einstellungen für Veröffentlichungen“ > Registerkarte „Flash“) im Flash-Authoringtool veröffentlicht wurden.</p>
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Hiermit können SWF-Dateien und HTML-Dateien, die mit dem HTTPS-Protokoll gehostet werden, auf Objekte und Variablen in der aufrufenden SWF-Datei zugreifen.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
     <ph platform="actionscript">Hiermit können SWF- und HTML-Dateien in den angegebenen Domänen auf Objekte und Variablen in der aufrufenden SWF-Datei zugreifen, die über das HTTPS-Protokoll gehostet wird.</ph>
     
     <p platform="javascript">Diese Methode gilt für das Cross-Scripting von ActionScript 3.0-Code (im SWF-Inhalt). Sie gilt nicht für JavaScript-Code, der in HTML-basierten AIR-Anwendungen ausgeführt wird.</p>
     
     
     <p platform="actionscript">Flash Player stellt <codeph>allowInsecureDomain()</codeph> zur Verfügung, um die Flexibilität zu maximieren, aber das Aufrufen dieser Methode wird nicht empfohlen. Beim Bereitstellen einer Datei über HTTPS sind einige Schutzvorkehrungen für Sie und die Benutzer aktiv. Durch Aufrufen von <codeph>allowInsecureDomain</codeph> wird eine dieser Schutzvorkehrungen geschwächt.</p>
     
     <p platform="actionscript"><i>Hinweis:</i> Der Aufruf dieser Methode vom Code in der Sandbox der AIR-Anwendung verursacht eine SecurityError-Ausnahme. Inhalt außerhalb der Sicherheitsdomäne der Anwendung kann kein direktes Cross-Scripting für Inhalte in der Anwendungssandbox ausführen. Allerdings kann Inhalt außerhalb der Anwendungssandbox über eine Sandbox-Brücke mit Inhalt in der Sicherheitssandbox der Anwendung kommunizieren.</p>
     
     <p platform="actionscript">Diese Methode funktioniert genauso wie <codeph>Security.allowDomain()</codeph>, erlaubt jedoch zusätzlich Operationen, bei denen die zugreifende Seite mit einem Nicht-HTTPS-Protokoll und die Seite, auf die zugegriffen wird, mit HTTPS geladen werden. In Flash Player ab Version 7 erhalten Nicht-HTTPS-Dateien keinen Skriptzugriff auf HTTPS-Dateien. Die <codeph>allowInsecureDomain()</codeph>-Methode hebt diese Einschränkung auf, wenn sie von der HTTPS-SWF verwendet wird, auf die zugegriffen wird.</p>
     
     <p platform="actionscript">Verwenden Sie die <codeph>allowInsecureDomain()</codeph>-Methode nur, um den Skriptzugriff durch Nicht-HTTPS-Dateien auf HTTPS-Dateien zu ermöglichen. Verwenden Sie diese Methode zum Ermöglichen der Skripterstellung, wenn die zugreifende Nicht-HTTPS-Datei und die HTTPS-Datei, auf die zugegriffen wird, von derselben Domäne aus bereitgestellt werden, beispielsweise, wenn eine SWF-Datei auf http://mysite.com Skripten für https://mysite.com erstellen soll. Verwenden Sie die Methode nicht, um eine Skripterstellung zwischen Nicht-HTTPS-Dateien, zwischen HTTPS-Dateien oder seitens HTTPS-Dateien bei Nicht-HTTPS-Dateien zu ermöglichen. Für diese Fälle sollten Sie die <codeph>allowDomain()</codeph>-Methode verwenden.</p>
     
     Das folgende Szenario verdeutlicht, wie <codeph>allowInsecureDomain()</codeph> bei unsachgemäßer Anwendung die Sicherheit gefährden kann.
     
     <p platform="actionscript">Beachten Sie, dass das folgende Beispiel nur ein mögliches Szenario darstellt. Es soll lediglich die Problematik von <codeph>allowInsecureDomain()</codeph> anhand eines realistischen Beispiels für Cross-Scripting verdeutlichen. Es deckt jedoch nicht alle Probleme bezüglich der Sicherheitsarchitektur ab und sollte nur als Hintergrundinformation betrachtet werden. Im Flash Player Developer Center stehen umfangreiche Informationen zum Thema Flash Player und Sicherheit zur Verfügung. Weitere Informationen finden Sie im Flash Player Developer Center im Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external">Sicherheit</xref>.</p>
     
     <p platform="actionscript">Angenommen, Sie möchten eine E-Commerce-Site erstellen, die aus zwei Komponenten besteht: einem Katalog, der nicht sicher zu sein braucht, da er nur öffentliche Informationen enthält, und einer Einkaufswagen-/Bezahlkomponente, die sicher sein muss, um finanzspezifische und persönliche Daten der Benutzer zu schützen. Der Katalog soll von http://mysite.com/catalog.swf aus bereitgestellt werden, der Einkaufswagen von https://mysite.com/cart.swf. Eine Anforderung an die Site besteht darin, dass kein Dritter die Kreditkartennummern Ihrer Benutzer ausspionieren kann, indem er eine Schwachstelle in der Sicherheitsarchitektur nutzt.</p>
     
     <p platform="actionscript">Stellen Sie sich vor, dass sich ein Angreifer zwischen Ihren Server und Ihre Benutzer platziert, um zu versuchen, die Kreditkartennummern abzufangen, die die Benutzer in der Einkaufswagen-Anwendung eingeben. Ein solcher Angreifer kann beispielsweise ein skrupelloser Internet-Dienstanbieter (ISP) sein, der von einem Ihrer Benutzer verwendet wird, oder ein böswilliger Administrator am Arbeitsplatz des Benutzers – im Grunde jeder, der die Fähigkeit besitzt, Netzwerkpakete einzusehen oder zu ändern, die über das öffentliche Internet zwischen Ihren Benutzern und Ihren Servern übertragen werden. Diese Situation ist nicht ungewöhnlich.</p> 
     
     <p platform="actionscript">Wenn cart.swf die Kreditkartendaten mittels HTTPS an Ihre Server überträgt, kann der Angreifer diese Informationen nicht direkt aus den Netzwerkpaketen stehlen, da es sich um eine verschlüsselte Übertragung handelt. Er kann jedoch eine andere Technik anwenden: den Inhalt einer Ihrer SWF-Dateien ändern, während diese dem Benutzer bereitgestellt wird, d. h. die SWF-Datei durch eine andere Version ersetzen, die die Benutzerdaten an einen anderen vom Angreifer betriebenen Server überträgt.</p>
     
     <p platform="actionscript">Das HTTPS-Protokoll verhindert u. a., dass eine solche Änderung durchgeführt wird, da HTTPS-Übertragungen nicht nur verschlüsselt, sondern auch manipulationssicher sind. Wenn ein Angreifer ein Paket ändert, erkennt die empfangende Seite diese Änderung und verwirft das Paket. In diesem Fall kann der Angreifer also die Datei cart.swf nicht ändern, da die Übertragung über HTTPS erfolgt.</p>
     
     <p platform="actionscript">Doch nun möchten Sie, dass in der über HTTP bereitgestellten Datei catalog.swf Artikel mittels Schaltflächen dem Einkaufswagen in cart.swf hinzugefügt werden können, der seinerseits über HTTPS bereitgestellt wird. Dazu ruft cart.swf die <codeph>allowInsecureDomain()</codeph>-Methode auf, über die der Katalog (catalog.swf) ein Skript für cart.swf erstellen kann. Diese Aktion hat eine nicht beabsichtigte Folge: Der Angreifer kann nun bereits Änderungen an der Datei catalog.swf vornehmen, während der Benutzer sie herunterlädt, da sie mittels HTTP übertragen wird und somit nicht manipulationssicher ist. Die geänderte catalog.swf des Angreifers kann nun ein Skript für cart.swf erstellen, da cart.swf einen Aufruf der Methode <codeph>allowInsecureDomain()</codeph> enthält. Die geänderte Datei catalog.swf kann mithilfe von ActionScript auf die Variablen in cart.swf zugreifen und somit die Kreditkartendaten und andere vertrauliche Informationen des Benutzers lesen. Die geänderte catalog.swf kann diese Daten dann an den Server des Angreifers senden.</p>
     
     <p platform="actionscript">Ein solcher Missbrauch ist natürlich nicht erwünscht, Sie möchten dennoch, dass Cross-Scripting zwischen den beiden SWF-Dateien Ihrer Site möglich ist. Im Folgenden sind zwei Möglichkeiten aufgeführt, wie Sie diese hypothetische E-Commerce-Site so umbauen können, dass <codeph>allowInsecureDomain()</codeph> verhindert wird:</p>
     
     <ul platform="actionscript">
       <li>Bereitstellen aller SWF-Dateien der Anwendung über HTTPS: Dies ist die bei weitem einfachste und zuverlässigste Lösung. Im genannten Beispiel würden Sie sowohl catalog.swf als auch cart.swf über HTTPS übertragen. Eventuell bemerken Sie ein etwas höheres Datenverkehrsaufkommen und eine etwas stärkere CPU-Auslastung des Servers, wenn Sie eine Datei wie catalog.swf von HTTP auf HTTPS umstellen, und für Ihre Benutzer kommt es eventuell zu etwas längeren Anwendungsladezeiten. Um die Auswirkung dieser Umstellung zu testen, sollten Sie mit reellen Servern experimentieren. Normalerweise liegt die Datenverkehrserhöhung in einem Bereich von 10 bis 20 Prozent. Manchmal ist auch gar keine Erhöhung feststellbar. In der Regel können Sie die Ergebnisse mithilfe von HTTPS-Beschleunigungshardware oder -software weiter optimieren. Ein entscheidender Vorteil der Bereitstellung aller kooperierenden SWF-Dateien über HTTPS besteht darin, dass Sie eine HTTPS-URL als Haupt-URL im Browser des Benutzers verwenden können, ohne dass der Browser Warnmeldungen bezüglich gemischtem Inhalt ausgibt. Darüber hinaus wird dem Benutzer das Schlosssymbol des Browsers als ihm bekanntes und vertrauenswürdiges Zeichen für Sicherheit angezeigt.</li>
     
      <li>Verwenden des HTTPS-auf-HTTP-Skriptzugriffs anstelle des HTTP-auf-HTTPS-Skriptzugriffs: Im genannten Beispiel könnten Sie den Inhalt des Einkaufswagens eines Benutzers in catalog.swf speichern, während cart.swf nur für das Bezahlen zuständig ist. Beim Auschecken kann die Datei cart.swf den Inhalt des Einkaufwagens aus ActionScript-Variablen der Datei catalog.swf abrufen. Die Beschränkung auf HTTP-zu-HTTPS-Skripten ist asymmetrisch. Obwohl eine über HTTP-übermittelte catalog.swf-Datei nicht sicher für Skript-Operationen in einer über HTTPS übermittelten cart.swf-Datei freigegeben werden kann, kann die HTTPS-cart.swf-Datei Änderungen in der HTTP-catalog.swf-Datei vornehmen. Dieser Ansatz ist feiner als der reine HTTPS-Ansatz. Achten Sie jedoch darauf, nicht allen per HTTP übermittelten SWF-Dateien zu vertrauen, da diese manipuliert werden können. Wenn beispielsweise cart.swf die ActionScript-Variable abruft, die den Inhalt des Einkaufswagens beschreibt, kann der ActionScript-Code in cart.swf nicht darauf vertrauen, dass der Wert dieser Variable im erwarteten Format vorliegt. Sie müssen deshalb darauf achten, dass der Inhalt des Einkaufswagens keine ungültigen Daten enthält, die cart.swf zu einer unerwünschten Aktion veranlassen könnte. Sie müssen auch das Risiko einkalkulieren, dass ein Angreifer durch Ändern von catalog.swf zwar gültige, aber inkorrekte Daten an cart.swf übermitteln könnte. So könnte er z. B. Artikel in den Einkaufswagen des Benutzers schmuggeln. Beim üblichen Bezahlvorgang wird das Risiko dadurch ein wenig abgemildert, dass der Inhalt des Einkaufswagens und der Gesamtbetrag erneut zur abschließenden Bestätigung durch den Benutzer angezeigt wird, doch grundsätzlich bleibt das Risiko bestehen.</li>
     </ul>
     
     <p platform="actionscript">Die gängigen Webbrowser unterscheiden bereits seit Jahren zwischen HTTPS- und Nicht-HTTPS-Dateien. Das erläuterte Szenario verdeutlicht, weshalb diese Unterscheidung so wichtig ist. Flash Player bietet die Möglichkeit, diese Sicherheitsvorkehrung zu umgehen, wenn dies absolut erforderlich ist. Zuvor sollten Sie sich jedoch die möglichen Folgen sehr genau bewusst machen.</p>
     
     <p platform="actionscript">Weitere Informationen zur Sicherheit finden Sie in den folgenden Abschnitten:</p>
     
     <ul platform="actionscript">
     
     <li product="flex">Das Kapitel <xref href="http://www.adobe.com/go/flex3_progAS3_security_de" scope="external">Sicherheit</xref> im Handbuch <i>Programmieren mit ActionScript 3.0</i> und die neusten Kommentare zu den LiveDocs.</li>
     
     <li product="flash">Das Kapitel <xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_en" scope="external">Sicherheit</xref> im Handbuch <i>Programmieren mit ActionScript 3.0</i> und die neuesten Kommentare in den LiveDocs.</li>
     
       <li>Der Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external">Sicherheit </xref> im Flash Player Developer Center.</li>
     
     </ul>
	 
     </apiDesc></apiOperationDetail><related-links><link href="flash.system.xml#Security/allowDomain()"><linktext>allowDomain()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:Security:loadPolicyFile"><apiName>loadPolicyFile</apiName><shortdesc>  
     Sucht an dem durch den url-Parameter angegebenen Speicherort nach einer Richtliniendatei.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>url</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Die URL der Richtliniendatei, die geladen werden soll.
     </apiDesc></apiParam><apiTipTexts><apiTipText>Sucht an dem durch den url-Parameter angegebenen Ort nach einer Richtliniendatei.
     
     </apiTipText></apiTipTexts></apiOperationDef><apiDesc>  
     Sucht an dem durch den <codeph>url</codeph>-Parameter angegebenen Ort nach einer Richtliniendatei. In Adobe AIR und Flash Player wird mithilfe von Richtliniendateien bestimmt, ob über Anwendungen Daten von anderen Servern als dem eigenen geladen werden können. Bitte beachten Sie, dass der Methodenname zwar <codeph> loadPolicyFile()</codeph> ist, aber dass die Datei erst geladen wird, wenn vom Netzwerk eine Richtliniendatei angefordert wird.
     
	 <p>Mithilfe von <codeph>Security.loadPolicyFile()</codeph> kann Flash Player oder AIR Richtliniendateien von beliebigen Orten laden, wie im folgenden Beispiel veranschaulicht wird:</p>
     
     <codeblock platform="actionscript">
     Security.loadPolicyFile("http://www.example.com/sub/dir/pf.xml");
     </codeblock>
     
     <codeblock platform="javascript">
     air.Security.loadPolicyFile("http://www.example.com/sub/dir/pf.xml");
     </codeblock>
     
     <p>Hierdurch versucht Flash Player bzw. AIR, von der angegebenen URL eine Richtliniendatei abzurufen. Alle an diesem Speicherort von der Richtliniendatei zugelassenen Berechtigungen gelten auch für alle Inhalte auf der gleichen oder einer niedrigeren Ebene in der virtuellen Ordnerhierarchie des Servers. </p>
     
     <p platform="actionscript">Beispielsweise wird bei den folgenden zusätzlichen Codezeilen keine Ausnahme ausgelöst:</p>
     
     <codeblock platform="actionscript"> import flash.net.~~;
     var request:URLRequest = new URLRequest("http://www.example.com/sub/dir/vars.txt");
     var loader:URLLoader = new URLLoader();
     loader.load(request);
     
     var loader2:URLLoader = new URLLoader();
     var request2:URLRequest = new URLRequest("http://www.example.com/sub/dir/deep/vars2.txt");
     loader2.load(request2);
     </codeblock>
     
     <p platform="actionscript">Beim folgenden Code wird jedoch eine Sicherheitsausnahme ausgelöst:</p>
     
     <codeblock platform="actionscript"> import flash.net.~~;
     var request3:URLRequest = new URLRequest("http://www.example.com/elsewhere/vars3.txt");
     var loader3:URLLoader = new URLLoader();
     loader3.load(request3);
     </codeblock>
     
     <p>Mit <codeph>loadPolicyFile()</codeph> können Sie beliebig viele Richtliniendateien laden. Beim Prüfen einer Anforderung, für die eine Richtliniendatei erforderlich ist, wartet Flash Player oder AIR immer, bis der Download der Richtliniendatei abgeschlossen ist, bevor eine Anforderung zurückgewiesen wird. Als letzter Weg, wenn mit <codeph>loadPolicyFile()</codeph> keine Richtliniendatei angegeben ist, die eine Anforderung zulässt, konsultiert Flash Player bzw. AIR die ursprünglichen Standardpfade.</p>
     
     <p>Beim Überprüfen auf eine Master-Richtliniendatei wartet Flash Player drei Sekunden lang auf eine Antwort des Servers. Wenn keine Antwort erhalten wird, nimmt Flash Player an, dass es keine Master-Richtliniendatei gibt. Für Aufrufe der Methode <codeph>loadPolicyFile()</codeph> besteht hingegen kein standardmäßiges Zeitlimit. Flash Player geht davon aus, dass die aufgerufene Datei vorhanden ist, und wartet für einen beliebigen Zeitraum, um diese zu laden. Um sicherzustellen, dass die Master-Richtliniendatei geladen wird, sollten Sie diese daher mit der Methode <codeph>loadPolicyFile()</codeph> explizit aufrufen.</p>
     
      <p>Sie können keine Richtliniendateien laden, die von normalerweise reservierten Ports bereitgestellt werden. Eine vollständige Liste gesperrter Ports finden Sie unter „Einschränken von Netzwerk-APIs“ im Kapitel <ph product="flex"><xref href="http://www.adobe.com/go/flex3_progAS3_security" scope="external">Sicherheit</xref></ph><ph product="flash"><xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_en" scope="external">Sicherheit</xref></ph> im Handbuch <i>Programmieren mit ActionScript 3.0</i>.</p>
     
     <p>Wenn Sie das <codeph>xmlsocket</codeph>-Protokoll zusammen mit einer angegebenen Portnummer verwenden, können Sie Richtliniendatei direkt von einem XMLSocket-Server abrufen, wie im folgenden Beispiel gezeigt. Socket-Verbindungen unterliegen nicht der oben beschriebenen Beschränkung für reservierte Ports.</p>
     
     <codeblock platform="actionscript">
     Security.loadPolicyFile("xmlsocket://foo.com:414");
     </codeblock>
     
     <codeblock platform="javascript">
     air.Security.loadPolicyFile("xmlsocket://foo.com:414");
     </codeblock>
     
     <p>Hierdurch versucht Flash Player bzw. AIR, eine Richtliniendatei von dem angegebenen Host und Port abzurufen. Wurde eine Verbindung mit dem angegebenen Port hergestellt, sendet Flash Player oder AIR <codeph>&lt;policy-file-request /></codeph>, beendet mit einem <codeph>null</codeph>-Byte. Der Server muss zum Beenden einer Richtliniendatei ein Null-Byte senden und kann die Verbindung anschließend schließen. Tut er dies nicht, schließt Flash Player oder AIR die Verbindung nach Erhalt des beendenden <codeph>null</codeph>-Byte.</p>
     
     <p platform="actionscript">Sie können eine SWF-Datei daran hindern, diese Methode aufzurufen, indem Sie auf der HTML-Seite, die den SWF-Inhalt enthält, den Parameter <codeph>allowNetworking</codeph> der <codeph>object</codeph>- und <codeph>embed</codeph>-Tags festlegen.</p>
     
     <p>Weitere Informationen zur Sicherheit finden Sie in den folgenden Abschnitten:</p>
     
     <ul>
     
     <li product="flex">Das Kapitel <xref href="http://www.adobe.com/go/flex3_progAS3_security_de" scope="external">Sicherheit</xref> im Handbuch <i>Programmieren mit ActionScript 3.0</i> und die neusten Kommentare zu den LiveDocs.</li>
     
     <li product="flash">Das Kapitel <xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_en" scope="external">Sicherheit</xref> im Handbuch <i>Programmieren mit ActionScript 3.0</i> und die neuesten Kommentare in den LiveDocs.</li>
     
       <li>Der Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external">Sicherheit </xref> im Flash Player Developer Center.</li>
     
     </ul>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:Security:showSettings"><apiName>showSettings</apiName><shortdesc>
     Zeigt das Bedienfeld für die Sicherheitseinstellungen in Flash Player an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.showSettings(), showSettings()
     </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>panel</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>Ein Wert der SecurityPanel-Klasse, der angibt, welches Bedienfeld für die Sicherheitseinstellungen angezeigt wird. Wenn Sie diesen Parameter weglassen, wird <codeph>SecurityPanel.DEFAULT</codeph> verwendet. 
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Zeigt das Bedienfeld für die Sicherheitseinstellungen in Flash Player an. Diese Methode gilt nicht für Inhalt in Adobe AIR; der Aufruf in einer AIR-Anwendung hat keine Auswirkungen.
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.system.xml#SecurityPanel"><linktext>SecurityPanel</linktext></link></related-links></apiOperation><apiValue id="flash.system:Security:APPLICATION"><apiName>APPLICATION</apiName><shortdesc>
	 Die Datei wird in einer AIR-Anwendung ausgeführt und sie wurde mit dem Paket (der AIR-Datei) für diese Anwendung installiert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>application</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Die Datei wird in einer AIR-Anwendung ausgeführt und sie wurde mit dem Paket (der AIR-Datei) für diese Anwendung installiert. Der Inhalt befindet sich im Ressourcenordner der AIR-Anwendung (in dem der Anwendungsinhalt installiert wird).
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE"><linktext>REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE"><linktext>LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK"><linktext>LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED"><linktext>LOCAL_TRUSTED</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_TRUSTED"><apiName>LOCAL_TRUSTED</apiName><shortdesc>
     Die Datei ist eine lokale Datei, die vom Benutzer über den Flash Player-Einstellungsmanager oder eine FlashPlayerTrust-Konfigurationsdatei als vertrauenswürdig eingestuft wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>localTrusted</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die Datei ist eine lokale Datei, die vom Benutzer über den Flash Player-Einstellungsmanager oder eine FlashPlayerTrust-Konfigurationsdatei als vertrauenswürdig eingestuft wurde. Die Datei kann lokale Datenquellen lesen und eine Verbindung mit dem Internet herstellen.
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE"><linktext>REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE"><linktext>LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK"><linktext>LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/APPLICATION"><linktext>APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_WITH_FILE"><apiName>LOCAL_WITH_FILE</apiName><shortdesc>
     Die Datei ist eine lokale Datei, wurde vom Benutzer nicht als vertrauenswürdig einstuft, und es handelt sich nicht um eine SWF-Datei, die mit einem Netzwerkziel veröffentlicht wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>localWithFile</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die Datei ist eine lokale Datei, wurde vom Benutzer nicht als vertrauenswürdig einstuft, und es handelt sich nicht um eine SWF-Datei, die mit einem Netzwerkziel veröffentlicht wurde. In Adobe AIR befindet sich die lokale Datei <i>nicht</i> im Ressourcenordner der Anwendung; diese Dateien werden in der Sicherheitssandbox der Anwendung abgelegt. Die Datei kann lokale Datenquellen lesen, jedoch keine Verbindung mit dem Internet herstellen.
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE"><linktext>REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK"><linktext>LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED"><linktext>LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION"><linktext>APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:LOCAL_WITH_NETWORK"><apiName>LOCAL_WITH_NETWORK</apiName><shortdesc>
	 Die Datei ist eine lokale Datei, wurde vom Benutzer nicht als vertrauenswürdig einstuft, und es handelt sich um eine SWF-Datei, die mit einem Netzwerkziel veröffentlicht wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>localWithNetwork</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Die Datei ist eine lokale Datei, wurde vom Benutzer nicht als vertrauenswürdig einstuft, und es handelt sich um eine SWF-Datei, die mit einem Netzwerkziel veröffentlicht wurde. Die Datei kann eine Verbindung mit dem Internet herstellen, jedoch keine lokalen Datenquellen lesen.
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>sandboxType</linktext></link><link href="flash.system.xml#Security/REMOTE"><linktext>REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE"><linktext>LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED"><linktext>LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION"><linktext>APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:REMOTE"><apiName>REMOTE</apiName><shortdesc>
     Die Datei stammt von einer Internet-URL und kann entsprechend den domänenbasierten Sandbox-Regeln verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
     </refpath></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>remote</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Die Datei stammt von einer Internet-URL und kann entsprechend den domänenbasierten Sandbox-Regeln verwendet werden.
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>sandboxType</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE"><linktext>LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK"><linktext>LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED"><linktext>LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION"><linktext>APPLICATION</linktext></link></related-links></apiValue><apiValue id="flash.system:Security:exactSettings:get"><apiName>exactSettings</apiName><shortdesc>
     Legt fest, wie in Flash Player oder AIR die für bestimmte Inhalteinstellungen, beispielsweise Berechtigungen für Kamera und Mikrofon, Speicheranteile oder Speicher für permanente gemeinsame Objekte, zu verwendende Domäne ausgewählt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.exactSettings, exactSettings
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>Der Wert von <codeph>exactSettings</codeph> wurde in Flash Player oder AIR bereits mindestens einmal bei einer Entscheidung hinsichtlich der Player-Einstellungen verwendet.
     
     </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     Legt fest, wie in Flash Player oder AIR die für bestimmte Inhalteinstellungen, beispielsweise Berechtigungen für Kamera und Mikrofon, Speicheranteile oder Speicher für permanente gemeinsame Objekte, zu verwendende Domäne ausgewählt wird. Um in der SWF-Datei die gleichen Einstellungen zu verwenden, die in Flash Player 6 verwendet wurden, setzen Sie <codeph>exactSettings</codeph> auf <codeph>false</codeph>.
     
     <p platform="javascript">Diese Eigenschaft wird in SWF-Inhalten verwendet, nicht in JavaScript-Code in AIR-Anwendungen.</p>
     
     <p platform="actionscript">In Flash Player 6 basiert die für diese Player-Einstellungen verwendete Domäne auf dem der Domäne der SWF-Datei nachgestellten Teil. Wenn die Domäne einer SWF-Datei mehr als zwei Segmente enthält, beispielsweise www.example.com, wird das erste Segment der Domäne („www“) entfernt und der restliche Teil der Domäne verwendet, d. h. example.com. In Flash Player 6 wird daher bei www.example.com und bei store.example.com die Domäne example.com als Domäne für diese Einstellungen verwendet. Genauso wird bei www.example.co.uk und store.example.co.uk die Domäne example.co.uk als Domäne für diese Einstellungen verwendet. In Flash Player 7 und späteren Versionen werden Player-Einstellungen in der Standardeinstellung entsprechend der exakten Domäne einer SWF-Datei ausgewählt. Beispiel: Eine SWF-Datei von www.example.com verwendet die Player-Einstellungen für www.example.com und eine SWF-Datei von store.example.com für store.example.com.</p>
     
     <p platform="actionscript">Wenn <codeph>Security.exactSettings</codeph> auf <codeph>true</codeph> gesetzt ist, verwendet Flash Player exakte Domänen für Player-Einstellungen. Wenn es auf <codeph>false</codeph> gesetzt ist, werden die in Flash Player 6 verwendeten Domäneneinstellungen verwendet. Der Standardwert für <codeph>exactSettings</codeph> ist <codeph>true</codeph>. Wenn Sie für <codeph>exactSettings</codeph> einen anderen Wert als den Standardwert festlegen, tun Sie dies, bevor Ereignisse auftreten, bei denen Flash Player Player-Einstellungen wählen muss (z. B. beim Verwenden einer Kamera oder eines Mikrofons oder beim Abrufen eines permanenten gemeinsamen Objekts.</p>
     
     <p platform="actionscript">Wenn Sie zuvor eine SWF-Datei in Version 6 veröffentlicht und daraus permanente gemeinsame Objekte erstellt haben und jetzt diese permanenten gemeinsamen Objekt aus der SWF-Datei, die Sie auf Version 7 oder höher portiert haben, abrufen müssen, setzen Sie <codeph>Security.exactSettings</codeph> auf <codeph>false</codeph>, bevor Sie <codeph>SharedObject.getLocal()</codeph> aufrufen.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Security:sandboxType:get"><apiName>sandboxType</apiName><shortdesc>
     Gibt den Typ der Sicherheitssandbox an, in der die aufrufende Datei verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Gibt den Typ der Sicherheitssandbox an, in der die aufrufende Datei verwendet wird.
     
     <p><codeph>Security.sandboxType</codeph> weist einen der folgenden Werte auf:</p>
     
     <ul>
     <li><codeph>remote</codeph> (<codeph>Security.REMOTE</codeph>): Diese Datei stammt von einer Internet-URL und kann entsprechend den domänenbasierten Sandbox-Regeln verwendet werden.</li>
     <li><codeph>localWithFile</codeph> (<codeph>Security.LOCAL_WITH_FILE</codeph>): Diese Datei ist eine lokale Datei, wurde vom Benutzer nicht als vertrauenswürdig einstuft, und es handelt sich nicht um eine SWF-Datei, die mit einem Netzwerkziel veröffentlicht wurde. Die Datei kann lokale Datenquellen lesen, jedoch keine Verbindung mit dem Internet herstellen.</li>
     <li><codeph>localWithNetwork</codeph> (<codeph>Security.LOCAL_WITH_NETWORK</codeph>): Diese SWF-Datei ist eine lokale Datei, die für den Benutzer nicht vertrauenswürdig ist und für die Verwendung im Netzwerk veröffentlicht wurde. Die SWF-Datei kann eine Verbindung mit dem Internet herstellen, jedoch keine lokalen Datenquellen lesen.</li>
     <li><codeph>localTrusted</codeph> (<codeph>Security.LOCAL_TRUSTED</codeph>): Diese Datei ist eine lokale Datei, die für den Benutzer über den Flash Player-Einstellungsmanager oder eine FlashPlayerTrust-Konfigurationsdatei als vertrauenswürdig gekennzeichnet wurde. Die Datei kann lokale Datenquellen lesen und eine Verbindung mit dem Internet herstellen.</li>
     <li><codeph>application</codeph> (<codeph>Security.APPLICATION</codeph>): Die Datei wird in einer AIR-Anwendung ausgeführt, und sie wurde mit dem Paket (der AIR-Datei) für diese Anwendung installiert. Standardmäßig können Dateien in der Sandbox der AIR-Anwendung Cross-Skripting für jede Datei in jeder Domäne durchführen (während Dateien außerhalb der AIR-Anwendung u. U. kein Cross-Skripting für die AIR-Datei durchführen dürfen). Standardmäßig können Dateien in der Sandbox der AIR-Anwendung Inhalte und Daten aus einer beliebigen Domäne laden. </li>
     
     </ul>
     
     <p>Weitere Informationen zur Sicherheit finden Sie in den folgenden Abschnitten:</p>
     
     <ul>
     
     <li class="flexonly">Das Kapitel <xref href="http://www.adobe.com/go/flex3_progAS3_security_de" scope="external">Sicherheit</xref> im Handbuch <i>Programmieren mit ActionScript 3.0</i> und die neusten Kommentare zu den LiveDocs.</li>
     <li product="flash">Das Kapitel <xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_en" scope="external">Sicherheit</xref> im Handbuch <i>Programmieren mit ActionScript 3.0</i> und die neuesten Kommentare in den LiveDocs.</li>
     
    <li>Der Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external">Sicherheit </xref> im Flash Player Developer Center.</li>
     
     </ul>
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/REMOTE"><linktext>REMOTE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_FILE"><linktext>LOCAL_WITH_FILE</linktext></link><link href="flash.system.xml#Security/LOCAL_WITH_NETWORK"><linktext>LOCAL_WITH_NETWORK</linktext></link><link href="flash.system.xml#Security/LOCAL_TRUSTED"><linktext>LOCAL_TRUSTED</linktext></link><link href="flash.system.xml#Security/APPLICATION"><linktext>APPLICATION</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.system:LoaderContext"><apiName>LoaderContext</apiName><shortdesc>
 Die LoaderContext-Klasse enthält Optionen zum Laden von SWF-Dateien und anderen Mediendateien über die Loader-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die LoaderContext-Klasse enthält Optionen zum Laden von SWF-Dateien und anderen Mediendateien über die Loader-Klasse. Die LoaderContext-Klasse wird als <codeph>context</codeph>-Parameter in den Methoden <codeph>load()</codeph> und <codeph>loadBytes()</codeph> der Loader-Klasse verwendet.
 
 <p>Beim Laden von SWF-Dateien mit der <codeph>Loader.load()</codeph>-Methode müssen zwei Entscheidungen getroffen werden: in welcher Sicherheitsdomäne wird eine geladene SWF-Datei abgelegt, und in welcher Anwendungsdomäne in dieser Sicherheitsdomäne. Weitere Informationen zu dieser Auswahl finden Sie in den Angaben zur <codeph>applicationDomain</codeph>- und zur <codeph>securityDomain</codeph>-Eigenschaft.</p>
 
 <p>Beim Laden einer SWF-Datei mit der <codeph>Loader.loadBytes()</codeph>-Methode müssen Sie wie bei <codeph>Loader.load()</codeph> eine Anwendungsdomäne auswählen. Es muss jedoch keine Sicherheitsdomäne angegeben werden, da die geladene SWF-Datei von <codeph>Loader.loadBytes()</codeph> immer in der Sicherheitsdomäne der ladenden SWF-Datei abgelegt wird.</p>
 
 <p>Beim Laden von Bildern (JPEG-, GIF- oder PNG-Dateien) anstelle von SWF-Dateien muss weder eine Sicherheitsdomäne noch eine Anwendungsdomäne angegeben werden, da dies nur für SWF-Dateien gilt. Stattdessen muss nur eine Entscheidung getroffen werden: Ist ein programmgesteuerter Zugriff auf die Pixel des geladenen Bilds erforderlich? Wenn dies der Fall ist, finden Sie entsprechende Hinweise im Abschnitt zur <codeph>checkPolicyFile</codeph>-Eigenschaft. Wenn Sie beim Laden eines Bildes gleichzeitig Deblocking anwenden möchten, verwenden Sie statt der LoaderContext-Klasse die JPEGLoaderContext-Klasse.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain"><linktext>flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#JPEGLoaderContext"><linktext>flash.system.JPEGLoaderContext</linktext></link><link href="flash.system.xml#LoaderContext/applicationDomain"><linktext>flash.system.LoaderContext.applicationDomain</linktext></link><link href="flash.system.xml#LoaderContext/checkPolicyFile"><linktext>flash.system.LoaderContext.checkPolicyFile</linktext></link><link href="flash.system.xml#LoaderContext/securityDomain"><linktext>flash.system.LoaderContext.securityDomain</linktext></link><link href="flash.system.xml#SecurityDomain"><linktext>flash.system.SecurityDomain</linktext></link></related-links><apiConstructor id="flash.system:LoaderContext:LoaderContext"><apiName>LoaderContext</apiName><shortdesc>
     Erstellt ein neues LoaderContext-Objekt mit den angegebenen Einstellungen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>checkPolicyFile</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob vor dem Laden des Objekts geprüft werden soll, ob es eine URL-Richtliniendatei gibt.
     
     </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiOperationClassifier>flash.system:ApplicationDomain</apiOperationClassifier><apiData>null</apiData><apiDesc>Gibt das ApplicationDomain-Objekt zur Verwendung mit einem Loader-Objekt an.
     
     </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiOperationClassifier>flash.system:SecurityDomain</apiOperationClassifier><apiData>null</apiData><apiDesc>Gibt das SecurityDomain-Objekt an, das für ein Loader-Objekt verwendet werden soll.
     
	 <p><i>Hinweis:</i> Material in der Sicherheitssandbox der AIR-Anwendung kann kein Material aus anderen Sandboxen in seine SecurityDomain laden.</p>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Erstellt ein neues LoaderContext-Objekt mit den angegebenen Einstellungen. Ausführliche Informationen zu diesen Einstellungen finden Sie in den Beschreibungen der Eigenschaften für diese Klasse.
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain"><linktext>flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#SecurityDomain"><linktext>flash.system.SecurityDomain</linktext></link></related-links></apiConstructor><apiValue id="flash.system:LoaderContext:allowLoadBytesCodeExecution"><apiName>allowLoadBytesCodeExecution</apiName><shortdesc>
	 Gibt an, ob Sie mit der loadBytes()-Methode eines Loader-Objekts Materialien mit ausführbarem Code, zum Beispiel eine SWF-Datei, laden können.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob Sie mit der <codeph>loadBytes()</codeph>-Methode eines Loader-Objekts Materialien mit ausführbarem Code, zum Beispiel eine SWF-Datei, laden können. Wenn diese Eigenschaft auf <codeph>false</codeph> (die Standardeinstellung) gesetzt ist, ist die <codeph>loadBytes()</codeph>-Methode auf sichere Vorgänge beschränkt, zum Beispiel das Laden von Bildern.
 	 
	 <p>In AIR-Material in der Anwendungssandbox ist der Standardwert <codeph>false</codeph>. In anwendungsfremdem Inhalt ist der Standardwert <codeph>true</codeph>.</p>
	 
	 <p><b>Hinweis:</b> Diese API wird vermutlich in einer zukünftigen Version von AIR ersetzt. Wenn dies der Fall ist, müssen Sie den Code anpassen, um die neue API zu verwenden, und die Anwendung neu kompilieren, bevor Sie sie für die neue AIR-Version verteilen.</p>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:applicationDomain"><apiName>applicationDomain</apiName><shortdesc>
	 Gibt die Anwendungsdomäne an, die für die Loader.load()- oder Loader.loadBytes()-Methode verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiValueClassifier>flash.system:ApplicationDomain</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt die Anwendungsdomäne an, die für die <codeph>Loader.load()</codeph>- oder <codeph>Loader.loadBytes()</codeph>-Methode verwendet werden soll. Verwenden Sie diese Eigenschaft nur beim Laden einer SWF-Datei, die in ActionScript 3.0 geschrieben wurde (nicht beim Laden eines Bilds oder einer SWF-Datei, die in ActionScript 1.0 oder ActionScript 2.0 geschrieben wurde).
	 
	 <p>Jede Sicherheitsdomäne ist in eine oder mehrere Anwendungsdomänen unterteilt, die durch ApplicationDomain-Objekte angegeben werden. Anwendungsdomänen dienen keinen Sicherheitszwecken, sondern der Verwaltung kooperierender Einheiten des ActionScript-Codes. Wenn Sie eine SWF-Datei von einer anderen Domäne laden und festlegen, dass die SWF-Datei in einer anderen Sicherheitsdomäne abgelegt werden kann, können Sie die Anwendungsdomäne nicht auswählen, in der die geladene SWF-Datei abgelegt wird. Wenn Sie eine Anwendungsdomäne angegeben haben, wird diese Auswahl ignoriert. Wenn Sie jedoch eine SWF-Datei in Ihre eigene Sicherheitsdomäne laden, da die SWF-Datei aus Ihrer eigenen Domäne stammt oder Sie sie in Ihre Sicherheitsdomäne importieren, können Sie die Anwendungsdomäne für die geladene SWF-Datei auswählen.</p>
	 
	 <p>Sie können eine Anwendungsdomäne für <codeph>LoaderContext.applicationDomain</codeph> nur über Ihre eigene Sicherheitsdomäne übergeben. Beim Versuch, eine Anwendungsdomäne über eine andere Sicherheitsdomäne zu übergeben, wird eine <codeph>SecurityError</codeph>-Ausnahme ausgelöst.</p>
	 
	 <p>Für die <codeph>ApplicationDomain</codeph>-Eigenschaft können Sie vier verschiedene Optionen auswählen:</p>
	 
	 <ul>
	 <li><b>Untergeordnete Domäne von ApplicationDomain des ladenden Objekts</b> Dies ist die Standardoption. Sie können diese Auswahl explizit mit der Syntax <codeph>new ApplicationDomain(ApplicationDomain.currentDomain)</codeph> angeben. Damit kann die geladene SWF-Datei direkt die Klassen der übergeordneten Domäne verwenden, beispielsweise durch Schreiben von <codeph>new MyClassDefinedInParent()</codeph>. Die übergeordnete Domäne kann diese Syntax jedoch nicht verwenden. Die übergeordnete Domäne kann die Klassen der untergeordneten Domäne nur verwenden, indem <codeph>ApplicationDomain.getDefinition()</codeph> aufgerufen wird, um die Klassen abzurufen. Der Vorteil dieser Auswahl liegt darin, dass kein Fehler ausgegeben wird, wenn die untergeordnete Domäne eine Klasse mit demselben Namen wie eine Klasse definiert, die bereits in der übergeordneten Domäne festgelegt ist. Die Unterklasse übernimmt einfach die Definition der übergeordneten Domäne für die entsprechende Klasse. Die widersprüchliche Definition der untergeordneten Domäne wird erst verwendet, wenn sie durch die untergeordnete oder übergeordnete Domäne durch Aufrufen der <codeph>ApplicationDomain.getDefinition()</codeph>-Methode abgerufen wird.</li>
	 
	 <li><b>Eigene ApplicationDomain des ladenden Objekts</b> Sie können diese Anwendungsdomäne bei Verwendung von <codeph>ApplicationDomain.currentDomain</codeph> verwenden. Nach Abschluss des Ladevorgangs können in der übergeordneten und der untergeordneten Domäne jeweils die Klassen der anderen Domäne verwendet werden. Wenn die untergeordnete Domäne eine Klasse mit demselben Namen wie eine bereits in der übergeordneten Domäne festgelegte Klasse definiert, wird die Superklasse verwendet und die Unterklasse ignoriert.</li>
	 
	 <li><b>Untergeordnete Domäne von ApplicationDomain des Systems</b> Sie können diese Anwendungsdomäne bei Verwendung von <codeph>new ApplicationDomain(null)</codeph> verwenden. Damit sind das ladende und das geladene Objekt vollkommen getrennt. Sie können gesonderte Versionen von Klassen mit demselben Namen erstellen, ohne dass Konflikte auftreten oder Prioritäten festgelegt werden. Die Klassen der jeweils anderen Seite werden nur durch Aufrufen der <codeph>ApplicationDomain.getDefinition()</codeph>-Methode angezeigt.</li>
	 
	 <li><b>Untergeordnete Domäne einer anderen ApplicationDomain</b> Gelegentlich liegt möglicherweise eine komplexere ApplicationDomain-Hierarchie vor. Sie können eine SWF-Datei in einer beliebigen ApplicationDomain Ihrer eigenen SecurityDomain laden. Über <codeph>new ApplicationDomain(ApplicationDomain.currentDomain.parentDomain.parentDomain)</codeph> wird eine SWF-Datei beispielsweise in einer neuen untergeordneten Domäne der übergeordneten Domäne der übergeordneten Domäne der aktuellen Domäne geladen.</li>
	 </ul>
	 
	 <p>Nach Abschluss eines Ladevorgangs muss auf beiden Seiten (ladendes Objekt und geladenes Objekt) möglicherweise die eigene ApplicationDomain oder die ApplicationDomain der anderen Seite gesucht werden, um <codeph>ApplicationDomain.getDefinition()</codeph> aufzurufen. Jede Seite kann mithilfe von <codeph>ApplicationDomain.currentDomain</codeph> einen Verweis auf die eigene Anwendungsdomäne abrufen. Die ladende SWF-Datei kann über <codeph>Loader.contentLoaderInfo.applicationDomain</codeph> einen Verweis auf die ApplicationDomain der geladenen SWF-Datei abrufen. Wenn in der geladenen SWF-Datei die Art und Weise des Ladevorgangs bekannt ist, kann das ApplicationDomain-Objekt der ladenden SWF-Datei aufgerufen werden. Wenn die untergeordnete Domäne beispielsweise standardmäßig geladen wurde, kann die Anwendungsdomäne der ladenden SWF-Datei über <codeph>ApplicationDomain.currentDomain.parentDomain</codeph> abgerufen werden.</p>
	 
	 <p>Weitere Informationen finden Sie im Abschnitt „ApplicationDomain-Klasse“ im Kapitel „Clientsystem-Umgebung“ im Handbuch <i>Programmieren mit ActionScript 3.0</i>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain"><linktext>flash.system.ApplicationDomain</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:checkPolicyFile"><apiName>checkPolicyFile</apiName><shortdesc>
	 Gibt an, ob der Anwendung vor dem Laden des eigentlichen Objekts eine URL-Richtliniendatei vom Server des zu ladenden Objekts herunterladen soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob der Anwendung vor dem Laden des eigentlichen Objekts eine URL-Richtliniendatei vom Server des zu ladenden Objekts herunterladen soll. Dieser Merker kann auf die <codeph>Loader.load()</codeph>-Methode, jedoch nicht auf die <codeph>Loader.loadBytes()</codeph>-Methode angewendet werden.
	 
	 <p>Setzen Sie diesen Merker auf <codeph>true</codeph>, wenn Sie ein Bild (JPEG-, GIF- oder PNG-Datei) von außerhalb der Domäne der aufrufenden SWF-Datei laden und davon ausgehen, dass Sie über ActionScript auf den Inhalt des Bilds zugreifen müssen. Beispiele für den Zugriff auf Bildinhalte sind u. a. Verweise auf die <codeph>Loader.content</codeph>-Eigenschaft zum Abrufen eines Bitmap-Objekts oder Aufrufe der <codeph>BitmapData.draw()</codeph>-Methode zum Abrufen einer Kopie der Pixel im geladenen Bild. Wenn Sie einen dieser Vorgänge starten, ohne während des Ladevorgangs einen Wert für <codeph>checkPolicyFile</codeph> angegeben zu haben, wird möglicherweise eine <codeph>SecurityError</codeph>-Ausnahme ausgegeben, da die erforderliche Richtliniendatei noch nicht heruntergeladen wurde.</p>
	 
	 <p>Wenn Sie die <codeph>Loader.load()</codeph>-Methode aufrufen und <codeph>LoaderContext.checkPolicyFile</codeph> auf <codeph>true</codeph> gesetzt ist, beginnt die Anwendung erst dann, das in <codeph>URLRequest.url</codeph> angegebene Objekt herunterzuladen, wenn sie entweder eine relevanten URL-Richtliniendatei heruntergeladen oder festgestellt hat, dass keine Richtliniendatei existiert. Flash Player bzw. AIR berücksichtigen zuerst Richtliniendateien, die bereits heruntergeladen wurden, versuchen dann, eventuelle in Aufrufen der <codeph>Security.loadPolicyFile()</codeph>-Methode anstehende Richtliniendateien herunterzuladen, und dann, eine Richtliniendatei vom Standardpfad herunterzuladen, der <codeph>URLRequest.url</codeph> entspricht und der <codeph>/crossdomain.xml</codeph> auf dem gleichen Server wie <codeph>URLRequest.url</codeph> ist. In jedem Fall muss die gegebene Richtliniendatei unter <codeph>URLRequest.url</codeph> auf Grundlage des Speicherorts der Richtliniendatei vorhanden sein und die Datei muss den Zugriff mittels eines oder mehrerer <codeph>&lt;allow-access-from></codeph>-Tags zulassen.</p>
	 
	 <p>Wenn Sie <codeph>checkPolicyFile</codeph> auf <codeph>true</codeph> setzen, wird der Hauptdownload, der in der <codeph>Loader.load()</codeph>-Methode angegeben ist, nicht geladen, bevor die Richtliniendatei vollständig verarbeitet wurde. Wenn die erforderliche Richtliniendatei vorhanden ist und <codeph>ProgressEvent.PROGRESS</codeph>- oder <codeph>Event.COMPLETE</codeph>-Ereignisse von der <codeph>contentLoaderInfo</codeph>-Eigenschaft des Loader-Objekts zurückgegeben wurden, ist der Download der Richtliniendatei abgeschlossen. Sie können dann Vorgänge durchführen, bei denen die Richtliniendatei erforderlich ist.</p>
	 
	 <p>Wenn Sie <codeph>checkPolicyFile</codeph> auf <codeph>true</codeph> setzen und keine entsprechende Richtliniendatei vorhanden ist, wird eine Fehlermeldung erst bei einem Vorgang ausgegeben, bei dem eine <codeph>SecurityError</codeph>-Ausnahme ausgelöst wird. Nachdem das LoaderInfo-Objekt ein <codeph>ProgressEvent.PROGRESS</codeph>- oder <codeph>Event.COMPLETE</codeph>-Ereignis ausgelöst hat, können Sie jedoch testen, ob eine entsprechende Richtliniendatei gefunden wurde, indem Sie den Wert der <codeph>LoaderInfo.childAllowsParent</codeph>-Eigenschaft überprüfen.</p>
	 
	 <p>Wenn Sie keinen Zugriff auf Pixelebene auf das geladene Bild benötigen, setzen Sie die <codeph>checkPolicyFile</codeph>-Eigenschaft auf <codeph>true</codeph>. In diesem Fall ist es nicht erforderlich, nach einer Richtliniendatei zu suchen, da dies möglicherweise den Start des Downloads verzögert und unter Umständen unnötigerweise Netzwerkbandbreite beansprucht.</p>
	 
	 <p>Setzen Sie <codeph>checkPolicyFile</codeph> zudem nicht auf <codeph>true</codeph>, wenn Sie eine SWF-Datei mit der <codeph>Loader.load()</codeph>-Methode herunterladen. Dies liegt darin begründet, dass SWF-zu-SWF-Berechtigungen nicht über Richtliniendateien sondern durch die <codeph>Security.allowDomain()</codeph>-Methode gesteuert werden. Daher hat <codeph>checkPolicyFile</codeph> beim Laden einer SWF-Datei keine Auswirkung. In diesem Fall ist es nicht erforderlich, nach einer Richtliniendatei zu suchen, da dies möglicherweise den Download der SWF-Datei verzögert und unter Umständen unnötigerweise Netzwerkbandbreite beansprucht. (In Flash Player oder AIR kann nicht festgestellt werden, ob eine SWF-Datei oder ein Bild heruntergeladen wird, da die Richtliniendatei vor diesem Download heruntergeladen wird.)</p>
	 
	 <p>Bei Verwendung von <codeph>checkPolicyFile</codeph> beim Herunterladen eines Objekts von einer URL, bei der möglicherweise serverseitige HTTP-Weiterleitungen verwendet werden, ist Folgendes zu beachten: Richtliniendateien werden immer von der entsprechenden ursprünglichen URL abgerufen, die Sie in <codeph>URLRequest.url</codeph> angeben. Wenn das endgültige Objekt aufgrund von HTTP-Weiterleitungen von einer anderen URL stammt, gelten die ursprünglich heruntergeladenen Richtliniendateien möglicherweise nicht für die endgültige URL des Objekts. Dies ist jedoch die URL, die bei Sicherheitsentscheidungen von Bedeutung ist. In diesem Fall können Sie den Wert von <codeph>LoaderInfo.url</codeph> nach dem Empfangen eines <codeph>ProgressEvent.PROGRESS</codeph>- oder <codeph>Event.COMPLETE</codeph>-Ereignisses überprüfen, in dem die endgültige URL des Objekts angegeben ist. Rufen Sie dann die <codeph>Security.loadPolicyFile()</codeph>-Methode mit der URL einer Richtliniendatei auf, die auf der endgültigen URL des Objekts beruht. Rufen Sie anschließend den Wert von <codeph>LoaderInfo.childAllowsParent</codeph> auf, bis er sich in <codeph>true</codeph> ändert.</p>
	 
     	 <p>Sie brauchen diese Eigenschaft nicht für AIR-Inhalt einstellen, der in der Anwendungssandbox ausgeführt wird. Inhalt in der AIR-Anwendungssandbox kann die <codeph>BitmapData.draw()</codeph>-Methode über einen beliebigen geladenen Bildinhalt als Quelle aufrufen. </p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#BitmapData/draw()"><linktext>flash.display.BitmapData.draw()</linktext></link><link href="flash.display.xml#Loader/content"><linktext>flash.display.Loader.content</linktext></link><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#LoaderInfo/childAllowsParent"><linktext>flash.display.LoaderInfo.childAllowsParent</linktext></link><link href="flash.display.xml#LoaderInfo/url"><linktext>flash.display.LoaderInfo.url</linktext></link><link href="flash.system.xml#Security/allowDomain()"><linktext>flash.system.Security.allowDomain()</linktext></link><link href="flash.system.xml#Security/loadPolicyFile()"><linktext>flash.system.Security.loadPolicyFile()</linktext></link></related-links></apiValue><apiValue id="flash.system:LoaderContext:securityDomain"><apiName>securityDomain</apiName><shortdesc>
	 Gibt die bei einem Loader.load()-Vorgang zu verwendende Sicherheitsdomäne an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiValueClassifier>flash.system:SecurityDomain</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt die bei einem <codeph>Loader.load()</codeph>-Vorgang zu verwendende Sicherheitsdomäne an. Verwenden Sie diese Eigenschaft nur beim Laden einer SWF-Datei (und nicht beim Laden eines Bilds).
	 
 	 <p>Die Auswahl der Sicherheitsdomäne ist nur beim Laden einer SWF-Datei von Bedeutung, die möglicherweise von einer anderen Domäne (einem anderen Server) als die ladende SWF-Datei stammt. Wenn Sie eine SWF-Datei von Ihrer eigenen Domäne laden, wird sie immer in Ihrer Sicherheitsdomäne abgelegt. Wenn Sie jedoch eine SWF-Datei von einer anderen Domäne laden, stehen Ihnen zwei Optionen zur Verfügung. Sie können festlegen, dass die geladene SWF-Datei in ihrer „natürlichen“ Sicherheitsdomäne abgelegt wird, die sich von der der ladenden SWF-Datei unterscheidet. Dies ist die Standardeinstellung. Die andere Möglichkeit besteht darin, dass Sie festlegen, dass die geladene SWF-Datei in der gleichen Sicherheitsdomäne wie die ladende SWF-Datei abgelegt wird. Setzen Sie dazu <codeph>myLoaderContext.securityDomain</codeph> auf den gleichen Wert wie <codeph>SecurityDomain.currentDomain</codeph>. Dies wird als <i>importiertes Laden</i> bezeichnet und entspricht sicherheitstechnisch dem Kopieren der geladenen SWF-Datei auf Ihren Server und dem anschließenden Laden der Datei von diesem Server. Damit das importierte Laden erfolgreich durchgeführt wird, muss der Server der geladenen SWF-Datei über eine Richtliniendatei verfügen, die in der Domäne der ladenden SWF-Datei als vertrauenswürdig eingestuft ist.</p>
	 
	 <p>Sie können für <codeph>LoaderContext.securityDomain</codeph> nur Ihre eigene Sicherheitsdomäne übergeben. Beim Versuch, andere Sicherheitsdomänen zu übergeben, wird eine <codeph>SecurityError</codeph>-Ausnahme ausgegeben.</p>
	 
	 <p>Material in der Sicherheitssandbox der AIR-Anwendung kann kein Material aus anderen Sandboxen in seine SecurityDomain laden.</p>
     
	 <p>Weitere Informationen finden Sie im Kapitel „Sicherheit“ des Handbuchs <i>Programmieren mit ActionScript 3.0</i>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.system.xml#SecurityDomain"><linktext>flash.system.SecurityDomain</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.system:IMEConversionMode"><apiName>IMEConversionMode</apiName><shortdesc>
 Diese Klasse enthält Konstanten zur Verwendung mit der IME.conversionMode-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Diese Klasse enthält Konstanten zur Verwendung mit der <codeph>IME.conversionMode</codeph>-Eigenschaft. Durch Setzen von <codeph>conversionMode</codeph> auf <codeph>ALPHANUMERIC_FULL</codeph> oder <codeph>JAPANESE_KATAKANA_FULL</codeph> wird im Player eine Schrift mit voller Breite verwendet, bei Verwendung von <codeph>ALPHANUMERIC_HALF</codeph> oder <codeph>JAPANESE_KATAKANA_HALF</codeph> dagegen eine Schrift mit halber Breite.
 </apiDesc></apiClassifierDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links><apiValue id="flash.system:IMEConversionMode:ALPHANUMERIC_FULL"><apiName>ALPHANUMERIC_FULL</apiName><shortdesc>
	 Der String „ALPHANUMERIC_FULL“ zur Verwendung mit der IME.conversionMode-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ALPHANUMERIC_FULL</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der String <codeph>"ALPHANUMERIC_FULL"</codeph> zur Verwendung mit der <codeph>IME.conversionMode</codeph>-Eigenschaft. Diese Konstante wird mit allen IMEs verwendet. Verwenden Sie die Syntax <codeph>IMEConversionMode.ALPHANUMERIC_FULL</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:ALPHANUMERIC_HALF"><apiName>ALPHANUMERIC_HALF</apiName><shortdesc>
	 Der String „ALPHANUMERIC_HALF“ zur Verwendung mit der IME.conversionMode-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ALPHANUMERIC_HALF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der String <codeph>"ALPHANUMERIC_HALF"</codeph> zur Verwendung mit der <codeph>IME.conversionMode</codeph>-Eigenschaft. Diese Konstante wird mit allen IMEs verwendet. Verwenden Sie die Syntax <codeph>IMEConversionMode.ALPHANUMERIC_HALF</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:CHINESE"><apiName>CHINESE</apiName><shortdesc>
	 Der String „CHINESE“ zur Verwendung mit der IME.conversionMode-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>CHINESE</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der String <codeph>"CHINESE"</codeph> zur Verwendung mit der <codeph>IME.conversionMode</codeph>-Eigenschaft. Diese Konstante wird mit IMEs für vereinfachtes und traditionelles Chinesisch verwendet. Verwenden Sie die Syntax <codeph>IMEConversionMode.CHINESE</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_HIRAGANA"><apiName>JAPANESE_HIRAGANA</apiName><shortdesc>
	 Der String „JAPANESE_HIRAGANA“ zur Verwendung mit der IME.conversionMode-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>JAPANESE_HIRAGANA</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der String <codeph>"JAPANESE_HIRAGANA"</codeph> zur Verwendung mit der <codeph>IME.conversionMode</codeph>-Eigenschaft. Diese Konstante wird mit IMEs für Japanisch verwendet. Verwenden Sie die Syntax <codeph>IMEConversionMode.JAPANESE_HIRAGANA</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_KATAKANA_FULL"><apiName>JAPANESE_KATAKANA_FULL</apiName><shortdesc>
	 Der String „JAPANESE_KATAKANA_FULL“ zur Verwendung mit der IME.conversionMode-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>JAPANESE_KATAKANA_FULL</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der String <codeph>"JAPANESE_KATAKANA_FULL"</codeph> zur Verwendung mit der <codeph>IME.conversionMode</codeph>-Eigenschaft. Diese Konstante wird mit IMEs für Japanisch verwendet. Verwenden Sie die Syntax <codeph>IMEConversionMode.JAPANESE_KATAKANA_FULL</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:JAPANESE_KATAKANA_HALF"><apiName>JAPANESE_KATAKANA_HALF</apiName><shortdesc>
	 Der String „JAPANESE_KATAKANA_HALF“ zur Verwendung mit der IME.conversionMode-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>JAPANESE_KATAKANA_HALF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der String <codeph>"JAPANESE_KATAKANA_HALF"</codeph> zur Verwendung mit der <codeph>IME.conversionMode</codeph>-Eigenschaft. Diese Konstante wird mit IMEs für Japanisch verwendet. Verwenden Sie die Syntax <codeph>IMEConversionMode.JAPANESE_KATAKANA_HALF</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:KOREAN"><apiName>KOREAN</apiName><shortdesc>
	 Der String „KOREAN“ zur Verwendung mit der IME.conversionMode-Eigenschaft.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>KOREAN</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der String <codeph>"KOREAN"</codeph> zur Verwendung mit der <codeph>IME.conversionMode</codeph>-Eigenschaft. Diese Konstante wird mit IMEs für Koreanisch verwendet. Verwenden Sie die Syntax <codeph>IMEConversionMode.KOREAN</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:IMEConversionMode:UNKNOWN"><apiName>UNKNOWN</apiName><shortdesc>
	 Der String „UNKNOWN“, der durch Aufrufen der IME.conversionMode-Eigenschaft zurückgegeben werden kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>UNKNOWN</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der String <codeph>"UNKNOWN"</codeph>, der durch Aufrufen der <codeph>IME.conversionMode</codeph>-Eigenschaft zurückgegeben werden kann. Dieser Wert kann nicht gesetzt werden und wird nur zurückgegeben, wenn der Player den derzeit aktiven IME nicht erkennt. Verwenden Sie die Syntax <codeph>IMEConversionMode.UNKNOWN</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/conversionMode"><linktext>flash.system.IME.conversionMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.system:SecurityPanel"><apiName>SecurityPanel</apiName><shortdesc>
 Die SecurityPanel-Klasse enthält Werte zur Angabe des anzuzeigenden Bedienfelds für die Sicherheitseinstellungen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die SecurityPanel-Klasse enthält Werte zur Angabe des anzuzeigenden Bedienfelds für die Sicherheitseinstellungen.
 
 <p>Diese Klasse enthält statische Konstanten, die mit der <codeph>Security.showSettings()</codeph>-Methode verwendet werden. Sie können keine neuen Instanzen der SecurityPanel-Klasse erstellen.</p>
 
 </apiDesc><example conref="examples\SecurityExample.as"> Das folgende Beispiel demonstriert, wie Sie mit einem <codeph>click</codeph>-Ereignis eines Sprite-Objekts das Bedienfeld für die Einstellungen des lokalen Speichers in den Flash Player-Einstellungen anzeigen können. Der Bühne wird mithilfe von <codeph>draw()</codeph> ein orangefarbenes Feld hinzugefügt. Zu <codeph>draw()</codeph> wird ein <codeph>click</codeph>-Ereignis-Listener mit dem Namen <codeph>clickHandler()</codeph> hinzugefügt, der auf <codeph>click</codeph>-Ereignisse reagiert, indem Flash Player veranlasst wird, das Bedienfeld für die Einstellungen des lokalen Speichers zu öffnen.
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.events.*;
    import flash.system.Security;
    import flash.system.SecurityPanel;

    public class SecurityExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function SecurityExample() {
            draw();
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;

            var label:TextField = new TextField();
            label.text = "settings";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            child.addEventListener(MouseEvent.CLICK, clickHandler);
            addChild(child);
        }

        private function clickHandler(event:MouseEvent):void {
            Security.showSettings(SecurityPanel.LOCAL_STORAGE);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiValue id="flash.system:SecurityPanel:CAMERA"><apiName>CAMERA</apiName><shortdesc>
	 Wenn diese Konstante für Security.showSettings() übergeben wird, wird in den Flash Player-Einstellungen das Bedienfeld für die Kamera angezeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.CAMERA, CAMERA
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>camera</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn diese Konstante für <codeph>Security.showSettings()</codeph> übergeben wird, wird in den Flash Player-Einstellungen das Bedienfeld für die Kamera angezeigt.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:DEFAULT"><apiName>DEFAULT</apiName><shortdesc>
	 Wenn diese Konstante für Security.showSettings() übergeben wird, wird das zuletzt geöffnete Bedienfeld angezeigt, bei dem der Benutzer Flash Player-Einstellungen geschlossen hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.DEFAULT, DEFAULT
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn diese Konstante für <codeph>Security.showSettings()</codeph> übergeben wird, wird das zuletzt geöffnete Bedienfeld angezeigt, bei dem der Benutzer die Flash Player-Einstellungen geschlossen hat.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:DISPLAY"><apiName>DISPLAY</apiName><shortdesc>
	 Wenn diese Konstante für Security.showSettings() übergeben wird, wird in den Flash Player-Einstellungen das Bedienfeld „Anzeige“ angezeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.DISPLAY, DISPLAY
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>display</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn diese Konstante für <codeph>Security.showSettings()</codeph> übergeben wird, wird in den Flash Player-Einstellungen das Bedienfeld „Anzeige“ angezeigt.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:LOCAL_STORAGE"><apiName>LOCAL_STORAGE</apiName><shortdesc>
	 Wenn diese Konstante für Security.showSettings() übergeben wird, wird das Bedienfeld für die Einstellungen des lokalen Speichers in den Flash Player-Einstellungen angezeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.LOCAL_STORAGE, LOCAL_STORAGE
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>localStorage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn diese Konstante für <codeph>Security.showSettings()</codeph> übergeben wird, wird das Bedienfeld für die Einstellungen des lokalen Speichers in den Flash Player-Einstellungen angezeigt.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:MICROPHONE"><apiName>MICROPHONE</apiName><shortdesc>
	 Wenn diese Konstante für Security.showSettings() übergeben wird, wird in den Flash Player-Einstellungen das Bedienfeld für das Mikrofon angezeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.MICROPHONE, MICROPHONE
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>microphone</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn diese Konstante für <codeph>Security.showSettings()</codeph> übergeben wird, wird in den Flash Player-Einstellungen das Bedienfeld für das Mikrofon angezeigt.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:PRIVACY"><apiName>PRIVACY</apiName><shortdesc>
	 Wenn diese Konstante für Security.showSettings() übergeben wird, wird das Bedienfeld für die Zugriffsschutzeinstellungen in den Flash Player-Einstellungen angezeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.PRIVACY, PRIVACY
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>privacy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn diese Konstante für <codeph>Security.showSettings()</codeph> übergeben wird, wird das Bedienfeld für die Zugriffsschutzeinstellungen in den Flash Player-Einstellungen angezeigt.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:SecurityPanel:SETTINGS_MANAGER"><apiName>SETTINGS_MANAGER</apiName><shortdesc>
	 Wenn diese Konstante für Security.showSettings() übergeben wird, wird der Einstellungsmanager (in einem separaten Browserfenster) angezeigt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>Security, Security.SETTINGS_MANAGER, SETTINGS_MANAGER
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>settingsManager</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Wenn diese Konstante für <codeph>Security.showSettings()</codeph> übergeben wird, wird der Einstellungsmanager (in einem separaten Browserfenster) angezeigt.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.system:JPEGLoaderContext"><apiName>JPEGLoaderContext</apiName><shortdesc>
 Die JPEGLoaderContext-Klasse enthält eine Eigenschaft zur Aktivierung eines Deblocking-Filters beim Laden eines JPEG-Bildes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.system:LoaderContext</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die JPEGLoaderContext-Klasse enthält eine Eigenschaft zur Aktivierung eines Deblocking-Filters beim Laden eines JPEG-Bildes. Der Deblocking-Filter verbessert die Qualität eines Bildes bei höheren Komprimierungseinstellungen, indem er benachbarte Pixel glättet. Um bei Laden eines JPEG-Bildes Deblocking anzuwenden, erstellen Sie ein JPEGLoaderContext-Objekt und legen Sie seine <codeph>deblockingFilter</codeph>-Eigenschaft fest. Verwenden Sie dann den Namen des JPEGLoaderContext-Objekts als Wert des <codeph>context</codeph>-Parameters der <codeph>load()</codeph>-Methode des Loader-Objekts, um das Bild zu laden.
 
 <p>Die JPEGLoaderContext-Klasse erweitert die LoaderContext-Klasse. Setzen Sie die <codeph>checkPolicyFile</codeph>-Eigenschaft auf <codeph>true</codeph>, wenn Sie programmgesteuerten Zugriff auf die Pixel des geladenen Bildes benötigen (z. B. wenn Sie die <codeph>BitmapData.draw()</codeph>-Methode verwenden). Für AIR-Inhalt, der in der Anwendungssandbox ausgeführt wird, ist es nicht notwendig, die <codeph>checkPolicyFile</codeph>-Eigenschaft festzulegen.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#BitmapData/draw()"><linktext>flash.display.BitmapData.draw()</linktext></link></related-links><apiConstructor id="flash.system:JPEGLoaderContext:JPEGLoaderContext"><apiName>JPEGLoaderContext</apiName><shortdesc>
     Erstellt ein neues JPEGLoaderContext-Objekt mit den festgelegten Einstellungen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>deblockingFilter</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Legt die Stärke des Deblocking-Filters fest. Der Wert 1,0 bedeutet, dass der Deblocking-Filter mit voller Stärke arbeitet, während ein Wert von 0,0 den Filter deaktiviert.
     
     </apiDesc></apiParam><apiParam><apiItemName>checkPolicyFile</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob Flash Player vor dem Laden des Objekts prüfen soll, ob es eine URL-Richtliniendatei gibt.
     
     </apiDesc></apiParam><apiParam><apiItemName>applicationDomain</apiItemName><apiOperationClassifier>flash.system:ApplicationDomain</apiOperationClassifier><apiData>null</apiData><apiDesc>Gibt das ApplicationDomain-Objekt zur Verwendung mit einem Loader-Objekt an.
     
     </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiOperationClassifier>flash.system:SecurityDomain</apiOperationClassifier><apiData>null</apiData><apiDesc>Gibt das SecurityDomain-Objekt an, das für ein Loader-Objekt verwendet werden soll.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Erstellt ein neues JPEGLoaderContext-Objekt mit den festgelegten Einstellungen. 
     
     </apiDesc></apiConstructorDetail><related-links><link href="flash.system.xml#LoaderContext"><linktext>flash.system.LoaderContext</linktext></link><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#ApplicationDomain"><linktext>flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#SecurityDomain"><linktext>flash.system.SecurityDomain</linktext></link></related-links></apiConstructor><apiValue id="flash.system:JPEGLoaderContext:deblockingFilter"><apiName>deblockingFilter</apiName><shortdesc> 
	 Legt die Stärke des Deblocking-Filters fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>0.0</apiData><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc> 
	 Legt die Stärke des Deblocking-Filters fest. Der Wert 1,0 bedeutet, dass der Deblocking-Filter mit voller Stärke arbeitet, während ein Wert von 0,0 den Filter deaktiviert.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.system:ApplicationDomain"><apiName>ApplicationDomain</apiName><shortdesc>
 Die ApplicationDomain-Klasse ist ein Container für diskrete Gruppen mit Klassendefinitionen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>Security considerations for application domains are discussed in the 
 applicationDomain property entries of URLRequest and LoaderInfo. 
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die ApplicationDomain-Klasse ist ein Container für diskrete Gruppen mit Klassendefinitionen. Mit Anwendungsdomänen werden Klassen unterteilt, die sich in der gleichen Sicherheitsdomäne befinden. Dies ermöglicht mehrere Definitionen der gleichen Klasse und die Wiederverwendung übergeordneter Definitionen in Unterklassen.
 
 <p>Anwendungsdomänen werden beim Laden einer externen SWF-Datei über die Loader-Klasse verwendet. Alle ActionScript 3.0-Definitionen in der geladenen SWF-Datei sind in der Anwendungsdomäne gespeichert, die durch die <codeph>applicationDomain</codeph>-Eigenschaft des LoaderContext-Objekts angegeben wird, das als <codeph>context</codeph>-Parameter der <codeph>load()</codeph>- oder <codeph>loadBytes()</codeph>-Methode des Loader-Objekts übergeben wird. Das LoaderInfo-Objekt enthält auch eine schreibgeschützte <codeph>applicationDomain</codeph>-Eigenschaft.</p>
 
 <p>Der gesamte Code in einer SWF-Datei ist so definiert, dass er sich in einer Anwendungsdomäne befindet. Die aktuelle Anwendungsdomäne ist die Domäne, in der die Hauptanwendung ausgeführt wird. Die Systemdomäne enthält alle Anwendungsdomänen, einschließlich der aktuellen Domäne, d. h. alle Klassen von Flash Player.</p>
 
 <p>Mit Ausnahme der Systemdomäne ist jede Anwendungsdomäne mit einer übergeordneten Domäne verknüpft. Die Systemdomäne ist die übergeordnete Domäne der Anwendungsdomäne der Hauptanwendung. Geladene Klassen werden nur definiert, wenn sie in der jeweiligen Superklasse nicht bereits definiert sind. Die Definition einer geladenen Klasse kann nicht mit einer neueren Definition überschrieben werden.</p>
 
 <p>Beispiele zur Verwendung von Anwendungsdomänen finden Sie im Handbuch <i>Programmieren mit ActionScript 3.0</i>.</p>
 
 <p>Über die <codeph>ApplicationDomain()</codeph>-Konstruktorfunktion können Sie ein ApplicationDomain-Objekt erstellen.</p>
 
 </apiDesc><example conref="examples\ApplicationDomainExample.as"> Das folgende Beispiel veranschaulicht, wie Klassen zur Laufzeit geladen und öffentliche Methoden, die sich in einer anderen SWF-Datei befinden, aufgerufen werden.
 <p><b>Hinweise:</b></p>
 <ul>
    <li>Da eine SWF-Datei von der ClassLoader-Klasse geladen wird, muss die lokale Sicherheit die Dateisystemebene erfassen.</li>
    <li>Um dieses Beispiel auszuführen, müssen Sie über eine swf-Datei mit dem Namen „RuntimeClasses.swf“ verfügen, die sich im gleichen Ordner befindet wie „ApplicationDomainExample.swf“.</li>
 </ul>
 
 <p>Erstellen Sie zunächst die Datei „RuntimeClasses.swf“ mithilfe des folgenden Codes:</p>
 <codeblock platform="actionscript">
 package {
   import flash.display.Sprite;
   public class RuntimeClasses extends Sprite
   {
     public function RuntimeClasses()
     {}
      
     public function greet():String {
       return("Hello World");
     }
   }
 }
 </codeblock>
 
 <p>Implementieren Sie dann den folgenden Code:</p>
<codeblock>

package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.errors.IllegalOperationError;
    import flash.events.Event;
    import flash.text.TextField;

    public class ApplicationDomainExample extends Sprite {
        private var loader:ClassLoader;
        private var tf:TextField = new TextField();

        public function ApplicationDomainExample() {
            addChild(tf);

            loader = new ClassLoader();
            loader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            loader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            loader.load("RuntimeClasses.swf");
        }

        private function loadErrorHandler(e:Event):void {
            tf.text = "Load failed";
            throw new IllegalOperationError("Cannot load the specified file.");
        }

        private function classLoadedHandler(e:Event):void {
            var runtimeClassRef:Class = loader.getClass("RuntimeClasses");
            var greeter:Object = new runtimeClassRef();

            tf.text = greeter.greet();
        }
    }
}

import flash.display.Loader;
import flash.errors.IllegalOperationError;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.IOErrorEvent;
import flash.events.SecurityErrorEvent;
import flash.net.URLRequest;
import flash.system.ApplicationDomain;
import flash.system.LoaderContext;

class ClassLoader extends EventDispatcher {
    public static var CLASS_LOADED:String = "classLoaded";
    public static var LOAD_ERROR:String = "loadError";
    private var loader:Loader;
    private var swfLib:String;
    private var request:URLRequest;
    private var loadedClass:Class;

    public function ClassLoader() {

        loader = new Loader();
        loader.contentLoaderInfo.addEventListener(Event.COMPLETE,completeHandler);
        loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
        loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);
    }

    public function load(lib:String):void {
        swfLib = lib;
        request = new URLRequest(swfLib);
        var context:LoaderContext = new LoaderContext();
        context.applicationDomain=ApplicationDomain.currentDomain;
        loader.load(request,context);
    }

    public function getClass(className:String):Class {
        try {
            return loader.contentLoaderInfo.applicationDomain.getDefinition(className)  as  Class;
        } catch (e:Error) {
            throw new IllegalOperationError(className + " definition not found in " + swfLib);
        }
        return null;
    }

    private function completeHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.CLASS_LOADED));
    }

    private function ioErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }

    private function securityErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }
}
</codeblock></example><example conref="examples\ApplicationDomainExample.2.as"> Wenn mehrere SWF-Dateien kompilierte Klassen mit demselben Namen enthalten, die jedoch unterschiedliche Implementierungen bieten, können Sie die Klassen der extern geladenen SWF-Dateien anhand des folgenden Beispiels getrennt von anderen Klassen speichern. Bisher wurde die untergeordnete SWF-Datei angewiesen, <codeph>ApplicationDomain.currentDomain</codeph> zu verwenden. In diesem Fall wurde eine neue <codeph>ApplicationDomain</codeph> erstellt, sodass die Eigenschaften und Methoden der <codeph>Greeter</codeph>-Klasse der SWF-Datei, die als zweite geladen wird, nicht die Eigenschaften und Methoden der ersten <codeph>Greeter</codeph>-Klasse ersetzen. Sie können dies testen, indem Sie die <codeph>context.applicationDomain</codeph>-Eigenschaft in der <codeph>load</codeph>-Methode von <codeph>ClassLoader</codeph> ändern.
 <p><b>Hinweise:</b></p>
 <ul>
    <li>Da eine SWF-Datei von der ClassLoader-Klasse geladen wird, muss die lokale Sicherheit die Dateisystemebene erfassen.</li>
    <li>Um dieses Beispiel auszuführen, müssen Sie über zwei SWF-Dateien mit dem Namen „Greeter.swf“ verfügen, die im Ordner „en“ bzw. „es“ gespeichert sind.</li>
 </ul>
 
 <p>Erstellen Sie im Ordner „en“ eine Datei mit dem Namen „Greeter.as“ mit dem folgenden Code:</p>
 <codeblock platform="actionscript">
 package {
    import flash.display.Sprite;
    public class Greeter extends Sprite
    {
        public function Greeter()
        {
        }
        
        public function greet():String {
            return("Good Morning");
        }
    }
 }
 </codeblock>
 <p>Erstellen Sie dann eine sehr ähnliche „Greeter.as“-Datei im Ordner „es“:</p>
 
 <codeblock platform="actionscript">
 package {
    import flash.display.Sprite;
    public class Greeter extends Sprite
    {
        public function Greeter()
        {
        }
        
        public function greet():String {
            return("Buenos Dias");
        }
    }
}
 </codeblock>
 
 <p>Kompilieren Sie SWF-Dateien für beide und implementieren Sie dann den folgenden Code:</p>
<codeblock>
package {
    import flash.display.DisplayObject;
    import flash.display.Sprite;
    import flash.errors.IllegalOperationError;
    import flash.events.Event;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;

    public class ApplicationDomainExample2 extends Sprite {
        private var spanishGreeterLoader:ClassLoader;
        private var englishGreeterLoader:ClassLoader;
        private var tf:TextField = new TextField();
        private var greetersLoaded:uint = 0;

        public function ApplicationDomainExample2() {
            tf.autoSize = TextFieldAutoSize.LEFT;
            addChild(tf);

            spanishGreeterLoader = new ClassLoader();
            spanishGreeterLoader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            spanishGreeterLoader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            spanishGreeterLoader.load("es/Greeter.swf");
            
            englishGreeterLoader = new ClassLoader();
            englishGreeterLoader.addEventListener(ClassLoader.LOAD_ERROR,loadErrorHandler);
            englishGreeterLoader.addEventListener(ClassLoader.CLASS_LOADED,classLoadedHandler);
            englishGreeterLoader.load("en/Greeter.swf");
        }

        private function loadErrorHandler(e:Event):void {
            tf.text = "Load failed";
            throw new IllegalOperationError("Cannot load the specified file.");
        }

        private function classLoadedHandler(e:Event):void {
            greetersLoaded++;
            if(greetersLoaded == 2) {
                greet();    
            }
        }
        
        private function greet():void {
            var spanishGreeter:Class = spanishGreeterLoader.getClass("Greeter");
            var englishGreeter:Class = englishGreeterLoader.getClass("Greeter");
            var greeter1 = new spanishGreeter();
            var greeter2 = new englishGreeter();
            
            tf.text = greeter1.greet() + "\n" + greeter2.greet();
        }
    }
}

import flash.display.Loader;
import flash.errors.IllegalOperationError;
import flash.events.Event;
import flash.events.EventDispatcher;
import flash.events.IOErrorEvent;
import flash.events.SecurityErrorEvent;
import flash.net.URLRequest;
import flash.system.ApplicationDomain;
import flash.system.LoaderContext;

class ClassLoader extends EventDispatcher {
    public static var CLASS_LOADED:String = "classLoaded";
    public static var LOAD_ERROR:String = "loadError";
    private var loader:Loader;
    private var swfLib:String;
    private var request:URLRequest;
    private var loadedClass:Class;

    public function ClassLoader() {

        loader = new Loader();
        loader.contentLoaderInfo.addEventListener(Event.COMPLETE,completeHandler);
        loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,ioErrorHandler);
        loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR,securityErrorHandler);
    }

    public function load(lib:String):void {
        swfLib = lib;
        request = new URLRequest(swfLib);
        var context:LoaderContext = new LoaderContext();
//        context.applicationDomain = ApplicationDomain.currentDomain;
        context.applicationDomain = new ApplicationDomain();
        loader.load(request,context);
    }

    public function getClass(className:String):Class {
        try {
            return loader.contentLoaderInfo.applicationDomain.getDefinition(className)  as  Class;
        } catch (e:Error) {
            throw new IllegalOperationError(className + " definition not found in " + swfLib);
        }
        return null;
    }

    private function completeHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.CLASS_LOADED));
    }

    private function ioErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }

    private function securityErrorHandler(e:Event):void {
        dispatchEvent(new Event(ClassLoader.LOAD_ERROR));
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.display.xml#LoaderInfo"><linktext>flash.display.LoaderInfo</linktext></link><link href="flash.net.xml#URLRequest"><linktext>flash.net.URLRequest</linktext></link><link href="flash.system.xml#LoaderContext"><linktext>flash.system.LoaderContext</linktext></link></related-links><apiConstructor id="flash.system:ApplicationDomain:ApplicationDomain"><apiName>ApplicationDomain</apiName><shortdesc>
     Erstellt eine neue Anwendungsdomäne.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>parentDomain</apiItemName><apiOperationClassifier>flash.system:ApplicationDomain</apiOperationClassifier><apiData>null</apiData><apiDesc>Wenn keine übergeordnete Domäne übergeben wird, wird dieser Anwendungsdomäne die Systemdomäne als übergeordnete Domäne zugeordnet.
     
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Erstellt eine neue Anwendungsdomäne.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.system:ApplicationDomain:getDefinition"><apiName>getDefinition</apiName><shortdesc>
     Ruft eine öffentliche Definition von der angegebenen Anwendungsdomäne ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>throws SecurityError The definition belongs to a domain to which
     the calling code does not have access.
     
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Es ist keine öffentliche Definition mit dem angegebenen Namen vorhanden.
     
     </apiDesc><apiItemName>ReferenceError</apiItemName><apiOperationClassifier>ReferenceError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das mit der Definition verknüpfte Objekt.
     
     </apiDesc><apiOperationClassifier>Object</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Name der Definition.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Ruft eine öffentliche Definition von der angegebenen Anwendungsdomäne ab. Dabei kann es sich um die Definition einer Klasse, eines Namespace oder einer Funktion handeln.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:ApplicationDomain:hasDefinition"><apiName>hasDefinition</apiName><shortdesc>
     Überprüft, ob in der angegebenen Anwendungsdomäne eine öffentliche Definition vorhanden ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Wert <codeph>true</codeph>, wenn die angegebene Definition vorhanden ist, andernfalls <codeph>false</codeph>.
     
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Name der Definition.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Überprüft, ob in der angegebenen Anwendungsdomäne eine öffentliche Definition vorhanden ist. Dabei kann es sich um die Definition einer Klasse, eines Namespace oder einer Funktion handeln.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.system:ApplicationDomain:MIN_DOMAIN_MEMORY_LENGTH:get"><apiName>MIN_DOMAIN_MEMORY_LENGTH</apiName><shortdesc>
	 Ruft die erforderliche Mindestlänge des Speicherobjekts ab, das als ApplicationDomain.domainMemory verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier><apiTipTexts><apiTipText>
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Ruft die erforderliche Mindestlänge des Speicherobjekts ab, das als ApplicationDomain.domainMemory verwendet wird.
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:currentDomain:get"><apiName>currentDomain</apiName><shortdesc>
     Ruft die aktuelle Anwendungsdomäne ab, in der der Code ausgeführt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>Question: Do you call System.currentDomain? or Loader.currentDomain or request.currentDomain?
     
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.system:ApplicationDomain</apiValueClassifier></apiValueDef><apiDesc>
     Ruft die aktuelle Anwendungsdomäne ab, in der der Code ausgeführt wird.
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:domainMemory:get"><apiName>domainMemory</apiName><shortdesc>
	 Ruft das Objekt ab und stellt es ein, für welches Cross-Domain-Speichervorgänge innerhalb dieser ApplicationDomain stattfinden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier><apiTipTexts><apiTipText>
     </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Ruft das Objekt ab und stellt es ein, für welches Cross-Domain-Speichervorgänge innerhalb dieser ApplicationDomain stattfinden.
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:ApplicationDomain:parentDomain:get"><apiName>parentDomain</apiName><shortdesc>
     Ruft die übergeordnete Domäne der Anwendungsdomäne ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.system:ApplicationDomain</apiValueClassifier></apiValueDef><apiDesc>
     Ruft die übergeordnete Domäne der Anwendungsdomäne ab.
     
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.system:Capabilities"><apiName>Capabilities</apiName><shortdesc>
 Die Capabilities-Klasse enthält Eigenschaften, die das System und den Player einer SWF-Datei beschreiben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities object, built-in class
  
  </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 <ph platform="actionscript">Die Capabilities-Klasse enthält Eigenschaften, die das System und den Player einer SWF-Datei beschreiben. Zum Beispiel hat das Display eines Mobiltelefons möglicherweise eine Größe von 100 Quadratpixel und ist schwarzweiß, während der Bildschirm eines Computers eine Größe von 1000 Quadratpixel hat und farbig ist. Über das Capabilities-Objekt können Sie den Gerätetyp eines Benutzers bestimmen und so den entsprechenden Inhalt für möglichst viele Benutzer bereitstellen. Wenn Sie den Funktionsumfang des Geräts kennen, können Sie festlegen, dass der Server die entsprechenden SWF-Dateien sendet oder dass die Darstellung der SWF-Datei geändert wird.</ph> <ph platform="javascript">Die Capabilities-Klasse enthält Eigenschaften, die das System und die Laufzeit von HTML- (und SWF-)Inhalt beschreiben. Über das Capabilities-Objekt können Sie den Computertyp eines Benutzers bestimmen und so den entsprechenden Inhalt für möglichst viele Benutzer bereitstellen. Wenn der Funktionsumfang (Capabilities) des Computers bekannt ist, können Sie entsprechende Inhalte laden oder die Präsentation mithilfe von Code ändern.</ph>
 
 <p>Einige Funktionen von Adobe AIR sind allerdings nicht als Eigenschaften in der Capabilities-Klasse aufgelistet. Sie sind Eigenschaften anderer Klassen:</p>
 
 <adobetable class="innertable">
 
 
 
 
 
 
 
 
 
 
 
 
 
 <tgroup cols="2"><thead><row><entry>Eigenschaft</entry><entry>Beschreibung</entry></row></thead><tbody><row>
 <entry><codeph>NativeApplication.supportsDockIcon</codeph></entry>
 <entry>Gibt an, ob das Betriebssystem Systemdocksymbole unterstützt.</entry>
 </row><row>
 <entry><codeph>NativeApplication.supportsMenu</codeph></entry>
 <entry>Gibt an, ob das Betriebssystem eine globale Anwendungsmenüleiste unterstützt.</entry>
 </row><row>
 <entry><codeph>NativeApplication.supportsSystemTrayIcon</codeph></entry>
 <entry>Gibt an, ob das Betriebssystem Taskleistensymbole unterstützt.</entry>
 </row><row>
 <entry><codeph>NativeWindow.supportsMenu</codeph></entry>
 <entry>Gibt an, ob das Betriebssystem Fenstermenüs unterstützt.</entry>
 </row><row>
 <entry><codeph>NativeWindow.supportsTransparency</codeph></entry>
 <entry>Gibt an, ob das Betriebssystem transparente Fenster unterstützt.</entry>
 </row></tbody></tgroup></adobetable>
 
 <p>Verwenden Sie <i>nicht</i> <codeph>Capabilities.os</codeph> bzw. <codeph>Capabilities.manufacturer</codeph>, um eine betriebssystemspezifische Funktionalität zu ermitteln. Die Funktionalität auf dem Betriebssystem basieren zu lassen, wird nicht empfohlen, da dies zu Problemen führt, wenn eine Anwendung nicht alle möglichen Zielbetriebssysteme berücksichtigt. Verwenden Sie stattdessen die Eigenschaft, die der von Ihnen zu testenden Funktionalität entspricht.</p>
 
 <p>Sie können Daten zum Funktionsumfang, die in der <codeph>Capabilities.serverString</codeph>-Eigenschaft als URL-kodierter String gespeichert sind, senden, und zwar mithilfe der HTTP-Methode <codeph>GET</codeph> oder <codeph>POST</codeph>. Im folgenden Beispiel ist ein Serverstring für einen Computer mit MP3-Unterstützung und einer Auflösung von 1600 x 1200 Pixel dargestellt, auf dem Windows XP ausgeführt und ein Eingabemethoden-Editor (IME) installiert ist.</p>
 
 <pre>A=t&amp;SA=t&amp;SV=t&amp;EV=t&amp;MP3=t&amp;AE=t&amp;VE=t&amp;ACC=f&amp;PR=t&amp;SP=t&amp;
     SB=f&amp;DEB=t&amp;V=WIN%209%2C0%2C0%2C0&amp;M=Adobe%20Windows&amp;
     R=1600x1200&amp;DP=72&amp;COL=color&amp;AR=1.0&amp;OS=Windows%20XP&amp;
     L=en&amp;PT=External&amp;AVD=f&amp;LFD=f&amp;WD=f&amp;IME=t</pre>
 
 <p>In der folgenden Tabelle sind die Eigenschaften der Capabilities-Klasse und die entsprechenden Serverstrings aufgeführt:
 <adobetable class="innertable">
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
   
  
  
  
  
  
  
  
  
 <tgroup cols="2"><thead><row><entry align="left">Eigenschaften der Capabilities-Klasse</entry><entry align="left">Serverstring</entry></row></thead><tbody><row>
      <entry><codeph>avHardwareDisable</codeph></entry>
      <entry><codeph>AVD</codeph></entry>
  </row><row>
      <entry><codeph>hasAccessibility</codeph></entry>
      <entry><codeph>ACC</codeph></entry>
  </row><row>
      <entry><codeph>hasAudio</codeph></entry>
      <entry><codeph>A</codeph></entry>
  </row><row>
      <entry><codeph>hasAudioEncoder</codeph></entry>
      <entry><codeph>AE</codeph></entry>
  </row><row>
      <entry><codeph>hasEmbeddedVideo</codeph></entry>
      <entry><codeph>EV</codeph></entry>
  </row><row>
      <entry><codeph>hasIME</codeph></entry>
      <entry><codeph>IME</codeph></entry>
  </row><row>
      <entry><codeph>hasMP3</codeph></entry>
      <entry><codeph>MP3</codeph></entry>
  </row><row>
      <entry><codeph>hasPrinting</codeph></entry>
      <entry><codeph>PR</codeph></entry>
  </row><row>
      <entry><codeph>hasScreenBroadcast</codeph></entry>
      <entry><codeph>SB</codeph></entry>
  </row><row>
      <entry><codeph>hasScreenPlayback</codeph></entry>
      <entry><codeph>SP</codeph></entry>
  </row><row>
      <entry><codeph>hasStreamingAudio</codeph></entry>
      <entry><codeph>SA</codeph></entry>
  </row><row>
      <entry><codeph>hasStreamingVideo</codeph></entry>
      <entry><codeph>SV</codeph></entry>
  </row><row>
      <entry><codeph>hasTLS</codeph></entry>
      <entry><codeph>TLS</codeph></entry>
  </row><row>
      <entry><codeph>hasVideoEncoder</codeph></entry>
      <entry><codeph>VE</codeph></entry>
  </row><row>
      <entry><codeph>isDebugger</codeph></entry>
      <entry><codeph>DEB</codeph></entry>
  </row><row>
      <entry><codeph>language</codeph></entry>
      <entry><codeph>L</codeph></entry>
  </row><row>
      <entry><codeph>localFileReadDisable</codeph></entry>
      <entry><codeph>LFD</codeph></entry>
  </row><row>
      <entry><codeph>manufacturer</codeph></entry>
      <entry><codeph>M</codeph></entry>
  </row><row>
      <entry><codeph>maxLevelIDC</codeph></entry>
      <entry><codeph>ML</codeph></entry>
  </row><row>
      <entry><codeph>os</codeph></entry>
      <entry><codeph>OS</codeph></entry>
  </row><row>
      <entry><codeph>pixelAspectRatio</codeph></entry>
      <entry><codeph>AR</codeph></entry>
  </row><row>
      <entry><codeph>playerType</codeph></entry>
      <entry><codeph>PT</codeph></entry>
  </row><row>
      <entry><codeph>screenColor</codeph></entry>
      <entry><codeph>COL</codeph></entry>
  </row><row>
      <entry><codeph>screenDPI</codeph></entry>
      <entry><codeph>DP</codeph></entry>
  </row><row>
      <entry><codeph>screenResolutionX</codeph></entry>
      <entry><codeph>R</codeph></entry>
  </row><row>
      <entry><codeph>screenResolutionY</codeph></entry>
      <entry><codeph>R</codeph></entry>
  </row><row>
      <entry><codeph>version</codeph></entry>
      <entry><codeph>V</codeph></entry>
  </row></tbody></tgroup></adobetable>
 </p>
  
 <p>Es gibt auch einen <codeph>WD</codeph>-Serverstring, der festlegt, ob der fensterlose Modus deaktiviert ist. Der fensterlose Modus kann in Flash Player aufgrund einer Inkompatibilität mit dem Webbrowser oder einer Benutzereinstellung in der Datei mms.cfg deaktiviert werden. Es gibt keine entsprechende Capabilities-Eigenschaft.</p>
  
 <p>Alle Eigenschaften der Capabilities-Klasse sind schreibgeschützt.</p>
 
 </apiDesc><example conref="examples\CapabilitiesExample.as"> Im folgenden Beispiel wird einfach der im flash.system.Capabilities-Objekt gefundene Wert mit mehreren Aufrufen von <codeph>trace()</codeph> ausgegeben.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.system.Capabilities;

    public class CapabilitiesExample extends Sprite {
        public function CapabilitiesExample() {
            showCapabilities();
        }
        
        private function showCapabilities():void {
            trace("avHardwareDisable: " + Capabilities.avHardwareDisable);
            trace("hasAccessibility: " + Capabilities.hasAccessibility);
            trace("hasAudio: " + Capabilities.hasAudio);
            trace("hasAudioEncoder: " + Capabilities.hasAudioEncoder);
            trace("hasEmbeddedVideo: " + Capabilities.hasEmbeddedVideo);
            trace("hasMP3: " + Capabilities.hasMP3);
            trace("hasPrinting: " + Capabilities.hasPrinting);
            trace("hasScreenBroadcast: " + Capabilities.hasScreenBroadcast);
            trace("hasScreenPlayback: " + Capabilities.hasScreenPlayback);
            trace("hasStreamingAudio: " + Capabilities.hasStreamingAudio);
            trace("hasVideoEncoder: " + Capabilities.hasVideoEncoder);
            trace("isDebugger: " + Capabilities.isDebugger);
            trace("language: " + Capabilities.language);
            trace("localFileReadDisable: " + Capabilities.localFileReadDisable);
            trace("manufacturer: " + Capabilities.manufacturer);
            trace("os: " + Capabilities.os);
            trace("pixelAspectRatio: " + Capabilities.pixelAspectRatio);
            trace("playerType: " + Capabilities.playerType);
            trace("screenColor: " + Capabilities.screenColor);
            trace("screenDPI: " + Capabilities.screenDPI);
            trace("screenResolutionX: " + Capabilities.screenResolutionX);
            trace("screenResolutionY: " + Capabilities.screenResolutionY);
            trace("serverString: " + Capabilities.serverString);
            trace("version: " + Capabilities.version);
        }
    }
}
</codeblock></example></apiClassifierDetail><apiValue id="flash.system:Capabilities:avHardwareDisable:get"><apiName>avHardwareDisable</apiName><shortdesc>
     Gibt an, ob der Zugriff auf die Kamera und das Mikrofon eines Benutzers vom Administrator untersagt (true) oder zugelassen (false) wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.avHardwareDisable, avHardwareDisable
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob der Zugriff auf die Kamera und das Mikrofon eines Benutzers vom Administrator untersagt (<codeph>true</codeph>) oder zugelassen (<codeph>false</codeph>) wurde. Der Serverstring ist <codeph>AVD</codeph>.
     
	 <p>Für Inhalt in Adobe AIR™ gilt diese Eigenschaft nur für Inhalt in Sicherheitssandboxen, bei denen es sich nicht um die Sicherheitssandbox der Anwendung handelt. Inhalt in der Sicherheitssandbox der Anwendung kann immer auf die Kamera und das Mikrofon des Benutzers zugreifen.</p>
 	 
     </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/getCamera()"><linktext>flash.media.Camera.getCamera()</linktext></link><link href="flash.media.xml#Microphone/getMicrophone()"><linktext>flash.media.Microphone.getMicrophone()</linktext></link><link href="flash.system.xml#Security/showSettings()"><linktext>Security.showSettings()</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:cpuArchitecture:get"><apiName>cpuArchitecture</apiName><shortdesc>
	 Legt die aktuelle CPU-Architektur auf dem Gerät fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5.1"/></apiVersion></asMetadata><asCustoms><oldexample>The following example traces the value of this read-only property:
	 <pre>
	 trace(Capabilities.cpuArchitecture);
	 </pre>
	 </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Legt die aktuelle CPU-Architektur auf dem Gerät fest. Die <codeph>cpuArchitecture</codeph>-Eigenschaft kann die folgenden Strings zurückgeben: "<codeph>PowerPC</codeph>", "<codeph>x86</codeph>", "<codeph>SPARC</codeph>" und "<codeph>ARM</codeph>". Der Serverstring ist <codeph>ARCH</codeph>.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasAccessibility:get"><apiName>hasAccessibility</apiName><shortdesc>
	 Gibt an, ob das System die Kommunikation über Eingabehilfen zur Barrierefreiheit unterstützt (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasAccessibility, hasAccessibility,
     accessibility
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System die Kommunikation über Eingabehilfen zur Barrierefreiheit unterstützt (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>). Der Serverstring ist <codeph>ACC</codeph>. 
     
     </apiDesc></apiValueDetail><related-links><link href="flash.accessibility.xml#Accessibility/active"><linktext>flash.accessibility.Accessibility.active</linktext></link><link href="flash.accessibility.xml#Accessibility/updateProperties()"><linktext>flash.accessibility.Accessibility.updateProperties()</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasAudio:get"><apiName>hasAudio</apiName><shortdesc>
	 Gibt an, ob das System über Audiofunktionen verfügt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasAudio, hasAudio
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System über Audiofunktionen verfügt. Diese Eigenschaft ist immer auf <codeph>true</codeph> gesetzt. Der Serverstring ist <codeph>A</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasAudioEncoder:get"><apiName>hasAudioEncoder</apiName><shortdesc>
	 Gibt an, ob das System einen Audiostream, der beispielsweise von einem Mikrofon stammt, kodieren kann (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasAudioEncoder, hasAudioEncoder 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System einen Audiostream, der beispielsweise von einem Mikrofon stammt, kodieren kann (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>). Der Serverstring ist <codeph>AE</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasEmbeddedVideo:get"><apiName>hasEmbeddedVideo</apiName><shortdesc>
	 Gibt an, ob das System eingebettetes Video unterstützt (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasEmbeddedVideo, hasEmbeddedVideo, video
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System eingebettetes Video unterstützt (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>). Der Serverstring ist <codeph>EV</codeph>. 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasIME:get"><apiName>hasIME</apiName><shortdesc>
	 Gibt an, ob auf dem System ein Eingabemethoden-Editor (IME) installiert ist (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasIME, hasIME, IME 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob auf dem System ein Eingabemethoden-Editor (IME) installiert ist (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>). Der Serverstring ist <codeph>IME</codeph>. 
     
     </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.system.xml#System/ime"><linktext>flash.system.System.ime</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasMP3:get"><apiName>hasMP3</apiName><shortdesc>
	 Gibt an, ob das System über einen MP3-Decoder verfügt (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasMP3, hasMP3, MP3, audio
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System über einen MP3-Decoder verfügt (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>). Der Serverstring ist <codeph>MP3</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasPrinting:get"><apiName>hasPrinting</apiName><shortdesc>
	 Gibt an, ob das System das Drucken unterstützt (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasPrinting, hasPrinting, printing 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System das Drucken unterstützt (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>). Der Serverstring ist <codeph>PR</codeph>. 
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasScreenBroadcast:get"><apiName>hasScreenBroadcast</apiName><shortdesc>
	 Gibt an, ob das System die Entwicklung von Bildschirm-Broadcast-Anwendungen, die über Flash Media Server ausgeführt werden sollen, unterstützt (true) oder nicht unterstützt (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasScreenBroadcast, hasScreenBroadcast
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System die Entwicklung von Bildschirm-Broadcast-Anwendungen, die über Flash Media Server ausgeführt werden sollen, unterstützt (<codeph>true</codeph>) oder nicht unterstützt (<codeph>false</codeph>). Der Serverstring ist <codeph>SB</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasScreenPlayback:get"><apiName>hasScreenPlayback</apiName><shortdesc>
	 Gibt an, ob das System die Wiedergabe von Bildschirm-Broadcast-Anwendungen unterstützt (true) oder nicht unterstützt (false), die über Flash Media Server ausgeführt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasScreenPlayback, hasScreenPlayback
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System die Wiedergabe von Bildschirm-Broadcast-Anwendungen unterstützt (<codeph>true</codeph>) oder nicht unterstützt (<codeph>false</codeph>), die über Flash Media Server ausgeführt werden. Der Serverstring ist <codeph>SP</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasStreamingAudio:get"><apiName>hasStreamingAudio</apiName><shortdesc>
	 Gibt an, ob das System Streamingsound wiedergeben kann (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasStreamingAudio, hasStreamingAudio, audio
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System Streamingsound wiedergeben kann (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>). Der Serverstring ist <codeph>SA</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasStreamingVideo:get"><apiName>hasStreamingVideo</apiName><shortdesc>
	 Gibt an, ob das System Streaming-Video wiedergeben kann (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasStreamingVideo, hasStreamingVideo, video
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System Streaming-Video wiedergeben kann (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>). Der Serverstring ist <codeph>SV</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:hasTLS:get"><apiName>hasTLS</apiName><shortdesc>
	 Gibt an, ob das System native SSL-Sockets über NetConnection unterstützt werden (true) oder nicht (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasTLS, hasTLS, TLS 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System native SSL-Sockets über NetConnection unterstützt werden (<codeph>true</codeph>) oder nicht (<codeph>false</codeph>). Der Serverstring ist <codeph>TLS</codeph>.
     
     </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection/connectedProxyType"><linktext>flash.net.NetConnection.connectedProxyType</linktext></link><link href="flash.net.xml#NetConnection/proxyType"><linktext>flash.net.NetConnection.proxyType</linktext></link><link href="flash.net.xml#NetConnection/usingTLS"><linktext>flash.net.NetConnection.usingTLS</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:hasVideoEncoder:get"><apiName>hasVideoEncoder</apiName><shortdesc>
	 Gibt an, ob das System einen Videostream, der beispielsweise von einer Webkamera stammt, kodieren (true) oder nicht kodieren (false) kann.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.hasVideoEncoder, hasVideoEncoder
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob das System einen Videostream, der beispielsweise von einer Webkamera stammt, kodieren (<codeph>true</codeph>) oder nicht kodieren (<codeph>false</codeph>) kann. Der Serverstring ist <codeph>VE</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:isDebugger:get"><apiName>isDebugger</apiName><shortdesc> 
	 Gibt an, ob es sich bei dem System um eine spezielle Debugging-Version (true) oder um eine offiziell freigegebene Version (false) handelt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.isDebugger, isDebugger, debugging 
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc> 
	 Gibt an, ob es sich bei dem System um eine spezielle Debugging-Version (<codeph>true</codeph>) oder um eine offiziell freigegebene Version (<codeph>false</codeph>) handelt. Der Serverstring ist <codeph>DEB</codeph>. Diese Eigenschaft ist mit <codeph>true</codeph> belegt, wenn die Ausführung <ph platform="actionscript">in der Debug-Version des Flash Player oder</ph> im AIR Debug Launcher (ADL) erfolgt.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:isEmbeddedInAcrobat:get"><apiName>isEmbeddedInAcrobat</apiName><shortdesc>
     Gibt an, ob der Player in einer PDF-Datei eingebettet ist, die in Acrobat 9.0 oder höher geöffnet (true) bzw. nicht geöffnet (false) ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.127.0"/><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.isEmbeddedInAcrobat, isEmbeddedInAcrobat, Acrobat
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob der Player in einer PDF-Datei eingebettet ist, die in Acrobat 9.0 oder höher geöffnet (<codeph>true</codeph>) bzw. nicht geöffnet (<codeph>false</codeph>) ist.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:language:get"><apiName>language</apiName><shortdesc>
	 Gibt den Sprachcode des Systems an, auf dem der Inhalt ausgeführt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.language, language
     
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt den Sprachcode des Systems an, auf dem der Inhalt ausgeführt wird. Die Sprache wird als ein aus zwei Kleinbuchstaben bestehender Sprachcode nach ISO 639-1 angegeben. Bei Chinesisch unterscheidet ein zusätzlicher aus zwei Großbuchstaben bestehender Ländercode nach ISO 3166 zwischen vereinfachtem und traditionellem Chinesisch. Die Sprachcodes beruhen auf der englischen Bezeichnung der jeweiligen Sprache: mit <codeph>hu</codeph> wird beispielsweise Ungarisch (englisch: Hungarian) angegeben.
     
     <p>In englischen Systemen gibt diese Eigenschaft nur den Sprachcode (<codeph>en</codeph>), nicht jedoch den Ländercode zurück. In Microsoft Windows-Systemen gibt diese Eigenschaft die in der Benutzeroberfläche bei allen Menüs, Dialogfeldern, Fehlermeldungen und Hilfedateien verwendete Sprache zurück. Folgende Werte sind möglich:
     
     <adobetable class="innertable">
     
     
     
     
     
         
         
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     <tgroup cols="2"><thead><row><entry align="left">Sprache</entry><entry align="left">Wert</entry></row></thead><tbody><row>
      <entry>Tschechisch</entry>
      <entry><codeph>cs</codeph></entry>
     </row><row>
      <entry>Dänisch</entry>
      <entry><codeph>da</codeph></entry>
     </row><row>
      <entry>Niederländisch</entry>
      <entry><codeph>nl</codeph></entry>
     </row><row>
      <entry>Englisch</entry>
      <entry><codeph>de</codeph></entry>
     </row><row>
      <entry>Finnisch</entry>
      <entry><codeph>fi</codeph></entry>
     </row><row>
      <entry>Französisch</entry>
      <entry><codeph>fr</codeph></entry>
     </row><row>
      <entry>Deutsch</entry>
      <entry><codeph>de</codeph></entry>
     </row><row>
      <entry>Ungarisch</entry>
      <entry><codeph>hu</codeph></entry>
     </row><row>
      <entry>Italienisch</entry>
      <entry><codeph>it</codeph></entry>
     </row><row>
      <entry>Japanisch</entry>
      <entry><codeph>ja</codeph></entry>
     </row><row>
      <entry>Koreanisch</entry>
      <entry><codeph>ko</codeph></entry>
     </row><row>
      <entry>Norwegisch</entry>
      <entry><codeph>no</codeph></entry>
     </row><row>
      <entry>Andere/unbekannt</entry>
      <entry><codeph>xu</codeph></entry>
     </row><row>
      <entry>Polnisch</entry>
      <entry><codeph>pl</codeph></entry>
     </row><row>
      <entry>Portugiesisch</entry>
      <entry><codeph>pt</codeph></entry>
     </row><row>
      <entry>Russisch</entry>
      <entry><codeph>ru</codeph></entry>
     </row><row>
      <entry>Chinesisch (VRC)</entry>
      <entry><codeph>zh-CN</codeph></entry>
     </row><row>
      <entry>Spanisch</entry>
      <entry><codeph>es</codeph></entry>
     </row><row>
      <entry>Schwedisch</entry>
      <entry><codeph>sv</codeph></entry>
     </row><row>
      <entry>Chinesisch (Taiwan)</entry>
      <entry><codeph>zh-TW</codeph></entry>
     </row><row>
      <entry>Türkisch</entry>
      <entry><codeph>tr</codeph></entry>
     </row></tbody></tgroup></adobetable>
     </p>
	 
	 <p><i>Hinweis:</i> Als Wert für die <codeph>Capabilities.language</codeph>-Eigenschaft sind nur Werte aus dieser Liste erlaubt. Aufgrund dieser Einschränkung sollten Adobe AIR-Anwendungen das erste Element im <codeph>Capabilities.languages</codeph>-Array verwenden, um die primäre Benutzeroberflächensprache für das System zu ermitteln. </p>
	 
     <p>Der Serverstring ist <codeph>L</codeph>.</p>
     
     </apiDesc><example conref="examples\Capabilities_languageExample.as"> Im folgenden Beispiel ist der angezeigte Inhalt von der Sprache des Betriebssystems auf dem Computer des Benutzers abhängig.
 
 <p>Die Eigenschaft <codeph>Capabilities.language</codeph> gibt den Sprachcode gemäß ISO 639-1 zurück (zum Beispiel „en“ für Englisch). Die Anweisung <codeph>switch</codeph> überprüft den Sprachcode und legt den Inhalt des Textfelds <codeph>myTextField</codeph> auf eine Begrüßung in der entsprechenden Sprache fest. Wenn der Sprachcode nicht unterstützt wird, wird ein Standardfehlerstring zurückgegeben.</p>
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.system.Capabilities;

    public class Capabilities_languageExample extends Sprite {

        public function Capabilities_languageExample()  {
            var myTextField:TextField = new TextField();         
            myTextField.x = 10;
            myTextField.y = 10;
            myTextField.background = true;
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            
            var greetingEnglish:String = "Hello World";
            var greetingGerman:String = "Hallo Welt";
            var greetingFrench:String = "Bonjour Monde";
            var greetingSpanish:String = "Hola Mundo";

            var lang:String = Capabilities.language;
                         
            switch (lang) {
                case "en":
                    myTextField.text = greetingEnglish;
                    break;
                case "de":
                    myTextField.text = greetingGerman;
                    break;
                case "fr":
                    myTextField.text = greetingFrench;
                    break;
                case "es":
                    myTextField.text = greetingSpanish;
                    break;
                default:
                    myTextField.text = "Sorry your system's language is not supported at this time.";               
            }
             
            this.addChild(myTextField);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.system.xml#Capabilities/languages"><linktext>languages</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:languages:get"><apiName>languages</apiName><shortdesc>
	 Ein Array mit Strings, die Informationen über die im Betriebssystem festgesetzten bevorzugten Sprachen des Benutzers für Benutzeroberflächen enthalten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 Ein Array mit Strings, die Informationen über die im Betriebssystem festgesetzten bevorzugten Sprachen des Benutzers für Benutzeroberflächen enthalten. Die Strings enthalten Sprachtags (und Skript- und regionale Informationen, sofern zutreffend), die in RFC4646 (<xref href="http://www.ietf.org/rfc/rfc4646.txt" scope="external">http://www.ietf.org/rfc/rfc4646.txt</xref>) definiert sind, und verwenden Bindestriche als Trennzeichen (z. B. <codeph>"en-US"</codeph> oder <codeph>"ja-JP"</codeph>). Sprachen werden im Array in der bevorzugten Reihenfolge aufgelistet, die von den Betriebssystemeinstellungen bestimmt wird. 
	 
	 <p>Je nach Betriebssystem werden von den Gebietsschemastrings unterschiedliche regionale Informationen zurückgegeben. Ein Betriebssystem könnte z. B. <codeph>"en-us"</codeph> zurückgeben, während ein anderes <codeph>"en"</codeph> zurückgeben könnte.</p>
	 
	 <p>Der erste Eintrag im zurückgegebenen Array hat im Allgemeinen die gleiche primäre Sprach-ID wie die <codeph>Capabilities.language</codeph>-Eigenschaft. Wenn <codeph>Capabilities.languages[0]</codeph> z. B. auf <codeph>"en-US"</codeph> gesetzt ist, dann ist die <codeph>language</codeph>-Eigenschaft auf <codeph>"en"</codeph> gesetzt. Wenn aber die <codeph>Capabilities.language</codeph>-Eigenschaft auf <codeph>"xu"</codeph> (eine unbekannte Sprache) gesetzt ist, ist das erste Element in diesem Array anders. Aus diesem Grund kann <codeph>Capabilities.languages[0]</codeph> genauer als <codeph>Capabilities.language</codeph> sein.</p>
	 
	 <p>Der Serverstring ist <codeph>LS</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:localFileReadDisable:get"><apiName>localFileReadDisable</apiName><shortdesc>
     Gibt an, ob der Lesezugriff auf die Festplatte des Benutzers vom Administrator verweigert (true) oder zugelassen (false) wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.localFileReadDisable, localFileReadDisable
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob der Lesezugriff auf die Festplatte des Benutzers vom Administrator verweigert (<codeph>true</codeph>) oder zugelassen (<codeph>false</codeph>) wurde. Für Inhalt in Adobe AIR gilt diese Eigenschaft nur für Inhalt in Sicherheitssandboxen, bei denen es sich nicht um die Sicherheitssandbox der Anwendung handelt. (Inhalt in der Sicherheitssandbox der Anwendung kann vom Dateisystem immer gelesen werden.) <ph platform="actionscript">Wenn diese Eigenschaft auf <codeph>true</codeph> gesetzt ist, kann Flash Player keine Dateien (einschließlich der ersten Datei, mit der Flash Player gestartet wird) auf der Festplatte des Benutzers lesen.</ph> Wenn diese Eigenschaft auf <codeph>true</codeph> gesetzt ist, kann AIR-Inhalt außerhalb der Sicherheitssandbox der Anwendung keine Dateien von der Festplatte des Benutzers lesen. So schlagen beispielsweise Versuche fehl, eine Datei auf der Festplatte des Benutzers mit Lademethoden zu lesen, wenn diese Eigenschaft auf <codeph>true</codeph> gesetzt ist.
	 
	 <p platform="actionscript">Darüber hinaus sind auch freigegebene Laufzeitbibliotheken gesperrt, wenn diese Eigenschaft auf <codeph>true</codeph> gesetzt ist. Das Lesen freigegebener lokaler Objekte ist jedoch unabhängig vom Wert dieser Eigenschaft möglich.</p>
	 
	 <p>Der Serverstring ist <codeph>LFD</codeph>.</p>
     
     
     </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader"><linktext>flash.display.Loader</linktext></link></related-links></apiValue><apiValue id="flash.system:Capabilities:manufacturer:get"><apiName>manufacturer</apiName><shortdesc>
	 Gibt den Hersteller der ausgeführten Version des Flash Player oder der AIR-Laufzeitumgebung im Format „Adobe Betriebssystemname“ an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.manufacturer, manufacturer
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt den Hersteller der <ph platform="actionscript">ausgeführten Version des Flash Player oder der </ph>AIR-Laufzeitumgebung im Format <codeph>„Adobe</codeph> <codeph><i>Betriebssystemname</i>“</codeph> an. Der Wert für <codeph><i>OSName</i></codeph> kann <codeph>"Windows"</codeph>, <codeph>"Macintosh"</codeph>, <codeph>"Linux"</codeph> oder der Name eines anderen Betriebssystems sein. Der Serverstring ist <codeph>M</codeph>.
     
	 <p>Verwenden Sie <i>nicht</i> <codeph>Capabilities.manufacturer</codeph>, um eine betriebssystemspezifische Funktionalität zu ermitteln, wenn es eine spezifischere Funktionalitätseigenschaft gibt. Die Funktionalität auf dem Betriebssystem basieren zu lassen, wird nicht empfohlen, da dies zu Problemen führt, wenn eine Anwendung nicht alle möglichen Zielbetriebssysteme berücksichtigt. Verwenden Sie stattdessen die Eigenschaft, die der von Ihnen zu testenden Funktionalität entspricht. Weitere Informationen finden Sie in der Beschreibung der Capabilities-Klasse.</p>
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:maxLevelIDC:get"><apiName>maxLevelIDC</apiName><shortdesc>
     Ruft die höchste H.264 Level IDC ab, die von der Hardware des Clients unterstützt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.maxLevelIDC, maxLevelIDC
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Ruft die höchste H.264 Level IDC ab, die von der Hardware des Clients unterstützt wird. Medien, die auf dieser Stufe ausgeführt werden, können garantiert ausgeführt werden, während Medien, die auf der höchsten Stufe ausgeführt werden, u. U. nicht mit der höchsten Qualität ausgeführt werden. Diese Eigenschaft ist für Server nützlich, die versuchen, die Funktionalität eines Clients zu emulieren. Mit dieser Eigenschaft kann ein Server die Grafikqualität ermitteln, die an den Client gesendet werden kann.
     
     <p>Der Serverstring ist <codeph>ML</codeph>.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:os:get"><apiName>os</apiName><shortdesc>
     Gibt das aktuelle Betriebssystem an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.os, os
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Gibt das aktuelle Betriebssystem an. Die <codeph>os</codeph>-Eigenschaft kann die folgenden Strings zurückgeben: "<codeph>Windows XP</codeph>", "<codeph>Windows 2000</codeph>", "<codeph>Windows NT</codeph>", "<codeph>Windows 98/ME</codeph>", "<codeph>Windows 95</codeph>", "<codeph>Windows CE</codeph>" (nur im Flash Player SDK, nicht in der Desktopversion verfügbar), <codeph>"Linux"</codeph> und <codeph>"Mac OS X.Y.Z"</codeph> (X.Y.Z steht für die Versionsnummer, z. B. <codeph>Mac OS 10.5.2</codeph>). Der Serverstring ist <codeph>OS</codeph>.
     
	 <p>Verwenden Sie <i>nicht</i> <codeph>Capabilities.os</codeph>, um eine betriebssystemspezifische Funktionalität zu ermitteln, wenn es eine spezifischere Funktionalitätseigenschaft gibt. Die Funktionalität auf dem Betriebssystem basieren zu lassen, wird nicht empfohlen, da dies zu Problemen führt, wenn eine Anwendung nicht alle möglichen Zielbetriebssysteme berücksichtigt. Verwenden Sie stattdessen die Eigenschaft, die der von Ihnen zu testenden Funktionalität entspricht. Weitere Informationen finden Sie in der Beschreibung der Capabilities-Klasse.</p>
	 
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:pixelAspectRatio:get"><apiName>pixelAspectRatio</apiName><shortdesc> 
     Gibt das Pixelseitenverhältnis des Bildschirms an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.pixelAspectRatio, pixelAspectRatio
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc> 
     Gibt das Pixelseitenverhältnis des Bildschirms an. Der Serverstring ist <codeph>AR</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:playerType:get"><apiName>playerType</apiName><shortdesc>
	 Gibt den Typ der Laufzeitumgebung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.playerType, playerType
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt den Typ der Laufzeitumgebung an. Diese Eigenschaft weist einen der folgenden Werte auf:
	 
     <ul>
	   <li><codeph>„ActiveX“</codeph> für das in Microsoft Internet Explorer verwendete Flash Player-ActiveX-Steuerelement</li>
	   <li><codeph>„Desktop“</codeph> für die Adobe AIR-Laufzeitumgebung (mit Ausnahme von SWF-Inhalten, die von einer HTML-Seite geladen werden, wobei <codeph>Capabilities.playerType</codeph> auf <codeph>„PlugIn“</codeph> gesetzt ist)</li>
	   <li><codeph>"External"</codeph><ph outputclass="flashonly"> für den externen Flash Player oder im Testmodus</ph></li>
	   <li><codeph>"PlugIn"</codeph> für das Flash Player-Browser-Zusatzmodul (und für SWF-Inhalte, die von einer HTML-Seite in einer AIR-Anwendung geladen werden)</li>
       <li><codeph>"StandAlone"</codeph> für den eigenständigen Flash Player</li>
     </ul>
     <p>Der Serverstring ist <codeph>PT</codeph>.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenColor:get"><apiName>screenColor</apiName><shortdesc>
     Gibt die Bildschirmfarbe an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.screenColor, screenColor
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Gibt die Bildschirmfarbe an. Dieser Eigenschaft können die Werte <codeph>"color"</codeph>, <codeph>"gray"</codeph> (Graustufen) oder <codeph>"bw"</codeph> (schwarzweiß) zugeordnet werden. Der Serverstring ist <codeph>COL</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenDPI:get"><apiName>screenDPI</apiName><shortdesc>
     Gibt den dpi-Wert der Bildschirmauflösung in Pixeln an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.screenDPI, screenDPI
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     Gibt den dpi-Wert der Bildschirmauflösung in Pixeln an. Der Serverstring ist <codeph>DP</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenResolutionX:get"><apiName>screenResolutionX</apiName><shortdesc>
     Gibt die maximale horizontale Auflösung des Bildschirms an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.screenResolutionX, screenResolutionY
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     Gibt die maximale horizontale Auflösung des Bildschirms an. Der Serverstring ist <codeph>R</codeph> (und gibt die Breite und Höhe des Bildschirms zurück). Diese Eigenschaft wird nicht mit der Bildschirmauflösung des Benutzers aktualisiert und gibt stattdessen lediglich an, welche Auflösung beim Starten einer <ph platform="actionscript">Flash Player- oder </ph> Adobe AIR-Anwendung verwendet wurde. Außerdem gibt der Wert nur die Auflösung des Hauptmonitors an.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:screenResolutionY:get"><apiName>screenResolutionY</apiName><shortdesc> 
     Gibt die maximale vertikale Auflösung des Bildschirms an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.screenResolutionY, screenResolutionY
     </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc> 
     Gibt die maximale vertikale Auflösung des Bildschirms an. Der Serverstring ist <codeph>R</codeph> (und gibt die Breite und Höhe des Bildschirms zurück). Diese Eigenschaft wird nicht mit der Bildschirmauflösung des Benutzers aktualisiert und gibt stattdessen lediglich an, welche Auflösung beim Starten einer <ph platform="actionscript">Flash Player- oder </ph> Adobe AIR-Anwendung verwendet wurde. Außerdem gibt der Wert nur die Auflösung des Hauptmonitors an.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:serverString:get"><apiName>serverString</apiName><shortdesc> 
     Ein URL-kodierter String, der die Werte für jede Capabilities-Eigenschaft angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.serverString, serverString
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
     Ein URL-kodierter String, der die Werte für jede Capabilities-Eigenschaft angibt.
	 
     <p>Im folgenden Beispiel ist ein URL-kodierter String dargestellt:
     <pre>A=t&amp;SA=t&amp;SV=t&amp;EV=t&amp;MP3=t&amp;AE=t&amp;VE=t&amp;ACC=f&amp;PR=t&amp;SP=t&amp;
     SB=f&amp;DEB=t&amp;V=WIN%208%2C5%2C0%2C208&amp;M=Adobe%20Windows&amp;
     R=1600x1200&amp;DP=72&amp;COL=color&amp;AR=1.0&amp;OS=Windows%20XP&amp;
     L=en&amp;PT=External&amp;AVD=f&amp;LFD=f&amp;WD=f</pre></p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:supports32BitProcesses:get"><apiName>supports32BitProcesses</apiName><shortdesc>
     Gibt an, ob das System das Ausführen von 32-Bit-Prozessen unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5.2"/></apiVersion></asMetadata><asCustoms><oldexample>The following example traces the value of this read-only property:
     <pre>
     trace(Capabilities.supports32BitProcesses);
     </pre>
     </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob das System die Ausführung von 32-Bit-Prozessen unterstützt. Der Serverstring ist <codeph>PR32</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:supports64BitProcesses:get"><apiName>supports64BitProcesses</apiName><shortdesc>
     Gibt an, ob das System die Ausführung von 64-Bit-Prozessen unterstützt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5.2"/></apiVersion></asMetadata><asCustoms><oldexample>The following example traces the value of this read-only property:
     <pre>
     trace(Capabilities.supports64BitProcesses);
     </pre>
     </oldexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob das System die Ausführung von 64-Bit-Prozessen unterstützt. Der Serverstring ist <codeph>PR64</codeph>.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:Capabilities:version:get"><apiName>version</apiName><shortdesc> 
	 Gibt die Flash Player- oder Adobe&amp;#xAE; AIR&amp;#xAE;-Plattform. sowie Versionsinformationen an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>Capabilities, Capabilities.version, version
	  
	  </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	 Gibt die Flash Player- oder Adobe<sup>®</sup> AIR<sup>®</sup>-Plattform sowie Versionsinformationen an. Das Format der Versionsnummer sieht folgendermaßen aus: <i>Plattform majorVersion, minorVersion, buildNumber, internalBuildNumber</i>. Mögliche Werte für <i>platform</i> sind <codeph>"WIN"</codeph>, ` <codeph>"MAC"</codeph> und <codeph>"LNX"</codeph>. Es folgen einige Beispiele für die Versionsangabe:
	 
     <pre>
     WIN 9,0,0,0  // Flash Player 9 for Windows
     MAC 7,0,25,0   // Flash Player 7 for Macintosh
	 LNX 9,0,115,0  // Flash Player 9 for Linux
     </pre>
	 
	 <p>Verwenden Sie <i>nicht</i> <codeph>Capabilities.version</codeph>, um eine betriebssystemspezifische Funktionalität zu ermitteln, wenn es eine spezifischere Funktionalitätseigenschaft gibt. Die Funktionalität auf dem Betriebssystem basieren zu lassen, wird nicht empfohlen, da dies zu Problemen führt, wenn eine Anwendung nicht alle möglichen Zielbetriebssysteme berücksichtigt. Verwenden Sie stattdessen die Eigenschaft, die der von Ihnen zu testenden Funktionalität entspricht. Weitere Informationen finden Sie in der Beschreibung der Capabilities-Klasse.</p>
	 
     <p>Der Serverstring ist <codeph>V</codeph>.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiOperation id="globalOperation:flash.system:fscommand"><apiName>fscommand</apiName><shortdesc>
 Ermöglicht die Kommunikation zwischen der SWF-Datei und Flash Player oder dem Programm, in dem Flash Player ausgeführt wird, beispielsweise ein Webbrowser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><oldexample><p>In the following example, the <code>fscommand()</code> function sets Flash Player to 
 scale the SWF file to the full monitor screen size when the <code>fullscreen_btn</code> button or 
 <code>unfullscreen_btn</code> is released:</p>
 
 <pre>this.fullscreen_btn.onRelease = function() {
   fscommand("fullscreen", true);
 };
 this.unfullscreen_btn.onRelease = function() {
   fscommand("fullscreen", false);
 };
 </pre>
 
 <p>The following example uses the <code>fscommand()</code> function applied to a button in Flash to 
 open a JavaScript message box in an HTML page. The message itself is sent to JavaScript as the 
 <code>fscommand</code> parameter. </p>
 
 <p>You must add a function to the HTML page that contains the SWF file. This function, 
 <code><i>myDocument</i></code><code>_DoFSCommand</code>, sits in the HTML page and waits for an 
 <code>fscommand()</code> function in Flash. When an <code>fscommand</code> is triggered in Flash 
 (for example, when a user presses the button), the <code>command</code> and <code>args</code> strings 
 are passed to the <code><i>myDocument</i></code><code>_DoFSCommand </code>function. You can use the 
 passed strings in your JavaScript or VBScript code in any way you like. In this example, the function 
 contains a conditional <code>if</code> statement that checks to see if the command string is 
 "<code>messagebox</code>". If it is, a JavaScript alert box (or "message box") opens 
 and displays the contents of the <code>args</code> string.</p>
 
 <pre>function myDocument_DoFSCommand(command, args) {
   if (command == "messagebox") {
      alert(args);
   }
 
 </pre>
 
 <p>In the Flash document, add the <code>fscommand()</code> function to a button:</p>
 
 <pre>fscommand("messagebox", "This is a message box called from within Flash.")
 </pre>
 
 <p>You can also use expressions for the <code>fscommand()</code> function and parameters, as in the 
 following example:</p>
 
 <pre>fscommand("messagebox", "Hello, " + name + ", welcome to our website!")
 </pre>
 
 <p>To test the SWF file, select File > Publish Preview > HTML.</p>
 
 <p><strong>Note: </strong>If you publish your SWF file using the Flash with FSCommand template in the 
 HTML 
 tab of the Publish Settings dialog box, the <code>myDocument_DoFSCommand</code> function is inserted 
 automatically. The SWF file's <code>NAME</code> and <code>ID</code> attributes will be the filename. 
 For example, for the file myDocument.fla, the attributes would be set to <code>myDocument</code>.</p>
 
  
  </oldexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die Funktion nicht als Antwort auf eine Benutzeraktion wie z. B. ein Maus- oder ein Tastendruckereignis aufgerufen wird.
 
 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>command</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Ein zur beliebigen Verwendung für die Hostanwendung übergebener String oder ein an Flash Player übergebener Befehl.
 
 </apiDesc></apiParam><apiParam><apiItemName>args</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Ein zur beliebigen Verwendung für die Hostanwendung übergebener String oder ein an Flash Player übergebener Wert.
 
 </apiDesc></apiParam></apiOperationDef><apiDesc>
 Ermöglicht die Kommunikation zwischen der SWF-Datei und Flash Player oder dem Programm, in dem Flash Player ausgeführt wird, beispielsweise ein Webbrowser. Mithilfe der Funktion <codeph>fscommand()</codeph> können Sie zudem Meldungen an Director, Visual Basic, Visual C++ und andere Programme übergeben, die als Hosts für ActiveX-Steuerelemente verwendet werden können.
 
  
 <p>Die Funktion <codeph>fscommand()</codeph> ermöglicht einer SWF-Datei die Kommunikation mit einem Skript auf einer Webseite. Der Zugriff auf das Skript wird jedoch auf der Webseite durch die Einstellung <codeph>allowScriptAccess</codeph> gesteuert. (Sie setzen dieses Attribut in dem HTML-Code, in den die SWF-Datei eingebettet ist. In Internet Explorer ist dies das <codeph>PARAM</codeph>-Tag, in Netscape Navigator das <codeph>EMBED</codeph>-Tag.) </p>
  <ul>
  
  <li> Wenn <codeph>allowScriptAccess</codeph> auf <codeph>"sameDomain"</codeph> (Standardeinstellung) gesetzt ist, ist Skripting nur von SWF-Dateien erlaubt, die in der gleichen Domäne wie die Webseite sind. </li> 
  <li> Wenn <codeph>allowScriptAccess</codeph> auf <codeph>"always"</codeph> gesetzt ist, kann die SWF-Datei mit der HTML-Seite kommunizieren, in der sie eingebettet ist, selbst wenn die SWF-Datei aus einer anderen Domäne als die HTML-Seite stammt. </li>
  <li>Wenn <codeph>allowScriptAccess</codeph> auf <codeph>"never"</codeph> gesetzt ist, kann die SWF-Datei nicht mit HTML-Seiten kommunizieren. Bitte beachten Sie, dass dieser Wert veraltet ist und nicht empfohlen wird und nicht notwendig sein sollte, wenn Sie nur vertrauenswürdige SWF-Dateien von Ihrer eigenen Domäne bereitstellen. Falls Sie nicht vertrauenswürdige SWF-Dateien bereitstellen müssen, empfiehlt es sich, eine separate Unterdomäne zu erstellen und alle nicht vertrauenswürdigen Inhalte dort abzulegen. </li>
 </ul>
 
 <p>Sie können eine SWF-Datei daran hindern, diese Methode aufzurufen, indem Sie auf der HTML-Seite, die den SWF-Inhalt enthält, den Parameter <codeph>allowNetworking</codeph> der Tags <codeph>object</codeph> und <codeph>embed</codeph> festlegen. </p>
 
 <p>Die <codeph>fscommand()</codeph>-Funktion ist nicht erlaubt, wenn die aufrufende SWF-Datei in der lokalen Sandbox des Dateisystems oder in der Netzwerk-Sandbox befindet und die enthaltende HTML-Datei eine nicht vertrauenswürdige Sandbox ist.</p>
 
 <p>Weitere sicherheitsrelevante Informationen finden Sie in den folgenden Abschnitten:</p>
 <ul>
 
 <li class="flexonly">Das Kapitel <xref href="http://www.adobe.com/go/flex3_progAS3_security_de" scope="external">Sicherheit</xref> im Handbuch <i>Programmieren mit ActionScript 3.0</i> und die neuesten Kommentare in den LiveDocs.</li>
 <li class="flashonly">Das Kapitel <xref href="http://www.adobe.com/go/flashcs4_prog_as3_security_en" scope="external">Sicherheit</xref> im Handbuch <i>Programmieren mit ActionScript 3.0</i> und die neuesten Kommentare in den LiveDocs.</li>
 
 <li>Der Abschnitt <xref href="http://www.adobe.com/go/devnet_security_en" scope="external">Sicherheit </xref> im Flash Player Developer Center.</li>
 </ul>
 
 <p>Verwendung 1: Um mithilfe von <codeph>fscommand()</codeph> eine Meldung an Flash Player zu senden, müssen Sie vordefinierte Befehle und Parameter verwenden. Die folgende Tabelle enthält die Werte, die Sie in der Funktion <codeph>fscommand()</codeph> für die Parameter <codeph>command</codeph> und <codeph>args</codeph> einsetzen können. Diese Werte steuern SWF-Dateien, die in Flash Player wiedergegeben werden, einschließlich Projektoren. (Ein <i>projector</i> ist eine SWF-Datei, die in einem Format gespeichert wurde, das als eigenständige Anwendung, d. h. ohne Flash Player, ausgeführt werden kann.)</p>
 
              <adobetable class="innertable">
                  
                  
                  
                  
                  
                  
                  
                  
              <tgroup cols="3"><thead><row><entry>Befehl</entry><entry>Parameter (args)</entry><entry>Zweck</entry></row></thead><tbody><row>
                      <entry><codeph>quit</codeph></entry>
                      <entry>Keine</entry>
                      <entry>Schließt den Projektor.</entry>
                  </row><row>
                      <entry><codeph>fullscreen</codeph></entry>
                      <entry><codeph>true</codeph> oder <codeph>false</codeph></entry>
                      <entry>Bei Angabe von <codeph>true</codeph> wird Flash Player in den Vollbildmodus gesetzt. Mit <codeph>false</codeph> wird der Player auf die normale Menüansicht zurückgesetzt.</entry>
                  </row><row>
                      <entry><codeph>allowscale</codeph></entry> 
                      <entry><codeph>true</codeph> oder <codeph>false</codeph></entry>
                      <entry>Bei Angabe von <codeph>false</codeph> wird der Player angewiesen, die SWF-Datei immer in ihrer ursprünglichen Größe darzustellen und nicht zu skalieren. Bei Angabe von <codeph>true</codeph> wird die SWF-Datei exakt in der vollen Größe des Players dargestellt.</entry>
                  </row><row>
                      <entry><codeph>showmenu</codeph></entry>
                      <entry><codeph>true</codeph> oder <codeph>false</codeph></entry>
                      <entry>Bei Angabe von <codeph>true</codeph> werden sämtliche Kontextmenüelemente aktiviert. Bei Angabe von <codeph>false</codeph> werden alle Elemente des Kontextmenüs mit Ausnahme von „Einstellungen“ und „Flash Player“ ausgeblendet.</entry>
                  </row><row>
                      <entry><codeph>exec</codeph></entry>
                      <entry>Pfad der Anwendung </entry>
                      <entry>Führt eine Anwendung im Projektor aus.</entry>
                  </row><row>
                      <entry><codeph>trapallkeys</codeph></entry>
                      <entry><codeph>true</codeph> oder <codeph>false</codeph></entry>
                      <entry>Bei Angabe von <codeph>true</codeph> werden alle Tastenereignisse, einschließlich Tastaturbefehle, an die Prozedur <codeph>onClipEvent(keyDown/keyUp)</codeph>in Flash Player gesendet. </entry>
                  </row></tbody></tgroup></adobetable>
 <p>Nicht alle in der Tabelle aufgeführten Befehle sind in allen Anwendungen verfügbar: 
 <ul>
     <li>In Web-Playern sind keine dieser Befehle verfügbar.</li> 
     <li>In eigenständigen Anwendungen, etwa in Projektoren, sind alle Befehle verfügbar.</li>
     <li>In Test-Movie-Playern sind nur die Befehle <codeph>allowscale</codeph> und <codeph>exec</codeph> verfügbar.</li>
 </ul>
 </p>
 
 <p>Im Befehl <codeph>exec</codeph> können nur die Zeichen A-Z, a-z, 0-9, Punkt (.) und Unterstrich (_) verwendet werden. Der Befehl <codeph>exec</codeph> wird nur im Unterordner „fscommand“ ausgeführt. Mit anderen Worten: Wenn Sie mit dem Befehl <codeph>exec</codeph> eine Anwendung aufrufen, muss sich die Anwendung in einem Unterordner mit der Bezeichnung „fscommand“ befinden. Der Befehl <codeph>exec</codeph> kann nur innerhalb einer Flash-Projektordatei ausgeführt werden.</p>
 
 <p>Verwendung 2: Wenn Sie mit <codeph>fscommand()</codeph> eine Meldung an eine Skriptsprache in einem Webbrowser (z. B. JavaScript) senden, können Sie zwei beliebige Parameter in den Parametern <codeph>command</codeph> und <codeph>args</codeph> übergeben. Bei diesen Parametern kann es sich um Strings oder Ausdrücke in einer JavaScript-Funktion handeln, mit der die Funktion <i>fscommand()</i> <codeph>abgefangen</codeph> wird. </p>
 
 <p>In einem Webbrowser ruft <codeph>fscommand()</codeph> die JavaScript-Funktion <codeph>moviename_DoFScommand</codeph> auf der Webseite mit der SWF-Datei auf. Dabei ist <codeph>moviename</codeph> der Name des Flash-Objekts, das mit dem Attribut <codeph>NAME</codeph> des Tags <codeph>EMBED</codeph> bzw. mit der Eigenschaft „ID“ des Tags <codeph>OBJECT</codeph> zugewiesen wurde. Wenn Sie der SWF-Datei den Namen „myMovie“ zuweisen, wird die JavaScript-Funktion <codeph>myMovie_DoFScommand</codeph> aufgerufen. </p>
 
 <p>Setzen Sie in der Webseite, die die SWF-Datei enthält, das <codeph>allowScriptAccess</codeph>-Attribut, um es der SWF-Datei wie oben beschrieben zu erlauben oder zu verbieten, auf die Webseite zuzugreifen. (Sie setzen dieses Attribut in dem HTML-Code, in den die SWF-Datei eingebettet ist. In Internet Explorer ist dies das <codeph>PARAM</codeph>-Tag, in Netscape Navigator das <codeph>EMBED</codeph>-Tag.) </p>
 
 <p>Wenn Flash Player 10 oder eine spätere Version im Browser ausgeführt wird, kann diese Methode eventuell nicht programmgesteuert verwendet werden, um ein Popupfenster zu öffnen. Verschiedene Browser (und Browserkonfigurationen) blocken eventuell alle Popupfenster. Es ist daher nicht möglich, das Einblenden eines Popupfensters sicherzustellen. Den größten Erfolg verspricht diese Methode zum Öffnen eines Popupfensters, und zwar aufgrund von Code, der als direktes Ergebnis einer Benutzeraktion ausgeführt wird, z. B. in einer Ereignisprozedur für ein Mausklick- oder Tastendruckereignis.</p>
 
 <p>Verwendung 3: Über die Funktion <codeph>fscommand()</codeph> können Meldungen an Director (Macromedia Director von Adobe) gesendet werden. Diese Meldungen werden von Lingo (Director-Skriptsprache) als Strings, Ereignisse oder ausführbarer Lingo-Code interpretiert. Wenn es sich bei einer Meldung um einen String oder ein Ereignis handelt, müssen Sie entsprechenden Lingo-Code erstellen, der die Meldungen der Funktion <codeph>fscommand()</codeph> empfängt und in Director eine Aktion aufruft. Weitere Informationen finden Sie im Director Support Center unter <xref href="http://www.adobe.com/support/director/" scope="external">www.adobe.com/support/director/</xref>.</p>
 
 <p>Verwendung 4: In VisualBasic, Visual C++ und anderen Programmen, in denen ActiveX-Steuerelemente ausgeführt werden können, sendet die Funktion <codeph>fscommand()</codeph> ein VB-Ereignis mit zwei Strings, die in der Programmiersprache der Umgebung verarbeitet werden können. Weitere Informationen erhalten Sie, indem Sie das Flash Support Center unter <xref href="http://www.adobe.com/support/flash/" scope="external">www.adobe.com/support/flash/</xref> nach dem Schlüsselwort „Flash-Methode“ durchsuchen.</p>
 <p><b>Hinweis:</b> Die ExternalInterface-Klasse stellt bessere Funktionen für die Kommunikation zwischen JavaScript und ActionScript (Verwendung 2) und zwischen ActionScript und VisualBasic, Visual C++ oder anderen Programmen bereit, die ActiveX-Steuerelemente (Verwendung 4) hosten können. Verwenden Sie <codeph>fscommand()</codeph> weiterhin, um Meldungen an Flash Player (Verwendung 1) und Director (Verwendung 3) zu senden.</p>
 
 </apiDesc><example conref="examples\FSCommandExample.as"> Das folgende Beispiel zeigt, wie Sie Flash Player mit <codeph>fscommand()</codeph> veranlassen können, in den Vollbildmodus zu wechseln und keine Skalierung zu gestatten. Anschließend wird der Bühne mithilfe von <codeph>draw()</codeph> ein orangefarbenes Feld hinzugefügt. Zu <codeph>draw()</codeph> wird ein <codeph>click</codeph>-Ereignis-Listener mit dem Namen <codeph>clickHandler()</codeph> hinzugefügt, der auf <codeph>click</codeph>-Ereignisse reagiert, indem Flash Player durch einen weiteren Aufruf von <codeph>fscommand()</codeph> veranlasst wird, die Ausführung zu beenden.
 
 <p><b>Hinweis: </b> Dieses Beispiel sollte in einem eigenständigen Flash Player und nicht in einem Webbrowser ausgeführt werden.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.system.fscommand;
    import flash.events.MouseEvent;

    public class FSCommandExample extends Sprite {
        private var bgColor:uint = 0xFFCC00;
        private var size:uint = 100;

        public function FSCommandExample() {
            fscommand("fullscreen", "true");
            fscommand("allowscale", "false");
            draw();
        }

        private function clickHandler(event:MouseEvent):void {
            fscommand("quit");
            trace("clickHandler");
        }

        private function draw():void {
            var child:Sprite = new Sprite();
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            child.buttonMode = true;
            addEventListener(MouseEvent.CLICK, clickHandler);

            var label:TextField = new TextField();
            label.text = "quit";
            label.selectable = false;
            label.mouseEnabled = false;
            child.addChild(label);

            addChild(child);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiClassifier id="flash.system:IME"><apiName>IME</apiName><shortdesc>
 Mit der IME-Klasse können Sie den Eingabemethoden-Editor (Input Method Editor, IME) des Betriebssystems mithilfe einer auf einem Client-Computer ausgeführten Flash Player-Anwendung direkt bearbeiten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiTipTexts><apiTipText>Hiermit können Sie den Eingabemethoden-Editor (IME) des Betriebssystems direkt bearbeiten.
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 Mit der IME-Klasse können Sie den Eingabemethoden-Editor (Input Method Editor, IME) des Betriebssystems mithilfe einer auf einem Client-Computer ausgeführten Flash Player-Anwendung direkt bearbeiten. Dabei können Sie bestimmen, ob ein IME installiert ist, ob dieser aktiviert oder deaktiviert ist, und um welchen IME es sich handelt. Sie können den IME in der Flash Player-Anwendung aktivieren oder deaktivieren und je nach Betriebssystem weitere eingeschränkte Funktionen ausführen.
 
 <p>Benutzer können mithilfe von Eingabemethoden-Editoren ASCII-fremde Textzeichen in Multibyte-Sprachen wie Chinesisch, Japanisch oder Koreanisch eingeben. Weitere Informationen zur Verwendung von Eingabemethoden-Editoren finden Sie in der Dokumentation des Betriebssystems, für das Sie Anwendungen entwickeln. Weitere Ressourcen finden Sie auf den folgenden Websites:
 <ul>
   <li><xref href="http://www.microsoft.com/globaldev/default.mspx" scope="external">http://www.microsoft.com/globaldev/default.mspx</xref></li>
   <li><xref href="http://developer.apple.com/documentation/" scope="external">http://developer.apple.com/documentation/</xref></li>
   <li><xref href="http://java.sun.com" scope="external">http://java.sun.com</xref></li>
  </ul>
  </p>
 
 <p>Wenn ein IME auf dem Computer des Benutzers deaktiviert ist, treten mit Ausnahme von <codeph>Capabilities.hasIME</codeph> beim Aufrufen von IME-Methoden oder IME-Eigenschaften Fehler auf. Nach dem Aktivieren eines IME werden ActionScript-Aufrufe von IME-Methoden und IME-Eigenschaften wie erwartet durchgeführt. Wenn Sie beispielsweise einen IME für Japanisch verwenden, muss dieser aktiviert werden, bevor IME-Methoden oder IME-Eigenschaften aufgerufen werden können.</p>
 
 <p>In der folgenden Tabelle sind die Plattformen aufgeführt, auf denen diese Klasse unterstützt wird:</p>
 
 
 <adobetable class="innertable">
  
 
 
 
  
  
 
  
  
 
 <tgroup cols="4"><thead><row><entry>Funktion</entry><entry>Windows</entry><entry>Mac OS X</entry><entry>Linux</entry></row></thead><tbody><row>
    <entry>Feststellen, ob ein IME installiert ist <codeph>Capabilities.hasIME</codeph></entry>
    <entry>Ja</entry>
    <entry>Ja</entry>
    <entry>Ja</entry>
  </row><row>
    <entry>IME aktivieren/deaktivieren <codeph>IME.enabled</codeph></entry>
    <entry>Ja</entry>
    <entry>Ja</entry>
    <entry>Ja</entry>
  </row><row>
    <entry>Feststellen, ob der IME aktiviert bzw. deaktiviert ist <codeph>IME.enabled</codeph></entry>
    <entry>Ja</entry>
    <entry>Ja</entry>
    <entry>Ja</entry>
  </row><row>
    <entry>Abrufen oder Festlegen des IME-Konvertierungsmodus <codeph>IME.conversionMode</codeph></entry>
    <entry>Ja</entry>
    <entry>Ja ~~~~</entry>
    <entry>Nein</entry>
  </row><row>
    <entry>Zu konvertierenden String an IME senden <codeph>IME.setCompositionString()</codeph></entry>
    <entry>Ja ~~</entry>
    <entry>Nein</entry>
    <entry>Nein</entry>
  </row><row>
    <entry>Den Originalstring vor der Konvertierung vom IME abrufen <codeph>System.ime.addEventListener()</codeph></entry>
    <entry>Ja ~~</entry>
    <entry>Nein</entry>
    <entry>Nein</entry>
  </row><row>
    <entry>Anforderung für die Konvertierung an IME senden <codeph>IME.doConversion()</codeph></entry>
    <entry>Ja ~~</entry>
    <entry>Nein</entry>
    <entry>Nein</entry>
  </row></tbody></tgroup></adobetable>
 
 <p>~~ Diese Vorgänge werden nicht in allen Windows-IMEs unterstützt. Der einzige IME, der alle Vorgänge unterstützt, ist der IME für Japanisch.</p>
 
 <p>~~~~ Auf Macintosh-Systemen werden diese Methoden nur im IME für Japanisch unterstützt, bei IMEs von Drittanbietern werden sie dagegen nicht unterstützt.</p>
 <p>Die ActionScript 3.0-Version dieser Klasse unterstützt nicht Macintosh Classic.</p>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="flash.system:IME_flash.events.IMEEvent.IME_COMPOSITION_imeComposition"><apiName>imeComposition</apiName><shortdesc>
 Wird ausgelöst, wenn ein Benutzer die Eingabe in einem Eingabemethoden-Editor (IME) abgeschlossen hat und der Lesestring verfügbar ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.IMEEvent.IME_COMPOSITION</apiEventType><adobeApiEventClassifier>flash.events.IMEEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Wird ausgelöst, wenn ein Benutzer die Eingabe in einem Eingabemethoden-Editor (IME) abgeschlossen hat und der Lesestring verfügbar ist. IMEs werden in der Regel zur Eingabe von Text für Sprachen mit Ideogrammen anstelle von Buchstaben verwendet, beispielsweise Japanisch, Chinesisch und Koreanisch.
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiOperation id="flash.system:IME:compositionAbandoned"><apiName>compositionAbandoned</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:compositionSelectionChanged"><apiName>compositionSelectionChanged</apiName><shortdesc/><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>start</apiItemName><apiOperationClassifier>int</apiOperationClassifier></apiParam><apiParam><apiItemName>end</apiItemName><apiOperationClassifier>int</apiOperationClassifier></apiParam></apiOperationDef></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:doConversion"><apiName>doConversion</apiName><shortdesc>
	 Weist den IME an, den ersten Kandidaten für den aktuellen Eingabestring auszuwählen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Der Aufruf war nicht erfolgreich.
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Weist den IME an, den ersten Kandidaten für den aktuellen Eingabestring auszuwählen.
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:IME:setCompositionString"><apiName>setCompositionString</apiName><shortdesc>
	 Legt den IME-Eingabestring fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Need some examples of valid values for the param composition.
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Der Aufruf ist nicht erfolgreich.
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>composition</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der an den IME zu sendende String.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Legt den IME-Eingabestring fest. Wenn dieser String festgelegt ist, kann der Benutzer die IME-Kandidaten auswählen, bevor das Ergebnis an das Textfeld mit dem aktuellen Eingabefokus übergeben wird.
	 <p>Wenn kein Textfeld mit Fokus vorhanden ist, schlägt die Methode fehl, und ein Fehler wird ausgegeben.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.system:IME:conversionMode:get"><apiName>conversionMode</apiName><shortdesc>
	 Der Konvertierungsmodus des aktuellen IME.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Eine Festlegung wurde nicht erfolgreich ausgeführt.
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Der Konvertierungsmodus des aktuellen IME. Mögliche Werte sind folgende IME-Modusstringkonstanten, die den Konvertierungsmodus angeben:
	 <ul>
	 	<li><codeph>ALPHANUMERIC_FULL</codeph></li>
	 	<li><codeph>ALPHANUMERIC_HALF</codeph></li>
 	 	<li><codeph>CHINESE</codeph></li>
	 	<li><codeph>JAPANESE_HIRAGANA</codeph></li>
	 	<li><codeph>JAPANESE_KATAKANA_FULL</codeph></li>
	 	<li><codeph>JAPANESE_KATAKANA_HALF</codeph></li>
 	 	<li><codeph>KOREAN</codeph></li>
	  <li><codeph>UNKNOWN</codeph> (schreibgeschützter Wert, der nicht festgelegt werden kann)</li>
	 </ul>
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IMEConversionMode/ALPHANUMERIC_FULL"><linktext>flash.system.IMEConversionMode.ALPHANUMERIC_FULL</linktext></link><link href="flash.system.xml#IMEConversionMode/ALPHANUMERIC_HALF"><linktext>flash.system.IMEConversionMode.ALPHANUMERIC_HALF</linktext></link><link href="flash.system.xml#IMEConversionMode/CHINESE"><linktext>flash.system.IMEConversionMode.CHINESE</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_HIRAGANA"><linktext>flash.system.IMEConversionMode.JAPANESE_HIRAGANA</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_KATAKANA_FULL"><linktext>flash.system.IMEConversionMode.JAPANESE_KATAKANA_FULL</linktext></link><link href="flash.system.xml#IMEConversionMode/JAPANESE_KATAKANA_HALF"><linktext>flash.system.IMEConversionMode.JAPANESE_KATAKANA_HALF</linktext></link><link href="flash.system.xml#IMEConversionMode/KOREAN"><linktext>flash.system.IMEConversionMode.KOREAN</linktext></link><link href="flash.system.xml#IMEConversionMode/UNKNOWN"><linktext>flash.system.IMEConversionMode.UNKNOWN</linktext></link></related-links></apiValue><apiValue id="flash.system:IME:enabled:get"><apiName>enabled</apiName><shortdesc>
	 Gibt an, ob der System-IME aktiviert (true) oder deaktiviert (false) ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>Eine Festlegung wurde nicht erfolgreich ausgeführt.
	 </apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt an, ob der System-IME aktiviert (<codeph>true</codeph>) oder deaktiviert (<codeph>false</codeph>) ist. Ein aktivierter IME führt Multibyte-Eingaben durch, ein deaktivierter IME führt alphanumerische Eingaben durch. 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.system:System"><apiName>System</apiName><shortdesc>
 Die System-Klasse enthält Eigenschaften für bestimmte auf dem Computer des Benutzers erfolgende Operationen, wie beispielsweise Operationen mit gemeinsamen Objekten, lokalen Einstellungen für Kameras und Mikrofone sowie der gemeinsamen Verwendung der Zwischenablage.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>System, System object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die System-Klasse enthält Eigenschaften für bestimmte auf dem Computer des Benutzers erfolgende Operationen, wie beispielsweise <ph platform="actionscript">Operationen mit gemeinsamen Objekten, lokalen Einstellungen für Kameras und Mikrofone sowie</ph> die gemeinsame Verwendung der Zwischenablage.
 
 <p>Weitere Eigenschaften und Methoden befinden sich in den folgenden anderen Klassen des flash.system-Pakets: in der Capabilities-Klasse<ph platform="actionscript">, der IME-Klasse </ph> und der Security-Klasse.</p>
 
 <p>Diese Klasse enthält lediglich statische Methoden und Eigenschaften. Sie können keine neuen Instanzen der System-Klasse erstellen.</p>
 
 </apiDesc><example conref="examples\SystemExample.as"> Dieses Beispiel veranschaulicht, wie Sie Angaben zum Gesamtarbeitsspeicher des Systems in die Systemzwischenablage mit einem Aufruf von <codeph>System.totalMemory</codeph> in einem Aufruf der <codeph>System.setClipboard()</codeph>-Methode kopieren.
<codeblock>
package {
    import flash.display.Sprite;
    import flash.system.System;

    public class SystemExample extends Sprite {
        public function SystemExample() {
            System.setClipboard("System.totalMemory: " + System.totalMemory);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.system.xml#Security"><linktext>flash.system.Security</linktext></link><link href="flash.events.xml#IMEEvent"><linktext>flash.events.IMEEvent</linktext></link></related-links><apiOperation id="flash.system:System:disposeXML"><apiName>disposeXML</apiName><shortdesc>
	 Macht das angegebene XML-Objekt sofort für die Speicherbereinigung verfügbar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="AIR" version="1.5.2"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>XML</apiOperationClassifier><apiDesc>XML-Referenz, die für die Speicherbereinigung verfügbar gemacht werden soll.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Macht das angegebene XML-Objekt sofort für die Speicherbereinigung verfügbar. Diese Methode entfernt über- und untergeordnete Verbindungen zwischen allen Knoten für den angegebenen XML-Knoten.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:System:exit"><apiName>exit</apiName><shortdesc> 
     Schließt Flash Player.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata><asCustoms><keyword>System, System.exit(), exit()             
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>code</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>Ein Wert, der an das Betriebssystem übergeben wird. Wenn der Prozess normal beendet wurde, ist dieser Wert normalerweise 0.
	 
     </apiDesc></apiParam></apiOperationDef><apiDesc> 
     Schließt Flash Player.
	 
     <p><i>Nur für die Debugger-Version des eigenständigen Flash Player.</i></p> 
	 
     <p>AIR-Anwendungen sollten die <codeph>NativeApplication.exit()</codeph>-Methode aufrufen, um die Anwendung zu beenden.</p> 
	 
     </apiDesc></apiOperationDetail><related-links><link href="flash.desktop.xml#NativeApplication/exit()"><linktext>flash.desktop.NativeApplication.exit()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:gc"><apiName>gc</apiName><shortdesc>
     Erzwingt den Garbagekollektor-Prozess.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Erzwingt den Garbagekollektor-Prozess.
	 
     <p><ph platform="actionscript"><i>Nur für die Debugger-Version von Flash Player und AIR-Anwendungen.</i></ph> In AIR-Anwendungen ist die <codeph>System.gc()</codeph>-Methode nur in Inhalt aktiviert, der im AIR Debug Launcher (ADL) ausgeführt wird, bzw. in installierten Anwendungen in Inhalt in der Sicherheitssandbox der Anwendung.</p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.system:System:pause"><apiName>pause</apiName><shortdesc> 
     Hält den Flash Player oder den AIR Debug Launcher (ADL) an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata><asCustoms><keyword>System, System.pause(), pause()   
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
     Hält <ph platform="actionscript">den Flash Player oder </ph>den AIR Debug Launcher (ADL) an. Nach dem Aufrufen dieser Methode wird in der Anwendung nichts fortgesetzt abgesehen von der Weitergabe von Socket-Ereignissen.
	 
     <p platform="actionscript"><i>Nur für die Debugger-Version des Flash Player oder den AIR Debug Launcher (ADL).</i></p>
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.system.xml#System/resume()"><linktext>resume()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:resume"><apiName>resume</apiName><shortdesc> 
     Nimmt die Anwendung nach dem Aufrufen von System.pause() wieder auf.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.115.0"/></apiVersion></asMetadata><asCustoms><keyword>System, System.resume(), resume()        
	 
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc> 
     Nimmt die Anwendung nach dem Aufrufen von <codeph>System.pause()</codeph> wieder auf.
	 
     <p platform="actionscript"><i>Nur für die Debugger-Version des Flash Player oder den AIR Debug Launcher (ADL).</i></p>  
     
     </apiDesc></apiOperationDetail><related-links><link href="flash.system.xml#System/pause()"><linktext>pause()</linktext></link></related-links></apiOperation><apiOperation id="flash.system:System:setClipboard"><apiName>setClipboard</apiName><shortdesc>
	 Ersetzt den Inhalt der Zwischenablage durch den angegebenen Textstring.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>System.setClipboard, setClipboard
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>string</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Ein String mit Klartextzeichen, der in der Zwischenablage des Systems abgelegt wird und den aktuellen Inhalt (sofern vorhanden) ersetzt.
	 
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Ersetzt den Inhalt der Zwischenablage durch den angegebenen Textstring.
	 
	 </apiTipText></apiTipTexts></apiOperationDef><apiDesc>
	 Ersetzt den Inhalt der Zwischenablage durch den angegebenen Textstring. Diese Methode funktioniert von jedem Sicherheitskontext, wenn sie als Ergebnis des Benutzerereignisses (z. B. eine Tastatur- oder Mausereignisprozedur) aufgerufen wird.
	 
	 <p>Diese Methode wird für SWF-Inhalt bereitgestellt, der in Flash Player 9 ausgeführt wird. Sie erlaubt nur das Hinzufügen von Stringinhalt zur Zwischenablage. Flash Player 10-Inhalt und Inhalt in der Sicherheitssandbox der Anwendung in einer AIR-Anwendung können die <codeph>Clipboard.setData()</codeph>-Methode aufrufen.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link></related-links></apiOperation><apiValue id="flash.system:System:ime:get"><apiName>ime</apiName><shortdesc>
	 Der derzeit installierte System-IME.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.system:IME</apiValueClassifier></apiValueDef><apiDesc>
	 Der derzeit installierte System-IME. Rufen Sie <codeph>addEventListener()</codeph> für diese Instanz auf, um imeComposition-Ereignisse zu registrieren.
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IMEConversionMode"><linktext>IMEConversionMode</linktext></link></related-links></apiValue><apiValue id="flash.system:System:totalMemory:get"><apiName>totalMemory</apiName><shortdesc>
     Der Speicher (in Byte), der momentan von Adobe&amp;#xAE; Flash&amp;#xAE; Player oder Adobe&amp;#xAE; AIR&amp;#xAE; belegt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Add better description and example, unless private, in which case mark as "at"private.
	 </internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
     Der Speicher (in Byte), der momentan von <ph platform="actionscript">Adobe<sup>®</sup> Flash<sup>®</sup> Player oder</ph> Adobe<sup>®</sup> AIR<sup>®</sup> belegt wird.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.system:System:useCodePage:get"><apiName>useCodePage</apiName><shortdesc>
	 Ein boolescher Wert, der bestimmt, welche Codepage in Flash Player zur Erkennung externer Textdateien verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>System.useCodepage, useCodepage, Unicode, code page
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Ein boolescher Wert, der bestimmt, welche Codepage in Flash Player zur Erkennung externer Textdateien verwendet werden soll. Wenn die Eigenschaft den Wert <codeph>false</codeph> hat, werden externe Textdateien als Unicode interpretiert. (Diese Dateien müssen beim Speichern als Unicode kodiert werden.) Wenn die Eigenschaft auf <codeph>true</codeph> gesetzt ist, werden externe Textdateien mit der herkömmlichen Codepage des Betriebssystems interpretiert, unter dem die Anwendung ausgeführt wird. Der Standardwert <codeph>useCodePage</codeph> ist <codeph>false</codeph>.
	 
	 <p>Text, den Sie als eine externe Datei laden (mit <codeph>Loader.load()</codeph>, der URLLoader-Klasse oder URLStream), muss als Unicode gespeichert worden sein, damit die Anwendung ihn als Unicode erkennt. Wenn Sie externe Dateien als Unicode kodieren möchten, müssen Sie die Dateien in einer Anwendung speichern, die Unicode unterstützt, beispielsweise Notepad unter Windows.</p>
	 
	 <p>Wenn Sie externe Textdateien laden, die nicht als Unicode kodiert sind, setzen Sie <codeph>useCodePage</codeph> auf <codeph>true</codeph>. Geben Sie den folgenden Code als erste Codezeile in <ph product="flash">das erste Bild der </ph>Datei ein, von der die Daten geladen werden:</p>
	 
	 <pre><codeph>System.useCodePage = true;</codeph></pre>
	 
	 <p>Wenn dieser Code vorhanden ist, werden externe Textdateien von der Anwendung mit der Standard-Codepage des Betriebssystems interpretiert. Unter einem deutschen Windows-Betriebssystem ist dies im Allgemeinen CP1252, unter einem japanischen Betriebssystem Shift-JIS. <ph platform="actionscript">Wenn Sie <codeph>useCodePage</codeph> auf <codeph>true</codeph> setzen, wird Text in Flash Player 6 und aktuelleren Versionen wie in Flash Player 5 behandelt. (In Flash Player 5 wird Text so behandelt, als ob die herkömmliche Codepage des Betriebssystems verwendet wird, unter dem Flash Player ausgeführt wird.)</ph></p>
	 
	 <p>Wenn Sie <codeph>useCodePage</codeph> auf <codeph>true</codeph> setzen, müssen Sie darauf achten, dass die Standard-Codepage des Betriebssystems, unter dem die Anwendung ausgeführt wird, die in der externen Textdatei verwendeten Zeichen enthält, damit der Text angezeigt werden kann. Wenn Sie beispielsweise eine externe Textdatei mit chinesischen Zeichen laden, werden die Zeichen unter einem System mit der Codepage CP1252 nicht angezeigt, da diese Codepage keine chinesischen Zeichen enthält.</p>
	 
	 <p>Sie können sicherstellen, dass die externen Textdateien in Ihrer Anwendung auf allen Plattformen angezeigt werden, indem Sie alle externen Textdateien als Unicode kodieren und <codeph>useCodePage</codeph> auf <codeph>false</codeph> gesetzt lassen. Somit wird der Text von der Anwendung (<ph platform="actionscript">Flash Player 6 und höher)</ph> als Unicode erkannt.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.system:SecurityDomain"><apiName>SecurityDomain</apiName><shortdesc>
	Die SecurityDomain-Klasse gibt die aktuelle Sicherheitssandbox an, die auch als Sicherheitsdomäne bezeichnet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	Die SecurityDomain-Klasse gibt die aktuelle Sicherheitssandbox an, die auch als Sicherheitsdomäne bezeichnet wird. Durch Übergeben einer Instanz dieser Klasse für <codeph>Loader.load()</codeph> können Sie festlegen, dass geladene Medien in einer bestimmten Sandbox platziert werden.
	</apiDesc></apiClassifierDetail><apiValue id="flash.system:SecurityDomain:currentDomain:get"><apiName>currentDomain</apiName><shortdesc>
		Ruft die aktuelle Sicherheitsdomäne ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>flash.system:SecurityDomain</apiValueClassifier></apiValueDef><apiDesc>
		Ruft die aktuelle Sicherheitsdomäne ab. 
		
		</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Loader/load()"><linktext>flash.display.Loader.load()</linktext></link><link href="flash.display.xml#Loader/loadBytes()"><linktext>flash.display.Loader.loadBytes()</linktext></link><link href="flash.system.xml#LoaderContext"><linktext>flash.system.LoaderContext</linktext></link></related-links></apiValue></apiClassifier></apiPackage>