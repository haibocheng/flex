<?xml version="1.0"?>
<apiPackage id="flash.text.engine"><apiName>flash.text.engine</apiName><apiDetail/><apiClassifier id="flash.text.engine:TextLine"><apiName>TextLine</apiName><shortdesc>
 Die TextLine-Klasse wird verwendet, um Text in der Anzeigeliste anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.display:DisplayObjectContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die TextLine-Klasse wird verwendet, um Text in der Anzeigeliste anzuzeigen.
 
 <p>Sie können ein TextLine-Objekt nicht direkt aus ActionScript-Code erstellen. Wenn Sie <codeph>new TextLine()</codeph> aufrufen, wird ein Ausnahmefehler zurückgegeben. Um ein TextLine-Objekt zu erstellen, rufen Sie die <codeph>createTextLine()</codeph>-Methode eines TextBlock auf.</p>
 
 <p>Die TextLine enthält die Informationen, die zur Wiedergabe des Inhalts mindestens erforderlich sind. Sie können zusätzliche Informationen abrufen, die für die Interaktivität hilfreich sind, indem Sie Methoden verwenden, die die Eigenschaften der Atome in der Zeile beschreiben. Der Begriff „Atom“ bezieht sich sowohl auf Grafikelemente als auch auf Zeichen (einschließlich Gruppen aus Verbindungszeichen), die nicht weiter unterteilbaren Einheiten, aus denen eine Textzeile besteht. Beachten Sie, dass der Player die Daten, die diese Methoden benötigen, nur erstellt und speichert, wenn Sie die Methoden aufrufen. Erstellen Sie keine unnötigen Atomdaten, um Speicherüberlastung zu vermeiden. Wenn die Atomdaten nicht mehr benötigt werden, rufen Sie die <codeph>flushAtomData()</codeph>-Methode auf, damit die Daten vom Garbagekollektor entfernt werden können.</p>
 
 <p>Die folgenden Methoden und Eigenschaften generieren Atomdaten, falls diese nicht vorhanden sind:
</p>
 <ul>
 <li><codeph>atomCount</codeph></li>
 <li><codeph>getAtomBidiLevel()</codeph></li>
 <li><codeph>getAtomBounds()</codeph></li>
 <li><codeph>getAtomCenter()</codeph></li>
 <li><codeph>getAtomIndexAtCharIndex()</codeph></li>
 <li><codeph>getAtomIndexAtPoint()</codeph></li>
 <li><codeph>getAtomGraphic()</codeph></li>
 <li><codeph>getAtomTextBlockBeginIndex()</codeph></li>
 <li><codeph>getAtomTextBlockEndIndex()</codeph></li>
 <li><codeph>getAtomTextRotation()</codeph></li>
 <li><codeph>getAtomWordBoundaryOnLeft()</codeph></li>
 </ul>
 
 
 <p>Wenn die normale Ereignisauslösung für eine Textzeile beendet und die Zeile gültig ist, werden Ereignisse für die Ereignisauslöser gespiegelt, die in den <codeph>eventMirror</codeph>-Eigenschaften der Inhaltselementobjekte, die zu der Textzeile beigetragen haben, angegeben sind. Diese Objekte werden in der <codeph>TextLine.mirrorRegions</codeph>-Eigenschaft aufgezeichnet. Die Ereignisse werden nicht gespiegelt, wenn die Ereignispropagierung fehlgeschlagen ist oder angehalten wurde bzw. wenn die Textzeile ungültig ist.</p>
 
 <p>Das Spiegeln von Mausereignissen ist ein Sonderfall. Da es sich bei Spiegelbereichen nicht wirklich um Anzeigeobjekte handelt, werden für <codeph>mouseOver</codeph> und <codeph>mouseOut</codeph> Ereignisse simuliert. <codeph>rollOver</codeph> und <codeph>rollOut</codeph>-Ereignisse werden nicht simuliert. Alle natürlich auftretenden <codeph>mouseOver</codeph>-, <codeph>mouseOut</codeph>-, <codeph>rollOver</codeph>- und <codeph>rollOut</codeph>-Ereignisse (gleichgültig, ob ihr Ziel die Textzeile oder ein untergeordnetes Element der Textzeile ist) werden ignoriert, d. h. sie werden nicht gespiegelt.</p>
 
 <p>Der Anfang eines Textzeilenobjekts ist der Anfang der Grundlinie. Wenn Sie die vertikale Position (<codeph>y</codeph>-Eigenschaft) einer Zeile mit lateinischem Text auf einer Roman-Grundlinie nicht festsetzen, erscheinen nur die Unterlängen des Textes unterhalb der Oberkante des Sprite, dem die Textzeile hinzugefügt wird. Sehen Sie sich dazu das folgende Diagramm an:</p>
 
 <p><adobeimage alt="Grundlinien für Text" href="../../../images/TextLine.gif"/></p>
 
 <p>Die TextLine-Klasse besitzt mehrere Ancestor-Klassen (DisplayObjectContainer, InteractiveObject, DisplayObject und EventDispatcher), von denen sie Eigenschaften und Methoden übernimmt. Die folgenden vererbten Eigenschaften sind nicht auf TextLine-Objekte anwendbar: </p>
 
 <ul>
 <li><codeph>contextMenu</codeph></li>
 <li><codeph>focusRect</codeph></li>
 <li><codeph>tabChildren</codeph></li>
 <li><codeph>tabEnabled</codeph></li>
 <li><codeph>tabIndex</codeph></li>
 <li><codeph>transform</codeph></li>
 </ul>
 
 <p>Beim Versuch, diese Eigenschaften festzusetzen, gibt die Text-Engine den Fehler „IllegalOperationError“ aus. Diese Eigenschaften können zwar gelesen werden, aber sie enthalten immer Standardwerte.</p>
 
 </apiDesc><example conref="examples\TextLineExample.as"> In diesem Beispiel werden verschiedene Textzeilen und Schritte durch die Atome in einem Textblock angezeigt, wobei jeweils <codeph>getAtomBounds()</codeph> für die Eingrenzung verwendet wird.
    <ol>
        <li>Fügen Sie die NumericStepper-Komponente zur Bibliothek hinzu.</li>
         <li>Speichern Sie diesen Code unter „TextLineExample.as“ im gleichen Verzeichnis wie die FLA-Datei.</li>
        <li>Setzen Sie die Klasse im Eigenschaftenfenster der FLA-Datei auf „TextLineExample“.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.FontPosture;
    import flash.text.engine.FontWeight;
    import fl.controls.NumericStepper;
    import flash.events.Event;
    import flash.geom.Rectangle;
    
    public class TextLineExample extends Sprite {
        
        private var atomStepper:NumericStepper = new NumericStepper();
        private var atomDataContainer:Sprite;
        private var fontDescriptionItalic:FontDescription = new FontDescription("Arial", FontWeight.NORMAL, FontPosture.ITALIC);
        private var fontDescriptionNormal:FontDescription = new FontDescription("Arial", FontWeight.NORMAL , FontPosture.NORMAL);
        private var textBlock:TextBlock = new TextBlock();
        private var textLine:TextLine;
        
        public function TextLineExample():void {
            
            var myText:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. From the text block, " +
            "the createTextLine() method created these lines, 300 pixels wide, "  +
            "for display." ;
            
            atomStepper.minimum = 0;
            atomStepper.value = 0;
            atomStepper.width = 50;
            addChild(atomStepper);
            atomStepper.x = 20;
            atomStepper.y = 120;
            atomStepper.addEventListener(Event.CHANGE, nsChange);
            
            var directions:String = "Click up / down arrows to frame atoms in text block above.";
            
            var formatItalic:ElementFormat = new ElementFormat(fontDescriptionItalic);
            formatItalic.fontSize = 12;
            var textElement1:TextElement = new TextElement(directions, formatItalic);
            textBlock.content = textElement1;
            createLines(textBlock, 15, 160, 400, this);
            
            var formatNormal:ElementFormat = new ElementFormat(fontDescriptionNormal);
            formatNormal.fontSize = 16;
            var textElement2:TextElement = new TextElement(myText, formatNormal);
            textBlock.content = textElement2;
            createLines(textBlock, 15.0, 20.0, 300, this);
            textLine = textBlock.firstLine;
            atomStepper.maximum = textLine.atomCount - 1;
            showAtom(textLine, 0);
        }
            
        private function nsChange(event:Event):void
        {
            removeAtom(textLine);
            if (atomStepper.value == textLine.atomCount - 1)
            {
                if(textLine != textBlock.lastLine)
                {
                    textLine = textLine.nextLine;
                    atomStepper.maximum = textLine.atomCount - 1;
                    atomStepper.value = 0;
                }
            }
            showAtom(textLine, atomStepper.value);
        }
            
        private function createLines(textBlock, startX, startY, width, container)
        {
            var textLine:TextLine = textBlock.createTextLine (null, width);
            while (textLine)
            {
                textLine.x = startX;
                textLine.y = startY;
                startY += textLine.height + 2;
                container.addChild(textLine);
                textLine = textBlock.createTextLine (textLine, width);
            }
        }
            
        private function showAtom(textLine, i):void
        {
            var box:Sprite = new Sprite();
            var mcGraphics = box.graphics;
            var bounds:Rectangle = textLine.getAtomBounds(i);
            mcGraphics.lineStyle(1, 0xFF0000, 1.0);
            mcGraphics.drawRect(bounds.left, bounds.top, bounds.width, bounds.height);
            textLine.userData = textLine.addChild(box);
            displayAtomData(textLine,i);
        }
            
        private function displayAtomData(textLine, i)
        {
            if(atomDataContainer != null)
                removeChild(atomDataContainer);
            atomDataContainer=new Sprite();
            var format = new ElementFormat(fontDescriptionNormal);
            format.color = 0x00000FF;
            var n:int = 0;
            var nxtY:Number = 0;
            var atomInfo:String = "value of getAtomBidiLevel() is: " + textLine.getAtomBidiLevel(i)+"\n"
            +"value of getAtomCenter() is: " + textLine.getAtomCenter(i)+"\n"
            +"value of getAtomIndexAtCharIndex() is: " + textLine.getAtomIndexAtCharIndex(i)+"\n"
            +"value of getAtomTextBlockBeginIndex() is: " + textLine.getAtomTextBlockBeginIndex(i)+"\n"
            +"value of getAtomTextBlockEndIndex() is: " + textLine.getAtomTextBlockEndIndex(i)+"\n"
            +"value of getAtomTextRotation() is: " + textLine.getAtomTextRotation(i)+"\n";
            var atomtextBlock:TextBlock = new TextBlock();
            var textElement3:TextElement = new TextElement(atomInfo, format);
            atomtextBlock.content = textElement3;
            createLines(atomtextBlock,20,200,500, atomDataContainer)
            addChild(atomDataContainer);
        }
            
        private function removeAtom(textLine):void
        {
            textLine.removeChild(textLine.userData);
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links><apiOperation id="flash.text.engine:TextLine:dump"><apiName>dump</apiName><shortdesc>
	 Gibt den zugrundeliegenden Inhalt der TextLine als XML-String aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt den zugrundeliegenden Inhalt der TextLine als XML-String aus. Dies kann hilfreich sein beim automatischen Testen. Informationen zu Text, Formatierung und Wiedergabe sind enthalten. Nur verfügbar in der Debugger-Version von Flash Player.
	 
	 <p>Eine Beschreibung der Ausgabe finden Sie unter der TextBlock.dump()-Methode.</p>
	 
	 <p><b>Hinweis:</b> Inhalt und Format der Ausgabe dieser Methode können in der Zukunft geändert werden. Adobe garantiert nicht die Abwärtskompatibilität dieser Methode.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/dump()"><linktext>TextBlock.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:flushAtomData"><apiName>flushAtomData</apiName><shortdesc>
	 Gibt die Atomdaten der Zeile für die Entfernung durch den Garbagekollektor frei.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Gibt die Atomdaten der Zeile für die Entfernung durch den Garbagekollektor frei. Der Begriff <i>Atom</i> bezieht sich auf die nicht weiter unterteilbaren Einheiten, aus denen eine Textzeile besteht. Die Text-Engine generiert Atomdaten, wenn Sie auf die <codeph>atomCount</codeph>-Eigenschaft zugreifen oder eine der Methoden, die Informationen über ein Atom abrufen, aufrufen.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>atomCount</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBidiLevel()"><linktext>getAtomBidiLevel()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBounds()"><linktext>getAtomBounds()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomCenter()"><linktext>getAtomCenter()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomGraphic()"><linktext>getAtomGraphic()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtCharIndex()"><linktext>getAtomIndexAtCharIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtPoint()"><linktext>getAtomIndexAtPoint()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockBeginIndex()"><linktext>getAtomTextBlockBeginIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockEndIndex()"><linktext>getAtomTextBlockEndIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>getAtomTextRotation()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomWordBoundaryOnLeft()"><linktext>getAtomWordBoundaryOnLeft()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBidiLevel"><apiName>getAtomBidiLevel</apiName><shortdesc>
	 Ruft die bidirektionale Ebene des Atoms an der angegebenen Indexposition ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene Atomindex befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Die bidirektionale Ebene des Atoms bei <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert des Atoms (d. h., das erste Atom ist 0, das zweite Atom 1 usw.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ruft die bidirektionale Ebene des Atoms an der angegebenen Indexposition ab. Der Wert wird anhand einer Kombination der Eigenschaft <codeph>TextBlock.bidiLevel</codeph> und der bidirektionalen Unicode-Eigenschaften der Zeichen, aus denen sich die Zeile zusammensetzt, bestimmt.
	 
	 <p>Wenn beispielsweise ein Textblock mit hebräischem Text beginnt, setzen Sie <codeph>TextBlock.bidiLevel</codeph> auf 1, womit „von rechts nach links“ als Standard festgesetzt wird. Enthält der Text ein Zitat in Englisch (von links nach rechts), hat dieser Text die <codeph>AtomBidiLevel</codeph>-Einstellung 2. Kommt im englischen Text eine arabische Textstelle vor (von rechts nach links), lautet die <codeph>AtomBidiLevel</codeph>-Einstellung für diese Stelle 3. Wenn im arabischen Text eine Zahl (von links nach rechts) genannt wird, lautet die <codeph>AtomBidiLevel</codeph>-Einstellung für diese Zahl 4. Es ist nicht von Bedeutung, in welcher Zeile die Atome letztendlich auftreten. Die hebräischen Atome haben die <codeph>AtomBidiLevel</codeph>-Einstellung 1, die englischen Atome haben die <codeph>AtomBidiLevel</codeph>-Einstellung 2, die arabischen Atome haben die <codeph>AtomBidiLevel</codeph>-Einstellung 3 und die Zahlenatome haben die <codeph>AtomBidiLevel</codeph>-Einstellung 4.</p>
	 
	 <p>Der Aufruf dieser Methode führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.
</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>TextBlock.bidiLevel</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBounds"><apiName>getAtomBounds</apiName><shortdesc>
	 Ruft die Grenzen des Atoms beim angegebenen Index in Relation zur Textzeile ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene Atomindex befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Die Grenzen des Atoms bei <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert des Atoms (d. h., das erste Atom ist 0, das zweite Atom 1 usw.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ruft die Grenzen des Atoms beim angegebenen Index in Relation zur Textzeile ab. Die Grenzen des angegebenen Atoms bestehen aus dessen horizontaler Position (<codeph>x</codeph>) in der Zeile, seiner vertikalen Position in der Zeile (<codeph>y</codeph>), seiner Breite (<codeph>w</codeph>) und seiner Höhe (<codeph>h</codeph>). Alle Werte werden in Pixeln angegeben. 
	 
	 <p>Der Aufruf dieser Methode führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomCenter"><apiName>getAtomCenter</apiName><shortdesc>
	 Ruft die Mitte des Atoms gemessen entlang der Grundlinie beim angegebenen Index ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene Atomindex befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Die Mitte des Atoms bei <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert des Atoms (d. h., das erste Atom ist 0, das zweite Atom 1 usw.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ruft die Mitte des Atoms gemessen entlang der Grundlinie beim angegebenen Index ab.
	 
	 <p>Der Aufruf dieser Methode führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomGraphic"><apiName>getAtomGraphic</apiName><shortdesc>
	 Ruft die Grafik des Atoms beim angegebenen Index ab, oder null, wenn es sich bei dem Atom um ein Zeichen handelt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene Atomindex befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Die Grafik des Atoms bei <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert des Atoms (d. h., das erste Atom ist 0, das zweite Atom 1 usw.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ruft die Grafik des Atoms beim angegebenen Index ab, oder <codeph>null</codeph>, wenn es sich bei dem Atom um ein Zeichen handelt.
	 
	 <p>Der Aufruf dieser Methode führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtCharIndex"><apiName>getAtomIndexAtCharIndex</apiName><shortdesc>
	 Gibt den Index des Atoms zurück, das das durch den charIndex-Parameter angegebene Zeichen enthält, oder -1, wenn das Zeichen zu keinem Atom in der Zeile gehört.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Index des Atoms, das das Zeichen bei <codeph>charIndex</codeph> enthält. Gibt -1 zurück, wenn das Zeichen zu keinem Atom in der Zeile gehört.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der Indexwert für das Zeichen mit Basis null (d. h., das erste Zeichen ist 0, das zweite Zeichen 1 usw.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gibt den Index des Atoms zurück, das das durch den <codeph>charIndex</codeph>-Parameter angegebene Zeichen enthält, oder -1, wenn das Zeichen zu keinem Atom in der Zeile gehört. Der <codeph>charIndex</codeph> ist relativ zum gesamten Inhalt des Textblocks, der die Zeile enthält.
	 
	 <p>Der Aufruf dieser Methode führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtPoint"><apiName>getAtomIndexAtPoint</apiName><shortdesc>
	 Gibt den Index des Atoms bei dem durch den x- und y-Parameter angegebenen Punkt zurück, oder -1, wenn sich an diesem Punkt kein Atom befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Index des Atoms unter diesem Punkt. Wenn der Wert -1 zurückgegeben wird, befindet sich der Punkt nicht über einem Atom.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>stageX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Die globale <i>x</i>-Koordinate des zu testenden Punkts.
	 </apiDesc></apiParam><apiParam><apiItemName>stageY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Die globale <i>y</i>-Koordinate des zu testenden Punkts.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gibt den Index des Atoms bei dem durch den <codeph>x</codeph>- und <codeph>y</codeph>Parameter angegebenen Punkt zurück, oder -1, wenn sich an diesem Punkt kein Atom befindet.
	 
	 <p>Der Aufruf dieser Methode führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.</p>
	 
	 <p>Diese Methode verwendet globale Koordinaten und kann somit leicht mit den Eigenschaften <codeph>MouseEvent.stageX</codeph> und der <codeph>MouseEvent.stageY</codeph> kombiniert werden.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockBeginIndex"><apiName>getAtomTextBlockBeginIndex</apiName><shortdesc>
	 Ruft den Textblock-Anfangsindex des Atoms beim angegebenen Index ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene Atomindex befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Textblock-Anfangsindex des Atoms bei <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert des Atoms (d. h., das erste Atom ist 0, das zweite Atom 1 usw.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ruft den Textblock-Anfangsindex des Atoms beim angegebenen Index ab.
	 
	 <p>Der Aufruf dieser Methode führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockEndIndex"><apiName>getAtomTextBlockEndIndex</apiName><shortdesc>
	 Ruft den Textblock-Endindex des Atoms beim angegebenen Index ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene Atomindex befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Textblock-Endindex des Atoms bei <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert des Atoms (d. h., das erste Atom ist 0, das zweite Atom 1 usw.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ruft den Textblock-Endindex des Atoms beim angegebenen Index ab.
	 
	 <p>Der Aufruf dieser Methode führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextRotation"><apiName>getAtomTextRotation</apiName><shortdesc>
	 Ruft die Drehung des Atoms beim angegebenen Index ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene Atomindex befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Die Drehung des Atoms bei <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert des Atoms (d. h., das erste Atom ist 0, das zweite Atom 1 usw.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ruft die Drehung des Atoms beim angegebenen Index ab. Für diese Eigenschaft werden TextRotation-Konstanten verwendet. Die Drehung des Atoms ergibt sich aus den kumulativen Drehungen des Elements und der Zeile. Dies dient hauptsächlich zur Einstellung der Orientierung der Einfügemarke bei der Interaktion mit einer TextLine.
	 
	 <p>Der Aufruf dieser Methode führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomWordBoundaryOnLeft"><apiName>getAtomWordBoundaryOnLeft</apiName><shortdesc>
	 Gibt an, ob es links neben dem Atom beim angegebenen Index eine Wortgrenze gibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene Atomindex befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Ein boolescher Wert, der angibt, ob links neben dem Atom bei <codeph>atomIndex</codeph> eine Wortgrenze vorhanden ist.
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert des Atoms (d. h., das erste Atom ist 0, das zweite Atom 1 usw.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gibt an, ob es links neben dem Atom beim angegebenen Index eine Wortgrenze gibt. Wortgrenzen werden anhand der Unicode-Eigenschaften der Zeichen, aus denen die Zeile besteht, bestimmt.
	 
	 <p>Der Aufruf dieser Methode führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getBaselinePosition"><apiName>getBaselinePosition</apiName><shortdesc>
	 Ruft die Position der angegebenen Grundlinie in Relation zu TextBlock.baselineZero ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die angegebene <codeph>baseline</codeph> kein Mitglied von <codeph>TextBaseline</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Die Position der angegebenen Grundlinie in Relation zu <codeph>TextBlock.baselineZero</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>baseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Die Grundlinie, deren Position abgerufen wird. Verwenden Sie <codeph>TextBaseline</codeph>-Werte.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ruft die Position der angegebenen Grundlinie in Relation zu <codeph>TextBlock.baselineZero</codeph> ab.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getMirrorRegion"><apiName>getMirrorRegion</apiName><shortdesc>
	 Gibt die erste TextLineMirrorRegion in der Zeile zurück, deren mirror-Eigenschaft mit der des vom mirror-Parameter angegebenen übereinstimmt, oder null, falls es keine Übereinstimmung gibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Die erste <codeph>TextLineMirrorRegion</codeph> in der Zeile, deren <codeph>mirror</codeph>-Eigenschaft mit dem angegebenen Wert übereinstimmt. oder <codeph>null</codeph>, falls es keine Übereinstimmung gibt.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLineMirrorRegion</apiOperationClassifier></apiReturn><apiParam><apiItemName>mirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiDesc>Das zu suchende <codeph>EventDispatcher</codeph>-Spiegelobjekt.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gibt die erste <codeph>TextLineMirrorRegion</codeph> in der Zeile zurück, deren <codeph>mirror</codeph>-Eigenschaft mit der des vom <codeph>mirror</codeph>-Parameter angegebenen übereinstimmt, oder <codeph>null</codeph>, falls es keine Übereinstimmung gibt.
	 <p>Auch ein einzelnes <codeph>TextElement</codeph> kann je nach bidirektionaler Ebene und Zeilenumbruch mehrere <codeph>TextLineMirrorRegion</codeph>-Objekte in einer oder mehreren Zeilen produzieren. Die <codeph>nextRegion</codeph>- und <codeph>previousRegion</codeph>-Eigenschaft verknüpfen alle Spiegelbereiche, die aus einem Textelement erstellt wurden.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextLine:MAX_LINE_WIDTH"><apiName>MAX_LINE_WIDTH</apiName><shortdesc> 
	Der Höchstwert der angeforderten Breite einer Textzeile in Pixel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000000</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc> 
	Der Höchstwert der angeforderten Breite einer Textzeile in Pixel. Die <codeph>TextBlock.createTextLine()</codeph>-Methode verwendet diese Konstante als Standardwert für den <codeph>width</codeph>-Parameter, sofern kein Wert angegeben wird.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:userData"><apiName>userData</apiName><shortdesc>
	 Ermöglicht dem Autor, beliebige Daten mit der Textzeile zu verknüpfen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Ermöglicht dem Autor, beliebige Daten mit der Textzeile zu verknüpfen. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:ascent:get"><apiName>ascent</apiName><shortdesc>
	 Gibt die Anzahl der Pixel von der Grundlinie zur Spitze des höchsten Zeichens in der Zeile an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt die Anzahl der Pixel von der Grundlinie zur Spitze des höchsten Zeichens in der Zeile an. Für eine TextLine, die nur ein Grafikelement enthält, wird <codeph>ascent</codeph> auf 0 gesetzt.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:atomCount:get"><apiName>atomCount</apiName><shortdesc>
	 Die Anzahl der Atome in der Zeile, die der Anzahl der nicht weiter teilbaren Elemente einschließlich Leerzeichen und Grafikelemete entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>Die <codeph>validity</codeph> der Zeile ist <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Anzahl der Atome in der Zeile, die der Anzahl der nicht weiter teilbaren Elemente einschließlich Leerzeichen und Grafikelemente entspricht. 
	 
	 <p>Der Zugriff auf diese Eigenschaft führt dazu, dass der Player die Atomdaten erstellt, falls sie noch nicht vorhanden sind.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:descent:get"><apiName>descent</apiName><shortdesc>
	 Gibt die Anzahl der Pixel von der Grundlinie zum unteren Rand der längsten Unterlänge in der Zeile an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt die Anzahl der Pixel von der Grundlinie zum unteren Rand der längsten Unterlänge in der Zeile an. Für eine TextLine, die nur ein Grafikelement enthält, wird <codeph>descent</codeph> auf 0 gesetzt.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:hasGraphicElement:get"><apiName>hasGraphicElement</apiName><shortdesc>
	 Gibt an, ob die Textzeile Grafikelemente enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, ob die Textzeile Grafikelemente enthält.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:mirrorRegions:get"><apiName>mirrorRegions</apiName><shortdesc>
	 Ein Vektor, der die TextLineMirrorRegion-Objekte enthält, die der Zeile zugewiesen sind, oder null, wenn keine vorhanden sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$flash.text.engine:TextLineMirrorRegion"/></apiValueDef><apiDesc>
	 Ein Vektor, der die <codeph>TextLineMirrorRegion</codeph>-Objekte enthält, oder <codeph>null</codeph>, wenn keine vorhanden sind.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:nextLine:get"><apiName>nextLine</apiName><shortdesc>
	 Die nächste TextLine im TextBlock oder null, wenn die aktuelle Zeile die letzte Zeile im Block ist oder die „validity“ der Zeile TextLineValidity.STATIC ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Die nächste TextLine im TextBlock oder <codeph>null</codeph>, wenn die aktuelle Zeile die letzte Zeile im Block ist oder die „validity“ der Zeile <codeph>TextLineValidity.STATIC</codeph> ist.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/previousLine"><linktext>previousLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:previousLine:get"><apiName>previousLine</apiName><shortdesc>
	 Die vorherige TextLine im TextBlock oder null, wenn dies die erste Zeile im Block ist oder die „validity“ der Zeile TextLineValidity.STATIC ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Die vorherige TextLine im TextBlock oder <codeph>null</codeph>, wenn dies die erste Zeile im Block ist oder die „validity“ der Zeile <codeph>TextLineValidity.STATIC</codeph> ist.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/nextLine"><linktext>nextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:rawTextLength:get"><apiName>rawTextLength</apiName><shortdesc>
	 Die Länge des unformatierten Texts im Textblock, der zur Zeile wurde, einschließlich der U+FDEF-Zeichen, die Grafikelemente repräsentieren, und der nachgestellten Leerzeichen, die Teil der Zeile sind, aber nicht angezeigt werden.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Die Länge des unformatierten Texts im Textblock, der zur Zeile wurde, einschließlich der U+FDEF-Zeichen, die Grafikelemente repräsentieren, und der nachgestellten Leerzeichen, die Teil der Zeile sind, aber nicht angezeigt werden.

	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement/rawText"><linktext>TextElement.rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:specifiedWidth:get"><apiName>specifiedWidth</apiName><shortdesc>
	 Die Breite, die für die TextBlock.createTextLine()-Methode angegeben wurde, als diese die Zeile erstellt hat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Die Breite, die für die <codeph>TextBlock.createTextLine()</codeph>-Methode angegeben wurde, als diese die Zeile erstellt hat. Dieser Wert ist hilfreich, wenn eine Änderung einen neuen Zeilenumbruch erfordert.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link><link href="flash.text.engine.xml#TextLine/unjustifiedTextWidth"><linktext>unjustifiedTextWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 Der TextBlock, der diese Textzeile enthält, oder null, wenn die „validity“ der Zeile TextLineValidity.STATIC ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 Der TextBlock, der diese Textzeile enthält, oder null, wenn die „validity“ der Zeile <codeph>TextLineValidity.STATIC</codeph> ist.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 Der Index des ersten Zeichens der Zeile im unformatierten Text des Textblocks.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Der Index des ersten Zeichens der Zeile im unformatierten Text des Textblocks.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textHeight:get"><apiName>textHeight</apiName><shortdesc>
	 Die logische Höhe der Textzeile, die der Summe von ascent + descent entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Die logische Höhe der Textzeile, die der Summe von <codeph>ascent</codeph> + <codeph>descent</codeph> entspricht. Um die Inked-Höhe zu erhalten, greifen Sie auf die vererbte <codeph>height</codeph>-Eigenschaft zu.
	 
	 <p>Der Wert wird berechnet aus dem Unterschied zwischen den Grundlinien, die die Zeile eingrenzen, entweder ideo top/bottom oder ascent/descent, je nachdem, ob TextBlock.baselineZero ideo ist oder nicht. Grafikelemente werden beim Berechnen dieser Grundlinien nicht berücksichtigt.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/height"><linktext>flash.display.DisplayObject.height</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textWidth:get"><apiName>textWidth</apiName><shortdesc>
	 Die logische Breite der Textzeile; dies ist die Breite, die die Text-Engine für das Zeilenlayout verwendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Die logische Breite der Textzeile; dies ist die Breite, die die Text-Engine für das Zeilenlayout verwendet. Durch den Zugriff auf die vererbte <codeph>width</codeph>-Eigenschaft wird die tatsächliche Breite des Begrenzungsrahmens aller gezeichneten Pixel abgerufen.
	 
	 </apiDesc><example conref="examples\TextLine_textWidthExample.as"> In diesem Beispiel wird eine Zeile einmal in normalem Schriftschnitt und einmal in Kursivschrift dargestellt und die Werte der Eigenschaften <codeph>specifiedWidth</codeph>, <codeph>textWidth</codeph> und <codeph>width</codeph> werden nachverfolgt. Die Trace-Ausgabe ist: 
 <ul>
         <li>specifiedWidth is: 500</li>
      <li>textWidth is: 268.9921875</li>
      <li>width is: 269</li>
      <li>specifiedWidth is: 500</li>
      <li>textWidth is: 267.52734375</li>
      <li>width is: 267.55</li>
 </ul>
<codeblock>
 
package {
import flash.display.Sprite;
import flash.text.engine.TextBlock;
import flash.text.engine.TextElement;
import flash.text.engine.TextLine;
import flash.text.engine.FontDescription;
import flash.text.engine.ElementFormat;
import flash.text.engine.FontPosture;

    public class TextLine_textWidthExample extends Sprite {
        
        public function TextLine_textWidthExample() {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
            var yPos:Number = 20;
            var fontDescription:FontDescription = new FontDescription();
            var textBlock:TextBlock = new TextBlock();
            fontDescription.fontPosture = FontPosture.NORMAL;
            var format:ElementFormat = new ElementFormat(fontDescription, 12);
            var textElement:TextElement = new TextElement(str, format);
            textBlock.content = textElement;
            createLine(textBlock, yPos);
            var fontDescriptionItalic = fontDescription.clone();
            fontDescriptionItalic.fontPosture = FontPosture.ITALIC;
            var formatItalic = new ElementFormat(fontDescriptionItalic, 12);
            textElement = new TextElement(str, formatItalic);
            textBlock.content = textElement;
            createLine(textBlock, yPos + 20);
        }

        private function createLine(textBlock:TextBlock, yPos:Number):void {
            var textLine:TextLine = textBlock.createTextLine (null, 500);
            trace("specifiedWidth is: " + textLine.specifiedWidth);
            trace("textWidth is: " + textLine.textWidth);
            trace("width is: " + textLine.width);
            addChild(textLine);
            textLine.x = 15;
            textLine.y = yPos;     
        }
    }
}

</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/specifiedWidth"><linktext>specifiedWidth</linktext></link><link href="flash.display.xml#DisplayObject/width"><linktext>flash.display.DisplayObject.width</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:unjustifiedTextWidth:get"><apiName>unjustifiedTextWidth</apiName><shortdesc>
	 Die Breite der Zeile, wenn dieser kein Blocksatz zugewiesen wäre.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Die Breite der Zeile, wenn dieser kein Blocksatz zugewiesen wäre. Bei Text ohne Blocksatz stimmt dieser Wert mit <codeph>textWidth</codeph> überein. Bei Text im Blocksatz gibt dieser Wert an, welche Länge der Text ohne Blocksatz hätte, und <codeph>textWidth</codeph> stellt die tatsächliche Zeilenbreite dar. Wenn beispielsweise der folgende String im Blocksatz steht und mit der Breite 500 an <codeph>TextBlock.createTextLine()</codeph> übergeben wird, hat er eine tatsächliche Breite von 500, aber die Breite ohne Blocksatz beträgt 268,9921875.
	 
	 </apiDesc><example>Wenn der String im folgenden Beispiel im Blocksatz steht und mit der Breite 500 an TextBlock.createTextLine() übergeben wird, wird ihm eine tatsächliche Breite von 500 zugewiesen, aber die Breite ohne Blocksatz beträgt 268,9921875.
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import flash.text.engine.TextBlock;
	 import flash.text.engine.TextElement;
	 import flash.text.engine.TextLine;
	 import flash.text.engine.FontDescription;
	 import flash.text.engine.ElementFormat;
	 import flash.text.engine.SpaceJustifier;
	 import flash.text.engine.LineJustification;

	 var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
	 var fontDescription:FontDescription = new FontDescription();
	 var textBlock:TextBlock = new TextBlock();
	 var format:ElementFormat = new ElementFormat(fontDescription, 12);
	 var textElement:TextElement = new TextElement(str, format);
	 textBlock.content = textElement;
	 var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_INCLUDING_LAST);
	 textBlock.textJustifier = spaceJustifier;
	 var textLine:TextLine = textBlock.createTextLine(null, 500);
	 textLine.y = 20;

	 addChild(textLine);
	 trace("textWidth value is: " + textLine.textWidth);		// 500.00244140625
	 trace("unjustifiedTextWidth is: " + textLine.unjustifiedTextWidth); // 268.9921875
	 </codeblock>
	 
	 </example></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextLine/specifiedTextWidth"><linktext>specifiedTextWidth</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:validity:get"><apiName>validity</apiName><shortdesc>
	 Gibt die aktuelle Gültigkeit der Textzeile an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Wenn der aktuelle Wert <codeph>TextLineValidity.STATIC</codeph> ist.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn der aktuelle Wert <codeph>TextLineValidity.INVALID</codeph>ist und der neue Wert nicht <codeph>TextValidity.STATIC</codeph> lautet.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn der aktuelle Wert <codeph>TextLineValidity.POSSIBLY_INVALID</codeph> ist und der neue Wert <codeph>TextLineValidity.VALID</codeph> lautet.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn der neue Wert <codeph>TextLineValidity.POSSIBLY_INVALID</codeph> ist.
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt die aktuelle Gültigkeit der Textzeile an. Systemwerte für diese Eigenschaft sind in der <codeph>TextLineValidity</codeph>-Klasse enthalten. Die Regeln für das Einstellen dieser Eigenschaft lauten:
	 
	 <p>Eine Zeile gilt als USER_INVALID, wenn die Gültigkeit auf einen String eingestellt ist, der kein Mitglied von <codeph>TextLineValidity</codeph> ist. USER_INVALID ist hier eine Abstraktion, um jeden derartigen Wert darzustellen.</p>
	 
	 <p>Wenn der Inhalt des TextBlock geändert wird, kennzeichnet der Player-Code die betroffenen Textzeilen, die vorherige Zeile und alle folgenden Zeilen als INVALID. Die vorherige Zeile muss als ungültig gekennzeichnet werden, wenn eine Änderung zulässt, dass die vorherige Zeile einen Teil des Inhalts aufnimmt, der sich ursprünglich in der ersten betroffenen Zeile befand.</p>
	 
	 <p>Neu umbrochene Zeilen sind immer VALID. Der Player kann nachfolgende Zeilen von VALID zu POSSIBLY_INVALID oder INVALID ändern. Zeilen mit der Gültigkeit POSSIBLY_INVALID können zu VALID geändert werden, falls die Zeilenumbrüche übereinstimmen, oder zu INVALID, falls dies nicht der Fall ist.</p>
	 
	 <p>Benutzercode kann Zeilen mit der Gültigkeit VALID zu INVALID oder USER_INVALID ändern und Zeilen mit der Gültigkeit USER_INVALID als VALID kennzeichnen. Benutzercode kann Zeilen nicht als POSSIBLY_INVALID kennzeichnen.</p>
	 
	 <p>Benutzercode kann beliebige Zeilen als STATIC kennzeichnen. Dadurch wird das <codeph>block</codeph>-Mitglied <codeph>null</codeph>. Außerdem werden die Atomdaten der Zeile gelöscht und das erneute Erstellen dieser Daten wird verhindert. Alle Grafikelemente in einer STATIC-Textzeile werden entfernt und erhalten neue übergeordnete Elemente, wenn sie Teil einer Textzeile sind, die aus dem Textblock umbrochen wurde, aus dem die STATIC-Textzeile ursprünglich stammt.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabStop"><apiName>TabStop</apiName><shortdesc>
 Die TabStop-Klasse stellt die Eigenschaften eines Tabulators in einem Textblock dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die TabStop-Klasse stellt die Eigenschaften eines Tabulators in einem Textblock dar. Sie weisen Tabstopps als einen Vektor von TabStop-Objekten zur <codeph>TextBlock.tabStops</codeph>-Eigenschaft zu.
 
 <p>Wenn Sie die Eigenschaften eines TabStop-Objekts festlegen, nachdem Sie es auf einen TextBlock angewendet haben, wird der TextBlock hierdurch nicht ungültig.</p>
 
 </apiDesc><example conref="examples\TabStopExample.as"> In diesem Beispiel werden die Effekte der vier Tabstopp-Ausrichtungseinstellungen (START, CENTER, DECIMAL und END) illustriert.
<codeblock>
package {
    
    import flash.text.engine.*;
    import flash.display.Sprite;
    
    public class TabStopExample extends Sprite {
        
        public function TabStopExample():void {
            var container:Sprite = new Sprite(); 
            
            var english:ElementFormat = new ElementFormat(); 
            english.fontDescription = new FontDescription("Arial"); 
            english.fontSize = 16;
            english.locale = "en"; 
            
            var tabStops:Vector.&lt;TabStop> = new Vector.&lt;TabStop>();    
            tabStops.push(
                new TabStop(TabAlignment.START, 20),
                new TabStop(TabAlignment.CENTER, 120),
                new TabStop(TabAlignment.DECIMAL, 220, "."),
                new TabStop(TabAlignment.END, 320)
            ); 
    
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(
                "\tstart\tcenter\tdeci.mal\tend\n" +        
                "\tl\tl\t3.4\tl\n" +
                "\tlm\tlm\t234.56\tlm\n" +
                "\tlmn\tlmn\t12345678.34567\tlmn\n"
                , english); 
            textBlock.tabStops = tabStops;
            var y:Number = 60;
            var previousTextLine:TextLine = null; 
            var textLine:TextLine;
            var i:int;
            var tabOrigin:Number = 100;
            for (i = 0; i &lt; 4; i++) {
                textLine = textBlock.createTextLine(previousTextLine, 1000, 0); 
                textLine.x = 20;
                textLine.y = y; 
                
                container.addChild(textLine);     
                
                y += 25; 
                previousTextLine = textLine; 
            }
            addChild(container);        
        }
    }
}

</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>TextBlock.tabStops</linktext></link><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links><apiConstructor id="flash.text.engine:TabStop:TabStop"><apiName>TabStop</apiName><shortdesc>
	 Erstellt einen neuen Tabulator.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Das angegebene <codeph>alignment</codeph> ist kein Mitglied von <codeph>TabAlignment</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>alignment</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>start</apiData><apiDesc>Der Tabulatorausrichtungstyp dieses Tabstopps. Gültige Werte für diese Eigenschaft sind in der <codeph>TabAlignment</codeph>-Klasse enthalten. Der Standardwert ist <codeph>TabAlignment.START</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Die Position des Tabstopps, in Pixel. Der Standardwert ist <codeph>0,0</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>decimalAlignmentToken</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData/><apiDesc>Der Ausrichtungstoken, der zu verwenden ist, wenn <codeph>alignment</codeph> gleich <codeph>TabAlignment.DECIMAL</codeph> ist. Der Standardwert ist <codeph>""</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Erstellt einen neuen Tabstopps.
     </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:TabStop:alignment:get"><apiName>alignment</apiName><shortdesc>
	 Legt die Ausrichtung für diesen Tabstopp fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>TabAlignment</codeph>ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Legt die Ausrichtung für diesen Tabstopp fest. Verwenden Sie Konstanten, die in der TabAlignment-Klasse definiert sind, um diese Eigenschaft festzulegen.
	 
	 <p>Der Standardwert ist <codeph>TabAlignment.START</codeph>.</p>
	 
	 <p>Verwenden Sie das <codeph>lineOffset</codeph>-Argument für <codeph>TextBlock.createTextLine()</codeph>, um die Tabstopps zu ändern, wenn der Ursprung der Zeile nicht mit anderen Zeilen, die die gleichen Tabstopps verwenden, ausgerichtet ist.</p>
	 
	 <p>Verwenden Sie die folgenden Konstanten aus der TabAlignment-Klasse, um den Wert dieser Eigenschaft festzulegen:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>TabAlignment.START</codeph></entry>
	 	<entry>Die Eigenschaft <codeph>position</codeph> gibt die Pixelzahl an, die der <i>start</i> des mit Tabstopps eingerückten Texts vom Anfang der Textzeile entfernt ist.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.CENTER</codeph></entry>
	 	<entry>Die Eigenschaft <codeph>position</codeph> gibt die Pixelzahl an, die das <i>center</i> des mit Tabstopps eingerückten Texts vom Anfang der Textzeile entfernt ist.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.END</codeph></entry>
	 	<entry>Die Eigenschaft <codeph>position</codeph> gibt die Pixelzahl an, die das <i>end</i> des mit Tabstopps eingerückten Texts vom Anfang der Textzeile entfernt ist.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.DECIMAL</codeph></entry>
	 	<entry>Die Eigenschaft <codeph>position</codeph> gibt die Pixelzahl an, die der Ausrichtungstoken vom Anfang der Textzeile entfernt ist.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
	 Gibt den Ausrichtungstoken an, der verwendet werden soll, um die alignment-Eigenschaft auf TabAlignment.DECIMAL zu setzen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt den Ausrichtungstoken an, der verwendet werden soll, um die <codeph>alignment</codeph>-Eigenschaft auf <codeph>TabAlignment.DECIMAL</codeph> zu setzen. Der Wert ist ein String, der in der Textzeile auftritt.
	 
	 <p>Der Standardwert ist <codeph>""</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment/DECIMAL"><linktext>TabAlignment.DECIMAL</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:position:get"><apiName>position</apiName><shortdesc>
	 Die Position des Tabstopps, in Pixeln, in Relation zum Anfang der Textzeile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Wenn ein Wert unter 0,0 festgelegt ist.
   	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Position des Tabstopps, in Pixeln, in Relation zum Anfang der Textzeile.
	 
	 <p>Der Standardwert ist 0,0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontLookup"><apiName>FontLookup</apiName><shortdesc>
Die FontLookup-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit FontDescription.fontLookup verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die FontLookup-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit <codeph>FontDescription.fontLookup</codeph> verwendet werden. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link></related-links><apiValue id="flash.text.engine:FontLookup:DEVICE"><apiName>DEVICE</apiName><shortdesc> 
	Wird verwendet, um das Suchen nach einer Geräteschriftart anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>device</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um das Suchen nach einer Geräteschriftart anzuzeigen. Flash Player verwendet die im System installierten Schriften, auf dem die SWF-Datei ausgeführt wird.
	
	<p>Die Verwendung von Geräteschriftarten führt zu einer Reduzierung der Filmgröße, da die Schriftartdaten nicht in der Datei gespeichert werden.</p>
	
	<p>Mit Geräteschriftarten wiedergegebener Text wird auf verschiedenen Systemen und Plattformen nicht immer gleich angezeigt, da Flash Player die Schriftarten verwendet, die auf dem System installiert sind.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontLookup:EMBEDDED_CFF"><apiName>EMBEDDED_CFF</apiName><shortdesc> 
	Wird verwendet, um das Suchen nach einer eingebetteten CFF-Schriftart anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>embeddedCFF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um das Suchen nach einer eingebetteten CFF-Schriftart anzuzeigen. Flash Player verwendet Schriftkonturen, die in der veröffentlichten SWF-Datei eingebettet sind.
	
	<p>Textfelder, die eingebettete Schriftarten verwenden, werden immer in der gewählten Schriftart angezeigt, unabhängig davon, ob die jeweilige Schriftart auf dem Wiedergabesystem installiert ist oder nicht.</p>
	
	<p>Eingebettete Schriftarten haben den Nachteil, dass sie die Größe der SWF-Datei erheblich vergrößern.</p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TypographicCase"><apiName>TypographicCase</apiName><shortdesc>
Die TypographicCase-Klasse ist eine Zusammenstellung von Konstantenwerten zur Einstellung der typographicCase-Eigenschaft in der ElementFormat-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die TypographicCase-Klasse ist eine Zusammenstellung von Konstantenwerten zur Einstellung der <codeph>typographicCase</codeph>-Eigenschaft in der ElementFormat-Klasse. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/typographicCase"><linktext>ElementFormat.typographicCase</linktext></link></related-links><apiValue id="flash.text.engine:TypographicCase:CAPS"><apiName>CAPS</apiName><shortdesc> 
	Gibt an, dass der Abstand bei der Ausgabe für Großbuchstaben angepasst wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>caps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass der Abstand bei der Ausgabe für Großbuchstaben angepasst wird.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:CAPS_AND_SMALL_CAPS"><apiName>CAPS_AND_SMALL_CAPS</apiName><shortdesc> 
	Gibt an, dass für alle Kleinbuchstaben bei der Ausgabe Kapitälchenglyphen verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsAndSmallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass für alle Kleinbuchstaben bei der Ausgabe Kapitälchenglyphen verwendet werden.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Legt standardmäßig die Groß-/Kleinschreibung fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Legt standardmäßig die Groß-/Kleinschreibung fest. Die Ergebnisse sind schriftartenabhängig; Zeichen verwenden die Einstellungen, wie sie vom Schriftartdesigner festgelegt wurden, ohne dass irgendwelche Merkmale angewendet werden.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> 
	Gibt an, dass alle Buchstaben bei der Ausgabe Kleinbuchstabenglyphen verwenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass alle Buchstaben bei der Ausgabe Kleinbuchstabenglyphen verwenden.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:SMALL_CAPS"><apiName>SMALL_CAPS</apiName><shortdesc> 
	Gibt an, dass für Großbuchstaben bei der Ausgabe Kapitälchenglyphen verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>smallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass für Großbuchstaben bei der Ausgabe Kapitälchenglyphen verwendet werden.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:TITLE"><apiName>TITLE</apiName><shortdesc> 
	Gibt an, dass Großbuchstaben bei der Ausgabe Titelglyphen verwenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>title</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass Großbuchstaben bei der Ausgabe Titelglyphen verwenden.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> 
	Gibt an, dass alle Buchstaben bei der Ausgabe Großbuchstabenglyphen verwenden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass alle Buchstaben bei der Ausgabe Großbuchstabenglyphen verwenden.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitCase"><apiName>DigitCase</apiName><shortdesc>
Die DigitWidth-Klasse ist eine Zusammenstellung von Konstantenwerten, die zur Einstellung der digitWidth-Eigenschaft in der ElementFormat-Klasse verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die DigitWidth-Klasse ist eine Zusammenstellung von Konstantenwerten, die zur Einstellung der <codeph>digitCase</codeph>-Eigenschaft in der ElementFormat-Klasse verwendet werden. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitCase"><linktext>flash.text.engine.ElementFormat.digitCase</linktext></link></related-links><apiValue id="flash.text.engine:DigitCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Wird verwendet, um die standardmäßige Ziffernart festzulegen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um die standardmäßige Ziffernart festzulegen. Die Ergebnisse sind schriftartenabhängig; Zeichen verwenden die Einstellungen, wie sie vom Schriftartdesigner festgelegt wurden, ohne dass irgendwelche Merkmale angewendet werden.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:LINING"><apiName>LINING</apiName><shortdesc> 
	Wird verwendet, um die Versalschreibweise für Ziffern anzugeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lining</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um die Versalschreibweise für Ziffern anzugeben.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:OLD_STYLE"><apiName>OLD_STYLE</apiName><shortdesc> 
	Wird verwendet, um die Mediävalschreibweise für Ziffern anzugeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>oldStyle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um die Mediävalschreibweise für Ziffern anzugeben.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextElement"><apiName>TextElement</apiName><shortdesc>
 Die TextElement-Klasse stellt einen String aus formatiertem Text dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die TextElement-Klasse stellt einen String aus formatiertem Text dar. Weisen Sie ein TextElement-Objekt der <codeph>content</codeph>-Eigenschaft eines TextBlock-Objekts zu, um einen Textblock zu erstellen. Weisen Sie es einem GroupElement-Objekt zu, um es mit anderen Text- und Grafikelementen zu einer Gruppe zu kombinieren. Verwenden Sie die ElementFormat-Klasse, um den Text zu formatieren.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:TextElement:TextElement"><apiName>TextElement</apiName><shortdesc>
	 Erstellt eine neue TextElement-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Text für das Element. Der Standardwert ist <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Das Elementformat für den Text in dem Element. Der Standardwert ist <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Das <codeph>EventDispatcher</codeph>-Objekt, das Kopien jedes Ereignisses erhält, das an Textzeilen basierend auf diesem Inhaltselement übergeben wird. Der Standardwert ist <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Die auf das Element angewendete Drehung als Einheit. Verwenden Sie <codeph>flash.text.engine.TextRotation</codeph>-Konstanten für diese Eigenschaft. Der Standardwert ist <codeph>flash.text.engine.TextRotation.ROTATE_0</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Erstellt eine neue TextElement-Instanz. 
	 
	 </apiDesc><example conref="examples\TextElementExample.as"> Im folgenden Beispiel wird aus einem Text ein TextElement-Objekt erstellt, mit der Schriftgröße 12 und der Farbe Rot (0xCC0000) formatiert und der <codeph>content</codeph>-Eigenschaft eines TextBlock zugewiesen. Es ruft die createLines()-Funktion auf, um den Textblock in Zeilen mit je 150 Pixel aufzuteilen.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    
    public class TextElementExample extends Sprite {
        
        public function TextElementExample():void {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:TextElement:replaceText"><apiName>replaceText</apiName><shortdesc>
	 Ersetzt den Zeichenbereich, der durch die Parameter „beginIndex“ und „endIndex“ angegeben wird, durch den Inhalt des Parameters „newText“.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene <codeph>beginIndex</codeph> bzw. <codeph>endIndex</codeph> befindet sich nicht im gültigen Bereich.
     	 
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert für die Startposition des Ersetzungsbereichs.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert, der der Endposition des Ersetzungsbereichs folgt.
	 </apiDesc></apiParam><apiParam><apiItemName>newText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Text, durch den der angegebene Zeichenbereich ersetzt werden soll.
	  
     	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ersetzt den Zeichenbereich, der durch die Parameter <codeph>beginIndex</codeph> und <codeph>endIndex</codeph> angegeben wird, durch den Inhalt des Parameters <codeph>newText</codeph>. Der <codeph>beginIndex</codeph>- und <codeph>endIndex</codeph>-Wert beziehen sich auf den aktuellen Inhalt von <codeph>text</codeph>.
	 <p>Um Text zu löschen, übergeben Sie <codeph>null</codeph> für <codeph>newText</codeph>.</p>
	 <p>Um Text einzufügen, übergeben Sie den gleichen Wert für <codeph>beginIndex</codeph> und <codeph>endIndex</codeph>. Der neue Text wird vor dem angegebenen Index eingefügt.</p>
	 <p>Um Text anzuhängen, übergeben Sie <codeph>text.length</codeph> für <codeph>beginIndex</codeph> und <codeph>endIndex</codeph>.</p>
	 <p>Um den gesamten Text festzulegen, übergeben Sie 0 für <codeph>beginIndex</codeph> und <codeph>text.length</codeph> für <codeph>endIndex</codeph>.</p>
	 
	 </apiDesc><example conref="examples\TextElement_replaceTextExample.as"> In diesem Beispiel wird <codeph>replaceText()</codeph> mehrmals aufgerufen, um Folgendes zu tun:
     <ul>
         <li> Einfügen eines Strings am Anfang des Texts</li>
         <li> Anfügen eines Strings am Ende des Texts</li>
         <li> Einfügen eines Strings in der Mitte des Texts</li>
        <li> Ersetzen des ganzen Texts durch neuen Text</li>
    </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    
    
    public class TextElement_replaceTextExample extends Sprite {
        public function TextElement_replaceTextExample():void {
            
            var str:String = "0123456";
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 14;
            var textElement:TextElement = new TextElement(str, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textElement.replaceText(0, 0, "abc");  
            createLine(textBlock, 20);           //"abc0123456"
            textElement.replaceText(10, 10, "abc");   
            createLine(textBlock, 40);            // "abc0123456abc"
            textElement.replaceText(5, 8, "abc");
            createLine(textBlock, 60);         // "abc01abc56abc"
            textElement.replaceText(0, 13, "abc");
            createLine(textBlock, 80);            // "abc"
            textElement.replaceText(0, 3, "That's all she wrote!");
            createLine(textBlock, 100);        // "That's all she wrote" */
        }
            
        private function createLine(textBlock:TextBlock, y:Number):void {
            var textLine:TextLine = textBlock.createTextLine(null, 150);
            textLine.x = 10;
            textLine.y = y;
            addChild(textLine);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextElement:text:set"><apiName>text</apiName><shortdesc>
	 Erhält den Text, der Inhalt des Elements ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Erhält den Text, der Inhalt des Elements ist.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineValidity"><apiName>TextLineValidity</apiName><shortdesc>
Die TextLineValidity-Klasse ist eine Zusammenstellung von Konstantenwerten zur Einstellung der validity-Eigenschaft in der TextLine-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die TextLineValidity-Klasse ist eine Zusammenstellung von Konstantenwerten zur Einstellung der <codeph>validity</codeph>-Eigenschaft in der TextLine-Klasse. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link></related-links><apiValue id="flash.text.engine:TextLineValidity:INVALID"><apiName>INVALID</apiName><shortdesc> 
	Gibt an, dass die Zeile ungültig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass die Zeile ungültig ist.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:POSSIBLY_INVALID"><apiName>POSSIBLY_INVALID</apiName><shortdesc> 
	Gibt an, dass die Textzeile möglicherweise ungültig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>possiblyInvalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass die Textzeile möglicherweise ungültig ist. Flash Player verwendet diese Gültigkeit während des erneuten Umbruchs eines zuvor umbrochenen Textblocks, dessen Inhalt sich nicht geändert hat. Sie können diesen Wert nicht festlegen.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:STATIC"><apiName>STATIC</apiName><shortdesc> 
	Gibt an, dass die Zeile statisch ist, dass die Verbindung zwischen Zeile und Textblock aufgehoben wurde und dass die für die Darstellung nicht benötigten Atomdaten verworfen wurden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>static</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass die Zeile statisch ist, dass die Verbindung zwischen Zeile und Textblock aufgehoben wurde und dass die für die Darstellung nicht benötigten Atomdaten verworfen wurden.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:VALID"><apiName>VALID</apiName><shortdesc> 
	Gibt an, das die Textzeile gültig ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>valid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, das die Textzeile gültig ist.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontPosture"><apiName>FontPosture</apiName><shortdesc>
Die FontPosture-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit FontDescription.fontPosture verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die FontPosture-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit <codeph>FontDescription.fontPosture</codeph> verwendet werden. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontPosture"><linktext>flash.text.engine.FontDescription.fontPosture</linktext></link></related-links><apiValue id="flash.text.engine:FontPosture:ITALIC"><apiName>ITALIC</apiName><shortdesc> 
	Wird verwendet, um den Schriftschnitt der kursiven Schriftarten anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>italic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um den Schriftschnitt der kursiven Schriftarten anzuzeigen.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontPosture:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	Wird verwendet, um den Schriftschnitt der regulären Schriftarten anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um den Schriftschnitt der regulären Schriftarten anzuzeigen.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:JustificationStyle"><apiName>JustificationStyle</apiName><shortdesc>
Die JustificationStyle-Klasse ist eine Zusammenstellung von Konstantenwerten zur Einstellung der justificationStyle-Eigenschaft in der EastAsianJustifier-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die JustificationStyle-Klasse ist eine Zusammenstellung von Konstantenwerten zur Einstellung der <codeph>justificationStyle</codeph>-Eigenschaft in der EastAsianJustifier-Klasse. Diese Konstanten legen die Optionen für die Verarbeitung von Kinsoku-Zeichen fest. Diese japanischen Zeichen können weder am Anfang noch am Ende einer Zeile stehen.

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/justificationStyle"><linktext>EastAsianJustifier.justificationStyle</linktext></link></related-links><apiValue id="flash.text.engine:JustificationStyle:PRIORITIZE_LEAST_ADJUSTMENT"><apiName>PRIORITIZE_LEAST_ADJUSTMENT</apiName><shortdesc> 
	Richtet den Text im Blocksatz aus, wobei die Zeile gedehnt oder komprimiert wird, je nachdem, welche Methode das beste Ergebnis für die gewünschte Breite liefert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>prioritizeLeastAdjustment</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Richtet den Text im Blocksatz aus, wobei die Zeile gedehnt oder komprimiert wird, je nachdem, welche Methode das beste Ergebnis für die gewünschte Breite liefert.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_IN_KINSOKU"><apiName>PUSH_IN_KINSOKU</apiName><shortdesc> 
	Richtet den Text im Blocksatz aus, wobei Kinsoku am Ende der Zeile komprimiert wird. Falls kein Kinsoku vorhanden ist oder falls der Platz nicht ausreichend ist, wird die Zeile gedehnt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushInKinsoku</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Richtet den Text im Blocksatz aus, wobei Kinsoku am Ende der Zeile komprimiert wird. Falls kein Kinsoku vorhanden ist oder falls der Platz nicht ausreichend ist, wird die Zeile gedehnt.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_OUT_ONLY"><apiName>PUSH_OUT_ONLY</apiName><shortdesc> 
	Wendet Blocksatz an, wobei die Zeile gedehnt wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushOutOnly</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wendet Blocksatz an, wobei die Zeile gedehnt wird.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
 Die EastAsianJustifier-Klasse besitzt Eigenschaften für die Steuerung der Ausrichtungsoptionen der Textzeilen, deren aktueller Text primär ostasiatischer Text ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die EastAsianJustifier-Klasse besitzt Eigenschaften für die Steuerung der Ausrichtungsoptionen der Textzeilen, deren aktueller Text primär ostasiatischer Text ist. 
 
 <p> Verwenden Sie den Konstruktor <codeph>new EastAsianJustifier()</codeph>, um ein EastAsianJustifier-Objekt zu erstellen, bevor Sie seine Eigenschaften festlegen. Wenn Sie die Eigenschaften eines EastAsianJustifier-Objekts festlegen, nachdem Sie es auf einen Textblock angewendet haben, wird der TextBlock hierdurch nicht ungültig.</p>
 
 </apiDesc><example conref="examples\EastAsianJustifierExample.as"> In diesem Beispiel wird ein japanischer Textblock vertikal angezeigt und der Text wird mit EastAsianJustifier-Eigenschaften im Blocksatz ausgerichtet.
<codeblock>
 
package {
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.EastAsianJustifier;
    import flash.text.engine.LineJustification;
    import flash.text.engine.TextRotation;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.display.Stage;
    import flash.display.Sprite;
    import flash.system.Capabilities;
    
    public class EastAsianJustifierExample extends Sprite {
        
        public function EastAsianJustifierExample():void {
            
            var Japanese_txt:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);
            
            var textBlock:TextBlock = new TextBlock();
            var font:FontDescription = new FontDescription();
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0xCC0000;
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_INCLUDING_LAST);
            textBlock.lineRotation = TextRotation.ROTATE_90;
            var linePosition:Number = this.stage.stageWidth - 75;
            if (Capabilities.os.search("Mac OS") > -1) 
                // set fontName: Kozuka Mincho Pro R
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R";                     
            else 
                font.fontName = "Kozuka Mincho Pro R";
            textBlock.content = new TextElement(Japanese_txt, format);
            var previousLine:TextLine = null;
                
            while (true) 
            {
                var textLine:TextLine = textBlock.createTextLine(previousLine, 320);
                if (textLine == null) 
                    break;
                textLine.y = 20;
                textLine.x = linePosition;
                linePosition -= 25;
                addChild(textLine);                
                previousLine = textLine;
            }
        }
    }
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:EastAsianJustifier:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
     Erstellt ein EastAsianJustifier-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Die angegebene <codeph>locale</codeph> ist entweder <codeph>null</codeph> oder zu kurz, um ein gültiges Gebietsschema anzugeben.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>lineJustification</codeph> ist kein Mitglied von <codeph>LineJustification</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der angegebene <codeph>justifictionStyle</codeph> ist kein Mitglied von <codeph>JustificationStyle</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>ja</apiData><apiDesc>Das Gebietsschema, das die Regeln für den Blocksatz bestimmt. Der Standardwert ist <codeph>"ja"</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>allButLast</apiData><apiDesc>Der Typ der Zeilenausrichtung im Blocksatz für den Text in einem Textblock. Verwenden Sie <codeph>LineJustification</codeph>-Konstanten für diese Eigenschaft. Der Standardwert ist <codeph>LineJustification.ALL_BUT_LAST</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>justificationStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>pushInKinsoku</apiData><apiDesc>Der Blocksatzstil für Text in einem Textblock unter Verwendung eines ostasiatischen Justifiers. Verwenden Sie <codeph>JustificationStyle</codeph>-Konstanten für diese Eigenschaft. Der Standardwert ist <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Erstellt ein EastAsianJustifier-Objekt.
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:EastAsianJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine geklonte Kopie von EastAsianJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>In the Flash Player 10 release, this method is for internal use. In future releases,
	 users will be able to subclass this class and will then need to use this method. This class is 
	 currently stored as a live reference, but there is no way to track when its properties change.  
	 This means that when changes are made, text blocks are not invalidated, which in the current 
	 implementation can lead to player crashes.  Even from the API perspective its wrong, as the affected 
	 text lines should be marked INVALID when format changes are made, but they�re not. The solution is 
	 to use a copy-on-set model.  When the object is passed in, the player copies it, so later changes to 
	 the object that was passed in have no effect. The setter makes an internal copy of the array; the 
	 getter returns a copy of the internal copy. Operations like 
         myBlock.textJustifier.justificationStyle = JustificationStyle.PUSH_IN_KINSOKU will have no effect. 
         Users who subclass this class in the future will need to use the clone() method to 
	 implement this technique of 'locking' the format once it has been set.
	 
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Kopie des <codeph>EastAsianJustifier</codeph>-Objekts.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine geklonte Kopie von EastAsianJustifier.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:EastAsianJustifier:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
     Legt den Blocksatzstil für den Text in einem Textblock fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Legt den Blocksatzstil für den Text in einem Textblock fest.
     
     <p>Der Standardwert ist <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>.</p>
     
	 <p>Verwenden Sie eine der Konstanten in der JustificationStyle-Klasse, um den Wert für diese Eigenschaft festzulegen. In der folgenden Tabelle sind die möglichen Werte aufgelistet:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph></entry>
	 	<entry>Gibt den kondensierten Blocksatz an.</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PUSH_OUT_ONLY</codeph></entry>
	 	<entry>Gibt den expandierten Blocksatz an.</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT</codeph></entry>
	 	<entry>Gibt den Blocksatz an, bei dem die geringste Anpassung Vorrang hat.</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:RenderingMode"><apiName>RenderingMode</apiName><shortdesc>
Die RenderingMode-Klasse stellt Werte für den Wiedergabemodus in der flash.text.engine.FontDescription-Klasse bereit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die RenderingMode-Klasse stellt Werte für den Wiedergabemodus in der flash.text.engine.FontDescription-Klasse bereit.
</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:RenderingMode:CFF"><apiName>CFF</apiName><shortdesc>
	Stellt den Wiedergabemodus auf CFF ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cff</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Stellt den Wiedergabemodus auf CFF ein. Die CFF-Wiedergabe verbessert die Lesbarkeit von Text auf einem Bildschirm. Diese Einstellung empfiehlt sich für Anwendungen mit viel kleinem Text. Diese Konstante wird für die <codeph>renderingMode</codeph>-Eigenschaft in der FontDescription-Klasse verwendet. Verwenden Sie die Syntax <codeph>RenderingMode.CFF</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:RenderingMode:NORMAL"><apiName>NORMAL</apiName><shortdesc>
	Stellt den Wiedergabemodus auf den in Flash Player 7 oder einer früheren Version verwendeten Modus ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Stellt den Wiedergabemodus auf den in Flash Player 7 oder einer früheren Version verwendeten Modus ein. Diese Einstellung ist für animierten Text empfehlenswert. Diese Konstante wird für die <codeph>renderingMode</codeph>-Eigenschaft in der FontDescription-Klasse verwendet. Verwenden Sie die Syntax <codeph>RenderingMode.NORMAL</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 Die ElementFormat-Klasse repräsentiert Formatierungsinformationen, die auf ein ContentElement angewendet werden können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die ElementFormat-Klasse repräsentiert Formatierungsinformationen, die auf ein <codeph>ContentElement</codeph> angewendet werden können. Verwenden Sie die ElementFormat-Klasse, um spezifische Textformatierungen für die verschiedenen Unterklassen von ContentElement zu erstellen. Die Eigenschaften der ElementFormat-Klasse gelten für Geräte- und eingebettete Schriftarten. 
 
 <p>Ein ElementFormat-Objekt, das auf ein ContentElement in einem TextBlock angewendet wird, macht den TextBlock nicht ungültig. Nachdem ein ElementFormat auf ein ContentElement angewendet wurde, wird seine <codeph>locked</codeph>Eigenschaft auf <codeph>true</codeph> eingestellt. Die Eigenschaften eines gesperrten ElementFormat-Objekts können nicht geändert werden. Erstellen Sie stattdessen mit der <codeph>clone()</codeph>-Methode eine nicht gesperrte Kopie des Objekts, die geändert und dem ContentElement zugewiesen werden kann.</p>
 
 </apiDesc><example conref="examples\ElementFormatExample.as"> <p>In diesem Beispiel werden zwei <codeph>ElementFormat</codeph>-Objekte erstellt und verschiedene ihrer Eigenschaften festgelegt. Die neuen ElementFormat-Objekte werden dann einem <codeph>TextElement</codeph>-Objekt zugewiesen, das als Inhalt eines <codeph>TextBlock</codeph> zugewiesen wurde. Beachten Sie, dass das Ändern des <codeph>ElementFormat</codeph> eines <codeph>TextElement</codeph> sich nicht auf TextLines auswirkt, die zuvor vom übergeordneten TextBlock erstellt wurden.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormatExample extends Sprite {
        
        public function ElementFormatExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            ef1.alpha = 100;
            ef1.kerning = flash.text.engine.Kerning.ON;
            ef1.trackingRight = 2;
            ef1.typographicCase = flash.text.engine.TypographicCase.UPPERCASE;
            ef1.alignmentBaseline = flash.text.engine.TextBaseline.DESCENT;
            ef1.ligatureLevel = flash.text.engine.LigatureLevel.EXOTIC;
            
            var ef2:ElementFormat = new ElementFormat(fd);
            ef2.fontSize = 30;
            ef2.color = 0xFF0000;
            ef2.alpha = 0.3;
            ef2.kerning = flash.text.engine.Kerning.OFF;
            ef2.typographicCase = flash.text.engine.TypographicCase.LOWERCASE;
            ef2.digitCase = flash.text.engine.DigitCase.OLD_STYLE;
            ef2.textRotation = flash.text.engine.TextRotation.ROTATE_180;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            line1.x = 15;
            line1.y = 30;

            tb.content.elementFormat = ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            line2.x = 15;
            line2.y = 60;
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/elementFormat"><linktext>flash.text.engine.ContentElement.elementFormat</linktext></link></related-links><apiConstructor id="flash.text.engine:ElementFormat:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 	 Erstellt ein ElementFormat-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Die angegebene <codeph>fontSize</codeph> ist kleiner als 0.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>textRotation</codeph> ist kein Mitglied von <codeph>flash.text.engine.TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>dominantBaseline</codeph> ist kein Mitglied von <codeph>flash.text.engine.TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>alignmentBaseline</codeph> ist kein Mitglied von <codeph>flash.text.engine.TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Das angegebene <codeph>kerning</codeph> ist kein Mitglied von <codeph>flash.text.engine.Kerning</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>breakOpportunity</codeph> ist kein Mitglied von <codeph>flash.text.engine.BreakOpportunity</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>digitCase</codeph> ist kein Mitglied von <codeph>flash.text.engine.DigitCase</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>digitWidth</codeph> ist kein Mitglied von <codeph>flash.text.engine.DigitWidth</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der angegebene <codeph>ligatureLevel</codeph> ist kein Mitglied von <codeph>flash.text.engine.LigatureLevel</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der angegebene <codeph>typographicCase</codeph> ist kein Mitglied von <codeph>flash.text.engine.TypographicCase</codeph>.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>Das FontDescription-Objekt, das die mit diesem Elementformat verwendete Schriftart angibt. Der Standardwert ist <codeph>null</codeph>. Wenn keine FontDescription bereitgestellt ist, wird eine Standard-FontDescription konstruiert.
	 </apiDesc></apiParam><apiParam><apiItemName>fontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>Die Größe des Texts in Pixeln.
 	 </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0x000000</apiData><apiDesc>Die Textfarbe. Eine Zahl mit drei 8-Bit-RGB-Komponenten. 0xFF0000 ist beispielsweise Rot und 0x00FF00 Grün.
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1.0</apiData><apiDesc>Die <codeph>alpha</codeph>-Eigenschaft, die basierend auf dem Elementformat auf alle Zeilenatome angewendet wird.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>die Drehung, die auf einzelne Glyphen angewendet wird. Verwenden Sie <codeph>flash.text.engine.TextRotation</codeph>-Konstanten für diese Eigenschaft.
	 </apiDesc></apiParam><apiParam><apiItemName>dominantBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>Die Grundline, an der die Glyphen im Text ausgerichtet werden. Verwenden Sie <codeph>flash.text.engine.TextBaseline</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>alignmentBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>useDominantBaseline</apiData><apiDesc>Die Grundline auf der enthaltenden Zeile, an der die dominante Grundlinie ausgerichtet wird. Verwenden Sie <codeph>flash.text.engine.TextBaseline</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>baselineShift</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Die Grundlinienverschiebung für den Text in Pixel-Geviert.
	 </apiDesc></apiParam><apiParam><apiItemName>kerning</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>on</apiData><apiDesc>Das auf diesen Text angewendete Kerning. Verwenden Sie <codeph>flash.text.engine.Kerning</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>trackingRight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Die Laufweite bzw. manuelles Kerning, das rechts neben jeder Glyphe angewendet wird, als Pixelwert.
	 </apiDesc></apiParam><apiParam><apiItemName>trackingLeft</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Die Laufweite bzw. manuelles Kerning, das links neben jeder Glyphe angewendet wird, als Pixelwert.
	 </apiDesc></apiParam><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>Das Gebietsschema für den Text.
     </apiDesc></apiParam><apiParam><apiItemName>breakOpportunity</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>Die Zeilenumbruchmöglichkeit, die auf diesen Text angewendet wird. Verwenden Sie <codeph>flash.text.engine.BreakOpportunity</codeph>-Konstanten für diese Eigenschaft.
	 </apiDesc></apiParam><apiParam><apiItemName>digitCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>Die Ziffernschreibweise, die für diesen Text verwendet wird. Verwenden Sie <codeph>flash.text.engine.DigitCase</codeph>-Konstanten für diese Eigenschaft.
	 </apiDesc></apiParam><apiParam><apiItemName>digitWidth</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>Die Ziffernbreite, die für diesen Text verwendet wird. Verwenden Sie <codeph>flash.text.engine.DigitWidth</codeph>-Konstanten für diese Eigenschaft.
	 </apiDesc></apiParam><apiParam><apiItemName>ligatureLevel</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>common</apiData><apiDesc>Die Ligaturstufe, die für diesen Text verwendet wird. Verwenden Sie <codeph>flash.text.engine.LigatureLevel</codeph>-Konstanten für diese Eigenschaft.
	 </apiDesc></apiParam><apiParam><apiItemName>typographicCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>Die Groß-/Kleinschreibung, die für diesen Text verwendet wird. Verwenden Sie <codeph>flash.text.engine.TypographicCase</codeph>-Konstanten für diese Eigenschaft.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Erstellt ein ElementFormat-Objekt.
	 
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:ElementFormat:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine nicht gesperrte geklonte Kopie von ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine nicht gesperrte Kopie des <codeph>ElementFormat</codeph>-Objekts.
	 </apiDesc><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine nicht gesperrte geklonte Kopie von ElementFormat.
	 
     </apiDesc><example conref="examples\ElementFormat_cloneExample.as"> <p>In diesem Beispiel wird ein <codeph>ElementFormat</codeph>-Objekt erstellt und eine <codeph>FontSize</codeph> festgelegt. Es wird ein neues <codeph>TextElement</codeph> mit <codeph>ElementFormat</codeph> erstellt (wodurch es gesperrt wird) und das <codeph>TextElement</codeph> wird als Inhalt für einen <codeph>TextBlock</codeph> verwendet. Im <codeph>TextBlock</codeph> wird eine Textzeile erstellt.</p>
 <p>Bevor Sie ein<codeph>ElementFormat</codeph>-Objekt ändern, müssen Sie zuerst dessen <codeph>locked</codeph>-Eigenschaft überprüfen. Wenn sie „true“ ist, verwenden Sie die <codeph>clone()</codeph>-Methode, um eine nicht gesperrte Kopie des <codeph>ElementFormat</codeph> zu erstellen, ändern Sie seine Eigenschaften und verbinden Sie dann das neue <codeph>ElementFormat</codeph> mit dem <codeph>TextBlock</codeph>. Wenn die Zeilen neu umbrochen werden, weisen die neuen Zeilen die neuen Schrifteinstellungen auf.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormat_cloneExample extends Sprite {
        private var ef1:ElementFormat;
        private var ef2:ElementFormat;
        
        public function ElementFormat_cloneExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize=20;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            ef2 = (ef1.locked) ? ef1.clone() : ef1;    
            ef2.fontSize = 32;

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:ElementFormat:getFontMetrics"><apiName>getFontMetrics</apiName><shortdesc>
	 Gibt ein FontMetrics-Objekt mit Eigenschaften zurück, die die emBox, die Position der Durchstreichen-Linie, die Dicke der Durchstreichen-Linie, die Position der Unterstreichen-Linie und die Dicke der Unterstreichen-Linie für die mit fontDescription und fontSize angegebene Schriftart beschreiben.
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein <codeph>FontMetrics</codeph>-Objekt mit beschreibenden Eigenschaften der mit <codeph>fontDescription</codeph> angegebenen Schriftart.
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <p>Gibt ein <codeph>FontMetrics</codeph>-Objekt mit Eigenschaften zurück, die die emBox, die Position der Durchstreichen-Linie, die Dicke der Durchstreichen-Linie, die Position der Unterstreichen-Linie und die Dicke der Unterstreichen-Linie für die mit <codeph>fontDescription</codeph> und <codeph>fontSize</codeph> angegebene Schriftart beschreiben.</p>
	 
	 </apiDesc><example conref="examples\FontMetricsExample.as"> In diesem Beispiel wird ein <codeph>ElementFormat</codeph>-Objekt mit einer zugewiesenen <codeph>FontDescription</codeph> erstellt und mit der <codeph>getFontMetrics</codeph>-Methode werden Metriken für die ausgewählte Schriftart angezeigt.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontMetricsExample extends Sprite {
        
        public function FontMetricsExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            var fm1:FontMetrics = ef1.getFontMetrics();
            trace(fm1.emBox);
            trace(fm1.strikethroughOffset);
            trace(fm1.strikethroughThickness);
            trace(fm1.subscriptScale);
            trace(fm1.subscriptOffset);
            trace(fm1.superscriptScale);
            trace(fm1.superscriptOffset);
            trace(fm1.underlineOffset);
            trace(fm1.underlineThickness);
            
            
        }
    }    
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link><link href="flash.text.engine.xml#FontMetrics"><linktext>flash.text.engine.FontMetrics</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:ElementFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
	 Gibt an, an welcher der Grundlinien der Zeile, die das Element enthält, die dominantBaseline ausgerichtet wird, und bestimmt so die vertikale Position des Elements in der Zeile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.TextBaseline</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt an, an welcher der Grundlinien der Zeile, die das Element enthält, die <codeph>dominantBaseline</codeph> ausgerichtet wird, und bestimmt so die vertikale Position des Elements in der Zeile. Verwenden Sie <codeph>flash.text.engine.TextBaseline</codeph>-Konstanten für diese Eigenschaft.
	 
	 <p>Das größte Element in der Zeile bestimmt die Grundlinie, es sei denn, dieser Grundsatz wird durch die Festsetzung von <codeph>TextBlock.baselineFontDescription</codeph> und <codeph>TextBlock.baselineFontSize</codeph> aufgehoben.</p>
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>Die <codeph>dominantBaseline</codeph> wird an der Roman-Grundlinie der Zeile ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>Die <codeph>dominantBaseline</codeph> wird an der Oberlängen-Grundlinie der Zeile ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>Die <codeph>dominantBaseline</codeph> wird an der Unterlängen-Grundlinie der Zeile ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>Die <codeph>dominantBaseline</codeph> wird an der oberen ideografischen Grundlinie der Zeile ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>Die <codeph>dominantBaseline</codeph> wird an der mittleren ideografischen Grundlinie der Zeile ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>Die <codeph>dominantBaseline</codeph> wird an der unteren ideografischen Grundlinie der Zeile ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.USE_DOMINANT_BASELINE</codeph></entry>
	 	<entry>Die <codeph>dominantBaseline</codeph> wird an derselben Grundlinie der Zeile ausgerichtet.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Legt die Ausrichtungsgrundlinie der Zeile fest, an der die <codeph>dominantBaseline</codeph> des Grafikelements ausgerichtet wird.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Legt die Ausrichtungsgrundlinie der Zeile fest, an der die <codeph>dominantBaseline</codeph> des Textelements ausgerichtet wird.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>flash.text.engine.ElementFormat.dominantBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:alpha:get"><apiName>alpha</apiName><shortdesc>
	 Bietet dem Autor die Möglichkeit, die alpha-Eigenschaft aller Zeilenatome basierend auf dem Elementformat automatisch auf die angegebene Zahl festzulegen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Bietet dem Autor die Möglichkeit, die <codeph>alpha</codeph>-Eigenschaft aller Zeilenatome basierend auf dem Elementformat automatisch auf die angegebene Zahl festzulegen.
	 
	 <p>Gibt den Alphatransparenzwert des angegebenen Objekts an. Die zulässigen Werte liegen zwischen 0 (völlig transparent) und 1 (völlig undurchsichtig). Der Standardwert ist 1. Anzeigeobjekte mit einem alpha-Wert von 0 sind aktiv, auch wenn sie nicht sichtbar sind.</p>
	 
	 <p>Der Standardwert ist <codeph>1,0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Wendet den angegebenen Alphawert auf das Grafikelement an. Wird multiplikativ mit dem für das grafische <codeph>DisplayObject</codeph> oder für die <codeph>TextLine</codeph> kombiniert.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Wendet den angegebenen Alphawert auf das Textelement an. Wird multiplikativ mit dem für die <codeph>TextLine</codeph> festgelegten Alphawert kombiniert.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/alpha"><linktext>flash.display.DisplayObject.alpha</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
	 Gibt die Grundlinienverschiebung für das Element in Pixeln an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt die Grundlinienverschiebung für das Element in Pixeln an.
	 <p>Das Element wird um diesen Betrag von der <codeph>dominantBaseline</codeph> verschoben. Die Verschiebung wird der y-Position der Mitglieder des Elements hinzugefügt, sodass in nicht gedrehtem Text eine positive Grundlinienverschiebung das Element nach unten verschiebt und eine negative Grundlinienverschiebung das Element nach oben verschiebt.</p>
	 
	 <p>Der Standardwert ist <codeph>0,0</codeph>, was bedeutet, das keine Verschiebung erfolgt.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Verschiebt die Grafik weg von der Grundlinie.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Verschiebt den Text weg von der Grundlinie.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
	 Die Zeilenumbruchmöglichkeit, die auf diesen Text angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.BreakOpportunity</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Zeilenumbruchmöglichkeit, die auf diesen Text angewendet wird. Diese Eigenschaft bestimmt, welche Zeichen für einen Umbruch in Frage kommen, wenn Text über mehrere Zeilen verteilt wird. Verwenden Sie <codeph>flash.text.engine.BreakOpportunity</codeph>-Konstanten für diese Eigenschaft.
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.BreakOpportunity.AUTO</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>BreakOpportunity.AUTO</codeph></entry>
	 	<entry>Zeilenumbruchmöglichkeiten basieren auf standardmäßigen Unicode-Zeicheneigenschaften, zum Beispiel Umbrüche zwischen Wörtern und bei Trennstrichen.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ANY</codeph></entry>
	 	<entry>Jedes Zeichen im <codeph>ContentElement</codeph>-Objekt wird als Zeilenumbruchmöglichkeit behandelt. Dieser Wert wird normalerweise verwendet, wenn Roman-Text in asiatischen Text eingebettet ist und Zeilenumbrüche in Wörtern vorkommen können.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.NONE</codeph></entry>
	 	<entry>Kein Zeichen im Bereich wird als Zeilenumbruchmöglichkeit behandelt.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ALL</codeph></entry>
	 	<entry>Alle Zeichen im Bereich werden als Zeilenumbruchmöglichkeiten behandelt. Dies ist hilfreich beim Erstellen von Effekten wie Text auf einem Pfad.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Bestimmt die Umbruchmöglichkeit zwischen benachbarten Textelementen in der Gruppe. Wenn das elementFormat der Gruppe <codeph>null</codeph> ist, wird das Format des ersten der benachbarten Elemente verwendet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt die Zeilenumbruchmöglichkeit zwischen den Zeichen im Textelement.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#BreakOpportunity"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:color:get"><apiName>color</apiName><shortdesc>
	 Gibt die Textfarbe an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt die Textfarbe an. Eine Ganzzahl mit drei 8-Bit-RGB-Komponenten; 0xFF0000 ist beispielsweise Rot und 0x00FF00 ist Grün. 
	 
	 <p>Der Standardwert <codeph>0x000000</codeph> bedeutet, dass in Flash Player die Farbe Schwarz verwendet wird.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Legt die Textfarbe fest.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
	 Die Ziffernschreibweise, die für diesen Text verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.DigitCase</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Ziffernschreibweise, die für diesen Text verwendet wird. Die Ziffernschreibweise wirkt sich auf den Stil und die Platzierung von numerischen Zeichengruppen aus. Verwenden Sie <codeph>flash.text.engine.DigitCase</codeph>-Konstanten für diese Eigenschaft.
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.DigitCase.DEFAULT</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitCase.DEFAULT</codeph></entry>
	 	<entry>Wendet die Standardschreibweise für Ziffern auf den Text an.</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.LINING</codeph></entry>
	 	<entry>Wendet die Versalschreibweise für Ziffern auf den Text an.</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.OLD_STYLE</codeph></entry>
	 	<entry>Wendet die Mediävalschreibweise für Ziffern auf den Text an.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt die Schreibweise für Ziffern, die für den Text im Element verwendet wird.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitCase"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
	 Die Ziffernbreite, die für diesen Text verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.DigitWidth</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Ziffernbreite, die für diesen Text verwendet wird. Verwenden Sie <codeph>flash.text.engine.DigitWidth</codeph>-Konstanten für diese Eigenschaft.
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.DigitWidth.DEFAULT</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitWidth.DEFAULT</codeph></entry>
	 	<entry>Wendet die Standardziffernbreite auf den Text an.</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.PROPORTIONAL</codeph></entry>
	 	<entry>Wendet die proportionale Ziffernbreite auf den Text an.</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.TABULAR</codeph></entry>
	 	<entry>Wendet die Tabstopp-Ziffernbreite auf den Text an.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt die Ziffernbreite, die für den Text im Element verwendet wird.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitWidth"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
	 Gibt an, welche der Grundlinien des Elements an der alignmentBaseline ausgerichtet wird, um die vertikale Position des Elements in der Zeile zu bestimmen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.TextBaseline</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt an, welche der Grundlinien des Elements an der <codeph>alignmentBaseline</codeph> ausgerichtet wird, um die vertikale Position des Elements in der Zeile zu bestimmen. Verwenden Sie <codeph>flash.text.engine.TextBaseline</codeph>.
	 
	 <p>Der Inhalt des Elements bestimmt die Grundlinien. Bei einem <codeph>TextElement</codeph> bestimmen Schriftart und Schriftgrad die Grundlinien. Bei einem <codeph>GraphicElement</codeph> bestimmt die Höhe des Elements die Grundlinien.</p>
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.TextBaseline.ROMAN</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>Die Roman-Grundlinie des Elements wird an der <codeph>alignmentBaseline</codeph> ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>Die Oberlängen-Grundlinie des Elements wird an der <codeph>alignmentBaseline</codeph> ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>Die Unterlängen-Grundlinie des Elements wird an der <codeph>alignmentBaseline</codeph> ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>Die obere ideografische Grundlinie des Elements wird an der <codeph>alignmentBaseline</codeph> ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>Die mittlere ideografische Grundlinie des Elements wird an der <codeph>alignmentBaseline</codeph> ausgerichtet.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>Die untere ideografische Grundlinie des Elements wird an der <codeph>alignmentBaseline</codeph> ausgerichtet.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Bestimmt, welche der Grundlinien des Grafikelements an der <codeph>alignmentBaseline</codeph> ausgerichtet wird.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt, welche der Grundlinien des Textelements an der <codeph>alignmentBaseline</codeph> ausgerichtet wird.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>flash.text.engine.ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontDescription:get"><apiName>fontDescription</apiName><shortdesc>
	 Ein Objekt, das Eigenschaften enthält, die erforderlich sind, um eine Schriftart zu beschreiben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Ein Objekt, das Eigenschaften enthält, die erforderlich sind, um eine Schriftart zu beschreiben.
	 
	 <p>Der Standardwert ist ein standardmäßig konstruiertes FontDescription-Objekt.</p>
     
	 <p>Wenn die fontDescription-Eigenschaft eingestellt ist, ist das bereitgestellte FontDescription-Objekt gesperrt, d. h. seine <codeph>locked</codeph>Eigenschaft ist auf <codeph>true</codeph> eingestellt. Ein gesperrtes FontDescription-Objekt kann nicht geändert werden.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt die Schriftart, die für den Text im Element verwendet wird.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
	 Die Größe des Texts in Pixeln.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Bei der Einstellung auf einen Wert, der kleiner als null ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Größe des Texts in Pixeln. 
	 
	 <p>Der Standardwert ist <codeph>12,0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt die Größe in Pixel, die für den Text im Element verwendet wird.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
	 Das für diesen Text verwendete Kerning.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Das für diesen Text verwendete Kerning. Verwenden Sie <codeph>flash.text.engine.Kerning</codeph>-Konstanten für diese Eigenschaft. Beim Kerning werden die Pixel zwischen bestimmten Zeichenpaaren angepasst, um die Lesbarkeit zu verbessern. Kerning wird für alle Schriftarten unterstützt, die über Kerningtabellen verfügen.
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.Kerning.ON</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>Kerning.ON</codeph></entry>
	 	<entry>Kerning ist aktiviert.</entry>
	   </row><row>
	 	<entry><codeph>Kerning.OFF</codeph></entry>
	 	<entry>Kerning ist deaktiviert.</entry>
	   </row><row>
	 	<entry><codeph>Kerning.AUTO</codeph></entry>
	 	<entry>Kerning ist nur für Zeichen in asiatischer Typografie aktiviert. Kerning wird zwischen zwei Zeichen angewendet, wenn keines von beiden Kanji, Hiragana oder Katakana ist.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Bestimmt, ob Kerning zwischen benachbarten Textelementen in der Gruppe angewendet wird. Wenn das elementFormat der Gruppe <codeph>null</codeph> ist, wird das Format des ersten benachbarten Elements verwendet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt, ob Kerning zwischen den Zeichen im Textelement angewendet wird.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
	 Die Ligaturstufe, die für diesen Text verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.LigatureLevel</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Ligaturstufe, die für diesen Text verwendet wird. Als Ligatur bezeichnet man zwei oder Buchstabenformen, die zu einer einzelnen Glyphe verbunden werden. Ligaturen ersetzen in der Regel aufeinanderfolgende Zeichen, die gemeinsame Komponenten aufweisen, beispielsweise die Buchstabenpaare fi, fl und ae. Sie werden sowohl für lateinische als auch nicht-lateinische Zeichensätze verwendet. Verwenden Sie <codeph>flash.text.engine.LigatureLevel</codeph>-Konstanten für diese Eigenschaft.
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.LigatureLevel.COMMON</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>LigatureLevel.NONE</codeph></entry>
	 	<entry>Es werden keine Ligaturen erstellt.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.MINIMUM</codeph></entry>
	 	<entry>Es werden minimale Ligaturen erstellt.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.COMMON</codeph></entry>
	 	<entry>Es werden gebräuchliche Ligaturen erstellt.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.UNCOMMON</codeph></entry>
	 	<entry>Es werden nicht gebräuchliche Ligaturen erstellt.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.EXOTIC</codeph></entry>
	 	<entry>Es werden exotische Ligaturen erstellt.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Bestimmt die Ligaturstufe zwischen benachbarten Textelementen in der Gruppe. Wenn das elementFormat der Gruppe <codeph>null</codeph> ist, wird das Format des ersten benachbarten Elements verwendet.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt die Ligaturstufe zwischen den Zeichen im Textelement.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LigatureLevel"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:locale:get"><apiName>locale</apiName><shortdesc>
	 Das Gebietsschema des Texts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Das Gebietsschema des Texts. Steuert die Transformation und Form von Groß- und Kleinschreibung. Es werden Standardkennzeichner für Gebietsschemas verwendet. So sind „en“, „en_US“ und „en-US“ zum Beispiel alle Englisch, „ja“ ist Japanisch.
	 
     <p>Der Standardwert ist <codeph>"en"</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt Transformationen und Formen für den Text im Element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:locked:get"><apiName>locked</apiName><shortdesc>
	 Gibt an, ob das ElementFormat gesperrt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt an, ob das ElementFormat gesperrt ist. Falls der Wert <codeph>true</codeph> lautet, kann ElementFormat nicht geändert werden. Rufen Sie <codeph>ElementFormat.clone()</codeph> auf, um eine nicht gesperrte Kopie des ElementFormat-Objekts zu erstellen.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 Legt die Drehung fest, die auf einzelne Glyphen angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.TextRotation</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Legt die Drehung fest, die auf einzelne Glyphen angewendet wird. Verwenden Sie <codeph>flash.text.engine.TextRotation</codeph>-Konstanten für diese Eigenschaft.
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.TextRotation.AUTO</codeph>.</p>
	 
	 <p>Die endgültige Drehung jeder Glyphe ist die Summe von <codeph>ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph> und <codeph>TextBlock.lineRotation</codeph>.</p>
	 
	 <p><codeph>ElementFormat.textRotation</codeph> ist für den bei asiatischem Text häufig vorkommenden Fall vorgesehen, dass Zeichen gedreht werden müssen, damit sie in einem vertikalen Layout richtig angezeigt werden. Dies wird durch eine Kombination der Werte <codeph>flash.text.engine.TextRotation.AUTO</codeph> und <codeph>TextBlock.lineRotation = flash.text.engine.ROTATE_90</codeph> erzielt.</p>
	 
	 <p>Wenn Sie diese Eigenschaft für Schriftarten einstellen, die keine Informationen zu vertikalem Layout enthalten, kann dies zu unerwünschten Ergebnissen führen. Schriftarten, wie die japanische Schrift MS Mincho, die eine vmtx- oder VORG-Tabelle enthalten, funktionieren ordnungsgemäß, da diese Tabellen die Daten bereitstellen, die die Layout-Engine für das richtige Layout benötigt. Bei Schriftarten wie Verdana, die die notwendigen Informationen nicht erhalten, ist dies hingegen nicht der Fall.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Glyphen werden nicht gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Glyphen werden um 90 Grad im Uhrzeigersinn gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Glyphen werden um 180 Grad gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Glyphen werden um 270 Grad im Uhrzeigersinn gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 <entry>Gibt eine Drehung um 90 Grad gegen den Uhrzeigersinn speziell für Glyphen mit voller Breite und breite Glyphen an, gemäß Unicode-Eigenschaften der Glyphe. Dieser Wert wird normalerweise bei asiatischem Text verwendet, um nur die Glyphen zu drehen, die eine Drehung erfordern. Diese Drehung wird nur in vertikalem Text angewendet, um Zeichen mit voller Breite bzw. breite Zeichen wieder vertikal auszurichten, ohne dabei andere Zeichen zu beeinträchtigen.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt die Drehung der Glyphen im Textelement.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>flash.text.engine.TextRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>flash.text.engine.ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>flash.text.engine.TextBlock.lineRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
	 Die Laufweite bzw. manuelles Kerning, das links neben jeder Glyphe angewendet wird, als Pixelwert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Laufweite bzw. manuelles Kerning, das links neben jeder Glyphe angewendet wird, als Pixelwert. Wenn <codeph>kerning</codeph> aktiviert ist, wird der <codeph>trackingLeft</codeph>-Wert den Werten in der Kerningtabelle dieser Schriftart hinzugefügt. Wenn <codeph>kerning</codeph> deaktiviert ist, wird der <codeph>trackingLeft</codeph>-Wert als manueller Kerningwert verwendet. Unterstützt sowohl positive als auch negative Werte.
	 
	 <p>Der gewünschte Laufweitenwert wird in der Regel auf <codeph>trackingRight</codeph> und <codeph>trackingLeft</codeph> aufgeteilt. In Text mit gemischter Direktionalität tritt ansonsten an der einen bidirektionalen Grenze eine doppelte Laufweite auf und an der anderen Grenze keine.</p>
	 
	 <p>Der Standardwert ist <codeph>0,0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Bestimmt die auf die linke Seite der Grafik angewandte Laufweite.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt die auf die linke Seite der Zeichen im Textelement angewandte Laufweite.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>Beispiel:</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingLeft = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingLeft = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
	 Die Laufweite bzw. manuelles Kerning, das rechts neben jeder Glyphe angewendet wird, als Pixelwert.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Laufweite bzw. manuelles Kerning, das rechts neben jeder Glyphe angewendet wird, als Pixelwert. Wenn <codeph>kerning</codeph> aktiviert ist, wird der <codeph>trackingRight</codeph>-Wert den Werten in der Kerningtabelle dieser Schriftart hinzugefügt. Wenn <codeph>kerning</codeph> deaktiviert ist, wird der <codeph>trackingRight</codeph>-Wert als manueller Kerningwert verwendet. Unterstützt sowohl positive als auch negative Werte.
	 
	 <p>Der gewünschte Laufweitenwert wird in der Regel auf <codeph>trackingRight</codeph> und <codeph>trackingLeft</codeph> aufgeteilt. In Text mit gemischter Direktionalität tritt ansonsten an der einen bidirektionalen Grenze eine doppelte Laufweite auf und an der anderen Grenze keine.</p>
	 
	 
	 <p>Der Standardwert ist <codeph>0,0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Bestimmt die auf die rechte Seite der Grafik angewandte Laufweite.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt die auf die rechte Seite der Zeichen im Textelement angewandte Laufweite.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>Beispiel:</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingRight = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingRight = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
	 Die Groß-/Kleinschreibung, die für diesen Text verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.TypographicCase</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das ElementFormat-Objekt gesperrt wurde (<codeph>locked</codeph> ist <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Groß-/Kleinschreibung, die für diesen Text verwendet wird. Verwenden Sie <codeph>flash.text.engine.TypographicCase</codeph>-Konstanten für diese Eigenschaft.
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.TypographicCase.DEFAULT</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>TypographicCase.DEFAULT</codeph></entry>
	 	<entry>Wendet die standardmäßige Groß- und Kleinschreibung auf den Text an.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.TITLE</codeph></entry>
	 	<entry>Gibt an, dass Großbuchstaben bei der Ausgabe Titelglyphen verwenden.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS</codeph></entry>
	 	<entry>Gibt an, dass der Abstand bei der Ausgabe für Großbuchstaben angepasst wird.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.SMALL_CAPS</codeph></entry>
	 	<entry>Gibt an, dass Großbuchstaben bei der Ausgabe Kapitälchenglyphen verwenden.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.UPPERCASE</codeph></entry>
	 	<entry>Gibt an, dass alle Buchstaben bei der Ausgabe Großbuchstabenglyphen verwenden.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.LOWERCASE</codeph></entry>
	 	<entry>Gibt an, dass alle Buchstaben bei der Ausgabe Kleinbuchstabenglyphen verwenden.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS_AND_SMALL_CAPS</codeph></entry>
	 	<entry>Gibt an, dass alle Kleinbuchstaben bei der Ausgabe Kapitälchenglyphen verwenden.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Unterklasse</entry><entry>Effekt der Einstellung der Eigenschaft</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Hat keinen Effekt.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Bestimmt die Groß-/Kleinschreibung, die für den Text im Element verwendet wird.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TypographicCase"><linktext>flash.text.engine.TypographicCase</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
 Die FontMetrics-Klasse enthält Abmessungs- und Versetzungsinformationen zu einer Schriftart.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die FontMetrics-Klasse enthält Abmessungs- und Versetzungsinformationen zu einer Schriftart. Die <codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph>-Methode gibt Objekte dieser Klasse zurück.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links><apiConstructor id="flash.text.engine:FontMetrics:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
	 Erstellt ein FontMetrics-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>emBox</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>Die emBox der Schriftart in Pixel.
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Die Versetzung für das Durchstreichen in Pixel.
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Die Stärke für das Durchstreichen in Pixel.
	 </apiDesc></apiParam><apiParam><apiItemName>underlineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Die Versetzung für das Unterstreichen in Pixel.
	 </apiDesc></apiParam><apiParam><apiItemName>underlineThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Die Stärke für eine Unterstreichung in Pixel.
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Die Versetzung für tiefgestellte Zeichen in Pixel.
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Skalierung, die auf die Punktgröße von tiefgestellten Zeichen angewendet wird.
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Die Versetzung für hochgestellte Zeichen in Pixel.
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>Die Skalierung, die auf die Punktgröße von hochgestellten Zeichen angewendet wird.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Erstellt ein FontMetrics-Objekt. Das FontMetrics-Objekt enthält Informationen über die Metrik einer Schriftart in einem Elementformat. Die <codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph>-Methode gibt Objekte dieser Klasse zurück.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Überblick über die FontMetrics-Klasse</linktext></link><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:FontMetrics:emBox"><apiName>emBox</apiName><shortdesc>
	 Der emBox-Wert repräsentiert den Entwurfsraum der Schriftart und wird verwendet, um chinesische, koreanische oder japanische Glyphen in Relation zur Roman-Grundlinie zu platzieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 Der emBox-Wert repräsentiert den Entwurfsraum der Schriftart und wird verwendet, um chinesische, koreanische oder japanische Glyphen in Relation zur Roman-Grundlinie zu platzieren. Normalerweise ist dies ein Rechteck in der Punktgröße der Schriftart. Der Ursprung (Koordinate 0,0) der emBox ist auf den linken Rand und die Roman-Grundlinie des Rechtsecks eingestellt. Bei einer Schrift mit der Punktgröße 10 kann die emBox zum Beispiel ein Rechteck [L,T,R,B] von [0, -8,8, 10, 1,2] sein.
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Überblick über die FontMetrics-Klasse</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughOffset"><apiName>strikethroughOffset</apiName><shortdesc>
	 Der strikethroughOffset-Wert ist die vorgeschlagene vertikale Versetzung von der Roman-Grundlinie für Durchstreichungen.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Der strikethroughOffset-Wert ist die vorgeschlagene vertikale Versetzung von der Roman-Grundlinie für Durchstreichungen.

	 
	 <p>Beachten Sie, dass je nach Drehung der Zeile dieser Wert der Position der Zeile entweder hinzugefügt oder davon abgezogen werden sollte, um die Position für die Durchstreichung zu finden. In einer Zeile mit <codeph>TextRotation.ROTATE_0</codeph> gilt <codeph>strikethrough.y = line.y + strikethroughOffset</codeph>. In einer Zeile mit <codeph>TextRotation.ROTATE_90</codeph> gilt <codeph>strikethrough.x = line.x - strikethroughOffset</codeph>.</p>
	 
	 <p>Wenn Effekte wie Durchstreichungen angewendet werden, wird empfohlen, einen <codeph>eventMirror</codeph> für das <codeph>ContentElement</codeph>anzugeben, das den Effekt erhält. Als Antwort auf das <codeph>flash.events.Event.ADDED</codeph>Ereignis können die <codeph>bounds</codeph> der <codeph>TextLineMirrorRegion</codeph> zusammen mit <codeph>strikethroughOffset</codeph> verwendet werden, um die Durchstreichung zu platzieren.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Überblick über die FontMetrics-Klasse</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughThickness"><apiName>strikethroughThickness</apiName><shortdesc>
	 Der strikethroughThickness-Wert ist die vorgeschlagene Stärke für Durchstreichungen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Der strikethroughThickness-Wert ist die vorgeschlagene Stärke für Durchstreichungen.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Überblick über die FontMetrics-Klasse</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptOffset"><apiName>subscriptOffset</apiName><shortdesc>
	 Der subscriptOffset-Wert ist die vorgeschlagene vertikale Versetzung von der Roman-Grundlinie für tiefgestellte Zeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Der subscriptOffset-Wert ist die vorgeschlagene vertikale Versetzung von der Roman-Grundlinie für tiefgestellte Zeichen.
	 
	 <p>Der subscriptOffset-Wert wird mit <codeph>ElementFormat.baselineShift</codeph> kombiniert, um das tiefgestellte Zeichen zu platzieren.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Überblick über die FontMetrics-Klasse</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptScale"><apiName>subscriptScale</apiName><shortdesc>
	 Der subscriptScale-Wert ist der vorgeschlagene Skalierungsfaktor, der auf die Punktgröße einer Tiefstellung angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Der subscriptScale-Wert ist der vorgeschlagene Skalierungsfaktor, der auf die Punktgröße von tiefgestellten Zeichen angewendet wird. Ein Skalierungsfaktor von 1,0 bedeutet keine Skalierung.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Überblick über die FontMetrics-Klasse</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptOffset"><apiName>superscriptOffset</apiName><shortdesc>
	 Der superscriptOffset-Wert ist die vorgeschlagene vertikale Versetzung von der Roman-Grundlinie für hochgestellte Zeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Der superscriptOffset-Wert ist die vorgeschlagene vertikale Versetzung von der Roman-Grundlinie für hochgestellte Zeichen.
	 
	 <p>Der superscriptOffset-Wert wird mit<codeph>ElementFormat.baselineShift</codeph> kombiniert, um das hochgestellte Zeichen zu platzieren.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Überblick über die FontMetrics-Klasse</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptScale"><apiName>superscriptScale</apiName><shortdesc>
	 Der superscriptScale-Wert ist der vorgeschlagene Skalierungsfaktor, der auf die Punktgröße von hochgestellten Zeichen angewendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Der superscriptScale-Wert ist der vorgeschlagene Skalierungsfaktor, der auf die Punktgröße von hochgestellten Zeichen angewendet wird. Ein Skalierungsfaktor von 1,0 bedeutet keine Skalierung.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Überblick über die FontMetrics-Klasse</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineOffset"><apiName>underlineOffset</apiName><shortdesc>
	 Der underlineOffset-Wert ist die vorgeschlagene vertikale Versetzung von der Roman-Grundlinie für Unterstreichungen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Der underlineOffset-Wert ist die vorgeschlagene vertikale Versetzung von der Roman-Grundlinie für Unterstreichungen.
	 
	 <p>Beachten Sie, dass je nach Drehung der Zeile dieser Wert der Position der Zeile entweder hinzugefügt oder davon abgezogen werden sollte, um die Position für die Unterstreichung zu finden. In einer Zeile mit <codeph>TextRotation.ROTATE_0</codeph> gilt <codeph>underline.y = line.y + underlineOffset</codeph>. In einer Zeile mit <codeph>TextRotation.ROTATE_90</codeph> gilt, <codeph>underline.x = line.x - underlineOffset</codeph>.</p>
	 
	 <p>Wenn Effekte wie Unterstreichungen angewendet werden, wird empfohlen, einen <codeph>eventMirror</codeph> für das <codeph>ContentElement</codeph> anzugeben, das den Effekt erhält. Als Antwort auf das <codeph>flash.events.Event.ADDED</codeph> können die <codeph>bounds</codeph> der <codeph>TextLineMirrorRegion</codeph> zusammen mit <codeph>underlineOffset</codeph> verwendet werden, um die Unterstreichung zu platzieren.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Überblick über die FontMetrics-Klasse</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineThickness"><apiName>underlineThickness</apiName><shortdesc>
	 Der underlineThickness-Wert ist die vorgeschlagene Stärke für Unterstreichungen.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Der underlineThickness-Wert ist die vorgeschlagene Stärke für Unterstreichungen.

	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>Überblick über die FontMetrics-Klasse</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 Die FontDescription-Klasse repräsentiert Eigenschaften, mit denen eine Schriftart beschrieben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die FontDescription-Klasse repräsentiert Eigenschaften, mit denen eine Schriftart beschrieben wird. Die Eigenschaften der FontDescription-Klasse gelten für Geräte- und eingebettete Schriftarten. 
 
 <p>Ein FontDescription-Objekt wird auf ein ElementFormat angewendet, was wiederum auf ein ContentElement in einem TextBlock angewendet wird. Nachdem ein FontDescription-Objekt auf ein ElementFormat angewendet wurde, wird seine <codeph>locked</codeph>Eigenschaft auf <codeph>true</codeph> eingestellt. Die Eigenschaften eines gesperrten FontDescription-Objekts können nicht geändert werden. Sie stattdessen mit der <codeph>clone()</codeph>-Methode eine nicht gesperrte Kopie des Objekts, die geändert und dem ElementFormat zugewiesen werden kann.</p>
 
 <p><b>Hinweis:</b> FTE unterstützt weder Type-1-Schriften noch Bitmapschriften wie Type 3, ATC, sfnt-wrapped CID oder Naked CID.</p>
 
 </apiDesc><example conref="examples\FontDescriptionExample.as"> <p>In diesem Beispiel wird ein <codeph>FontDescription</codeph>-Objekt erstellt, diesem Objekt wird eine Geräteschriftart zugewiesen, es werden verschiedene Schrifteigenschaften festgelegt und das neue Objekt wird einem <codeph>ElementFormat</codeph>-Objekt zugewiesen. Zusätzliche Schriftformatierung erfolgt in <codeph>ElementFormat</codeph>. Ein neues <codeph>TextElement</codeph> wird mithilfe von <codeph>ElementFormat</codeph> erstellt und das <codeph>TextElement</codeph> wird als Inhalt für einen <codeph>TextBlock</codeph> verwendet. Im <codeph>TextBlock</codeph> wird eine Textzeile erstellt.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescriptionExample extends Sprite {
        
        public function FontDescriptionExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/fontDescription"><linktext>flash.text.engine.ElementFormat.fontDescription</linktext></link></related-links><apiConstructor id="flash.text.engine:FontDescription:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 	 Erstellt ein FontDescription-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Das angegebene <codeph>fontWeight</codeph> ist kein Mitglied von <codeph>flash.text.engine.FontWeight</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>fontPosture</codeph> ist kein Mitglied von <codeph>flash.text.engine.FontPosture</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Das angegebene <codeph>fontLookup</codeph> ist kein Mitglied von <codeph>flash.text.engine.FontLookup</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der angegebene <codeph>renderingMode</codeph> ist kein Mitglied von <codeph>flash.text.engine.RenderingMode</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Das angegebene <codeph>cffHinting</codeph> ist kein Mitglied von <codeph>flash.text.engine.CFFHinting</codeph>.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>_serif</apiData><apiDesc>Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartennamen.
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>Gibt die Schriftstärke an.

	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>Gibt den Schriftschnitt an.
	 </apiDesc></apiParam><apiParam><apiItemName>fontLookup</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>device</apiData><apiDesc>Gibt an, wie nach der Schriftart gesucht werden soll.

	 </apiDesc></apiParam><apiParam><apiItemName>renderingMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>cff</apiData><apiDesc>Der für diesen Text verwendete Wiedergabemodus. Verwenden Sie <codeph>flash.text.engine.RenderingMode</codeph>-Konstanten für diese Eigenschaft.
	 </apiDesc></apiParam><apiParam><apiItemName>cffHinting</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>horizontalStem</apiData><apiDesc>Die für diesen Text verwendete Art des CFF-Hintings. Verwenden Sie <codeph>flash.text.engine.CFFHinting</codeph>-Konstanten für diese Eigenschaft.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Erstellt ein FontDescription-Objekt.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:FontDescription:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine nicht gesperrte geklonte Kopie von FontDescription.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine nicht gesperrte Kopie des <codeph>FontDescription</codeph>-Objekts.
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine nicht gesperrte geklonte Kopie von FontDescription.
	 
     </apiDesc><example conref="examples\FontDescription_cloneExample.as"> <p>In diesem Beispiel wird ein <codeph>FontDescription</codeph>Objekt erstellt, diesem Objekt wird eine Geräteschriftart zugewiesen, es werden verschiedene Schrifteigenschaften festgelegt und das neue Objekt wird einem <codeph>ElementFormat</codeph>-Objekt zugewiesen (wodurch es gesperrt wird). Ein neues <codeph>TextElement</codeph> wird mithilfe von <codeph>ElementFormat</codeph> erstellt und <codeph>TextElement</codeph> wird als Inhalt für <codeph>TextBlock</codeph> verwendet. Im <codeph>TextBlock</codeph> wird eine Textzeile erstellt.</p>
 <p>Bevor Sie ein<codeph>FontDescription</codeph>-Objekt ändern, müssen Sie zuerst dessen <codeph>locked</codeph>-Eigenschaft überprüfen. Wenn dieser Wert „true“ lautet, erstellen Sie mithilfe der <codeph>clone()</codeph>-Methode eine nicht gesperrte Kopie des <codeph>FontDescription</codeph>-Objekts, ändern Sie seine Eigenschaften und weisen Sie es einem neuen ElementFormat-Objekt zu. Wenden Sie anschließend das neue <codeph>ElementFormat</codeph> auf den <codeph>TextBlock</codeph> an. Wenn die Zeilen neu umbrochen werden, weisen die neuen Zeilen die neuen Schrifteinstellungen auf.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescription_cloneExample extends Sprite {
        private var fd:FontDescription;
        private var fd2:FontDescription;
        
        public function FontDescription_cloneExample():void {
            fd = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            fd2 = (fd.locked) ? fd.clone() : fd;    
            fd2.fontWeight = flash.text.engine.FontWeight.NORMAL;
            var ef2:ElementFormat = new ElementFormat(fd2);

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:FontDescription:isFontCompatible"><apiName>isFontCompatible</apiName><shortdesc>
	 Gibt „true“ zurück, wenn eine eingebettete Schriftart mit dem angegebenen fontName, fontWeight und fontPosture verfügbar ist, wobei Font.fontType flash.text.FontType.EMBEDDED_CFF ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Das angegebene <codeph>fontWeight</codeph> ist kein Mitglied von <codeph>flash.text.engine.FontWeight</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>fontPosture</codeph> ist kein Mitglied von <codeph>flash.text.engine.FontPosture</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph>, wenn eine kompatible eingebettete Schriftart verfügbar ist, andernfalls <codeph>false</codeph>.
	 
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Name der zu überprüfenden eingebetteten Schriftart.
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Gibt die Schriftstärke an.
Verwenden Sie <codeph>flash.text.engine.FontWeight</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Gibt den Schriftschnitt an. Verwenden Sie <codeph>flash.text.engine.FontPosture</codeph>.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gibt true zurück, wenn eine eingebettete Schriftart mit dem angegebenen <codeph>fontName</codeph>, <codeph>fontWeight</codeph> und <codeph>fontPosture</codeph> verfügbar ist, wobei <codeph>Font.fontType</codeph> <codeph>flash.text.FontType.EMBEDDED_CFF</codeph> ist. Ab Flash Player 10 können in einer SWF-Datei zwei Arten eingebetteter Schriftarten auftreten. Normale eingebettete Schriftarten werden nur von TextField verwendet. CFF-Schriftarten werden nur von den flash.text.engine-Klassen verwendet. Die beiden Arten unterscheiden sich durch die <codeph>fontType</codeph>-Eigenschaft der <codeph>Font</codeph>-Klasse, die von der <codeph>enumerateFonts()</codeph>-Funktion zurückgegeben wird.
	 
	 <p>Die flash.text.engine-Klassen können keine Schriftart des Typs <codeph>EMBEDDED</codeph> verwenden. Wenn <codeph>fontLookup</codeph> auf <codeph>FontLookup.EMBEDDED_CFF</codeph> gesetzt wurde und die einzige zur Laufzeit verfügbare Schriftart mit dem angegebenen Namen, Gewicht und Schnitt dem Typ <codeph>EMBEDDED</codeph> angehört, ignoriert Flash Player diese Schriftart und greift stattdessen für jede einzelne Glyphe auf Geräteschriftarten zurück, um den Text wiederzugeben.</p>
	 
	 <p>Sind Schriftarten beider Arten, also <codeph>EMBEDDED</codeph> und <codeph>EMBEDDED_CFF</codeph>, mit dem gleichen Namen, Gewicht und Schnitt verfügbar, wird die Schriftart <codeph>EMBEDDED_CFF</codeph> ausgewählt. Der Text wird mit der Schriftart <codeph>EMBEDDED_CFF</codeph> wiedergegeben.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine"><linktext>flash.text.engine.TextBlock.createTextLine</linktext></link><link href="flash.text.xml#FontType/EMBEDDED_CFF"><linktext>flash.text.FontType.EMBEDDED_CFF</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:FontDescription:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
	 Die für diesen Text verwendete Art des CFF-Hintings.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.CFFHinting</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das FontDescription-Objekt gesperrt wurde, hat <codeph>locked</codeph> den Wert <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die für diesen Text verwendete Art des CFF-Hintings. Verwenden Sie <codeph>flash.text.engine.CFFHinting</codeph>-Konstanten für diese Eigenschaft. Diese Eigenschaft gilt nur dann, wenn die Eigenschaft <codeph>flash.text.engine.RenderingMode</codeph> des Texts auf <codeph>flash.text.engine.RenderingMode.CFF</codeph> gesetzt ist.
	 
	 <p>Die Art des verwendeten CFF-Hintings bestimmt, ob Flash Player breite horizontale Striche an einem Subpixelraster ausrichtet.
</p>
	 
	 <p>Gilt nur für eingebettete Schriftarten.</p>
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.CFFHinting.HORIZONTAL_STEM</codeph>.</p>
	 
	 <p>Für die Eigenschaft <codeph>flash.text.engine.CFFHinting</codeph> können Sie die folgenden Stringwerte verwenden:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	     <entry><codeph>CFFHinting.NONE</codeph></entry>
	     <entry>Gibt an, dass kein CFF-Hinting erfolgt. Horizontale Striche in den Glyphen werden nicht am Subpixelraster ausgerichtet. Diese Einstellung eignet sich für Animationen oder für große Schriften.</entry>
	   </row><row>
	     <entry><codeph>CFFHinting.HORIZONTAL_STEM</codeph></entry>
	     <entry>Gibt an, dass CFF-Hinting erfolgt. Breite horizontale Striche werden am Subpixelraster auf einem LCD-Monitor ausgerichtet. Zur Verwendung dieser Einstellung muss die <codeph>RenderingMode</codeph>-Eigenschaft auf <codeph>RenderingMode.CFF</codeph> gesetzt sein.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#CFFHinting"><linktext>flash.text.engine.CFFHinting</linktext></link><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontDescription:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
	 Gibt an, wie nach der Schriftart gesucht werden soll.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das FontDescription-Objekt gesperrt wurde, hat <codeph>locked</codeph> den Wert <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt an, wie nach der Schriftart gesucht werden soll.

	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.FontLookup.DEVICE</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>FontLookup.DEVICE</codeph></entry>
	 	<entry>Flash Player sucht nach einer Geräteschriftart mit dem angegebenen <codeph>name</codeph> auf dem lokalen System, mit der der Text wiedergegeben wird.</entry>
	   </row><row>
	  <entry><codeph>FontLookup.EMBEDDED_CFF</codeph></entry>
	 	<entry>Flash Player sucht nach einer eingebetteten CFF-Schriftart mit dem angegebenen <codeph>name</codeph>, mit der der Text wiedergegeben wird. Nur Schriftarten des Typs <codeph>flash.text.Font.fontType.EMBEDDED_CFF</codeph> werden in Betracht gezogen. Wenn die angegebene CFF-Schriftart nicht in die SWF-Datei eingebettet ist, versucht Flash Player, für jede Glyphe eine Geräteschriftart als Ersatz zu verwenden. Diese Methode ist weniger effizient als die Auswahl einer Geräteschriftart von Anfang an.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontName:get"><apiName>fontName</apiName><shortdesc>
	 Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartnamen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das FontDescription-Objekt gesperrt wurde, hat <codeph>locked</codeph> den Wert <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Der Name der zu verwendenden Schriftart oder eine durch Kommas getrennte Liste mit Schriftartnamen. Flash Player gibt das Element mit der ersten verfügbaren Schriftart in der Liste wieder. Zum Beispiel sucht der Player bei „Arial, Helvetica, _sans“ zuerst nach „Arial“, dann nach „Helvetica“ und dann nach „_sans“, wenn keine dieser Schriftarten gefunden wird.
	 
	 <p>Flash unterstützt drei generische Geräteschriftartnamen: _sans (wie Helvetica und Arial), _serif (wie Times Roman) und _typewriter (wie Courier). Diese werden je nach Plattform spezifischen Geräteschriftarten zugeordnet.</p>
	 
	 <p>Der Standardwert ist <codeph>"_serif"</codeph>.</p>
	 
	 <p>Flash Player bietet Ersatzschriftarten für Glyphen, die in der ausgewählten Schriftart nicht zu finden sind. Unabhängig davon, ob eine eingebettete Schriftart oder eine Geräteschriftart verwendet wird, versucht Flash Player, die Glyphe mit einer ähnlichen Schriftart wiederzugeben, wenn diese nicht in der vorgesehenen Schriftart zu finden ist.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontPosture:get"><apiName>fontPosture</apiName><shortdesc>
	 Gibt den Schriftschnitt an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.FontPosture</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das FontDescription-Objekt gesperrt wurde, hat <codeph>locked</codeph> den Wert <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt den Schriftschnitt an.
	 
	 <p>Gilt nur für Geräteschriftarten.</p>
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.FontPosture.NORMAL</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>FontPosture.NORMAL</codeph></entry>
	 	<entry>Normaler Schriftschnitt.</entry>
	   </row><row>
	  <entry><codeph>FontPosture.ITALIC</codeph></entry>
	 	<entry>Kursiver Schriftschnitt.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
	 Gibt die Schriftstärke an.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.FontWeight</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das FontDescription-Objekt gesperrt wurde, hat <codeph>locked</codeph> den Wert <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt die Schriftstärke an.

	 
	 <p>Gilt nur für Geräteschriftarten.</p>
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.FontWeight.NORMAL</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>FontWeight.NORMAL</codeph></entry>
	 	<entry>Normale Schriftstärke.</entry>
	   </row><row>
	  <entry><codeph>FontWeight.BOLD</codeph></entry>
	 	<entry>Fettformatierte Schriftstärke.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:locked:get"><apiName>locked</apiName><shortdesc>
	 Gibt an, ob FontDescription gesperrt ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das FontDescription-Objekt gesperrt wurde, hat <codeph>locked</codeph> den Wert <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt an, ob FontDescription gesperrt ist. Falls der Wert <codeph>true</codeph> lautet, kann FontDescription nicht geändert werden. Rufen Sie <codeph>FontDescription.clone()</codeph> auf, um eine nicht gesperrte Kopie des FontDescription-Objekts zu erstellen.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
	 Der für diesen Text verwendete Wiedergabemodus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>flash.text.engine.RenderingMode</codeph> ist.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls die Einstellung erfolgt, nachdem das FontDescription-Objekt gesperrt wurde, hat <codeph>locked</codeph> den Wert <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Der für diesen Text verwendete Wiedergabemodus. Verwenden Sie <codeph>flash.text.engine.RenderingMode</codeph>-Konstanten für diese Eigenschaft. 
	 
	 <p>Gilt nur für eingebettete Schriftarten.</p>
	 
	 <p>Der Standardwert ist <codeph>flash.text.engine.RenderingMode.CFF</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>RenderingMode.NORMAL</codeph></entry>
	 	<entry>Wendet das normale Text-Rendering an, das der in Flash Player 7 und früheren Versionen verwendeten Rendering-Art entspricht.</entry>
	   </row><row>
	   	<entry><codeph>RenderingMode.CFF</codeph></entry>
	 	<entry>Wendet CFF-Rendering an, sodass der Text besser lesbar ist. (Diese Funktion ist seit Flash Player 10 verfügbar.) Beim CFF-Rendering werden kleine Schriftarten in hoher Qualität wiedergegeben.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
 Die TextJustifier-Klasse ist eine abstrakte Basisklasse für die Justifier-Typen, die Sie auf einen TextBlock anwenden können, speziell die EastAsianJustifier- und SpaceJustifier-Klassen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die TextJustifier-Klasse ist eine abstrakte Basisklasse für die Justifier-Typen, die Sie auf einen TextBlock anwenden können, speziell die EastAsianJustifier- und SpaceJustifier-Klassen.
 
 <p>Die TextJustifier-Klasse kann nicht direkt instanziiert werden. Durch das Aufrufen von <codeph>new TextJustifier()</codeph> wird ein <codeph>ArgumentError</codeph>-Ausnahmefehler zurückgegeben. Das Einstellen der Eigenschaften eines EastAsianJustifier- oder SpaceJustifier-Objekts, nachdem Sie es auf einen TextBlock angewendet haben, macht den TextBlock nicht ungültig.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:TextJustifier:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
	 Durch das Aufrufen des Konstruktors „new TextJustifier()“ wird ein ArgumentError-Ausnahmefehler zurückgegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Die angegebene <codeph>locale</codeph> ist entweder <codeph>null</codeph> oder zu kurz, um ein gültiges Gebietsschema anzugeben.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>lineJustification</codeph> ist kein Mitglied von <codeph>LineJustification</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Das Gebietsschema, das die Regeln für den Blocksatz bestimmt.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Typ der Zeilenausrichtung im Blocksatz für den Text in einem Textblock. Verwenden Sie <codeph>LineJustification</codeph>-Konstanten für diese Eigenschaft.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Durch das Aufrufen des Konstruktors <codeph>new TextJustifier()</codeph> wird ein <codeph>ArgumentError</codeph>-Ausnahmefehler zurückgegeben. Sie<i>können</i> jedoch durchaus Konstruktoren für die folgenden Unterklassen von TextJustifier aufrufen:
	 
	 <ul>
	 
	 	<li><codeph>new SpaceJustifier()</codeph></li>
	 	<li><codeph>new EastAsianJustifier()</codeph></li>
	 
	 </ul>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine geklonte Kopie von TextJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Eine Kopie des <codeph>TextJustifier</codeph>-Objekts.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine geklonte Kopie von TextJustifier.
	 
	 <p>Unterklassen von TextJustifier müssen diese Methode außer Kraft setzen.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextJustifier:getJustifierForLocale"><apiName>getJustifierForLocale</apiName><shortdesc>
	 Erstellt eine standardmäßige TextJustifier-Unterklasse, die für das angegebene Gebietsschema geeignet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>Die angegebene<codeph>locale</codeph> ist entweder <codeph>null</codeph> oder zu kurz, um ein gültiges Gebietsschema anzugeben.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Ein Verweis auf ein <codeph>TextJustifier</codeph>-Objekt.
     
     </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Das Gebietsschema, das den erstellten Justifier bestimmt.

     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Erstellt eine standardmäßige TextJustifier-Unterklasse, die für das angegebene Gebietsschema geeignet ist.
	 
	 <p>Wenn das Gebietsschema Chinesisch, Koreanisch oder Japanisch ist, konstruiert die Methode ein standardmäßiges EastAsianJustifier-Objekt. Andernfalls konstruiert die Text-Engine ein standardmäßiges SpaceJustifier-Objekt.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextJustifier:lineJustification:get"><apiName>lineJustification</apiName><shortdesc>
     Gibt die Zeilenausrichtung im Blocksatz für den Text in einem Textblock an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Gibt die Zeilenausrichtung im Blocksatz für den Text in einem Textblock an. 
     
     <p>Verwenden Sie die folgenden Konstanten, die von <codeph>LineJustification</codeph> als gültige Werte für diese Eigenschaft definiert werden:</p>
     
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>LineJustification.UNJUSTIFIED</codeph></entry>
	 	<entry>Erzeugt Zeilen ohne Blocksatz.</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_BUT_LAST</codeph></entry>
	 	<entry>Erzeugt Zeilen im Blocksatz mit Ausnahme der letzten.</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_INCLUDING_LAST</codeph></entry>
	 	<entry>Erzeugt alle Zeilen im Blocksatz.</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextJustifier:locale:get"><apiName>locale</apiName><shortdesc>
     Gibt das Gebietsschema an, das die Blocksatzregeln für den Text in einem Textblock bestimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Die angegebene <codeph>locale</codeph> ist entweder <codeph>null</codeph> oder zu kurz, um ein gültiges Gebietsschema anzugeben.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     Gibt das Gebietsschema an, das die Blocksatzregeln für den Text in einem Textblock bestimmt. Es werden Standardkennzeichner für Gebietsschemas verwendet. Beispiel: „en“, „en_US“ und „en-US“ stehen für Englisch, „ja“ für Japanisch.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GroupElement"><apiName>GroupElement</apiName><shortdesc>
 Ein GroupElement-Objekt gruppiert eine Ansammlung von TextElement-, GraphicElement- oder anderen GroupElement-Objekten, die Sie der content-Eigenschaft eines TextBlock-Objekts als Ganzes zuweisen können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 Ein GroupElement-Objekt gruppiert eine Ansammlung von TextElement-, GraphicElement- oder anderen GroupElement-Objekten, die Sie der <codeph>content</codeph>-Eigenschaft eines TextBlock-Objekts als Ganzes zuweisen können. Ein GroupElement-Objekt kann auch einfach über die gleiche Formatierung innerhalb eines anderen GroupElement-Objekts verfügen. 
 
 <p>Wenn ein GroupElement ein anderes GroupElement enthält, behält das innere GroupElement seine eigene Formatierung (ElementFormat-Einstellungen). Es übernimmt nicht die Formatierung des äußeren GroupElement-Objekts.</p>
 
 <p>Bei einem GroupElement sind die meisten Formateigenschaften wirkungslos. Aus diesem Grund ist es zulässig, eine Textzeile für ein GroupElement-Objekt zu erstellen, das einen <codeph>elementFormat</codeph>-Parameter mit dem Wert null hat. Einige Formateigenschaften wie <codeph>kerning</codeph> und <codeph>ligature</codeph> wirken sich an den Stellen auf die Formatierung aus, an denen sich Mitglieder der Gruppe überschneiden. Hat die Gruppe ein null-Format, bestimmt das Format des vorhergehenden Elements die Formatierung an den Stellen, an denen sich Mitglieder der Gruppe überschneiden.</p>
  
 </apiDesc><example conref="examples\GroupElementExample.as"> In diesem Beispiel wird ein roter Rahmen als GraphicElement-Objekt erstellt und mit zwei TextElement-Objekten kombiniert, um ein GroupElement-Objekt zu erstellen. Das GroupElement-Objekt wird der <codeph>content</codeph>-Eigenschaft eines TextBlock zugewiesen, aus dem es drei Zeilen erstellt.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.ContentElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GroupElementExample extends Sprite {
        
        public function GroupElementExample():void {
            
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0, 0, 20, 20);
            redBox.graphics.endFill(); 
            
            var format:ElementFormat = new ElementFormat();
            var fontDescription:FontDescription = new FontDescription("Arial");
            format.fontSize = 16;
            format.fontDescription = fontDescription;
            
            var str1:String = "This red box is a GraphicElement ";
            var str2:String = " in the middle of two TextElements, " +
            " which together make " +
            "up a GroupElement in a TextBlock that is broken into three lines.";
            
            var textElement1:TextElement = new TextElement(str1,format);
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textElement2:TextElement = new TextElement(str2, format);
            var groupVector:Vector.&lt;ContentElement> = new Vector.&lt;ContentElement>();
            groupVector.push(textElement1, graphicElement, textElement2);
            var groupElement = new GroupElement(groupVector);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = groupElement;
            createTextLines(textBlock);
        }
        
        private function createTextLines(textBlock:TextBlock):void 
        {
        
            var yPos = 20;
            var line_length:Number = 450;
            var textLine:TextLine = textBlock.createTextLine (null, line_length);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.height+8;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, line_length);
            }
        }
    }    
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links><apiConstructor id="flash.text.engine:GroupElement:GroupElement"><apiName>GroupElement</apiName><shortdesc>
	 Erstellt eine neue GroupElement-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Das angegebene <codeph>element</codeph> enthält <codeph>null</codeph> Elemente.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Das angegebene <codeph>element</codeph> enthält ein Element, das keine bekannte Unterklasse von <codeph>ContentElement</codeph> ist.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Das angegebene <codeph>element</codeph> enthält Elemente, die als <codeph>content</codeph> eines <codeph>TextBlock</codeph> spezifiziert wurden. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Das angegebene <codeph>element</codeph> enthält Elemente, die bereits Mitglied einer Gruppe sind oder mehr als einmal in <codeph>elements</codeph> auftreten.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>elements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiData>null</apiData><apiDesc>Ein Vektor von ContentElement-Objekten, die in GroupElement enthalten sein sollen. Der Vektor kann leer sein. Der Standardwert ist <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Das Elementformat für die Gruppe. Der Standardwert ist <codeph>null</codeph>. Dieses Format gilt für Überschneidungen zwischen Elementen in der Gruppe; diese Elemente übernehmen das Format nicht.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Das <codeph>EventDispatcher</codeph>-Objekt, das Kopien von jedem Ereignis erhält, das für Textzeilen ausgelöst wurde, die aufgrund dieses content-Elements erstellt wurden. Der Standardwert ist <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Die Drehung, die auf das Element als Einheit angewendet werden soll. Verwenden Sie <codeph>TextRotation</codeph>-Konstanten für diese Eigenschaft. Der Standardwert ist <codeph>TextRotation.ROTATE_0</codeph>. 
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Erstellt eine neue GroupElement-Instanz.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:GroupElement:getElementAt"><apiName>getElementAt</apiName><shortdesc>
	 Ruft ein Element aus der Gruppe ab.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn <codeph>index</codeph> außerhalb des gültigen Bereichs liegt.

	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der Index des abzurufenden Elements.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ruft ein Element aus der Gruppe ab.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementAtCharIndex"><apiName>getElementAtCharIndex</apiName><shortdesc>
	 Gibt das Element zurück, das das vom charIndex-Parameter angegebene Zeichen enthält.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn <codeph>charIndex</codeph> nicht im Bereich von <codeph>0 - rawText.length</codeph> liegt.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das Element, das das Zeichen bei <codeph>charIndex</codeph> enthält.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf null basierende Indexwert für das Zeichen, dessen Element Sie suchen. Ein Wert von 0 entspricht dem ersten Zeichen in der Gruppe, nicht dem ersten Zeichen im TextBlock.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gibt das Element zurück, das das vom 
<codeph>charIndex</codeph>-Parameter angegebene Zeichen enthält.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
	 Gibt den Index des Elements zurück, das vom element-Parameter angegeben wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der Index des Elements, das von <codeph>element</codeph> angegeben wird, oder -1, wenn das Element nicht in der Gruppe enthalten ist.
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiDesc>Das Element in der Gruppe, dessen Index Sie abrufen möchten.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gibt den Index des Elements zurück, das vom <codeph>element</codeph>-Parameter angegeben wird.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:groupElements"><apiName>groupElements</apiName><shortdesc>
	 Ersetzt den Bereich von Elementen, die die beginIndex- und endIndex-Parameter angeben, durch ein neues GroupElement, das diese Elemente enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn <codeph>beginIndex</codeph> oder <codeph>endIndex</codeph> außerhalb des gültigen Bereichs liegt.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Die neue Gruppe.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:GroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert für die Startposition des zu zusammenzuführenden Bereichs.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert nach der Endposition des zu zusammenzuführenden Bereichs.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ersetzt den Bereich von Elementen, die <codeph>beginIndex</codeph>- und <codeph>endIndex</codeph>-Parameter angeben, durch ein neues <codeph>GroupElement</codeph>, das diese Elemente enthält. Wie geplant werden die Elemente ab beginIndex bis endIndex-1 ersetzt.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:mergeTextElements"><apiName>mergeTextElements</apiName><shortdesc>
	 Führt den Text aus einem Bereich von Elementen zusammen, die die beginIndex- und endIndex-Parameter angeben, zu dem von beginIndex angegebenen Element zusammen, ohne das Format dieses Elements zu ändern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn <codeph>beginIndex</codeph> oder <codeph>endIndex</codeph> außerhalb des gültigen Bereichs liegt.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn eines der Elemente im angegebenen Bereich kein TextElement ist.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das erste Textelement im Bereich, das jetzt den gesamten Text im Bereich enthält.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert für die Startposition des zu zusammenzuführenden Bereichs.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert nach der Endposition des zu zusammenzuführenden Bereichs.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Führt den Text aus einem Bereich von Elementen zusammen, die die <codeph>beginIndex</codeph>- und <codeph>endIndex</codeph>-Parameter angeben, zu dem von <codeph>beginIndex</codeph> angegebenen Element zusammen, ohne das Format dieses Elements zu ändern. Wie geplant wird der Text aus Elementen ab beginIndex bis endIndex-1 zusammengeführt. Nachdem ihr Text zusammengeführt wurde, werden Elemente von beginIndex+1 bis endIndex-1 aus der Gruppe entfernt und verwaisen mit dem Wert <codeph>null</codeph> für die <codeph>group</codeph>Eigenschaft.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:replaceElements"><apiName>replaceElements</apiName><shortdesc>
	 Ersetzt den Elementbereich, der durch die beginIndex- und endIndex-Parameter angegeben wird, durch den Inhalt des newElements-Parameters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene <codeph>beginIndex</codeph> bzw. <codeph>endIndex</codeph> befindet sich nicht im gültigen Bereich.
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebenen <codeph>newElements</codeph> enthalten <codeph>null</codeph> Elemente.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebenen <codeph>newElements</codeph> enthalten <codeph>this</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebenen <codeph>newElements</codeph> enthalten Elemente, die keine bekannte Unterklasse von <codeph>ContentElement</codeph> sind.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebenen <codeph>newElements</codeph> enthalten Elemente, die als <codeph>content</codeph> eines <codeph>TextBlock</codeph> spezifiziert wurden. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebenen <codeph>newElements</codeph> enthalten Elemente, die bereits Mitglied einer Gruppe sind oder mehr als einmal in <codeph>elements</codeph> auftreten.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn der Vorgang zu verschachtelten Drehungen innerhalb von <codeph>GroupElement</codeph> führen würde.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Ein Vektor, der die ersetzten Elemente enthält.
	  
     </apiDesc><apiType value="Vector$flash.text.engine:ContentElement"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert für die Startposition des Ersetzungsbereichs.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert, der der Endposition des Ersetzungsbereichs folgt.
	 </apiDesc></apiParam><apiParam><apiItemName>newElements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiDesc>Die Elemente, durch die der angegebene Elementbereich ersetzt werden soll.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ersetzt den Elementbereich, der durch die <codeph>beginIndex</codeph>- und <codeph>endIndex</codeph>-Parameter angegeben wird, durch den Inhalt des <codeph>newElements</codeph>-Parameter. Wie geplant werden die Elemente ab beginIndex bis endIndex-1 ersetzt.
	 <p>Um Elemente zu löschen, übergeben Sie <codeph>null</codeph> für <codeph>newElements</codeph>.</p>
	 <p>Um ein Element einzufügen, übergeben Sie denselben Wert für <codeph>beginIndex</codeph> und <codeph>endIndex</codeph>. Das neue Element wird vor dem angegebenen Index eingefügt.</p>
	 <p>Um ein Element anzuhängen, übergeben Sie <codeph>elementCount</codeph> für <codeph>beginIndex</codeph> und <codeph>endIndex</codeph>.</p>
	 <p>Nach dem Vorgang sind die ersetzten Elemente verwaist; die <codeph>group</codeph>-Eigenschaften haben den Wert <codeph>null</codeph>.</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:setElements"><apiName>setElements</apiName><shortdesc>
	 Legt die Elemente in der Gruppe auf den Inhalt des Vektors fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene <codeph>value</codeph> enthält <codeph>null</codeph> Elemente.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der angegebene <codeph>value</codeph> enthält <codeph>this</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der angegebene <codeph>value</codeph> enthält Elemente, die keine bekannte Unterklasse von <codeph>ContentElement</codeph> sind.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der angegebene <codeph>value</codeph> enthält Elemente, die als <codeph>content</codeph> eines <codeph>TextBlock</codeph> spezifiziert wurden. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der angegebene <codeph>value</codeph> enthält Elemente, die bereits Mitglied einer Gruppe sind oder mehr als einmal in <codeph>value</codeph> auftreten.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn der Vorgang zu verschachtelten Drehungen innerhalb von <codeph>GroupElement</codeph> führen würde.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/></apiParam></apiOperationDef><apiDesc>
	 Legt die Elemente in der Gruppe auf den Inhalt des Vektors fest.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:splitTextElement"><apiName>splitTextElement</apiName><shortdesc>
	 Teilt einen Teil eines TextElement in der Gruppe in ein neues TextElement, das in die Gruppe nach dem angegebenen TextElement eingefügt wird.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn <codeph>elementIndex</codeph> oder <codeph>charIndex</codeph> außerhalb des gültigen Bereichs liegt.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn das Element bei <codeph>elementIndex</codeph> kein TextElement ist.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>Das neue Textelement, das den hinteren Teil des ursprünglichen Textelements enthält.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>elementIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert für die Position des Elements in der Gruppe.
	 </apiDesc></apiParam><apiParam><apiItemName>splitIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert für das Zeichen im TextElement, bei dem die Teilung erfolgt. Das angegebene Zeichen ist das erste Zeichen des neuen TextElement.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Teilt einen Teil eines TextElement in der Gruppe in ein neues TextElement, das in die Gruppe nach dem angegebenen TextElement eingefügt wird.

	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:ungroupElements"><apiName>ungroupElements</apiName><shortdesc>
	 Hebt die Gruppierung der Elemente in einem verschachtelten GroupElement auf, das groupIndex innerhalb eines äußeren GroupElement-Objekts angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn <codeph>groupIndex</codeph> außerhalb des gültigen Bereichs liegt.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn das Element bei <codeph>groupIndex</codeph>kein GroupElement ist.

	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>groupIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der auf Null basierende Indexwert für die Position der zu teilenden Gruppe.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Hebt die Gruppierung der Elemente in einem verschachtelten GroupElement auf, das <codeph>groupIndex</codeph> innerhalb eines äußeren GroupElement-Objekts angibt. Nach dem Vorgang ersetzen die Elemente, deren Gruppierung aufgehoben wurde, das verschachtelte GroupElement, das verwaist und den Wert <codeph>null</codeph> für die <codeph>group</codeph>-Eigenschaft aufweist.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:GroupElement:elementCount:get"><apiName>elementCount</apiName><shortdesc>
	 Die Anzahl der Elemente innerhalb der Gruppe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Die Anzahl der Elemente innerhalb der Gruppe.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ContentElement"><apiName>ContentElement</apiName><shortdesc>
 Die ContentElement-Klasse dient als Basisklasse für die Elementtypen, die in einem GroupElement auftreten können, z. B. ein GraphicElement, ein weiteres GroupElement oder ein TextElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die ContentElement-Klasse dient als Basisklasse für die Elementtypen, die in einem GroupElement auftreten können, z. B. ein GraphicElement, ein weiteres GroupElement oder ein TextElement.
 
 <p>ContentElementist eine abstrakte Basisklasse. Daher können Sie ContentElement nicht direkt instanziieren. Durch das Aufrufen von <codeph>new ContentElement()</codeph> wird ein <codeph>ArgumentError</codeph>-Ausnahmefehler zurückgegeben. </p>
 
 <p>Sie können ein ContentElement-Element genau einem <codeph>GroupElement</codeph> bzw. der <codeph>content</codeph>-Eigenschaft von genau einem Textblock zuweisen.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock/content"><linktext>TextBlock.content</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links><apiConstructor id="flash.text.engine:ContentElement:ContentElement"><apiName>ContentElement</apiName><shortdesc>
	Durch das Aufrufen des Konstruktors „new ContentElement()“ wird ein ArgumentError-Ausnahmefehler zurückgegeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Das Elementformat für den Text in dem Element. Der Standardwert ist <codeph>null</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Das <codeph>EventDispatcher</codeph>-Objekt, das Kopien von jedem Ereignis erhält, das für auf diesem content-Element basierende gültige Textzeilen ausgelöst wurde. Der Standardwert ist <codeph>null</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Die auf das Element angewendete Drehung als Einheit. Verwenden Sie <codeph>TextRotation</codeph>-Konstanten für diese Eigenschaft. Der Standardwert ist <codeph>TextRotation.ROTATE_0</codeph>.
   	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	Durch das Aufrufen des Konstruktors <codeph>new ContentElement()</codeph> wird ein <codeph>ArgumentError</codeph>-Ausnahmefehler zurückgegeben. Sie <i>können</i> jedoch durchaus Konstruktoren für die folgenden Unterklassen von ContentElement aufrufen:
	
	<ul>
	
		<li><codeph>new GraphicElement()</codeph></li>
		<li><codeph>new GroupElement()</codeph></li>
		<li><codeph>new TextElement()</codeph></li>
	
	</ul>
	
 	</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.text.engine:ContentElement:GRAPHIC_ELEMENT"><apiName>GRAPHIC_ELEMENT</apiName><shortdesc> 
	Zeigt das Vorhandensein eines Grafikelements im Text an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0xFDEF</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc> 
	Zeigt das Vorhandensein eines Grafikelements im Text an.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/rawText"><linktext>rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:userData"><apiName>userData</apiName><shortdesc>
	 Ermöglicht dem Autor, beliebige Daten mit dem Element zu verknüpfen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Ermöglicht dem Autor, beliebige Daten mit dem Element zu verknüpfen.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:elementFormat:get"><apiName>elementFormat</apiName><shortdesc>
	 Das ElementFormat-Objekt, das für das Element verwendet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ElementFormat</apiValueClassifier></apiValueDef><apiDesc>
	 Das ElementFormat-Objekt, das für das Element verwendet wird.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 <p>Wenn die elementFormat-Eigenschaft eingestellt ist, ist das bereitgestellte ElementFormat-Objekt gesperrt, d. h. seine <codeph>locked</codeph>-Eigenschaft ist auf <codeph>true</codeph> eingestellt. Ein gesperrtes ElementFormat-Objekt kann nicht geändert werden.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:eventMirror:get"><apiName>eventMirror</apiName><shortdesc>
	 Das EventDispatcher-Objekt, das Kopien von jedem Ereignis erhält, das für auf diesem content-Element basierende gültige Textzeilen ausgelöst wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 Das <codeph>EventDispatcher</codeph>-Objekt, das Kopien von jedem Ereignis erhält, das für auf diesem content-Element basierende gültige Textzeilen ausgelöst wurde. Mit dem angegebenen Objekt können Listener für eine Textverknüpfung oder ein anderes interaktives Textstück eingerichtet werden, da es zur Laufzeit schwierig sein kann, festzustellen, welche Teile von Zeilen aus bestimmten content-Elementen resultieren. Sie können auch Listener verwenden, um Effekte wie Unterstreichen anzuwenden, deren Metrik Sie erst nach dem Layout des Texts bestimmen können. Der Standardwert ist <codeph>null</codeph>, was bedeutet, das keine gespiegelten Ereignisse ausgelöst werden.
	 
	 <p>Ereignisspiegel manifestieren sich selbst in Textzeilen als Instanzen der <codeph>TextLineMirrorRegion</codeph>-Klasse. Je nach bidirektionaler Verarbeitung und Zeilenumbrüchen können ein oder mehrere Spiegelbereiche erzeugt werden.</p>
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextElement/eventMirror"><linktext>TextElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:groupElement:get"><apiName>groupElement</apiName><shortdesc>
	 Das GroupElement-Objekt, das dieses Element enthält, oder null, falls es sich nicht in einer Gruppe befindet.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:GroupElement</apiValueClassifier></apiValueDef><apiDesc>
	 Das GroupElement-Objekt, das dieses Element enthält, oder <codeph>null</codeph>, falls es sich nicht in einer Gruppe befindet.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:rawText:get"><apiName>rawText</apiName><shortdesc>
	 Eine Kopie des Texts im Element, einschließlich der U+FDEF-Zeichen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Eine Kopie des Texts im Element, einschließlich der U+FDEF-Zeichen. Das U+FDEF-Zeichen ist ein willkürliches Zeichen, das ein Grafikelement im String darstellt.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:text:get"><apiName>text</apiName><shortdesc>
	 Eine Kopie des Texts im Element ohne die U+FDEF-Zeichen, die Grafikelemente im String darstellen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Eine Kopie des Texts im Element ohne die U+FDEF-Zeichen, die Grafikelemente im String darstellen.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextElement/text"><linktext>TextElement.text</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 Der TextBlock, zu dem dieses Element gehört.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 Der TextBlock, zu dem dieses Element gehört.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 Der Index, den das erste Zeichen dieses Elements im Textblock belegt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 Der Index, den das erste Zeichen dieses Elements im Textblock belegt. Dieser Wert wird nicht zwischengespeichert; er wird berechnet, wenn diese Methode aufgerufen wird.
	 
	 <p>Der Standardwert ist -1.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 Die Drehung, die auf das Element als Einheit angewendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>TextRotation</codeph> ist.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls der Wert auf <codeph>TextRotation.AUTO</codeph> gesetzt ist.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc> Wenn der Vorgang zu verschachtelten Drehungen innerhalb eines <codeph>GroupElement</codeph> führen würde.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Drehung, die auf das Element als Einheit angewendet werden soll. Verwenden Sie <codeph>TextRotation</codeph>-Konstanten für diese Eigenschaft.
	 
	 <p>Der Standardwert ist <codeph>TextRotation.ROTATE_0</codeph>.</p>
	 
	 <p>Die endgültige Drehung jeder Glyphe ist die Summe von ElementFormat.textRotation, ContentElement.textRotation und TextBlock.lineRotation.
</p>
	 
	 <p><codeph>ContentElement.textRotation</codeph> wird verwendet, um eine kurze Textfolge zu erstellen, deren Drehung sich von der der Zeile, die sie enthält, unterscheidet. TCY-Textfolgen in japanischem Text sind ein Beispiel hierfür. TCY steht für Tate-Chu-Yoko und bezeichnet eine kurze horizontale Textfolge (meistens eine Zahl) in vertikalem japanischem Text. Um einen Absatz mit vertikalem japanischem Text zu erstellen, der eine TCY-Folge enthält, gehen Sie folgendermaßen vor:</p>
	 <ol>
	 <li>Legen Sie <codeph>TextBlock.lineRotation=TextRotation.ROTATE_90</codeph> fest.</li>
	 <li>Legen Sie <codeph>TextBlock.content</codeph> auf ein <codeph>GroupElement</codeph> fest, das aus drei <codeph>TextElement</codeph>-Objekten besteht. Das erste ist der japanische Text vor der TCY-Folge, das zweite der Latin-Text der TCY-Folge und das dritte der japanische Text nach der TCY-Folge.</li>
	 <li>Stellen Sie die <codeph>textRotation</codeph>-Eigenschaft des TCY-<codeph>TextElement</codeph> auf <codeph>TextRotation.ROTATE_270</codeph> ein. Das TCY-Textelement wird als Einheit gedreht. Es beginnt mit einer 90-Grad-Drehung, die von der Zeile übernommen wird. Durch das Hinzufügen einer zusätzlichen 270-Grad-Drehung wird die Horizontale erreicht.</li>
	 </ol>
	 
	 <p>Gedrehte content-Elemente können nicht verschachtelt sein. In einer Hierarchie von content-Elementen, unabhängig von ihrer Komplexität, kann jeweils nur für ein content-Element die <codeph>textRotation</codeph>-Eigenschaft eingestellt werden. Die folgenden Methoden und Eigenschaften geben einen Argumentfehler zurück, wenn verschachtelte Drehungen erkannt werden:</p>
	 <ol>
	 <li><codeph>ContentElement.textRotation</codeph></li>
	 <li><codeph>GroupElement.setElements</codeph></li>
	 <li><codeph>GroupElement.replaceElements</codeph></li>
	 </ol>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Das Element wird nicht gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Das Element wird um 90 Grad im Uhrzeigersinn gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Das Element wird um 180 Grad gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Das Element wird um 270 Grad im Uhrzeigersinn gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>Nicht unterstützt.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 Die TextBlock-Klasse dient zur Erstellung von TextLine-Objekten, die wiedergegeben werden können, indem Sie sie auf der Anzeigeliste platzieren.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die TextBlock-Klasse dient zur Erstellung von TextLine-Objekten, die wiedergegeben werden können, indem Sie sie auf der Anzeigeliste platzieren.
 
 <p>Die TextBlock-Klasse ist so konzipiert, dass sie einen einzelnen Absatz enthält, da die bidirektionalen und Zeilenumbruch-Unicode-Algorithmen jeweils für einen Absatz gelten. Für Anwendungen, die mehrere Textabsätze zusammenstellen, verwenden Sie eine Markup-Sprache oder Textanalyse, um den Text in Absätze zu unterteilen und dann einen TextBlock pro Absatz zu erstellen.</p>
 
 <p>Das TextBlock-Objekt speichert seinen Inhalt in der <codeph>content</codeph>-Eigenschaft, die eine Instanz der ContentElement-Klasse ist. Da Sie keine Instanz der ContentElement-Klasse erstellen können, legen Sie <codeph>content</codeph> auf eine Instanz einer ihrer Unterklassen fest: TextElement, GraphicElement oder GroupElement. Verwenden Sie TextElement für reine Textinhalte, GraphicElement für Bild- oder Grafikelemente und GroupElement für Inhalte, die aus einer Kombination von TextElement-, GraphicElement- und anderen GroupElement-Objekten bestehen. Weitere Informationen zum Verwalten von formatierten Textfolgen, eingebetteten Unterfolgen und grafischen Elementen finden Sie in der Beschreibung der ContentElement-Klasse und ihrer Unterklassen.</p>
 
 <p>Nachdem Sie die TextBlock-Instanz erstellt und die <codeph>content</codeph>-Eigenschaft eingestellt haben, rufen Sie die <codeph>createTextLine()</codeph>-Methode auf, um Textzeilen zu erstellen, die Instanzen der <codeph>TextLine</codeph>-Klasse sind. </p>
 
 </apiDesc><example conref="examples\TextBlockExample.as"> In diesem Beispiel werden drei TextBlock-Absätze mit japanischem und englischem Text angezeigt. Der japanische Text wird von Unicode-Zeichencodes in Strings umgewandelt. Wenn Sie auf die Schaltfläche klicken, wird der Text im Beispiel aus der horizontalen in die vertikale Lage bzw. umgekehrt gedreht.
 <ol>
     <li>Fügen Sie die Button-Komponente zur Bibliothek hinzu.</li>
  <li>Speichern Sie diesen Code unter „TextBlockExample.as“ im gleichen Verzeichnis wie die FLA-Datei.</li>
  <li>Stellen Sie die Klasse im Eigenschaftenfenster der FLA-Datei auf „TextBlockExample“ ein.</li>
 </ol>

<codeblock>
package { 
    import fl.controls.Button;
     import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextRotation;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.LineJustification;
    import flash.text.engine.FontDescription;
    import flash.text.engine.EastAsianJustifier; 
    import flash.display.Loader;
    import flash.display.Sprite;
    import flash.display.Stage;
    import flash.events.MouseEvent;
    import flash.system.Capabilities;
    
    public class TextBlockExample extends Sprite {
        
        var vertical:Boolean;    
        var container:Sprite;
        var textBlocks:Vector.&lt;TextBlock>;
        var loader:Loader = new Loader();
        var directionButton:Button = new Button();
        
        public function TextBlockExample():void {
            addChild(directionButton);
            directionButton.width = 30;
            directionButton.move(50, 350);
            directionButton.addEventListener(MouseEvent.CLICK, clickHandler);
            createContent();
            createLines();
        }

        private function createEmptyBlock():TextBlock {
        
            var textBlock:TextBlock = new TextBlock();
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_BUT_LAST);
            textBlock.lineRotation = vertical? TextRotation.ROTATE_90: TextRotation.ROTATE_0;
            return textBlock;    
        }
        
        private function paragraph1(format:ElementFormat):TextBlock {
        
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;
        }

        private function paragraph2(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x30AF, 0x30ED, 0x30B9, 0x30D7, 0x30E9, 0x30C3, 0x30C8, 0x30D5, 
                0x30A9, 0x30FC, 0x30E0, 0x4E0A, 0x3067, 0x518D, 0x751F, 0x53EF, 
                0x80FD, 0x306A
            ) + 
            "Flash Video" +
            String.fromCharCode(
                0x3092, 0x914D, 0x4FE1, 0x3001, 0x653F, 0x5E9C, 0x6700, 0x65B0, 
                0x60C5, 0x5831, 0x3092, 0x3088, 0x308A, 0x591A, 0x304F, 0x306E, 
                0x56FD, 0x6C11, 0x306B, 0x9AD8, 0x54C1, 0x8CEA, 0x306A, 0x753B, 
                0x50CF, 0x3067, 0x7C21, 0x5358, 0x304B, 0x3064, 0x30EA, 0x30A2, 
                0x30EB, 0x30BF, 0x30A4, 0x30E0, 0x306B, 0x63D0, 0x4F9B, 0x3059, 
                0x308B, 0x3053, 0x3068, 0x304C, 0x53EF, 0x80FD, 0x306B, 0x306A, 
                0x308A, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;    
        }

        private function paragraph3(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(0x3010) +
            "2007" +
            String.fromCharCode(0x5E74) + "2" + String.fromCharCode(0x6708) +
            "21" +
            String.fromCharCode(0x65E5, 0x3011),
            format);
            return textBlock;    
        }

        private function createContent():void {
            
            var font:FontDescription = new FontDescription();
            if (Capabilities.os.search("Mac OS") > -1) 
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R"; // "Kozuka Mincho Pro R"                    koFont.fontName = "Adobe " + String.fromCharCode(0xBA85, 0xC870) + " Std M"; // "Adobe Myungjo Std M"
            else 
                font.fontName = "Kozuka Mincho Pro R";        
            var format:ElementFormat = new ElementFormat();
            format.fontDescription = font;
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0x000000;
            if (!vertical) 
                format.textRotation = TextRotation.ROTATE_0; 
            textBlocks = new Vector.&lt;TextBlock>();
            textBlocks.push(
                paragraph1(format),
                paragraph2(format),
                paragraph3(format)//,
            );
        }

        private function createLines():void {    
        
            if (container != null) {
                removeChild(container);
            }            
            container = new Sprite();
            container.y = 45;
            container.x = 40;
            addChild(container);
            var linePosition:Number = vertical? this.stage.stageWidth - 120: 12;
        
            for (var i:uint = 0; i &lt; textBlocks.length; i++) {
                var textBlock:TextBlock = textBlocks[i];
                var previousLine:TextLine = null;
        
                while (true) {
                    var textLine:TextLine = textBlock.createTextLine(
                        previousLine, 
                        300);
                    if (textLine == null) 
                        break;
                    if (vertical) 
                    {
                        textLine.x = linePosition;
                        linePosition -= 24;
                        directionButton.label = " -- ";
                    }
                    else 
                    {
                        textLine.y = linePosition+50;
                        linePosition += 24;
                        directionButton.label = " | ";
                    }
                    container.addChild(textLine);                
                    previousLine = textLine;
                }
                if (vertical) 
                    linePosition -= 16;
                else 
                    linePosition += 16; 
            }
        }

        private function clickHandler(event:MouseEvent):void {
            
            vertical = !vertical;
            createContent();
            createLines();
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links><apiConstructor id="flash.text.engine:TextBlock:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 	 Erstellt ein TextBlock-Objekt.
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene <codeph>content</codeph> ist keine bekannte Unterklasse von <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der angegebene <codeph>content</codeph> ist bereits Mitglied einer Gruppe.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>lineRotation</codeph> ist kein Mitglied von <codeph>TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>baselineZero</codeph> ist kein Mitglied von <codeph>TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Das angegebene <codeph>bidiLevel</codeph> ist kleiner als 0.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebenen <codeph>tabStops</codeph> enthalten <codeph>null</codeph> Elemente.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebenen <codeph>tabStops</codeph> sind nicht nach zunehmender Position sortiert.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>baselineFontSize</codeph> ist kleiner als 0.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>content</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiData>null</apiData><apiDesc>Der Inhalt des Textblocks.
	 </apiDesc></apiParam><apiParam><apiItemName>tabStops</apiItemName><apiType value="Vector$flash.text.engine:TabStop"/><apiData>null</apiData><apiDesc>Die Tabstopps für den Text im Textblock.
     </apiDesc></apiParam><apiParam><apiItemName>textJustifier</apiItemName><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier><apiData>null</apiData><apiDesc>Das TextJustifier-Objekt, das bei der Zeilenerstellung für diesen Block verwendet werden soll. Wenn kein Justifier angegeben wird, wird ein Standardjustifier basierend auf einem englischen Gebietsschema verwendet.
     </apiDesc></apiParam><apiParam><apiItemName>lineRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Die Drehung, die auf die Textzeilen angewendet wird, die als Einheiten aus dem Textblock generiert werden.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineZero</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>Gibt an, welche Grundlinie sich bei y=0 für alle Zeilen im Block befindet.
     </apiDesc></apiParam><apiParam><apiItemName>bidiLevel</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Die standardmäßige bidirektionale Einbettungsstufe des Texts im Textblock.
	 </apiDesc></apiParam><apiParam><apiItemName>applyNonLinearFontScaling</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Gibt an, dass Sie das Bildschirmerscheinungsbild auf Kosten der WYSIWYG-Drucktreue verbessern möchten.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>Gibt eine Schriftartbeschreibung an, aus der die Zeilengrundlinien für alle Zeilen im Block abgeleitet wird.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>Gibt die Größe an, die mit baselineFontDescription verwendet wird. Dieser Parameter wird ignoriert, wenn <codeph>baselineFontDescription</codeph> den Wert <codeph>null</codeph> hat.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Erstellt ein TextBlock-Objekt.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TextBlock/applyNonLinearFontScaling"><linktext>applyNonLinearFontScaling</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>baselineZero</linktext></link><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>bidiLevel</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>lineRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>tabStops</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextBlock:createTextLine"><apiName>createTextLine</apiName><shortdesc>
	 Weist den Textblock an, eine Textzeile aus dem Inhalt zu erstellen, die beim durch den previousLine-Parameter angegebenen Punkt beginnt und am vom width-Parameter angegebenen Punkt umbrochen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die von <codeph>previousLine</codeph> angegebene TextLine nicht gültig ist.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn <codeph>width</codeph> kleiner als null ist, sofern <codeph>fitSomething</codeph> nicht „true“ ist.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn <codeph>width</codeph> größer als <codeph>TextLine.MAX_LINE_WIDTH</codeph> ist.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Wenn mindestens ein Element im Inhalt des Textblocks ein <codeph>null ElementFormat</codeph> hat.
     	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Eine Textzeile oder <codeph>null</codeph>, wenn der Textblock leer ist oder die angegebene Breite (width) kleiner als die Breite des nächsten Elements ist. Um zwischen diesen Fällen zu unterscheiden, überprüfen Sie die <codeph>textLineCreationResult</codeph>-Eigenschaft des Textblocks.
     	 
     	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>previousLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiData>null</apiData><apiDesc>Gibt die vorherige umbrochene Zeile an, nach der der Zeilenumbruch beginnen soll. Kann <codeph>null</codeph> sein, wenn die erste Zeile umbrochen wird.
	 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1000000</apiData><apiDesc>Legt die gewünschte Breite der Zeile in Pixeln fest. Die tatsächliche Breite kann kleiner sein.
	 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>Ein optionaler Parameter, der die Differenz zwischen dem Anfang der Zeile und dem Anfang des Tabstopps in Pixeln angibt. Dies kann verwendet werden, wenn die Zeilen nicht ausgerichtet sind, für die Tabstopps ist dies jedoch empfehlenswert. Der Standardwert für diesen Parameter <codeph>0,0</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>fitSomething</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Ein optionaler Parameter, der Flash Player anweist, mindestens ein Zeichen in die Textzeile einzupassen, unabhängig von der angegebenen Breite (auch wenn die Breite null oder negativ ist, was andernfalls zu einem Ausnahmefehler führen würde).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Weist den Textblock an, eine Textzeile aus dem Inhalt zu erstellen, die beim durch den <codeph>previousLine</codeph>-Parameter angegebenen Punkt beginnt und am vom <codeph>width</codeph>-Parameter angegebenen Punkt umbrochen wird. Die Textzeile ist ein TextLine-Objekt, das Sie der Anzeigeliste hinzufügen können.
	 
	 <p>Zeilenumbrüche in einem Bereich eines Textblocks, auf den bereits Zeilenumbrüche angewendet wurden, kann die Gültigkeit der Zeilen in und hinter dem Bereich mit den Zeilenumbrüchen ändern. Der Status der Zeilen kann sich von VALID zu INVALID oder POSSIBLY_INVALID ändern. Wenn eine neu umbrochene Zeile genau an einer zuvor umbrochenen Zeile ausgerichtet wird, die den Status POSSIBLY_INVALID hat, ändern sich diese zuvor umbrochene und alle folgenden Zeilen mit dem Status POSSIBLY_INVALID wieder zurück zum Status VALID. Die Gültigkeit von Zeilen mit Werten, die nicht <codeph>TextLineValidity</codeph> angehören, ändert sich nicht in VALID, kann sich allerdings in INVALID ändern. Überprüfen Sie die <codeph>firstInvalidLine</codeph>-Eigenschaft, nachdem der Textblock geändert wurde, um zu sehen, wo mit dem Neu-Umbruch von Textzeilen zu beginnen oder fortzufahren ist.</p>
	 
	 <p>Sie können künstliche Wortumbrüche erstellen, indem Sie das ZWSP-Zeichen (Unicode Zero Width Space) in den Text einfügen. Dies kann hilfreich sein für Sprachen wie zum Beispiel Thai, für die ein Wörterbuch für richtige Zeilenumbrüche erforderlich ist. Flash Player enthält kein derartiges Wörterbuch.</p>
	 
	 </apiDesc><example conref="examples\TextBlock_createTextLineExample.as"> Im folgenden Beispiel wird die <codeph>createTextLine()</codeph>()-Methode aufgerufen, um Textzeilen in einem Textblock zu erstellen. Dies wird durch Ausführen der folgenden Aufgaben erreicht:
  <ul>
     <li>Erstellen eines TextElement aus einem String und Zuweisen der Schriftgröße 20</li> 
     <li>Erstellen eines TextBlock und Zuweisen des TextElement</li>
     <li>Aufrufen von <codeph>createTextLine()</codeph>, um aus dem Textblock 300 Pixel breite Zeilen zu erstellen</li>
    <li>Platzieren jeder Zeile auf der Bühne (<codeph>addChild()</codeph>)und Festlegen ihrer Positionen (<codeph>x</codeph> und <codeph>y</codeph>)</li>
  </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_createTextLineExample extends Sprite {
        
        public function TextBlock_createTextLineExample():void {
            
            var str:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. The createTextLine() method " +
            "then created these lines, 300 pixels wide, for display." ;
            
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 16;
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock); 
        }
        
        private function createLines(textBlock:TextBlock):void 
        {            
            var lineWidth:Number = 300;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:dump"><apiName>dump</apiName><shortdesc>
	 Gibt den zugrundeliegenden Inhalt des TextBlock als XML-String aus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt den zugrundeliegenden Inhalt des TextBlock als XML-String aus. Dies kann hilfreich sein beim automatischen Testen. Informationen zu Text, Formatierung und Wiedergabe sind enthalten. Nur verfügbar in der Debugger-Version von Flash Player.
	 
	 <p><b>Hinweis:</b> Inhalt und Format der Ausgabe können in der Zukunft geändert werden. Adobe garantiert nicht die Abwärtskompatibilität dieser Methode.</p>
	 
	 <p>In der folgenden Tabelle wird die Ausgabe beschrieben:</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="3"><thead><row><entry>Tag</entry><entry>Attribut</entry><entry>Beschreibung</entry></row></thead><tbody><row><entry><codeph>&lt;block></codeph></entry><entry> </entry><entry>TextBlock</entry></row><row><entry><codeph>&lt;line</codeph></entry><entry> </entry><entry>TextLine</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>Inline-Run-Element starten</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>Inline-Run-Element begrenzen</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>Abschluss des line-Tags</entry></row><row><entry><codeph>&lt;run</codeph></entry><entry> </entry><entry>Elemente einer Zeile</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>Inline-Run-Element starten</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>Inline-Run-Element begrenzen</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>Abschluss des run-Tags</entry></row><row><entry><codeph>&lt;inter</codeph></entry><entry> </entry><entry>inter-Element</entry></row><row><entry> </entry><entry><codeph>cursor=</codeph></entry><entry>Zeichencursor (Index in den Originaltext)</entry></row><row><entry> </entry><entry><codeph>tcb=</codeph></entry><entry>typografische Clustergrenze</entry></row><row><entry> </entry><entry><codeph>wb=</codeph></entry><entry>Wortgrenze</entry></row><row><entry> </entry><entry><codeph>lbo=</codeph></entry><entry>Zeilenumbruchmöglichkeit</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>tatsächlicher Zeilenumbruch</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>Ende des inter-Tags</entry></row><row><entry><codeph>&lt;char</codeph></entry><entry> </entry><entry>Zeichenelement</entry></row><row><entry> </entry><entry><codeph>usv=</codeph></entry><entry>Unicode-Skalarwert</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>Ende des char-Tags</entry></row><row><entry><codeph>&lt;glyph</codeph></entry><entry> </entry><entry>berechnete Glyphe oder geformtes Glyphenelement</entry></row><row><entry> </entry><entry><codeph>font=</codeph></entry><entry>Schriftname</entry></row><row><entry> </entry><entry><codeph>gid=</codeph></entry><entry>Glyphenindex</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>x-Fortschreiten</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>y-Fortschreiten</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>x-Platzierung</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>y-Platzierung</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>Drehung</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>Farbe</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>x-Position</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>y-Position</entry></row><row><entry> </entry><entry><codeph>attached=</codeph></entry><entry>ob zwei Elemente aneinanderhängen</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>Versatz interner typografischer Clustergrenzen</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>bidirektionale Ebene</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>Abstandsklasse</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>Ende des glyph-Tags</entry></row><row><entry><codeph>&lt;fo</codeph></entry><entry> </entry><entry>Grafikelement</entry></row><row><entry> </entry><entry><codeph>id=</codeph></entry><entry>Element-ID</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>x-Fortschreiten</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>y-Fortschreiten</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>x-Platzierung</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>y-Platzierung</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>Drehung</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>Farbe</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>x-Position</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>y-Position</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>linke Grenze</entry></row><row><entry> </entry><entry><codeph>rb=</codeph></entry><entry>rechte Grenze</entry></row><row><entry> </entry><entry><codeph>tb=</codeph></entry><entry>obere Grenze</entry></row><row><entry> </entry><entry><codeph>bb=</codeph></entry><entry>untere Grenze</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>Versatz interner typografischer Clustergrenzen</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>bidirektionale Ebene</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>Abstandsklasse</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>Ende des fo-Tags</entry></row><row><entry><codeph>&lt;embeddedRun</codeph></entry><entry> </entry><entry>eingebettetes Run</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>x-Fortschreiten</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>y-Fortschreiten</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>x-Platzierung</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>y-Platzierung</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>Drehung</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>x-Position</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>y-Position</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>Abschluss des embeddedRun-Tags</entry></row><row><entry><codeph>&lt;run></codeph></entry><entry> </entry><entry>run</entry></row><row><entry><codeph>&lt;/run></codeph></entry><entry> </entry><entry>schließendes run-Tag</entry></row><row><entry><codeph>&lt;/embeddedRun></codeph></entry><entry> </entry><entry>schließendes embeddedRun-Tag</entry></row><row><entry><codeph>&lt;carets</codeph></entry><entry> </entry><entry>die Einfügemarken einer Zeile</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>Inline-Run-Element starten</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>Inline-Run-Element begrenzen</entry></row><row><entry><codeph>></codeph></entry><entry> </entry><entry>Abschluss des carets-Tags</entry></row><row><entry><codeph>&lt;cursor></codeph></entry><entry> </entry><entry>Cursor</entry></row><row><entry> </entry><entry><codeph>x=</codeph></entry><entry>linke Seite x-Position</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>Ende des cursor-Tags</entry></row><row><entry><codeph>&lt;cluster</codeph></entry><entry> </entry><entry>Cluster</entry></row><row><entry> </entry><entry><codeph>c=</codeph></entry><entry>mittlere Position</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>Anfang tc-Versatz</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>Limit tc-Versatz</entry></row><row><entry> </entry><entry><codeph>bidi</codeph></entry><entry>bidirektionale Ebene</entry></row><row><entry><codeph>/></codeph></entry><entry> </entry><entry>Ende des cluster-Tags</entry></row><row><entry><codeph>&lt;/carets></codeph></entry><entry> </entry><entry>schließendes carets-Tag</entry></row><row><entry><codeph>&lt;/line></codeph></entry><entry> </entry><entry>schließendes line-Tag</entry></row><row><entry><codeph>&lt;/block></codeph></entry><entry> </entry><entry>schließendes block-Tag</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/dump()"><linktext>TextLine.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc>
	 Sucht den Index der nächsten Atomgrenze ab dem angegebenen Zeichenindex, wobei das Zeichen beim angegebenen Index nicht eingeschlossen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene <codeph>index</codeph> befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die TextLine, zu der das indizierte Zeichen gehört, ist nicht gültig.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Index der nächsten Atomgrenze ab dem angegebenen Zeichenindex.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Gibt den Index des Zeichens an, ab dem die nächste Atomgrenze gesucht wird.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sucht den Index der nächsten Atomgrenze ab dem angegebenen Zeichenindex, wobei das Zeichen beim angegebenen Index nicht eingeschlossen wird. Die Zeichen zwischen Atomgrenzen verbinden sich, um ein Atom in einer <codeph>TextLine</codeph> zu bilden, zum Beispiel ein „e“ mit einem dazugehörigen Akut-Zeichen.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc>
	 Sucht den Index der nächsten Wortgrenze ab dem angegebenen Zeichenindex, wobei das Zeichen beim angegebenen Index nicht eingeschlossen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene <codeph>index</codeph> befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die TextLine, zu der das indizierte Zeichen gehört, ist nicht gültig.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Index der nächsten Wortgrenze ab dem angegebenen Zeichenindex.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Gibt den Index des Zeichens an, ab dem die nächste Wortgrenze gesucht wird.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sucht den Index der nächsten Wortgrenze ab dem angegebenen Zeichenindex, wobei das Zeichen beim angegebenen Index nicht eingeschlossen wird. Wortgrenzen werden aufgrund der Unicode-Eigenschaften der Zeichen bestimmt.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc>
	 Sucht den Index der vorherigen Atomgrenze bis zum angegebenen Zeichenindex, wobei das Zeichen beim angegebenen Index nicht eingeschlossen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene <codeph>index</codeph> befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die TextLine, zu der das indizierte Zeichen gehört, ist nicht gültig.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Index der vorherigen Atomgrenze bis zum angegebenen Zeichenindex.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Gibt den Index des Zeichens an, ab dem die vorherige Atomgrenze gesucht wird.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sucht den Index der vorherigen Atomgrenze bis zum angegebenen Zeichenindex, wobei das Zeichen beim angegebenen Index nicht eingeschlossen wird. Die Zeichen zwischen Atomgrenzen verbinden sich, um ein Atom in einer <codeph>TextLine</codeph> zu bilden, zum Beispiel ein „e“ mit einem dazugehörigen Akut-Zeichen.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc>
	 Sucht den Index der vorherigen Wortgrenze bis zum angegebenen Zeichenindex, wobei das Zeichen beim angegebenen Index nicht eingeschlossen wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene <codeph>index</codeph> befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>Die TextLine, zu der das indizierte Zeichen gehört, ist nicht gültig.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>Der Index der vorherigen Wortgrenze bis zum angegebenen Zeichenindex.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Gibt den Index des Zeichens an, ab dem die vorherige Wortgrenze gesucht wird.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Sucht den Index der vorherigen Wortgrenze bis zum angegebenen Zeichenindex, wobei das Zeichen beim angegebenen Index nicht eingeschlossen wird. Wortgrenzen werden aufgrund der Unicode-Eigenschaften der Zeichen bestimmt.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:getTextLineAtCharIndex"><apiName>getTextLineAtCharIndex</apiName><shortdesc>
	 Gibt die TextLine zurück, die das vom charIndex-Parameter angegebene Zeichen enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Der angegebene Zeichenindex befindet sich nicht im gültigen Bereich.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>Die TextLine, die das Zeichen bei <codeph>charIndex</codeph> enthält.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Der Indexwert für das Zeichen mit Basis null (d. h., das erste Zeichen ist 0, das zweite Zeichen 1 usw.).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gibt die TextLine zurück, die das vom <codeph>charIndex</codeph>-Parameter angegebene Zeichen enthält.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:releaseLines"><apiName>releaseLines</apiName><shortdesc>
	 Entfernt einen Bereich von Textzeilen aus der Liste der vom TextBlock verwalteten Zeilen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>Wenn die von <codeph>firstLine</codeph> oder <codeph>lastLine</codeph> angegebene TextLine sich nicht in der Liste der vom Textbloch verwalteten Textzeilen befindet.
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>firstLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>Gibt die erste zu entfernende Zeile an.
	 </apiDesc></apiParam><apiParam><apiItemName>lastLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>Gibt die letzte zu entfernende Zeile an.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Entfernt einen Bereich von Textzeilen aus der Liste der vom TextBlock verwalteten Zeilen. Auf diese Weise können die Zeilen aus dem Speicher entfernt werden (Garbage-Kollektor), wenn keine weiteren Verweise darauf vorhanden sind.
	 
	 <p>Setzt die <codeph>textBlock</codeph>-, <codeph>nextLine</codeph>- und <codeph>previousLine</codeph>-Mitglieder der entfernten Zeilen auf <codeph>null</codeph>. Setzt die <codeph>validity</codeph> der entfernten Zeilen und aller anderen Zeilen, die auf die entfernten Zeilen im TextBlock folgen, auf <codeph>TextLineValidity.INVALID</codeph>.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextBlock:userData"><apiName>userData</apiName><shortdesc>
	 Ermöglicht dem Autor, beliebige Daten mit dem Textblock zu verknüpfen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Ermöglicht dem Autor, beliebige Daten mit dem Textblock zu verknüpfen. Bei den Daten kann es sich um Informationen zum Inhalt handeln (z. B. Änderungsdatum, Name des Verfassers) oder um zwischengespeicherte Daten, die bei der Verarbeitung benötigt werden.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:applyNonLinearFontScaling:get"><apiName>applyNonLinearFontScaling</apiName><shortdesc>
	 Gibt an, dass Sie das Bildschirmerscheinungsbild auf Kosten der WYSIWYG-Drucktreue verbessern möchten (WYSIWYG = What you see is what you get, engl. für Was Sie sehen, ist das, was Sie bekommen).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, dass Sie das Bildschirmerscheinungsbild auf Kosten der WYSIWYG-Drucktreue verbessern möchten (WYSIWYG = What you see is what you get, engl. für Was Sie sehen, ist das, was Sie bekommen). Für Plattformen und Schriftarten, die nicht lineare Skalierung unterstützen, können beim Einstellen dieser Eigenschaft auf <codeph>true</codeph> diese Metriken verwendet werden. Dies geschieht jedoch auf Kosten der WYSIWYG-Druckgenauigkeit, insbesondere bei kleinen Punktgrößen.
	 
	 <p>Der Standardwert ist <codeph>true</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontDescription:get"><apiName>baselineFontDescription</apiName><shortdesc>
	 Die Schriftart, die verwendet wird, um die Grundlinie für alle im Block erstellten Zeilen festzulegen, unabhängig von ihrem Inhalt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier></apiValueDef><apiDesc>
	 Die Schriftart, die verwendet wird, um die Grundlinie für alle im Block erstellten Zeilen festzulegen, unabhängig von ihrem Inhalt. Grundlinien sind von der Schriftart und der Schriftgröße abhängig.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>. Wenn die Grundlinienschriftart <codeph>null</codeph> ist, wird die Grundlinienschriftgröße ignoriert und die Grundlinie für jede gegebene Zeile basiert auf der Schriftart und -größe des größten Texts in der Zeile. Wenn Sie sowohl <codeph>baselineFontDescription</codeph> als auch <codeph>baselineFontSize</codeph>, angeben, bestimmen sie die Grundlinien für alle Zeilen im Textblock, unabhängig von ihrem Inhalt. Diese Kombination ist meistens in der asiatischen Typografie hilfreich.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontSize:get"><apiName>baselineFontSize</apiName><shortdesc>
	 Die Schriftgröße wird verwendet, um die Grundlinien der im Block erstellten Zeilen zu berechnen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>Die angegebene <codeph>baselineFontSize</codeph> ist kleiner als 0.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Die Schriftgröße wird verwendet, um die Grundlinien der im Block erstellten Zeilen zu berechnen. Grundlinien sind von der Schriftart und der Schriftgröße abhängig.
	 
	 <p>Der Standardwert ist <codeph>12</codeph>. Wenn die Grundlinienschriftart <codeph>null</codeph> ist, wird die Grundlinienschriftgröße ignoriert und die Grundlinie für jede gegebene Zeile basiert auf der Schriftart und -größe des größten Texts in der Zeile.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineZero:get"><apiName>baselineZero</apiName><shortdesc>
	 Gibt an, welche Grundlinie sich für Zeilen, die in diesem Block erstellt werden, bei y=0 befindet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>TextBaseline</codeph> ist.
     
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt an, welche Grundlinie sich für Zeilen, die in diesem Block erstellt werden, bei y=0 befindet. Gültige Werte für diese Eigenschaft enthalten die Mitglieder der <codeph>TextBaseline</codeph>-Klasse.
	 
	 <p>Der Standardwert ist <codeph>TextBaseline.ROMAN</codeph>.</p>
	 
	 <p>Wenn Sie Werte für diese Eigenschaft definieren möchten, verwenden Sie die folgenden Stringwerte:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>Die Roman-Grundlinie der Zeilen befindet sich bei y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>Die Oberlängen-Grundlinie der Zeilen befindet sich bei y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>Die Unterlängen-Grundlinie der Zeilen befindet sich bei y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>Die obere ideografische Grundlinie der Zeilen befindet sich bei y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>Die mittlere ideografische Grundlinie der Zeilen befindet sich bei y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>Die untere ideografische Grundlinie der Zeilen befindet sich bei y=0.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:bidiLevel:get"><apiName>bidiLevel</apiName><shortdesc>
	 Gibt die standardmäßige bidirektionale Einbettungsstufe des Texts im Textblock an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>Bei der Einstellung auf einen Wert, der kleiner als 0 ist.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt die standardmäßige bidirektionale Einbettungsstufe des Texts im Textblock an. Ein gerader Wert bedeutet von links nach rechts, ein ungerader von rechts nach links. Sie können <codeph>bidiLevel</codeph> erhöhen, um die Anzahl der Ebenen anzugeben, für die bestimmter Text in Bezug auf die Richtung (links nach rechts und rechts nach links) eingebettet ist.
	 
	 <p>Der Standardwert ist 0.</p>
	 
	 <p>Wenn Sie die <codeph>bidiLevel</codeph>-Eigenschaft ändern, ändert sich die Gültigkeit aller zuvor umbrochener Zeilen zu TextLineValidity.INVALID. Nachdem <codeph>bidiLevel</codeph> geändert wurde, entspricht die <codeph>firstInvalidLine</codeph>-Eigenschaft der <codeph>firstLine</codeph>-Eigenschaft und Sie müssen alle Zeilen im TextBlock neu umbrechen.</p>
	 
     </apiDesc><example conref="examples\TextBlock_bidiLevelExample.as"> In diesem Beispiel wird derselbe Text (logische Reihenfolge: a, b, c, alef, bet, gimel) zuerst mit einem geraden Wert für <codeph>bidiLevel</codeph> und dann mit einem ungeraden Wert für<codeph>bidiLevel</codeph> wiedergegeben.
<codeblock>

package {
    
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_bidiLevelExample extends Sprite {
        
        public function TextBlock_bidiLevelExample():void {             
            var fontSize:Number = 36;

            var format:ElementFormat = new ElementFormat();        
            format.fontDescription = new FontDescription("Adobe Hebrew");
            format.fontSize = fontSize;
            var y:Number = 0;
            var leading:Number = fontSize * 0.2;
            var text:String = "abc" + String.fromCharCode(0x05D0, 0x05D1, 0x05D2);

            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(text, format);
                        
            // bidiLevel even
            textBlock.bidiLevel = 0;
            var textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;
            textLine.y = y;
            y += textLine.descent;
            addChild(textLine);      
            
            // bidiLevel odd
            textBlock.content = new TextElement(text, format);
            textBlock.bidiLevel = 1;
            textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;          
            textLine.y = y;
            addChild(textLine);   
        }
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:content:get"><apiName>content</apiName><shortdesc>
	 Enthält den Inhalt des Textblocks.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>Wenn dies auf einen Wert eingestellt ist, der keine bekannte Unterklasse von <codeph>ContentElement</codeph> ist.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Der angegebene <codeph>value</codeph> ist bereits Mitglied einer Gruppe.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Enthält den Inhalt des Textblocks. Da ContentElement eine Basisklasse ist, weisen Sie <codeph>content</codeph> eine Instanz einer ContentElement-Unterklasse zu: TextElement, GraphicElement oder GroupElement. Ein TextElement enthält einen String, ein GraphicElement enthält ein DisplayObject und ein GroupElement enthält ein Vektor-Objekt, das ein oder mehrere TextElement-, GraphicElement- oder andere GroupElement-Objekte enthält. Verwenden Sie ein TextElement für einen Absatz mit homogenem Text, ein GraphicElement für eine Grafik und ein GroupElement für eine Kombination aus Text- und Grafikelemente oder mehreren Instanzen desselben Elements sowie anderen GroupElement-Objekten.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 <p>Wenn Sie die <codeph>content</codeph>-Eigenschaft ändern, ändert sich die Gültigkeit aller zuvor erstellten Zeilen zu <codeph>TextLineValidity.INVALID</codeph>. Nachdem <codeph>content</codeph> geändert wurde, entspricht die <codeph>firstInvalidLine</codeph>-Eigenschaft der <codeph>firstLine</codeph>-Eigenschaft und Sie müssen alle Zeilen im TextBlock neu umbrechen.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstInvalidLine:get"><apiName>firstInvalidLine</apiName><shortdesc>
	 Identifiziert die erste Zeile im Textblock, in der TextLine.validity nicht TextLineValidity.VALID entspricht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Identifiziert die erste Zeile im Textblock, in der <codeph>TextLine.validity</codeph> nicht <codeph>TextLineValidity.VALID</codeph> entspricht.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstLine:get"><apiName>firstLine</apiName><shortdesc>
	 Die erste TextLine im TextBlock, falls vorhanden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Die erste TextLine im TextBlock, falls vorhanden.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lastLine:get"><apiName>lastLine</apiName><shortdesc>
	 Die letzte TextLine im TextBlock, falls vorhanden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Die letzte TextLine im TextBlock, falls vorhanden.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lineRotation:get"><apiName>lineRotation</apiName><shortdesc>
	 Dreht die Textzeilen im Textblock als eine Einheit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>Falls ein Wert verwendet wird, der kein Mitglied von <codeph>TextRotation</codeph> ist.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Falls der Wert auf <codeph>TextRotation.AUTO</codeph> gesetzt ist.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Dreht die Textzeilen im Textblock als eine Einheit. Rufen Sie die <codeph>createTextLine()</codeph>-Methode auf, <i>nachdem</i> Sie <codeph>lineRotation</codeph> eingestellt haben, damit dies wirksam wird. Der Standardwert ist <codeph>TextRotation.ROTATE_0</codeph>.
	 
	 <p>Die endgültige Drehung einer Glyphe richtet sich nach den Werten für <codeph>ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph> und <codeph>TextBlock.lineRotation</codeph>.</p>
	 
	 <p><codeph>TextBlock.lineRotation</codeph> wird normalerweise für asiatischen Text verwendet. Um einen Absatz mit senkrechtem japanischen Text zu erstellen, gehen Sie folgendermaßen vor:</p>
     <ol>
     <li>Setzen Sie die <codeph>TextBlock.lineRotation</codeph>-Eigenschaft auf <codeph>TextRotation.ROTATE_90</codeph>.</li>
     <li>Übernehmen Sie für die <codeph>ElementFormat.textRotation</codeph>-Eigenschaft des Inhalts die Standardeinstellung <codeph>TextRotation.AUTO</codeph>.</li>
     </ol>
	 
	 <p>Verwenden Sie die folgenden Konstanten, die in der <codeph>TextRotation</codeph>-Klasse definiert sind, um den Wert für diese Eigenschaft einzustellen:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Zeilen werden nicht gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Zeilen werden um 90 Grad im Uhrzeigersinn gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Zeilen werden um 180 Grad gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Zeilen werden um 270 Grad im Uhrzeigersinn gedreht.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>Nicht unterstützt.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextBlock_lineRotationExample.as"> In diesem Beispiel wird einem TextBlock japanischer Text hinzugefügt und die <codeph>lineRotation</codeph>-Eigenschaft wird auf TextRotation.ROTATE_90 gesetzt, um die Zeile senkrecht anzuzeigen. 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextRotation;
    import flash.text.engine.ElementFormat;
    
    public class TextBlock_lineRotationExample extends Sprite {
        
        public function TextBlock_lineRotationExample():void {
            var Japanese:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);

            var fontDescription:FontDescription = new FontDescription("MS Mincho");
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 15;
            format.fontDescription = fontDescription;
                        
            var textElement:TextElement = new TextElement(Japanese, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.lineRotation = TextRotation.ROTATE_90;

            var linePosition:Number = this.stage.stageWidth - 120;
            var previousLine:TextLine = null;
        
            while (true) {
                var textLine:TextLine = textBlock.createTextLine(
                    previousLine, 
                    300);
                if (textLine == null) 
                    break;
                textLine.y = 30;    
                textLine.x = linePosition;
                linePosition -= 24;
                addChild(textLine);                
                previousLine = textLine;
            }        
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:tabStops:get"><apiName>tabStops</apiName><shortdesc>
	 Gibt die Tabstopps für den Text im Textblock in Form eines Vektors von TabStop-Objekten an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$flash.text.engine:TabStop"/><apiException><apiDesc>Die angegebenen <codeph>tabStops</codeph> enthalten <codeph>null</codeph> Elemente.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebenen <codeph>tabStops</codeph> sind nicht nach zunehmender Position sortiert.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt die Tabstopps für den Text im Textblock in Form eines Vektors von <codeph>TabStop</codeph>-Objekten an.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>, was bedeutet, dass keine Tabstopps aktiviert sind. Wenn keine Tabstopps festgesetzt sind, bewirkt das Tabulatorzeichen (\t) einen Zeilenumbruch.</p>
	 
	 <p>Wenn die <codeph>tabStops</codeph>-Eigenschaft eingestellt ist, fertigt der TextBlock eine Kopie des Vektors zur internen Verwendung an. Änderungen am ursprünglichen Vektor oder seinem Inhalt wirken sich nicht auf den TextBlock aus. Bei einer Abfrage der <codeph>tabStops</codeph>-Eigenschaft wird eine Kopie des internen Vektors zurückgegeben. Auch hier gilt, dass sich Änderungen am zurückgegebenen Vektor oder seinem Inhalt nicht auf den TextBlock auswirken.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textJustifier:get"><apiName>textJustifier</apiName><shortdesc>
	 Gibt den TextJustifier an, der bei der Zeilenerstellung verwendet werden soll.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:TextJustifier</apiValueClassifier><apiException><apiDesc>Wenn dies auf einen Wert eingestellt ist, der keine bekannte Unterklasse von <codeph>TextJustifier</codeph> ist.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Gibt den TextJustifier an, der bei der Zeilenerstellung verwendet werden soll.
	 
	 <p>Der Standardwert ist ein konstruiertes TextJustifier-Standardobjekt.</p>
	 
	 <p>Wenn die <codeph>textJustifier</codeph>-Eigenschaft eingestellt ist, fertigt der TextBlock eine Kopie des Objekts zur internen Verwendung an. Änderungen am Originalobjekt wirken sich nicht auf den TextBlock aus. Bei einer Abfrage der <codeph>textJustifier</codeph>-Eigenschaft wird eine Kopie des internen Objekts zurückgegeben. Auch hier gilt, dass sich Änderungen am zurückgegebenen Objekt nicht auf den TextBlock auswirken.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textLineCreationResult:get"><apiName>textLineCreationResult</apiName><shortdesc>
	 Gibt das Ergebnis einer createTextLine()-Methode an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt das Ergebnis einer <codeph>createTextLine()</codeph>-Methode an. Beim Ändern des Blockinhalts werden zuvor umbrochene Zeilen ungültig und diese Eigenschaft wird auf <codeph>null</codeph> zurückgesetzt.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 <p>Werte für diese Eigenschaft sind in <codeph>TextLineCreationResult</codeph> enthalten.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Stringwert</entry><entry>Beschreibung</entry></row></thead><tbody><row>
	 	<entry><codeph>TextLineCreationResult.SUCCESS</codeph></entry>
	 	<entry>Die Zeile wurde erfolgreich umbrochen.</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.COMPLETE</codeph></entry>
	 	<entry>Entweder wurde die neu erstellte Zeile genau an den folgenden Zeilen umbrochen, die von POSSIBLY_INVALID zu VALID übergegangen sind, oder es wurde keine Zeile erstellt, da der gesamte Text im Block bereits umbrochen wurde.</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.INSUFFICIENT_WIDTH</codeph></entry>
	 	<entry>Es wurde keine Zeile erstellt, da kein Text in die angegebene Breite eingepasst werden konnte.</entry>
	   </row></tbody></tgroup></adobetable>
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLineCreationResult"><linktext>TextLineCreationResult</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineCreationResult"><apiName>TextLineCreationResult</apiName><shortdesc>
Die TextLineCreationResult-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit TextBlock.textLineCreationResult verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die TextLineCreationResult-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit <codeph>TextBlock.textLineCreationResult</codeph> verwendet werden. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextBlock/textLineCreationResult"><linktext>TextBlock.textLineCreationResult</linktext></link></related-links><apiValue id="flash.text.engine:TextLineCreationResult:COMPLETE"><apiName>COMPLETE</apiName><shortdesc> 
	Gibt an, dass keine Zeile erstellt wurde, da der gesamte Text im Block bereits umbrochen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass keine Zeile erstellt wurde, da der gesamte Text im Block bereits umbrochen wurde.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:EMERGENCY"><apiName>EMERGENCY</apiName><shortdesc> 
	Gibt an, dass die Zeile mit einem Notumbruch erstellt wurde, da keine Umbruchmöglichkeit in der angegebenen Breite verfügbar war.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>emergency</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass die Zeile mit einem Notumbruch erstellt wurde, da keine Umbruchmöglichkeit in der angegebenen Breite verfügbar war.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:INSUFFICIENT_WIDTH"><apiName>INSUFFICIENT_WIDTH</apiName><shortdesc> 
	Gibt an, dass keine Zeile erstellt wurde, weil kein Text in die angegebene Breite passte und fitSomething im Aufruf an createTextLine() nicht angegeben war.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insufficientWidth</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass keine Zeile erstellt wurde, weil kein Text in die angegebene Breite passte und <codeph>fitSomething</codeph> im Aufruf an <codeph>createTextLine()</codeph> nicht angegeben war.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:SUCCESS"><apiName>SUCCESS</apiName><shortdesc> 
	Gibt an, dass die Zeile erfolgreich umbrochen wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>success</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass die Zeile erfolgreich umbrochen wurde.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LigatureLevel"><apiName>LigatureLevel</apiName><shortdesc>
Die LigatureLevel-Klasse ist eine Zusammenstellung von Konstantenwerten, die zur Einstellung der ligatureLevel-Eigenschaft in der ElementFormat-Klasse verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die LigatureLevel-Klasse ist eine Zusammenstellung von Konstantenwerten, die zur Einstellung der <codeph>ligatureLevel</codeph>-Eigenschaft in der ElementFormat-Klasse verwendet werden. Als Ligatur bezeichnet man zwei oder Buchstabenformen, die zu einer einzelnen Glyphe verbunden werden. Ligaturen ersetzen in der Regel aufeinanderfolgende Zeichen, die gemeinsame Komponenten aufweisen, beispielsweise die Buchstabenpaare fi, fl und ae. Sie werden sowohl für lateinische als auch nicht-lateinische Zeichensätze verwendet.
<p><b>Hinweis:</b> Wenn mit arabischen oder syrischen Schriften gearbeitet wird, muss <codeph>ligatureLevel</codeph> auf MINIMUM oder einen höheren Wert gesetzt werden.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/ligatureLevel"><linktext>flash.text.engine.ElementFormat.ligatureLevel</linktext></link></related-links><apiValue id="flash.text.engine:LigatureLevel:COMMON"><apiName>COMMON</apiName><shortdesc> 
	Es werden gebräuchliche Ligaturen erstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>common</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Es werden gebräuchliche Ligaturen erstellt.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:EXOTIC"><apiName>EXOTIC</apiName><shortdesc> 
	Es werden exotische Ligaturen erstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exotic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Es werden exotische Ligaturen erstellt.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:MINIMUM"><apiName>MINIMUM</apiName><shortdesc> 
	Es werden minimale Ligaturen erstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>minimum</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Es werden minimale Ligaturen erstellt.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:NONE"><apiName>NONE</apiName><shortdesc> 
	Es werden keine Ligaturen erstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Es werden keine Ligaturen erstellt.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:UNCOMMON"><apiName>UNCOMMON</apiName><shortdesc> 
	Es werden nicht gebräuchliche Ligaturen erstellt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncommon</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Es werden nicht gebräuchliche Ligaturen erstellt.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextRotation"><apiName>TextRotation</apiName><shortdesc>
Die TextRotation-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit den folgenden Eigenschaften verwendet werden: ElementFormat.textRotation, ContentElement.textRotation, TextBlock.lineRotation und TextLine.getAtomTextRotation().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die TextRotation-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit den folgenden Eigenschaften verwendet werden: <codeph>ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph>, <codeph>TextBlock.lineRotation</codeph> und <codeph>TextLine.getAtomTextRotation()</codeph>. 

<p>Die endgültige Drehung jeder Glyphe ist die Summe von <codeph>TextBlock.lineRotation</codeph>, <codeph>ElementFormat.textRotation</codeph> und <codeph>ContentElement.textRotation</codeph>.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>TextLine.getAtomTextRotation()</linktext></link></related-links><apiValue id="flash.text.engine:TextRotation:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Gibt eine Drehung um 90 Grad gegen den Uhrzeigersinn speziell für Glyphen mit voller Breite und breite Glyphen an, gemäß Unicode-Eigenschaften der Glyphe.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt eine Drehung um 90 Grad gegen den Uhrzeigersinn speziell für Glyphen mit voller Breite und breite Glyphen an, gemäß Unicode-Eigenschaften der Glyphe. Dieser Wert wird normalerweise bei asiatischem Text verwendet, um nur die Glyphen zu drehen, die eine Drehung erfordern. Diese Drehung wird nur in vertikalem Text angewendet, um Zeichen mit voller Breite bzw. breite Zeichen wieder vertikal auszurichten, ohne dabei andere Zeichen zu beeinträchtigen.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_0"><apiName>ROTATE_0</apiName><shortdesc> 
	Gibt keine Drehung an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate0</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt keine Drehung an.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_180"><apiName>ROTATE_180</apiName><shortdesc> 
	Legt eine Drehung um 180 Grad fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate180</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Legt eine Drehung um 180 Grad fest.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_270"><apiName>ROTATE_270</apiName><shortdesc> 
	Legt eine Drehung um 270 Grad im Uhrzeigersinn fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate270</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Legt eine Drehung um 270 Grad im Uhrzeigersinn fest.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_90"><apiName>ROTATE_90</apiName><shortdesc> 
	Legt eine Drehung um 90 Grad im Uhrzeigersinn fest.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate90</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Legt eine Drehung um 90 Grad im Uhrzeigersinn fest.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabAlignment"><apiName>TabAlignment</apiName><shortdesc>
Die TabAlignment-Klasse ist eine Zusammenstellung von Konstantenwerten, mit denen Sie die tabAlignment-Eigenschaft der TabStop-Klasse festlegen können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die TabAlignment-Klasse ist eine Zusammenstellung von Konstantenwerten, mit denen Sie die <codeph>tabAlignment</codeph>-Eigenschaft der <codeph>TabStop</codeph>-Klasse festlegen können. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TabStop/tabAlignment"><linktext>TabStop.tabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStop"><linktext>TextBlock.tabStop</linktext></link></related-links><apiValue id="flash.text.engine:TabAlignment:CENTER"><apiName>CENTER</apiName><shortdesc> 
	Positioniert die Mitte des Texts, auf den Tab angewendet wird, beim Tabstopp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positioniert die Mitte des Texts, auf den Tab angewendet wird, beim Tabstopp.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:DECIMAL"><apiName>DECIMAL</apiName><shortdesc> 
	Positioniert das Ausrichtungstoken des Texts, auf den Tab angewendet wird, beim Tabstopp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>decimal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positioniert das Ausrichtungstoken des Texts, auf den Tab angewendet wird, beim Tabstopp.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:END"><apiName>END</apiName><shortdesc> 
	Positioniert das Ende des Texts, auf den Tab angewendet wird, beim Tabstopp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positioniert das Ende des Texts, auf den Tab angewendet wird, beim Tabstopp.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:START"><apiName>START</apiName><shortdesc> 
	Positioniert den Anfang des Texts, auf den Tab angewendet wird, beim Tabstopp.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positioniert den Anfang des Texts, auf den Tab angewendet wird, beim Tabstopp.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
 Die GraphicElement-Klasse repräsentiert ein Grafikelement in einem TextBlock- oder GroupElement-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die GraphicElement-Klasse repräsentiert ein Grafikelement in einem TextBlock- oder GroupElement-Objekt. Weisen Sie ein GraphicElement-Objekt der <codeph>content</codeph>-Eigenschaft eines TextBlock-Objekts zu, um eine Grafik oder ein Bild mit <codeph>TextBlock.createTextLine()</codeph> anzuzeigen. Weisen Sie es einem GroupElement-Objekt zu, um es mit anderen Grafik- und Textelementen zu kombinieren.
 
 </apiDesc><example conref="examples\GraphicElementExample.as"> Im folgenden Beispiel wird ein TextBlock mit einem GraphicElement (ein roter Rahmen) erstellt und angezeigt. Darunter wird ein zweiter TextBlock hinzugefügt, der eine Beschriftung enthält.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GraphicElementExample extends Sprite {
        
        public function GraphicElementExample():void {
            
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 14;
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0,0, 200, 200);
            redBox.graphics.endFill();   
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = graphicElement;
            var textLine1:TextLine = textBlock.createTextLine(null,redBox.width);
            addChild(textLine1);
            textLine1.x = 15
            textLine1.y = 215
            var str:String = "Your picture here ...";
            var textElement:TextElement = new TextElement(str, format);
            textBlock = new TextBlock();
            textBlock.content = textElement;
            var textLine2 = textBlock.createTextLine(null, 300);
            addChild(textLine2);
            textLine2.x = textLine1.x;
            textLine2.y += textLine1.y + format.fontSize;        
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:GraphicElement:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
	 Erstellt eine neue GraphicElement-Instanz.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>graphic</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Das DisplayObject, mit dem das GraphicElement gefüllt wird. Der Standardwert ist <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementWidth</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>Die Breite des Bereichs, der für das Element reserviert ist, in Pixel. Der Standardwert ist 15.
	 </apiDesc></apiParam><apiParam><apiItemName>elementHeight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>Die Höhe des Bereichs, der für das Element reserviert ist, in Pixel. Der Standardwert ist 15.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>Das Elementformat für das Element. Der Standardwert ist <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>Das <codeph>EventDispatcher</codeph>-Objekt, das Kopien von jedem Ereignis erhält, das für Textzeilen ausgelöst wurde, die aufgrund dieses content-Elements erstellt wurden. Der Standardwert ist <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>Die Drehung, die auf das Element als Einheit angewendet werden soll. Verwenden Sie <codeph>flash.text.engine.TextRotation</codeph>-Konstanten für diese Eigenschaft. Der Standardwert ist <codeph>flash.text.engine.TextRotation.ROTATE_0</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Erstellt eine neue GraphicElement-Instanz.
	 
	 <p>Der Registrierungspunkt der Grafik wird an der oberen linken Ecke des Bereichs ausgerichtet, der durch <codeph>elementHeight</codeph>, <codeph>elementWidth</codeph> und <codeph>elementFormat.baselineShift</codeph> definiert ist. Die Grafik wird nicht skaliert, um mit der Größe des Bereichs übereinzustimmen. Wenn das GraphicElement einen <codeph>eventMirror</codeph> hat, wird die Größe und Position des sich ergebenden Spiegelbereichs durch die <codeph>elementWidth</codeph>- und die <codeph>elementHeight</codeph>-Eigenschaft und nicht durch die Grafik bestimmt. Bei Verwendung eines Loaders wird die Grafik möglicherweise nicht an dem Zeitpunkt geladen, an dem die Textzeile die Spiegelbereiche erstellt werden.</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:GraphicElement:elementHeight:get"><apiName>elementHeight</apiName><shortdesc>
	 Die Höhe in Pixel, die in der Zeile für die Grafik reserviert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Die Höhe in Pixel, die in der Zeile für die Grafik reserviert ist. Für das Skalieren der Grafik ist der Aufrufer zuständig.
	 
	 <p>Der Standardwert ist 15,0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:elementWidth:get"><apiName>elementWidth</apiName><shortdesc>
	 Die Breite in Pixel, die in der Zeile für die Grafik reserviert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Die Breite in Pixel, die in der Zeile für die Grafik reserviert ist. Für das Skalieren der Grafik ist der Aufrufer zuständig.
	 
	 <p>Der Standardwert ist 15,0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc>
	 Das DisplayObject, das als Grafik für das GraphicElement verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:DisplayObject</apiValueClassifier></apiValueDef><apiDesc>
	 Das DisplayObject, das als Grafik für das GraphicElement verwendet werden soll.
	 
	 <p>Der Standardwert ist <codeph>null</codeph>.</p>
	 
	 <p>Wenn das GraphicElement Teil einer Textzeile wird, wird die Grafik als untergeordnetes Element der Zeile hinzugefügt. Durch das Festlegen der Grafik wird die alte Grafik aus der Zeile entfernt und die neue hinzugefügt.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontWeight"><apiName>FontWeight</apiName><shortdesc>
Die FontWeight-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit FontDescription.fontWeight verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die FontWeight-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit <codeph>FontDescription.fontWeight</codeph> verwendet werden. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontWeight"><linktext>flash.text.engine.FontDescription.fontWeight</linktext></link></related-links><apiValue id="flash.text.engine:FontWeight:BOLD"><apiName>BOLD</apiName><shortdesc> 
	Wird verwendet, um die Fettschriftstärke anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bold</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um die Fettschriftstärke anzuzeigen.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontWeight:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	Wird verwendet, um die normale Schriftstärke anzuzeigen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um die normale Schriftstärke anzuzeigen.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBaseline"><apiName>TextBaseline</apiName><shortdesc>
Die TextBaseline-Klasse ist eine Zusammenstellung von Konstantenwerten, die zur Einstellung der dominantBaseline- und alignmentBaseline-Eigenschaft in der ElementFormat-Klasse verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die TextBaseline-Klasse ist eine Zusammenstellung von Konstantenwerten, die zur Einstellung der <codeph>dominantBaseline</codeph>- und <codeph>alignmentBaseline</codeph>-Eigenschaft in der ElementFormat-Klasse verwendet werden. <codeph/> Betrachten Sie folgenden Situation:
<p><adobeimage alt="Ausrichtung der Textgrundlinie" href="../../../images/textBaselines.gif"/></p>
<p>Die Zeile besteht aus vier <codeph>TextElement</codeph>-Objekten, die „a“, „b“, „cccccccc“ bzw. „X“ enthalten. Das Element, das „X“ enthält, ist das größte Element in der Zeile und bestimmt daher die Grundlinie der Zeile. Die Roman-Grundlinie des „X“-Elements wird an der Roman-Grundlinie der Zeile ausgerichtet. Die obere ideografische Grundlinie des „a“-Elements wird an der oberen ideografischen Grundlinie der Zeile ausgerichtet. Die untere ideografische Grundlinie des „b“-Elements wird an der unteren ideografischen Grundlinie der Zeile ausgerichtet. Die mittlere ideografische Grundlinie des „cccccccc“-Elements wird an der mittleren ideografischen Grundlinie der Zeile ausgerichtet.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links><apiValue id="flash.text.engine:TextBaseline:ASCENT"><apiName>ASCENT</apiName><shortdesc> 
	Gibt eine Oberlängen-Grundlinie an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt eine Oberlängen-Grundlinie an. Bei einem Textelement wird dieser Wert von der Schriftart und Punktgröße des Texts bestimmt. Für ein Grafikelement verwendet die Text-Engine die obere geometrische Linie des Elements.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:DESCENT"><apiName>DESCENT</apiName><shortdesc> 
	Gibt eine Unterlängen-Grundlinie an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>descent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt eine Unterlängen-Grundlinie an. Bei einem Textelement wird dieser Wert von der Schriftart und Punktgröße des Texts bestimmt. Für ein Grafikelement verwendet das Textelement die untere geometrische Linie des Elements.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_BOTTOM"><apiName>IDEOGRAPHIC_BOTTOM</apiName><shortdesc> 
	Gibt eine untere ideografische Grundlinie an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicBottom</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt eine untere ideografische Grundlinie an. Bei einem Textelement wird dieser Wert von der Schriftart und Punktgröße des Texts bestimmt. Für ein Grafikelement verwendet die Text-Engine die untere geometrische Linie des Elements.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_CENTER"><apiName>IDEOGRAPHIC_CENTER</apiName><shortdesc> 
	Gibt eine mittlere ideografische Grundlinie an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt eine mittlere ideografische Grundlinie an. Bei einem Textelement wird dieser Wert von der Schriftart und Punktgröße des Texts bestimmt. Für ein Grafikelement verwendet die Text-Engine die mittlere geometrische Linie des Elements.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_TOP"><apiName>IDEOGRAPHIC_TOP</apiName><shortdesc> 
	Gibt eine obere ideografische Grundlinie an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt eine obere ideografische Grundlinie an. Bei einem Textelement wird dieser Wert von der Schriftart und Punktgröße des Texts bestimmt. Für ein Grafikelement verwendet die Text-Engine die obere geometrische Linie des Elements.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:ROMAN"><apiName>ROMAN</apiName><shortdesc> 
	Gibt eine Roman-Grundlinie an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>roman</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt eine Roman-Grundlinie an. Bei einem Textelement wird dieser Wert von der Schriftart und Punktgröße des Texts bestimmt. Für ein Grafikelement verwendet die Text-Engine die untere geometrische Linie des Elements.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:USE_DOMINANT_BASELINE"><apiName>USE_DOMINANT_BASELINE</apiName><shortdesc> 
	Gibt an, dass die alignmentBaseline mit der dominantBaseline übereinstimmt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>useDominantBaseline</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Gibt an, dass die alignmentBaseline mit der dominantBaseline übereinstimmt. Verwenden Sie diesen Wert nur, um <codeph>ElementFormat.alignmentBaseline</codeph> festzulegen.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:BreakOpportunity"><apiName>BreakOpportunity</apiName><shortdesc>
Die BreakOpportunity-Klasse ist eine Zusammenstellung von Konstantenwerten, mit denen Sie die breakOpportunity-Eigenschaft der ElementFormat-Klasse festlegen können.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die BreakOpportunity-Klasse ist eine Zusammenstellung von Konstantenwerten, mit denen Sie die <codeph>breakOpportunity</codeph>-Eigenschaft der ElementFormat-Klasse festlegen können. Diese Eigenschaft bestimmt, welche Zeichen für einen Umbruch in Frage kommen, wenn Text über mehrere Zeilen verteilt wird.


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/breakOpportunity"><linktext>ElementFormat.breakOpportunity</linktext></link></related-links><apiValue id="flash.text.engine:BreakOpportunity:ALL"><apiName>ALL</apiName><shortdesc> 
	Behandelt alle Zeichen im ContentElement-Objekt als obligatorische Zeilenumbruchmöglichkeit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Behandelt alle Zeichen im ContentElement-Objekt als obligatorische Zeilenumbruchmöglichkeit. Sie können diese Option verwenden, um die kürzestmöglichen Zeilen zu erstellen, mit denen Sie Text auf einer Linie oder ähnliche Effekte erstellen können.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:ANY"><apiName>ANY</apiName><shortdesc> 
	Behandelt jedes Zeichen im ContentElement-Objekt als Zeilenumbruchmöglichkeit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Behandelt jedes Zeichen im ContentElement-Objekt als Zeilenumbruchmöglichkeit. Dieser Wert wird normalerweise verwendet, wenn Roman-Text in asiatischem Text eingebettet ist und Zeilenumbrüche in Wörtern vorkommen können.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Basiert Zeilenumbruchmöglichkeiten auf Unicode-Zeicheneigenschaften.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Basiert Zeilenumbruchmöglichkeiten auf Unicode-Zeicheneigenschaften. Diese Einstellung implementiert die Unicode-Zeilenumbruchmöglichkeiten, die durch den Unicode Standard Anhang 14 definiert sind. 
	</apiDesc></apiValueDetail><related-links><link href="http://unicode.org/reports/tr14/tr14-12.html"><linktext>Artikel zu Unicode-Zeilenumbruchmöglichkeiten</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:BreakOpportunity:NONE"><apiName>NONE</apiName><shortdesc> 
	Behandelt kein Zeichen im ContentElement-Objekt als Zeilenumbruchmöglichkeit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Behandelt kein Zeichen im ContentElement-Objekt als Zeilenumbruchmöglichkeit.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitWidth"><apiName>DigitWidth</apiName><shortdesc>
Die DigitWidth-Klasse ist eine Zusammenstellung von Konstantenwerten, die zur Einstellung der digitWidth-Eigenschaft in der ElementFormat-Klasse verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die DigitWidth-Klasse ist eine Zusammenstellung von Konstantenwerten, die zur Einstellung der digitWidth-Eigenschaft in der <codeph>digitWidth</codeph>Eigenschaft in der ElementFormat-Klasse verwendet werden. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitWidth"><linktext>flash.text.engine.ElementFormat.digitWidth</linktext></link></related-links><apiValue id="flash.text.engine:DigitWidth:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Wird verwendet, um die standardmäßige Ziffernbreite anzugeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um die standardmäßige Ziffernbreite anzugeben. Die Ergebnisse sind schriftartenabhängig; Zeichen verwenden die Einstellungen, wie sie vom Schriftartdesigner festgelegt wurden, ohne dass irgendwelche Merkmale angewendet werden.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:PROPORTIONAL"><apiName>PROPORTIONAL</apiName><shortdesc> 
	Wird verwendet, um die proportionale Ziffernbreite anzugeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proportional</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um die proportionale Ziffernbreite anzugeben.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:TABULAR"><apiName>TABULAR</apiName><shortdesc> 
	Wird verwendet, um die Tabstopp-Ziffernbreite anzugeben.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabular</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um die Tabstopp-Ziffernbreite anzugeben.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:Kerning"><apiName>Kerning</apiName><shortdesc>
Die Kerning-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit ElementFormat.kerning verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die Kerning-Klasse ist eine Zusammenstellung von Konstantenwerten, die mit <codeph>ElementFormat.kerning</codeph> verwendet werden. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/kerning"><linktext>flash.text.engine.ElementFormat.kerning</linktext></link></related-links><apiValue id="flash.text.engine:Kerning:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Wird verwendet, um anzuzeigen, dass Kerning nur für Zeichen in asiatischer Typografie aktiviert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um anzuzeigen, dass Kerning nur für Zeichen in asiatischer Typografie aktiviert ist. Kerning wird zwischen zwei Zeichen angewendet, wenn keines davon Kanji, Hiragana oder Katakana ist.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:OFF"><apiName>OFF</apiName><shortdesc> 
	Wird verwendet, um anzuzeigen, dass Kerning deaktiviert ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um anzuzeigen, dass Kerning deaktiviert ist.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:ON"><apiName>ON</apiName><shortdesc> 
	Wird verwendet, um anzuzeigen, dass Kerning aktiviert ist.
</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Wird verwendet, um anzuzeigen, dass Kerning aktiviert ist.

	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:CFFHinting"><apiName>CFFHinting</apiName><shortdesc>
Die CFFHinting-Klasse definiert Werte für CFF-Hinting in der FontDescription-Klasse.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die CFFHinting-Klasse definiert Werte für CFF-Hinting in der FontDescription-Klasse.

<p>Beim Hinting wird die Anzeige einer Konturschrift so angepasst, dass diese Schrift am Pixelraster ausgerichtet ist. Bei kleinen Bildschirmgrößen entsteht durch Hinting ein klar lesbarer Text.
</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:CFFHinting:HORIZONTAL_STEM"><apiName>HORIZONTAL_STEM</apiName><shortdesc>
	Richtet breite horizontale Striche am Pixelraster aus, um die Lesbarkeit zu verbessern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontalStem</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Richtet breite horizontale Striche am Pixelraster aus, um die Lesbarkeit zu verbessern. Diese Konstante wird zur Einstellung der <codeph>cffHinting</codeph>-Eigenschaft der FontDescription-Klasse verwendet. Verwenden Sie die Syntax <codeph>CFFHinting.HORIZONTAL_STEM</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:CFFHinting:NONE"><apiName>NONE</apiName><shortdesc> 
	Es wird kein Hinting angewendet.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Es wird kein Hinting angewendet. Horizontale Striche in den Glyphen werden nicht am Pixelraster ausgerichtet. Diese Konstante wird zur Einstellung der <codeph>cffHinting</codeph>-Eigenschaft der FontDescription-Klasse verwendet. Empfohlene Einstellung für Animationen oder große Schriftgrößen. Verwenden Sie die Syntax <codeph>CFFHinting.NONE</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineMirrorRegion"><apiName>TextLineMirrorRegion</apiName><shortdesc>
 Die TextLineMirrorRegion-Klasse repräsentiert einen Teil einer Textzeile, in dem Ereignisse für einen anderen Ereignisauslöser gespiegelt werden sollen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die TextLineMirrorRegion-Klasse repräsentiert einen Teil einer Textzeile, in dem Ereignisse für einen anderen Ereignisauslöser gespiegelt werden sollen.
 
 <p>Wenn eine Textzeile nach dem Abschluss der normalen Ereignisauslösung für die Textzeile gültig ist und die Ereignispropagierung nicht angehalten wurde, werden erneut Ereignisse für die Spiegelbereiche der Zeile ausgelöst.
</p>
 
 <p>Das Spiegeln von Mausereignissen ist ein Sonderfall. Da es sich bei Spiegelbereichen nicht wirklich um Anzeigeobjekte handelt, werden für <codeph>mouseOver</codeph> und <codeph>mouseOut</codeph> Ereignisse simuliert. Für <codeph>rollOver</codeph> und <codeph>rollOut</codeph>werden keine Ereignisse simuliert. Alle natürlich auftretenden <codeph>mouseOver</codeph>-, <codeph>mouseOut</codeph>-, <codeph>rollOver</codeph>- und <codeph>rollOut</codeph>-Ereignisse (gleichgültig, ob ihr Ziel die Textzeile oder ein untergeordnetes Element der Textzeile ist) werden ignoriert, d. h. sie werden nicht gespiegelt.</p>
 
 <p>Sie können ein TextLineMirrorRegion-Objekt nicht direkt aus ActionScript-Code erstellen. Wenn Sie <codeph>new TextLineMirrorRegion()</codeph> aufrufen, wird ein Ausnahmefehler zurückgegeben. Eine TextLineMirrorRegion wird erstellt, wenn Sie einen Ereignisspiegel einem ContentElement-Objekt zuweisen.</p>
 
 <p>Die TextLineMirrorRegion-Klasse ist endgültig, d. h., aus ihr können keine Unterklassen abgeleitet werden.
</p>
 
 </apiDesc><example conref="examples\TextLineMirrorRegionExample.as"> In diesem Beispiel wird ein Textblock mit Spiegelbereichen angezeigt. Wenn Sie auf einen Spiegelbereich klicken, wird dieser rot.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ContentElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLineMirrorRegion;
    import flash.events.MouseEvent;
    import flash.events.EventDispatcher;
    import flash.ui.Mouse;

    public class TextLineMirrorRegionExample extends Sprite {
        
        var myEvent:EventDispatcher = new EventDispatcher();
        var fontDescription:FontDescription = new FontDescription();
        var textBlock:TextBlock = new TextBlock();

        public function TextLineMirrorRegionExample():void {
            
            fontDescription.fontWeight = "bold";
            var blackFormat:ElementFormat = new ElementFormat();
            blackFormat.fontSize = 18;
            blackFormat.color = 0x000000;
            blackFormat.fontDescription = fontDescription;
            
            var textElement1 = new TextElement("Click on different parts of me to find the ", blackFormat);
            var textElement2 = new TextElement("mirror regions",blackFormat);
            var textElement3 = new TextElement(". If I am a mirror region, I'll ",blackFormat);
            var textElement4 = new TextElement("turn red",blackFormat);
            var textElement5 = new TextElement(".",blackFormat);
            
            myEvent.addEventListener("click", clickHandler);
            myEvent.addEventListener("mouseOut", mouseOutHandler);
            myEvent.addEventListener("mouseOver", mouseOverHandler);
            
            var groupVector:Vector.&lt;ContentElement> = new Vector.&lt;ContentElement>;
            groupVector.push(textElement1, textElement2, textElement3, textElement4, textElement5);
            var groupElement:GroupElement = new GroupElement(groupVector);
            
            textElement2.eventMirror=myEvent;
            textElement4.eventMirror=myEvent;
            
            textBlock.content = groupElement;
            createLines(textBlock);
        }
    
        private function clickHandler(event:MouseEvent):void
        {
            var redFormat:ElementFormat = new ElementFormat();
            redFormat.color = 0xCC0000;
            redFormat.fontSize = 18;
            redFormat.fontDescription = fontDescription;
            var line:TextLine = event.target as TextLine;
            var region:TextLineMirrorRegion = line.getMirrorRegion(myEvent);
            region.element.elementFormat = redFormat;
            createLines(textBlock);
        }
        
        private function mouseOverHandler(event:MouseEvent):void
        {
            Mouse.cursor = "button";
        }
        
        private function mouseOutHandler(event:MouseEvent):void
        {
            Mouse.cursor = "arrow";
        }
            
        private function createLines(textBlock:TextBlock):void 
        {
            var purgeLine:TextLine = textBlock.firstLine;
                
            while (purgeLine)
            {
                removeChild (purgeLine);
                purgeLine = purgeLine.nextLine;
            }
            var lineWidth:Number = 150;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
                
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/mirrorRegions"><linktext>TextLine.mirrorRegions</linktext></link></related-links><apiValue id="flash.text.engine:TextLineMirrorRegion:bounds:get"><apiName>bounds</apiName><shortdesc>
	 Die Grenzen des Spiegelbereichs in Relation zur Textzeile.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 Die Grenzen des Spiegelbereichs in Relation zur Textzeile.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:element:get"><apiName>element</apiName><shortdesc>
	 Das ContentElement-Objekt, aus dem der Spiegelbereich abgeleitet wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>Die TextLine, zu der dieses Element gehört, ist nicht gültig.

	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Das <codeph>ContentElement</codeph>-Objekt, aus dem der Spiegelbereich abgeleitet wurde.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:mirror:get"><apiName>mirror</apiName><shortdesc>
	 Das EventDispatcher-Objekt, in das Ereignisse, die den Spiegelbereich betreffen, gespiegelt werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 Das <codeph>EventDispatcher</codeph>-Objekt, in das Ereignisse, die den Spiegelbereich betreffen, gespiegelt werden. Dazu gehören Mausereignisse, die speziell im Spiegelbereich auftreten, und alle anderen Ereignisse, deren Ziel die Textzeile ist.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:nextRegion:get"><apiName>nextRegion</apiName><shortdesc>
	 Die nächste TextLineMirrorRegion im Satz, die vom Textelement abgeleitet wird, oder null, wenn der aktuelle Bereich der letzte Spiegelbereich im Satz ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 Die nächste TextLineMirrorRegion im Satz, die vom Textelement abgeleitet wird, oder <codeph>null</codeph>, wenn der aktuelle Bereich der letzte Spiegelbereich im Satz ist. Kann auf der gleichen oder einer anderen Textzeile liegen.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:previousRegion:get"><apiName>previousRegion</apiName><shortdesc>
	 Die vorherige TextLineMirrorRegion im Satz, die vom Textelement abgeleitet wird, oder null, wenn der aktuelle Bereich der erste Spiegelbereich im Satz ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 Die vorherige TextLineMirrorRegion im Satz, die vom Textelement abgeleitet wird, oder <codeph>null</codeph>, wenn der aktuelle Bereich der erste Spiegelbereich im Satz ist. Kann auf der gleichen oder einer anderen Textzeile liegen.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:textLine:get"><apiName>textLine</apiName><shortdesc>
	 Die TextLine, die diesen Spiegelbereich enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Die TextLine, die diesen Spiegelbereich enthält.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LineJustification"><apiName>LineJustification</apiName><shortdesc>
Die LineJustification-Klasse ist eine Zusammenstellung von Konstantenwerten, die zur Einstellung der lineJustfication-Eigenschaft in den TextJustifier-Unterklassen verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
Die LineJustification-Klasse ist eine Zusammenstellung von Konstantenwerten, die zur Einstellung der <codeph>lineJustfication</codeph>-Eigenschaft in den TextJustifier-Unterklassen verwendet werden. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/lineJustification"><linktext>EastAsianJustifier.lineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier/lineJustification"><linktext>SpaceJustifier.lineJustification</linktext></link></related-links><apiValue id="flash.text.engine:LineJustification:ALL_BUT_LAST"><apiName>ALL_BUT_LAST</apiName><shortdesc> 
	Weist die Text-Engine an, alle Zeilen mit Ausnahme der letzten im Blocksatz auszurichten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allButLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Weist die Text-Engine an, alle Zeilen mit Ausnahme der letzten im Blocksatz auszurichten.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:ALL_INCLUDING_LAST"><apiName>ALL_INCLUDING_LAST</apiName><shortdesc> 
	Weist die Text-Engine an, alle Zeilen im Blocksatz auszurichten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allIncludingLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Weist die Text-Engine an, alle Zeilen im Blocksatz auszurichten.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:UNJUSTIFIED"><apiName>UNJUSTIFIED</apiName><shortdesc> 
	Weist die Text-Engine zum Erstellen nicht im Blocksatz ausgerichteter Zeilen an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unjustified</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Weist die Text-Engine zum Erstellen nicht im Blocksatz ausgerichteter Zeilen an.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
 Die SpaceJustifier-Klasse repräsentiert Eigenschaften, die die Blocksatzoptionen für die Textzeilen in einem Textblock steuern.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die SpaceJustifier-Klasse repräsentiert Eigenschaften, die die Blocksatzoptionen für die Textzeilen in einem Textblock steuern. 
 
 <p> Bevor Sie die Eigenschaften eines SpaceJustifier-Objekts einstellen können, erstellen Sie das Objekt mithilfe des Konstruktors <codeph>new SpaceJustifier()</codeph>. Das Einstellen der Eigenschaften eines SpaceJustifier-Objekts, nachdem Sie es auf einen TextBlock angewendet haben, macht den TextBlock nicht ungültig.</p>
 
 </apiDesc><example conref="examples\SpaceJustifierExample.as"> Im folgenden Beispiel wird der Zeichenabstand verwendet und ein Textblock mit Ausnahme der letzten Zeile im Blocksatz ausgerichtet.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.SpaceJustifier;
    import flash.text.engine.LineJustification;
    
    public class SpaceJustifierExample extends Sprite {
        
        public function SpaceJustifierExample():void {
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format);
            var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_BUT_LAST);
            spaceJustifier.letterSpacing = true;
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.textJustifier = spaceJustifier;
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:SpaceJustifier:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
     Erstellt ein SpaceJustifier-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>
     </internal></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>Die angegebene <codeph>locale</codeph>-Wert ist entweder <codeph>null</codeph> oder zu kurz, um ein gültiges Gebietsschema anzugeben.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>Die angegebene <codeph>lineJustification</codeph> ist kein Mitglied von <codeph>LineJustification</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>Das Gebietsschema, das die Regeln für den Blocksatz bestimmt. Der Standardwert ist <codeph>"en"</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unjustified</apiData><apiDesc>Der Typ der Zeilenausrichtung im Blocksatz für den Text in einem Textblock. Verwenden Sie <codeph>LineJustification</codeph>-Konstanten für diese Eigenschaft. Der Standardwert ist <codeph>LineJustification.UNJUSTIFIED</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>letterSpacing</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Gibt an, ob Zeichenabstand während der Ausrichtung verwendet werden soll. Der Standardwert ist <codeph>false</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Erstellt ein SpaceJustifier-Objekt. Die LineJustification-Klasse enthält Konstanten für die Angabe der Zeilenausrichtungstypen, die Sie anwenden können.
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:SpaceJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Erstellt eine geklonte Kopie von SpaceJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>This class is currently stored as a live reference, but there is no way to track when its 
	 properties change.  This means that when changes are made, text blocks are not invalidated, which in 
	 the current implementation can lead to player crashes.  Even from the API perspective its wrong, as 
	 the affected text lines should be marked INVALID when format changes are made, but they�re not. The 
	 solution is to use a copy-on-set model.  When the object is passed in, the player copies it, so later
	 changes to the object that was passed in have no effect. The setter makes an internal copy of the 
	 array; the getter returns a copy of the internal copy. Operations like 
	 myBlock.textJustifier.spaceJustifier.letterSpacing = true will have no effect. Users who subclass 
	 this class in the future will need to use the clone() method to implement this technique of 
	 'locking' the format once it has been set.  
	 
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Kopie des <codeph>SpaceJustifier</codeph>-Objekts.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Erstellt eine geklonte Kopie von SpaceJustifier.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:SpaceJustifier:letterSpacing:get"><apiName>letterSpacing</apiName><shortdesc>
     Gibt an, ob Zeichenabstand während der Ausrichtung verwendet werden soll.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Gibt an, ob Zeichenabstand während der Ausrichtung verwendet werden soll.
	 
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>