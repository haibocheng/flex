<?xml version="1.0"?>
<apiPackage id="flash.xml"><apiName>flash.xml</apiName><apiDetail/><apiClassifier id="flash.xml:XMLNode"><apiName>XMLNode</apiName><shortdesc>
 Die XMLNode-Klasse ist das bisherige XML-Objekt aus ActionScript 2.0, das in ActionScript 3.0 umbenannt wurde.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode, XMLNode object, built-in class
 </keyword></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die XMLNode-Klasse ist das bisherige XML-Objekt aus ActionScript 2.0, das in ActionScript 3.0 umbenannt wurde. Verwenden Sie in ActionScript 3.0 stattdessen bevorzugt die neue übergeordnete <xref href="../../XML.html">XML</xref>-Klasse sowie deren zugehörige Klassen, die E4X (ECMAScript for XML) unterstützen. Die XMLNode-Klasse gibt es aus Gründen der Rückwärtskompatibilität.
 
 </apiDesc><example conref="examples\XMLDocumentExample.as"> Im folgenden Beispiel werden die Klassen XMLDocument und XMLNode zum Analysieren und Formatieren eines XML-Dokuments verwendet. Im Beispiel wird keine externe XML-Datei geladen, sondern es wird eine XML-Klasse der obersten Ebene verwendet, um ein XML-Dokument zu erstellen und dieses anschließend zu analysieren. 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.xml.XMLDocument;
    import flash.xml.XMLNode;
    import flash.xml.XMLNodeType;

    public class XMLDocumentExample extends Sprite {
        public function XMLDocumentExample() {
            var result:XMLDocument = new XMLDocument();
            result.ignoreWhite = true;
            result.parseXML(getXMLString());

            var books:Array = parseBooks(result.firstChild);
            trace("books: \n" + books);
        }

        private function parseBooks(node:XMLNode):Array {
            var books:Array = new Array();

            var kids:Array = node.childNodes;
            for each(var item:XMLNode in kids) {
                parseBook(item, books);
            }

            return books;
        }

        private function parseBook(node:XMLNode, books:Array):void {
            var item:Book = new Book();
            item.setPublisher(node.attributes.publisher);
            item.setName(node.attributes.name);
            books.push(item);
        }

        private function getXMLString():String {
            var list:XML = &lt;books>
                                &lt;book publisher="Addison-Wesley" name="Design Patterns" />
                                &lt;book publisher="Addison-Wesley" name="The Pragmatic Programmer" />
                                &lt;book publisher="Addison-Wesley" name="Test Driven Development" />
                                &lt;book publisher="Addison-Wesley" name="Refactoring to Patterns" />
                                &lt;book publisher="O'Reilly Media" name="The Cathedral &amp; the Bazaar" />
                                &lt;book publisher="O'Reilly Media" name="Unit Test Frameworks" />
                            &lt;/books>;
            return list.toXMLString();
        }
    }

}
class Book {
    private var publisher:String;
    private var name:String;

    public function setPublisher(publisher:String):void {
        this.publisher = publisher;
    }

    public function setName(name:String):void {
        this.name = name;
    }

    public function toString():String {
        return "[Book name: " + name + " publisher: " + publisher + "]\n";
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="#XML"><linktext>XML</linktext></link><link href="flash.xml.xml#XMLDocument"><linktext>flash.xml.XMLDocument</linktext></link></related-links><apiConstructor id="flash.xml:XMLNode:XMLNode"><apiName>XMLNode</apiName><shortdesc>
 Erstellt ein neues XMLNode-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>new XMLNode, new, constructor
 </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>Knotentyp: Entweder 1 (für ein XML-Element) oder 3 (für einen Textknoten).
 </apiDesc></apiParam><apiParam><apiItemName>value</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der XML-Text, der zum Erstellen des neuen XMLNode-Objekts analysiert wurde. 
 
 
 
 
 
 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 Erstellt ein neues XMLNode-Objekt. Vor dem Aufruf einer Methode der XMLNode-Klasse muss der Konstruktor zum Erstellen eines XMLNode-Objekts verwendet werden.
 <p><b>Hinweis: </b> Verwenden Sie die <codeph>createElement()</codeph>- und <codeph>createTextNode()</codeph>-Methode, um einer XML-Dokumentstruktur Elemente und Textknoten hinzuzufügen.</p>
 
 </apiDesc></apiConstructorDetail><related-links><link href="flash.xml.xml#XMLDocument/createElement()"><linktext>XMLDocument.createElement()</linktext></link><link href="flash.xml.xml#XMLDocument/createTextNode()"><linktext>XMLDocument.createTextNode()</linktext></link></related-links></apiConstructor><apiOperation id="flash.xml:XMLNode:appendChild"><apiName>appendChild</apiName><shortdesc>
	  
	 Hängt den angegebenen Knoten an die untergeordnete (Child-)Liste des XML-Objekts an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.appendchild, appendchild
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier><apiDesc>Ein XMLNode-Objekt, das den von seiner aktuellen Position in die untergeordnete (Child-)Liste des Objekts <codeph>my_xml</codeph> zu verschiebenden Knoten darstellt.
	 
	 
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
	 Hängt den angegebenen Knoten an die untergeordnete (Child-)Liste des XML-Objekts an. Diese Methode wirkt sich direkt auf den Knoten aus, auf den über den Parameter <codeph>childNode</codeph> verwiesen wird, hängt jedoch keine Kopie des Knotens an. Wenn der anzuhängende Knoten bereits in einer anderen Baumstruktur vorhanden ist, wird er beim Anhängen an die neue Position aus der aktuellen Position entfernt. Wenn der Parameter <codeph>childNode</codeph> auf einen Knoten verweist, der bereits in einer anderen XML-Baumstruktur vorhanden ist, wird der angehängte untergeordnete (Child-)Knoten erst in der neuen Baumstruktur platziert, nachdem er aus dem vorhandenen übergeordneten Knoten entfernt wurde.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.xml:XMLNode:cloneNode"><apiName>cloneNode</apiName><shortdesc>
	  
	 Erstellt einen neuen XML-Knoten vom gleichen Typ und mit dem gleichen Namen und Wert sowie den gleichen Attributen wie das angegebene XML-Objekt und gibt diesen zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.clonenode, clodenode
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein XMLNode-Objekt.
	 
	 
	 
	 </apiDesc><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier></apiReturn><apiParam><apiItemName>deep</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Ein boolescher Wert. Wenn er auf <codeph>true</codeph> gesetzt ist, werden die untergeordneten Knoten des angegebenen XML-Objekts rekursiv geklont.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	  
	 Erstellt einen neuen XML-Knoten vom gleichen Typ und mit dem gleichen Namen und Wert sowie den gleichen Attributen wie das angegebene XML-Objekt und gibt diesen zurück. Wenn <codeph>deep</codeph> auf <codeph>true</codeph> gesetzt ist, werden alle untergeordneten Knoten rekursiv geklont, wodurch eine exakte Kopie der Dokumentstruktur des ursprünglichen Objekts entsteht. 
	 <p>Der zurückgegebene Klon ist nicht mehr mit der Struktur des geklonten Knotens verknüpft. Somit haben <codeph>nextSibling</codeph>, <codeph>parentNode</codeph> und <codeph>previousSibling</codeph> alle den Wert <codeph>null</codeph>. Wenn der Parameter <codeph>deep</codeph> auf <codeph>false</codeph> gesetzt ist oder der <codeph>my_xml</codeph>-Knoten über keine untergeordnete Knoten verfügt, haben <codeph>firstChild</codeph> und <codeph>lastChild</codeph> ebenfalls den Wert „null“.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.xml:XMLNode:getNamespaceForPrefix"><apiName>getNamespaceForPrefix</apiName><shortdesc>
	 Gibt den Namespace-URI zurück, der mit dem angegebenen Präfix für den Knoten verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><refpath>
	 </refpath></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der mit dem angegebenen Präfix verknüpfte Namespace. 
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>prefix</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Das Präfix, für das die Methode den verknüpften Namespace zurückgibt.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gibt den Namespace-URI zurück, der mit dem angegebenen Präfix für den Knoten verknüpft ist. Zum Bestimmen des URI sucht <codeph>getPrefixForNamespace()</codeph> bei Bedarf ab dem Knoten in der XML-Hierarchie aufwärts und gibt den Namespace-URI der ersten <codeph>xmlns</codeph>-Deklaration für das gegebene <codeph>prefix</codeph> zurück.
	 
	 <p>Ist für dieses Präfix kein Namespace definiert, gibt die Methode <codeph>null</codeph> zurück.</p>
	 
	 <p>Wenn Sie einen leeren String (<codeph>""</codeph>) als <codeph>prefix</codeph> angeben und ein Standard-Namespace für den Knoten definiert ist (wie in <codeph>xmlns="http://www.example.com/"</codeph>), gibt die Methode den URI des Standard-Namespace zurück.
	 </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLNode/getPrefixForNamespace()"><linktext>XMLNode.getPrefixForNamespace()</linktext></link><link href="flash.xml.xml#XMLNode/namespaceURI"><linktext>XMLNode.namespaceURI</linktext></link></related-links></apiOperation><apiOperation id="flash.xml:XMLNode:getPrefixForNamespace"><apiName>getPrefixForNamespace</apiName><shortdesc>
	 Gibt das Präfix zurück, das mit dem angegebenen Namespace-URI für den Knoten verknüpft ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Das mit dem angegebenen Namespace verknüpfte Präfix. 
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>ns</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Namespace-URI, für den die Methode das verknüpfte Präfix zurückgibt.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gibt das Präfix zurück, das mit dem angegebenen Namespace-URI für den Knoten verknüpft ist. Zum Bestimmen des Präfix sucht <codeph>getPrefixForNamespace()</codeph> bei Bedarf ab dem Knoten in der XML-Hierarchie aufwärts und gibt das Präfix der ersten <codeph>xmlns</codeph>-Deklaration mit einem Namespace-URI zurück, die <codeph>ns</codeph> entspricht.
	 
	 <p>Wenn keine <codeph>xmlns</codeph>-Zuweisung für den gegebenen URI vorhanden ist, gibt die Methode <codeph>null</codeph> zurück. Wenn eine <codeph>xmlns</codeph>-Zuweisung für den gegebenen URI vorhanden ist, ohne dass ein Präfix verknüpft wurde, gibt die Methode einen leeren String (<codeph>""</codeph>) zurück.
	 </p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLNode/getNamespaceForPrefix()"><linktext>XMLNode.getNamespaceForPrefix()</linktext></link><link href="flash.xml.xml#XMLNode/namespaceURI"><linktext>XMLNode.namespaceURI</linktext></link></related-links></apiOperation><apiOperation id="flash.xml:XMLNode:hasChildNodes"><apiName>hasChildNodes</apiName><shortdesc>
	 Gibt an, ob dem jeweiligen XMLNode-Objekt weitere Knoten untergeordnet sind.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.haschildnodes, haschildnodes, has child nodes
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Gibt <codeph>true</codeph> zurück, wenn dem angegebenen XMLNode-Objekt weitere Knoten untergeordnet sind, andernfalls <codeph>false</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt an, ob dem jeweiligen XMLNode-Objekt weitere Knoten untergeordnet sind. Diese Eigenschaft ist <codeph>true</codeph>, wenn dem angegebenen XMLNode-Objekt weitere Knoten untergeordnet sind. Andernfalls ist es <codeph>false</codeph>.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.xml:XMLNode:insertBefore"><apiName>insertBefore</apiName><shortdesc>
	 Fügt in die untergeordnete (Child-)Liste des XML-Objekts vor dem beforeNode-Knoten einen neuen untergeordneten Knoten ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.insertbefore, insertbefore, insert before
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>node</apiItemName><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier><apiDesc>Das einzufügende XMLNode-Objekt.
	 </apiDesc></apiParam><apiParam><apiItemName>before</apiItemName><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier><apiDesc>Das XMLNode-Objekt vor dem Einfügepunkt für <codeph>childNode</codeph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Fügt einen neuen untergeordneten Knoten vor dem <codeph>beforeNode</codeph>-Knoten in die untergeordnete (Child-)Liste des XML-Objekts ein. Wenn der Parameter <codeph>beforeNode</codeph> nicht definiert oder „null“ ist, wird der Knoten mit der <codeph>appendChild()</codeph>-Methode hinzugefügt. Wenn <codeph>beforeNode</codeph> kein untergeordneter Knoten von <codeph>my_xml</codeph> ist, schlägt das Einfügen fehl.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLNode/cloneNode()"><linktext>XMLNode.cloneNode()</linktext></link></related-links></apiOperation><apiOperation id="flash.xml:XMLNode:removeNode"><apiName>removeNode</apiName><shortdesc>
	 Entfernt das angegebene XML-Objekt aus dem übergeordneten Knoten.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.removenode, removenode, remove node
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Entfernt das angegebene XML-Objekt aus dem übergeordneten Knoten. Alle untergeordneten Elemente des Knotens werden ebenfalls gelöscht.
	 
	 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.xml:XMLNode:toString"><apiName>toString</apiName><shortdesc>
	 Wertet das angegebene XMLNode-Objekt aus, erstellt eine Textdarstellung der XML-Struktur mit Knoten, untergeordneten (Child-)Knoten und Attributen und gibt das Ergebnis als String zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.tostring, tostring
	 </keyword></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Der String, der das XMLNode-Objekt angibt.
	 
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Wertet das angegebene XMLNode-Objekt aus, erstellt eine Textdarstellung der XML-Struktur mit Knoten, untergeordneten (Child-)Knoten und Attributen und gibt das Ergebnis als String zurück. 
	 
	 <p>Bei XMLDocument-Objekten der obersten Ebene (mit dem Konstruktor erstellt) gibt die<codeph>XMLDocument.toString()</codeph>-Methode die XML-Deklaration des Dokuments aus (gespeichert in der <codeph>XMLDocument.xmlDecl</codeph>-Eigenschaft), gefolgt von der <codeph>DOCTYPE</codeph>-Deklaration des Dokuments (gespeichert in der <codeph>XMLDocument.docTypeDecl</codeph>-Eigenschaft) und der Textdarstellung aller XML-Knoten im Objekt. Die XML-Deklaration wird nicht ausgegeben, wenn die Eigenschaft <codeph>XMLDocument.xmlDecl</codeph> den Wert <codeph>null</codeph> hat. Die <codeph>DOCTYPE</codeph>-Deklaration wird nicht ausgegeben, wenn die Eigenschaft <codeph>XMLDocument.docTypeDecl</codeph> den Wert <codeph>null</codeph> hat.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLDocument/docTypeDecl"><linktext>XMLDocument.docTypeDecl</linktext></link><link href="flash.xml.xml#XMLDocument/xmlDecl"><linktext>XMLDocument.xmlDecl</linktext></link></related-links></apiOperation><apiValue id="flash.xml:XMLNode:firstChild"><apiName>firstChild</apiName><shortdesc>
	 Wertet das angegebene XMLDocument-Objekt aus und verweist auf den ersten untergeordneten (Child-)Knoten in der untergeordneten Liste des übergeordneten (Parent-)Knotens.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.firstchild, first child
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.xml:XMLNode</apiValueClassifier></apiValueDef><apiDesc>
	 Wertet das angegebene XMLDocument-Objekt aus und verweist auf den ersten untergeordneten (Child-)Knoten in der untergeordneten Liste des übergeordneten (Parent-)Knotens. Diese Eigenschaft ist <codeph>null</codeph>, wenn der Knoten über keine untergeordneten Knoten verfügt. Diese Eigenschaft ist <codeph>undefined</codeph>, wenn der Knoten ein Textknoten ist. Die Eigenschaft ist schreibgeschützt und kann nicht zum Bearbeiten von untergeordneten Knoten verwendet werden. Verwenden Sie zum Bearbeiten von untergeordneten Knoten die Methoden <codeph>appendChild()</codeph>, <codeph>insertBefore()</codeph> sowie <codeph>removeNode()</codeph>.
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:lastChild"><apiName>lastChild</apiName><shortdesc>
	 Ein XMLNode-Wert, der auf den letzten untergeordneten Knoten in der untergeordneten Liste verweist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.lastchild, lastchild, last child
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.xml:XMLNode</apiValueClassifier></apiValueDef><apiDesc>
	 Ein XMLNode-Wert, der auf den letzten untergeordneten Knoten in der untergeordneten Liste verweist. Die Eigenschaft <codeph>XMLNode.lastChild</codeph> ist <codeph>null</codeph>, wenn der Knoten über keine untergeordneten Knoten verfügt. Diese Eigenschaft kann nicht zum Bearbeiten von untergeordneten Knoten verwendet werden. Verwenden Sie zum Bearbeiten von untergeordneten Knoten die Methoden <codeph>appendChild()</codeph>, <codeph>insertBefore()</codeph> und <codeph>removeNode()</codeph>.
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:nextSibling"><apiName>nextSibling</apiName><shortdesc>
	 Ein XMLNode-Wert, der auf den nächsten Geschwisterknoten in der untergeordneten Liste des übergeordneten Knotens verweist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.nextsibling, next sibling
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.xml:XMLNode</apiValueClassifier></apiValueDef><apiDesc>
	 Ein XMLNode-Wert, der auf den nächsten Geschwisterknoten in der untergeordneten Liste des übergeordneten Knotens verweist. Diese Eigenschaft hat den Wert <codeph>null</codeph>, wenn der Knoten keinen nächsten Geschwisterknoten besitzt. Diese Eigenschaft kann nicht zum Bearbeiten von untergeordneten Knoten verwendet werden. Verwenden Sie zum Bearbeiten von untergeordneten Knoten die Methoden <codeph>appendChild()</codeph>, <codeph>insertBefore()</codeph> und <codeph>removeNode()</codeph>.
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/firstChild"><linktext>XMLNode.firstChild</linktext></link><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:nodeName"><apiName>nodeName</apiName><shortdesc>
	 Ein String, der den Knotennamen des XMLNode-Objekts angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.nodename, node name
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Ein String, der den Knotennamen des XMLNode-Objekts angibt. Wenn das XMLNode-Objekt ein XML-Element ist (<codeph>nodeType == 1</codeph>), entspricht <codeph>nodeName</codeph> dem Namen des Tags für den Knoten in der XML-Datei. <codeph>TITLE</codeph> ist beispielsweise der <codeph>nodeName</codeph> eines HTML-<codeph>TITLE</codeph>-Tags. Wenn es sich bei dem XMLNode-Objekt um einen Textknoten handelt (<codeph>nodeType == 3</codeph>), weist „nodeName“ den Wert <codeph>null</codeph> auf.
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:nodeType"><apiName>nodeType</apiName><shortdesc>
	 Eine nodeType-Konstante, die entweder XMLNodeType.ELEMENT_NODE (XML-Element) oder XMLNodeType.TEXT_NODE (Textknoten) ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XML.nodetype, node type
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 Eine <codeph>nodeType</codeph>-Konstante, die entweder <codeph>XMLNodeType.ELEMENT_NODE</codeph> (XML-Element) oder <codeph>XMLNodeType.TEXT_NODE</codeph> (Textknoten) beträgt. 
	 <p><codeph>nodeType</codeph> ist ein numerischer Wert aus der NodeType-Aufzählung in der W3C DOM Level 1-Empfehlung: <xref href="http://www.w3.org/tr/1998/REC-DOM-Level-1-19981001/level-one-core.html" scope="external">http://www.w3.org/tr/1998/REC-DOM-Level-1-19981001/level-one-core.html</xref>. Die folgende Tabelle enthält die entsprechenden Werte:</p>
	 <p><adobetable><row><entry>4</entry><entry>CDATA_SECTION_NODE</entry></row>
	 
	 
	 
	 
	 <tgroup cols="2"><thead><row><entry align="left">Ganzzahl</entry><entry align="left">Definierte Konstante</entry></row></thead><tbody><row><entry>1</entry><entry>ELEMENT_NODE</entry></row><row><entry>3</entry><entry>TEXT_NODE</entry></row><row><entry>5</entry><entry>ENTITY_REFERENCE_NODE</entry></row><row><entry>7</entry><entry>PROCESSING_INSTRUCTION_NODE</entry></row><row><entry>9</entry><entry>DOCUMENT_NODE</entry></row><row><entry>11</entry><entry>DOCUMENT_FRAGMENT_NODE</entry></row></tbody></tgroup></adobetable></p>
	 <p>Die in Flash Player integrierte XMLNode-Klasse unterstützt nur die Typen <codeph>XMLNodeType.ELEMENT_NODE</codeph> und <codeph>XMLNodeType.TEXT_NODE</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNodeType/TEXT_NODE"><linktext>XMLNodeType.TEXT_NODE</linktext></link><link href="flash.xml.xml#XMLNodeType/ELEMENT_NODE"><linktext>XMLNodeType.ELEMENT_NODE</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:nodeValue"><apiName>nodeValue</apiName><shortdesc>
	 Der Knotenwert des XMLDocument-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.nodevalue, nodevalue, node value
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der Knotenwert des XMLDocument-Objekts. Wenn es sich bei dem XMLDocument-Objekt um einen Textknoten handelt, ist der <codeph>nodeType</codeph> 3 und der <codeph>nodeValue</codeph> ist der Text des Knotens. Ist das XMLDocument-Objekt ein XML-Element (<codeph>nodeType</codeph> ist 1), hat <codeph>nodeValue</codeph> den Wert <codeph>null</codeph> und ist schreibgeschützt.
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:parentNode"><apiName>parentNode</apiName><shortdesc>
	 Ein XMLNode-Wert, der auf den übergeordneten Knoten des angegebenen XML-Objekts verweist, oder „null“ zurückgibt, wenn der Knoten keinen übergeordneten Knoten besitzt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.parentnode, parentnode, parent node
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.xml:XMLNode</apiValueClassifier></apiValueDef><apiDesc>
	 Ein XMLNode-Wert, der auf den übergeordneten Konten des angegebenen XML-Objekts verweist, oder <codeph>null</codeph> zurückgibt, wenn der Knoten keinen übergeordneten Knoten besitzt. Die Eigenschaft ist schreibgeschützt und kann nicht zum Bearbeiten von untergeordneten Knoten verwendet werden. Verwenden Sie zum Bearbeiten von untergeordneten Knoten die Methoden <codeph>appendChild()</codeph>, <codeph>insertBefore()</codeph> sowie <codeph>removeNode()</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:previousSibling"><apiName>previousSibling</apiName><shortdesc>
	 Ein XMLNode-Wert, der auf den vorigen Geschwisterknoten in der untergeordneten Liste des übergeordneten Knotens verweist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.previousSibling, previousSibling
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.xml:XMLNode</apiValueClassifier></apiValueDef><apiDesc>
	 Ein XMLNode-Wert, der auf den vorigen Geschwisterknoten in der untergeordneten Liste des übergeordneten Knotens verweist. Die Eigenschaft hat den Wert „null“, wenn kein vorheriger Geschwisterknoten vorhanden ist. Diese Eigenschaft kann nicht zum Bearbeiten von untergeordneten Knoten verwendet werden. Verwenden Sie zum Bearbeiten von untergeordneten Knoten die Methoden <codeph>appendChild()</codeph>, <codeph>insertBefore()</codeph> und <codeph>removeNode()</codeph>.
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/lastChild"><linktext>XMLNode.lastChild</linktext></link><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:attributes:get"><apiName>attributes</apiName><shortdesc>
	 Ein Objekt, das alle Attribute der angegebenen XMLNode-Instanz enthält.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.attributes, attributes
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Ein Objekt, das alle Attribute der angegebenen XMLNode-Instanz enthält. Das XMLNode.attributes-Objekt enthält für jedes Attribut der XMLNode-Instanz jeweils eine Variable. Da diese Variablen als Teil des Objekts definiert sind, werden sie im Allgemeinen als Eigenschaften des Objekts bezeichnet. Der Wert jedes Attributs wird in der entsprechenden Eigenschaft als String gespeichert. Bei einem Attribut mit der Bezeichnung <codeph>color</codeph> rufen Sie dessen Wert beispielsweise ab, indem Sie <codeph>color</codeph> als Eigenschaftennamen angeben. Dies wird im folgenden Code demonstriert: 
	 <pre>
	 var myColor:String = doc.firstChild.attributes.color
	 </pre>
	 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.xml:XMLNode:childNodes:get"><apiName>childNodes</apiName><shortdesc>
	 Ein Array mit den untergeordneten Knoten des angegebenen XMLNode-Objekts.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>XMLNode.childnodes, childnodes
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 Ein Array mit den untergeordneten Knoten des angegebenen XMLNode-Objekts. Jedes Element im Array ist ein Verweis auf ein XMLNode-Objekt, das einen untergeordneten Knoten darstellt. Die Eigenschaft ist schreibgeschützt und kann nicht zum Bearbeiten von untergeordneten Knoten verwendet werden. Verwenden Sie zum Bearbeiten von untergeordneten Knoten die Methoden <codeph>appendChild()</codeph>, <codeph>insertBefore()</codeph> und <codeph>removeNode()</codeph>. 
	 
	 <p>Für Textknoten ist diese Eigenschaft undefiniert (<codeph>nodeType == 3</codeph>).</p>
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link><link href="flash.xml.xml#XMLNode/appendChild()"><linktext>XMLNode.appendChild()</linktext></link><link href="flash.xml.xml#XMLNode/insertBefore()"><linktext>XMLNode.insertBefore()</linktext></link><link href="flash.xml.xml#XMLNode/removeNode()"><linktext>XMLNode.removeNode()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:localName:get"><apiName>localName</apiName><shortdesc>
	 Der Teil des XML-Knotennamens, der den lokalen Namen angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der Teil des XML-Knotennamens, der den lokalen Namen angibt. Dies ist der Elementname ohne Namespace-Präfix. So hat beispielsweise der Knoten <codeph>&lt;contact:mailbox/>bob@example.com&lt;/contact:mailbox></codeph> den lokalen Namen „mailbox“ und das Präfix „contact“, die den vollständigen Elementnamen „contact.mailbox“ bilden.
	 
	 <p>Auf das Namespace-Präfix kann über die <codeph>prefix</codeph>-Eigenschaft des XML-Knotenobjekts zugegriffen werden. Die <codeph>nodeName</codeph>-Eigenschaft gibt den vollständigen Namen (einschließlich Präfix und lokalem Namen) zurück.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.xml:XMLNode:namespaceURI:get"><apiName>namespaceURI</apiName><shortdesc>
	 Wenn der XML-Knoten ein Präfix aufweist, ist „namespaceURI“ der Wert der xmlns-Deklaration für dieses Präfix (der URI), der normalerweise als Namespace-URI bezeichnet wird.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiTipTexts><apiTipText>Der URI des Namespace, in den das Präfix des XML-Knotens aufgelöst wird. 
	 
	 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
	 Weist der XML-Knoten ein Präfix auf, ist <codeph>namespaceURI</codeph> der Wert der <codeph>xmlns</codeph>-Deklaration für dieses Präfix (der URI), der normalerweise als Namespace-URI bezeichnet wird. Die Deklaration <codeph>xmlns</codeph> befindet sich im aktuellen Knoten oder in einem Knoten, der in der XML-Hierarchie höher liegt. 
	 
	 <p>Weist der XML-Knoten kein Präfix auf, hängt der Wert der Eigenschaft <codeph>namespaceURI</codeph> davon ab, ob ein Standard-Namespace definiert ist (wie in <codeph>xmlns="http://www.example.com/"</codeph>). Wenn ein Standard-Namespace vorhanden ist, ist der Wert der Eigenschaft <codeph>namespaceURI</codeph> gleich dem Wert des Standard-Namespace. Wenn kein Standard-Namespace vorhanden ist, wird für die Eigenschaft <codeph>namespaceURI</codeph> dieses Knotens ein leerer String (<codeph>""</codeph>) eingetragen.</p>
	 
	 <p>Zum Ermitteln des Namespace für ein bestimmtes Präfix können Sie die <codeph>getNamespaceForPrefix()</codeph>-Methode verwenden. Die <codeph>namespaceURI</codeph>-Eigenschaft gibt das mit dem Knotennamen verknüpfte Präfix zurück.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/getNamespaceForPrefix()"><linktext>getNamespaceForPrefix()</linktext></link><link href="flash.xml.xml#XMLNode/getPrefixForNamespace()"><linktext>getPrefixForNamespace()</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNode:prefix:get"><apiName>prefix</apiName><shortdesc>
	 Der Teil des XML-Knotennamens, der das Präfix angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><keyword>
	 </keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Der Teil des XML-Knotennamens, der das Präfix angibt. So hat beispielsweise der Knoten <codeph>&lt;contact:mailbox/>bob@example.com&lt;/contact:mailbox></codeph> den lokalen Namen „mailbox“ und das Präfix „contact“, die den vollständigen Elementnamen „contact.mailbox“ bilden.
	 
	 <p>Die <codeph>nodeName</codeph>-Eigenschaft eines XML-Knotenobjekts gibt den vollständigen Namen (einschließlich Präfix und lokalem Namen) zurück. Auf den Teil des Elementnamens, der den lokalen Namen darstellt, kann über die <codeph>localName</codeph>-Eigenschaft zugegriffen werden. </p>
	 
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.xml:XMLNodeType"><apiName>XMLNodeType</apiName><shortdesc>
 Die XMLNodeType-Klasse enthält Konstanten, die mit XMLNode.nodeType verwendet werden.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die XMLNodeType-Klasse enthält Konstanten, die mit <codeph>XMLNode.nodeType</codeph> verwendet werden. Die Werte werden durch die NodeType-Aufzählung in der W3C DOM Level 1-Empfehlung definiert: <xref href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html" scope="external">http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html</xref>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link></related-links><apiValue id="flash.xml:XMLNodeType:ELEMENT_NODE"><apiName>ELEMENT_NODE</apiName><shortdesc>
 	 Gibt an, dass es sich bei dem Knoten um ein Element handelt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
 	 Gibt an, dass es sich bei dem Knoten um ein Element handelt. Diese Konstante wird mit <codeph>XMLNode.nodeType</codeph> verwendet. Der Wert wird durch die NodeType-Aufzählung in der W3C DOM Level 1-Empfehlung definiert: <xref href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html" scope="external">http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html</xref>
 	 
 	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link></related-links></apiValue><apiValue id="flash.xml:XMLNodeType:TEXT_NODE"><apiName>TEXT_NODE</apiName><shortdesc>
	 Gibt an, dass es sich bei dem Knoten um einen Textknoten handelt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt an, dass es sich bei dem Knoten um einen Textknoten handelt. Diese Konstante wird mit <codeph>XMLNode.nodeType</codeph> verwendet. Der Wert wird durch die NodeType-Aufzählung in der W3C DOM Level 1-Empfehlung definiert: <xref href="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html" scope="external">http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core.html</xref>
 	 
 	 </apiDesc></apiValueDetail><related-links><link href="flash.xml.xml#XMLNode/nodeType"><linktext>XMLNode.nodeType</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.xml:XMLDocument"><apiName>XMLDocument</apiName><shortdesc>
 Die XMLDocument-Klasse stellt das bisherige XML-Objekt aus ActionScript 2.0 dar.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.xml:XMLNode</apiBaseClassifier></apiClassifierDef><apiDesc>
 Die XMLDocument-Klasse stellt das bisherige XML-Objekt aus ActionScript 2.0 dar. Es wurde in ActionScript 3.0 in „XMLDocument“ umbenannt, um Namenskonflikte mit der neuen XML-Klasse von ActionScript 3.0 zu vermeiden. Verwenden Sie in ActionScript 3.0 stattdessen bevorzugt die neue <xref href="../../XML.html">XML</xref>-Klasse sowie deren zugehörige Klassen, die E4X (ECMAScript for XML) unterstützen.
 
 <p>Die XMLDocument-Klasse sowie „XMLNode“ und „XMLNodeType“ gibt es aus Gründen der Rückwärtskompatibilität. Die Funktionen zum Laden von XML-Dokumenten finden Sie nun in der URLLoader-Klasse.</p>
 
 </apiDesc><example conref="examples\XMLDocumentExample.as"> Im folgenden Beispiel werden die Klassen XMLDocument und XMLNode zum Analysieren und Formatieren eines XML-Dokuments verwendet. Im Beispiel wird keine externe XML-Datei geladen, sondern es wird eine XML-Klasse der obersten Ebene verwendet, um ein XML-Dokument zu erstellen und dieses anschließend zu analysieren. 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.xml.XMLDocument;
    import flash.xml.XMLNode;
    import flash.xml.XMLNodeType;

    public class XMLDocumentExample extends Sprite {
        public function XMLDocumentExample() {
            var result:XMLDocument = new XMLDocument();
            result.ignoreWhite = true;
            result.parseXML(getXMLString());

            var books:Array = parseBooks(result.firstChild);
            trace("books: \n" + books);
        }

        private function parseBooks(node:XMLNode):Array {
            var books:Array = new Array();

            var kids:Array = node.childNodes;
            for each(var item:XMLNode in kids) {
                parseBook(item, books);
            }

            return books;
        }

        private function parseBook(node:XMLNode, books:Array):void {
            var item:Book = new Book();
            item.setPublisher(node.attributes.publisher);
            item.setName(node.attributes.name);
            books.push(item);
        }

        private function getXMLString():String {
            var list:XML = &lt;books>
                                &lt;book publisher="Addison-Wesley" name="Design Patterns" />
                                &lt;book publisher="Addison-Wesley" name="The Pragmatic Programmer" />
                                &lt;book publisher="Addison-Wesley" name="Test Driven Development" />
                                &lt;book publisher="Addison-Wesley" name="Refactoring to Patterns" />
                                &lt;book publisher="O'Reilly Media" name="The Cathedral &amp; the Bazaar" />
                                &lt;book publisher="O'Reilly Media" name="Unit Test Frameworks" />
                            &lt;/books>;
            return list.toXMLString();
        }
    }

}
class Book {
    private var publisher:String;
    private var name:String;

    public function setPublisher(publisher:String):void {
        this.publisher = publisher;
    }

    public function setName(name:String):void {
        this.name = name;
    }

    public function toString():String {
        return "[Book name: " + name + " publisher: " + publisher + "]\n";
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#URLLoader"><linktext>flash.net.URLLoader</linktext></link><link href="#XML"><linktext>XML-Klasse</linktext></link></related-links><apiConstructor id="flash.xml:XMLDocument:XMLDocument"><apiName>XMLDocument</apiName><shortdesc>
	 Erstellt ein neues XMLDocument-Objekt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a new, empty XMLDocument object:
	 <listing>
	 var my_xml:XML = new XML();
	 </listing>
	 <p>The following example creates an XML object by parsing the XML text specified in the <code>source</code> parameter, and populates the newly created XML object with the resulting XML document tree:</p>
	 <listing>
	 var other_xml:XML = new XML("&lt;state name=\"California\">&lt;city>San Francisco&lt;/city>&lt;/state>");
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Der XML-Text, der zum Erstellen des neuen XMLDocument-Objekts analysiert wurde. 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Erstellt ein neues XMLDocument-Objekt. Vor dem Aufruf einer Methode der XMLDocument-Klasse muss der Konstruktor zum Erstellen eines XMLDocument-Objekts verwendet werden.
	 <p><b>Hinweis: </b> Verwenden Sie die <codeph>createElement()</codeph>- und <codeph>createTextNode()</codeph>-Methode, um einer XML-Dokumentstruktur Elemente und Textknoten hinzuzufügen.</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.xml.xml#XMLDocument/createElement()"><linktext>XMLDocument.createElement()</linktext></link><link href="flash.xml.xml#XMLDocument/createTextNode()"><linktext>XMLDocument.createTextNode()</linktext></link></related-links></apiConstructor><apiOperation id="flash.xml:XMLDocument:createElement"><apiName>createElement</apiName><shortdesc>
	 Erstellt ein neues XMLNode-Objekt mit dem im Parameter angegebenen Namen.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates three XML nodes using the <code>createElement()</code> method:
	 <listing>
	 // create an XML document
	 var doc:XML = new XML();
	 
	 // create three XML nodes using createElement()
	 var element1:XMLNode = doc.createElement("element1");
	 var element2:XMLNode = doc.createElement("element2");
	 var element3:XMLNode = doc.createElement("element3");
	 
	 // place the new nodes into the XML tree
	 doc.appendChild(element1);
	 element1.appendChild(element2);
	 element1.appendChild(element3);
	 
	 trace(doc);
	 // output: &lt;element1>&lt;element2 />&lt;element3 />&lt;/element1>
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein XMLNode-Objekt.
	 
	 </apiDesc><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier></apiReturn><apiParam><apiItemName>name</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Tag-Name des XMLDocument-Elements, das erstellt werden soll.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Erstellt ein neues XMLNode-Objekt mit dem im Parameter angegebenen Namen. Der neue Knoten hat zunächst keinen übergeordneten, keine untergeordneten und keine Geschwisterknoten. Die Methode gibt einen Verweis auf das neu erstellte XMLNode-Objekt zurück, das das Element darstellt. Diese Methode und die <codeph>XMLDocument.createTextNode()</codeph>-Methoden sind die Konstruktormethoden zum Erstellen von Knoten für ein XMLDocument-Objekt.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLDocument/createTextNode()"><linktext>XMLDocument.createTextNode()</linktext></link></related-links></apiOperation><apiOperation id="flash.xml:XMLDocument:createTextNode"><apiName>createTextNode</apiName><shortdesc>
	 Erstellt einen neuen XML-Textknoten mit dem angegebenen Text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates two XML text nodes using the <code>createTextNode()</code> method, and places them into existing XML nodes:
	 <listing>
	 // create an XML document
	 var doc:XML = new XML();
	 
	 // create three XML nodes using createElement()
	 var element1:XMLNode = doc.createElement("element1");
	 var element2:XMLNode = doc.createElement("element2");
	 var element3:XMLNode = doc.createElement("element3");
	 
	 // place the new nodes into the XML tree
	 doc.appendChild(element1);
	 element1.appendChild(element2);
	 element1.appendChild(element3);
	 
	 // create two XML text nodes using createTextNode()
	 var textNode1:XMLNode = doc.createTextNode("textNode1 String value");
	 var textNode2:XMLNode = doc.createTextNode("textNode2 String value");
	 
	 // place the new nodes into the XML tree
	 element2.appendChild(textNode1);
	 element3.appendChild(textNode2);
	 
	 trace(doc);
	 // output (with line breaks added between tags):
	 // &lt;element1>
	 //    &lt;element2>textNode1 String value&lt;/element2>
	 //    &lt;element3>textNode2 String value&lt;/element3>
	 // &lt;/element1>
	 </listing>
	 
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>Ein XMLNode-Objekt.
	 
	 </apiDesc><apiOperationClassifier>flash.xml:XMLNode</apiOperationClassifier></apiReturn><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der Text, der zum Erstellen des neuen Textknotens verwendet wird.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Erstellt einen neuen XML-Textknoten mit dem angegebenen Text. Der neue Knoten hat zunächst keinen übergeordneten Knoten. Textknoten können keine untergeordneten oder Geschwisterknoten aufweisen. Diese Methode gibt einen Verweis auf das XMLDocument-Objekt zurück, das den neuen Textknoten darstellt. Diese Methode und die <codeph>XMLDocument.createElement()</codeph>-Methoden sind die Konstruktormethoden zum Erstellen von Knoten für ein XMLDocument-Objekt.
	 
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.xml.xml#XMLDocument/createElement()"><linktext>XMLDocument.createElement()</linktext></link></related-links></apiOperation><apiOperation id="flash.xml:XMLDocument:parseXML"><apiName>parseXML</apiName><shortdesc>
	 Analysiert den im Parameter „value“ angegebenen XML-Text und fügt die dabei entstehende XML-Struktur in das angegebene XMLDocument-Objekt ein.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates and parses an XML packet:
	 <listing>
	 var xml_str:String = "&lt;state name=\"California\">
	 &lt;city>San Francisco&lt;/city>&lt;/state>"
	 
	 // defining the XML source within the XML constructor:
	 var my1_xml:XML = new XML(xml_str);
	 trace(my1_xml.firstChild.attributes.name); // output: California
	 
	 // defining the XML source using the XML.parseXML method:
	 var my2_xml:XML = new XML();
	 my2_xml.parseXML(xml_str);
	 trace(my2_xml.firstChild.attributes.name); // output: California
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>source</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Der XML-Text, der analysiert und an das angegebene XMLDocument-Objekt übergeben werden soll.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Analysiert den im Parameter <codeph>value</codeph> angegebenen XML-Text und fügt die dabei entstehende XML-Struktur in das angegebene XMLDocument-Objekt ein. Alle im XMLDocument-Objekt vorhandenen Strukturen werden verworfen.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.xml:XMLDocument:toString"><apiName>toString</apiName><shortdesc>
	 Gibt das XML-Objekt als String zurück.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>Eine Stringdarstellung des XML-Objekts.
 	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Gibt das XML-Objekt als String zurück.
	 
 	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.xml:XMLDocument:docTypeDecl"><apiName>docTypeDecl</apiName><shortdesc>
	 Gibt Informationen über die DOCTYPE-Deklaration eines XML-Dokuments an.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example uses the <code>XML.docTypeDecl</code> property to set the <code>DOCTYPE</code> declaration for an XML object:
	 <listing>
	 <code><em>my_xml</em></code>.<code>docTypeDecl = "&lt;!DOCTYPE greeting SYSTEM \"hello.dtd\">";</code>
	 </listing>
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Gibt Informationen über die <codeph>DOCTYPE</codeph>-Deklaration eines XML-Dokuments an. Nachdem der XML-Text in ein XMLDocument-Objekt eingelesen wurde, wird die <codeph>XMLDocument.docTypeDecl</codeph>-Eigenschaft des XMLDocument-Objekts auf den Text der <codeph>DOCTYPE</codeph>-Deklaration des XML-Dokuments gesetzt (beispielsweise <codeph>&lt;!DOCTYPE</codeph> <codeph>greeting SYSTEM "hello.dtd"></codeph>). Diese Eigenschaft wird anhand einer Stringdarstellung der <codeph>DOCTYPE</codeph>-Deklaration und nicht anhand eines XMLNode-Objekts festgelegt.
	 <p>Der XML-Parser vorheriger Versionen von ActionScript ist kein validierender Parser. Die <codeph>DOCTYPE</codeph>-Deklaration wird vom Parser gelesen und in der <codeph>XMLDocument.docTypeDecl</codeph>-Eigenschaft gespeichert, eine Validierung der DTD wird jedoch nicht durchgeführt.</p>
	 <p>Wenn bei der Analyse keine <codeph>DOCTYPE</codeph>-Deklaration gefunden wurde, wird die Eigenschaft <codeph>XMLDocument.docTypeDecl</codeph> auf <codeph>null</codeph> gesetzt. Die <codeph>XML.toString()</codeph>-Methoden gibt den Inhalt von <codeph>XML.docTypeDecl</codeph> unmittelbar nach der in <codeph>XML.xmlDecl</codeph> gespeicherten XML-Deklaration und vor jedem anderen Text im XML-Objekt aus. Wenn <codeph>XMLDocument.docTypeDecl</codeph> den Wert „null“ aufweist, wird keine <codeph>DOCTYPE</codeph>-Deklaration ausgegeben.</p>
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.xml:XMLDocument:idMap"><apiName>idMap</apiName><shortdesc>
	 Ein Objekt mit den XML-Knoten, denen ein id-Attribut zugeordnet ist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>Create a text file named "idMapTest.xml" containing the following text:
	 
	 <listing>&lt;?xml version="1.0"?> 
	 &lt;doc xml:base="http://example.org/today/" xmlns:xlink="http://www.w3.org/1999/xlink"> 
	   &lt;head> 
	     &lt;title>Virtual Library&lt;/title> 
	   &lt;/head> 
	   &lt;body> 
	     &lt;paragraph id="linkP1">See &lt;link xlink:type="simple" xlink:href="new.xml">what's 
	       new&lt;/link>!&lt;/paragraph> 
	     &lt;paragraph>Check out the hot picks of the day!&lt;/paragraph> 
	     &lt;olist xml:base="/hotpicks/"> 
	       &lt;item> 
	         &lt;link id="foo" xlink:type="simple" xlink:href="pick1.xml">Hot Pick #1&lt;/link> 
	       &lt;/item> 
	       &lt;item> 
	         &lt;link id="bar" xlink:type="simple" xlink:href="pick2.xml">Hot Pick #2&lt;/link> 
	       &lt;/item> 
	       &lt;item> 
	         &lt;link xlink:type="simple" xlink:href="pick3.xml">Hot Pick #3&lt;/link> 
	       &lt;/item> 
	     &lt;/olist>
	   &lt;/body> 
	  &lt;/doc>
	 </listing>
	 
	 <p>Then create a SWF file in the same directory as the XML file. Include the following
	 script in the SWF:</p>
	 
	 <listing>
	 var readXML = new XMLDocument();
	 readXML.load("idMapTest.xml");
	 readXML.onLoad = function(success) {
	 	myXML = new XMLDocument();
	 	myXML.parseXML(readXML);	
	 	for (var x in myXML.idMap){
	 		 trace('idMap.' + x + " = " + newline + myXML.idMap[x]);
	 		 trace('____________' + newline);
	 	}
	 }
	 </listing>
	 
	 <p>When you test the SWF file, the following output is generated:</p>
	 
	 <listing>
	 idMap.bar = 
	 &lt;link id="bar" xlink:type="simple" xlink:href="pick2.xml">Hot Pick #2&lt;/link>
	 ____________
	 
	 idMap.foo = 
	 &lt;link id="foo" xlink:type="simple" xlink:href="pick1.xml">Hot Pick #1&lt;/link>
	 ____________
	 
	 idMap.linkP1 = 
	 &lt;paragraph id="linkP1">See &lt;link xlink:type="simple" xlink:href="new.xml">what's 
	 
	       new&lt;/link>!&lt;/paragraph>
	 ____________
	 </listing>
	 
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>unknown</apiData><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Ein Objekt mit den XML-Knoten, denen ein <codeph>id</codeph>-Attribut zugeordnet ist. Die Namen der Objekteigenschaften (jeweils mit einem Knoten) entsprechen den Werten der <codeph>id</codeph>-Attribute.
	 
	 <p>Betrachten Sie das folgende XMLDocument-Objekt:</p>
	 
	 <codeblock>
	 &lt;employee id='41'>
	 	&lt;name>
	 		John Doe
	 	&lt;/name>
	 	&lt;address>
	 		601 Townsend St.
	 	&lt;/address>
	 &lt;/employee>
	 
	 &lt;employee id='42'>
	 	&lt;name>
	 		Jane Q. Public
	 	&lt;/name>
	 &lt;/employee>
	 &lt;department id="IT">
	 	Information Technology
	 &lt;/department>
	 </codeblock>
	 
	 <p>In diesem Beispiel ist die <codeph>idMap</codeph>-Eigenschaft dieses XMLDocument-Objekts ein Objekt mit drei Eigenschaften: <codeph>41</codeph>, <codeph>42</codeph> und <codeph>IT</codeph>. Jede dieser Eigenschaften ist ein XMLNode mit dem entsprechenden <codeph>id</codeph>-Wert. Die Eigenschaft <codeph>IT</codeph> des Objekts <codeph>idMap</codeph> befindet sich beispielsweise in diesem Knoten:</p> 
	 
	 <codeblock>
	 &lt;department id="IT">
	 	Information Technology
	 &lt;/department>
	 </codeblock>
	 
	 <p>Sie müssen die <codeph>parseXML()</codeph>-Methode auf das XMLDocument-Objekt anwenden, damit die <codeph>idMap</codeph>-Eigenschaft instanziiert wird.</p>
	 
	 <p>Sind mehrere XMLNode-Objekte mit dem gleichen <codeph>id</codeph>-Wert vorhanden, ist die entsprechende Eigenschaft des <codeph>idNode</codeph>-Objekts die des zuletzt analysierten Knotens. Beispiel:</p>
	 
	 <codeblock>
	 var x1:XML = new XMLDocument("&lt;a id='1'>&lt;b id='2' />&lt;c id='1' />&lt;/a>");
	 x2 = new XMLDocument();
	 x2.parseXML(x1);
	 trace(x2.idMap['1']);
	 </codeblock>
	 
	 Dadurch wird der <codeph>&lt;c></codeph>-Knoten ausgegeben: 
	 
	 <codeblock>
	 <codeph>&lt;c id='1' /></codeph>
	 </codeblock>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.xml:XMLDocument:ignoreWhite"><apiName>ignoreWhite</apiName><shortdesc>
	 Ist diese Eigenschaft auf „true“ gesetzt, werden Textknoten, die nur Leerräume enthalten, bei der Analyse gelöscht.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example loads an XML file with a text node that contains only white space; the <code>foyer</code> tag comprises fourteen space characters. To run this example, create a text file named <em>flooring.xml</em>, and copy the following tags into it:
	 <listing>
	 &lt;house>
	    &lt;kitchen>   ceramic tile   &lt;/kitchen>
	    &lt;bathroom>linoleum&lt;/bathroom>
	    &lt;foyer>              &lt;/foyer>
	 &lt;/house>
	 </listing>
	 <p>Create a new Flash document named <em>flooring.fla</em> and save it to the same directory as the XML file. Place the following code into the main Timeline:</p>
	 <listing>
	 // create a new XML object
	 var flooring:XML = new XML();
	 
	 // set the ignoreWhite property to true (default value is false)
	 flooring.ignoreWhite = true;
	 
	 // After loading is complete, trace the XML object
	 flooring.onLoad = function(success:Boolean) {
	   trace(flooring);
	 }
	 
	 // load the XML into the flooring object
	 flooring.load("flooring.xml");
	 
	 // output (line breaks added for clarity):
	 &lt;house>
	    &lt;kitchen>   ceramic tile   &lt;/kitchen>
	    &lt;bathroom>linoleum&lt;/bathroom>
	    &lt;foyer />
	 &lt;/house>
	 
	 </listing>
	 <p>If you then change the setting of <code>flooring.ignoreWhite</code> to <code>false</code>, or simply remove that line of code entirely, the fourteen space characters in the <code>foyer</code> tag will be preserved:</p>
	 <listing>
	 ...
	 // set the ignoreWhite property to false (default value)
	 flooring.ignoreWhite = false;
	 ...
	 // output (line breaks added for clarity):
	 &lt;house>
	    &lt;kitchen>   ceramic tile   &lt;/kitchen>
	    &lt;bathroom>linoleum&lt;/bathroom>
	    &lt;foyer>              &lt;/foyer>
	 &lt;/house>
	 
	 </listing>
	 <span class="flashonly"><p>The XML_blogTracker.fla and XML_languagePicker.fla files in the ActionScript samples folder also contain a code example. The following are typical paths to this folder:</p>
	 <ul>
	   <li>Windows: <i>boot drive</i>\Program Files\Macromedia\Flash 8\Samples and Tutorials\Samples\ActionScript </li>
	   <li>Macintosh: <i>Macintosh HD</i>/Applications/Macromedia Flash 8/Samples and Tutorials/Samples/ActionScript </li>
	   <li/>
	 </ul>
	 </span>
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Ist diese Eigenschaft auf <codeph>true</codeph> gesetzt, werden Textknoten, die nur Leerräume enthalten, bei der Analyse gelöscht. Textknoten mit voran- oder nachgestellten Leerzeichen sind nicht davon betroffen. Der Standardwert ist <codeph>false</codeph>. 
	 <p>Sie können die <codeph>ignoreWhite</codeph>-Eigenschaft für einzelne XMLDocument-Objekte einstellen, wie im folgenden Code dargestellt:</p>
	 <codeblock>
	 my_xml.ignoreWhite = true;
	 </codeblock>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.xml:XMLDocument:xmlDecl"><apiName>xmlDecl</apiName><shortdesc>
	 Ein String, der Informationen zur XML-Deklaration eines Dokuments angibt.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><maelexample>The following example creates a text field called <code>my_txt</code> 
	 that has the same dimensions as the Stage. The text field displays properties of the XML packet that loads into the SWF file. The doc type declaration displays in <code>my_txt</code>. Add the following ActionScript to your FLA or AS file:
	 <listing>
	 <code>var my_fmt:TextFormat = new TextFormat();</code>
	 <code>my_fmt.font = "_typewriter";</code>
	 <code>my_fmt.size = 12;</code>
	 <code>my_fmt.leftMargin = 10;</code>
	 
	 <code>this.createTextField("my_txt", this.getNextHighestDepth(), 0, 0, Stage.width, Stage.height);</code>
	 <code>my_txt.border = true;</code>
	 <code>my_txt.multiline = true;</code>
	 <code>my_txt.wordWrap = true;</code>
	 <code>my_txt.setNewTextFormat(my_fmt);</code>
	 
	 <code>var my_xml:XML = new XML();</code>
	 <code>my_xml.ignoreWhite = true;</code>
	 <code>my_xml.onLoad = function(success:Boolean) {</code>
	 <code>  var endTime:Number = getTimer();</code>
	 <code>  var elapsedTime:Number = endTime-startTime;</code>
	 <code>  if (success) {</code>
	 <code>    my_txt.text = "xmlDecl:"+newline+my_xml.xmlDecl+newline+newline;</code>
	 <code>    my_txt.text += "contentType:"+newline+my_xml.contentType+newline+newline;</code>
	 <code>    my_txt.text += "docTypeDecl:"+newline+my_xml.docTypeDecl+newline+newline;</code>
	 <code>    my_txt.text += "packet:"+newline+my_xml.toString()+newline+newline;</code>
	 <code>  } else {</code>
	 <code>    my_txt.text = "Unable to load remote XML."+newline+newline;</code>
	 <code>  }</code>
	 <code>  my_txt.text += "loaded in: "+elapsedTime+" ms.";</code>
	 <code>};</code>
	 <code>my_xml.load("http://www.helpexamples.com/crossdomain.xml");</code>
	 <code>var startTime:Number = getTimer();</code>
	 </listing>
	 </maelexample></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>null</apiData><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 Ein String, der Informationen zur XML-Deklaration eines Dokuments angibt. Nachdem das XML-Dokument in ein XMLDocument-Objekt eingelesen wurde, wird diese Eigenschaft auf den Text der XML-Deklaration des Dokuments gesetzt. Diese Eigenschaft wird anhand einer Stringdarstellung der XML-Deklaration und nicht anhand eines XMLNode-Objekts festgelegt. Wenn bei der Analyse keine XML-Deklaration gefunden wurde, wird die Eigenschaft auf <codeph>null</codeph> gesetzt. Die <codeph>XMLDocument.toString()</codeph>-Methode gibt den Inhalt der <codeph>XML.xmlDecl</codeph>-Eigenschaft vor sonstigem Text im XML-Objekt aus. Wenn die <codeph>XML.xmlDecl</codeph>-Eigenschaft den Wert <codeph>null</codeph> enthält, wird keine XML-Deklaration ausgegeben.
	 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>