 
<apiPackage id="air.net"><apiName>air.net</apiName><apiDetail/><apiClassifier id="air.net:URLMonitor"><apiName>URLMonitor</apiName><shortdesc>
 The URLMonitor class monitors availablity of an HTTP- or HTTPS-based service.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>air.net:ServiceMonitor</apiBaseClassifier></apiClassifierDef><apiDesc>
 The URLMonitor class monitors availablity of an HTTP- or HTTPS-based service.
 
 <p product="flex">This class is included in the ServiceMonitor.swc file. 
 Adobe<sup>®</sup> Flash<sup>®</sup> Builder™ loads this class automatically when you create a project for 
 Adobe<sup>®</sup> AIR<sup>®</sup>. The Adobe<sup>®</sup> Flex<sup>®</sup> SDK also 
 includes this servicemonitor.swc file, which you should include when compiling the application if you are using 
 the Flex SDK.
 </p>
 
 <p product="flash">In Adobe<sup>®</sup> Flash<sup>®</sup> CS3 Professional,
 this class is included in the ServiceMonitorShim.swc file. To use classes in the air.net package , 
 you must first drag the ServiceMonitorShim component from the Components panel to the 
 Library and then add the following <codeph>import</codeph> statement to your ActionScript 3.0 code:
 </p>
 
 <codeblock product="flash">import air.net.~~;</codeblock>
 
 <p product="flash">To use air.net package in Adobe<sup>®</sup> Flash<sup>®</sup> CS4 Professional: </p>
 
 <ol product="flash">
 <li>Select the File &gt; Publish Settings command.</li>
 <li>In the Flash panel, click the Settings button for ActionScript 3.0. Select Library Path.</li>
 <li>Click the Browse to SWC File button. Browse to Adobe Flash CS4/AIK1.1/frameworks/libs/air/servicemoniter.swc
 		file in the Adobe Flash CS4 installation folder.</li>
 <li>Click the OK button.</li>
 <li>Add the following <codeph>import</codeph> statement to your ActionScript 3.0 code: <codeph>import air.net.~~;</codeph></li>
 </ol>
 
 <p platform="javascript">To use this class in JavaScript code, load the ServiceMonitor.swf 
 file, as in the following:</p>
 
 <codeblock platform="javascript">&lt;script src="ServiceMonitor.swf" type="application/x-shockwave-flash"&gt;</codeblock>
 
 </apiDesc></apiClassifierDetail><apiConstructor id="air.net:URLMonitor:URLMonitor"><apiName>URLMonitor</apiName><shortdesc>
     Creates a URLMonitor Object for a specified HTTP- or HTTPS-based service.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>urlRequest</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiDesc>The URLRequest object representing a probe request for polling the server.
     
     </apiDesc></apiParam><apiParam><apiItemName>acceptableStatusCodes</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>An array of numeric status codes listing the codes that represent a successful result.
     
     <p>If you do not specify a value for the <codeph>acceptableStatusCodes</codeph> property, the following status
     codes will be recognized as successful responses:</p>
     
     <ul>
      <li>200 (OK) </li>
      <li>202 (Accepted) </li>
      <li>204 (No content </li>
      <li>205 (Reset content) </li>
      <li>206 (Partial content, in response to request with a Range header) </li>
     </ul>
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Creates a URLMonitor Object for a specified HTTP- or HTTPS-based service.
     
     <p>After creating a URLMonitor, the caller should call the <codeph>start()</codeph>
     method to begin monitoring the status of the service.</p>
     
     <p>As with the Timer object, the caller should maintain a reference to the URLMonitor
     object. Otherwise the runtime could delete the object, thereby ending the monitoring.</p>
     
     <p>A URLRequest parameter specifies the probe request for polling the server.
     Typically, the request method will be either <codeph>"GET"</codeph> or <codeph>"HEAD"</codeph>.</p>
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="air.net:URLMonitor:protected:checkStatus"><apiName>checkStatus</apiName><shortdesc>
    Attempts to load content from a URL in the background, to check for a 
    returned HTTP status code.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
    Attempts to load content from a URL in the background, to check for a 
    returned HTTP status code. 
    <p>
    If it receives a status code that is listed in the <codeph>acceptableStatusCodes</codeph> 
    property, the <codeph>available</codeph> property will be set to <codeph>true</codeph>. 
    If it receives a status code that is not in the <codeph>acceptableStatusCodes</codeph> 
    list, or if there is a security error or I/O error, the <codeph>available</codeph> 
    property will be set to <codeph>false</codeph>.
    </p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="air.net:URLMonitor:toString"><apiName>toString</apiName><shortdesc>
     
     
	 Returns the string representation of the specified object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string representation of the object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     
     
	 Returns the string representation of the specified object.
	 
     <p platform="actionscript"><b>Note:</b> Methods of the Object class are dynamically created on Object's prototype. To redefine this method in a subclass of Object, do not use the <codeph>override</codeph> keyword. For example, a subclass of Object implements <codeph>function toString():String</codeph> instead of using an override of the base class.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="air.net:URLMonitor:acceptableStatusCodes:get"><apiName>acceptableStatusCodes</apiName><shortdesc>
     The numeric status codes representing a successful result.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     The numeric status codes representing a successful result.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="air.net:URLMonitor:urlRequest:get"><apiName>urlRequest</apiName><shortdesc>
     The URLRequest object representing the probe request.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.net:URLRequest</apiValueClassifier></apiValueDef><apiDesc>
     The URLRequest object representing the probe request.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="air.net:ServiceMonitor"><apiName>ServiceMonitor</apiName><shortdesc>
 The ServiceMonitor class implements the framework for monitoring the status and availability of network services.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiDynamic/><apiBaseClassifier>flash.events:EventDispatcher</apiBaseClassifier></apiClassifierDef><apiDesc>
 The ServiceMonitor class implements the framework for monitoring the status and availability of network services. 
 The ServiceMonitor class acts as the base class for all other service monitors.
 
 <p product="flex">This class is included in the ServiceMonitor.swc file. 
 Adobe<sup>®</sup> Flash<sup>®</sup>; Builder™ loads this class automatically 
 when you create a project for Adobe<sup>®</sup> AIR™.
 Adobe<sup>®</sup> Flex<sup>®</sup> SDK also includes this servicemonitor.swc file, 
 which you should include when compiling the application if you are using Flex SDK.
 </p>
 
 <p product="flash">In Adobe<sup>®</sup> Flash<sup>®</sup> CS3 Professional,
 this class is included in the ServiceMonitorShim.swc file. To use classes in the air.net package , 
 you must first drag the ServiceMonitorShim component from the Components panel to the 
 Library and then add the following <codeph>import</codeph> statement to your ActionScript 3.0 code:
 </p>
 
 <codeblock product="flash">import air.net.~~;</codeblock>
 
 <p product="flash">To use air.net package in Adobe<sup>®</sup> Flash<sup>®</sup> CS4 Professional: </p>
 
 <ol product="flash">
 <li>Select the File &gt; Publish Settings command.</li>
 <li>In the Flash panel, click the Settings button for ActionScript 3.0. Select Library Path.</li>
 <li>Click the Browse to SWC File button. Browse to Adobe Flash CS4/AIK1.1/frameworks/libs/air/servicemoniter.swc
 		file in the Adobe Flash CS4 installation folder.</li>
 <li>Click the OK button.</li>
 <li>Add the following <codeph>import</codeph> statement to your ActionScript 3.0 code: <codeph>import air.net.~~;</codeph></li>
 </ol>
 
 <p platform="javascript">To use this class in JavaScript code, load the ServiceMonitor.swf 
 file, as in the following:</p>
 
 <codeblock platform="javascript">&lt;script src="ServiceMonitor.swf" type="application/x-shockwave-flash"&gt;</codeblock>
 
 </apiDesc></apiClassifierDetail><adobeApiEvent id="air.net:ServiceMonitor_flash.events.StatusEvent.STATUS_status"><apiName>status</apiName><shortdesc>
 Indicates that the service status has changed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.StatusEvent.STATUS</apiEventType><adobeApiEventClassifier>flash.events.StatusEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Indicates that the service status has changed.
 
 <p>The value of the <codeph>code</codeph> property is either <codeph>"Service.available"</codeph> or <codeph>"Service.unavailable"</codeph>, 
 but best practice is to check the value of the <codeph>ServiceMonitor.available</codeph> property.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><apiConstructor id="air.net:ServiceMonitor:ServiceMonitor"><apiName>ServiceMonitor</apiName><shortdesc>
     Creates a ServiceMonitor object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
     Creates a ServiceMonitor object. 
     
     <p platform="actionscript">This class is typically subclassed to monitor specific service types.</p>
     
     <p platform="javascript">The class can be specialized in JavaScript (from HTML application content), as described in
     the description of the <codeph>makeJavascriptSubclass()</codeph> method.</p>
     
     <p>After creating a ServiceMonitor object (or a subclass object), call the <codeph>start()</codeph> method
     to begin monitoring the status of the service.</p>
     
     <p>As with the Timer object, the caller should maintain a reference to the ServiceMonitor
     object. Otherwise, the runtime deletes the object and monitoring ends.</p>
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="air.net:ServiceMonitor:protected:checkStatus"><apiName>checkStatus</apiName><shortdesc>
     Checks the status of the service.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Checks the status of the service.
     
     <p>A subclass override method for checking the status of the service.</p>
     
     <p>Typically, this method will initiate a network operation whose completion or failure will result in
     setting the <codeph>available</codeph> property.</p>
     
     <p>JavaScript code can specialize this method by defining a <codeph>checkStatus()</codeph> method 
     in the "specializer" object.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="air.net:ServiceMonitor:makeJavascriptSubclass"><apiName>makeJavascriptSubclass</apiName><shortdesc>
     Adds public ServiceMonitor methods to a JavaScript constructor function's prototype.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>constructorFunction</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiDesc>The JavaScript object's <codeph>prototype</codeph> property. For example, if the JavaScript 
     object that you are using to serve as a specializer object is named MyHTTPMonitor, pass 
     <codeph>MyHTTPMonitor.prototype</codeph> as the value for this parameter.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
     Adds public ServiceMonitor methods to a JavaScript constructor function's prototype.
     
     <p>Adds functions to the JavaScript constructor function's prototype that forward public
     ServiceMonitor functions to the ServiceMonitor object. This approximates
     a normal JavaScript subclass of the ActionScript base class.</p>
     
     <p>A JavaScript class specializing a ServiceMonitor would look like this:</p>
     
     <codeblock>
     // JavaScript Constructor function
     function MyHTTPMonitor(url, method)
     {
         // "that" variable makes "this" available in closures below
         var that = this;
         // Required initialization of the service monitor, returns the actual ServiceMonitor object.
         this.monitor = this.initServiceMonitor();
         // Initializes URLStream and event handlers.
         this._urlStream = new air.URLStream();
         this._urlRequest = new air.URLRequest(url);
         if (method)
         {
             this._urlRequest.method = method;
         }
         else
         {
             this._urlRequest.method = "GET";
         }
         function onStatus(event) {
             that.monitor.available = Number(event.status) == 200;
             that._urlStream.close();
         }
         function onError(event)
         {
             that.monitor.available = false;
             that._urlStream.close();
         }
         this._urlStream.addEventListener(air.HTTPStatusEvent.HTTP_RESPONSE_STATUS, onStatus);
         this._urlStream.addEventListener(air.SecurityErrorEvent.SECURITY_ERROR, onError);
         this._urlStream.addEventListener(air.IOErrorEvent.IO_ERROR, onError);
     }
     
     // Augment JavaScript prototype with public methods from ServiceMonitor
     air.ServiceMonitor.makeJavascriptSubclass(MyHTTPMonitor);
     
     // Implement specializer functions, just as you would when subclassing a JavaScript class
     MyHTTPMonitor.prototype.checkStatus = function()
     {
         air.trace('OVERRIDDEN checkStatus!', this);
         this._urlStream.load(this._urlRequest);
     }
     </codeblock>
     
     <p>To use the JavaScript class:</p>
     
     <codeblock>
     var httpMon = new MyHTTPMonitor('http://www.adobe.com')
     </codeblock>
     
     <p>Be sure to load the AIRAliases.js and ServiceMonitor.swf files with <codeph>script</codeph> tags.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="air.net:ServiceMonitor:start"><apiName>start</apiName><shortdesc>
     Starts the service monitor.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Starts the service monitor.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="air.net:ServiceMonitor:stop"><apiName>stop</apiName><shortdesc>
     Stops monitoring the service.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
     Stops monitoring the service.
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="air.net:ServiceMonitor:toString"><apiName>toString</apiName><shortdesc>
     
	 Returns the string representation of the specified object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string representation of the object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     
	 Returns the string representation of the specified object.
	 
     <p platform="actionscript"><b>Note:</b> Methods of the Object class are dynamically created on Object's prototype. To redefine this method in a subclass of Object, do not use the <codeph>override</codeph> keyword. For example, a subclass of Object implements <codeph>function toString():String</codeph> instead of using an override of the base class.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="air.net:ServiceMonitor:available:get"><apiName>available</apiName><shortdesc>
     Whether the service is currently considered "available."
     
     The initial value is false until either a status check sets the
     property to true or the property is initialized to true explicitly.
     
     Typically, this property is set by the checkStatus() implementation in a subclass or specializer,
     but if the application has independent information about a service's availability (for example, a request just succeeded
     or failed), the property can be set explicitly.
     
     </shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Whether the service is currently considered "available."
     
     <p>The initial value is <codeph>false</codeph> until either a status check sets the
     property to <codeph>true</codeph> or the property is initialized to <codeph>true</codeph> explicitly.</p>
     
     <p>Typically, this property is set by the <codeph>checkStatus()</codeph> implementation in a subclass or specializer,
     but if the application has independent information about a service's availability (for example, a request just succeeded
     or failed), the property can be set explicitly.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="air.net:ServiceMonitor:lastStatusUpdate:get"><apiName>lastStatusUpdate</apiName><shortdesc>
     The time of the last status update.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Date</apiValueClassifier></apiValueDef><apiDesc>
     The time of the last status update.
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="air.net:ServiceMonitor:pollInterval:get"><apiName>pollInterval</apiName><shortdesc>
     The interval, in milliseconds, for polling the server.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiDefaultValue>0
     
     </apiDefaultValue></apiValueDef><apiDesc>
     The interval, in milliseconds, for polling the server.
     
     <p>If zero, the server is not polled periodically, but only immediately after <codeph>start()</codeph> is called
     and when the network status changes.</p>
     
     <p>The ServiceMonitor object only dispatches a <codeph>status</codeph> event if service
     status has changed (not on every poll interval). The object also dispatches a <codeph>status</codeph> 
     event as a result of network connectivity changes (regardles of the poll interval).</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="air.net:ServiceMonitor:running:get"><apiName>running</apiName><shortdesc>
     Whether the monitor has been started.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Whether the monitor has been started.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="air.net:SocketMonitor"><apiName>SocketMonitor</apiName><shortdesc>
 A SocketMonitor object monitors availablity of a TCP endpoint.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>air.net:ServiceMonitor</apiBaseClassifier></apiClassifierDef><apiDesc>
 A SocketMonitor object monitors availablity of a TCP endpoint.
 
 <p product="flex">This class is included in the ServiceMonitor.swc file. 
 Adobe <sup>®</sup> Flash<sup>®</sup> Builder™ loads this class automatically when you create a project for AIR.
 The Flex<sup>®</sup> SDK also includes this servicemonitor.swc file, which you should include
 when compiling the application if you are using Flex SDK.
 </p>
 
 <p product="flash">In Adobe<sup>®</sup> Flash<sup>®</sup> CS3 Professional,
 this class is included in the ServiceMonitorShim.swc file. To use classes in the air.net package , 
 you must first drag the ServiceMonitorShim component from the Components panel to the 
 Library and then add the following <codeph>import</codeph> statement to your ActionScript 3.0 code:
 </p>
 
 <codeblock product="flash">import air.net.~~;</codeblock>
 
 <p product="flash">To use air.net package in Adobe<sup>®</sup> Flash<sup>®</sup> CS4 Professional: </p>
 
 <ol product="flash">
 <li>Select the File &gt; Publish Settings command.</li>
 <li>In the Flash panel, click the Settings button for ActionScript 3.0. Select Library Path.</li>
 <li>Click the Browse to SWC File button. Browse to Adobe Flash CS4/AIK1.1/frameworks/libs/air/servicemoniter.swc
 		file in the Adobe Flash CS4 installation folder.</li>
 <li>Click the OK button.</li>
 <li>Add the following <codeph>import</codeph> statement to your ActionScript 3.0 code: <codeph>import air.net.~~;</codeph></li>
 </ol>
 
 <p platform="javascript">To use this class in JavaScript code, load the ServiceMonitor.swf 
 file, as in the following:</p>
 
 <codeblock platform="javascript">&lt;script src="ServiceMonitor.swf" type="application/x-shockwave-flash"&gt;</codeblock>
 
 </apiDesc></apiClassifierDetail><apiConstructor id="air.net:SocketMonitor:SocketMonitor"><apiName>SocketMonitor</apiName><shortdesc>
	 Creates a SocketMonitor object for a specified TCP endpoint.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>host</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The host to monitor.
	 </apiDesc></apiParam><apiParam><apiItemName>port</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The port to monitor.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Creates a SocketMonitor object for a specified TCP endpoint.
	 
	 <p>After creating a SocketMonitor object, the caller should call <codeph>start</codeph>
	 to begin monitoring the status of the service.</p>
	 
	 <p>As with the Timer object, the caller should maintain a reference to the SocketMonitor
	 object. Otherwise, the runtime deletes the object and monitoring ends.</p>
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="air.net:SocketMonitor:protected:checkStatus"><apiName>checkStatus</apiName><shortdesc>
	Calling the checkStatus() method of a SocketMonitor object causes
	the application to try connecting to the socket, to check for a 
	connect event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="protected"/><apiIsOverride/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Calling the <codeph>checkStatus()</codeph> method of a SocketMonitor object causes
	the application to try connecting to the socket, to check for a 
	<codeph>connect</codeph> event.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="air.net:SocketMonitor:toString"><apiName>toString</apiName><shortdesc>
	 
     
	 Returns the string representation of the specified object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string representation of the object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 
     
	 Returns the string representation of the specified object.
	 
     <p platform="actionscript"><b>Note:</b> Methods of the Object class are dynamically created on Object's prototype. To redefine this method in a subclass of Object, do not use the <codeph>override</codeph> keyword. For example, a subclass of Object implements <codeph>function toString():String</codeph> instead of using an override of the base class.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="air.net:SocketMonitor:host:get"><apiName>host</apiName><shortdesc>
	 The host being monitored.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 The host being monitored.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="air.net:SocketMonitor:port:get"><apiName>port</apiName><shortdesc>
	 The port being monitored.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 The port being monitored.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>