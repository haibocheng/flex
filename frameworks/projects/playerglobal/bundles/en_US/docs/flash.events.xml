 
<apiPackage id="flash.events"><apiName>flash.events</apiName><apiDetail/><apiClassifier id="flash.events:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
 A KeyboardEvent object id dispatched in response to user input through a keyboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for Keyboard events.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 A KeyboardEvent object id dispatched in response to user input through a keyboard. 
 There are two types of keyboard events: <codeph>KeyboardEvent.KEY_DOWN</codeph> and 
 <codeph>KeyboardEvent.KEY_UP</codeph>
 
 <p>Because mappings between keys and specific characters vary by device 
 and operating system, use the TextEvent event type for processing character input.</p>
 
 <p>To listen globally for key events, listen on the Stage for the capture and target
 or bubble phase.</p>
 
 </apiDesc><example conref="examples\KeyboardEventExample.as"> The following example uses the <codeph>KeyboardEventExample</codeph> class to show 
 keyboard events and their listener functions. The example carries out the following tasks:
 <ol>
  <li>It creates a new Sprite instance named <codeph>child</codeph>.</li>
     <li>It declares properties for later use in setting a square's background color and size.</li>
     <li>Using methods of Sprite, it draws a light-blue square that it displays on the Stage
     at default coordinates (0,0) by calling the <codeph>addChild()</codeph> method.</li>
     <li>It adds one mouse event and two keyboard type event listeners:
     <ul>
      <li><codeph>click</codeph>/<codeph>clickHandler</codeph> which is dispatched when you click on the square to set focus on the <codeph>child</codeph> sprite so it can listen for keyboard events.</li>
         <li><codeph>keyDown</codeph>/<codeph>keyDownHandler</codeph> which is dispatched whenever any key  is pressed. The subscriber method prints information about the event
         using the <codeph>trace()</codeph> statement.</li>
         <li><codeph>keyUp</codeph>/<codeph>keyUpHandler</codeph> which is dispatched when a key is 
         released.</li>
     </ul></li>
 </ol>
 
 <p>When you test this example, you need to click the square first for the keyboard events to work.</p>
 <p product="flash">Also, if you are using the Test Movie command in Flash, the authoring
 interface may respond to certain keys instead of the event listeners attached to
 the child sprite.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.*;

    public class KeyboardEventExample extends Sprite {
        private var child:Sprite = new Sprite();
        private var bgColor:uint = 0x00CCFF;
        private var size:uint = 80;

        public function KeyboardEventExample() {
            child.graphics.beginFill(bgColor);
            child.graphics.drawRect(0, 0, size, size);
            child.graphics.endFill();
            addChild(child);
            child.addEventListener(MouseEvent.CLICK, clickHandler);
            child.addEventListener(KeyboardEvent.KEY_DOWN, keyDownHandler);
            child.addEventListener(KeyboardEvent.KEY_UP, keyUpHandler);
            
        }

        private function clickHandler(event:MouseEvent):void {
            stage.focus = child;
        }

        private function keyDownHandler(event:KeyboardEvent):void {
            trace("keyDownHandler: " + event.keyCode);
            trace("ctrlKey: " + event.ctrlKey);
            trace("keyLocation: " + event.keyLocation);
            trace("shiftKey: " + event.shiftKey);
            trace("altKey: " + event.altKey);

        }

        private function keyUpHandler(event:KeyboardEvent):void {
            trace("keyUpHandler: " + event.keyCode);
        }
        
        
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.ui.xml#KeyLocation"><linktext>KeyLocation</linktext></link></related-links><adobeApiEvent id="flash.events:KeyboardEvent:KEY_DOWN_keyDown"><apiName>keyDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_DOWN</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:KeyboardEvent:KEY_UP_keyUp"><apiName>keyUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:KeyboardEvent:KEY_UP</apiEventType><adobeApiEventClassifier>flash.events:KeyboardEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:KeyboardEvent:KeyboardEvent"><apiName>KeyboardEvent</apiName><shortdesc>
	Creates an Event object that contains specific information about keyboard events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Possible values are:
	<codeph>KeyboardEvent.KEY_DOWN</codeph> and <codeph>KeyboardEvent.KEY_UP</codeph>
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled.
	</apiDesc></apiParam><apiParam><apiItemName>charCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>The character code value of the key pressed or released. The character code values returned are English keyboard values. For example, if you press Shift+3, the <codeph>Keyboard.charCode()</codeph> property returns # on a Japanese keyboard, just as it does on an English keyboard.
	</apiDesc></apiParam><apiParam><apiItemName>keyCodeValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>The key code value of the key pressed or released.
	</apiDesc></apiParam><apiParam><apiItemName>keyLocationValue</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>The location of the key on the keyboard.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>On Windows, indicates whether the Ctrl key is activated. On Mac, indicates whether either the Ctrl key or the Command key is activated.
	</apiDesc></apiParam><apiParam><apiItemName>altKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Alt key modifier is activated (Windows only).
	</apiDesc></apiParam><apiParam><apiItemName>shiftKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Shift key modifier is activated.
	</apiDesc></apiParam><apiParam><apiItemName>controlKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Control key is activated on Mac, and whether the Control or Ctrl keys are activated on WIndows and Linux.
	</apiDesc></apiParam><apiParam><apiItemName>commandKeyValue</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Command key is activated (Mac only).
	 
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for KeyboardEvent objects.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an Event object that contains specific information about keyboard events.
	Event objects are passed as parameters to event listeners.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#KeyboardEvent/KEY_DOWN"><linktext>KEY_DOWN</linktext></link><link href="flash.events.xml#KeyboardEvent/KEY_UP"><linktext>KEY_UP</linktext></link><link href="flash.events.xml#KeyboardEvent/charCode"><linktext>Keyboard.charCode</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:KeyboardEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the KeyboardEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new KeyboardEvent object with property values that match those of the original.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the KeyboardEvent object and sets the value of each property to match that of the original.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the KeyboardEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the KeyboardEvent object.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the KeyboardEvent object. The string 
	is in the following format:
	<p><codeph>[KeyboardEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> ... shiftKey=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:KeyboardEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Indicates that the display should be rendered after processing of this event completes, if the display 
	list has been modified
	
	</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Indicates that the display should be rendered after processing of this event completes, if the display 
	list has been modified
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:KeyboardEvent:KEY_DOWN"><apiName>KEY_DOWN</apiName><shortdesc>
	The KeyboardEvent.KEY_DOWN constant defines the value of the type property of a keyDown event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>KeyboardEvent.KEY_DOWN</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>keyDown</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph> in AIR, <codeph>false</codeph> in Flash Player; 
			in AIR, canceling this event prevents the character from being entered into a text field.</entry></row><row><entry><codeph>charCode</codeph></entry><entry>The character code value of the key pressed or released.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on Mac if the Command key is active. Otherwise, <codeph>false</codeph></entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> on Windows and Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Control key is active. Otherwise, <codeph>false</codeph></entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows and Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>The key code value of the key pressed or released.</entry></row><row><entry><codeph>keyLocation</codeph></entry><entry>The location of the key on the keyboard.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance with focus. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyDown"><linktext>flash.display.InteractiveObject.keyDown</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:KEY_UP"><apiName>KEY_UP</apiName><shortdesc>
	The KeyboardEvent.KEY_UP constant defines the value of the type property of a keyDown event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>KeyboardEvent.KEY_UP</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>keyDown</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
		  
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>charCode</codeph></entry><entry>Contains the character code value of the key pressed or released.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on Mac if the Command key is active. Otherwise, <codeph>false</codeph></entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> on Windows and Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Control key is active. Otherwise, <codeph>false</codeph></entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>The key code value of the key pressed or released.</entry></row><row><entry><codeph>keyLocation</codeph></entry><entry>The location of the key on the keyboard.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance with focus. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyUp"><linktext>flash.display.InteractiveObject.keyUp</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
	Indicates whether the Alt key is active (true) or inactive (false) on Windows; 
	indicates whether the Option key is active on Mac OS.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the Alt key is active (<codeph>true</codeph>) or inactive (<codeph>false</codeph>) on Windows; 
	indicates whether the Option key is active on Mac OS.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:charCode:get"><apiName>charCode</apiName><shortdesc>
	Contains the character code value of the key pressed or released.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Contains the character code value of the key pressed or released.
	The character code values are English keyboard values. For example,
	if you press Shift+3, <codeph>charCode</codeph> is # on a Japanese keyboard,
	just as it is on an English keyboard.
	<p><b>Note: </b>When an input method editor (IME) is running,
	<codeph>charCode</codeph> does not report accurate character codes.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	Indicates whether the Command key is active (true) or inactive (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the Command key is active (<codeph>true</codeph>) or inactive (<codeph>false</codeph>).
	Supported for Mac OS only. On Mac OS, the <codeph>commandKey</codeph> property has the same
	value as the <codeph>ctrlKey</codeph> property.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	Indicates whether the Control key is active (true) or inactive (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the Control key is active (<codeph>true</codeph>) or inactive (<codeph>false</codeph>). 
	On Windows and Linux, this is also true when the Ctrl key is active.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	On Windows and Linux, indicates whether the Ctrl key is active (true) or inactive (false);
	On Mac OS, indicates whether either the Ctrl key or the Command key is active.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	On Windows and Linux, indicates whether the Ctrl key is active (<codeph>true</codeph>) or inactive (<codeph>false</codeph>);
	On Mac OS, indicates whether either the Ctrl key or the Command key is active.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	The key code value of the key pressed or released.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	The key code value of the key pressed or released.
	<p><b>Note: </b>When an input method editor (IME) is running,
	<codeph>keyCode</codeph> does not report accurate key codes.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link></related-links></apiValue><apiValue id="flash.events:KeyboardEvent:keyLocation:get"><apiName>keyLocation</apiName><shortdesc>
	Indicates the location of the key on the keyboard.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	Indicates the location of the key on the keyboard. This is useful for differentiating keys 
	that appear more than once on a keyboard. For example, you can differentiate between the 
	left and right Shift keys by the value of this property: <codeph>KeyLocation.LEFT</codeph> 
	for the left and <codeph>KeyLocation.RIGHT</codeph> for the right. Another example is 
	differentiating between number keys pressed on the standard keyboard
	(<codeph>KeyLocation.STANDARD</codeph>) versus the numeric keypad (<codeph>KeyLocation.NUM_PAD</codeph>).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:KeyboardEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Indicates whether the Shift key modifier is active (true) or inactive 
	(false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the Shift key modifier is active (<codeph>true</codeph>) or inactive 
	(<codeph>false</codeph>).
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
 A NativeWindow object dispatches events of the NativeWindowDisplayStateEvent class when the window 
 display state changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for NativeWindow events that change the display state of the window.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 A NativeWindow object dispatches events of the NativeWindowDisplayStateEvent class when the window 
 display state changes. 
 
 There are two types of events:
 <ul>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
     <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGING"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</linktext></link><link href="flash.events.xml#NativeWindowDisplayStateEvent/DISPLAY_STATE_CHANGE"><linktext>flash.events.NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE_displayStateChange"><apiName>displayStateChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING_displayStateChanging"><apiName>displayStateChanging</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowDisplayStateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowDisplayStateEvent:NativeWindowDisplayStateEvent"><apiName>NativeWindowDisplayStateEvent</apiName><shortdesc>
    Creates an Event object with specific information relevant to window display state events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Possible values are:
    <ul>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGING</codeph></li>
        <li><codeph>NativeWindowDisplayStateEvent.DISPLAY_STATE_CHANGE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Determines whether the Event object participates in the bubbling stage of the event flow.
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be cancelled.
    </apiDesc></apiParam><apiParam><apiItemName>beforeDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>The <codeph>displayState</codeph> before the change.
    </apiDesc></apiParam><apiParam><apiItemName>afterDisplayState</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>The <codeph>displayState</codeph> after the change. 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Creates an Event object with specific information relevant to window display state events.
    Event objects are passed as parameters to event listeners.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowDisplayStateEvent:clone"><apiName>clone</apiName><shortdesc>
    Creates a copy of the NativeWindowDisplayStateEvent object and sets the 
    value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new NativeWindowDisplayStateEvent object with property values that match those of the original.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Creates a copy of the NativeWindowDisplayStateEvent object and sets the 
    value of each property to match that of the original.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowDisplayStateEvent:toString"><apiName>toString</apiName><shortdesc>
    Returns a string that contains all the properties of the NativeWindowDisplayStateEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the NativeWindowDisplayStateEvent object.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Returns a string that contains all the properties of the NativeWindowDisplayStateEvent object. The string has the following format:
    <p><codeph>[NativeWindowDisplayStateEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> beforeDisplayState=<i>value</i> afterDisplayState=<i>value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGE"><apiName>DISPLAY_STATE_CHANGE</apiName><shortdesc>
    Defines the value of the type property of a displayStateChange event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the value of the <codeph>type</codeph> property of a <codeph>displayStateChange</codeph> event object. 
    
    This event has the following properties:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Properties</entry><entry>Values</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>The old display state of the window.</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>The new display state of the window.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NativeWindow instance that has just changed state. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>No.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indicates the object that is actively processing the Event 
    object with an event listener.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; There is no default behavior to cancel.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:DISPLAY_STATE_CHANGING"><apiName>DISPLAY_STATE_CHANGING</apiName><shortdesc>
    Defines the value of the type property of a displayStateChanging event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displayStateChanging</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the value of the <codeph>type</codeph> property of a <codeph>displayStateChanging</codeph> event object. 
    
    This event has the following properties:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Properties</entry><entry>Values</entry></row></thead><tbody><row><entry><codeph>afterDisplayState</codeph></entry><entry>The display state of the window before the pending change.</entry></row><row><entry><codeph>beforeDisplayState</codeph></entry><entry>The display state of the window after the pending change.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NativeWindow instance that has just changed state. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>No.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indicates the object that is actively processing the Event 
    object with an event listener.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; canceling the event will prevent the change.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:afterDisplayState:get"><apiName>afterDisplayState</apiName><shortdesc>
     The display state of the NativeWindow after the change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The display state of the NativeWindow after the change.  
     
     <p>If the event is <codeph>displayStateChanging</codeph>, the
     display state has not yet changed; <codeph>afterDisplayState</codeph> indicates the new 
     display state if the event is not canceled. If the event is
     <codeph>displayStateChanged</codeph>, <codeph>afterDisplayState</codeph> indicates the current value.</p>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowDisplayStateEvent:beforeDisplayState:get"><apiName>beforeDisplayState</apiName><shortdesc>
     The display state of the NativeWindow before the change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The display state of the NativeWindow before the change.  
     
     <p>If the event is <codeph>displayStateChanging</codeph>, the
     display state has not yet changed; <codeph>beforeDisplayState</codeph> reflects the Window's 
     current display state.  If the event is <codeph>displayStateChanged</codeph>, 
     <codeph>beforeDisplayState</codeph> indicates the previous value.</p>
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
The Stage object dispatches a FullScreenEvent object whenever the Stage enters or leaves full-screen display mode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for FullScreenEvent events.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ActivityEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
The Stage object dispatches a FullScreenEvent object whenever the Stage enters or leaves full-screen display mode. 
There is only one type of <codeph>fullScreen</codeph> event: <codeph>FullScreenEvent.FULL_SCREEN</codeph>.

</apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links><adobeApiEvent id="flash.events:FullScreenEvent:FULL_SCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FullScreenEvent:FULL_SCREEN</apiEventType><adobeApiEventClassifier>flash.events:FullScreenEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FullScreenEvent:FullScreenEvent"><apiName>FullScreenEvent</apiName><shortdesc>
	Creates an event object that contains information about fullScreen events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the 
	inherited <codeph>type</codeph> property. There is only one type of <codeph>fullScreen</codeph> event: 
	<codeph>FullScreenEvent.FULL_SCREEN</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling phase of the 
	event flow. Event listeners can access this information through the inherited 
	<codeph>bubbles</codeph> property.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can 
	access this information through the inherited <codeph>cancelable</codeph> property. 
	</apiDesc></apiParam><apiParam><apiItemName>fullScreen</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the device is activating (<codeph>true</codeph>) or 
	deactivating (<codeph>false</codeph>). Event listeners can access this information through the 
	<codeph>activating</codeph> property.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for FullScreenEvent objects.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an event object that contains information about <codeph>fullScreen</codeph> events.
	Event objects are passed as parameters to event listeners.
	
    </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FullScreenEvent/FULL_SCREEN"><linktext>FullScreenEvent.FULL_SCREEN</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FullScreenEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of a FullScreenEvent object and sets the value of each property to match that of 
	the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new FullScreenEvent object with property values that match those of the original.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of a FullScreenEvent object and sets the value of each property to match that of 
	the original. 
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FullScreenEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the FullScreenEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the FullScreenEvent object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the FullScreenEvent object. The following 
	format is used:
	<p><codeph>[FullScreenEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> 
	activating=<i>value</i>]</codeph></p>
	
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FullScreenEvent:FULL_SCREEN"><apiName>FULL_SCREEN</apiName><shortdesc>
	The FullScreenEvent.FULL_SCREEN constant defines the value of the type property of a fullScreen event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>FullScreenEvent.FULL_SCREEN</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>fullScreen</codeph> event object. 
	<p>This event has the following properties:</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>fullScreen</codeph></entry><entry><codeph>true</codeph> if the display state is full screen or <codeph>false</codeph> if it is normal.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The Stage object.</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/displayState"><linktext>flash.display.Stage.displayState</linktext></link></related-links></apiValue><apiValue id="flash.events:FullScreenEvent:fullScreen:get"><apiName>fullScreen</apiName><shortdesc>
	Indicates whether the Stage object is in full-screen mode (true) or not (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the Stage object is in full-screen mode (<codeph>true</codeph>) or not (<codeph>false</codeph>).
	
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
 A Timer object dispatches a TimerEvent objects whenever the Timer object reaches the interval 
 specified by the Timer.delay property.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for Timer events.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 A Timer object dispatches a TimerEvent objects whenever the Timer object reaches the interval 
 specified by the <codeph>Timer.delay</codeph> property.
 
 </apiDesc><example conref="examples\TimerEventExample.as"> The following example uses the TimerExample class to show how a
 listener method <codeph>timerHandler()</codeph> can be instantiated and set to listen for a new TimerEvent 
 to be dispatched, which happens when the Timer's <codeph>start()</codeph> method is called.  
<codeblock>
package {
    import flash.utils.Timer;
    import flash.events.TimerEvent;
    import flash.display.Sprite;

    public class TimerEventExample extends Sprite {

        public function TimerEventExample() {
            var myTimer:Timer = new Timer(1000, 2);
            myTimer.addEventListener(TimerEvent.TIMER, timerHandler);
            myTimer.start();
        }

        public function timerHandler(event:TimerEvent):void {
            trace("timerHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.utils.xml#Timer"><linktext>flash.utils.Timer</linktext></link></related-links><adobeApiEvent id="flash.events:TimerEvent:TIMER_timer"><apiName>timer</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TimerEvent:TIMER_COMPLETE_timerComplete"><apiName>timerComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TimerEvent:TIMER_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:TimerEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TimerEvent:TimerEvent"><apiName>TimerEvent</apiName><shortdesc>
	Creates an Event object with specific information relevant to timer events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object bubbles. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for TimerEvent objects.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an Event object with specific information relevant to <codeph>timer</codeph> events.
	Event objects are passed as parameters to event listeners.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:TimerEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the TimerEvent object and sets each property's value to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new TimerEvent object with property values that match those of the original.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the TimerEvent object and sets each property's value to match that of the original.
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the TimerEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the TimerEvent object.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the TimerEvent object. The string is in the following format:
	<p><codeph>[TimerEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i>]</codeph></p>
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TimerEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Instructs Flash Player or the AIR runtime to render 
	after processing of this event completes, if the display list has been modified.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Instructs <ph platform="actionscript">Flash Player or</ph> the AIR runtime to render 
	after processing of this event completes, if the display list has been modified.
 	
 	</apiDesc><example conref="examples\TimerEvent.updateAfterEventExample.as"> The following is an example for the <codeph>TimerEvent.updateAfterEvent()</codeph> method.   
<codeblock>
function onTimer(event:TimerEvent):void {
    if (40 &lt; my_mc.x &amp;&amp; my_mc.x &lt; 375) {
        my_mc.x-= 50;
    } else {
        my_mc.x=374;
    }
    event.updateAfterEvent();
}

var moveTimer:Timer=new Timer(50,250);
moveTimer.addEventListener(TimerEvent.TIMER,onTimer);
moveTimer.start();
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.events:TimerEvent:TIMER"><apiName>TIMER</apiName><shortdesc>
    Defines the value of the type property of a timer event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timer</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the value of the <codeph>type</codeph> property of a <codeph>timer</codeph> event object.
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The Timer object that has reached its interval.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timer"><linktext>flash.utils.Timer.timer</linktext></link></related-links></apiValue><apiValue id="flash.events:TimerEvent:TIMER_COMPLETE"><apiName>TIMER_COMPLETE</apiName><shortdesc>
    Defines the value of the type property of a timerComplete event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>timerComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the value of the <codeph>type</codeph> property of a <codeph>timerComplete</codeph> event object.
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The Timer object that has completed its requests.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.utils.xml#Timer/event:timerComplete"><linktext>flash.utils.Timer.timerComplete</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
An IOErrorEvent object is dispatched when an error causes a send or load operation to fail.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for IOErrorEvent events.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
An IOErrorEvent object is dispatched when an error causes a send or load operation to fail.

<p>You can check for error events that do not have any listeners by using the debugger version of Flash Player or the AIR Debug Launcher (ADL). The string defined by the <codeph>text</codeph> parameter of the IOErrorEvent constructor is displayed.
There is only one type of input/output error event:  <codeph>IOErrorEvent.IO_ERROR</codeph>. </p>

</apiDesc><example conref="examples\IOErrorEventExample.as"> The following example uses the <codeph>IOErrorEventExample</codeph> class to show how an error
 event object is dispatched when an attempt is made to load a nonexistent file.  The example carries out the following tasks:
 <ol>
    <li>The class constructor creates a new instance of a URLLoader object and assigns it to the variable
     <codeph>loader</codeph>.</li>
    <li>The URLLoader instance instantiates an event listener of type <codeph>ioError</codeph>, which has
     an associated subscriber method <codeph>ioErrorHandler()</codeph>, which simply prints information about
     the event using <codeph>trace()</codeph>.</li>
    <li>Next, the constructor creates a new instance of a URLRequest object, <codeph>request</codeph>,
     passing <codeph>MissingFile.xml</codeph> so that the name and location of the missing file are 
 known.</li>
    <li>The <codeph>request</codeph> variable is then passed to <codeph>loader.load()</codeph>, which attempts to load the
     missing file.  Since the file is missing, the event handler dispatches an <codeph>ioError</codeph> event.</li>
 </ol>
 
 <p> <b>Notes:</b>
 <ul>
     <li>You need to compile the SWF file with "Local Playback Security" set to "Access Local Files Only".</li>
     <li>Make sure that you do not have a file named "MissingFile.xml" at the same level as your SWF file. </li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.IOErrorEvent;
    import flash.net.URLLoader;
    import flash.net.URLRequest;

    public class IOErrorEventExample extends Sprite {
        public function IOErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);

            var request:URLRequest = new URLRequest("MissingFile.xml");
            loader.load(request);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:IOErrorEvent:IO_ERROR_ioError"><apiName>ioError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IOErrorEvent:IO_ERROR</apiEventType><adobeApiEventClassifier>flash.events:IOErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IOErrorEvent:IOErrorEvent"><apiName>IOErrorEvent</apiName><shortdesc>
	Creates an Event object that contains specific information about ioError events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one type of input/output error event: <codeph>IOErrorEvent.IO_ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>Text to be displayed as an error message. Event listeners can access this information through the <codeph>text</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>A reference number to associate with the specific error (supported in Adobe AIR only). 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for IOErrorEvent objects.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an Event object that contains specific information about <codeph>ioError</codeph> events.
	Event objects are passed as parameters to Event listeners.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#IOErrorEvent/IO_ERROR"><linktext>IO_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IOErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the IOErrorEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new IOErrorEvent object with property values that match those of the original.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the IOErrorEvent object and sets the value of each property to match that of the original.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IOErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the IOErrorEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the IOErrorEvent object.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the IOErrorEvent object. The string is in the following format:
	<p><codeph>[IOErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IOErrorEvent:IO_ERROR"><apiName>IO_ERROR</apiName><shortdesc>
	Defines the value of the type property of an ioError event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ioError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of an <codeph>ioError</codeph> event object.
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>errorID</codeph></entry><entry>A reference number associated with the specific error (AIR only).</entry></row><row><entry><codeph>target</codeph></entry><entry>The network object experiencing the input/output error.</entry></row><row><entry><codeph>text</codeph></entry><entry>Text to be displayed as an error message.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:ioError"><linktext>flash.display.LoaderInfo.ioError</linktext></link><link href="flash.media.xml#Sound/event:ioError"><linktext>flash.media.Sound.ioError</linktext></link><link href="flash.net.xml#Socket/event:ioError"><linktext>flash.net.Socket.ioError</linktext></link><link href="flash.net.xml#FileReference/event:ioError"><linktext>flash.net.FileReference.ioError</linktext></link><link href="flash.net.xml#NetConnection/event:ioError"><linktext>flash.net.NetConnection.ioError</linktext></link><link href="flash.net.xml#NetStream/event:ioError"><linktext>flash.net.NetStream.ioError</linktext></link><link href="flash.net.xml#URLLoader/event:ioError"><linktext>flash.net.URLLoader.ioError</linktext></link><link href="flash.net.xml#URLStream/event:ioError"><linktext>flash.net.URLStream.ioError</linktext></link><link href="flash.net.xml#XMLSocket/event:ioError"><linktext>flash.net.XMLSocket.ioError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
A NetConnection, NetStream, or SharedObject object dispatches NetStatusEvent objects when a it reports its status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for NetStatusEvent events.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
A NetConnection, NetStream, or SharedObject object dispatches NetStatusEvent objects when a it reports its status. 
There is only one type of status event: <codeph>NetStatusEvent.NET_STATUS</codeph>.

</apiDesc><example conref="examples\NetStatusEventExample.as"> The following example uses a Video object with the NetConnection and 
 NetStream classes to load and play an FLV file.
 <p>In this example, the <codeph>netStatusHandler</codeph> method is registered as a listener for
 the NetStatusEvent event <codeph>NetConnection.netStatus</codeph>. 
 When the status (success or failure) of the <codeph>NetConnection.connect()</codeph> attempt
 is determined, the <codeph>netStatus</codeph> event triggers this method. If the
 attempt to connect to the NetConnection object is successful (in other words, 
 if the <codeph>info</codeph> property of the NetStatusEvent object dispatched by the <codeph>netStatus</codeph>
 event has a <codeph>code</codeph> property that indicates success), the code creates the Video and NetStream 
 objects and calls the <codeph>Video.attachNetStream()</codeph> and <codeph>NetStream.play()</codeph> methods.</p>
 
 <p><b>Note:</b> To run this example, you need an FLV file 
 whose name and location match the variable passed to <codeph>videoURL</codeph>; 
 in this case, an FLV file called Video.flv that is in the same directory as the SWF file.</p>
<codeblock>

 package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class NetStatusEventExample extends Sprite {
        private var videoURL:String = "Video.flv";
        private var connection:NetConnection;
        private var stream:NetStream;

        public function NetStatusEventExample() {
            connection = new NetConnection();
            connection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            connection.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            connection.connect(null);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function connectStream():void {
            var stream:NetStream = new NetStream(connection);
            stream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            stream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            var video:Video = new Video();
            video.attachNetStream(stream);
            stream.play(videoURL);
            addChild(video);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
        
        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

    }
 }
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>flash.net.NetConnection</linktext></link><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.net.xml#SharedObject"><linktext>flash.net.SharedObject</linktext></link><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>NetStatusEvent.NET_STATUS</linktext></link></related-links><adobeApiEvent id="flash.events:NetStatusEvent:NET_STATUS_netStatus"><apiName>netStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NetStatusEvent:NET_STATUS</apiEventType><adobeApiEventClassifier>flash.events:NetStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NetStatusEvent:NetStatusEvent"><apiName>NetStatusEvent</apiName><shortdesc>
	Creates an Event object that contains information about netStatus events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one type of status event: <codeph>NetStatusEvent.NET_STATUS</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>info</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>An object containing properties that describe the object's status. Event listeners can access this object through the <codeph>info</codeph> property.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for NetStatusEvent objects.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an Event object that contains information about <codeph>netStatus</codeph> events.
	Event objects are passed as parameters to event listeners.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#NetStatusEvent/NET_STATUS"><linktext>flash.events.NetStatusEvent.NET_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:NetStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the NetStatusEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new NetStatusEvent object with property values that match those of the original.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the NetStatusEvent object and sets the value of each property to match that of the original. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NetStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the NetStatusEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the NetStatusEvent object.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the NetStatusEvent object. The string is in the following format:
	<p><codeph>[NetStatusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> info=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NetStatusEvent:NET_STATUS"><apiName>NET_STATUS</apiName><shortdesc>
    Defines the value of the type property of a netStatus event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>netStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the value of the <codeph>type</codeph> property of a <codeph>netStatus</codeph> event object.
  	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>info</codeph></entry><entry>An object with properties that describe the object's status or error condition.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NetConnection or NetStream object reporting its status. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#NetStatusEvent/info"><linktext>flash.events.NetStatusEvent.info</linktext></link><link href="flash.net.xml#NetConnection/event:netStatus"><linktext>flash.net.NetConnection.netStatus</linktext></link><link href="flash.net.xml#NetStream/event:netStatus"><linktext>flash.net.NetStream.netStatus</linktext></link><link href="flash.net.xml#SharedObject/event:netStatus"><linktext>flash.net.SharedObject.netStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:NetStatusEvent:info:get"><apiName>info</apiName><shortdesc>
	 An object with properties that describe the object's status or error condition.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	 An object with properties that describe the object's status or error condition.
	 
	 <p>The information object could have a <codeph>code</codeph> property containing a string 
	 that represents a specific event or a <codeph>level</codeph> property containing a string 
	 that is either <codeph>"status"</codeph> or <codeph>"error"</codeph>. </p>
	 
	 <p>The information object could also be something different. The <codeph>code</codeph> and 
	 <codeph>level</codeph> properties might not work for some implementations and some servers 
	 might send different objects. </p>
	 
	 <p>P2P connections send messages to a <codeph>NetConnection</codeph> with a <codeph>stream</codeph> parameter
	 in the information object that indicates which <codeph>NetStream</codeph> the message pertains to.
	 
	 <ph product="flex">For example, Flex Data Services sends Message 
	 objects that cause coercion errors if you try to access the <codeph>code</codeph> or 
	 <codeph>level</codeph> property.</ph></p> 
	 
	 <p>The following table describes the possible string values of the <codeph>code</codeph> and <codeph>level</codeph>
	 properties.</p>
 <adobetable class="innertable">
  
 
 

  
   
  
  
    
  
  
  
  
  
  
  
  
  
   
   
   
  
  
  
  
  
  
  
  
  
  
  
    
  
  
  
  
  
  
  
  
  
  
  
  
  
  
<tgroup cols="3"><thead><row><entry>Code property</entry><entry>Level property</entry><entry>Meaning</entry></row></thead><tbody><row>
     <entry><codeph>"NetStream.Buffer.Empty"</codeph></entry>
     <entry><codeph>"status"</codeph></entry>
     <entry>Data is not being received quickly enough to fill the buffer. Data flow will be interrupted until the buffer refills, at which time a <codeph>NetStream.Buffer.Full</codeph> message will be sent and the stream will begin playing again.</entry>
 </row><row>
     <entry><codeph>"NetStream.Buffer.Full"</codeph></entry>
     <entry><codeph>"status"</codeph></entry>
     <entry>The buffer is full and the stream will begin playing.</entry>
</row><row>
    <entry><codeph>"NetStream.Buffer.Flush"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Data has finished streaming, and the remaining buffer will be emptied.</entry>
  </row><row>
    <entry><codeph>"NetStream.Failed"</codeph> </entry>
    <entry>"error"</entry>
    <entry>Flash Media Server only.   
    An error has occurred for a reason other than those listed
    in other event codes.
    </entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Publish was successful.</entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.BadName"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Attempt to publish a stream which is already being published by someone else.</entry>
  </row><row>
    <entry><codeph>"NetStream.Publish.Idle"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>The publisher of the stream is idle and not transmitting data.</entry>
  </row><row>
    <entry><codeph>"NetStream.Unpublish.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>The unpublish operation was successfuul.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Playback has started.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Stop"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Playback has stopped.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>An error has occurred in playback for a reason other than those listed elsewhere 
	in this table, such as the subscriber not having read access.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.StreamNotFound"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The FLV passed to the <codeph>play()</codeph> method can't be found.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Reset"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Caused by a play list reset.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.PublishNotify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>The initial publish to a stream is sent to all subscribers.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.UnpublishNotify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>An unpublish from a stream is sent to all subscribers.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.InsufficientBW"</codeph> </entry>
    <entry>"warning"</entry>
    <entry>Flash Media Server only.
        The client does not have sufficient bandwidth to play
        the data at normal speed. </entry>
  </row><row>
    <entry><codeph>"NetStream.Play.FileStructureInvalid"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The application detects an invalid file structure and will not try to play this type of file. 
	For AIR and for Flash Player 9.0.115.0 and later.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.NoSupportedTrackFound"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The application does not detect any supported tracks (video, audio or data) and will not try to play the file. 
	For AIR and for Flash Player 9.0.115.0 and later.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Transition"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Flash Media Server only. The stream transitions to another as a result of bitrate stream switching. This code indicates a success status event for the <codeph>NetStream.play2()</codeph> call to initiate a stream switch. If the switch does not succeed, the server sends a <codeph>NetStream.Play.Failed</codeph> event instead. For Flash Player 10 and later.</entry>
  </row><row>
    <entry><codeph>"NetStream.Play.Transition"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Flash Media Server 3.5 and later only. The server received the command to transition to another stream as a result of bitrate stream switching. This code indicates a success status event for the <codeph>NetStream.play2()</codeph> call to initiate a stream switch. If the switch does not succeed, the server sends a <codeph>NetStream.Play.Failed</codeph> event instead. 
    	When the stream switch occurs, an <codeph>onPlayStatus</codeph> event with a code of "NetStream.Play.TransitionComplete" is dispatched. For Flash Player 10 and later.</entry>
  </row><row>
    <entry><codeph>"NetStream.Pause.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>The stream is paused.</entry>
  </row><row>
    <entry><codeph>"NetStream.Unpause.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>The stream is resumed.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Start"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Recording has started.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.NoAccess"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Attempt to record a stream that is still playing or the client has no access right.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Stop"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>Recording stopped.</entry>
  </row><row>
    <entry><codeph>"NetStream.Record.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>An attempt to record a stream failed.</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The seek fails, which happens if the stream is not seekable.</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.InvalidTime"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>For video downloaded with progressive download, the user has tried to seek or play 
	past the end of the video data that has downloaded thus far, or past
	the end of the video once the entire file has downloaded. The <codeph>message.details</codeph>
	property contains a time code
	that indicates the last valid position to which the user can seek.</entry>
  </row><row>
    <entry><codeph>"NetStream.Seek.Notify"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>The seek operation is complete.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.BadVersion"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>Packet encoded in an unidentified format.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The <codeph>NetConnection.call</codeph> method was not able to invoke the server-side 
	method or command.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Call.Prohibited"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>An Action Message Format (AMF) operation is prevented for 
	security reasons. Either the AMF URL is not in the same domain as the file containing the code 
	calling the <codeph>NetConnection.call()</codeph> method, or the AMF server does not have a policy file 
	that trusts the domain of the the file containing the code calling the <codeph>NetConnection.call()</codeph> method. 
	</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Closed"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>The connection was closed successfully.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The connection attempt failed.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>The connection attempt succeeded.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.Rejected"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The connection attempt did not have permission to access the application.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Closed"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>The P2P connection was closed successfully.  The <codeph>info.stream</codeph> property indicates which stream has closed.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Failed"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The P2P connection attempt failed.  The <codeph>info.stream</codeph> property indicates which stream has failed.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Success"</codeph></entry>
    <entry><codeph>"status"</codeph></entry>
    <entry>The P2P connection attempt succeeded.  The <codeph>info.stream</codeph> property indicates which stream has succeeded.</entry>
  </row><row>
    <entry><codeph>"NetStream.Connect.Rejected"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The P2P connection attempt did not have permission to access the other peer.  The <codeph>info.stream</codeph> property indicates which stream was rejected.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.AppShutdown"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The specified application is shutting down.</entry>
  </row><row>
    <entry><codeph>"NetConnection.Connect.InvalidApp"</codeph></entry>
    <entry><codeph>"error"</codeph></entry>
    <entry>The application name specified during connect is invalid.</entry>
  </row><row>
    <entry><codeph>"SharedObject.Flush.Success"</codeph></entry>
  	<entry><codeph>"status"</codeph></entry>
  	<entry>The "pending" status is resolved and the <codeph>SharedObject.flush()</codeph> call succeeded.</entry>
  </row><row> 
    <entry><codeph>"SharedObject.Flush.Failed"</codeph></entry>
 	<entry><codeph>"error"</codeph></entry>
  	<entry>The "pending" status is resolved, but the <codeph>SharedObject.flush()</codeph> failed.</entry>
  </row><row>
    <entry><codeph>"SharedObject.BadPersistence"</codeph></entry>
  	<entry><codeph>"error"</codeph></entry>
  	<entry>A request was made for a shared object with persistence flags, but the request cannot be granted because the object has already been created with different flags.</entry> 
  </row><row>
    <entry><codeph>"SharedObject.UriMismatch"</codeph></entry>
  	<entry><codeph>"error"</codeph></entry>
  	<entry>An attempt was made to connect to a NetConnection object that has a different URI (URL) than the shared object.</entry> 
</row></tbody></tgroup></adobetable>
	<p>If you consistently see errors regarding the buffer, try changing the buffer using the <codeph>NetStream.bufferTime</codeph> property.</p>

	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection class</linktext></link><link href="flash.net.xml#NetStream"><linktext>NetStream class</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
 A MouseEvent object is dispatched into the event flow whenever mouse events occur.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for Mouse events.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 A MouseEvent object is dispatched into the event flow whenever mouse events occur. 
 A mouse event is usually generated by a user input device, such as a mouse or a trackball, 
 that uses a pointer. 
 
 <p>When nested nodes are involved, mouse events target the deepest possible nested node that 
 is visible in the display list. This node is called the <i>target node</i>. To have a 
 target node's ancestor receive notification of a mouse event, use 
 <codeph>EventDispatcher.addEventListener()</codeph> on the ancestor node with the 
 <codeph>type</codeph> parameter set to the specific mouse event you want to detect.</p>
 
 </apiDesc><example conref="examples\MouseEventExample.as"> The following example uses the <codeph>MouseEventExample</codeph> and 
 <codeph>ChildSprite</codeph> classes to show how mouse events are dispatched using a simple image.
 This example carries out the following tasks:
 <ol>
    <li>The example declares properties for the size (100 x 100 pixels) and the background color
     (orange) for later use in drawing the square.</li>
     <li>The constructor creates a new ChildSprite object <codeph>child</codeph>. Its constructor first
     draws an orange 100 x 100 pixel square at coordinates (0,0) by calling its <codeph>draw()</codeph>
     method and then adds seven event listeners/subscribers.
     <ul>
         <li><codeph>click</codeph>/<codeph>clickHandler()</codeph>: Dispatched when the user single-clicks with the left mouse button
         over the square.</li>
         <li><codeph>doubleClick</codeph>/<codeph>doubleClickHandler()</codeph>: Dispatched when the user double-clicks the left mouse button
         over the square.</li>
         <li><codeph>mouseDown</codeph>/<codeph>mouseDownHandler()</codeph>: When the ChildSprite
         object (the orange square) is clicked, a <codeph>trace()</codeph> message is printed to the screen, and then 
         <codeph>ChildSprite.draw()</codeph> is called, which draws a dark yellow square in place
         of the light blue one drawn in <codeph>mouseOverHandler()</codeph>.  The <codeph>mouseDownHandler()</codeph> method also adds a 
         <codeph>mouseMove</codeph>event listener and the <codeph>mouseMoveHandler()</codeph> subscriber (described below),
         which processes the mouse moves.  Then the <codeph>startDrag()</codeph> method is called, which
         allows the Sprite object to be dragged.</li>
         <li><codeph>mouseOut</codeph>/<codeph>mouseOutHandler()</codeph>: Dispatched whenever the pointer leaves the
         square area.  The <codeph>draw()</codeph> method is called to return the square to its normal
         size and color.</li>
         <li><codeph>mouseOver</codeph>/<codeph>mouseOverHandler()</codeph>: Dispatched when the mouse pointer is over the square.
         This method redraws the square so that it is larger and its background color is dark yellow.</li>
         <li><codeph>mouseUp</codeph>/<codeph>mouseUpHandler()</codeph>: When the user releases the mouse button, the <codeph>mouseMove</codeph>
         event listener is removed and <codeph>stopDrag</codeph> is called, which freezes the square in place.</li> 
      <li><codeph>mouseMove</codeph>/<codeph>mouseMoveHandler()</codeph>: Called as part of the <codeph>mouseDownHandler()</codeph> function, and dispatched when the user is pressing the left mouse button and dragging the square.</li>
         <li><codeph>mouseWheel</codeph>/<codeph>mouseWheelHandler()</codeph>: Dispatched when the user rotates the mouse 
         wheel over the square.</li>
 </ul></li>
    <li>The ChildSprite instance <codeph>child</codeph> is then added to the display list by means of 
     <codeph>addChild()</codeph>, which promptly draws the orange square.</li>
 </ol> 
 
 <p><b>Notes: </b></p>
 <ul>
     <li>The <codeph>MouseEventExample</codeph> class should be the document root.</li>
    <li>Some of the event methods listed above declare a local variable <codeph>sprite</codeph>, which 
     is assigned the cast of <codeph>event.target</codeph> to type Sprite.</li>
 </ul>
<codeblock>
package {
    import flash.display.Sprite;

    public class MouseEventExample extends Sprite {
        private var size:uint = 100;
        private var bgColor:uint = 0xFFCC00;

        public function MouseEventExample() {
            var child:ChildSprite = new ChildSprite();
            addChild(child);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class ChildSprite extends Sprite {
    private var size:uint = 50;
    private var overSize:uint = 60;
    private var backgroundColor:uint = 0xFFCC00;
    private var overColor:uint = 0xCCFF00;
    private var downColor:uint = 0x00CCFF;

    public function ChildSprite() {
        draw(size, size, backgroundColor);
            doubleClickEnabled = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        addEventListener(MouseEvent.DOUBLE_CLICK, doubleClickHandler);
        addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
        addEventListener(MouseEvent.MOUSE_OUT, mouseOutHandler);
        addEventListener(MouseEvent.MOUSE_OVER, mouseOverHandler);
        addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);
        addEventListener(MouseEvent.MOUSE_WHEEL, mouseWheelHandler);
    }

    private function draw(w:uint, h:uint, bgColor:uint):void {
        graphics.clear();
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        trace("clickHandler");
    }

    private function doubleClickHandler(event:MouseEvent):void {
        trace("doubleClickHandler");
    }

    private function mouseDownHandler(event:MouseEvent):void {
        trace("mouseDownHandler");
        draw(overSize, overSize, downColor);

        var sprite:Sprite = Sprite(event.target);
        sprite.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.startDrag();
    }

    private function mouseMoveHandler(event:MouseEvent):void {
        trace("mouseMoveHandler");
        event.updateAfterEvent();
    }

    private function mouseOutHandler(event:MouseEvent):void {
        trace("mouseOutHandler");
        draw(size, size, backgroundColor);
    }

    private function mouseOverHandler(event:MouseEvent):void {
        trace("mouseOverHandler");
        draw(overSize, overSize, overColor);
    }

    private function mouseWheelHandler(event:MouseEvent):void {
        trace("mouseWheelHandler delta: " + event.delta);
    }

    private function mouseUpHandler(event:MouseEvent):void {
        trace("mouseUpHandler");
        var sprite:Sprite = Sprite(event.target);
        sprite.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        sprite.stopDrag();
        draw(overSize, overSize, overColor);
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:MouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:CONTEXT_MENU_contextMenu"><apiName>contextMenu</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:CONTEXT_MENU</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:DOUBLE_CLICK_doubleClick"><apiName>doubleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:DOUBLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_CLICK_middleClick"><apiName>middleClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN_middleMouseDown"><apiName>middleMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MIDDLE_MOUSE_UP_middleMouseUp"><apiName>middleMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MIDDLE_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_MOVE_mouseMove"><apiName>mouseMove</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_MOVE</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> The following example is a simple drawing program. The user can draw on the 
 main Sprite object or on a smaller rectangular Sprite object. 
   
 <p>In the constructor, a rectangle <codeph>innerRect</codeph> Sprite object is created 
 and the line style is set to green. The line style for drawing on the 
 <codeph>MouseEvent_MOUSE_MOVEExample</codeph> Sprite container is set to red. Separate event 
 listeners for the <codeph>MouseEvent.MOUSE_UP</codeph> and <codeph>MouseEvent.MOUSE_DOWN</codeph> 
 events are added for the application's main Sprite object and <codeph>innerRect</codeph> 
 Sprite object. In both cases, the mouse down event listener methods move the current drawing 
 position to the mouse pointer's location and add a listener for the <codeph>MouseEvent.MOUSE_MOVE</codeph> 
 event. When the mouse pointer is moved, the invoked event listener methods follows the pointer and draw 
 a line using the <codeph>graphics.LineTo()</codeph> method. (<b>Note:</b> The <codeph>innerRect</codeph> 
 Sprite object obscures the red lines of the main Sprite object that are drawn behind the rectangle.) 
 When the <codeph>MouseEvent.MOUSE_UP</codeph> event occurs, the listener for the <codeph>MOUSE_MOVE</codeph> 
 event is removed and drawing is stopped.</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OUT_mouseOut"><apiName>mouseOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_OVER_mouseOver"><apiName>mouseOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:MOUSE_WHEEL_mouseWheel"><apiName>mouseWheel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:MOUSE_WHEEL</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN_RightMouseDown"><apiName>RightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OUT_rollOut"><apiName>rollOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OUT</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:MouseEvent:ROLL_OVER_rollOver"><apiName>rollOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:MouseEvent:ROLL_OVER</apiEventType><adobeApiEventClassifier>flash.events:MouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:MouseEvent:MouseEvent"><apiName>MouseEvent</apiName><shortdesc>
     Creates an Event object that contains information about mouse events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Possible values are: <codeph>MouseEvent.CLICK</codeph>,
	 <codeph>MouseEvent.DOUBLE_CLICK</codeph>, <codeph>MouseEvent.MOUSE_DOWN</codeph>, 
	 <codeph>MouseEvent.MOUSE_MOVE</codeph>, <codeph>MouseEvent.MOUSE_OUT</codeph>, 
	 <codeph>MouseEvent.MOUSE_OVER</codeph>, <codeph>MouseEvent.MOUSE_UP</codeph>, 
	<codeph>MouseEvent.MIDDLE_CLICK</codeph>, <codeph>MouseEvent.MIDDLE_MOUSE_DOWN</codeph>, <codeph>MouseEvent.MIDDLE_MOUSE_UP</codeph>,
	<codeph>MouseEvent.RIGHT_CLICK</codeph>, <codeph>MouseEvent.RIGHT_MOUSE_DOWN</codeph>, <codeph>MouseEvent.RIGHT_MOUSE_UP</codeph>,
	 <codeph>MouseEvent.MOUSE_WHEEL</codeph>, <codeph>MouseEvent.ROLL_OUT</codeph>, and <codeph>MouseEvent.ROLL_OVER</codeph>. 
	 
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Determines whether the Event object participates in the bubbling phase of the event flow.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled.
	 </apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>The horizontal coordinate at which the event occurred relative to the containing sprite.
	 </apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>The vertical coordinate at which the event occurred relative to the containing sprite.
	 </apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>The complementary InteractiveObject instance that is affected by the event. For example, when a <codeph>mouseOut</codeph> event occurs, <codeph>relatedObject</codeph> represents the display list object to which the pointing device now points.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>On Windows or Linux, indicates whether the Ctrl key is activated. On Mac, indicates whether either the Ctrl key or the Command key is activated.
     </apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Alt key is activated (Windows or Linux only).
	 </apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Shift key is activated.
	 </apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the primary mouse button is pressed.
	 </apiDesc></apiParam><apiParam><apiItemName>delta</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Indicates how many lines should be scrolled for each unit the user rotates the mouse wheel. A positive delta value indicates an upward scroll; a negative value indicates a downward scroll. Typical values are 1 to 3, but faster rotation may produce larger values. This parameter is used only for the <codeph>MouseEvent.mouseWheel</codeph> event.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>(AIR only) Indicates whether the Command key is activated (Mac only). This parameter is used only for the <codeph>MouseEvent.click</codeph>, 
	<codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleClick</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, 
	<codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightClick</codeph>, <codeph>MouseEvent.rightMouseDown</codeph>, <codeph>MouseEvent.rightMouseUp</codeph>, 
	and <codeph>MouseEvent.doubleClick</codeph> events. This parameter is for Adobe AIR only; do not set it for Flash Player content.
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>(AIR only) Indicates whether the Control or Ctrl key is activated. This parameter is used only for the <codeph>MouseEvent.click</codeph>, 
	<codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleClick</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, 
	<codeph>MouseEvent.middleMouseUp</codeph>, <codeph>MouseEvent.rightClick</codeph>, <codeph>MouseEvent.rightMouseDown</codeph>, <codeph>MouseEvent.rightMouseUp</codeph>, 
	and <codeph>MouseEvent.doubleClick</codeph> events. This parameter is for Adobe AIR only; do not set it for Flash Player content.
	</apiDesc></apiParam><apiParam><apiItemName>clickCount</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>(AIR only) Indicates whether or not the mouse event is part of a multi-click sequence. This parameter will be zero for all mouse events other than 
	<codeph>MouseEvent.mouseDown</codeph>, <codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>, 
	<codeph>MouseEvent.rightMouseDown</codeph> and <codeph>MouseEvent.rightMouseUp</codeph>. Listening for single clicks, double clicks, or any multi-click sequence 
	is possible with the <codeph>clickCount</codeph> parameter. This parameter is for Adobe AIR only; do not set it for Flash Player content.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for MouseEvent objects.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Creates an Event object that contains information about mouse events.
	 Event objects are passed as parameters to event listeners.
     
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:MouseEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the MouseEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new MouseEvent object with property values that match those of the original.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the MouseEvent object and sets the value of each property to match that of the original.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the MouseEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the MouseEvent object.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the MouseEvent object. The string is in the following format:
	<p><codeph>[MouseEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> ... delta=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:MouseEvent:updateAfterEvent"><apiName>updateAfterEvent</apiName><shortdesc>
	Instructs Flash Player or Adobe AIR to render after processing of this event completes, if the display list has been modified.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Instructs Flash Player or Adobe AIR to render after processing of this event completes, if the display list has been modified.
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:MouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	Defines the value of the type property of a click event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>click</codeph> event object. 
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>For click events, this value is always <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:click"><linktext>flash.display.InteractiveObject.click</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:CONTEXT_MENU"><apiName>CONTEXT_MENU</apiName><shortdesc>
	The MouseEvent.CONTEXT_MENU constant defines the value of the 
	type property of a contextMenu event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>contextMenu</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>MouseEvent.CONTEXT_MENU</codeph> constant defines the value of the 
	<codeph>type</codeph> property of a <codeph>contextMenu</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the right mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Count of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:DOUBLE_CLICK"><apiName>DOUBLE_CLICK</apiName><shortdesc>
	Defines the value of the type property of a doubleClick event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>doubleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>doubleClick</codeph> event object. The <codeph>doubleClickEnabled</codeph> property 
	must be <codeph>true</codeph> for an object to generate the <codeph>doubleClick</codeph> event.
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>For double-click events, this value is always <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:doubleClick"><linktext>flash.display.InteractiveObject.doubleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_CLICK"><apiName>MIDDLE_CLICK</apiName><shortdesc>
	Defines the value of the type property of a middleClick event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>middleClick</codeph> event object. 
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>For middle-click events, this property is always <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleClick"><linktext>flash.display.InteractiveObject.middleClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_DOWN"><apiName>MIDDLE_MOUSE_DOWN</apiName><shortdesc>
	Defines the value of the type property of a middleMouseDown event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>middleMouseDown</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the middle mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Count of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseDown"><linktext>flash.display.InteractiveObject.middleMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MIDDLE_MOUSE_UP"><apiName>MIDDLE_MOUSE_UP</apiName><shortdesc>
	Defines the value of the type property of a middleMouseUp event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>middleMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>middleMouseUp</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the middle mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Count of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:middleMouseUp"><linktext>flash.display.InteractiveObject.middleMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	Defines the value of the type property of a mouseDown event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>mouseDown</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows and Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Count of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>Please see the <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> constant's example for an illustration of how to use this constant. 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseDown"><linktext>flash.display.InteractiveObject.mouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_MOVE"><apiName>MOUSE_MOVE</apiName><shortdesc>
	Defines the value of the type property of a mouseMove event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseMove</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>mouseMove</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example conref="examples\MouseEvent_MOUSE_MOVEExample.as"> The following example is a simple drawing program. The user can draw on the 
 main Sprite object or on a smaller rectangular Sprite object. 
   
 <p>In the constructor, a rectangle <codeph>innerRect</codeph> Sprite object is created 
 and the line style is set to green. The line style for drawing on the 
 <codeph>MouseEvent_MOUSE_MOVEExample</codeph> Sprite container is set to red. Separate event 
 listeners for the <codeph>MouseEvent.MOUSE_UP</codeph> and <codeph>MouseEvent.MOUSE_DOWN</codeph> 
 events are added for the application's main Sprite object and <codeph>innerRect</codeph> 
 Sprite object. In both cases, the mouse down event listener methods move the current drawing 
 position to the mouse pointer's location and add a listener for the <codeph>MouseEvent.MOUSE_MOVE</codeph> 
 event. When the mouse pointer is moved, the invoked event listener methods follows the pointer and draw 
 a line using the <codeph>graphics.LineTo()</codeph> method. (<b>Note:</b> The <codeph>innerRect</codeph> 
 Sprite object obscures the red lines of the main Sprite object that are drawn behind the rectangle.) 
 When the <codeph>MouseEvent.MOUSE_UP</codeph> event occurs, the listener for the <codeph>MOUSE_MOVE</codeph> 
 event is removed and drawing is stopped.</p>     
 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.Graphics;
    import flash.events.MouseEvent;

    public class MouseEvent_MOUSE_MOVEExample extends Sprite {
        private var innerRect:Sprite = new Sprite();
        
        public function MouseEvent_MOUSE_MOVEExample() {

            graphics.lineStyle(3, 0xFF0000, 1);
            stage.addEventListener(MouseEvent.MOUSE_DOWN, mouseDownHandler);
            stage.addEventListener(MouseEvent.MOUSE_UP, mouseUpHandler);

            innerRect.graphics.lineStyle(1, 0x00FF00, 1);
            innerRect.graphics.beginFill(0xFFFFFF);
            innerRect.graphics.drawRect(10, 10, 200, 200);
            innerRect.graphics.endFill();
            innerRect.addEventListener(MouseEvent.MOUSE_DOWN, innerRectMouseDownHandler);
            innerRect.addEventListener(MouseEvent.MOUSE_UP, innerRectMouseUpHandler);
            addChild(innerRect);
        }

        private function mouseDownHandler(event:MouseEvent):void {
            graphics.moveTo(event.stageX, event.stageY);
            stage.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }
    
        private function mouseMoveHandler(event:MouseEvent):void {
            graphics.lineTo(event.stageX, event.stageY);
        }    
    
        private function mouseUpHandler(event:MouseEvent):void {
            stage.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
        }

        private function innerRectMouseDownHandler(event:MouseEvent):void {
            innerRect.graphics.moveTo(event.localX, event.localY);
            innerRect.addEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    
        private function innerRectMouseMoveHandler(event:MouseEvent):void {
            innerRect.graphics.lineTo(event.localX, event.localY);
        }    
    
        private function innerRectMouseUpHandler(event:MouseEvent):void {
            innerRect.removeEventListener(MouseEvent.MOUSE_MOVE, innerRectMouseMoveHandler);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseMove"><linktext>flash.display.InteractiveObject.mouseMove</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OUT"><apiName>MOUSE_OUT</apiName><shortdesc>
	Defines the value of the type property of a mouseOut event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>mouseOut</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>The display list object to which the pointing device now points.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOut"><linktext>flash.display.InteractiveObject.mouseOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_OVER"><apiName>MOUSE_OVER</apiName><shortdesc>
	Defines the value of the type property of a mouseOver event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>mouseOver</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>The display list object to which the pointing device was pointing.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseOver"><linktext>flash.display.InteractiveObject.mouseOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	Defines the value of the type property of a mouseUp event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>mouseUp</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Count of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc><example>Please see the <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> constant's example for an illustration of how to use this constant. 
	</example></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseUp"><linktext>flash.display.InteractiveObject.mouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:MOUSE_WHEEL"><apiName>MOUSE_WHEEL</apiName><shortdesc>
	Defines the value of the type property of a mouseWheel event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseWheel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>mouseWheel</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>delta</codeph></entry><entry>The number of lines that that each notch on the mouse wheel represents.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseWheel"><linktext>flash.display.InteractiveObject.mouseWheel</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	Defines the value of the type property of a rightClick event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>rightClick</codeph> event object. 
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>For right-click events, this property is always <codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightClick"><linktext>flash.display.InteractiveObject.rightClick</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	Defines the value of the type property of a rightMouseDown event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>rightMouseDown</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry>For right-click events, this property is always <codeph>true</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Count of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseDown"><linktext>flash.display.InteractiveObject.rightMouseDown</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	Defines the value of the type property of a rightMouseUp event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>rightMouseUp</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the right mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>clickCount</codeph></entry><entry>Count of the number of mouse clicks to indicate whether the event is part of a multi-click sequence.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rightMouseUp"><linktext>flash.display.InteractiveObject.rightMouseUp</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OUT"><apiName>ROLL_OUT</apiName><shortdesc>
	Defines the value of the type property of a rollOut event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>rollOut</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>The display list object to which the pointing device now points.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOut"><linktext>flash.display.InteractiveObject.rollOut</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:ROLL_OVER"><apiName>ROLL_OVER</apiName><shortdesc>
	Defines the value of the type property of a rollOver event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>rollOver</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	    
	    	
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>altKey</codeph></entry><entry><codeph>true</codeph> if the Alt key is active (Windows or Linux).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>The display list object to which the pointing device was pointing.</entry></row><row><entry><codeph>localX</codeph></entry><entry>The horizontal coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>localY</codeph></entry><entry>The vertical coordinate at which the event occurred relative to the containing sprite.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>stageX</codeph></entry><entry>The horizontal coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>stageY</codeph></entry><entry>The vertical coordinate at which the event occurred in global stage coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance under the pointing device. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:rollOver"><linktext>flash.display.InteractiveObject.rollOver</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:altKey:get"><apiName>altKey</apiName><shortdesc>
    Indicates whether the Alt key is active (true) or inactive (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>Reserved in case Desktop Player wants to capture this key in a future implementation.
	The Option key modifier on Macintosh system must be represented using this key modifier. So far, it seems
    only the Windows version is hooked up.
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    Indicates whether the Alt key is active (<codeph>true</codeph>) or inactive (<codeph>false</codeph>).
    Supported for Windows and Linux operating systems only.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:buttonDown:get"><apiName>buttonDown</apiName><shortdesc>
	Indicates whether the primary mouse button is pressed (true) or not (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the primary mouse button is pressed (<codeph>true</codeph>) or not (<codeph>false</codeph>).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:clickCount:get"><apiName>clickCount</apiName><shortdesc>
	Indicates whether or not the mouse down event is part of a multi-click sequence.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether or not the mouse down event is part of a multi-click sequence.
	This parameter will be zero for all mouse events other than <codeph>MouseEvent.mouseDown</codeph>,
	<codeph>MouseEvent.mouseUp</codeph>, <codeph>MouseEvent.middleMouseDown</codeph>, <codeph>MouseEvent.middleMouseUp</codeph>,
	<codeph>MouseEvent.rightMouseDown</codeph>, and <codeph>MouseEvent.rightMouseUp</codeph>. Listening
	for single clicks, double clicks, or any multi-click sequence is possible with the <codeph>clickCount</codeph> parameter.
	
	For example, an initial <codeph>MouseEvent.mouseDown</codeph> and <codeph>MouseEvent.mouseUp</codeph> will have a
	<codeph>clickCount</codeph> of 1, and the second <codeph>MouseEvent.mouseDown</codeph> and <codeph>MouseEvent.mouseUp</codeph>
	in a double-click sequence will have a
	<codeph>clickCount</codeph> of 2. If the mouse moves sufficiently or the multi-click sequence is
	interrupted for some reason, then the next <codeph>MouseEvent.mouseDown</codeph> will have a clickCount of 1.
	
	The doubleClick event will continue to fire as expected.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:commandKey:get"><apiName>commandKey</apiName><shortdesc>
	Indicates whether the command key is activated (Mac only.) 
	
	The value of property commandKey
	will have the same value as property ctrlKey on the Mac.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the command key is activated (Mac only.) 
	
	<p>The value of property <codeph>commandKey</codeph>
	will have the same value as property <codeph>ctrlKey</codeph> on the Mac. 
	Always false on Windows or Linux.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:controlKey:get"><apiName>controlKey</apiName><shortdesc>
	Indicates whether the Control key is activated on Mac and whether the Ctrl key is activated on Windows or Linux.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the Control key is activated on Mac and whether the Ctrl key is activated on Windows or Linux.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:ctrlKey:get"><apiName>ctrlKey</apiName><shortdesc>
	On Windows or Linux, indicates whether the Ctrl key is active (true) or inactive (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	On Windows or Linux, indicates whether the Ctrl key is active (<codeph>true</codeph>) or inactive (<codeph>false</codeph>).
	On Macintosh, indicates whether either the Control key or the Command key is activated.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:delta:get"><apiName>delta</apiName><shortdesc>
	Indicates how many lines should be scrolled for each unit the user rotates the 
	mouse wheel.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Indicates how many lines should be scrolled for each unit the user rotates the 
	mouse wheel. A positive delta value indicates an upward scroll; a negative 
	value indicates a downward scroll. Typical values are 1 to 3, but faster 
	rotation may produce larger values. This setting depends on the device 
	and operating system and is usually configurable by the user. This 
	property applies only to the <codeph>MouseEvent.mouseWheel</codeph> event.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 If true, the relatedObject property is set to null for 
	 reasons related to security sandboxes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 If <codeph>true</codeph>, the <codeph>relatedObject</codeph> property is set to <codeph>null</codeph> for 
	 reasons related to security sandboxes.  If the nominal value of <codeph>relatedObject</codeph> is a reference to a
	 DisplayObject in another sandbox, <codeph>relatedObject</codeph> is set to
	 <codeph>null</codeph> unless there is permission in both directions across this sandbox boundary.  Permission is
	 established by calling <codeph>Security.allowDomain()</codeph> from a SWF file, or by providing
	 a policy file from the server of an image file, and setting the <codeph>LoaderContext.checkPolicyFile</codeph>
	 property when loading the image.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/relatedObject"><linktext>MouseEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:localX:get"><apiName>localX</apiName><shortdesc>
	The horizontal coordinate at which the event occurred relative to the containing sprite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	The horizontal coordinate at which the event occurred relative to the containing sprite.
	
	</apiDesc><example>Please see the <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> constant's example for an illustration of how to use this property.
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:localY:get"><apiName>localY</apiName><shortdesc>
	The vertical coordinate at which the event occurred relative to the containing sprite.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	The vertical coordinate at which the event occurred relative to the containing sprite.
	
	</apiDesc><example>Please see the <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> constant's example for an illustration of how to use this property.
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	A reference to a display list object that is related to the event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	A reference to a display list object that is related to the event. For example, when a <codeph>mouseOut</codeph> event occurs, 
	<codeph>relatedObject</codeph> represents the display list object to which the pointing device now points. 
	This property applies to the <codeph>mouseOut</codeph>, <codeph>mouseOver</codeph>, <codeph>rollOut</codeph>, and <codeph>rollOver</codeph> events.
	<p>The value of this property can be <codeph>null</codeph> in two circumstances: if there no related object, 
	or there is a related object, but it is in a security sandbox to which you don't have access.
		Use the <codeph>isRelatedObjectInaccessible()</codeph> property to determine which of these reasons applies.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#MouseEvent/isRelatedObjectInaccessible"><linktext>MouseEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:MouseEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Indicates whether the Shift key is active (true) or inactive 
	(false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the Shift key is active (<codeph>true</codeph>) or inactive 
	(<codeph>false</codeph>).
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageX:get"><apiName>stageX</apiName><shortdesc>
	The horizontal coordinate at which the event occurred in global Stage coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	The horizontal coordinate at which the event occurred in global Stage coordinates.  
	This property is calculated when the <codeph>localX</codeph> property is set.
	
	</apiDesc><example>Please see the <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> constant's example for an illustration of how to use this property. 
	</example></apiValueDetail></apiValue><apiValue id="flash.events:MouseEvent:stageY:get"><apiName>stageY</apiName><shortdesc>
	The vertical coordinate at which the event occurred in global Stage coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	The vertical coordinate at which the event occurred in global Stage coordinates. 
	This property is calculated when the <codeph>localY</codeph> property is set.
	
	</apiDesc><example>Please see the <xref href="MouseEvent.html#MOUSE_MOVE">MOUSE_MOVE</xref> constant's example for an illustration of how to use this property.
	</example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
	
	A NetStream object dispatches a DRMStatusEvent object when the content protected using 
	digital rights management (DRM) begins playing successfully (when the voucher is
	verified, and when the user is authenticated and authorized to view the content).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for DRM-enabled objects.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	
	A NetStream object dispatches a DRMStatusEvent object when the content protected using 
	digital rights management (DRM) begins playing successfully (when the voucher is
	verified, and when the user is authenticated and authorized to view the content). 
        The DRMStatusEvent object contains information related to the voucher, such as 
        whether the content can be made available offline or when the voucher will expire 
	and the content can no longer be viewed. The application can use this data to 
	inform the user of the status of her policy and permissions.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMStatusEvent/DRM_STATUS"><linktext>DRMStatusEvent.DRM_STATUS</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link><link href="flash.net.drm.xml#DRMVoucher"><linktext>flash.net.drm.DRMVoucher</linktext></link></related-links><adobeApiEvent id="flash.events:DRMStatusEvent:DRM_STATUS_drmStatus"><apiName>drmStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMStatusEvent:DRM_STATUS</apiEventType><adobeApiEventClassifier>flash.events:DRMStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:DRMStatusEvent:DRMStatusEvent"><apiName>DRMStatusEvent</apiName><shortdesc>
 	    Creates an Event object that contains specific information about DRM status events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent, constructor
		</keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one type of DRMAuthenticate event: <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property.
		</apiDesc></apiParam><apiParam><apiItemName>inPolicies</apiItemName><apiOperationClassifier>Object</apiOperationClassifier><apiData>null</apiData><apiDesc>The custom object that contains custom DRM properties.  		
		</apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>The context of the Event.  		
		</apiDesc></apiParam><apiParam><apiItemName>inAvailableOffline</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates if content can be viewed offline.
		</apiDesc></apiParam><apiParam><apiItemName>inAnonymous</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether content is accessible to anonymous users.
		</apiDesc></apiParam><apiParam><apiItemName>inVoucherEndDate</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>The date when the content voucher expires, expressed as an epoch value.
		</apiDesc></apiParam><apiParam><apiItemName>inOfflineLeasePeriod</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>The number of days remaining for user to view content offline.
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inVoucher</apiItemName><apiOperationClassifier>flash.net.drm:DRMVoucher</apiOperationClassifier><apiData>null</apiData></apiParam><apiParam><apiItemName>inLocal</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData></apiParam></apiConstructorDef><apiDesc>
 	    Creates an Event object that contains specific information about DRM status events.
 	    Event objects are passed as parameters to event listeners. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMStatusEvent:clone"><apiName>clone</apiName><shortdesc>
		Creates a copy of the DRMStatusEvent object and sets the value of each property to match
		that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new DRMStatusEvent object with property values that match those of the original.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Creates a copy of the DRMStatusEvent object and sets the value of each property to match
		that of the original. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMStatusEvent:toString"><apiName>toString</apiName><shortdesc>
		Returns a string that contains all the properties of the DRMStatusEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the DRMStatusEvent object.
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Returns a string that contains all the properties of the DRMStatusEvent object. 
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMStatusEvent:DRM_STATUS"><apiName>DRM_STATUS</apiName><shortdesc>
		The DRMStatusEvent.DRM_STATUS constant defines the value of the 
		type property of a drmStatus event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		The <codeph>DRMStatusEvent.DRM_STATUS</codeph> constant defines the value of the 
		<codeph>type</codeph> property of a <codeph>drmStatus</codeph> event object. 
		
		
		<p>This event has the following properties:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>detail</codeph></entry><entry>A string explaining the context of the status event.</entry></row><row><entry><codeph>isAnonymous</codeph></entry><entry>Indicates whether the content protected with DRM 
					encryption is available without requiring a user to provide authentication credentials.</entry></row><row><entry><codeph>isAvailableOffline</codeph></entry><entry>Indicates whether the content protected with DRM
					encryption is available offline.</entry></row><row><entry><codeph>offlineLeasePeriod</codeph></entry><entry>The remaining number of days that content can be 
					viewed offline.</entry></row><row><entry><codeph>policies</codeph></entry><entry>A custom object of the DRM status event.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NetStream object.</entry></row><row><entry><codeph>voucherEndDate</codeph></entry><entry>The absolute date on which the voucher expires 
					and the content can no longer be viewed by users</entry></row><row><entry><codeph>contentData</codeph></entry><entry>The DRMContentData for the content</entry></row><row><entry><codeph>voucher</codeph></entry><entry>The DRMVoucher object for the content.</entry></row><row><entry><codeph>isLocal</codeph></entry><entry>Indicates whether the content is stored on the local file system</entry></row></tbody></tgroup></adobetable>
		
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:detail:get"><apiName>detail</apiName><shortdesc>
		A string explaining the context of the status event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.detail, detail
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		A string explaining the context of the status event.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAnonymous:get"><apiName>isAnonymous</apiName><shortdesc>
		Indicates whether the content, protected with digital rights management (DRM) encryption, is available
		without requiring a user to provide authentication credentials, in which case the value is
		true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAnonymous, isAnonymous
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		Indicates whether the content, protected with digital rights management (DRM) encryption, is available
		without requiring a user to provide authentication credentials, in which case the value is
		<codeph>true</codeph>. Otherwise, the value is <codeph>false</codeph>, and a user must provide a username
		and password that matches the one known and expected by the content provider. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isAvailableOffline:get"><apiName>isAvailableOffline</apiName><shortdesc>
		Indicates whether the content, protected with digital rights management (DRM) encryption, is available
		offline, in which case the value is true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.isAvailableOffline, isAvailableOffline
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		Indicates whether the content, protected with digital rights management (DRM) encryption, is available
		offline, in which case the value is <codeph>true</codeph>. Otherwise, the value is <codeph>false</codeph>.
		<p>
		In order for digitally protected content to be available offline, its voucher must be cached to the user's
		local machine. (The application decides where to store the content locally in order for it to be available
		offline.)
		</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:offlineLeasePeriod:get"><apiName>offlineLeasePeriod</apiName><shortdesc>
		The remaining number of days that content can be viewed offline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.offlineLeasePeriod, offlineLeasePeriod
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
		The remaining number of days that content can be viewed offline.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:policies:get"><apiName>policies</apiName><shortdesc>
		A custom object of the DRM status event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.policies, policies
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
		A custom object of the DRM status event.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucherEndDate:get"><apiName>voucherEndDate</apiName><shortdesc>
		The absolute date on which the voucher expires and the content can no longer be viewed by users.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMStatusEvent.voucherEndDate, voucherEndDate
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Date</apiValueClassifier></apiValueDef><apiDesc>
		The absolute date on which the voucher expires and the content can no longer be viewed by users. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 A DRMContentData object containing the information necessary
		 to obtain a voucher for viewing the DRM-protected content.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 A DRMContentData object containing the information necessary
		 to obtain a voucher for viewing the DRM-protected content.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:isLocal:set"><apiName>isLocal</apiName><shortdesc>
		 Indicates whether the voucher is cached in the local voucher store.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Indicates whether the voucher is cached in the local voucher store.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMStatusEvent:voucher:set"><apiName>voucher</apiName><shortdesc>
		 A DRMVoucher object for the content.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMVoucher</apiValueClassifier></apiValueDef><apiDesc>
		 A DRMVoucher object for the content.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	An object dispatches an AsyncErrorEvent when an exception is thrown from native
	asynchronous code, which could be from, for example, LocalConnection, NetConnection,
	SharedObject, or NetStream.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for AsyncErrorEvent events.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	An object dispatches an AsyncErrorEvent when an exception is thrown from native
	asynchronous code, which could be from, for example, LocalConnection, NetConnection,
	<ph platform="actionscript">SharedObject</ph>, or NetStream. There is only one type of asynchronous error event:
	<codeph>AsyncErrorEvent.ASYNC_ERROR</codeph>.
	
	</apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#AsyncErrorEvent/ASYNC_ERROR"><linktext>ASYNC_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:AsyncErrorEvent:ASYNC_ERROR_asyncError"><apiName>asyncError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:AsyncErrorEvent:ASYNC_ERROR</apiEventType><adobeApiEventClassifier>flash.events:AsyncErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:AsyncErrorEvent:AsyncErrorEvent"><apiName>AsyncErrorEvent</apiName><shortdesc>
	Creates an AsyncErrorEvent object that contains information about asyncError events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through 
	the inherited <codeph>type</codeph> property. There is only one type of error event:
	<codeph>ErrorEvent.ERROR</codeph>.
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object bubbles. Event listeners can access
	this information through the inherited <codeph>bubbles</codeph> property. 
	<ph platform="javascript">This property applies to display objects in SWF 
	content, which use the ActionScript 3.0 display architecture.</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners
	can access this information through the inherited <codeph>cancelable</codeph> property. 
	
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>Text to be displayed as an error message. Event listeners can access this
	information through the <codeph>text</codeph> property.
	
	</apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier><apiData>null</apiData><apiDesc>The exception that occurred.
	If error is non-null, the event's <codeph>errorId</codeph> property is set from the error's
	<codeph>errorId</codeph> property.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for AsyncErrorEvent objects.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an AsyncErrorEvent object that contains information about asyncError events.
	AsyncErrorEvent objects are passed as parameters to event listeners.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:AsyncErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the AsyncErrorEvent object and sets the value of each property to match
	that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new AsyncErrorEvent object with property values that match those of the original.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the AsyncErrorEvent object and sets the value of each property to match
	that of the original. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:AsyncErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the AsyncErrorEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the AsyncErrorEvent object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the AsyncErrorEvent object. The
	string is in the following format:
	<p><codeph>[AsyncErrorEvent type=<i>value</i> bubbles=<i>value</i>
	cancelable=<i>value</i> ... error=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:AsyncErrorEvent:ASYNC_ERROR"><apiName>ASYNC_ERROR</apiName><shortdesc>
	The AsyncErrorEvent.ASYNC_ERROR constant defines the value of the 
	type property of an asyncError event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>asyncError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>AsyncErrorEvent.ASYNC_ERROR</codeph> constant defines the value of the 
	<codeph>type</codeph> property of an <codeph>asyncError</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph><ph platform="javascript">
	This property applies to ActionScript 3.0 display objects (in SWF files).</ph></entry> </row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default
	behavior to cancel. <ph platform="javascript">This property applies to display objects 
	in SWF content, which use the ActionScript 3.0 display architecture.</ph></entry> </row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the
	Event object with an event listener. <ph platform="javascript">This property applies to display 
	objects in SWF content, which use the ActionScript 3.0 display architecture.</ph></entry> </row><row><entry><codeph>target</codeph></entry> <entry>The object dispatching the event.</entry> </row><row><entry><codeph>error</codeph></entry><entry>The error that triggered the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:AsyncErrorEvent:error"><apiName>error</apiName><shortdesc>
	The exception that was thrown.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Error</apiValueClassifier></apiValueDef><apiDesc>
	The exception that was thrown.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
 An object dispatches a StatusEvent object when a device, such as a camera or microphone, or an object such as a LocalConnection object reports its status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\StatusEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for StatusEvent events.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 An object dispatches a StatusEvent object when a device, such as a camera or microphone, or an object such as a LocalConnection object reports its status. There is only one type of status event: <codeph>StatusEvent.STATUS</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link><link href="air.net.xml#ServiceMonitor"><linktext>air.net.ServiceMonitor</linktext></link></related-links><adobeApiEvent id="flash.events:StatusEvent:STATUS_status"><apiName>status</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:StatusEvent:STATUS</apiEventType><adobeApiEventClassifier>flash.events:StatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:StatusEvent:StatusEvent"><apiName>StatusEvent</apiName><shortdesc>
	 Creates an Event object that contains information about status events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one type of status event: <codeph>StatusEvent.STATUS</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property. 
	 </apiDesc></apiParam><apiParam><apiItemName>code</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>A description of the object's status. Event listeners can access this information through the <codeph>code</codeph> property.
	 </apiDesc></apiParam><apiParam><apiItemName>level</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>The category of the message, such as <codeph>"status"</codeph>, <codeph>"warning"</codeph> or <codeph>"error"</codeph>. Event listeners can access this information through the <codeph>level</codeph> property.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for StatusEvent objects.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Creates an Event object that contains information about status events.
	 Event objects are passed as parameters to event listeners.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#StatusEvent/STATUS"><linktext>STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:StatusEvent:clone"><apiName>clone</apiName><shortdesc>
	 Creates a copy of the StatusEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new StatusEvent object with property values that match those of the original.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Creates a copy of the StatusEvent object and sets the value of each property to match that of the original. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:StatusEvent:toString"><apiName>toString</apiName><shortdesc>
	 Returns a string that contains all the properties of the StatusEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the StatusEvent object.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Returns a string that contains all the properties of the StatusEvent object. The string is in the following format:
	 <p><codeph>[StatusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> code=<i>value</i> level=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:StatusEvent:STATUS"><apiName>STATUS</apiName><shortdesc>
     Defines the value of the type property of a status event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>status</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Defines the value of the <codeph>type</codeph> property of a <codeph>status</codeph> event object.
	 <p>This event has the following properties:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>code</codeph></entry><entry>A description of the object's status.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	 object with an event listener.</entry></row><row><entry><codeph>level</codeph></entry><entry>The category of the message, such as <codeph>"status"</codeph>, <codeph>"warning"</codeph> or <codeph>"error"</codeph>.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object reporting its status.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:status"><linktext>flash.media.Camera.status</linktext></link><link href="flash.media.xml#Microphone/event:status"><linktext>flash.media.Microphone.status</linktext></link><link href="flash.net.xml#LocalConnection/event:status"><linktext>flash.net.LocalConnection.status</linktext></link><link href="flash.net.xml#NetStream/event:status"><linktext>flash.net.NetStream.status</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:code:get"><apiName>code</apiName><shortdesc>
	 A description of the object's status.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 A description of the object's status.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue><apiValue id="flash.events:StatusEvent:level:get"><apiName>level</apiName><shortdesc>
 	 The category of the message, such as "status", "warning" or "error".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
 	 The category of the message, such as <codeph>"status"</codeph>, <codeph>"warning"</codeph> or <codeph>"error"</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera"><linktext>flash.media.Camera</linktext></link><link href="flash.media.xml#Microphone"><linktext>flash.media.Microphone</linktext></link><link href="flash.net.xml#LocalConnection"><linktext>flash.net.LocalConnection</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
	 The DRMManager dispatches a DRMAuthenticationErrorEvent object when a call to the authenticate()
	 method of the DRMManager object fails.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The DRMManager dispatches a DRMAuthenticationErrorEvent object when a call to the <codeph>authenticate()</codeph>
	 method of the DRMManager object fails.
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationErrorEvent:DRMAuthenticationErrorEvent"><apiName>DRMAuthenticationErrorEvent</apiName><shortdesc>
		 Creates a new instance of a DRMAuthenticationErrorEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>the event type string
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>whether the event bubbles up the display list
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>whether the event can be canceled
		 </apiDesc></apiParam><apiParam><apiItemName>inDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>The error description
		 </apiDesc></apiParam><apiParam><apiItemName>inErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>The ID of the general type of error
		 </apiDesc></apiParam><apiParam><apiItemName>inSubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>The ID indicating the specific error within its type
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>the URL of the logged-in server
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>the authenticated domain on the logged-in server
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new instance of a DRMAuthenticationErrorEvent object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:DRMAuthenticationErrorEvent:AUTHENTICATION_ERROR"><apiName>AUTHENTICATION_ERROR</apiName><shortdesc>
		 The string constant to use for the authentication error event 
		 in the type parameter when adding and removing event listeners.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>AuthenticationError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The string constant to use for the authentication error event 
		 in the type parameter when adding and removing event listeners.
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationErrorEvent:subErrorID:set"><apiName>subErrorID</apiName><shortdesc>
		 A more detailed error code.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		 A more detailed error code.
		  
	 	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:IEventDispatcher"><apiName>IEventDispatcher</apiName><shortdesc>
The IEventDispatcher interface defines methods for adding or removing event listeners, checks 
whether specific types of event listeners are registered, and dispatches events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiInterface/><apiAccess value="public"/><apiStatic/><apiBaseClassifier></apiBaseClassifier></apiClassifierDef><apiDesc>
The IEventDispatcher interface defines methods for adding or removing event listeners, checks 
whether specific types of event listeners are registered, and dispatches events.

<p>Event targets are an important part of the Flash<sup>®</sup> Player and Adobe AIR event model. The event target 
serves as the focal point for how events flow through the display list hierarchy. 
When an event such as a mouse click or a keypress occurs, an event 
object is dispatched into the event flow from the root of the display list. The event object makes a
round-trip journey to the event target, which is conceptually divided into three phases: 
the capture phase includes the journey from the root to the last node before the event 
target's node; the target phase includes only the event target node; and the bubbling 
phase includes any subsequent nodes encountered on the return trip to the root of the 
display list.</p>

<p>In general, the easiest way for a user-defined class to gain event dispatching
capabilities is to extend EventDispatcher. If this is impossible (that is, if the class is
already extending another class), you can instead implement the IEventDispatcher interface,
create an EventDispatcher member, and write simple hooks to route calls into the aggregated 
EventDispatcher.</p>

</apiDesc><example conref="examples\IEventDispatcherExample.as"> The following example uses the IEventDispatcherExample and
 DecoratedDispatcher sample classes to show how the IEventDispatcher class can be
 implemented and used.  The example accomplishes this by implementing each method of 
 DecoratedDispatcher in the same manner as in EventDispatcher.
 Within the constructor for IEventDispatcherExample, a new instance (named <codeph>decorDispatcher</codeph>) of the DecoratedDispatcher class is constructed
 and the  <codeph>decorDispatcher</codeph> variable is used to call
 <codeph>addEventListener()</codeph> with the custom event <codeph>doSomething</codeph>, which is
 then handled by <codeph>didSomething()</codeph>, which prints a line of text using
 <codeph>trace()</codeph>.
<codeblock> 
package {
        import flash.events.Event;
        import flash.display.Sprite;
       
        public class IEventDispatcherExample extends Sprite {
                public function IEventDispatcherExample() {
                        var decorDispatcher:DecoratedDispatcher = new DecoratedDispatcher();
                        decorDispatcher.addEventListener("doSomething", didSomething);
                        decorDispatcher.dispatchEvent(new Event("doSomething"));
                }
               
                public function didSomething(evt:Event):void {
                        trace("&gt;&gt; didSomething");
                }
        }
}

import flash.events.IEventDispatcher;
import flash.events.EventDispatcher;
import flash.events.Event;
               
class DecoratedDispatcher implements IEventDispatcher {       
    private var dispatcher:EventDispatcher;
               
    public function DecoratedDispatcher() {
        dispatcher = new EventDispatcher(this);
    }
           
    public function addEventListener(type:String, listener:Function, useCapture:Boolean = false, priority:int = 0, useWeakReference:Boolean = false):void{
        dispatcher.addEventListener(type, listener, useCapture, priority);
    }
           
    public function dispatchEvent(evt:Event):Boolean{
        return dispatcher.dispatchEvent(evt);
    }
    
    public function hasEventListener(type:String):Boolean{
        return dispatcher.hasEventListener(type);
    }
    
    public function removeEventListener(type:String, listener:Function, useCapture:Boolean = false):void{
        dispatcher.removeEventListener(type, listener, useCapture);
    }
                   
    public function willTrigger(type:String):Boolean {
        return dispatcher.willTrigger(type);
    }
}
</codeblock></example></apiClassifierDetail><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	Registers an event listener object with an EventDispatcher object so that the listener
	receives notification of an event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of event.
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>The listener function that processes the event. This function must accept an event object 
	as its only parameter and must return nothing, as this example shows:
	<p><codeph>function(evt:Event):void</codeph></p>
	The function can have any name.
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the listener works in the capture phase or the target 
	and bubbling phases. If <codeph>useCapture</codeph> is set to <codeph>true</codeph>, the  
	listener processes the event only during the capture phase and not in the target or 
	bubbling phase. If <codeph>useCapture</codeph> is <codeph>false</codeph>, the listener processes the event only
	during the target or bubbling phase. To listen for the event in all three phases, call 
	<codeph>addEventListener()</codeph> twice, once with <codeph>useCapture</codeph> set to <codeph>true</codeph>, 
	then again with <codeph>useCapture</codeph> set to <codeph>false</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>The priority level of the event listener. Priorities are designated by a 32-bit integer. The higher the number, the higher the priority. All listeners with priority <i>n</i> are processed before listeners of priority <i>n-1</i>. If two or more listeners share the same priority, they are processed in the order in which they were added. The default priority is 0. 
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or weak. A strong 
    reference (the default) prevents your listener from being garbage-collected. A weak 
    reference does not. <p>Class-level member functions are not subject to garbage 
    collection, so you can set <codeph>useWeakReference</codeph> to <codeph>true</codeph> for 
    class-level member functions without subjecting them to garbage collection. If you set
    <codeph>useWeakReference</codeph> to <codeph>true</codeph> for a listener that is a nested inner 
    function, the function will be garbge-collected and no longer persistent. If you create 
    references to the inner function (save it in another variable) then it is not 
    garbage-collected and stays persistent.</p>
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Registers an event listener object with an EventDispatcher object so that the listener
	receives notification of an event. You can register event listeners on all nodes in the
	display list for a specific type of event, phase, and priority.
	<p>After you successfully register an event listener, you cannot change its priority
	through additional calls to <codeph>addEventListener()</codeph>. To change a listener's priority, you
	must first call <codeph>removeEventListener()</codeph>. Then you can register the listener again with the new
	priority level.</p>
	<p>After the listener is registered, subsequent calls to 
	<codeph>addEventListener()</codeph> with a different value for either <codeph>type</codeph> or <codeph>useCapture</codeph> result in the
	creation of a separate listener registration. For example, if you first register a
	listener with <codeph>useCapture</codeph> set to <codeph>true</codeph>, it listens only during the capture phase. If you
	call <codeph>addEventListener()</codeph> again using the same listener object, but with <codeph>useCapture</codeph> set to
	<codeph>false</codeph>, you have two separate listeners: one that listens during the capture phase, and
	another that listens during the target and bubbling phases.</p>
	<p>You cannot register an event listener for only the target phase or the bubbling phase. Those phases are coupled during registration because bubbling applies only to the ancestors of the target node.</p>
	<p>When you no longer need an event listener, remove it by calling <codeph>EventDispatcher.removeEventListener()</codeph>; otherwise, memory problems might result. Objects
	with registered event listeners are not automatically removed from memory because the
	garbage collector does not remove objects that still have references.</p>
	<p>Copying an EventDispatcher instance does not copy the event listeners attached to it.
	(If your newly created node needs an event listener, you must attach the listener after
	creating the node.) However, if you move an EventDispatcher instance, the event
	listeners attached to it move along with it.</p>
	<p>If the event listener is being registered on a node while an event is also being processed on 
	this node, the event listener is not triggered during the current phase but may be 
	triggered during a later phase in the event flow, such as the bubbling phase.</p>
	<p>If an event listener is removed from a node while an event is being processed on the node, it is still triggered by the current actions. After it is removed, the event listener is never invoked again 
	(unless it is registered again for future processing). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	Dispatches an event into the event flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A value of <codeph>true</codeph> unless <codeph>preventDefault()</codeph> is called on the event, 
	in which case it returns <codeph>false</codeph>.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>The event object dispatched into the event flow.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Dispatches an event into the event flow. The event target is the
	EventDispatcher object upon which <codeph>dispatchEvent()</codeph> is called.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	Checks whether the EventDispatcher object has any listeners registered for a specific type 
	of event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A value of <codeph>true</codeph> if a listener of the specified type is registered; <codeph>false</codeph> otherwise.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of event.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Checks whether the EventDispatcher object has any listeners registered for a specific type 
	of event. This allows you to determine where an EventDispatcher object has altered handling of an event type in the event flow hierarchy. To determine whether 
	a specific event type will actually trigger an event listener, use <codeph>IEventDispatcher.willTrigger()</codeph>.
	<p>The difference between <codeph>hasEventListener()</codeph> and <codeph>willTrigger()</codeph> is that <codeph>hasEventListener()</codeph> examines only the object to which it belongs, whereas <codeph>willTrigger()</codeph> examines the entire event flow for the event specified by the <codeph>type</codeph> parameter.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#IEventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	Removes a listener from the EventDispatcher object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of event.
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>The listener object to remove.
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Specifies whether the listener was registered for the capture phase or the target and bubbling phases. If the listener was registered for both the capture phase and the target and bubbling phases, two calls to <codeph>removeEventListener()</codeph> are required to remove both: one call with <codeph>useCapture</codeph> set to <codeph>true</codeph>, and another call with <codeph>useCapture</codeph> set to <codeph>false</codeph>. 
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Removes a listener from the EventDispatcher object. If there is no matching listener 
	registered with the EventDispatcher object, a call to this method has no effect.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IEventDispatcher:flash.events:IEventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A value of <codeph>true</codeph> if a listener of the specified type will be triggered; <codeph>false</codeph> otherwise.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of event.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Checks whether an event listener is registered with this EventDispatcher object or any of its ancestors for the specified event type. This method returns <codeph>true</codeph> if an event listener is triggered during any phase of the event flow when an event of the specified type is dispatched to this EventDispatcher object or any of its descendants.
	<p>The difference between <codeph>hasEventListener()</codeph> and <codeph>willTrigger()</codeph> is that <codeph>hasEventListener()</codeph> examines only the object to which it belongs, whereas <codeph>willTrigger()</codeph> examines the entire event flow for the event specified by the <codeph>type</codeph> parameter.</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
	An HTMLLoader object dispatches an HTMLUncaughtScriptExceptionEvent object whenever a JavaScript exception
	is thrown and not handled with a catch statement.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	An HTMLLoader object dispatches an HTMLUncaughtScriptExceptionEvent object whenever a JavaScript exception
	is thrown and not handled with a <codeph>catch</codeph> statement.
	
	</apiDesc></apiClassifierDetail><related-links><link href="../../flash/html/HTMLLoader.html"><linktext>HTMLLoader</linktext></link></related-links><adobeApiEvent id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException"><apiName>uncaughtScriptException</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier>flash.events:HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:HTMLUncaughtScriptExceptionEvent:HTMLUncaughtScriptExceptionEvent"><apiName>HTMLUncaughtScriptExceptionEvent</apiName><shortdesc>
		Creates an HTMLUncaughtScriptExceptionEvent object to pass as a parameter to event listeners.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>exceptionValue</apiItemName><apiType value=""/><apiDesc>When a JavaScript process throws an uncaught exception, the  
		<codeph>exceptionValue</codeph> is the result of evaluating the expression in the throw 
		statement that resulted in the uncaught exception. The <codeph>exceptionValue</codeph> 
		property can be a primitive value, a reference to a JavaScript object, or a reference to an 
		ActionScript object.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Creates an HTMLUncaughtScriptExceptionEvent object to pass as a parameter to event listeners.
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:HTMLUncaughtScriptExceptionEvent:clone"><apiName>clone</apiName><shortdesc>
		 
		Creates a copy of the HTMLUncaughtScriptExceptionEvent object and sets 
		the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>The copy of the HTMLUncaughtScriptExceptionEvent object.
		
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 
		Creates a copy of the HTMLUncaughtScriptExceptionEvent object and sets 
		the value of each property to match that of the original.
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:UNCAUGHT_SCRIPT_EXCEPTION"><apiName>UNCAUGHT_SCRIPT_EXCEPTION</apiName><shortdesc>
		The HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION constant 
		defines the value of the type property of an 
		uncaughtScriptException event object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncaughtScriptException</apiData><apiType value=""/></apiValueDef><apiDesc>
		The <codeph>HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</codeph> constant 
		defines the value of the <codeph>type</codeph> property of an 
		<codeph>uncaughtScriptException</codeph> event object.
		
		 
		 <p>This event has the following properties:</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>exceptionValue</codeph></entry><entry>The result of evaluating the expression in the <codeph>throw</codeph>
		 			statement that resulted in the uncaught exception.</entry></row><row><entry><codeph>stackTrace</codeph></entry><entry>An array of objects that represent the stack trace 
		 			at the time the <codeph>throw</codeph> statement that resulted in the uncaught exception was executed.</entry></row><row><entry><codeph>target</codeph></entry><entry>The HTMLLoader object.</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:exceptionValue"><apiName>exceptionValue</apiName><shortdesc>
	The result of evaluating the expression in the throw statement that resulted in the
	uncaught exception.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	The result of evaluating the expression in the throw statement that resulted in the
	uncaught exception. The <codeph>exceptionValue</codeph> property can be a primitive
	value, a reference to a JavaScript object, or a reference to an ActionScript object.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTMLUncaughtScriptExceptionEvent:stackTrace:get"><apiName>stackTrace</apiName><shortdesc>
	An array of objects that represent the stack trace at the time the throw statement 
	that resulted in the uncaught exception was executed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	An array of objects that represent the stack trace at the time the throw statement 
	that resulted in the uncaught exception was executed.  Each object in the array has 
	three properties:
	
	<ul>
	
		<li><codeph>sourceURL</codeph> (a string): The URL of the script of the call stack frame.</li>
	
		<li><codeph>line</codeph> (a number): The line number in the <codeph>sourceURL</codeph> 
									resource of the call stack frame.</li>
	
		<li><codeph>functionName</codeph> (a string): The name of the function for the call stack frame.</li>
	
	</ul>
	  	 
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
 A SQLErrorEvent instance is dispatched by a SQLConnection instance or SQLStatement instance
 when an error occurs while performing a database operation in asynchronous execution mode.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 A SQLErrorEvent instance is dispatched by a SQLConnection instance or SQLStatement instance
 when an error occurs while performing a database operation in asynchronous execution mode.
 The SQLErrorEvent instance
 that's passed as an event object to listeners provides access to
 information about the cause of the error and the operation that was being attempted.
 
 <p>The specific details of the failure can be found on the SQLError object
 in the SQLErrorEvent instance's <codeph>error</codeph> property.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:SQLErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLErrorEvent:SQLErrorEvent"><apiName>SQLErrorEvent</apiName><shortdesc>
     Creates a SQLErrorEvent object to pass as an argument to event listeners.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event, accessible in the <codeph>type</codeph> property.
	 The SQLErrorEvent defines one event type, the <codeph>error</codeph> event,
	 represented by the <codeph>SQLErrorEvent.ERROR</codeph> constant.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Determines whether the event object participates in the bubbling
     stage of the event flow. The default value is <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be cancelled.
	 The default value is <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiParam><apiItemName>error</apiItemName><apiOperationClassifier>flash.errors:SQLError</apiOperationClassifier><apiData>null</apiData><apiDesc>The SQLError object that contains the details of the error.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Used to create new SQLErrorEvent object.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Creates a SQLErrorEvent object to pass as an argument to event listeners.
     
     </apiDesc></apiConstructorDetail><related-links><link href="" invalidHref="flash.errors.SQLError;.xml"><linktext>flash.errors.SQLError;</linktext></link><link href="flash.events.xml#SQLErrorEvent/ERROR"><linktext>ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SQLErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	 Creates a copy of the SQLErrorEvent object and sets the value of each property
	 to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new SQLErrorEvent object with property values that match those of
	 the original.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Creates a copy of the SQLErrorEvent object and sets the value of each property
	 to match that of the original.
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SQLErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	 Returns a string that contains all the properties of the SQLErrorEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the SQLErrorEvent object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Returns a string that contains all the properties of the SQLErrorEvent object.
	 The string is in the following format:
	 
	 <p><codeph>[SQLErrorEvent type=<i>value</i> bubbles=<i>value</i>
	 cancelable=<i>value</i> error=<i>value</i>]</codeph></p>
	 
	 <p>The error value has the following
	 format: <codeph>SQLError : <i>message value</i> code=<i>value</i> operation=<i>value</i></codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
     The SQLErrorEvent.ERROR constant defines the value of the
	 type property of an error event dispatched when a call
	 to a method of a SQLConnection or SQLStatement instance completes
	 with an error.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLErrorEvent.ERROR</codeph> constant defines the value of the
	 <codeph>type</codeph> property of an error event dispatched when a call
	 to a method of a SQLConnection or SQLStatement instance completes
	 with an error.
     
	 The <codeph>error</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>error</codeph></entry><entry>A SQLError object containing information about the type of error that occurred and the operation that caused the error.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection or SQLStatement object reporting the error.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link><link href="flash.errors.xml#SQLError"><linktext>flash.errors.SQLError</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLErrorEvent:error:get"><apiName>error</apiName><shortdesc>
     A SQLError object containing detailed information about the cause of the error.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.errors:SQLError</apiValueClassifier></apiValueDef><apiDesc>
     A SQLError object containing detailed information about the cause of the error.
     
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
An object dispatches an ErrorEvent object when an error causes a network operation to fail.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for ErrorEvent events.
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
An object dispatches an ErrorEvent object when an error causes a network operation to fail. 
There is only one type of <codeph>error</codeph> event: <codeph>ErrorEvent.ERROR</codeph>.

<p>The ErrorEvent class also serves as the base class for the AsyncErrorEvent, IOErrorEvent, 
SecurityErrorEvent, and SQLErrorEvent classes.</p>

<p>You can check for <codeph>error</codeph> events that do not have any listeners by using the 
<ph platform="actionscript">debugger version of Flash Player or the</ph> AIR Debug 
Launcher (ADL) application. The <ph platform="actionscript">debugger version of
Flash Player or the</ph> AIR Debug Launcher (ADL) application displays these events
as strings (defined by the <codeph>text</codeph> parameter of the ErrorEvent constructor).</p>

</apiDesc><example conref="examples\ErrorEventExample.as"> The following example demonstrates the use of a single error handler (<codeph>errorHandler()</codeph>)
 that captures multiple types of error events. If there is an <codeph>ioError</codeph> event, the handler 
 attempts to load from the network, which then throws a <codeph>securityError</codeph>.
 
 <p><b>Note: </b> This example does not work if you have a file named 
 MissingFile.xml in the same directory as your SWF file.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.*;

    public class ErrorEventExample extends Sprite {
        private var loader:URLLoader;
        private var request:URLRequest;
        
        public function ErrorEventExample() {
            loader = new URLLoader();
            loader.addEventListener(IOErrorEvent.IO_ERROR, errorHandler);
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, errorHandler);

            request = new URLRequest();
            loadFromFileSystem();
        }
        
        private function loadFromFileSystem():void {
            request.url = "MissingFile.xml";
            loader.load(request);
        }

        private function loadFromNetwork():void {
            request.url = "http://www.[yourDomain].com/MissingFile.xml";
            loader.load(request);
        }
        
        private function errorHandler(event:ErrorEvent):void {
            trace("errorHandler: " + event);
            if(event is IOErrorEvent) {
                loadFromNetwork();
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:ErrorEvent:ERROR_error"><apiName>error</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ErrorEvent:ERROR</apiEventType><adobeApiEventClassifier>flash.events:ErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ErrorEvent:ErrorEvent"><apiName>ErrorEvent</apiName><shortdesc>
	Creates an Event object that contains information about error events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one type of error event: <codeph>ErrorEvent.ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object bubbles. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property. 
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>Text to be displayed as an error message. Event listeners can access this information through the <codeph>text</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>A reference number to associate with the specific error (supported in Adobe AIR only).
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for ErrorEvent objects.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an Event object that contains information about error events.
	Event objects are passed as parameters to event listeners.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the ErrorEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new ErrorEvent object with property values that match those of the original.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the ErrorEvent object and sets the value of each property to match that of the original. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the ErrorEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the ErrorEvent object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the ErrorEvent object. The string is in the following format:
	<p><codeph>[ErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ErrorEvent:ERROR"><apiName>ERROR</apiName><shortdesc>
	Defines the value of the type property of an error event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>error</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of an <codeph>error</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object experiencing a network operation failure.</entry></row><row><entry><codeph>text</codeph></entry><entry>Text to be displayed as an error message.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ErrorEvent:errorID:get"><apiName>errorID</apiName><shortdesc>
	Contains the reference number associated with the specific error.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	Contains the reference number associated with the specific error.
	For a custom ErrorEvent object, this number is the value from the <codeph>id</codeph>
	parameter supplied in the constructor. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
 A ProgressEvent object is dispatched when a load operation has begun or a socket has received data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for ProgressEvent events.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 A ProgressEvent object is dispatched when a load operation has begun or a socket has received data. 
 These events are usually generated when SWF files, images or data are loaded into an application. 
 There are two types of progress events:
 <codeph>ProgressEvent.PROGRESS</codeph> and <codeph>ProgressEvent.SOCKET_DATA</codeph>.
 
 </apiDesc><example conref="examples\ProgressEventExample.as"> The following example uses the <codeph>ProgressEventExample</codeph> class to illustrate how various
 event listeners are used when a file is being downloaded.  The example carries out the following tasks:
 <ol>
  <li>The properties <codeph>downloadURL</codeph> and <codeph>fileName</codeph> are created, which indicate the location 
  and name of the download file.</li>
  <li>In the <codeph>ProgressEventExample</codeph> constructor, a new FileReference object named <codeph>file</codeph> is 
  created and then passed to the <codeph>configureListeners()</codeph> method.</li>
  <li>The <codeph>downloadURL</codeph> and <codeph>fileName</codeph> properties are then passed to <codeph>file.download()</codeph>, 
  which prompts for the location to download the file.</li>
  <li>The <codeph>configureListeners()</codeph> method adds seven event listeners and their associated subscriber
  methods:
  <ol outputclass="A">
      <li><codeph>cancel</codeph>/<codeph>cancelHandler()</codeph> is dispatched if the file download is canceled.</li> 
      <li><codeph>complete</codeph>/<codeph>complereHandler()</codeph> is dispatched when the file download process is 
      finished.</li> 
      <li><codeph>ioError</codeph>/<codeph>ioErrorHandler()</codeph> is dispatched if the download file is unavailable or 
      inaccessible.</li> 
      <li><codeph>open</codeph>/<codeph>openHandler()</codeph> is dispatched when the download operation has started.</li> 
      <li><codeph>progress</codeph>/<codeph>progressHandler()</codeph> is dispatched when the download process begins and again
      when it ends.</li> 
      <li><codeph>securityError</codeph>/<codeph>securityErrorHandler</codeph> is dispatched if the local playback
      security setting does not match the type of data access for the download file (local versus network); 
      see the notes below.</li> 
      <li><codeph>select</codeph>/<codeph>selectHandler()</codeph> is dispatched when the download object is selected.</li> 
  </ol>
  </li>
 </ol>
 <p> <b>Notes:</b>
 <ul>
  <li>You need to compile the SWF file with Local Playback Security set to Access Network Files Only.</li>
  <li>This example requires a file named SomeFile.pdf.</li> 
  <li>Although this example makes use of all events available to the FileReference object, most situations 
  require only a subset.</li>
 </ul>
 </p>
 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.*;
    import flash.net.FileReference;
    import flash.net.URLRequest;

    public class ProgressEventExample extends Sprite {
        private var downloadURL:String = "http://www.[yourDomain].com/SomeFile.pdf";
        private var fileName:String = "SomeFile.pdf";
        private var file:FileReference;

        public function ProgressEventExample() {
            var request:URLRequest = new URLRequest(downloadURL);
            file = new FileReference();
            configureListeners(file);
            file.download(request, fileName);
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(Event.CANCEL, cancelHandler);
            dispatcher.addEventListener(Event.COMPLETE, completeHandler);
            dispatcher.addEventListener(IOErrorEvent.IO_ERROR, ioErrorHandler);
            dispatcher.addEventListener(Event.OPEN, openHandler);
            dispatcher.addEventListener(ProgressEvent.PROGRESS, progressHandler);
            dispatcher.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);
            dispatcher.addEventListener(Event.SELECT, selectHandler);
        }

        private function cancelHandler(event:Event):void {
            trace("cancelHandler: " + event);
        }

        private function completeHandler(event:Event):void {
            trace("completeHandler: " + event);
        }

        private function ioErrorHandler(event:IOErrorEvent):void {
            trace("ioErrorHandler: " + event);
        }

        private function openHandler(event:Event):void {
            trace("openHandler: " + event);
        }

        private function progressHandler(event:ProgressEvent):void {
            var file:FileReference = FileReference(event.target);
            trace("progressHandler: name=" + file.name + " bytesLoaded=" + event.bytesLoaded + " bytesTotal=" + event.bytesTotal);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }

        private function selectHandler(event:Event):void {
            var file:FileReference = FileReference(event.target);
            trace("selectHandler: name=" + file.name + " URL=" + downloadURL);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.filesystem.xml"><linktext>FileStream class</linktext></link><link href="flash.display.xml#LoaderInfo"><linktext>LoaderInfo class</linktext></link><link href="flash.net.xml#Socket"><linktext>Socket class</linktext></link></related-links><adobeApiEvent id="flash.events:ProgressEvent:PROGRESS_progress"><apiName>progress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ProgressEvent:SOCKET_DATA_socketData"><apiName>socketData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ProgressEvent:SOCKET_DATA</apiEventType><adobeApiEventClassifier>flash.events:ProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ProgressEvent:ProgressEvent"><apiName>ProgressEvent</apiName><shortdesc>
	Creates an Event object that contains information about progress events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Possible values are:<codeph>ProgressEvent.PROGRESS</codeph>
	and <codeph>ProgressEvent.SOCKET_DATA</codeph>.
	
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Determines whether the Event object participates in the bubbling stage of the event flow. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. 
	</apiDesc></apiParam><apiParam><apiItemName>bytesLoaded</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>The number of items or bytes loaded at the time the listener processes the event.
	</apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>The total number of items or bytes that will be loaded if the loading process succeeds.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for <codeph>ProgressEvent</codeph> objects.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an Event object that contains information about progress events.
	Event objects are passed as parameters to event listeners.
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ProgressEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the ProgressEvent object and sets each property's value to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new ProgressEvent object with property values that match those of the original.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the ProgressEvent object and sets each property's value to match that of the original. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ProgressEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the ProgressEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the <codeph>ProgressEvent</codeph> object.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the ProgressEvent object. The string is in the following format:
	<p><codeph>[ProgressEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> bytesLoaded=<i>value</i> bytesTotal=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ProgressEvent:PROGRESS"><apiName>PROGRESS</apiName><shortdesc>
	Defines the value of the type property of a progress event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>progress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>progress</codeph> event object.
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>The number of items or bytes loaded at the time the listener processes the event.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>The total number of items or bytes that ultimately will  be loaded if the loading process succeeds.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object reporting progress. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:progress"><linktext>flash.display.LoaderInfo.progress</linktext></link><link href="flash.media.xml#Sound/event:progress"><linktext>flash.media.Sound.progress</linktext></link><link href="flash.net.xml#FileReference/event:progress"><linktext>flash.net.FileReference.progress</linktext></link><link href="flash.net.xml#URLLoader/event:progress"><linktext>flash.net.URLLoader.progress</linktext></link><link href="flash.net.xml#URLStream/event:progress"><linktext>flash.net.URLStream.progress</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:SOCKET_DATA"><apiName>SOCKET_DATA</apiName><shortdesc>
	Defines the value of the type property of a socketData event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>socketData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>socketData</codeph> event object.
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	     
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event.</entry></row><row><entry><codeph>bytesLoaded</codeph></entry><entry>The number of items or bytes loaded at the time the listener processes the event.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>0; this property is not used by <codeph>socketData</codeph> event objects.</entry></row><row><entry><codeph>target</codeph></entry><entry>The Socket object reporting progress.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:socketData"><linktext>flash.net.Socket.socketData</linktext></link></related-links></apiValue><apiValue id="flash.events:ProgressEvent:bytesLoaded:get"><apiName>bytesLoaded</apiName><shortdesc>
	The number of items or bytes loaded when the listener processes the event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	The number of items or bytes loaded when the listener processes the event.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
	The total number of items or bytes that will be loaded if the loading process succeeds.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	The total number of items or bytes that will be loaded if the loading process succeeds. 
	If the progress event is dispatched/attached to a Socket object, the bytesTotal will always be 0 
	unless a value is specified in the bytesTotal parameter of the constructor. 
	The actual number of bytes sent back or forth is not set and is up to the application developer.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
	 A ShaderEvent is dispatched when a shader operation launched from
	 a ShaderJob finishes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A ShaderEvent is dispatched when a shader operation launched from
	 a ShaderJob finishes.
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.display.xml#ShaderJob"><linktext>flash.display.ShaderJob</linktext></link></related-links><adobeApiEvent id="flash.events:ShaderEvent:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ShaderEvent:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:ShaderEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ShaderEvent:ShaderEvent"><apiName>ShaderEvent</apiName><shortdesc>
		 Creates a ShaderEvent object to pass to event listeners.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of the event, available in the 
		               <codeph>type</codeph> property.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates 
		          in the bubbling stage of the event flow. The default value 
		          is <codeph>false</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be 
		          canceled. The default value is <codeph>false</codeph>.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bitmap</apiItemName><apiOperationClassifier>flash.display:BitmapData</apiOperationClassifier><apiData>null</apiData><apiDesc>The BitmapData object containing the result of the 
		                 operation that finished (or <codeph>null</codeph> if 
		                 the target wasn't a BitmapData object).
		 
		 </apiDesc></apiParam><apiParam><apiItemName>array</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>The ByteArray object containing the result of the 
		                operation that finished (or <codeph>null</codeph> if 
		                the target wasn't a ByteArray object).
		 
		 </apiDesc></apiParam><apiParam><apiItemName>vector</apiItemName><apiType value="Vector$Number"/><apiData>null</apiData><apiDesc>The Vector.&lt;Number&gt; instance containing the result of the 
		                 operation that finished (or <codeph>null</codeph> if 
		                 the target wasn't a Vector.&lt;Number&gt; instance).
		 
		 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a ShaderEvent object to pass to event listeners.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:ShaderEvent:clone"><apiName>clone</apiName><shortdesc>
		 Creates a copy of the ShaderEvent object and sets the value of each property
		 to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new ShaderEvent object with property values that match the values of
		 the original.
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Creates a copy of the ShaderEvent object and sets the value of each property
		 to match that of the original.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ShaderEvent:toString"><apiName>toString</apiName><shortdesc>
		 Returns a string that contains all the properties of the ShaderEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the ShaderEvent object.
		 
		 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Returns a string that contains all the properties of the ShaderEvent object.
		 The string is in the following format:
		 
		 <p><codeph>[ShaderEvent type=<i>value</i> bubbles=<i>value</i>
		 cancelable=<i>value</i> eventPhase=<i>value</i> 
		 bitmapData=<i>value</i> byteArray=<i>value</i> vector=<i>value</i>]</codeph></p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ShaderEvent:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
		 Defines the value of the type property of a complete event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 Defines the value of the <codeph>type</codeph> property of a <codeph>complete</codeph> event object.
		 
		 <p>This event has the following properties:</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		     
		     
		      
		  <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bitmapData</codeph></entry><entry>The BitmapData object 
		             containing the result of the operation that finished (or 
		             <codeph>null</codeph> if the target wasn't a BitmapData object).</entry></row><row><entry><codeph>byteArray</codeph></entry><entry>The ByteArray object containing 
		             the result of the operation that finished (or <codeph>null</codeph> if 
		             the target wasn't a ByteArray object).</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is 
		             no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is 
		             actively processing the event object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The ShaderJob object reporting completion.</entry></row><row><entry><codeph>vector</codeph></entry><entry>The Vector.&lt;Number&gt; instance 
		             containing the result of the operation that finished (or <codeph>null</codeph> if 
		             the target wasn't a Vector.&lt;Number&gt; instance).</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/event:complete"><linktext>flash.display.ShaderJob.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:bitmapData:get"><apiName>bitmapData</apiName><shortdesc>
		 The BitmapData object that was passed to the ShaderJob.start() method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:BitmapData</apiValueClassifier></apiValueDef><apiDesc>
		 The BitmapData object that was passed to the <codeph>ShaderJob.start()</codeph> method. 
		 If a ByteArray or Vector.&lt;Number&gt; was passed to the <codeph>start()</codeph> method 
		 this property is <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:byteArray:get"><apiName>byteArray</apiName><shortdesc>
		 
		 The ByteArray object that was passed to the ShaderJob.start() method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 
		 The ByteArray object that was passed to the <codeph>ShaderJob.start()</codeph> method.
         If a BitmapData or Vector.&lt;Number&gt; object was passed to the <codeph>start()</codeph> method 
		 this property is <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue><apiValue id="flash.events:ShaderEvent:vector:get"><apiName>vector</apiName><shortdesc>
		 
         The Vector.&amp;lt;Number&amp;gt; object that was passed to the ShaderJob.start() method.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$Number"/></apiValueDef><apiDesc>
		 
         The Vector.&lt;Number&gt; object that was passed to the <codeph>ShaderJob.start()</codeph> method. 
		 If a BitmapData or ByteArray object was passed to the <codeph>start()</codeph> method 
		 this property is <codeph>null</codeph>.
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#ShaderJob/start()"><linktext>flash.display.ShaderJob.start()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
 Native drag events are dispatched by the interactive objects involved in a
 drag-and-drop operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 Native drag events are dispatched by the interactive objects involved in a
 drag-and-drop operation.
 
 <p>The initiating object dispatches:</p> 
 <ul>
    <li><codeph>nativeDragStart</codeph> — When the drag operation begins.</li>
    <li><codeph>nativeDragUpdate</codeph> — While the drag operation is in progress.</li>
    <li><codeph>nativeDragComplete</codeph> — When the user releases the dragged item (whether or not
 the drop was accepted).</li>
 </ul>
 
 <p>The initiating object is the interactive object passed that is to the NativeDragManager object in the call
 to <codeph>NativeDragManager.doDrag()</codeph> which began the drag operation.</p>
 
 <p>Potential target interactive objects dispatches:</p>
 <ul>
    <li><codeph>nativeDragEnter</codeph> — When the drag gesture passes within the object boundary.</li>
    <li><codeph>nativeDragOver</codeph> — While the drag gesture remains within the object boundary.</li>
    <li><codeph>nativeDragExit</codeph> — When the drag gesture leaves the object boundary.</li>
    <li><codeph>nativeDragDrop</codeph> — When the user releases the dragged item over the object and the 
 object has accepted the drop with an earlier call to <codeph>NativeDragManager.acceptDragDrop()</codeph>.</li>
 </ul>
 
 <p>Typically a handler for the <codeph>nativeDragEnter</codeph> or 
 <codeph>nativeDragOver</codeph> event evaluates the data being dragged, 
 along with the drag actions allowed, to determine whether an interactive object 
 can accept a drop. To specify that an interactive object is an eligible target, the 
 event handler must call the <codeph>NativeDragManager.acceptDrop()</codeph>function, 
 passing in a reference to the object. If the user releases 
 the mouse button over the designated object, the object becomes the drop target and dispatches 
 the <codeph>nativeDragDrop</codeph> event.</p>
 
 <p>Any InteractiveObject type object can be a drag initiator or a drop target.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#NativeDragManager"><linktext>flash.desktop.NativeDragManager</linktext></link><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link><link href="flash.display.xml#InteractiveObject"><linktext>flash.display.InteractiveObject</linktext></link></related-links><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE_nativeDragComplete"><apiName>nativeDragComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP_nativeDragDrop"><apiName>nativeDragDrop</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_DROP</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER_nativeDragEnter"><apiName>nativeDragEnter</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_ENTER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT_nativeDragExit"><apiName>nativeDragExit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_EXIT</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER_nativeDragOver"><apiName>nativeDragOver</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_OVER</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_START_nativeDragStart"><apiName>nativeDragStart</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_START</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE_nativeDragUpdate"><apiName>nativeDragUpdate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE</apiEventType><adobeApiEventClassifier>flash.events:NativeDragEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeDragEvent:NativeDragEvent"><apiName>NativeDragEvent</apiName><shortdesc>
    Creates an Event object with specific information relevant to native drag-and-drop events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Possible values are:
    <codeph>NativeDragEvent.NATIVE_DRAG_START</codeph>,
    <codeph>NativeDragEvent.NATIVE_DRAG_UPDATE</codeph>,
	<codeph>NativeDragEvent.NATIVE_DRAG_ENTER</codeph>, 
	<codeph>NativeDragEvent.NATIVE_DRAG_OVER</codeph>, 
	<codeph>NativeDragEvent.NATIVE_DRAG_EXIT</codeph>, 
	<codeph>NativeDragEvent.NATIVE_DRAG_DROP</codeph>, 
	and <codeph>NativeDragEvent.NATIVE_DRAG_COMPLETE</codeph>.
	
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Event object participates in the bubbling phase of the event flow.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Indicates whether the Event object can be canceled.
	</apiDesc></apiParam><apiParam><apiItemName>localX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>The horizontal coordinate at which the event occurred relative to the containing sprite.
	</apiDesc></apiParam><apiParam><apiItemName>localY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>The vertical coordinate at which the event occurred relative to the containing sprite.
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>The related interactive display object. 
    </apiDesc></apiParam><apiParam><apiItemName>clipboard</apiItemName><apiOperationClassifier>flash.desktop:Clipboard</apiOperationClassifier><apiData>null</apiData><apiDesc>The Clipboard object containing the data to be transfered.
    </apiDesc></apiParam><apiParam><apiItemName>allowedActions</apiItemName><apiOperationClassifier>flash.desktop:NativeDragOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>The NativeDragOptions object defining the allowed actions (move, copy, and link).
    </apiDesc></apiParam><apiParam><apiItemName>dropAction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>The current action.
    
 	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Control key is activated.
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Alt key is activated.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Shift key is activated.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Command key is activated.
	
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Creates an Event object with specific information relevant to native drag-and-drop events.
    
	<p>Event objects are passed as parameters to event listeners. Dispatching a native drag event
	 does not trigger the associated behavior.</p>
	
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeDragEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of this NativeDragEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new NativeDragEvent object with property values that match those of the original.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of this NativeDragEvent object.
	
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeDragEvent:toString"><apiName>toString</apiName><shortdesc>
	 Formats the properties of this NativeDragEvent object as a string.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>The properties of this NativeDragEvent as a string.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Formats the properties of this NativeDragEvent object as a string.
	 
	 <p>The string is in the following format:</p>
	 <p><codeph>[NativeDragEvent type=value bubbles=value cancelable=value ... commandKey=value]</codeph></p>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_COMPLETE"><apiName>NATIVE_DRAG_COMPLETE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE defines the value of the 
	 type property of a nativeDragComplete event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_COMPLETE defines the value of the 
	 <codeph>type</codeph> property of a <codeph>nativeDragComplete</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>The NativeDragOptions object specifying the actions relevant to this drag operation.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>The Clipboard object containing the dragged data.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>The action chosen by the drop target (or <codeph>none</codeph> if no action was set).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragComplete"><linktext>flash.display.InteractiveObject.nativeDragComplete</linktext></link><link href="flash.desktop.xml#NativeDragActions"><linktext>flash.desktop.NativeDragActions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_DROP"><apiName>NATIVE_DRAG_DROP</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_DROP defines the value of the type 
	 property of a nativeDragDrop event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragDrop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_DROP defines the value of the <codeph>type</codeph> 
	 property of a <codeph>nativeDragDrop</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>The NativeDragOptions object specifying the actions relevant to this drag operation.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; canceling this event cancels the drag operation.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>The Clipboard object containing the dragged data. The clipboard can be read even if the object dispatching this event is not in the same security domain as the initiator.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>The action chosen by the drop target (or <codeph>none</codeph> if no action was set).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragDrop"><linktext>flash.display.InteractiveObject.nativeDragDrop</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_ENTER"><apiName>NATIVE_DRAG_ENTER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_ENTER defines the value of the 
	type property of a nativeDragEnter event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragEnter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_ENTER defines the value of the 
	<codeph>type</codeph> property of a <codeph>nativeDragEnter</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>The NativeDragOptions object specifying the actions relevant to this drag operation.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>The Clipboard object containing the dragged data. The clipboard can be read only if the object dispatching this event is in the same security domain as the initiator.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>The action chosen by the drop target (or <codeph>none</codeph> if no action was set).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragEnter"><linktext>flash.display.InteractiveObject.nativeDragEnter</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_EXIT"><apiName>NATIVE_DRAG_EXIT</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_EXIT defines the value of the type 
	 property of a nativeDragExit event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragExit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_EXIT defines the value of the <codeph>type</codeph> 
	 property of a <codeph>nativeDragExit</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>The NativeDragOptions object specifying the actions relevant to this drag operation.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>The Clipboard object containing the dragged data. The clipboard can be read only if the object dispatching this event is in the same security domain as the initiator.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>The action chosen by the drop target (or <codeph>none</codeph> if no action was set).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragExit"><linktext>flash.display.InteractiveObject.nativeDragExit</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_OVER"><apiName>NATIVE_DRAG_OVER</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_OVER defines the value of the type 
	 property of a nativeDragOver event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragOver</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_OVER defines the value of the <codeph>type</codeph> 
	 property of a <codeph>nativeDragOver</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>The NativeDragOptions object specifying the actions relevant to this drag operation.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; canceling this event cancels the drag operation.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>The Clipboard object containing the dragged data. The clipboard can be read only if the object dispatching this event is in the same security domain as the initiator.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>The action chosen by the drop target (or <codeph>none</codeph> if no action was set).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragOver"><linktext>flash.display.InteractiveObject.nativeDragOver</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_START"><apiName>NATIVE_DRAG_START</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_START defines the value of the type 
	property of a nativeDragStart event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragStart</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_START defines the value of the <codeph>type</codeph> 
	property of a <codeph>nativeDragStart</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>The NativeDragOptions object specifying the actions relevant to this drag operation.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; canceling this event cancels the drag operation.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>The Clipboard object containing the dragged data.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>The action chosen by the drop target (or <codeph>none</codeph> if no action was set).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragStart"><linktext>flash.display.InteractiveObject.nativeDragStart</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:NATIVE_DRAG_UPDATE"><apiName>NATIVE_DRAG_UPDATE</apiName><shortdesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE defines the value of the 
	type property of a nativeDragUpdate event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>nativeDragUpdate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	NativeDragEvent.NATIVE_DRAG_UPDATE defines the value of the 
	<codeph>type</codeph> property of a <codeph>nativeDragUpdate</codeph> event object.
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	     
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>allowedActions</codeph></entry><entry>The NativeDragOptions object specifying the actions relevant to this drag operation.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>clipboard</codeph></entry><entry>The Clipboard object containing the dragged data.</entry></row><row><entry><codeph>dropAction</codeph></entry><entry>The action chosen by the drop target (or <codeph>none</codeph> if no action was set).</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:nativeDragUpdate"><linktext>flash.display.InteractiveObject.nativeDragUpdate</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:allowedActions"><apiName>allowedActions</apiName><shortdesc>
	The NativeDragOptions object specifying the actions that are allowed by the 
	display object that initiated this drag operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:NativeDragOptions</apiValueClassifier></apiValueDef><apiDesc>
	The NativeDragOptions object specifying the actions that are allowed by the 
	display object that initiated this drag operation.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeDragOptions"><linktext>flash.desktop.NativeDragOptions</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:clipboard"><apiName>clipboard</apiName><shortdesc>
	 The Clipboard object containing the data in this drag operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.desktop:Clipboard</apiValueClassifier></apiValueDef><apiDesc>
	 The Clipboard object containing the data in this drag operation.
	 
	 <p>If the object dispatching the event is not in the same security domain
	 as the initiating object, then the clipboard can be read only in the handler for
	 a <codeph>nativeDragDrop</codeph> event.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#Clipboard"><linktext>flash.desktop.Clipboard</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeDragEvent:dropAction"><apiName>dropAction</apiName><shortdesc>
	The current action.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The current action. In the <codeph>nativeDragComplete</codeph> event, the <codeph>dropAction</codeph>
	 property reports the final action. 
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
	 The DRMManager dispatches a DRMAuthenticationCompleteEvent object when a call to the authenticate()
	 method of the DRMManager object succeeds.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The DRMManager dispatches a DRMAuthenticationCompleteEvent object when a call to the <codeph>authenticate()</codeph>
	 method of the DRMManager object succeeds.
	 
 	 </apiDesc></apiClassifierDetail><apiConstructor id="flash.events:DRMAuthenticationCompleteEvent:DRMAuthenticationCompleteEvent"><apiName>DRMAuthenticationCompleteEvent</apiName><shortdesc>
		 Creates a new instance of a DRMAuthenticationCompleteEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>the event type string
		 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>whether the event bubbles up the display list
		 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>whether the event can be canceled
		 </apiDesc></apiParam><apiParam><apiItemName>inServerURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>the URL of the logged-in server
		 </apiDesc></apiParam><apiParam><apiItemName>inDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>the authenticated domain on the logged-in server
		 </apiDesc></apiParam><apiParam><apiItemName>inToken</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>the authentication token
		 
	 	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
		 Creates a new instance of a DRMAuthenticationCompleteEvent object.
		 
		 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticationCompleteEvent:clone"><apiName>clone</apiName><shortdesc> 
	 Duplicates an instance of an Event subclass.</shortdesc><prolog/><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new Event object that is identical to the original.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc> 
	 Duplicates an instance of an Event subclass.
	 
     <p>Returns a new Event object that is a copy of the original instance of the Event object. 
	 You do not normally call <codeph>clone()</codeph>; the EventDispatcher class calls it automatically
	 when you redispatch an event—that is, when you call <codeph>dispatchEvent(event)</codeph> from a handler
	 that is handling <codeph>event</codeph>.</p>
	 
	 <p>The new Event object includes all the properties of the original.</p> 
	 
	 <p platform="actionscript">When creating your own custom Event class, you must override the 
	 inherited <codeph>Event.clone()</codeph> method in order for it to duplicate the 
	 properties of your custom class. If you do not set all the properties that you add 
	 in your event subclass, those properties will not have the correct values when listeners 
	 handle the redispatched event.</p>
	 
	 <p platform="actionscript">In this example, <codeph>PingEvent</codeph> is a subclass of <codeph>Event</codeph>
	 and therefore implements its own version of <codeph>clone()</codeph>.</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticationCompleteEvent:AUTHENTICATION_COMPLETE"><apiName>AUTHENTICATION_COMPLETE</apiName><shortdesc>
		 The string constant to use for the authentication complete event 
		 in the type parameter when adding and removing event listeners.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>authenticationComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The string constant to use for the authentication complete event 
		 in the type parameter when adding and removing event listeners.
		   
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:domain:set"><apiName>domain</apiName><shortdesc>
		 The content domain of the media rights server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The content domain of the media rights server. (Not a network or Internet domain name.)
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:serverURL:set"><apiName>serverURL</apiName><shortdesc>
		 The URL of the media rights server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The URL of the media rights server.
		  
	 	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticationCompleteEvent:token:set"><apiName>token</apiName><shortdesc>
		 The authentication token.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		 The authentication token.
		 
		 <p>The authentication is automatically added to the DRMManager session cache. You
		 can save the token and use it to authenticate the user in a future session. Reuse a
		 token with the <codeph>setAuthenticationToken()</codeph> method of the DRMManager.
		 Token expiration and other properties are determined by the server generating the token.</p>
		   
		 </apiDesc></apiValueDetail><related-links><link href="flash.net.drm.xml#DRMManager/setAuthenticationToken()"><linktext>flash.net.drm.DRMManager.setAuthenticationToken()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
 An IMEEvent object is dispatched when the user enters text using an input method editor 
 (IME).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\IMEEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for IMEEvent events.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
 An IMEEvent object is dispatched when the user enters text using an input method editor 
 (IME). IMEs are generally used to enter text from languages that have ideographs instead of 
 letters, such as Japanese, Chinese, and Korean. There is only one IME event: 
 <codeph>IMEEvent.IME_COMPOSITION</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links><adobeApiEvent id="flash.events:IMEEvent:IME_COMPOSITION_imeComposition"><apiName>imeComposition</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:IMEEvent:IME_COMPOSITION</apiEventType><adobeApiEventClassifier>flash.events:IMEEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:IMEEvent:IMEEvent"><apiName>IMEEvent</apiName><shortdesc>
	 Creates an Event object with specific information relevant to IME events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one IME event: <codeph>IMEEvent.IME_COMPOSITION</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property. 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>The reading string from the IME. This is the initial string as typed by the user, before selection of any candidates. The final composition string is delivered to the object with keyboard focus in a <codeph>TextEvent.TEXT_INPUT</codeph> event. Event listeners can access this information through the <codeph>text</codeph> property.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for IMEEvent objects.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Creates an Event object with specific information relevant to IME events.
	 Event objects are passed as parameters to event listeners.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.system.xml#IME"><linktext>flash.system.IME</linktext></link><link href="flash.events.xml#IMEEvent/IME_COMPOSITION"><linktext>flash.events.IMEEvent.IME_COMPOSITION</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:IMEEvent:clone"><apiName>clone</apiName><shortdesc>
	 Creates a copy of the IMEEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new IMEEvent object with property values that match those of the original. 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Creates a copy of the IMEEvent object and sets the value of each property to match that of the original. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:IMEEvent:toString"><apiName>toString</apiName><shortdesc>
	 Returns a string that contains all the properties of the IMEEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the IMEEvent object.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Returns a string that contains all the properties of the IMEEvent object. The string is in the following format:
	 <p><codeph>[IMEEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:IMEEvent:IME_COMPOSITION"><apiName>IME_COMPOSITION</apiName><shortdesc>
	 Defines the value of the type property of an imeComposition event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>imeComposition</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Defines the value of the <codeph>type</codeph> property of an <codeph>imeComposition</codeph> event object. 
	 <p>This event has the following properties:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The IME object.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#IME/event:imeComposition"><linktext>flash.system.IME.imeComposition</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:DataEvent"><apiName>DataEvent</apiName><shortdesc>
An object dispatches a DataEvent object when raw data has completed loading.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for DataEvent events.

</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:TextEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
An object dispatches a DataEvent object when raw data has completed loading.
There are two types of data event: 
<ul><li><codeph>DataEvent.DATA</codeph>: dispatched for data sent or received.</li>
<li><codeph>DataEvent.UPLOAD_COMPLETE_DATA</codeph>: dispatched when data is sent and the server has responded.</li></ul>

</apiDesc><example conref="examples\DataEventExample.as"> The following example creates an XMLSocket and connects it to a socket server
 running on port 8080 of <codeph>yourDomain</codeph>. An event listener is attached to the XMLSocket
 object that listens for <codeph>data</codeph> events, which are dispatched whenever raw data 
 is received.
 
 <p> <b>Notes:</b> 
 <ul>
    <li>To generate a <codeph>securityError</codeph> event in this example, you need to compile the SWF file with "Local playback security" set
     to "Access network only".</li>
    <li>You need a server running on [<codeph>yourDomain</codeph>] using port 8080.</li>
 </ul>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.DataEvent;
    import flash.net.XMLSocket;

    public class DataEventExample extends Sprite {
        private var hostName:String = "[yourDomain]";
        private var port:uint = 8080;
        private var socket:XMLSocket;

        public function DataEventExample() {
            socket = new XMLSocket();
            socket.addEventListener(DataEvent.DATA, dataHandler);
            socket.connect(hostName, port);
        }

        private function dataHandler(event:DataEvent):void {
            trace("dataHandler: " + event.data);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#FileReference"><linktext>flash.net.FileReference</linktext></link><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link></related-links><adobeApiEvent id="flash.events:DataEvent:DATA_data"><apiName>data</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA_uploadCompleteData"><apiName>uploadCompleteData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DataEvent:UPLOAD_COMPLETE_DATA</apiEventType><adobeApiEventClassifier>flash.events:DataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DataEvent:DataEvent"><apiName>DataEvent</apiName><shortdesc>
	Creates an event object that contains information about data events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the
	inherited <codeph>type</codeph> property. There is only one type of data event:
	<codeph>DataEvent.DATA</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling phase of the
	event flow. Event listeners can access this information through the inherited
	<codeph>bubbles</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can
	access this information through the inherited <codeph>cancelable</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>data</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>The raw data loaded into Flash Player or Adobe AIR. Event listeners can access this information
	through the <codeph>data</codeph> property.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for DataEvent objects.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an event object that contains information about data events.
	Event objects are passed as parameters to event listeners.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.net.xml#XMLSocket"><linktext>flash.net.XMLSocket</linktext></link><link href="flash.events.xml#DataEvent/DATA"><linktext>DataEvent.DATA</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:DataEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the DataEvent object and sets the value of each property to match that of the
	original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new DataEvent object with property values that match those of the original.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the DataEvent object and sets the value of each property to match that of the
	original.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DataEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the DataEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the DataEvent object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the DataEvent object. The string is in 
	the following format:
	<p><codeph>[DataEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i>
	data=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DataEvent:DATA"><apiName>DATA</apiName><shortdesc>
	Defines the value of the type property of a data event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>data</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>data</codeph> event object.  
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>data</codeph></entry><entry>The raw data loaded into Flash Player or Adobe AIR.</entry></row><row><entry><codeph>target</codeph></entry><entry>The XMLSocket object receiving data.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#XMLSocket/event:data"><linktext>flash.net.XMLSocket.data</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:UPLOAD_COMPLETE_DATA"><apiName>UPLOAD_COMPLETE_DATA</apiName><shortdesc>
	Defines the value of the type property of an uploadCompleteData event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uploadCompleteData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of an <codeph>uploadCompleteData</codeph> event object.
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>data</codeph></entry><entry>The raw data returned from the server after a successful file upload.</entry></row><row><entry><codeph>target</codeph></entry><entry>The FileReference object receiving data after a successful upload.</entry></row></tbody></tgroup></adobetable>
	
    </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:uploadCompleteData"><linktext>flash.net.FileReference.uploadCompleteData</linktext></link></related-links></apiValue><apiValue id="flash.events:DataEvent:data:get"><apiName>data</apiName><shortdesc>
	The raw data loaded into Flash Player or Adobe AIR.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The raw data loaded into Flash Player or Adobe AIR.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
An object dispatches a SecurityErrorEvent object to report the occurrence of a 
security error.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for SecurityErrorEvent events.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
An object dispatches a SecurityErrorEvent object to report the occurrence of a 
security error. Security errors reported through this class are generally from asynchronous 
operations, such as loading data, in which security violations may not manifest immediately. 
Your event listener can access the object's <codeph>text</codeph> property to determine what operation was
attempted and any URLs that were involved. If there are no event listeners, <ph platform="actionscript">the 
debugger version of Flash Player</ph> or the AIR Debug Launcher (ADL) application 
automatically displays an error message that contains the contents of the <codeph>text</codeph> 
property. There is one type of security error event: <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph>.

<p>Security error events are the final events dispatched for any target object. 
This means that any other events, including generic error events, are not dispatched for a target object 
that experiences a security error.</p>

</apiDesc><example conref="examples\SecurityErrorEventExample.as"> The following example uses the <codeph>SecurityErrorEventExample</codeph> class to show how a
 listener method <codeph>securityErrorHandler()</codeph> can be instantiated and set to listen for <codeph>securityError</codeph> 
 events to be dispatched. This event will occur when a <codeph>URLRequest</codeph> location is not in exactly
 the same domain as the calling SWF, and the requested domain has not authorized cross-domain access by way of
 a cross-domain policy file.
 <p>To create a <codeph>SecurityErrorEvent</codeph>, replace <codeph>http://www.[yourdomain].com</codeph> with a path that has not been authorized for
 cross domain access.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.SecurityErrorEvent;

    public class SecurityErrorEventExample extends Sprite {
        public function SecurityErrorEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com");
            loader.load(request);
        }

        private function securityErrorHandler(event:SecurityErrorEvent):void {
            trace("securityErrorHandler: " + event);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.system.xml#Security"><linktext>Security class</linktext></link><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:SecurityErrorEvent:SECURITY_ERROR_securityError"><apiName>securityError</apiName><prolog><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SecurityErrorEvent:SECURITY_ERROR</apiEventType><adobeApiEventClassifier>flash.events:SecurityErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SecurityErrorEvent:SecurityErrorEvent"><apiName>SecurityErrorEvent</apiName><shortdesc>
	Creates an Event object that contains information about security error events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one type of error event: <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>Text to be displayed as an error message. Event listeners can access this information through the <codeph>text</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>id</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>A reference number to associate with the specific error. 
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for SecurityErrorEvent objects.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an Event object that contains information about security error events.
	Event objects are passed as parameters to event listeners.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SecurityErrorEvent/SECURITY_ERROR"><linktext>SECURITY_ERROR</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SecurityErrorEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the SecurityErrorEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new securityErrorEvent object with property values that match those of the original.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the SecurityErrorEvent object and sets the value of each property to match that of the original.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SecurityErrorEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the SecurityErrorEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the SecurityErrorEvent object.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the SecurityErrorEvent object. The string is in the following format:
	<p><codeph>[securityErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i> errorID=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SecurityErrorEvent:SECURITY_ERROR"><apiName>SECURITY_ERROR</apiName><shortdesc>
	The SecurityErrorEvent.SECURITY_ERROR constant defines the value of the type property of a securityError event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>(at)see flash.display.LoaderInfo#event:securityError
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>securityError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>SecurityErrorEvent.SECURITY_ERROR</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>securityError</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The network object reporting the security error.</entry></row><row><entry><codeph>text</codeph></entry><entry>Text to be displayed as an error message.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:securityError"><linktext>flash.net.FileReference.securityError</linktext></link><link href="flash.net.xml#LocalConnection/event:securityError"><linktext>flash.net.LocalConnection.securityError</linktext></link><link href="flash.net.xml#NetConnection/event:securityError"><linktext>flash.net.NetConnection.securityError</linktext></link><link href="flash.net.xml#Socket/event:securityError"><linktext>flash.net.Socket.securityError</linktext></link><link href="flash.net.xml#URLLoader/event:securityError"><linktext>flash.net.URLLoader.securityError</linktext></link><link href="flash.net.xml#URLStream/event:securityError"><linktext>flash.net.URLStream.securityError</linktext></link><link href="flash.net.xml#XMLSocket/event:securityError"><linktext>flash.net.XMLSocket.securityError</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:TextEvent"><apiName>TextEvent</apiName><shortdesc>
 An object dispatches a TextEvent object when a user enters text in a text field or clicks 
 a hyperlink in an HTML-enabled text field.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for TextEvent events.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 An object dispatches a TextEvent object when a user enters text in a text field or clicks 
 a hyperlink in an HTML-enabled text field. There are two types of text events: <codeph>TextEvent.LINK</codeph>
 and <codeph>TextEvent.TEXT_INPUT</codeph>.
 
 </apiDesc><example conref="examples\TextEventExample.as"> The following example uses the TextEventExample class to create text fields and to
 listen for various text events on them.  The example carries out the following tasks:
 <ol>
     <li>The example declares constants for two URLs to be used later.</li>
    <li>The example declares two variables of type TextField to be used later.</li>
     <li>The class constructor calls the following two methods:
     <ul>
       <li><codeph>init()</codeph> initializes the TextField objects and add event listeners to them.</li>
       <li><codeph>draw()</codeph> adds the TextFields to the display list and assigns the text to be displayed.</li>
  </ul></li>
     <li>The listeners <codeph>linkHandler()</codeph> and <codeph>textInputHandler()</codeph> react to the events
     according to their event type. The <codeph>linkHandler()</codeph> method opens a web browser if one is not open already 
     and navigates to the clicked URL. The <codeph>textInputHandler()</codeph> method simply displays information every time
     a key is pressed in the associated text field.</li>
 </ol>
 
 <p><b>Note: </b>The domain shown in this example is fictitious and <codeph>[yourDomain]</codeph>
 should be replaced with a real domain.</p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;
    import flash.events.TextEvent;
    import flash.net.URLRequest;
    import flash.net.navigateToURL;
    
    public class TextEventExample extends Sprite {
        private const DOMAIN_1_URL:String = "http://www.[yourDomain].com";
        private const DOMAIN_2_URL:String = "http://www.[yourDomain].com";
        private var linkTxt:TextField;
        private var textInputTxt:TextField;
        
        public function TextEventExample() {
            init();
            draw();
        }
        
        private function init():void {
            linkTxt = new TextField();
            linkTxt.addEventListener(TextEvent.LINK, linkHandler);
            linkTxt.height = 60;
            linkTxt.autoSize = TextFieldAutoSize.LEFT;            
            linkTxt.multiline = true;
                
            textInputTxt = new TextField();
            textInputTxt.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);
            textInputTxt.type = TextFieldType.INPUT;
            textInputTxt.background = true;
            textInputTxt.border = true;
            textInputTxt.height = 20;            
        }
        
        private function draw():void {
            addChild(linkTxt);
            linkTxt.htmlText += createLink(DOMAIN_1_URL, "Click to go to first domain");
            linkTxt.htmlText += "&lt;br /&gt;";
            linkTxt.htmlText += createLink(DOMAIN_2_URL, "Click to go to second domain");

            addChild(textInputTxt);
            textInputTxt.y = linkTxt.height;
            textInputTxt.text = "type here";
        }
        
        private function createLink(url:String, text:String):String {
            var link:String = "";
            link += "&lt;font color='#0000FF'&gt;";
            link += "&lt;u&gt;";
            link += "&lt;b&gt;";
            link += "&lt;a href='event:" + url + "'&gt;" + text + "&lt;/a&gt;";
            link += "&lt;/b&gt;";
            link += "&lt;/u&gt;";
            link += "&lt;/font&gt;";
            return link;
        }
        
        private function linkHandler(e:TextEvent):void {
            var request:URLRequest = new URLRequest(e.text);
            navigateToURL(request);
        }
        
        private function textInputHandler(e:TextEvent):void {
            trace("&gt;&gt; ============================");
            trace("&gt;&gt; e.text: " + e.text);
            trace("&gt;&gt; textInputTxt.text: " + textInputTxt.text);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links><adobeApiEvent id="flash.events:TextEvent:LINK_link"><apiName>link</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:LINK</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_LINKExample.as"> In this example, when a user clicks a hyperlink in HTML text, it triggers a text event.
 Depending on the link, the user is sent to a designated website based on the
 system's operating system, or a circle is drawn based on the user's selected radius. 
   
 <p>A text field is created and its content is set to an HTML-formatted string by 
 using the <codeph>htmlText</codeph> property. The links are underlined for
 easier identification by the user. (Adobe Flash Player changes the mouse 
 pointer only after the pointer is over the link.) To make sure that the user's click
 invokes an ActionScript method, the URL of the link begins with the <codeph>"event:"</codeph> string
 and a listener is added for the <codeph>TextEvent.LINK</codeph> event.</p> 
 
 <p>The <codeph>linkHandler()</codeph> method that is triggered after the user clicks a
 link manages all the link events for the text field. The first if statement checks the 
 <codeph>text</codeph> property of the event, which holds the remainder of the URL after the 
 <codeph>"event:"</codeph> string. If the user clicked the link for the operating system, the 
 name of the user's current operating system, taken from the system's <codeph>Capabilities.os</codeph> 
 property, is used to send the user to the designated website. Otherwise, the selected radius 
 size, passed by the event's <codeph>text</codeph> property, is used to draw a circle below the text 
 field. Each time the user clicks the radius link, the previously drawn circle is cleared and a new
 red circle with the selected radius size is drawn.</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u&gt;&lt;a href=\"event:20\"&gt;20 pixels&lt;/a&gt;&lt;/u&gt;.&lt;br&gt;" 
                         +  "Draw a circle with the radius of &lt;u&gt;&lt;a href=\"event:50\"&gt;50 pixels&lt;/a&gt;&lt;/u&gt;.&lt;br&gt;&lt;br&gt;"
                         +  "&lt;u&gt;&lt;a href=\"event:os\"&gt;Learn about your operating system.&lt;/a&gt;&lt;/u&gt;&lt;br&gt;";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:TextEvent:TEXT_INPUT_textInput"><apiName>textInput</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:TextEvent:TEXT_INPUT</apiEventType><adobeApiEventClassifier>flash.events:TextEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef><example conref="examples\TextEvent_TEXT_INPUTExample.as"> The following example guides the user in generating a special combination
 key (similar to a password). This combination key has seven alphanumeric 
 characters, where the second and fifth characters are numeric.
 
 <p>Three text fields for the preliminary instructions, the user input, and the
 warning (error) messages are created. An event listener is added to respond to 
 the user's text input by triggering the <codeph>textInputHandler()</codeph> method.
 (Every time the user enters text, a <codeph>TextEvent.TEXT_INPUT</codeph> event is
 dispatched. </p>
 <p><b>Note:</b> The text events are dispatched when a user enters characters
 and not as a response to any keyboard input, such as backspace. To catch all 
 keyboard events, use a listener for the <codeph>KeyboardEvent</codeph> event.)</p>
 
 <p>The <codeph>textInputHandler()</codeph> method controls and manages the user
 input. The <codeph>preventDefault()</codeph> method is used to prevent Adobe Flash Player 
 from immediately displaying the text in the input text field. The application is  
 responsible for updating the field. To undo the user's deletion or modification
 to the characters already entered (the <codeph>result</codeph> string), the content of the 
 input text field is reassigned to the <codeph>result</codeph> string when a user enters
 new characters. Also, to produce a consistent user experience, the <codeph>setSelection()</codeph> 
 method places the insertion point (a caret) after the last selected character in the text field.</p>
 
 <p>The first if statement in the <codeph>textInputHandler()</codeph> method checks 
 the input for the second and fifth character positions of the combination key, 
 which must be numbers. If the user input is correct, the <codeph>updateCombination()</codeph> 
 method is called and the (<codeph>result</codeph>) combination key string is appended 
 with the user input. The <codeph>updateCombination()</codeph> method also moves the insertion 
 point after the selected character. After the seven characters are entered, 
 the last if statement in the <codeph>textInputHandler()</codeph> method changes type of the 
 <codeph>inputTextField</codeph> text field from <codeph>INPUT</codeph> to <codeph>DYNAMIC</codeph>, 
 which means that the user can no longer enter or change any characters.</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:TextEvent:TextEvent"><apiName>TextEvent</apiName><shortdesc>
	 Creates an Event object that contains information about text events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. Possible values are:
	 <codeph>TextEvent.LINK</codeph> and <codeph>TextEvent.TEXT_INPUT</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling phase of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.  
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property. 
	 </apiDesc></apiParam><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>One or more characters of text entered by the user. Event listeners can access this information through the <codeph>text</codeph> property.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for TextEvent objects.
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Creates an Event object that contains information about text events.
	 Event objects are passed as parameters to event listeners.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.xml#TextField"><linktext>flash.text.TextField</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:TextEvent:clone"><apiName>clone</apiName><shortdesc>
	 Creates a copy of the TextEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new TextEvent object with property values that match those of the original.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Creates a copy of the TextEvent object and sets the value of each property to match that of the original. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:TextEvent:toString"><apiName>toString</apiName><shortdesc>
	 Returns a string that contains all the properties of the TextEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the TextEvent object.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Returns a string that contains all the properties of the TextEvent object. The string is in the following format:
	 <p><codeph>[TextEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> text=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:TextEvent:LINK"><apiName>LINK</apiName><shortdesc>
     Defines the value of the type property of a link event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>link</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Defines the value of the <codeph>type</codeph> property of a <codeph>link</codeph> event object.
	 
	 <p>This event has the following properties:</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The text field containing the hyperlink that has been clicked. 
  	 The <codeph>target</codeph> is not always the object in the display list 
	 that registered the event listener. Use the <codeph>currentTarget</codeph> 
	 property to access the object in the display list that is currently processing the event.</entry></row><row><entry><codeph>text</codeph></entry><entry>The remainder of the URL after "event:"</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_LINKExample.as"> In this example, when a user clicks a hyperlink in HTML text, it triggers a text event.
 Depending on the link, the user is sent to a designated website based on the
 system's operating system, or a circle is drawn based on the user's selected radius. 
   
 <p>A text field is created and its content is set to an HTML-formatted string by 
 using the <codeph>htmlText</codeph> property. The links are underlined for
 easier identification by the user. (Adobe Flash Player changes the mouse 
 pointer only after the pointer is over the link.) To make sure that the user's click
 invokes an ActionScript method, the URL of the link begins with the <codeph>"event:"</codeph> string
 and a listener is added for the <codeph>TextEvent.LINK</codeph> event.</p> 
 
 <p>The <codeph>linkHandler()</codeph> method that is triggered after the user clicks a
 link manages all the link events for the text field. The first if statement checks the 
 <codeph>text</codeph> property of the event, which holds the remainder of the URL after the 
 <codeph>"event:"</codeph> string. If the user clicked the link for the operating system, the 
 name of the user's current operating system, taken from the system's <codeph>Capabilities.os</codeph> 
 property, is used to send the user to the designated website. Otherwise, the selected radius 
 size, passed by the event's <codeph>text</codeph> property, is used to draw a circle below the text 
 field. Each time the user clicks the radius link, the previously drawn circle is cleared and a new
 red circle with the selected radius size is drawn.</p> 
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.TextEvent;
    import flash.errors.IOError;
    import flash.events.IOErrorEvent;
    import flash.system.Capabilities;
    import flash.net.navigateToURL;
    import flash.net.URLRequest;
    import flash.text.TextField;
    import flash.text.TextFieldAutoSize;
    import flash.display.Shape;
    import flash.display.Graphics;

    public class TextEvent_LINKExample extends Sprite {
        private  var myCircle:Shape = new Shape();
        
        public function TextEvent_LINKExample() {
            var myTextField:TextField = new TextField();
            myTextField.autoSize = TextFieldAutoSize.LEFT;
            myTextField.multiline = true;
            myTextField.background = true;
            myTextField.htmlText = "Draw a circle with the radius of &lt;u&gt;&lt;a href=\"event:20\"&gt;20 pixels&lt;/a&gt;&lt;/u&gt;.&lt;br&gt;" 
                         +  "Draw a circle with the radius of &lt;u&gt;&lt;a href=\"event:50\"&gt;50 pixels&lt;/a&gt;&lt;/u&gt;.&lt;br&gt;&lt;br&gt;"
                         +  "&lt;u&gt;&lt;a href=\"event:os\"&gt;Learn about your operating system.&lt;/a&gt;&lt;/u&gt;&lt;br&gt;";

            myTextField.addEventListener(TextEvent.LINK, linkHandler);

            this.addChild(myTextField);
            this.addChild(myCircle);
        }
        
        private function linkHandler(e:TextEvent):void {
            var osString:String = Capabilities.os;
            
            if(e.text == "os") {
       
                if (osString.search(/Windows/) != -1 ){
                    navigateToURL(new URLRequest("http://www.microsoft.com/"), "_self");
                }else if (osString.search(/Mac/) != -1 ) {
                    navigateToURL(new URLRequest("http://www.apple.com/"), "_self");
                } else if (osString.search(/linux/i)!= -1) {
                    navigateToURL(new URLRequest("http://www.tldp.org/"), "_self");
                }
            
            } else {
                myCircle.graphics.clear();    
                myCircle.graphics.beginFill(0xFF0000);
                myCircle.graphics.drawCircle(100, 150, Number(e.text));
                myCircle.graphics.endFill();
            }             
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link><link href="flash.text.xml#TextField/event:link"><linktext>flash.text.TextField.link</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:TEXT_INPUT"><apiName>TEXT_INPUT</apiName><shortdesc>
     Defines the value of the type property of a textInput event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>textInput</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Defines the value of the <codeph>type</codeph> property of a <codeph>textInput</codeph> event object.
     <p><b>Note:</b> This event is not dispatched for the Delete or Backspace keys.</p>     
	 <p>This event has the following properties:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; call the <codeph>preventDefault()</codeph> method 
	 to cancel default behavior.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The text field into which characters are being entered. 
	 The target is not always the object in the display list 
	 that registered the event listener. Use the <codeph>currentTarget</codeph> 
	 property to access the object in the display list that is currently processing the event.</entry></row><row><entry><codeph>text</codeph></entry><entry>The character or sequence of characters entered by the user.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextEvent_TEXT_INPUTExample.as"> The following example guides the user in generating a special combination
 key (similar to a password). This combination key has seven alphanumeric 
 characters, where the second and fifth characters are numeric.
 
 <p>Three text fields for the preliminary instructions, the user input, and the
 warning (error) messages are created. An event listener is added to respond to 
 the user's text input by triggering the <codeph>textInputHandler()</codeph> method.
 (Every time the user enters text, a <codeph>TextEvent.TEXT_INPUT</codeph> event is
 dispatched. </p>
 <p><b>Note:</b> The text events are dispatched when a user enters characters
 and not as a response to any keyboard input, such as backspace. To catch all 
 keyboard events, use a listener for the <codeph>KeyboardEvent</codeph> event.)</p>
 
 <p>The <codeph>textInputHandler()</codeph> method controls and manages the user
 input. The <codeph>preventDefault()</codeph> method is used to prevent Adobe Flash Player 
 from immediately displaying the text in the input text field. The application is  
 responsible for updating the field. To undo the user's deletion or modification
 to the characters already entered (the <codeph>result</codeph> string), the content of the 
 input text field is reassigned to the <codeph>result</codeph> string when a user enters
 new characters. Also, to produce a consistent user experience, the <codeph>setSelection()</codeph> 
 method places the insertion point (a caret) after the last selected character in the text field.</p>
 
 <p>The first if statement in the <codeph>textInputHandler()</codeph> method checks 
 the input for the second and fifth character positions of the combination key, 
 which must be numbers. If the user input is correct, the <codeph>updateCombination()</codeph> 
 method is called and the (<codeph>result</codeph>) combination key string is appended 
 with the user input. The <codeph>updateCombination()</codeph> method also moves the insertion 
 point after the selected character. After the seven characters are entered, 
 the last if statement in the <codeph>textInputHandler()</codeph> method changes type of the 
 <codeph>inputTextField</codeph> text field from <codeph>INPUT</codeph> to <codeph>DYNAMIC</codeph>, 
 which means that the user can no longer enter or change any characters.</p>
  
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.TextField;
    import flash.text.TextFieldType;
    import flash.text.TextFieldAutoSize;
    import flash.events.TextEvent;

    public class TextEvent_TEXT_INPUTExample extends Sprite {
        private var instructionTextField:TextField = new TextField();
        private var inputTextField:TextField = new TextField(); 
        private var warningTextField:TextField = new TextField();
        private var result:String = "";

        public function TextEvent_TEXT_INPUTExample() {
            instructionTextField.x = 10;
            instructionTextField.y = 10;
            instructionTextField.background = true; 
            instructionTextField.autoSize = TextFieldAutoSize.LEFT;
            instructionTextField.text = "Please enter a value in the format A#AA#AA,\n" 
                                        + "where 'A' represents a letter and '#' represents a number.\n" +
                                        "(Note that once you input a character you can't change it.)" ;
        
            inputTextField.x = 10;
            inputTextField.y = 70;
            inputTextField.height = 20;
            inputTextField.width = 75;
            inputTextField.background = true;
            inputTextField.border = true;
            inputTextField.type = TextFieldType.INPUT; 
            
            warningTextField.x = 10;
            warningTextField.y = 100;
            warningTextField.autoSize = TextFieldAutoSize.LEFT;
 
            inputTextField.addEventListener(TextEvent.TEXT_INPUT, textInputHandler);   
           
            this.addChild(instructionTextField);
            this.addChild(inputTextField);
            this.addChild(warningTextField);
        }

        private function textInputHandler(event:TextEvent):void {
            var charExp:RegExp = /[a-zA-z]/;   
            var numExp:RegExp = /[0-9]/;

            event.preventDefault();  
            
            inputTextField.text = result;                
            inputTextField.setSelection(result.length + 1, result.length + 1);
 
            if (inputTextField.text.length == 1 || inputTextField.text.length == 4) {
            
                if(numExp.test(event.text) == true) {
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need a single digit number.";
                }
               
            }else {
                
                if(charExp.test(event.text) == true) { 
                    updateCombination(event.text);
                } else {
                    warningTextField.text = "You need an alphabet character.";
                }
            }
 
            if(inputTextField.text.length == 7) {
                inputTextField.type = TextFieldType.DYNAMIC;
                instructionTextField.text = "CONGRATULATIONS. You've done.";                
            }          
        }

        private function updateCombination(s:String):void {
                    warningTextField.text = "";
                    result += s;           
                    inputTextField.text = result;
                    inputTextField.setSelection(result.length + 1, result.length + 1);
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:textInput"><linktext>flash.text.TextField.textInput</linktext></link><link href="flash.events.xml#TextEvent/text"><linktext>text</linktext></link></related-links></apiValue><apiValue id="flash.events:TextEvent:text:get"><apiName>text</apiName><shortdesc>
	 For a textInput event, the character or sequence of characters 
	 entered by the user.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 For a <codeph>textInput</codeph> event, the character or sequence of characters 
	 entered by the user. For a <codeph>link</codeph> event, the text 
	 of the <codeph>event</codeph> attribute of the <codeph>href</codeph> attribute of the 
	 <codeph>&lt;a&gt;</codeph> tag.
	 
	 </apiDesc><example>The following code shows that the <codeph>link</codeph> event is dispatched when 
	 a user clicks the hypertext link:
	 
	<codeblock>
	import flash.text.TextField;
	import flash.events.TextEvent;			
	
	var tf:TextField = new TextField();
	tf.htmlText = "&lt;a href='event:myEvent'&gt;Click Me.&lt;/a&gt;";
	tf.addEventListener("link", clickHandler);
	addChild(tf);
	
	function clickHandler(e:TextEvent):void {
		trace(e.type); // link
		trace(e.text); // myEvent
	}
	</codeblock>
	 
	 </example></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:Event"><apiName>Event</apiName><shortdesc>
 The Event class is used as the base class for the creation of Event objects,
 which are passed as parameters to event listeners when an event occurs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event object base class.
 </apiTipText></apiTipTexts><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The Event class is used as the base class for the creation of Event objects,
 which are passed as parameters to event listeners when an event occurs.
 
 <p>The properties of the Event class carry basic information about an event, such as 
 the event's type or whether the event's default behavior can be canceled. For many
 events, such as the events represented by the Event class constants, this basic information
 is sufficient. Other events, however, may require more detailed information. <ph platform="actionscript">Events associated
 with a mouse click, for example, need to include additional information about the location of 
 the click event and whether any keys were pressed during the click event.  You can pass such additional 
 information to event listeners by extending the Event class, which is what
 the MouseEvent class does. ActionScript 3.0</ph><ph platform="javascript">The Adobe<sup>®</sup> 
 AIR™</ph> API defines several Event subclasses for common
 events that require additional information. Events associated with each of the Event
 subclasses are described in the documentation for each class.</p>
 
 <p>The methods of the Event class can be used in event listener functions to affect the
 behavior of the event object. Some events have an associated default behavior.<ph platform="actionscript"> For example,
 the <codeph>doubleClick</codeph> event has an associated default behavior that highlights
 the word under the mouse pointer at the time of the event.</ph>
 <ph platform="javascript">For example, the <codeph>closing</codeph> event dispatched by a NativeWindow object 
 has an associated default behavior that closes the window.</ph> Your event listener can cancel this 
 behavior by calling the <codeph>preventDefault()</codeph> method. 
 <ph platform="actionscript">You can also make the current
 event listener the last one to process an event by calling the <codeph>stopPropagation()</codeph>
 or <codeph>stopImmediatePropagation()</codeph> method.</ph></p>
 
 <p platform="javascript"><b>Note:</b> Some of the constants in this class are used to define the <codeph>type</codeph> 
 property for events that are dispatched by ActionScript 3.0 display list, used in SWF content. However, some
 constants in this class are used to define the <codeph>type</codeph> property for events that are <i>not</i>
 related to the ActionScript 3.0 display list and are useful in JavaScript code running in the AIR runtime.</p>
 
 </apiDesc><example conref="examples\EventExample.as"> The following example uses the <codeph>EventExample</codeph> class and the
 <codeph>Square</codeph> custom class to demonstrate how to manage event bubbling.
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;
    import flash.events.MouseEvent;

    public class EventExample extends Sprite {
        
        public function EventExample() {
            var square_0:Square = new Square(300, 0x336633);
            addChild(square_0);
            
            var square_1:Square = new Square(250, 0x669966);
            square_0.addChild(square_1);

            var square_2:Square = new Square(200, 0x66CC66);
            square_1.addChild(square_2);

            var square_3:Square = new Square(150, 0xAA0000);
            square_3.shouldBubble = false;
            square_2.addChild(square_3);

            var square_4:Square = new Square(100, 0x66FF66);
            square_3.addChild(square_4);

            var square_5:Square = new Square(50, 0xCC0000);
            square_5.shouldBubble = false;
            square_4.addChild(square_5);

            this.addEventListener(MouseEvent.CLICK, clickHandler);
        }
        
        private function clickHandler(e:Event):void {
            trace("&gt;&gt; stage: " + e.type + " event from " + e.target.name + " called on " + this.name);
            trace("&gt;&gt; --------------------------------------------");
        }
    }
}

import flash.display.Sprite;
import flash.events.Event;
import flash.events.MouseEvent;

class Square extends Sprite {
    private var sideLen:int;
    private var color:Number;
    public var shouldBubble:Boolean = true;

    public function Square(sideLen:int, color:Number) {
        this.sideLen = sideLen;
        this.color = color;
        init();
        draw();
    }
        
    private function init():void {
        buttonMode = true;
        this.addEventListener(MouseEvent.CLICK, firstClickHandler);
        this.addEventListener(MouseEvent.CLICK, secondClickHandler);
        this.addEventListener(MouseEvent.CLICK, thirdClickHandler);
    }
        
    private function draw():void {
        this.graphics.beginFill(color);
        this.graphics.drawRect(0, 0, sideLen, sideLen);
    }
        
    private function firstClickHandler(e:Event):void {
        trace("&gt;&gt; 1e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopPropagation();
        }
    }

    private function secondClickHandler(e:Event):void {
        trace("&gt;&gt; 2e: " + e.type + " event from " + e.target.name + " called on " + this.name);
        if(!shouldBubble) {
            e.stopImmediatePropagation();
            trace("&gt;&gt; --------------------------------------------");
        }
    }

    private function thirdClickHandler(e:Event):void {
        trace("&gt;&gt; 3e: " + e.type + " event from " + e.target.name + " called on " + this.name);
    }
}
</codeblock></example><example conref="examples\EventExample2.as"> The following example creates an interactive demonstration of 
 the difference between <codeph>ADDED</codeph> and <codeph>ADDED_TO_STAGE</codeph> events,
 as well as the difference between <codeph>REMOVED</codeph> and <codeph>REMOVED_FROM_STAGE</codeph>
 events. Clicking a sprite will remove it from the stage as well as everything nested within it.
 For example, clicking the largest sprite will cause a <codeph>REMOVED</codeph> event
 as well as three <codeph>REMOVED_FROM_STAGE</codeph> events to fire.
<codeblock>
 package {
    import flash.display.Sprite;
    import flash.events.*;

    public class EventExample2 extends Sprite {
        public function EventExample2():void {
            var parentSprite:Sprite = createSprite("parentSprite",200);
            var childSprite:Sprite = createSprite("childSprite",100);
            var childOfChildSprite:Sprite = createSprite("childOfChildSprite",50);
            
            trace(":: Adding to Stage ::");
            this.addChild(parentSprite);
            trace(":: Adding to Stage ::");
            parentSprite.addChild(childSprite);
            trace(":: Adding to Stage ::");
            childSprite.addChild(childOfChildSprite);
        }
        private function createSprite(name:String,size:uint):Sprite {
            trace(":: Creating Sprite ::");
            var newSprite:Sprite = new Sprite();
            newSprite.name = name;
            newSprite.graphics.beginFill(0xFFFFFF * Math.random(),1);
            newSprite.graphics.drawRect(0,0,size,size);
            newSprite.graphics.endFill();
            newSprite.addEventListener(Event.ADDED, spriteAdded);
            newSprite.addEventListener(Event.ADDED_TO_STAGE, spriteAddedToStage);
            newSprite.addEventListener(Event.REMOVED, spriteRemoved);
            newSprite.addEventListener(Event.REMOVED_FROM_STAGE, spriteRemovedFromStage);
            newSprite.addEventListener(MouseEvent.CLICK, remove);
            return newSprite;
        }
        private function remove(event:Event) {
            if(event.target == event.currentTarget) {
                trace(":: Removing Clicked Sprite ::");
                var target:Sprite = Sprite(event.target);
                target.parent.removeChild(target);
            }
        }
        private function spriteRemovedFromStage(event:Event):void {
            trace("REMOVED_FROM_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteRemoved(event:Event):void {
            trace("REMOVED: " + event.target.name + " from " + event.currentTarget.name);
        }
        private function spriteAddedToStage(event:Event):void {
            trace("ADDED_TO_STAGE: " + event.target.name + " : " + event.currentTarget.name);
        }
        private function spriteAdded(event:Event):void {
            trace("ADDED: " + event.target.name + " within " + event.currentTarget.name);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link></related-links><adobeApiEvent id="flash.events:Event:ACTIVATE_activate"><apiName>activate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_added"><apiName>added</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ADDED_TO_STAGE_addedToStage"><apiName>addedToStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ADDED_TO_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CANCEL_cancel"><apiName>cancel</apiName><prolog><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CHANGE_change"><apiName>change</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLEAR_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLEAR</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CLOSING_closing"><apiName>closing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CLOSING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COMPLETE_complete"><apiName>complete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CONNECT_connect"><apiName>connect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CONNECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:COPY_copy"><apiName>copy</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:COPY</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:CUT_cut"><apiName>cut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:CUT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DEACTIVATE_deactivate"><apiName>deactivate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:DISPLAYING_displaying"><apiName>displaying</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:DISPLAYING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ENTER_FRAME_enterFrame"><apiName>enterFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ENTER_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXITING_exiting"><apiName>exiting</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXITING</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:EXIT_FRAME_exitFrame"><apiName>exitFrame</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:EXIT_FRAME</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FRAME_CONSTRUCTED_frameConstructed"><apiName>frameConstructed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FRAME_CONSTRUCTED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:FULLSCREEN_fullScreen"><apiName>fullScreen</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:FULLSCREEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_BOUNDS_CHANGE_htmlBoundsChange"><apiName>htmlBoundsChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_BOUNDS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>htmlBoundsChange event</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_DOM_INITIALIZE_htmlDOMInitialize"><apiName>htmlDOMInitialize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>htmlDOMInitialize event</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:HTML_RENDER_htmlRender"><apiName>htmlRender</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:HTML_RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>htmlRender event</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:ID3_id3"><apiName>id3</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:ID3</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:INIT_init"><apiName>init</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:INIT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:LOCATION_CHANGE_locationChange"><apiName>locationChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:LOCATION_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>locationChange event</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:MOUSE_LEAVE_mouseLeave"><apiName>mouseLeave</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:MOUSE_LEAVE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:NETWORK_CHANGE_networkChange"><apiName>networkChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:NETWORK_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:OPEN</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:PASTE_paste"><apiName>paste</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:PASTE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_removed"><apiName>removed</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:REMOVED_FROM_STAGE_removedFromStage"><apiName>removedFromStage</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:REMOVED_FROM_STAGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RENDER_render"><apiName>render</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RENDER</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SCROLL_scroll"><apiName>scroll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SCROLL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_select"><apiName>select</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SELECT_ALL_selectAll"><apiName>selectAll</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SELECT_ALL</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:SOUND_COMPLETE_soundComplete"><apiName>soundComplete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:SOUND_COMPLETE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_CHILDREN_CHANGE_tabChildrenChange"><apiName>tabChildrenChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_CHILDREN_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_ENABLED_CHANGE_tabEnabledChange"><apiName>tabEnabledChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_ENABLED_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:TAB_INDEX_CHANGE_tabIndexChange"><apiName>tabIndexChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:TAB_INDEX_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:UNLOAD_unload"><apiName>unload</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:UNLOAD</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_IDLE_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_IDLE</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:Event:USER_PRESENT_userIdle"><apiName>userIdle</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:Event:USER_PRESENT</apiEventType><adobeApiEventClassifier>flash.events:Event</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:Event:Event"><apiName>Event</apiName><shortdesc>
     Creates an Event object to pass as a parameter to event listeners.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event, accessible as <codeph>Event.type</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Determines whether the Event object participates in the bubbling stage of the event flow. The default value is <codeph>false</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. The default values is <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Used to create new Event object.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Creates an Event object to pass as a parameter to event listeners.
     
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:Event:clone"><apiName>clone</apiName><shortdesc>
	 Duplicates an instance of an Event subclass.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A new Event object that is identical to the original.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Duplicates an instance of an Event subclass.
	 
     <p>Returns a new Event object that is a copy of the original instance of the Event object. 
	 You do not normally call <codeph>clone()</codeph>; the EventDispatcher class calls it automatically
	 when you redispatch an event—that is, when you call <codeph>dispatchEvent(event)</codeph> from a handler
	 that is handling <codeph>event</codeph>.</p>
	 
	 <p>The new Event object includes all the properties of the original.</p> 
	 
	 <p platform="actionscript">When creating your own custom Event class, you must override the 
	 inherited <codeph>Event.clone()</codeph> method in order for it to duplicate the 
	 properties of your custom class. If you do not set all the properties that you add 
	 in your event subclass, those properties will not have the correct values when listeners 
	 handle the redispatched event.</p>
	 
	 <p platform="actionscript">In this example, <codeph>PingEvent</codeph> is a subclass of <codeph>Event</codeph>
	 and therefore implements its own version of <codeph>clone()</codeph>.</p>
	 
	 <codeblock platform="actionscript">
	 class PingEvent extends Event {
		 var URL:String;
		 
	 public override function clone():Event {
	 	     return new PingEvent(type, bubbles, cancelable, URL);
	    }
	 }
	 </codeblock>
	 
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:formatToString"><apiName>formatToString</apiName><shortdesc>
	 A utility function for implementing the toString() method in custom 
	 ActionScript 3.0 Event classes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The name of your custom Event class and the String value of your <codeph>...arguments</codeph>
	 parameter.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>className</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The name of your custom Event class. <ph platform="actionscript">In the previous example, 
	 the <codeph>className</codeph> parameter is <codeph>PingEvent</codeph>.</ph>
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiType value="restParam"/><apiDesc>The properties of the Event class<ph platform="actionscript"> and the 
	 properties that you add in your custom Event class. In the previous example, the <codeph>...arguments</codeph> 
	 parameter includes <codeph>type</codeph>, <codeph>bubbles</codeph>, <codeph>cancelable</codeph>, 
	 <codeph>eventPhase</codeph>, and <codeph>URL</codeph></ph>.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 A utility function for implementing the <codeph>toString()</codeph> method in custom 
	 ActionScript 3.0 Event classes. <ph platform="actionscript">Overriding the 
	 <codeph>toString()</codeph> method is recommended, but not required.</ph>
	 
	 <pre platform="actionscript">
	 class PingEvent extends Event {
	  var URL:String;
	 
	 public override function toString():String { 
	  return formatToString("PingEvent", "type", "bubbles", "cancelable", "eventPhase", "URL"); 
	    }
	 }
	 </pre>
	 
	 <p platform="javascript">This method is used in creating ActionScript 3.0 classes 
	 to be used in SWF content.</p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:Event:isDefaultPrevented"><apiName>isDefaultPrevented</apiName><shortdesc>
	Checks whether the preventDefault() method has been called on the event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>If <codeph>preventDefault()</codeph> has been called, returns <codeph>true</codeph>; otherwise,
	returns <codeph>false</codeph>.
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Checks whether the <codeph>preventDefault()</codeph> method has been called on the event. If the
	<codeph>preventDefault()</codeph> method has been called,
	returns <codeph>true</codeph>; otherwise, returns <codeph>false</codeph>.
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:preventDefault"><apiName>preventDefault</apiName><shortdesc>
	Cancels an event's default behavior if that behavior can be canceled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Cancels an event's default behavior if that behavior can be canceled.
	
	<p>Many events have associated behaviors that are carried out by default. 
	<ph platform="actionscript">For example, if a user types a character 
	into a text field, the default behavior is that the character is 
	displayed in the text field. Because the <codeph>TextEvent.TEXT_INPUT</codeph> 
	event's default behavior can be canceled, you can use the <codeph>preventDefault()</codeph> 
	method to prevent the character from appearing.</ph>
	<ph platform="javascript">For example, if a user clicks the close box of a window, 
	the default behavior is that the window closes. Because the <codeph>closing</codeph> 
	event's default behavior can be canceled, you can use the <codeph>preventDefault()</codeph> 
	method to prevent the window from closing.</ph>
	</p>
	
    <p platform="actionscript">An example of a behavior that is not cancelable is the default behavior associated with 
	the <codeph>Event.REMOVED</codeph> event, which is generated whenever Flash Player is about to
	remove a display object from the display list. The default behavior (removing the element)
	cannot be canceled, so the <codeph>preventDefault()</codeph> method has no effect on this
	default behavior. </p>
	
	<p>You can use the <codeph>Event.cancelable</codeph> property to check whether you can prevent 
	the default behavior associated with a particular event. If the value of 
	<codeph>Event.cancelable</codeph> is <codeph>true</codeph>, then <codeph>preventDefault()</codeph> can 
	be used to cancel the event; otherwise, <codeph>preventDefault()</codeph> has no effect.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/isDefaultPrevented()"><linktext>flash.events.Event.isDefaultPrevented()</linktext></link><link href="flash.events.xml#Event/cancelable"><linktext>Event.cancelable</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopImmediatePropagation"><apiName>stopImmediatePropagation</apiName><shortdesc>
	Prevents processing of any event listeners in the current node and any subsequent nodes in 
	the event flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Prevents processing of any event listeners in the current node and any subsequent nodes in 
	the event flow. <ph platform="actionscript">This method takes effect immediately, and it affects event listeners 
	in the current node. In contrast, the <codeph>stopPropagation()</codeph> method doesn't take 
	effect until all the event listeners in the current node finish processing.</ph>
	
	<p platform="actionscript"><b>Note: </b> This method does not cancel the behavior associated with this event; see <codeph>preventDefault()</codeph> for that functionality.</p>
	
	<p platform="javascript">The event flow is defined for display objects in SWF content, which use
	the ActionScript 3.0 display object model.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopPropagation()"><linktext>flash.events.Event.stopPropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:stopPropagation"><apiName>stopPropagation</apiName><shortdesc>
	Prevents processing of any event listeners in nodes subsequent to the current node in the 
	event flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	Prevents processing of any event listeners in nodes subsequent to the current node in the 
	event flow. <ph platform="actionscript">This method does not affect any event listeners in the current node 
	(<codeph>currentTarget</codeph>). In contrast, the <codeph>stopImmediatePropagation()</codeph> method 
	prevents processing of event listeners in both the current node and subsequent nodes. 
	Additional calls to this method have no effect. This method can be called in any phase 
	of the event flow.</ph>
	
	<p platform="actionscript"><b>Note: </b> This method does not cancel the behavior associated with this event; see <codeph>preventDefault()</codeph> for that functionality.</p>
	
	<p platform="javascript">The event flow is defined for display objects in SWF content, which use
	the ActionScript 3.0 display object model.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#Event/stopImmediatePropagation()"><linktext>flash.events.Event.stopImmediatePropagation()</linktext></link><link href="flash.events.xml#Event/preventDefault()"><linktext>flash.events.Event.preventDefault()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:Event:toString"><apiName>toString</apiName><shortdesc>
	Returns a string containing all the properties of the Event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A string containing all the properties of the Event object.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string containing all the properties of the Event object. The string is in the following format:
	<p><codeph>[Event type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:Event:ACTIVATE"><apiName>ACTIVATE</apiName><shortdesc>
	The ACTIVATE constant defines the value of the type property of an activate event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>ACTIVATE</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>activate</codeph> event object. 
	<p><b>Note:</b> This event has neither a "capture phase" nor a "bubble phase",
	which means that event listeners must be added directly to any potential targets, 
	whether the target is on the display list or not.</p>
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any DisplayObject instance with a listener registered for the <codeph>activate</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:activate"><linktext>flash.events.EventDispatcher.activate</linktext></link><link href="flash.events.xml#Event/DEACTIVATE"><linktext>DEACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED"><apiName>ADDED</apiName><shortdesc>
	The Event.ADDED constant defines the value of the type property of 
	an added event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>added</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.ADDED</codeph> constant defines the value of the <codeph>type</codeph> property of 
	an <codeph>added</codeph> event object. 
	
	<p platform="javascript">The <codeph>added</codeph> event applies to the ActionScript 3.0 display list
	and is not relevant to JavaScript code.</p>
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The DisplayObject instance being added to the display list.
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:added"><linktext>flash.display.DisplayObject.added</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ADDED_TO_STAGE"><apiName>ADDED_TO_STAGE</apiName><shortdesc>
	The Event.ADDED_TO_STAGE constant defines the value of the type 
	property of an addedToStage event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>addedToStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.ADDED_TO_STAGE</codeph> constant defines the value of the <codeph>type</codeph> 
	property of an <codeph>addedToStage</codeph> event object. 
	
	<p platform="javascript">The <codeph>addedToStage</codeph> event applies to the ActionScript 3.0 display list
	and is not relevant to JavaScript code.</p>
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The DisplayObject instance being added to the on stage display list,
	either directly or through the addition of a sub tree in which the DisplayObject instance is contained.
	If the DisplayObject instance is being directly added, the <codeph>added</codeph> event occurs before this event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:addedToStage"><linktext>flash.display.DisplayObject.addedToStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CANCEL"><apiName>CANCEL</apiName><shortdesc>
	The Event.CANCEL constant defines the value of the type property of a cancel event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal><code>ProductManager</code> pulled from table 
	</internal></asCustoms></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.CANCEL</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>cancel</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>A reference to the object on which the operation is canceled.</entry></row></tbody></tgroup></adobetable>
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:cancel"><linktext>flash.net.FileReference.cancel</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CHANGE"><apiName>CHANGE</apiName><shortdesc>
	The Event.CHANGE constant defines the value of the type property of a change event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>change</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.CHANGE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>change</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object that has had its value modified. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:change"><linktext>flash.text.TextField.change</linktext></link><link href="flash.events.xml#TextEvent/TEXT_INPUT"><linktext>flash.events.TextEvent.TEXT_INPUT</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLEAR"><apiName>CLEAR</apiName><shortdesc>
	The Event.CLEAR constant efines the value of the type property 
	of a clear event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>clear</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.CLEAR</codeph> constant efines the value of the <codeph>type</codeph> property 
	of a <codeph>clear</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any InteractiveObject instance with a listener registered for the <codeph>clear</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Note:</b> TextField objects do <i>not</i> dispatch <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph>,
	or <codeph>selectAll</codeph> events. TextField objects always include Cut, Copy, Paste, Clear, and Select All commands in the context menu.
	You cannot remove these commands from the context menu for TextField objects. For TextField objects, selecting these commands 
	(or their keyboard equivalents) does not generate <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph>, 
	or <codeph>selectAll</codeph> events. However, other classes that extend the InteractiveObject class, including components built 
	using the Flash Text Engine (FTE), can dispatch these events.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:clear"><linktext>flash.display.InteractiveObject.clear</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSE"><apiName>CLOSE</apiName><shortdesc>
	The Event.CLOSE constant defines the value of the type property of a close event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.CLOSE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>close</codeph> event object. 
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object whose connection has been closed.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:close"><linktext>flash.net.Socket.close</linktext></link><link href="flash.net.xml#XMLSocket/event:close"><linktext>flash.net.XMLSocket.close</linktext></link><link href="flash.display.xml#NativeWindow/event:close"><linktext>flash.display.NativeWindow.close</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CLOSING"><apiName>CLOSING</apiName><shortdesc>
	The Event.CLOSING constant defines the value of the 
	type property of a closing event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>closing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.CLOSING</codeph> constant defines the value of the 
	<codeph>type</codeph> property of a <codeph>closing</codeph> event object. 
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; canceling this event object stops the close operation.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	                                               object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object whose connection is to be closed.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow/event:closing"><linktext>flash.display.NativeWindow.closing</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COMPLETE"><apiName>COMPLETE</apiName><shortdesc>
	The Event.COMPLETE constant defines the value of the type property of a complete event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.COMPLETE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>complete</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The network object that has completed loading. 
	    </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:complete"><linktext>flash.display.LoaderInfo.complete</linktext></link><link href="../../flash/html/HTMLLoader.html#event:complete"><linktext>flash.html.HTMLLoader.complete</linktext></link><link href="flash.media.xml#Sound/event:complete"><linktext>flash.media.Sound.complete</linktext></link><link href="flash.net.xml#FileReference/event:complete"><linktext>flash.net.FileReference.complete</linktext></link><link href="flash.net.xml#URLLoader/event:complete"><linktext>flash.net.URLLoader.complete</linktext></link><link href="flash.net.xml#URLStream/event:complete"><linktext>flash.net.URLStream.complete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CONNECT"><apiName>CONNECT</apiName><shortdesc>
	The Event.CONNECT constant defines the value of the type property of a connect event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>connect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.CONNECT</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>connect</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The Socket or XMLSocket object that has established a network connection.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#Socket/event:connect"><linktext>flash.net.Socket.connect</linktext></link><link href="flash.net.xml#XMLSocket/event:connect"><linktext>flash.net.XMLSocket.connect</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:COPY"><apiName>COPY</apiName><shortdesc>
	Defines the value of the type property of a copy event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>copy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>copy</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any InteractiveObject instance with a listener registered for the <codeph>copy</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Note:</b> TextField objects do <i>not</i> dispatch <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph>,
	or <codeph>selectAll</codeph> events. TextField objects always include Cut, Copy, Paste, Clear, and Select All commands in the context menu.
	You cannot remove these commands from the context menu for TextField objects. For TextField objects, selecting these commands 
	(or their keyboard equivalents) does not generate <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph>, 
	or <codeph>selectAll</codeph> events. However, other classes that extend the InteractiveObject class, including components built 
	using the Flash Text Engine (FTE), can dispatch these events.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:copy"><linktext>flash.display.InteractiveObject.copy</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:CUT"><apiName>CUT</apiName><shortdesc>
	Defines the value of the type property of a cut event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>cut</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any InteractiveObject instance with a listener registered for the <codeph>cut</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Note:</b> TextField objects do <i>not</i> dispatch <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph>,
	or <codeph>selectAll</codeph> events. TextField objects always include Cut, Copy, Paste, Clear, and Select All commands in the context menu.
	You cannot remove these commands from the context menu for TextField objects. For TextField objects, selecting these commands 
	(or their keyboard equivalents) does not generate <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph>, 
	or <codeph>selectAll</codeph> events. However, other classes that extend the InteractiveObject class, including components built 
	using the Flash Text Engine (FTE), can dispatch these events.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:cut"><linktext>flash.display.InteractiveObject.cut</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DEACTIVATE"><apiName>DEACTIVATE</apiName><shortdesc>
	The Event.DEACTIVATE constant defines the value of the type property of a deactivate event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deactivate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.DEACTIVATE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>deactivate</codeph> event object. 
	<p><b>Note:</b> This event has neither a "capture phase" nor a "bubble phase",
	which means that event listeners must be added directly to any potential targets, 
	whether the target is on the display list or not.</p>
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any DisplayObject instance with a listener registered for the <codeph>deactivate</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher/event:deactivate"><linktext>flash.events.EventDispatcher.deactivate</linktext></link><link href="flash.events.xml#Event/ACTIVATE"><linktext>ACTIVATE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:DISPLAYING"><apiName>DISPLAYING</apiName><shortdesc>
	 The Event.DISPLAYING constant defines the value of the type property of a displaying event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>displaying</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 The <codeph>Event.DISPLAYING</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>displaying</codeph> event object. 
	 <p><b>Note:</b> This event does not go through a "capture phase" 
	 and is dispatched directly to the target, whether the target is on the display list or not.</p>
	 <p>This event has the following properties:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	  <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object that is about to be displayed.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeMenu/event:displaying"><linktext>flash.display.NativeMenu.displaying</linktext></link><link href="flash.display.xml#NativeMenuItem/event:displaying"><linktext>flash.display.NativeMenuItem.displaying</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ENTER_FRAME"><apiName>ENTER_FRAME</apiName><shortdesc>
	The Event.ENTER_FRAME constant defines the value of the type property of an enterFrame event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>enterFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.ENTER_FRAME</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>enterFrame</codeph> event object. 
	<p><b>Note:</b> This event has neither a "capture phase" nor a "bubble phase",
	which means that event listeners must be added directly to any potential targets, 
	whether the target is on the display list or not.</p>
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any DisplayObject instance with a listener registered for the <codeph>enterFrame</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:enterFrame"><linktext>flash.display.DisplayObject.enterFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXITING"><apiName>EXITING</apiName><shortdesc>
	The Event.EXITING constant defines the value of the type property of an exiting event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exiting</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.EXITING</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>exiting</codeph> event object. 
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; canceling this event object stops the exit operation.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The NativeApplication object.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NativeApplication object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:exiting"><linktext>flash.desktop.NativeApplication.exiting</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:EXIT_FRAME"><apiName>EXIT_FRAME</apiName><shortdesc>
	The Event.EXIT_FRAME constant defines the value of the type property of an exitFrame event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exitFrame</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.EXIT_FRAME</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>exitFrame</codeph> event object. 
	<p><b>Note:</b> This event has neither a "capture phase" nor a "bubble phase",
	which means that event listeners must be added directly to any potential targets, 
	whether the target is on the display list or not.</p>
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any DisplayObject instance with a listener registered for the <codeph>enterFrame</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:exitFrame"><linktext>flash.display.DisplayObject.exitFrame</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FRAME_CONSTRUCTED"><apiName>FRAME_CONSTRUCTED</apiName><shortdesc>
	The Event.FRAME_CONSTRUCTED constant defines the value of the type property of an frameConstructed event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>frameConstructed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.FRAME_CONSTRUCTED</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>frameConstructed</codeph> event object. 
	
	<p><b>Note:</b> This event has neither a "capture phase" nor a "bubble phase",
	which means that event listeners must be added directly to any potential targets, 
	whether the target is on the display list or not.</p>
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any DisplayObject instance with a listener registered for the <codeph>frameConstructed</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:frameConstructed"><linktext>flash.display.DisplayObject.frameConstructed</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:FULLSCREEN"><apiName>FULLSCREEN</apiName><shortdesc>
	The Event.FULL_SCREEN constant defines the value of the type property of a fullScreen event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>fullScreen</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.FULL_SCREEN</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>fullScreen</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The Stage object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:fullScreen"><linktext>flash.display.Stage.fullScreen</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_BOUNDS_CHANGE"><apiName>HTML_BOUNDS_CHANGE</apiName><shortdesc>
	The Event.HTML_BOUNDS_CHANGE constant defines the value of the type property of an htmlBoundsChange event object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlBoundsChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.HTML_BOUNDS_CHANGE</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>htmlBoundsChange</codeph> event object.
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The HTMLLoader object.</entry></row><row><entry><codeph>target</codeph></entry><entry>The HTMLLoader object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlBoundsChange"><linktext>htmlBoundsChange event</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_DOM_INITIALIZE"><apiName>HTML_DOM_INITIALIZE</apiName><shortdesc>
	The Event.HTML_DOM_INITIALIZE constant defines the value of the type property 
	of an htmlDOMInitialize event object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlDOMInitialize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.HTML_DOM_INITIALIZE</codeph> constant defines the value of the <codeph>type</codeph> property 
	of an <codeph>htmlDOMInitialize</codeph> event object.
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The HTMLLoader object.</entry></row><row><entry><codeph>target</codeph></entry><entry>The HTMLLoader object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlDOMInitialize"><linktext>htmlDOMInitialize event</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:HTML_RENDER"><apiName>HTML_RENDER</apiName><shortdesc>
	The Event.HTML_RENDER constant defines the value of the type property of an htmlRender event object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>htmlRender</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.HTML_RENDER</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>htmlRender</codeph> event object.
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The HTMLLoader object.</entry></row><row><entry><codeph>target</codeph></entry><entry>The HTMLLoader object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:htmlRender"><linktext>htmlRender event</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:ID3"><apiName>ID3</apiName><shortdesc>
	The Event.ID3 constant defines the value of the type property of an id3 event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>id3</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.ID3</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>id3</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The Sound object loading the MP3 for which ID3 data is now available. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:id3"><linktext>flash.media.Sound.id3</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:INIT"><apiName>INIT</apiName><shortdesc>
	The Event.INIT constant defines the value of the type property of an init event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>init</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.INIT</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>init</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The LoaderInfo object associated with the SWF file being loaded.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:init"><linktext>flash.display.LoaderInfo.init</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:LOCATION_CHANGE"><apiName>LOCATION_CHANGE</apiName><shortdesc>
	The Event.LOCATION_CHANGE constant defines the value of the type property of a locationChange event object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>locationChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.LOCATION_CHANGE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>locationChange</codeph> event object.
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The HTMLLoader object.</entry></row><row><entry><codeph>target</codeph></entry><entry>The HTMLLoader object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="../../flash/html/HTMLLoader.html#event:locationChange"><linktext>locationChange event</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:MOUSE_LEAVE"><apiName>MOUSE_LEAVE</apiName><shortdesc>
	The Event.MOUSE_LEAVE constant defines the value of the type property of a mouseLeave event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseLeave</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.MOUSE_LEAVE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>mouseLeave</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The Stage object. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:mouseLeave"><linktext>flash.display.Stage.mouseLeave</linktext></link><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:NETWORK_CHANGE"><apiName>NETWORK_CHANGE</apiName><shortdesc>
	The Event.NETWORK_CHANGE constant defines the value of the type property of a networkChange event object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>networkChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.NETWORK_CHANGE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>networkChange</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NativeApplication object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:networkChange"><linktext>flash.desktop.NativeApplication.networkChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:OPEN"><apiName>OPEN</apiName><shortdesc>
	The Event.OPEN constant defines the value of the type property of an open event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.OPEN</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>open</codeph> event object. 
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The network object that has opened a connection. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:open"><linktext>flash.display.LoaderInfo.open</linktext></link><link href="flash.media.xml#Sound/event:open"><linktext>flash.media.Sound.open</linktext></link><link href="flash.net.xml#FileReference/event:open"><linktext>flash.net.FileReference.open</linktext></link><link href="flash.net.xml#URLLoader/event:open"><linktext>flash.net.URLLoader.open</linktext></link><link href="flash.net.xml#URLStream/event:open"><linktext>flash.net.URLStream.open</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:PASTE"><apiName>PASTE</apiName><shortdesc>
	The Event.PASTE constant defines the value of the type property of a paste event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>paste</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.PASTE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>paste</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any InteractiveObject instance with a listener registered for the <codeph>paste</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Note:</b> TextField objects do <i>not</i> dispatch <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph>,
	or <codeph>selectAll</codeph> events. TextField objects always include Cut, Copy, Paste, Clear, and Select All commands in the context menu.
	You cannot remove these commands from the context menu for TextField objects. For TextField objects, selecting these commands 
	(or their keyboard equivalents) does not generate <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph>, 
	or <codeph>selectAll</codeph> events. However, other classes that extend the InteractiveObject class, including components built 
	using the Flash Text Engine (FTE), can dispatch these events.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:paste"><linktext>flash.display.InteractiveObject.paste</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED"><apiName>REMOVED</apiName><shortdesc>
	The Event.REMOVED constant defines the value of the type property of
	a removed event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removed</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.REMOVED</codeph> constant defines the value of the <codeph>type</codeph> property of
	a <codeph>removed</codeph> event object. 
	
	<p platform="javascript">The <codeph>removed</codeph> event applies to the ActionScript 3.0 display list
	and is not relevant to JavaScript code.</p>
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The DisplayObject instance to be removed from the display list. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removed"><linktext>flash.display.DisplayObject.removed</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link><link href="flash.events.xml#Event/REMOVED_FROM_STAGE"><linktext>REMOVED_FROM_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:REMOVED_FROM_STAGE"><apiName>REMOVED_FROM_STAGE</apiName><shortdesc>
	The Event.REMOVED_FROM_STAGE constant defines the value of the type 
	property of a removedFromStage event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9.0.28.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>removedFromStage</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.REMOVED_FROM_STAGE</codeph> constant defines the value of the <codeph>type</codeph> 
	property of a <codeph>removedFromStage</codeph> event object. 
	
	<p platform="javascript">The <codeph>removedFromStage</codeph> event applies to the ActionScript 3.0 display list
	and is not relevant to JavaScript code.</p>
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The DisplayObject instance being removed from the on stage display list,
	either directly or through the removal of a sub tree in which the DisplayObject instance is contained.
	If the DisplayObject instance is being directly removed, the <codeph>removed</codeph> event occurs before this event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:removedFromStage"><linktext>flash.display.DisplayObject.removedFromStage</linktext></link><link href="flash.events.xml#Event/ADDED"><linktext>ADDED</linktext></link><link href="flash.events.xml#Event/REMOVED"><linktext>REMOVED</linktext></link><link href="flash.events.xml#Event/ADDED_TO_STAGE"><linktext>ADDED_TO_STAGE</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RENDER"><apiName>RENDER</apiName><shortdesc>
	The Event.RENDER constant defines the value of the type property of a render event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>render</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.RENDER</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>render</codeph> event object. 
	<p><b>Note:</b> This event has neither a "capture phase" nor a "bubble phase",
	which means that event listeners must be added directly to any potential targets, 
	whether the target is on the display list or not.</p>
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; the default behavior cannot be canceled.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any DisplayObject instance with a listener registered for the <codeph>render</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/event:render"><linktext>flash.display.DisplayObject.render</linktext></link><link href="flash.display.xml#Stage/invalidate()"><linktext>flash.display.Stage.invalidate()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:RESIZE"><apiName>RESIZE</apiName><shortdesc>
	The Event.RESIZE constant defines the value of the type property of a resize event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.RESIZE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>resize</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The Stage object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#Stage/event:resize"><linktext>flash.display.Stage.resize</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SCROLL"><apiName>SCROLL</apiName><shortdesc>
	The Event.SCROLL constant defines the value of the type property of a scroll event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>scroll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.SCROLL</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>scroll</codeph> event object. 
	
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The TextField object that has been scrolled. 
	The <codeph>target</codeph> property is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.xml#TextField/event:scroll"><linktext>flash.text.TextField.scroll</linktext></link><link href="../../flash/html/HTMLLoader.html#event:scroll"><linktext>flash.html.HTMLLoader.scroll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT"><apiName>SELECT</apiName><shortdesc>
	The Event.SELECT constant defines the value of the type property of a select event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>select</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.SELECT</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>select</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object on which an item has been selected.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#FileReference/event:select"><linktext>flash.net.FileReference.select</linktext></link><link href="flash.display.xml#NativeMenu/event:select"><linktext>flash.display.NativeMenu.select</linktext></link><link href="flash.display.xml#NativeMenuItem/event:select"><linktext>flash.display.NativeMenuItem.select</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SELECT_ALL"><apiName>SELECT_ALL</apiName><shortdesc>
	The Event.SELECT_ALL constant defines the value of the type property of a selectAll event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectAll</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.SELECT_ALL</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>selectAll</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Any InteractiveObject instance with a listener registered for the <codeph>selectAll</codeph> event.</entry></row></tbody></tgroup></adobetable>
	
	<p><b>Note:</b> TextField objects do <i>not</i> dispatch <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph>,
	or <codeph>selectAll</codeph> events. TextField objects always include Cut, Copy, Paste, Clear, and Select All commands in the context menu.
	You cannot remove these commands from the context menu for TextField objects. For TextField objects, selecting these commands 
	(or their keyboard equivalents) does not generate <codeph>clear</codeph>, <codeph>copy</codeph>, <codeph>cut</codeph>, <codeph>paste</codeph>, 
	or <codeph>selectAll</codeph> events. However, other classes that extend the InteractiveObject class, including components built 
	using the Flash Text Engine (FTE), can dispatch these events.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:selectAll"><linktext>flash.display.InteractiveObject.selectAll</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:SOUND_COMPLETE"><apiName>SOUND_COMPLETE</apiName><shortdesc>
	The Event.SOUND_COMPLETE constant defines the value of the type property of a soundComplete event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>soundComplete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.SOUND_COMPLETE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>soundComplete</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SoundChannel object in which a sound has finished playing.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#SoundChannel/event:soundComplete"><linktext>flash.media.SoundChannel.soundComplete</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_CHILDREN_CHANGE"><apiName>TAB_CHILDREN_CHANGE</apiName><shortdesc>
	The Event.TAB_CHILDREN_CHANGE constant defines the value of the type property of a tabChildrenChange event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabChildrenChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.TAB_CHILDREN_CHANGE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>tabChildrenChange</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object whose tabChildren flag has changed. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabChildrenChange"><linktext>flash.display.InteractiveObject.tabChildrenChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_ENABLED_CHANGE"><apiName>TAB_ENABLED_CHANGE</apiName><shortdesc>
	The Event.TAB_ENABLED_CHANGE constant defines the value of the type 
	property of a tabEnabledChange event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabEnabledChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.TAB_ENABLED_CHANGE</codeph> constant defines the value of the <codeph>type</codeph> 
	property of a <codeph>tabEnabledChange</codeph> event object. 
	
	<p platform="javascript">The <codeph>tabEnabledChange</codeph> event applies to the ActionScript 3.0 display list
	and is not relevant to JavaScript code.</p>
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject whose tabEnabled flag has changed. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabEnabledChange"><linktext>flash.display.InteractiveObject.tabEnabledChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:TAB_INDEX_CHANGE"><apiName>TAB_INDEX_CHANGE</apiName><shortdesc>
	The Event.TAB_INDEX_CHANGE constant defines the value of the 
	type property of a tabIndexChange event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabIndexChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.TAB_INDEX_CHANGE</codeph> constant defines the value of the 
	<codeph>type</codeph> property of a <codeph>tabIndexChange</codeph> event object. 
	
	<p platform="javascript">The <codeph>tabIndexChange</codeph> event applies to the ActionScript 3.0 display list
	and is not relevant to JavaScript code.</p>
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object whose tabIndex has changed. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:tabIndexChange"><linktext>flash.display.InteractiveObject.tabIndexChange</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:UNLOAD"><apiName>UNLOAD</apiName><shortdesc>
	The Event.UNLOAD constant defines the value of the type property of an unload event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unload</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.UNLOAD</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>unload</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The LoaderInfo object associated with the SWF file being unloaded or replaced.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:unload"><linktext>flash.display.LoaderInfo.unload</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_IDLE"><apiName>USER_IDLE</apiName><shortdesc>
	The Event.USER_IDLE constant defines the value of the type property of a userIdle event object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userIdle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.USER_IDLE</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>userIdle</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NativeApplication object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userIdle"><linktext>flash.desktop.NativeApplication.userIdle</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:USER_PRESENT"><apiName>USER_PRESENT</apiName><shortdesc>
	The Event.USER_PRESENT constant defines the value of the type property of a userPresent event object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>userPresent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>Event.USER_PRESENT</codeph> constant defines the value of the <codeph>type</codeph> property of a <codeph>userPresent</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NativeApplication object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication/event:userPresent"><linktext>flash.desktop.NativeApplication.userPresent</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:bubbles:get"><apiName>bubbles</apiName><shortdesc>
	Indicates whether an event is a bubbling event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether an event is a bubbling event. If the event can bubble, 
	this value is <codeph>true</codeph>; otherwise it is <codeph>false</codeph>.
	
	<p platform="javascript">Event bubbling is defined for display objects in SWF content,
	which uses the ActionScript 3.0 display object model. The <codeph>bubbles</codeph> property
	is only relavent in ActionScript 3.0 code.</p>
	
	<p platform="actionscript">When an event occurs, it moves through the three phases of the event flow: the capture 
	phase, which flows from the top of the display list hierarchy to the node just before the 
	target node; the target phase, which comprises the target node; and the bubbling phase, 
	which flows from the node subsequent to the target node back up the display list hierarchy.</p>
	
	<p platform="actionscript">Some events, such as the <codeph>activate</codeph> and <codeph>unload</codeph> events, do not 
	have a bubbling phase. The <codeph>bubbles</codeph> property has a value of 
	<codeph>false</codeph> for events that do not have a bubbling phase.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:cancelable:get"><apiName>cancelable</apiName><shortdesc>
	Indicates whether the behavior associated with the event can be prevented.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the behavior associated with the event can be prevented. 
	If the behavior can be canceled, this value is <codeph>true</codeph>; otherwise it is <codeph>false</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#Event/preventDefault()"><linktext>Event.preventDefault()</linktext></link></related-links></apiValue><apiValue id="flash.events:Event:currentTarget:get"><apiName>currentTarget</apiName><shortdesc>
	The object that is actively processing the Event object with an event listener.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	The object that is actively processing the Event object with an event listener. For example, if a user clicks an OK button, the current target could be the node containing that button or one of its ancestors that has registered an event listener for that event.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:eventPhase:get"><apiName>eventPhase</apiName><shortdesc>
	The current phase in the event flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	The current phase in the event flow. This property can contain the following numeric values:
	<ul>
	    <li> The capture phase (<codeph>EventPhase.CAPTURING_PHASE</codeph>).</li>
	    <li> The target phase (<codeph>EventPhase.AT_TARGET</codeph>).</li>
	    <li> The bubbling phase (<codeph>EventPhase.BUBBLING_PHASE</codeph>).</li></ul>
	
	<p platform="javascript">The event flow is defined for display objects in SWF content, which use
	the ActionScript 3.0 display object model. The <codeph>eventPhase</codeph> property
	is only relavent in ActionScript 3.0 code.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:target:get"><apiName>target</apiName><shortdesc>
	The event target.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
	The event target. This property contains the target node. For example, if a user clicks an OK button, the target node is the display list node containing that button.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:Event:type:get"><apiName>type</apiName><shortdesc>
	The type of event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The type of event. The type is case-sensitive.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc> 
  Dispatched when the player requests new audio data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc> 
  Dispatched when the player requests new audio data. 
 
  <p>Use this event when you want to manage
  dynamically generated audio. In this environment, the Sound object 
  doesn't actually contain sound data. Instead, it acts as a socket for sound data
  that is being streamed to it through the use of the function
  you assign to this event. </p>
 
  <p>In your function, you use the <codeph>ByteArray.writeFloat()</codeph> method to write to
  a ByteArray object (<codeph>event.data</codeph>) that contains the sampled data you
  want to play.</p>
 
  <p>When you call <codeph>Sound.play()</codeph>, the player starts
  calling your event handler, asking for chunks of data that contain sound samples. The player
  continues to send events as the sound plays back until you stop providing data,
  or until <codeph>SoundChannel.stop()</codeph> is called.</p>
 
  <p>The latency of the event varies from platform to platform, 
  and could change in future versions of Flash Player. Don't depend on a specific latency, calculate it instead. 
  To calculate the latency in ActionScript, use the formula:
  <codeph>((SampleDataEvent.position/44.1) - SoundChannelObject.position)</codeph>.</p>
 
  <p>Provide between 2048 and 8192 samples in a <codeph>SampleDataEvent</codeph> object. 
  For best performance, provide as many samples as possible.
  The fewer samples you provide, the more likely it is
  that clicks and pops will occur during playback. This behavior can differ on various platforms
  and can occur in various situations - for example, when resizing the browser. 
  You might write code that works on one platform when you provide only 2048 samples, but that same code
  might not work as well when run on a different platform. If you require the lowest latency possible, 
  consider making the amount of data user-selectable.</p>
 
  <p>If you provide fewer than 2048 samples, Flash Player plays the remaining samples 
  and then stops the sound as if the end of a sound file was reached, generating
  a SoundComplete event.</p>
 
  <p>You can also use the <codeph>Sound.extract()</codeph> method to extract data from a Sound object,
  which you can then write to the dynamic stream for playback.  </p>
 
  <p>When you use this event with a Sound object, the only other Sound methods that are enabled
  are <codeph>Sound.extract()</codeph> and <codeph>Sound.play()</codeph>. Calling any other methods or properties 
  results in an "invalid call" exception. All methods and properties of the SoundChannel object
  are still enabled.</p>
 
 </apiDesc><example conref="examples\Sound_sampleDataExample.as"> The following example plays a simple sine wave.
 
<codeblock>
var mySound:Sound = new Sound();
function sineWaveGenerator(event:SampleDataEvent):void {
    for ( var c:int=0; c&lt;8192; c++ ) {
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
        event.data.writeFloat(Math.sin((Number(c+event.position)/Math.PI/2))*0.25);
    }
}

mySound.addEventListener(SampleDataEvent.SAMPLE_DATA,sineWaveGenerator);
mySound.play();
</codeblock></example></apiClassifierDetail><related-links><link href="flash.media.xml#Sound"><linktext>flash.media.Sound</linktext></link></related-links><adobeApiEvent id="flash.events:SampleDataEvent:SAMPLE_DATA_sampleData"><apiName>sampleData</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SampleDataEvent:SAMPLE_DATA</apiEventType><adobeApiEventClassifier>flash.events:SampleDataEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SampleDataEvent:SampleDataEvent"><apiName>SampleDataEvent</apiName><shortdesc>
		Creates an event object that contains information about audio data events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. This value is:<codeph>Event.SAMPLE_DATA</codeph>.
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Determines whether the Event object participates in the bubbling stage of the event flow. 
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. 
		</apiDesc></apiParam><apiParam><apiItemName>theposition</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>The position of the data in the audio stream.
		</apiDesc></apiParam><apiParam><apiItemName>thedata</apiItemName><apiOperationClassifier>flash.utils:ByteArray</apiOperationClassifier><apiData>null</apiData><apiDesc>A byte array of data.
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		Creates an event object that contains information about audio data events. 
		Event objects are passed as parameters to event listeners. 
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SampleDataEvent:clone"><apiName>clone</apiName><shortdesc>
		Creates a copy of the SampleDataEvent object and sets each property's value to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new SampleDataEvent object with property values that match those of the original.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Creates a copy of the SampleDataEvent object and sets each property's value to match that of the original. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SampleDataEvent:toString"><apiName>toString</apiName><shortdesc>
		Returns a string that contains all the properties of the SampleDataEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the <codeph>SampleDataEvent</codeph> object.
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Returns a string that contains all the properties of the SampleDataEvent object. The string is in the following format:
		<p><codeph>[SampleDataEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> theposition=<i>value</i> thedata=<i>value</i>]</codeph></p>
		
		</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SampleDataEvent:SAMPLE_DATA"><apiName>SAMPLE_DATA</apiName><shortdesc>
		Defines the value of the type property of a SampleDataEvent event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sampleData</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Defines the value of the <codeph>type</codeph> property of a <codeph>SampleDataEvent</codeph> event object. 
		<p>This event has the following properties:</p>
		<adobetable class="innertable">
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>position</codeph></entry><entry>The point from which audio data is provided.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Sound/event:sampleData"><linktext>flash.media.Sound.sampleData</linktext></link><link href="flash.events.xml#SampleDataEvent"><linktext>flash.events.SampleDataEvent</linktext></link></related-links></apiValue><apiValue id="flash.events:SampleDataEvent:data:get"><apiName>data</apiName><shortdesc>
		The data in the audio stream.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.utils:ByteArray</apiValueClassifier></apiValueDef><apiDesc>
		The data in the audio stream.
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SampleDataEvent:position:get"><apiName>position</apiName><shortdesc>
		The position of the data in the audio stream.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		The position of the data in the audio stream.
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 The NativeApplication object of an AIR application dispatches an invoke event when the
	 application is invoked.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The NativeApplication object of an AIR application dispatches an <codeph>invoke</codeph> event when the
	 application is invoked. 
	 
	 <p>The NativeApplication object always dispatches an <codeph>invoke</codeph> event
	 when an application is launched, but the event may be dispatched 
	 at other times as well. For example, a running application dispatches an
	 additional InvokeEvent when a user activates a file associated with the 
	 application.</p>
	 
	 <p>Only a single instance of a particular application can be launched. Subsequent attempts to 
	 launch the application will result in a new <codeph>invoke</codeph> event dispatched by 
	 the NativeApplication object of the running instance.
	 It is an application's responsibility to handle this event and take the appropriate
	 action, such as opening a new application window to display the data in a file.</p>
	  
	 <p>InvokeEvent objects are dispatched by the NativeApplication object 
	 (<codeph>NativeApplication.nativeApplication</codeph>). To receive <codeph>invoke</codeph> events, 
	 call the <codeph>addEventListener()</codeph> method of the NativeApplication object. 
	 When an event listener registers for an <codeph>invoke</codeph> event, it will also receive all 
	 <codeph>invoke</codeph> events that occurred before the registration. These earlier events are dispatched 
	 after the call to <codeph>addEventListener()</codeph> returns, but not necessarily before 
	 a new <codeph>invoke</codeph> event that might be might be dispatched after registration. Thus,
	 you should not rely on dispatch order.</p> 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#BrowserInvokeEvent"><linktext>flash.events.BrowserInvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:InvokeEvent:INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:InvokeEvent:INVOKE</apiEventType><adobeApiEventClassifier>flash.events:InvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:InvokeEvent:InvokeEvent"><apiName>InvokeEvent</apiName><shortdesc>
	 The constructor function for the InvokeEvent class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of the event, accessible as <codeph>Event.type</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Set to <codeph>false</codeph> for an InvokeEvent object.
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Set to <codeph>false</codeph> for an InvokeEvent object.
	 </apiDesc></apiParam><apiParam><apiItemName>dir</apiItemName><apiOperationClassifier>flash.filesystem:File</apiOperationClassifier><apiData>null</apiData><apiDesc>The directory that should be used to resolve any relative paths in 
	 the <codeph>arguments</codeph> array.
	 </apiDesc></apiParam><apiParam><apiItemName>argv</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>An array of arguments (strings) to pass to the application.
	 </apiDesc></apiParam><apiParam><apiItemName>reason</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>standard</apiData><apiDesc>the cause of the event, either <codeph>InvokeEventReason.LOGIN</codeph> or <codeph>InvokeEventReason.STANDARD</codeph>. 
	 (This parameter is available as of AIR version 1.5.1.) 
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 The constructor function for the InvokeEvent class.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:InvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 Creates a new copy of this event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>The copy of the event.
		 
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Creates a new copy of this event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:InvokeEvent:INVOKE"><apiName>INVOKE</apiName><shortdesc>
	 The InvokeEvent.INVOKE constant defines the value of the type 
	 property of an InvokeEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 The <codeph>InvokeEvent.INVOKE</codeph> constant defines the value of the <codeph>type</codeph> 
	 property of an InvokeEvent object.
	 
     <p>The InvokeEvent object has the following properties:</p>
 	 <adobetable class="innertable">
        
	     
	    
	    
	     
	    
	     
	        
	  <tgroup cols="2"><thead><row><entry>Properties</entry><entry>Values</entry></row></thead><tbody><row><entry><codeph>arguments</codeph></entry><entry>The array of string arguments passed 
	 during this invocation.</entry></row><row><entry><codeph>currentDirectory</codeph></entry><entry>a File object representing the 
	 directory that should be used to resolve any relative paths in the arguments array.</entry></row><row><entry><codeph>reason</codeph></entry><entry>a code indicating whether the invoke event was dispatched 
	 because the application started automatically at login (<codeph>InvokeEventReason.LOGIN</codeph>), or 
	 for another reason (<codeph>InvokeEventReason.STANDARD</codeph>). Available as of AIR version 1.5.1.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph>.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; 
	 there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indicates the object that is 
	 actively processing this InvokeEvent object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Always the NativeApplication object. 
	    </entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue><apiValue id="flash.events:InvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 The array of string arguments passed during this invocation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 The array of string arguments passed during this invocation. If this is a 
		 command line invocation, the array contains the command line arguments 
		 (<i>excluding</i> the process name).
		 
		 <p><i>Note:</i> When multiple files are selected and opened on Mac<sup>®</sup> OS X, AIR  
		 dispatches a single <codeph>invoke</codeph> event containing the names of all the 
		 selected files in the <codeph>arguments</codeph> array. On Windows<sup>®</sup> and Linux, however, AIR  
		 dispatches a separate <codeph>invoke</codeph> event for each selected file containing only that 
		 filename in the <codeph>arguments</codeph> array.
		 </p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:currentDirectory:get"><apiName>currentDirectory</apiName><shortdesc>
		 The directory that should be used to resolve any relative paths in the arguments
		 array.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.filesystem:File</apiValueClassifier></apiValueDef><apiDesc>
		 The directory that should be used to resolve any relative paths in the <codeph>arguments</codeph>
		 array. 
		 
		 <p>If an application is started from the command line, this property is
		 typically set to the current working directory of the command line shell from which
		 the application was started. If an application is launched from the GUI shell, 
		 this is typically the file system root.</p>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:InvokeEvent:reason:get"><apiName>reason</apiName><shortdesc>
		 The reason for this InvokeEvent.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.5.1"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The reason for this InvokeEvent. This property indicates whether the application was launched manually 
		 by the user or automatically at login. Possible values are enumerated as constants in
		 the <codeph>InvokeEventReason</codeph> class:
		 
		 <adobetable class="innertable">
		 
		 
		 
		 
		 
		 
		 
		 <tgroup cols="2"><thead><row><entry>InvokeEventReason constant</entry><entry>Meaning</entry></row></thead><tbody><row>
		 	<entry><codeph>LOGIN</codeph></entry>
		 	<entry>Launched automatically at at login.</entry>
		 
		 </row><row>
		 	<entry><codeph>STANDARD</codeph></entry>
		 	<entry>Launched for any other reason.</entry>
		 
		 </row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#InvokeEventReason"><linktext>flash.desktop.InvokeEventReason</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
The application dispatches HTTPStatusEvent objects when a network request returns an HTTP
status code.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
The application dispatches HTTPStatusEvent objects when a network request returns an HTTP
status code. 

<p>HTTPStatusEvent objects are always sent before error or completion events. An 
HTTPStatusEvent object does not necessarily indicate an error condition; it simply reflects 
the HTTP status code (if any) that is provided by the networking stack. <ph platform="actionscript">Some Flash
Player environments may be unable to detect HTTP status codes; a status code of 0 is always
reported in these cases.</ph> </p>

<p><ph platform="actionscript">In Flash Player, there is only one type of HTTPStatus event: 
<codeph>httpStatus</codeph>.</ph> In the AIR runtime, a FileReference, URLLoader, or URLStream 
can register to listen for an <codeph>httpResponseStatus</codeph>, which includes <codeph>responseURL</codeph>
and <codeph>responseHeaders</codeph> properties. These properties are undefined in a <codeph>httpStatus</codeph>
event.</p>

</apiDesc><example conref="examples\HTTPStatusEventExample.as"> The following example attempts to load a nonexistent file from the root web directory
 at http://www.[yourDomain].com, which should dispatch an <codeph>httpStatusHandler</codeph> event with a status of 404, indicating that
 the file was not found.  The <codeph>httpStatusHandler</codeph> event is handled by <codeph>httpStatusHandler()</codeph>,
 which simply prints two lines of information about the event.
 
 <p> <b>Notes:</b> 
 <ol>
    <li>You need to compile the SWF file with "Local Playback Security" set
     to "Access Network Only" to generate a <codeph>securityError</codeph> event in this example.</li>
    <li>You need a server running on http://www.[yourDomain].com and listening on port 80 or you will receive
     an <codeph>httpStatusHandler</codeph> event with status code 0 instead of 404.</li>
    <li>You must not have a file named MissingFile.html at the root web directory
     of http://www.[yourDomain].com or you will not receive the correct <codeph>httpStatusHandler</codeph> event.</li>
 </ol>
 </p>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.net.URLLoader;
    import flash.net.URLRequest;
    import flash.events.HTTPStatusEvent;

    public class HTTPStatusEventExample extends Sprite {

        public function HTTPStatusEventExample() {
            var loader:URLLoader = new URLLoader();
            loader.addEventListener(HTTPStatusEvent.HTTP_STATUS, httpStatusHandler);

            var request:URLRequest = new URLRequest("http://www.[yourDomain].com/MissingFile.html");
            loader.load(request);
        }

        private function httpStatusHandler(event:HTTPStatusEvent):void {
            trace("httpStatusHandler: " + event);
            trace("status: " + event.status);
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS_httpResponseStatus"><apiName>httpResponseStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:HTTPStatusEvent:HTTP_STATUS_httpStatus"><apiName>httpStatus</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:HTTPStatusEvent:HTTP_STATUS</apiEventType><adobeApiEventClassifier>flash.events:HTTPStatusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:HTTPStatusEvent:HTTPStatusEvent"><apiName>HTTPStatusEvent</apiName><shortdesc>
	Creates an Event object that contains specific information about HTTP status events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one type of HTTPStatus event: <codeph>HTTPStatusEvent.HTTP_STATUS</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>status</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>Numeric status. Event listeners can access this information through the <codeph>status</codeph> property.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for HTTPStatusEvent objects.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an Event object that contains specific information about HTTP status events.
	Event objects are passed as parameters to event listeners.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#HTTPStatusEvent/HTTP_STATUS"><linktext>HTTP_STATUS</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:HTTPStatusEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the HTTPStatusEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new HTTPStatusEvent object with property values that match those of the original.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the HTTPStatusEvent object and sets the value of each property to match that of the original.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:HTTPStatusEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the HTTPStatusEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the HTTPStatusEvent object.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the HTTPStatusEvent object. The string is in the following format:
	<p><codeph>[HTTPStatusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> status=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:HTTPStatusEvent:HTTP_RESPONSE_STATUS"><apiName>HTTP_RESPONSE_STATUS</apiName><shortdesc>
	Unlike the httpStatus event, the httpResponseStatus event is 
	delivered before any response data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpResponseStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Unlike the <codeph>httpStatus</codeph> event, the <codeph>httpResponseStatus</codeph> event is 
	delivered before any response data. Also, the <codeph>httpResponseStatus</codeph> event includes 
	values for the <codeph>responseHeaders</codeph> and <codeph>responseURL</codeph> properties (which are 
	undefined for an <codeph>httpStatus</codeph> event. Note that the <codeph>httpResponseStatus</codeph> event
	(if any) will be sent before (and in addition to) any <codeph>complete</codeph> or <codeph>error</codeph> 
	event. 
	
	<p>The <codeph>HTTPStatusEvent.HTTP_RESPONSE_STATUS</codeph> constant defines the value of the 
	<codeph>type</codeph> property of a <codeph>httpResponseStatus</codeph> event object. </p>
	
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>responseURL</codeph></entry><entry>The URL from which the response was returned.</entry></row><row><entry><codeph>responseHeaders</codeph></entry><entry>The response headers that the response returned, 
	as an array of URLRequestHeader objects.</entry></row><row><entry><codeph>status</codeph></entry><entry>The HTTP status code returned by the server.</entry></row><row><entry><codeph>target</codeph></entry><entry>The network object receiving an HTTP status code. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLStream/event:httpResponseStatus"><linktext>flash.net.URLStream.httpResponseStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpResponseStatus"><linktext>flash.net.FileReference.httpResponseStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:HTTP_STATUS"><apiName>HTTP_STATUS</apiName><shortdesc>
	The HTTPStatusEvent.HTTP_STATUS constant defines the value of the 
	type property of a httpStatus event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>httpStatus</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>HTTPStatusEvent.HTTP_STATUS</codeph> constant defines the value of the 
	<codeph>type</codeph> property of a <codeph>httpStatus</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>status</codeph></entry><entry>The HTTP status code returned by the server.</entry></row><row><entry><codeph>target</codeph></entry><entry>The network object receiving an HTTP status code. </entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#LoaderInfo/event:httpStatus"><linktext>flash.display.LoaderInfo.httpStatus</linktext></link><link href="flash.net.xml#FileReference/event:httpStatus"><linktext>flash.net.FileReference.httpStatus</linktext></link><link href="flash.net.xml#URLLoader/event:httpStatus"><linktext>flash.net.URLLoader.httpStatus</linktext></link><link href="flash.net.xml#URLStream/event:httpStatus"><linktext>flash.net.URLStream.httpStatus</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseHeaders:get"><apiName>responseHeaders</apiName><shortdesc>
	 The response headers that the response returned, as an array of URLRequestHeader objects.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
	 The response headers that the response returned, as an array of URLRequestHeader objects.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestHeader"><linktext>flash.net.URLRequestHeader</linktext></link></related-links></apiValue><apiValue id="flash.events:HTTPStatusEvent:responseURL:get"><apiName>responseURL</apiName><shortdesc>
	 The URL that the response was returned from.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 The URL that the response was returned from. In the case of redirects, this will be different 
	 from the request URL.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:HTTPStatusEvent:status:get"><apiName>status</apiName><shortdesc>
	The HTTP status code returned by the server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	The HTTP status code returned by the server. For example, a value of 404 indicates that the server
	has not found a match for the requested URI. HTTP status codes can be found in sections 10.4 and 10.5
	of the HTTP specification at
	<xref href="ftp://ftp.isi.edu/in-notes/rfc2616.txt">ftp://ftp.isi.edu/in-notes/rfc2616.txt</xref>.
	
	<p>If <ph platform="actionscript">Flash Player or</ph> AIR cannot get a status code from the 
	server, or if it cannot communicate with the server, the default value of 0 is passed to your code. 
	<ph platform="actionscript">A value of 0 can be generated in any player (for example, 
	if a malformed URL is requested), and a value of 0 is always generated by the Flash Player plug-in 
	when it is run in the following browsers, which do not pass HTTP status codes to the player: 
	Netscape, Mozilla, Safari, Opera, and Internet Explorer for the Macintosh.</ph></p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
	 A File object dispatches a FileListEvent object when a call to the getDirectoryListingAsync() method 
	 of a File object successfully enumerates a set of files and directories or when a user selects files after a 
	 call to the browseForOpenMultiple() method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>A File object dispatches a FileListEvent object after successful calls to the getDirectoryListingAsync() 
	 or browseForOpenMultiple() method.
	 
	 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 A File object dispatches a FileListEvent object when a call to the <codeph>getDirectoryListingAsync()</codeph> method 
	 of a File object successfully enumerates a set of files and directories or when a user selects files after a 
	 call to the <codeph>browseForOpenMultiple()</codeph> method. 
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="../../flash/filesystem/File.html#getDirectoryListingAsync()"><linktext>File.getDirectoryListingAsync()</linktext></link></related-links><adobeApiEvent id="flash.events:FileListEvent:DIRECTORY_LISTING_directoryListing"><apiName>directoryListing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:DIRECTORY_LISTING</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:FileListEvent:SELECT_MULTIPLE_selectMultiple"><apiName>selectMultiple</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FileListEvent:SELECT_MULTIPLE</apiEventType><adobeApiEventClassifier>flash.events:FileListEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:FileListEvent:FileListEvent"><apiName>FileListEvent</apiName><shortdesc>
		The constructor function for a FileListEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of the event.
		
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the event object bubbles (<codeph>false</codeph> for a FileListEvent object).
		
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled (<codeph>false</codeph> for a FileListEvent object).
		
		</apiDesc></apiParam><apiParam><apiItemName>files</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>An array of File objects.
		
		</apiDesc></apiParam></apiConstructorDef><apiDesc>
		The constructor function for a FileListEvent object. 
		
		<p>The runtime uses this class to create FileListEvent objects. You will not use this 
		constructor directly in your code.</p>
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.events:FileListEvent:DIRECTORY_LISTING"><apiName>DIRECTORY_LISTING</apiName><shortdesc>
		 The FileListEvent.DIRECTORY_LISTING constant defines the value of the  
		 type property of the event object for a directoryListing event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>directoryListing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>FileListEvent.DIRECTORY_LISTING</codeph> constant defines the value of the  
		 <codeph>type</codeph> property of the event object for a <codeph>directoryListing</codeph> event.
		 
		 <p>This event has the following properties:</p>
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>files</codeph></entry><entry>An array of File objects representing the files and directories found.</entry></row><row><entry><codeph>target</codeph></entry><entry>The FileListEvent object.</entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:SELECT_MULTIPLE"><apiName>SELECT_MULTIPLE</apiName><shortdesc>
		 The FileListEvent.SELECT_MULTIPLE constant defines the value of the  
		 type property of the event object for a selectMultiple event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>selectMultiple</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>FileListEvent.SELECT_MULTIPLE</codeph> constant defines the value of the  
		 <codeph>type</codeph> property of the event object for a <codeph>selectMultiple</codeph> event.
		 
		 <adobetable class="innertable">
		     
		     
		     
		     
		     
		  <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>files</codeph></entry><entry>An array of File objects representing the files selected.</entry></row><row><entry><codeph>target</codeph></entry><entry>The FileListEvent object.</entry></row></tbody></tgroup></adobetable>
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FileListEvent:files"><apiName>files</apiName><shortdesc>
		 An array of File objects representing the files and directories found or selected.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 An array of File objects representing the files and directories found or selected. 
		 
		 <p>For the <codeph>File.getDirectoryListingAsync()</codeph> method, this is the list of files and 
		 directories found at the root level of the directory represented by the File object that called 
		 the method. For the <codeph>File.browseForOpenMultiple()</codeph> method, this is the list of files
		 selected by the user.</p>
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
 A NativeWindow object dispatches a NativeWindowBoundsEvent object when the size or location 
 of the window changes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for NativeWindow events that change the size and/or location of the window.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 A NativeWindow object dispatches a NativeWindowBoundsEvent object when the size or location 
 of the window changes. 
 
 There are four types of events:
 <ul>
     <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
     <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
 </ul>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#NativeWindowBoundsEvent/MOVING"><linktext>flash.events.NativeWindowBoundsEvent.MOVING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/MOVE"><linktext>flash.events.NativeWindowBoundsEvent.MOVE</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZING"><linktext>flash.events.NativeWindowBoundsEvent.RESIZING</linktext></link><link href="flash.events.xml#NativeWindowBoundsEvent/RESIZE"><linktext>flash.events.NativeWindowBoundsEvent.RESIZE</linktext></link></related-links><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVE_move"><apiName>move</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:MOVING_moving"><apiName>moving</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:MOVING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZE_resize"><apiName>resize</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZE</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:NativeWindowBoundsEvent:RESIZING_resizing"><apiName>resizing</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:NativeWindowBoundsEvent:RESIZING</apiEventType><adobeApiEventClassifier>flash.events:NativeWindowBoundsEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:NativeWindowBoundsEvent:NativeWindowBoundsEvent"><apiName>NativeWindowBoundsEvent</apiName><shortdesc>
    Creates an Event object with specific information relevant to window bounds events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Possible values are:
    <ul>
        <li><codeph>NativeWindowBoundsEvent.MOVING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.MOVE</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZING</codeph></li>
        <li><codeph>NativeWindowBoundsEvent.RESIZE</codeph></li>
    </ul>
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Indicates whether the Event object participates in the bubbling stage of the event flow.
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Event object can be canceled.
    </apiDesc></apiParam><apiParam><apiItemName>beforeBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>Indicates the bounds before the most recent change or the pending change.
    </apiDesc></apiParam><apiParam><apiItemName>afterBounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>Indicates the bounds after the most recent change or the pending change. 
    
    </apiDesc></apiParam></apiConstructorDef><apiDesc>
    Creates an Event object with specific information relevant to window bounds events.
    Event objects are passed as parameters to event listeners.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:NativeWindowBoundsEvent:clone"><apiName>clone</apiName><shortdesc>
    Creates a copy of the NativeWindowBoundsEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new NativeWindowBoundsEvent object with property values that match those of the original.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Creates a copy of the NativeWindowBoundsEvent object and sets the value of each property to match that of the original.
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:NativeWindowBoundsEvent:toString"><apiName>toString</apiName><shortdesc>
    Returns a string that contains all the properties of the NativeWindowBoundsEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the NativeWindowBoundsEvent object.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Returns a string that contains all the properties of the NativeWindowBoundsEvent object. The string has the following format:
    <p><codeph>[NativeWindowBoundsEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> previousDisplayState=<i>value</i> currentDisplayState=<i>value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:NativeWindowBoundsEvent:MOVE"><apiName>MOVE</apiName><shortdesc>
    Defines the value of the type property of a move event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>move</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the value of the <codeph>type</codeph> property of a <codeph>move</codeph> event object. 
    
    This event has the following properties:
    <adobetable class="innertable">
        
         
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>Properties</entry><entry>Values</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>The new bounds of the window.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>The old bounds of the window.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NativeWindow object that has just changed state. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>No.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indicates the object that is actively processing the Event 
    object with an event listener.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; There is no default behavior to cancel.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:MOVING"><apiName>MOVING</apiName><shortdesc>
    Defines the value of the type property of a moving event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>moving</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the value of the <codeph>type</codeph> property of a <codeph>moving</codeph> event object. 
    
    This event has the following properties:
    <adobetable class="innertable">
        
         
         
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Properties</entry><entry>Values</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>The bounds of the window after the pending change.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>The bounds of the window before the pending change.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>No.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; cancelling the event will prevent the window move.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indicates the object that is actively processing the Event 
    object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NativeWindow object that has just changed state.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZE"><apiName>RESIZE</apiName><shortdesc>
    Defines the value of the type property of a resize event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resize</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the value of the <codeph>type</codeph> property of a <codeph>resize</codeph> event object. 
    
    This event has the following properties:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Properties</entry><entry>Values</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>The new bounds of the window.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>The old bounds of the window.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NativeWindow object that has just changed state. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>No.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indicates the object that is actively processing the Event 
    object with an event listener.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; There is no default behavior to cancel.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:RESIZING"><apiName>RESIZING</apiName><shortdesc>
    Defines the value of the type property of a resizing event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>resizing</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the value of the <codeph>type</codeph> property of a <codeph>resizing</codeph> event object. 
    
    This event has the following properties:
    <adobetable class="innertable">
        
         
        
        
        
        
        
     <tgroup cols="2"><thead><row><entry>Properties</entry><entry>Values</entry></row></thead><tbody><row><entry><codeph>afterBounds</codeph></entry><entry>The bounds of the window after the pending change.</entry></row><row><entry><codeph>beforeBounds</codeph></entry><entry>The bounds of the window before the pending change.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NativeWindow object that has just changed state. 
    </entry></row><row><entry><codeph>bubbles</codeph></entry><entry>No.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indicates the object that is actively processing the Event 
    object with an event listener.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; cancelling the event will prevent the window move.</entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#NativeWindow"><linktext>flash.display.NativeWindow</linktext></link></related-links></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:afterBounds:get"><apiName>afterBounds</apiName><shortdesc>
     The bounds of the window after the change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     The bounds of the window after the change.
       
     <p>If the event is <codeph>moving</codeph> or <codeph>resizing</codeph>, the
     bounds have not yet changed; <codeph>afterBounds</codeph> indicates the new bounds 
     if the event is not canceled. If the event is
     <codeph>move</codeph> or <codeph>resize</codeph>,  
     <codeph>afterBounds</codeph> indicates the new bounds.
     </p>
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:NativeWindowBoundsEvent:beforeBounds:get"><apiName>beforeBounds</apiName><shortdesc>
     The bounds of the window before the change.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
     The bounds of the window before the change.  
     
     <p>If the event is <codeph>moving</codeph> or <codeph>resizing</codeph>, the
     bounds have not yet changed; <codeph>beforeBounds</codeph> reflects the current bounds.  If the event is
     <codeph>move</codeph> or <codeph>resize</codeph>, 
     <codeph>beforeBounds</codeph> indicates the original value.
     </p>
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
The SystemTrayIcon object dispatches events of type ScreenMouseEvent in response to mouse interaction.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event object for ScreenMouseEvent events.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:MouseEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
The SystemTrayIcon object dispatches events of type ScreenMouseEvent in response to mouse interaction.

<p>The ScreenMouseEvent object extends the MouseEvent class to provide two additional properties,
<codeph>screenX</codeph> and <codeph>screenY</codeph>, that report the mouse coordinates
in relation to the primary desktop screen rather than an application window or
stage.</p>
 
</apiDesc></apiClassifierDetail><related-links><link href="flash.desktop.xml#SystemTrayIcon"><linktext>flash.desktop.SystemTrayIcon</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links><adobeApiEvent id="flash.events:ScreenMouseEvent:CLICK_click"><apiName>click</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_DOWN_mouseDown"><apiName>mouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:MOUSE_UP_mouseUp"><apiName>mouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_CLICK_rightClick"><apiName>rightClick</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_CLICK</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN_rightMouseDown"><apiName>rightMouseDown</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP_rightMouseUp"><apiName>rightMouseUp</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP</apiEventType><adobeApiEventClassifier>flash.events:ScreenMouseEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:ScreenMouseEvent:ScreenMouseEvent"><apiName>ScreenMouseEvent</apiName><shortdesc>
	Creates a ScreenMouseEvent object that contains the mouse location in
	screen coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information 
	through the inherited <codeph>type</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>The X position of the click in screen coordinates.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>The Y position of the click in screen coordinates.
	</apiDesc></apiParam><apiParam><apiItemName>screenX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Set to <codeph>false</codeph> since screen mouse events never bubble. 
	</apiDesc></apiParam><apiParam><apiItemName>screenY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>unknown</apiData><apiDesc>Set to <codeph>false</codeph> since there is no default behavior to cancel.
	</apiDesc></apiParam><apiParam><apiItemName>ctrlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>On Windows or Linux, indicates whether the Ctrl key was down when this event occurred. 
	 On Mac, indicates whether the Ctrl key or the Command key was down.
	</apiDesc></apiParam><apiParam><apiItemName>altKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Set to <codeph>true</codeph> to indicate that the alt key was down when this event occured.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Set to <codeph>true</codeph> to indicate that the shift key was down when this event occured.
	</apiDesc></apiParam><apiParam><apiItemName>buttonDown</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Set to <codeph>true</codeph> to indicate that a mouse button was down when this event occured.
	</apiDesc></apiParam><apiParam><apiItemName>commandKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Command key was down (Mac only).
	</apiDesc></apiParam><apiParam><apiItemName>controlKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Ctrl or Control key was down.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for ScreenMouseEvent objects.
	
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates a ScreenMouseEvent object that contains the mouse location in
	screen coordinates.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#MouseEvent"><linktext>flash.events.MouseEvent</linktext></link><link href="flash.display.xml#Screen"><linktext>flash.display.Screen</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ScreenMouseEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the ScreenMouseEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new ScreenMouseEvent object with property values that match those of the original.
	</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the ScreenMouseEvent object and sets the value of each property to match that of the original.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ScreenMouseEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the ScreenMouseEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the ScreenMouseEvent object.
	</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the ScreenMouseEvent object. 
	 The string is in the following format:
	<p><codeph>[ScreenMouseEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> status=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ScreenMouseEvent:CLICK"><apiName>CLICK</apiName><shortdesc>
	The ScreenMouseEvent.CLICK constant defines the value of the type 
	property of a click event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>click</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>ScreenMouseEvent.CLICK</codeph> constant defines the value of the <codeph>type</codeph> 
	property of a <codeph>click</codeph> event object. 
	
	<p>This event has the following relevant properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>The horizontal coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>The vertical coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SystemTrayIcon object under the pointing device.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_DOWN"><apiName>MOUSE_DOWN</apiName><shortdesc>
	The ScreenMouseEvent.MOUSE_DOWN constant defines the value of the type 
	property of a mouseDown event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>ScreenMouseEvent.MOUSE_DOWN</codeph> constant defines the value of the <codeph>type</codeph> 
	property of a <codeph>mouseDown</codeph> event object. 
	
	<p>This event has the following relevant properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>The horizontal coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>The vertical coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SystemTrayIcon object under the pointing device.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:MOUSE_UP"><apiName>MOUSE_UP</apiName><shortdesc>
	The ScreenMouseEvent.MOUSE_UP constant defines the value of the type 
	property of a mouseUp event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>ScreenMouseEvent.MOUSE_UP</codeph> constant defines the value of the <codeph>type</codeph> 
	property of a <codeph>mouseUp</codeph> event object. 
	
	<p>This event has the following relevant properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>The horizontal coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>The vertical coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SystemTrayIcon object under the pointing device.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_CLICK"><apiName>RIGHT_CLICK</apiName><shortdesc>
	The ScreenMouseEvent.RIGHT_CLICK constant defines the value of the type 
	property of a rightClick event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightClick</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>ScreenMouseEvent.RIGHT_CLICK</codeph> constant defines the value of the <codeph>type</codeph> 
	property of a <codeph>rightClick</codeph> event object. 
	
	<p>This event has the following relevant properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>The horizontal coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>The vertical coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SystemTrayIcon object under the pointing device.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_DOWN"><apiName>RIGHT_MOUSE_DOWN</apiName><shortdesc>
	The ScreenMouseEvent.RIGHT_MOUSE_DOWN constant defines the value of the type 
	property of a rightMouseDown event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseDown</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>ScreenMouseEvent.RIGHT_MOUSE_DOWN</codeph> constant defines the value of the <codeph>type</codeph> 
	property of a <codeph>rightMouseDown</codeph> event object. 
	
	<p>This event has the following relevant properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>The horizontal coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>The vertical coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SystemTrayIcon object under the pointing device.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:RIGHT_MOUSE_UP"><apiName>RIGHT_MOUSE_UP</apiName><shortdesc>
	The ScreenMouseEvent.RIGHT_MOUSE_UP constant defines the value of the type 
	property of a rightMouseUp event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rightMouseUp</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>ScreenMouseEvent.RIGHT_MOUSE_UP</codeph> constant defines the value of the <codeph>type</codeph> 
	property of a <codeph>rightMouseUp</codeph> event object. 
	
	<p>This event has the following relevant properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	     
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>buttonDown</codeph></entry><entry><codeph>true</codeph> if the primary mouse button is pressed; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>ctrlKey</codeph></entry><entry><codeph>true</codeph> on Windows or Linux if the Ctrl key is active. <codeph>true</codeph> on Mac if either the Ctrl key or the Command key is active. Otherwise, <codeph>false</codeph>.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>commandKey</codeph></entry><entry><codeph>true</codeph> on the Mac if the Command key is active; <codeph>false</codeph> if it is inactive. Always <codeph>false</codeph> on Windows.</entry></row><row><entry><codeph>controlKey</codeph></entry><entry><codeph>true</codeph> if the Ctrl or Control key is active; <codeph>false</codeph> if it is inactive.</entry></row><row><entry><codeph>screenX</codeph></entry><entry>The horizontal coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>screenY</codeph></entry><entry>The vertical coordinate at which the event occurred in screen coordinates.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SystemTrayIcon object under the pointing device.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenX:get"><apiName>screenX</apiName><shortdesc>
	The X position  of the click in screen coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	The X position  of the click in screen coordinates.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ScreenMouseEvent:screenY:get"><apiName>screenY</apiName><shortdesc>
	The Y position of the click in screen coordinates.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	The Y position of the click in screen coordinates.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
    A NetStream object dispatchs a DRMAuthenticateEvent object when attempting to play digital rights management (DRM) encrypted
    content that requires a user credential for authentication.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for DRM-enabled objects.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
    A NetStream object dispatchs a DRMAuthenticateEvent object when attempting to play digital rights management (DRM) encrypted
    content that requires a user credential for authentication. 
	<p>
	The DRMAuthenticateEvent handler is responsible for gathering the required credentials
	(such as the user name, password, and type) and passing the values to the 
	<codeph>NetStream.setDRMAuthenticationCredentials()</codeph> method for authentication. Each
	AIR application must provide some mechanism for obtaining user credentials.
	For example, the application could provide a user with a simple user interface to enter the
	username and password values, and optionally the type value as well.  
	</p> 
	<p>
	If user authentication failed, the application will retry 
 	authentication and dispatch a new DRMAuthenticateEvent event for the NetStream object.
	</p>
	
	</apiDesc><example conref="examples\DRMAuthenticateEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMAuthenticateEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMAuthenticateEventExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMAuthenticateEventExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMAuthenticateEvent.DRM_AUTHENTICATE, drmAuthenticateEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

         private function drmAuthenticateEventHandler(event:DRMAuthenticateEvent):void {
            videoStream.setDRMAuthenticationCredentials("User", "password", "drm");
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream/setDRMAuthenticationCredentials()"><linktext>flash.net.NetStream.setDRMAuthenticationCredentials()</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/DRM_AUTHENTICATE"><linktext>DRMAuthenticateEvent.DRM_AUTHENTICATE</linktext></link><link href="flash.net.drm.xml#DRMManager"><linktext>flash.net.drm.DRMManager</linktext></link></related-links><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE_drmAuthenticate"><apiName>drmAuthenticate</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE</apiEventType><adobeApiEventClassifier>flash.events:DRMAuthenticateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMAuthenticateEvent:DRMAuthenticateEvent"><apiName>DRMAuthenticateEvent</apiName><shortdesc>
 	    Creates an Event object that contains specific information about DRM authentication events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one type of DRMAuthenticate event: <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property.
		</apiDesc></apiParam><apiParam><apiItemName>header</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>The encrypted content file header provided by the server.
  		</apiDesc></apiParam><apiParam><apiItemName>userPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc> A prompt for a user name credential, provided by the server.
		</apiDesc></apiParam><apiParam><apiItemName>passPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>A prompt for a password credential, provided by the server.
		</apiDesc></apiParam><apiParam><apiItemName>urlPrompt</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>A prompt for a URL to display, provided by the server.
		</apiDesc></apiParam><apiParam><apiItemName>authenticationType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>Indicates whether the supplied credentials are for authenticating against the Flash Media Rights Management Server (FMRMS) or a proxy server.
		</apiDesc></apiParam><apiParam><apiItemName>netstream</apiItemName><apiOperationClassifier>flash.net:NetStream</apiOperationClassifier><apiData>null</apiData><apiDesc>The NetStream object that initiated this event.
 	    
 	    </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	    Creates an Event object that contains specific information about DRM authentication events.
 	    Event objects are passed as parameters to event listeners. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMAuthenticateEvent:clone"><apiName>clone</apiName><shortdesc>
		Creates a copy of the DRMAuthenticateEvent object and sets the value of each property to match
		that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new DRMAuthenticateEvent object with property values that match those of the original.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Creates a copy of the DRMAuthenticateEvent object and sets the value of each property to match
		that of the original.
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMAuthenticateEvent:toString"><apiName>toString</apiName><shortdesc>
		Returns a string that contains all the properties of the DRMAuthenticateEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the DRMAuthenticateEvent object.
		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Returns a string that contains all the properties of the DRMAuthenticateEvent object. 
		The string is in the following format: 
     	<p><codeph>[DRMAuthenticateEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i>
     	eventPhase=<i>value</i> header=<i>value</i> usernamePrompt=<i>value</i> passwordPrompt=<i>value</i>
     	urlPrompt=<i>value</i>] authenticationType=<i>value</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_DRM"><apiName>AUTHENTICATION_TYPE_DRM</apiName><shortdesc>
		The DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM constant defines the value of the 
		authenticationType property of a DRMAuthenticateEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drm</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		The <codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_DRM</codeph> constant defines the value of the 
		<codeph>authenticationType</codeph> property of a DRMAuthenticateEvent object. 
		
		<p>This event has the following properties:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Indicates whether the supplied credentials are for 
					authenticating against the Flash Media Rights Management Server (FMRMS) or a proxy server.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>header</codeph></entry><entry>The encrypted content file header provided by the server.</entry></row><row><entry><codeph>netstream</codeph></entry><entry>The NetStream object that initiated this event.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>A prompt for a password credential, provided by the server.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NetStream object.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>A prompt for a URL to display, provided by the server.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>A prompt for a user name credential, provided by the server.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:AUTHENTICATION_TYPE_PROXY"><apiName>AUTHENTICATION_TYPE_PROXY</apiName><shortdesc>
		The DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY constant defines the value of the 
		authenticationType property of a DRMAuthenticateEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proxy</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		The <codeph>DRMAuthenticateEvent.AUTHENTICATION_TYPE_PROXY</codeph> constant defines the value of the 
		<codeph>authenticationType</codeph> property of a DRMAuthenticateEvent object. 
		
		<p>This event has the following properties:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Indicates whether the supplied credentials are for 
					authenticating against the Flash Media Rights Management Server (FMRMS) or a proxy server.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>header</codeph></entry><entry>The encrypted content file header provided by the server.</entry></row><row><entry><codeph>netstream</codeph></entry><entry>The NetStream object that initiated this event.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>A prompt for a password credential, provided by the server.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NetStream object.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>A prompt for a URL to display, provided by the server.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>A prompt for a user name credential, provided by the server.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link><link href="flash.events.xml#DRMAuthenticateEvent/authenticationType"><linktext>DRMAuthenticateEvent.authenticationType</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:DRM_AUTHENTICATE"><apiName>DRM_AUTHENTICATE</apiName><shortdesc>
		The DRMAuthenticateEvent.DRM_AUTHENTICATE constant defines the value of the 
		type property of a DRMAuthenticateEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmAuthenticate</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		The <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph> constant defines the value of the 
		<codeph>type</codeph> property of a DRMAuthenticateEvent object. 
		
		<p>This event has the following properties:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>authenticationType</codeph></entry><entry>Indicates whether the supplied credentials are for 
					authenticating against the Flash Media Rights Management Server (FMRMS) or a proxy server.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph> there is no default behavior to cancel.</entry></row><row><entry><codeph>header</codeph></entry><entry>The encrypted content file header provided by the server.</entry></row><row><entry><codeph>netstream</codeph></entry><entry>The NetStream object that initiated this event.</entry></row><row><entry><codeph>passwordPrompt</codeph></entry><entry>A prompt for a password credential, provided by the server.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NetStream object.</entry></row><row><entry><codeph>urlPrompt</codeph></entry><entry>A prompt for a URL to display, provided by the server.</entry></row><row><entry><codeph>usernamePrompt</codeph></entry><entry>A prompt for a user name credential, provided by the server.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmAuthenticate"><linktext>flash.net.NetStream.drmAuthenticate</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:authenticationType:get"><apiName>authenticationType</apiName><shortdesc>
		Indicates whether the supplied credentials are for authenticating against Flash Media Rights Management Server (FMRMS)
		or a proxy server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.authenticationType, authenticationType
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		Indicates whether the supplied credentials are for authenticating against Flash Media Rights Management Server (FMRMS)
		or a proxy server. For example, the <codeph>"proxy"</codeph> option allows the application to authenticate against a proxy server 
		if an enterprise requires such a step before the user can access the Internet. Unless anonymous authentication is used, 
		after the proxy authentication, the user still needs to authenticate against FMRMS in order to obtain the voucher 
		and play the content. You can use <codeph>setDRMAuthenticationcredentials()</codeph> a second time, with <codeph>"drm"</codeph> 
		option, to authenticate against FMRMS.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:header:get"><apiName>header</apiName><shortdesc>
		The encrypted content file header provided by the server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.header, header
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		The encrypted content file header provided by the server. 
		It contains information about the context of the encrypted content.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:netstream:get"><apiName>netstream</apiName><shortdesc>
		The NetStream object that initiated this event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.netstream, netstream
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.net:NetStream</apiValueClassifier></apiValueDef><apiDesc>
		The NetStream object that initiated this event.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:passwordPrompt:get"><apiName>passwordPrompt</apiName><shortdesc>
		A prompt for a password credential, provided by the server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.passwordPrompt, passwordPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		A prompt for a password credential, provided by the server.  
		The string can include instruction for the type of password required.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:urlPrompt:get"><apiName>urlPrompt</apiName><shortdesc>
		A prompt for a URL string, provided by the server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.urlPrompt, urlPrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		A prompt for a URL string, provided by the server. 
		The string can provide the location where the username and password will be sent.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMAuthenticateEvent:usernamePrompt:get"><apiName>usernamePrompt</apiName><shortdesc>
		A prompt for a user name credential, provided by the server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMAuthenticateEvent.usernamePrompt, usernamePrompt
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		A prompt for a user name credential, provided by the server. 
		The string can include instruction for the type of user name required.
		For example, a content provider may require an e-mail address as the user name.
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
 An InteractiveObject dispatches a ContextMenuEvent object when the user opens or interacts with 
 the context menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for ContextMenuEvent events.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 An InteractiveObject dispatches a ContextMenuEvent object when the user opens or interacts with 
 the context menu. There are two types of 
 ContextMenuEvent objects:
 <ul>
   <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
   <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\ContextMenuEventExample.as"> The following example uses the <codeph>ContextMenuEventExample</codeph> class
 to remove the default context menu items from the Stage and add a new menu item that changes 
 the color of a square on the Stage. The example carries out the following
 tasks:
 
 <ol>
     <li>The <codeph>myContextMenu</codeph> property is declared and then assigned to a new ContextMenu
     object and the <codeph>redRectangle</codeph> property  (of type Sprite) is declared.</li>
     <li>The <codeph>removeDefaultItems()</codeph> method is called. This method removes all built-in context
     menu items except Print.</li>
 
     <li>The <codeph>addCustomMenuItems()</codeph> method is called. This method places a
     <codeph>Reverse Colors</codeph> menu item in the <codeph>defaultItems</codeph> array by using the
     <codeph>push()</codeph> method of Array. A <codeph>menuItemSelect</codeph> event listener is added to the
     ContextMenuItem object and the associated method is called <codeph>menuItemSelectHandler()</codeph>.
     This method prints some <codeph>trace()</codeph> statements whenever the user 
     selects Reverse Colors from the context menu. In addition the red square
     becomes black and the black text becomes red.</li>
 
     <li>Back in the constructor, a <codeph>menuSelect</codeph> event listener is added, along with
     the associated method <codeph>menuSelectHandler()</codeph>, which simply prints out three <codeph>trace()</codeph> statements 
     every time an item in the context menu is selected.</li>
 
 <li>The constructor calls <codeph>addChildren()</codeph>, which draws a red square and adds it
     to the display list, which immediately displays the square.</li>
 
     <li>Finally, <codeph>myContextMenu</codeph> is assigned to the context menu of the <codeph>redRectangle</codeph> property,
     so that the custom context menu is displayed only when the mouse pointer is over the square.</li>
 </ol>
<codeblock>
package {
    import flash.ui.ContextMenu;
    import flash.ui.ContextMenuItem;
    import flash.ui.ContextMenuBuiltInItems;
    import flash.events.ContextMenuEvent;
    import flash.display.Sprite;
    import flash.display.Shape;
    import flash.text.TextField;

    public class ContextMenuEventExample extends Sprite {
        private var myContextMenu:ContextMenu;
        private var menuLabel:String = "Reverse Colors";
        private var textLabel:String = "Right Click";
        private var redRectangle:Sprite;
        private var label:TextField;
        private var size:uint = 100;
        private var black:uint = 0x000000;
        private var red:uint = 0xFF0000;

        public function ContextMenuEventExample() {
            myContextMenu = new ContextMenu();
            removeDefaultItems();
            addCustomMenuItems();
            myContextMenu.addEventListener(ContextMenuEvent.MENU_SELECT, menuSelectHandler);

            addChildren();
            redRectangle.contextMenu = myContextMenu;
        }

        private function addChildren():void {
            redRectangle = new Sprite();
            redRectangle.graphics.beginFill(red);
            redRectangle.graphics.drawRect(0, 0, size, size);
            addChild(redRectangle);
            redRectangle.x = size;
            redRectangle.y = size;
            label = createLabel();
            redRectangle.addChild(label);
        }

        private function removeDefaultItems():void {
            myContextMenu.hideBuiltInItems();
            var defaultItems:ContextMenuBuiltInItems = myContextMenu.builtInItems;
            defaultItems.print = true;
        }

        private function addCustomMenuItems():void {
            var item:ContextMenuItem = new ContextMenuItem(menuLabel);
            myContextMenu.customItems.push(item);
            item.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, menuItemSelectHandler);
        }

        private function menuSelectHandler(event:ContextMenuEvent):void {
            trace("menuSelectHandler: " + event);
        }

        private function menuItemSelectHandler(event:ContextMenuEvent):void {
            trace("menuItemSelectHandler: " + event);
            var textColor:uint = (label.textColor == black) ? red : black;
            var bgColor:uint = (label.textColor == black) ? black : red;
            redRectangle.graphics.clear();
            redRectangle.graphics.beginFill(bgColor);
            redRectangle.graphics.drawRect(0, 0, size, size);
            label.textColor = textColor;
        }

        private function createLabel():TextField {
            var txtField:TextField = new TextField();
            txtField.text = textLabel;
            return txtField;
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.ui.xml#ContextMenu"><linktext>ContextMenu class</linktext></link><link href="flash.ui.xml#ContextMenuItem"><linktext>ContextMenuItem class</linktext></link></related-links><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT_menuItemSelect"><apiName>menuItemSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_ITEM_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:ContextMenuEvent:MENU_SELECT_menuSelect"><apiName>menuSelect</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ContextMenuEvent:MENU_SELECT</apiEventType><adobeApiEventClassifier>flash.events:ContextMenuEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ContextMenuEvent:ContextMenuEvent"><apiName>ContextMenuEvent</apiName><shortdesc>
	Creates an Event object that contains specific information about menu events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Possible values are:
	<ul>
	    <li><codeph>ContextMenuEvent.MENU_ITEM_SELECT</codeph></li>
	    <li><codeph>ContextMenuEvent.MENU_SELECT</codeph></li>
	</ul>
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property. 
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property.
	</apiDesc></apiParam><apiParam><apiItemName>mouseTarget</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>The display list object on which the user right-clicked to display the context menu. This could be the <codeph>contextMenuOwner</codeph> or one of its display list descendants.
	</apiDesc></apiParam><apiParam><apiItemName>contextMenuOwner</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>The display list object to which the menu is attached. This could be the <codeph>mouseTarget</codeph> or one of its ancestors in the display list.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for ContextMenuEvent objects.
 	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an Event object that contains specific information about menu events.
	Event objects are passed as parameters to event listeners.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ContextMenuEvent/MENU_ITEM_SELECT"><linktext>ContextMenuEvent.MENU_ITEM_SELECT</linktext></link><link href="flash.events.xml#ContextMenuEvent/MENU_SELECT"><linktext>ContextMenuEvent.MENU_SELECT</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ContextMenuEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the ContextMenuEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new ContextMenuEvent object with property values that match those of the original.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the ContextMenuEvent object and sets the value of each property to match that of the original. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ContextMenuEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the ContextMenuEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the ContextMenuEvent object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the ContextMenuEvent object. The string is in the following format:
	<p><codeph>[ContextMenuEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> ... contextMenuOwner=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ContextMenuEvent:MENU_ITEM_SELECT"><apiName>MENU_ITEM_SELECT</apiName><shortdesc>
	Defines the value of the type property of a menuItemSelect event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuItemSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>menuItemSelect</codeph> event object. 
	<p>This event has the following properties:</p>
		<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>The display list object to which the menu is attached.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>The display list object on which the user right-clicked to display the context menu.</entry></row><row><entry><codeph>target</codeph></entry><entry>The ContextMenuItem object that has been selected. 
	The target is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenuItem/event:menuItemSelect"><linktext>flash.ui.ContextMenuItem.menuItemSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:MENU_SELECT"><apiName>MENU_SELECT</apiName><shortdesc>
	Defines the value of the type property of a menuSelect event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>menuSelect</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>menuSelect</codeph> event object. 
	<p>This event has the following properties:</p>
	
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    
	<tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>contextMenuOwner</codeph></entry><entry>The display list object to which the menu is attached.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>mouseTarget</codeph></entry><entry>The display list object on which the user right-clicked to display the context menu.</entry></row><row><entry><codeph>target</codeph></entry><entry>The ContextMenu object that is about to be displayed. 
	The target is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.ui.xml#ContextMenu/event:menuSelect"><linktext>flash.ui.ContextMenu.menuSelect</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:contextMenuOwner:get"><apiName>contextMenuOwner</apiName><shortdesc>
	The display list object to which the menu is attached.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	The display list object to which the menu is attached. This could be the mouse target (<codeph>mouseTarget</codeph>) or one of its ancestors in the display list.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:ContextMenuEvent:isMouseTargetInaccessible:get"><apiName>isMouseTargetInaccessible</apiName><shortdesc>
	 Indicates whether the mouseTarget property was set to null for security
	 reasons.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates whether the <codeph>mouseTarget</codeph> property was set to <codeph>null</codeph> for security
	 reasons.  If the nominal value of <codeph>menuTarget</codeph> would be a reference to a
	 <codeph>DisplayObject</codeph> in another security sandbox, then <codeph>menuTarget</codeph> is set to
	 <codeph>null</codeph> unless there is permission in both directions across this sandbox boundary.  Permission is
	 established by calling <codeph>Security.allowDomain()</codeph> from a SWF file, or providing
	 a policy file from the server of an image file, and setting the <codeph>LoaderContext.checkPolicyFile</codeph>
	 flag when loading the image.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/mouseTarget"><linktext>ContextMenuEvent.mouseTarget</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:ContextMenuEvent:mouseTarget:get"><apiName>mouseTarget</apiName><shortdesc>
	The display list object on which the user right-clicked to display the context menu.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	The display list object on which the user right-clicked to display the context menu. This could be the display list object to which the
	menu is attached (<codeph>contextMenuOwner</codeph>) or one of its display list descendants.
	<p>The value of this property can be <codeph>null</codeph> in two circumstances: if there no mouse target, 
	for example when you mouse over something from 
	the background; or there is a mouse target, but it is in a security sandbox to which you don't have access.
		Use the <codeph>isMouseTargetInaccessible()</codeph> property to determine which of these reasons applies.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#ContextMenuEvent/isMouseTargetInaccessible"><linktext>ContextMenuEvent.isMouseTargetInaccessible</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
 Adobe AIR dispatches SQLEvent objects when one of the operations performed by
 a SQLConnection or SQLStatement instance completes successfully.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 Adobe AIR dispatches SQLEvent objects when one of the operations performed by
 a SQLConnection or SQLStatement instance completes successfully.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link><link href="flash.data.xml#SQLStatement"><linktext>flash.data.SQLStatement</linktext></link></related-links><adobeApiEvent id="flash.events:SQLEvent:ANALYZE_analyze"><apiName>analyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ATTACH_attach"><apiName>attach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ATTACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:BEGIN_begin"><apiName>begin</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:BEGIN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CANCEL_cancel"><apiName>cancel</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CANCEL</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:CLOSE_close"><apiName>close</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:CLOSE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMMIT_commit"><apiName>commit</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMMIT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:COMPACT_compact"><apiName>compact</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:COMPACT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DEANALYZE_deanalyze"><apiName>deanalyze</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DEANALYZE</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:DETACH_detach"><apiName>detach</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:DETACH</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:OPEN_open"><apiName>open</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:OPEN</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:REENCRYPT_reencrypt"><apiName>reencrypt</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:REENCRYPT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:RESULT_result"><apiName>result</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:RESULT</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:ROLLBACK_rollback"><apiName>rollback</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:ROLLBACK</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:SQLEvent:SCHEMA_schema"><apiName>schema</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLEvent:SCHEMA</apiEventType><adobeApiEventClassifier>flash.events:SQLEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SQLEvent:SQLEvent"><apiName>SQLEvent</apiName><shortdesc>
     Creates a SQLEvent object to pass as a parameter to event listeners.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event, available in the <codeph>type</codeph> property.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Determines whether the Event object participates in the bubbling
     stage of the event flow. The default value is <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled.
	 The default value is <codeph>false</codeph>.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Used to create new SQLEvent object.
	 
	 </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Creates a SQLEvent object to pass as a parameter to event listeners.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLEvent:clone"><apiName>clone</apiName><shortdesc>
	 Creates a copy of the SQLEvent object and sets the value of each property to match
	 that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new SQLEvent object with property values that match those of the original.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Creates a copy of the SQLEvent object and sets the value of each property to match
	 that of the original.
	 
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLEvent:ANALYZE"><apiName>ANALYZE</apiName><shortdesc>
     The SQLEvent.ANALYZE constant defines the value of the
	 type property of an analyze event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>analyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.ANALYZE</codeph> constant defines the value of the
	 <codeph>type</codeph> property of an <codeph>analyze</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.analyze()</codeph> method call completes successfully.
     
	 The <codeph>analyze</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/analyze()"><linktext>flash.data.SQLConnection.analyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ATTACH"><apiName>ATTACH</apiName><shortdesc>
     The SQLEvent.ATTACH constant defines the value of the
	 type property of an attach event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>attach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.ATTACH</codeph> constant defines the value of the
	 <codeph>type</codeph> property of an <codeph>attach</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.attach()</codeph> method call completes successfully.
     
	 The <codeph>attach</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/attach()"><linktext>flash.data.SQLConnection.attach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:BEGIN"><apiName>BEGIN</apiName><shortdesc>
     The SQLEvent.BEGIN constant defines the value of the
	 type property of a begin event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>begin</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.BEGIN</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>begin</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.begin()</codeph> method call completes successfully.
     
	 The <codeph>begin</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/begin()"><linktext>flash.data.SQLConnection.begin()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CANCEL"><apiName>CANCEL</apiName><shortdesc>
     The SQLEvent.CANCEL constant defines the value of the
     type property of a cancel event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cancel</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.CANCEL</codeph> constant defines the value of the
     <codeph>type</codeph> property of a <codeph>cancel</codeph> event object.
     This type of event is dispatched when a <codeph>SQLConnection.cancel()</codeph>
     method call completes successfully.
     
     The <codeph>cancel</codeph> event has the following properties:
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection or SQLStatement object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/cancel()"><linktext>flash.data.SQLConnection.cancel()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:CLOSE"><apiName>CLOSE</apiName><shortdesc>
     The SQLEvent.CLOSE constant defines the value of the
	 type property of a close event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>close</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.CLOSE</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>close</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.close()</codeph> method call completes successfully.
     
	 The <codeph>close</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/close()"><linktext>flash.data.SQLConnection.close()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMMIT"><apiName>COMMIT</apiName><shortdesc>
     The SQLEvent.COMMIT constant defines the value of the
	 type property of a commit event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>commit</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.COMMIT</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>commit</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.commit()</codeph> method call completes successfully.
     
	 The <codeph>commit</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/commit()"><linktext>flash.data.SQLConnection.commit()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:COMPACT"><apiName>COMPACT</apiName><shortdesc>
     The SQLEvent.COMPACT constant defines the value of the
	 type property of a compact event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>compact</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.COMPACT</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>compact</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.compact()</codeph> method call completes successfully.
     
	 The <codeph>compact</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/compact()"><linktext>flash.data.SQLConnection.compact()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DEANALYZE"><apiName>DEANALYZE</apiName><shortdesc>
     The SQLEvent.DEANALYZE constant defines the value of the
	 type property of a deanalyze event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>deanalyze</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.DEANALYZE</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>deanalyze</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.deanalyze()</codeph> method call completes successfully.
     
	 The <codeph>deanalyze</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/deanalyze()"><linktext>flash.data.SQLConnection.deanalyze()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:DETACH"><apiName>DETACH</apiName><shortdesc>
     The SQLEvent.DETACH constant defines the value of the
	 type property of a detach event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>detach</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.DETACH</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>detach</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.detach()</codeph> method call completes successfully.
     
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/detach()"><linktext>flash.data.SQLConnection.detach()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:OPEN"><apiName>OPEN</apiName><shortdesc>
     The SQLEvent.OPEN constant defines the value of the
	 type property of a open event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>open</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.OPEN</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>open</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.open()</codeph> or <codeph>SQLConnection.openAsync()</codeph> method call completes successfully.
     
	 The <codeph>open</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/open()"><linktext>flash.data.SQLConnection.open()</linktext></link><link href="flash.data.xml#SQLConnection/openAsync()"><linktext>flash.data.SQLConnection.openAsync()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:REENCRYPT"><apiName>REENCRYPT</apiName><shortdesc>
     The SQLEvent.REENCRYPT constant defines the value of the
	 type property of a reencrypt event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>reencrypt</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.REENCRYPT</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>reencrypt</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.reencrypt()</codeph> method call completes successfully.
     
	 The <codeph>reencrypt</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/reencrypt()"><linktext>flash.data.SQLConnection.reencrypt()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:RESULT"><apiName>RESULT</apiName><shortdesc>
     The SQLEvent.RESULT constant defines the value of the
	 type property of a result event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>result</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.RESULT</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>result</codeph> event object.
     Dispatched when either the <codeph>SQLStatement.execute()</codeph> method or
     <codeph>SQLStatement.next()</codeph> method completes successfully. Once the
     <codeph>SQLEvent.RESULT</codeph> event is dispatched the <codeph>SQLStatement.getResult()</codeph>
     method can be called to access the result data.
     
	 The <codeph>result</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLStatement object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLStatement/execute()"><linktext>flash.data.SQLStatement.execute()</linktext></link><link href="flash.data.xml#SQLStatement/next()"><linktext>flash.data.SQLStatement.next()</linktext></link><link href="flash.data.xml#SQLStatement/getResult()"><linktext>flash.data.SQLStatement.getResult()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:ROLLBACK"><apiName>ROLLBACK</apiName><shortdesc>
     The SQLEvent.ROLLBACK constant defines the value of the
	 type property of a rollback event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rollback</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.ROLLBACK</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>rollback</codeph> event object.
	 This type of event is dispatched when a
	 <codeph>SQLConnection.rollback()</codeph> method call completes successfully.
     
	 The <codeph>rollback</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/rollback()"><linktext>flash.data.SQLConnection.rollback()</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLEvent:SCHEMA"><apiName>SCHEMA</apiName><shortdesc>
     The SQLEvent.SCHEMA constant defines the value of the
	 type property of a schema event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>schema</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLEvent.SCHEMA</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a <codeph>schema</codeph> event object.
     Dispatched when the <codeph>SQLConnection.loadSchema()</codeph> method
     completes successfully. Once the <codeph>SQLEvent.SCHEMA</codeph> event
     is dispatched the <codeph>SQLConnection.getSchemaResult()</codeph> method can be
     used to get the schema information.
     
	 The <codeph>schema</codeph> event has the following properties:
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
	 object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object that performed the operation.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/loadSchema()"><linktext>flash.data.SQLConnection.loadSchema()</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
 A SQLUpdateEvent object is dispatched by a SQLConnection object when a data change occurs
 on any table associated with the SQLConnection instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 A SQLUpdateEvent object is dispatched by a SQLConnection object when a data change occurs
 on any table associated with the SQLConnection instance.
 A data change can result from the execution of a SQL <codeph>INSERT</codeph>,
 <codeph>UPDATE</codeph>, or <codeph>DELETE</codeph> statement, either directly or as
 a result of a trigger that fires in connection with the statement execution.
 
 </apiDesc><example conref="examples\SQLUpdateEvent.class.1.as"> The following example shows the use of of a SQLUpdateEvent instance
                 in responding to an <codeph>update</codeph> event.
<codeblock>

var dbStatement:SQLStatement;

function initConnection():void
{
    var dbFile:File = new File(File.separator + "employee.db");
    db.addEventListener(SQLEvent.OPEN, dbOpenHandler);
    db.addEventListener(SQLUpdateEvent.UPDATE, dbUpdateHandler);

    dbStatement.text = "UPDATE employees SET name = :name WHERE id = :id";
    dbStatement.parameters[:name] = "Bruce";
    dbStatement.parameters[:id] = 100;

    dbStatement.sqlConnection = db;

    db.open(dbFile);
}

function dbUpdateHandler(event:SQLUpdateEvent):void
{
    trace(event.type + " for table '" + event.table + "' was fired for row with ID:" + event.rowID);
}

function dbOpenHandler(event:SQLEvent):void
{
    dbStatement.execute();
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.data.xml#SQLConnection"><linktext>flash.data.SQLConnection</linktext></link></related-links><adobeApiEvent id="flash.events:SQLUpdateEvent:DELETE_delete"><apiName>delete</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:DELETE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:INSERT_insert"><apiName>insert</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:INSERT</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.events:SQLUpdateEvent:UPDATE_update"><apiName>update</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SQLUpdateEvent:UPDATE</apiEventType><adobeApiEventClassifier>flash.events:SQLUpdateEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail></adobeApiEvent><apiConstructor id="flash.events:SQLUpdateEvent:SQLUpdateEvent"><apiName>SQLUpdateEvent</apiName><shortdesc>
     Creates a new SQLUpdateEvent instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event, available through the <codeph>type</codeph> property.
     
     </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Determines whether the event object participates in the bubbling
     stage of the event flow. The default value is <codeph>false</codeph>.
     
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be cancelled. 
	 The default value is <codeph>false</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>table</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>Indicates the name of the table whose data changed.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>rowID</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>The unique row identifier of the row that was inserted, deleted, or updated.
     
     </apiDesc></apiParam><apiTipTexts><apiTipText>Used to create new SQLUpdateEvent object.
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
     Creates a new SQLUpdateEvent instance.
     
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:SQLUpdateEvent:clone"><apiName>clone</apiName><shortdesc>
     Creates a copy of the SQLUpdateEvent object and sets the value of each property to
     match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new SQLUpdateEvent object with property values that match those of the original.
     
     </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
     Creates a copy of the SQLUpdateEvent object and sets the value of each property to
     match that of the original.
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SQLUpdateEvent:DELETE"><apiName>DELETE</apiName><shortdesc>
     The SQLUpdateEvent.DELETE constant defines the value of the
     type property of a SQLConnection delete event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>delete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLUpdateEvent.DELETE</codeph> constant defines the value of the
     <codeph>type</codeph> property of a SQLConnection <codeph>delete</codeph> event.
     
     The <codeph>delete</codeph> event has the following properties:
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
     object with an event listener.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>The unique row identifier of the row that was inserted, deleted, or updated.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object on which the operation was performed.</entry></row><row><entry><codeph>table</codeph></entry><entry>The name of the table on which the change occurred.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:INSERT"><apiName>INSERT</apiName><shortdesc>
     The SQLUpdateEvent.INSERT constant defines the value of the
     type property of a SQLConnection insert event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insert</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The <codeph>SQLUpdateEvent.INSERT</codeph> constant defines the value of the
     <codeph>type</codeph> property of a SQLConnection <codeph>insert</codeph> event.
     
     The <codeph>insert</codeph> event has the following properties:
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
     object with an event listener.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>The unique row identifier of the row that was inserted, deleted, or updated.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object on which the operation was performed.</entry></row><row><entry><codeph>table</codeph></entry><entry>The name of the table on which the change occurred.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:UPDATE"><apiName>UPDATE</apiName><shortdesc>
	 The SQLUpdateEvent.UPDATE constant defines the value of the
	 type property of a SQLConnection update event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>update</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 The <codeph>SQLUpdateEvent.UPDATE</codeph> constant defines the value of the
	 <codeph>type</codeph> property of a SQLConnection <codeph>update</codeph> event.
	 
	 <p>The <codeph>update</codeph> event has the following properties:</p>
     
     <adobetable class="innertable">
         
         
         
         
         
         
         
     <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the event
     object with an event listener.</entry></row><row><entry><codeph>rowID</codeph></entry><entry>The unique row identifier of the row that was inserted, deleted, or updated.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SQLConnection object on which the operation was performed.</entry></row><row><entry><codeph>table</codeph></entry><entry>The name of the table on which the change occurred.</entry></row></tbody></tgroup></adobetable>
     
     </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:SQLUpdateEvent:rowID:get"><apiName>rowID</apiName><shortdesc>
     The unique row identifier of the row that was inserted, deleted, or updated.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
     The unique row identifier of the row that was inserted, deleted, or updated.
	 
	 <p>A row identifier is used to uniquely identify a row in a table within
     the database. The value is frequently generated by the database.</p>
	 
	 <p>The row identifier for a single SQL <codeph>INSERT</codeph> statement execution 
	 can be obtained through the <codeph>lastInsertRowID</codeph> property of the SQLResult object
	 returned by the SQLStatement object's <codeph>getResult()</codeph> method (when called after the
	 SQLStatement dispatches its <codeph>result</codeph> event).</p>
	 
	 <p>For more information about primary keys and generated row identifiers,
	 see the "<xref href="../../localDatabaseSQLSupport.html#createTable">CREATE TABLE</xref>" and 
	 "<xref href="../../localDatabaseSQLSupport.html#expressions">Expressions</xref>" sections in the appendix 
	 "<xref href="../../localDatabaseSQLSupport.html">SQL support in local databases</xref>."</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.data.xml#SQLConnection/lastInsertRowID"><linktext>flash.data.SQLConnection.lastInsertRowID</linktext></link><link href="flash.data.xml#SQLResult/lastInsertRowID"><linktext>flash.data.SQLResult.lastInsertRowID</linktext></link></related-links></apiValue><apiValue id="flash.events:SQLUpdateEvent:table:get"><apiName>table</apiName><shortdesc>
     The name of the table whose data change caused the event to be dispatched.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     The name of the table whose data change caused the event to be dispatched.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
	AIR dispatches a DRMErrorEvent object when a NetStream object, trying to play a digital rights management 
	(DRM) encrypted file, encounters a DRM-related error.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for DRM-enabled objects.
	</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:ErrorEvent</apiBaseClassifier></apiClassifierDef><apiDesc>
	AIR dispatches a DRMErrorEvent object when a NetStream object, trying to play a digital rights management 
	(DRM) encrypted file, encounters a DRM-related error. For example, a DRMErrorEvent object is dispatched
	when the content provider does not support the viewing application, 
	or when the user authorization fails, possibly because the user has not purchased the content.
	<p>
	In the case of invalid user credentials, the DRMAuthenticateEvent object handles the error by repeatedly dispatching 
	until the user enters valid credentials, or the AIR application denies further attempts. The application should listen 
	to any other DRM error events in order to detect, identify, and handle the DRM-related errors.
	</p>
	<p>
	This class provides properties containing the object throwing the exception, the error code, and,
	where applicable, a suberror code and text message containing information related to the error.
	</p> 
	
	<adobetable class="innertable">
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
 	  
 	  
 	  
 	  
 	  
	<tgroup cols="4"><thead><row><entry>Error code</entry><entry>Suberror code</entry><entry>Error Details</entry><entry>Description</entry></row></thead><tbody><row>
	    <entry><codeph>3300</codeph></entry>
	    <entry><codeph><i>Adobe Policy Server error code</i></codeph></entry>
	    <entry>n/a</entry>
	    <entry>The application detected an invalid voucher associated with the content.</entry>
	  </row><row>
	    <entry><codeph>3301</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>User authentication failed.</entry>
	  </row><row>
	    <entry><codeph>3302</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>Secure Sockets Layer (SSL) is not supported by the Flash Media Rights Management Server (FMRMS).</entry>
	  </row><row>
	    <entry><codeph>3303</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>The content has expired and is no longer available for viewing.</entry>
	  </row><row>
	    <entry><codeph>3304</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>User authorization failure. This can occur even if the user is authenticated, for example, 
	        if the user has not purchased the rights to view the content.</entry>
	  </row><row>
	    <entry><codeph>3305</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>Server URL</i></codeph></entry>
	    <entry>Cannot connect to the server.</entry>
	  </row><row>
	    <entry><codeph>3306</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>A client update is required; Flash Media Rights Management Server requires
	        a new digital rights management client engine.</entry>
	  </row><row>
	    <entry><codeph>3307</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>Generic internal digital rights management failure.</entry>
	  </row><row>
	    <entry><codeph>3308</codeph></entry>
	    <entry><codeph><i>Detailed decryption error code</i></codeph></entry>
	    <entry>n/a</entry>
	    <entry>An incorrect license key.</entry>
	  </row><row>
	    <entry><codeph>3309</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>Video content is corrupted.</entry>
	  </row><row>
	    <entry><codeph>3310</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph><i>publisherID</i>:<i>applicationID</i></codeph></entry>
	    <entry>The ID of the viewing application does not match a valid ID supported by the content publisher.
	  The content provider does not support the application.</entry>
	  </row><row>
	    <entry><codeph>3311</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry><codeph>Min=x:max=y</codeph></entry>
	    <entry>Application version does not match what is specified in the voucher.</entry>
	  </row><row>
	    <entry><codeph>3312</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>Verification of the voucher associated with the encrypted content failed, indicating
	        that the content may be corrupted.</entry>
	  </row><row>
	    <entry><codeph>3313</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>The voucher associated with the encrypted content could not be saved to Microsafe.</entry>
	  </row><row>
	    <entry><codeph>3314</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>Verification of the FLV header integrity failed, indicating that the content may 
	        be corrupted.</entry>
	  </row><row>
	    <entry><codeph>3315</codeph></entry>
	    <entry><codeph>0</codeph></entry>
	    <entry>n/a</entry>
	    <entry>Remote playback of the DRM protected content is not allowed.</entry>
	  </row><row>
 	    <entry><codeph>3316</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>n/a</entry>
 	    <entry>Missing AdobeCP module.</entry>
 	  </row><row>
 	    <entry><codeph>3317</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>n/a</entry>
 	    <entry>Load AdobeCP module failed.</entry>
 	  </row><row>
 	    <entry><codeph>3318</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>n/a</entry>
 	    <entry>Incompatible AdobeCP Version found.</entry>
 	  </row><row>
 	    <entry><codeph>3319</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>n/a</entry>
 	    <entry>Missing AdobeCP API entry point.</entry>
 	  </row><row>
 	    <entry><codeph>3320</codeph></entry>
 	    <entry><codeph>0</codeph></entry>
 	    <entry>n/a</entry>
 	    <entry>AdobeCP module is not authenticated. </entry>
 	  </row></tbody></tgroup></adobetable>
 	
 	</apiDesc><example conref="examples\DRMErrorEventExample.as"><codeblock>package
{
    import flash.display.Sprite;
    import flash.events.AsyncErrorEvent;
    import flash.events.NetStatusEvent;
    import flash.events.DRMErrorEvent;
    import flash.media.Video;
    import flash.net.NetConnection;
    import flash.net.NetStream;

    public class DRMVideoExample extends Sprite
    {
        var videoURL:String = "Video.flv";
        var videoConnection:NetConnection;
        var videoStream:NetStream;
        var video:Video = new Video();            

        public function DRMVideoExample()
        {
            videoConnection = new NetConnection();
            videoConnection.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoConnection.connect(null);
        }

        private function connectStream():void {
            videoStream = new NetStream(videoConnection);
            videoStream.addEventListener(NetStatusEvent.NET_STATUS, netStatusHandler);
            videoStream.addEventListener(AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);
            videoStream.addEventListener(DRMErrorEvent.DRM_ERROR, drmErrorEventHandler);
            video.attachNetStream(videoStream);
            videoStream.play(videoURL);
            addChild(video);
        }

        private function netStatusHandler(event:NetStatusEvent):void {
            switch (event.info.code) {
                case "NetConnection.Connect.Success":
                    connectStream();
                    break;
                case "NetStream.Play.StreamNotFound":
                    trace("Unable to locate video: " + videoURL);
                    break;
            }
        }

        private function asyncErrorHandler(event:AsyncErrorEvent):void {
            // ignore AsyncErrorEvent events.
        }

        private function drmErrorEventHandler(event:DRMErrorEvent):void {
            trace(event.toString());
        }
     }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.net.xml#NetStream"><linktext>flash.net.NetStream</linktext></link><link href="flash.events.xml#DRMErrorEvent/DRM_ERROR"><linktext>DRMErrorEvent.DRM_ERROR</linktext></link></related-links><adobeApiEvent id="flash.events:DRMErrorEvent:DRM_ERROR_drmError"><apiName>drmError</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:DRMErrorEvent:DRM_ERROR</apiEventType><adobeApiEventClassifier>flash.events:DRMErrorEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:DRMErrorEvent:DRMErrorEvent"><apiName>DRMErrorEvent</apiName><shortdesc>
 	    Creates an Event object that contains specific information about DRM error events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent, constructor
 	    </keyword></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unknown</apiData><apiDesc> The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one type of DRMAuthenticate event: <codeph>DRMAuthenticateEvent.DRM_AUTHENTICATE</codeph>.
		</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property.
		</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property.
		</apiDesc></apiParam><apiParam><apiItemName>inErrorDetail</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>Where applicable, the specific syntactical details of the error.
  		</apiDesc></apiParam><apiParam><apiItemName>inErrorCode</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>The major error code.
		</apiDesc></apiParam><apiParam><apiItemName>insubErrorID</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>The minor error ID.
 	    
 	    </apiDesc></apiParam><apiParam><apiItemName>inMetadata</apiItemName><apiOperationClassifier>flash.net.drm:DRMContentData</apiOperationClassifier><apiData>null</apiData></apiParam></apiConstructorDef><apiDesc>
 	    Creates an Event object that contains specific information about DRM error events.
 	    Event objects are passed as parameters to event listeners. 
	    
 	    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:DRMErrorEvent:clone"><apiName>clone</apiName><shortdesc>
		Creates a copy of the DRMErrorEvent object and sets the value of each property to match
		that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new DRMErrorEvent object with property values that match those of the original.
		</apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Creates a copy of the DRMErrorEvent object and sets the value of each property to match
		that of the original. 
		
		</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:DRMErrorEvent:toString"><apiName>toString</apiName><shortdesc>
		Returns a string that contains all the properties of the DRMErrorEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the DRMErrorEvent object.
  		
		</apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		Returns a string that contains all the properties of the DRMErrorEvent object. 
		The string is in the following format: 
     	<p><codeph>[DRMErrorEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i>
     	eventPhase=<i>value</i> errroID=<i>value</i> subErrorID=<i>value</i> text=<i>value</i></codeph></p>
     	
     	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:DRMErrorEvent:DRM_ERROR"><apiName>DRM_ERROR</apiName><shortdesc>
		The DRMErrorEvent.DRM_ERROR constant defines the value of the 
		type property of a drmError event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>drmError</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		The <codeph>DRMErrorEvent.DRM_ERROR</codeph> constant defines the value of the 
		<codeph>type</codeph> property of a <codeph>drmError</codeph> event object. 
		
		<p>This event has the following properties:</p>
		
		<adobetable class="innertable">
		    
		    
		    
		    
		    
		    
		 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>errorID</codeph></entry><entry>A numerical error code assigned to the problem.</entry></row><row><entry><codeph>subErrorID</codeph></entry><entry>An error code that indicates more detailed information about 
				the underlying problem.</entry></row><row><entry><codeph>target</codeph></entry><entry>The NetStream object.</entry></row></tbody></tgroup></adobetable>
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetStream/event:drmError"><linktext>flash.net.NetStream.drmError</linktext></link></related-links></apiValue><apiValue id="flash.events:DRMErrorEvent:subErrorID:get"><apiName>subErrorID</apiName><shortdesc>
		An error ID that indicates more detailed information about the underlying problem.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><keyword>DRMErrorEvent.subErrorID, subErrorID
		
		</keyword></asCustoms></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		An error ID that indicates more detailed information about the underlying problem.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:DRMErrorEvent:contentData:set"><apiName>contentData</apiName><shortdesc>
		 The DRMContentData for the media file.</shortdesc><prolog/><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.net.drm:DRMContentData</apiValueClassifier></apiValueDef><apiDesc>
		 The DRMContentData for the media file.
		 
		 <p>You can use the object referenced by the <codeph>contentData</codeph> property
		 to retrieve the related DRM voucher from the DRMManager voucher cache. The voucher
		 properties describe the license available to the user and may explain why the
		 DRM-protected content cannot be viewed.</p>
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
The EventDispatcher class is the base class for all runtime classes that dispatch events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseInterface>flash.events:IEventDispatcher</apiBaseInterface><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The EventDispatcher class is the base class for all <ph platform="javascript">runtime</ph> classes that dispatch events.
<ph platform="actionscript">The EventDispatcher class implements the IEventDispatcher interface and is the base class for 
the DisplayObject class. The EventDispatcher class allows any object on the display list to be 
an event target and as such, to use the methods of the IEventDispatcher interface.</ph>

<p platform="actionscript">Event targets are an important part of the Flash<sup>®</sup> Player and 
Adobe<sup>®</sup> AIR<sup>®</sup> event model. The event target serves 
as the focal point for how events flow through the display list hierarchy. 
When an event such as a mouse click or a keypress occurs, Flash Player or the AIR application dispatches an event 
object into the event flow from the root of the display list. The event object then makes its 
way through the display list until it reaches the event target, at which point it begins its 
return trip through the display list. This round-trip journey to the event target is 
conceptually divided into three phases: the capture phase comprises the journey from the 
root to the last node before the event target's node, the target phase comprises only the 
event target node, and the bubbling phase comprises any subsequent nodes encountered on 
the return trip to the root of the display list.</p>

<p platform="actionscript">In general, the easiest way for a user-defined class to gain event dispatching 
capabilities is to extend EventDispatcher.  If this is impossible (that is, if the class is already extending 
another class), you can instead implement the IEventDispatcher interface, create an EventDispatcher member, 
and write simple hooks to route calls into the aggregated EventDispatcher.</p>

<p platform="javascript">You can register functions to handle runtime events by calling the
<codeph>addEventListener()</codeph> method of the object dispatching the event.</p>

</apiDesc><example conref="examples\EventDispatcherExample.as"> The following example uses the classes <codeph>EventDispatcherExample</codeph> and 
 <codeph>CustomDispatcher</codeph>, a subclass of <codeph>EventDispatcher</codeph>, to show how a 
 custom event is created and dispatched.  The example carries out the following tasks:
 <ol>
     <li>The constructor of <codeph>EventDispatcherExample</codeph> creates a local variable
     <codeph>dispatcher</codeph> and assigns it to a new CustomDispatcher instance.</li>
     <li>Inside <codeph>CustomDispatcher</codeph>, a string is set so that the event has
     the name <codeph>action</codeph>, and the <codeph>doAction()</codeph> method is declared. When called, this method creates the <codeph>action</codeph>
     event and dispatches it using <codeph>EventDispatcher.dispatchEvent()</codeph>.</li>
     <li>The <codeph>dispatcher</codeph> property is then used to add the <codeph>action</codeph>
     event listener and associated subscriber method <codeph>actionHandler()</codeph>, which simply
     prints information about the event when it is dispatched.</li>
     <li>The <codeph>doAction()</codeph> method is invoked, dispatching the <codeph>action</codeph>
     event.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.events.Event;

    public class EventDispatcherExample extends Sprite {

        public function EventDispatcherExample() {
            var dispatcher:CustomDispatcher = new CustomDispatcher();
            dispatcher.addEventListener(CustomDispatcher.ACTION, actionHandler);
            dispatcher.doAction();
        }

        private function actionHandler(event:Event):void {
            trace("actionHandler: " + event);
        }
    }
}

import flash.events.EventDispatcher;
import flash.events.Event;

class CustomDispatcher extends EventDispatcher {
    public static var ACTION:String = "action";

    public function doAction():void {
        dispatchEvent(new Event(CustomDispatcher.ACTION));
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.DEACTIVATE_deactivate"><apiName>deactivate</apiName><shortdesc>
 [broadcast event] Dispatched when the Flash Player or AIR application operating
 loses system focus and is becoming inactive.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.DEACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [broadcast event] Dispatched when the <ph platform="actionscript">Flash Player or</ph> AIR application operating
 loses system focus and is becoming inactive. This event is a broadcast event, which means that it is dispatched 
 by all EventDispatcher objects with a listener registered for this event. <ph platform="actionscript">For more 
 information about broadcast events, see the DisplayObject class.</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:EventDispatcher_flash.events.Event.ACTIVATE_activate"><apiName>activate</apiName><shortdesc>
 [broadcast event] Dispatched when the Flash Player or AIR application gains  
 operating system focus and becomes active.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.ACTIVATE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 [broadcast event] Dispatched when the <ph platform="actionscript">Flash Player or</ph> AIR application gains  
 operating system focus and becomes active. This event is a broadcast event, which means that it is dispatched 
 by all EventDispatcher objects with a listener registered for this event. <ph platform="actionscript">For more 
 information about broadcast events, see the DisplayObject class.</ph>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="flash.display.xml#DisplayObject"><linktext>flash.display.DisplayObject</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:EventDispatcher:EventDispatcher"><apiName>EventDispatcher</apiName><shortdesc>
	Aggregates an instance of the EventDispatcher class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>target</apiItemName><apiOperationClassifier>flash.events:IEventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>The target object for events dispatched to the EventDispatcher object. 
	<ph platform="actionscript">This parameter is used when the EventDispatcher instance is aggregated by a class that implements IEventDispatcher; it is necessary so that the containing object can be the target for events.
	Do not use this parameter in simple cases in which a class extends EventDispatcher.</ph>
    <ph platform="javascript">Target objects are only relavent in display objects in SWF content, which
    use the ActionScript 3.0 display list architecture.</ph>
	
	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	Aggregates an instance of the EventDispatcher class.
	
    <p>The EventDispatcher class is generally used as a base class<ph platform="javascript"> in ActionScript 3.0
    code used in SWF content</ph>, which means that <ph platform="actionscript">most</ph> 
	<ph platform="javascript">JavaScript</ph> developers do not need to use 
    this constructor function. <ph platform="actionscript">However, advanced developers who are implementing 
	the IEventDispatcher interface need to use this constructor. 
	If you are unable to extend the EventDispatcher class and must
	instead implement the IEventDispatcher interface, use this constructor to aggregate an instance of the EventDispatcher class.</ph></p>
	
	</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:EventDispatcher:addEventListener"><apiName>addEventListener</apiName><shortdesc>
	Registers an event listener object with an EventDispatcher object so that the listener 
	receives notification of an event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>listener</codeph> specified is not a function.
	</apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of event.
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>The listener function that processes the event. This function must accept
    an Event object as its only parameter and must return nothing<ph platform="actionscript">, as this example shows:</ph>
	<ph platform="javascript">.</ph>
	
    <codeblock platform="actionscript">function(evt:Event):void</codeblock>
	
	<p>The function can have any name.</p>
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">This parameter applies to display objects in the
	ActionScript 3.0 display list architecture, used by SWF content.</ph>
	
	<ph platform="actionscript">Determines whether the listener works in the capture phase or the 
	target and bubbling phases. If <codeph>useCapture</codeph> is set to <codeph>true</codeph>, 
	the listener processes the event only during the capture phase and not in the 
	target or bubbling phase. If <codeph>useCapture</codeph> is <codeph>false</codeph>, the
	listener processes the event only during the target or bubbling phase. To listen for
	the event in all three phases, call <codeph>addEventListener</codeph> twice, once with 
	<codeph>useCapture</codeph> set to <codeph>true</codeph>, then again with
	<codeph>useCapture</codeph> set to <codeph>false</codeph>.</ph>
	
	</apiDesc></apiParam><apiParam><apiItemName>priority</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>The priority level of the event listener. The priority is designated by
	a signed 32-bit integer. The higher the number, the higher the priority. All listeners
	with priority <i>n</i> are processed before listeners of priority <i>n</i>-1. If two
	or more listeners share the same priority, they are processed in the order in which they
	were added. The default priority is 0.
	
	</apiDesc></apiParam><apiParam><apiItemName>useWeakReference</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the reference to the listener is strong or
	weak. A strong reference (the default) prevents your listener from being garbage-collected.
    A weak reference does not. <p>Class-level member functions are not subject to garbage 
    collection, so you can set <codeph>useWeakReference</codeph> to <codeph>true</codeph> for 
    class-level member functions without subjecting them to garbage collection. If you set
    <codeph>useWeakReference</codeph> to <codeph>true</codeph> for a listener that is a nested inner 
    function, the function will be garbage-collected and no longer persistent. If you create 
    references to the inner function (save it in another variable) then it is not 
    garbage-collected and stays persistent.</p>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Registers an event listener object with an EventDispatcher object so that the listener 
	receives notification of an event. <ph platform="actionscript">You can register event listeners on all nodes in the 
	display list for a specific type of event, phase, and priority.</ph>
	
	<p platform="javascript">JavaScript code in the AIR runtime uses this method to register
	event listeners for events defined by the AIR APIs. For other JavaScript events (such as the <codeph>onload</codeph>
	event of the DOM <codeph>body</codeph> object), you can use standard event handling techniques, as you would 
	for content running in the browser.</p>
	
	<p>After you successfully register an event listener, you cannot change its priority
	through additional calls to <codeph>addEventListener()</codeph>. To change a listener's
	priority, you must first call <codeph>removeListener()</codeph>. Then you can register the
	listener again with the new priority level. </p>
	
	<p>Keep in mind that after the listener is registered, subsequent calls to
	<codeph>addEventListener()</codeph> with a different <codeph>type</codeph> or
	<codeph>useCapture</codeph> value result in the creation of a separate listener registration. 
	<ph platform="actionscript">For example, if you first register a listener with <codeph>useCapture</codeph> set to 
	<codeph>true</codeph>, it listens only during the capture phase. If you call 
	<codeph>addEventListener()</codeph> again using the same listener object, but with
	<codeph>useCapture</codeph> set to <codeph>false</codeph>, you have two separate listeners: one
	that listens during the capture phase and another that listens during the target and
	bubbling phases.</ph>
	</p>
	
	<p platform="actionscript">You cannot register an event listener for only the target phase or the bubbling 
	phase. Those phases are coupled during registration because bubbling 
	applies only to the ancestors of the target node.</p>
	
	<p>If you no longer need an event listener, remove it by calling 
	<codeph>removeEventListener()</codeph>, or memory problems could result. Event listeners are not automatically
	removed from memory because the garbage
	collector does not remove the listener as long as the dispatching object exists (unless the <codeph>useWeakReference</codeph>
	parameter is set to <codeph>true</codeph>).</p>
		
	<p>Copying an EventDispatcher instance does not copy the event listeners attached to it. 
	(If your newly created node needs an event listener, you must attach the listener after
    creating the node.) However, if you move an EventDispatcher instance, the event listeners 
    attached to it move along with it.</p>
	
	
	<p platform="actionscript">If the event listener is being registered on a node while an event is being processed
	on this node, the event listener is not triggered during the current phase but can be 
	triggered during a later phase in the event flow, such as the bubbling phase.</p>
	
	<p platform="actionscript">If an event listener is removed from a node while an event is being processed on the node,
	it is still triggered by the current actions. After it is removed, the event listener is
	never invoked again (unless registered again for future processing). </p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:dispatchEvent"><apiName>dispatchEvent</apiName><shortdesc>
	Dispatches an event into the event flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The event dispatch recursion limit has been reached.
	</apiDesc><apiItemName>Error</apiItemName><apiOperationClassifier>Error</apiOperationClassifier></apiException><apiReturn><apiDesc>A value of <codeph>true</codeph> if the event was successfully dispatched. A value of <codeph>false</codeph> indicates failure or that <codeph>preventDefault()</codeph> was called 
	on the event.
	
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>event</apiItemName><apiOperationClassifier>flash.events:Event</apiOperationClassifier><apiDesc>The Event object that is dispatched into the event flow.
	If the event is being redispatched, a clone of the event is created automatically.
	After an event is dispatched, its <codeph>target</codeph> property cannot be changed, so you
	must create a new copy of the event for redispatching to work.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Dispatches an event into the event flow. The event target is the EventDispatcher 
	object upon which the <codeph>dispatchEvent()</codeph> method is called.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:hasEventListener"><apiName>hasEventListener</apiName><shortdesc>
	Checks whether the EventDispatcher object has any listeners registered for a specific type 
	of event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A value of <codeph>true</codeph> if a listener of the specified type is registered; 
	<codeph>false</codeph> otherwise.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of event.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Checks whether the EventDispatcher object has any listeners registered for a specific type 
	of event. This allows you to determine where an EventDispatcher object has altered
	handling of an event type in the event flow hierarchy. To determine whether a specific
	event type actually triggers an event listener, use <codeph>willTrigger()</codeph>.
	
	<p>The difference between <codeph>hasEventListener()</codeph> and <codeph>willTrigger()</codeph> 
	is that <codeph>hasEventListener()</codeph> examines only the object to 
	which it belongs, whereas <codeph>willTrigger()</codeph> examines the entire 
    event flow for the event specified by the <codeph>type</codeph> parameter.
	<ph platform="javascript">The event flow applies to the ActionScript 3.0
	display list, used in SWF content.</ph>
	</p>
	
	<p>When <codeph>hasEventListener()</codeph> is called from a LoaderInfo object, only the 
	listeners that the caller can access are considered.</p>
	
	</apiDesc></apiOperationDetail><related-links><link href="flash.events.xml#EventDispatcher/willTrigger()"><linktext>willTrigger()</linktext></link></related-links></apiOperation><apiOperation id="flash.events:EventDispatcher:removeEventListener"><apiName>removeEventListener</apiName><shortdesc>
	Removes a listener from the EventDispatcher object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of event.
	
	</apiDesc></apiParam><apiParam><apiItemName>listener</apiItemName><apiOperationClassifier>Function</apiOperationClassifier><apiDesc>The listener object to remove.
	
	</apiDesc></apiParam><apiParam><apiItemName>useCapture</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc><ph platform="javascript">This parameter applies to display objects in the
	ActionScript 3.0 display list architecture, used by SWF content.</ph>
	
	<ph platform="actionscript">Specifies whether the listener was registered for the capture phase or the 
	target and bubbling phases. If the listener was registered for both the capture phase and the
	target and bubbling phases, two calls to <codeph>removeEventListener()</codeph> are required 
	to remove both, one call with <codeph>useCapture()</codeph> set to <codeph>true</codeph>, and another 
	call with <codeph>useCapture()</codeph> set to <codeph>false</codeph>.</ph>
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Removes a listener from the EventDispatcher object. If there is no matching listener registered with the EventDispatcher object, a call to this method has no effect.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:EventDispatcher:willTrigger"><apiName>willTrigger</apiName><shortdesc>
	Checks whether an event listener is registered with this EventDispatcher object or any of 
	its ancestors for the specified event type.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A value of <codeph>true</codeph> if a listener of the specified type will be triggered; <codeph>false</codeph> otherwise.
	</apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of event.
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	Checks whether an event listener is registered with this EventDispatcher object or any of 
	its ancestors for the specified event type. This method returns <codeph>true</codeph> if an 
	event listener is triggered during any phase of the event flow when an event of the 
	specified type is dispatched to this EventDispatcher object or any of its descendants.
	
	<p>The difference between the <codeph>hasEventListener()</codeph> and the <codeph>willTrigger()</codeph> 
	methods is that <codeph>hasEventListener()</codeph> examines only the object to which it belongs, 
	whereas the <codeph>willTrigger()</codeph> method examines the entire event flow for the event specified by the
    <codeph>type</codeph> parameter. <ph platform="javascript">The event flow applies to the ActionScript 3.0
	display list, used in SWF content.</ph></p>
	
	<p>When <codeph>willTrigger()</codeph> is called from a LoaderInfo object, only the 
	listeners that the caller can access are considered.</p>
	
	</apiDesc></apiOperationDetail></apiOperation></apiClassifier><apiClassifier id="flash.events:EventPhase"><apiName>EventPhase</apiName><shortdesc>
 The EventPhase class provides values for the eventPhase property of the Event class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\EventPhaseExample.as -noswf
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The EventPhase class provides values for the <codeph>eventPhase</codeph> property of the Event class.
 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#Event"><linktext>Event class</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>EventDispatcher class</linktext></link></related-links><apiValue id="flash.events:EventPhase:AT_TARGET"><apiName>AT_TARGET</apiName><shortdesc>
	The target phase, which is the second phase of the event flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>2</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	The target phase, which is the second phase of the event flow.
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:BUBBLING_PHASE"><apiName>BUBBLING_PHASE</apiName><shortdesc>
	The bubbling phase, which is the third phase of the event flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	The bubbling phase, which is the third phase of the event flow.
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:EventPhase:CAPTURING_PHASE"><apiName>CAPTURING_PHASE</apiName><shortdesc>
	The capturing phase, which is the first phase of the event flow.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	The capturing phase, which is the first phase of the event flow.
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
 An object dispatches a FocusEvent object when the user changes the focus from one object 
 in the display list to another.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for Focus events.
 
  
  </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 An object dispatches a FocusEvent object when the user changes the focus from one object 
 in the display list to another. There are four types of focus events:
 <ul>
     <li><codeph>FocusEvent.FOCUS_IN</codeph></li>
     <li><codeph>FocusEvent.FOCUS_OUT</codeph></li>
     <li><codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph></li>
     <li><codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph></li>
 </ul>
 
 </apiDesc><example conref="examples\FocusEventExample.as"> The following example uses the <codeph>FocusEventExample</codeph> and 
 <codeph>CustomSprite</codeph> classes to show how focus can be used in conjunction with items drawn on the Stage to capture events and print information.  
 This example carries out the following tasks:
 <ol>
     <li>It declares the properties <codeph>child</codeph> (of type Sprite) and <codeph>childCount</codeph> (of type uint).</li>
    <li>A <codeph>for</codeph> loop creates five light blue squares at (0,0). It begins by
  assigning <codeph>child</codeph> to a new CustomSprite instance. Each time a CustomSprite
 object is created, the following happens:
     <ul>
             <li>The <codeph>size</codeph> property of type uint is set to 50 pixels and <codeph>bgColor</codeph> is set
                 to light blue. </li>
             <li>The <codeph>buttonMode</codeph> and <codeph>useHandCursor</codeph> properties of the 
             Sprite class are set to <codeph>true</codeph> within the constructor.</li>
             <li>An event listener of type <codeph>click</codeph> is instantiated, along with the associated subscriber
             <codeph>clickHandler()</codeph>.  The subscriber method creates a local variable <codeph>target</codeph> of
             type Sprite and assigns it whichever box was clicked. The Stage's focus is then assigned to 
             <codeph>target</codeph>.</li>
             <li>The <codeph>draw()</codeph> method is called, which creates a 50 x 50 pixel square by
             calling the <codeph>beginFill()</codeph>, <codeph>drawRect()</codeph>, and <codeph>endFill()</codeph> methods of 
             the Graphics class and the instance properties.</li>
      </ul></li>
         <li>In the for loop, the <codeph>configureListeners()</codeph> method is called, which instantiates three event 
         listeners/subscribers:
         <ul>
             <li><codeph>focusIn</codeph>/<codeph>focusInHandler()</codeph> is dispatched after the <codeph>click</codeph> event
             for whichever display list object (box) is clicked.</li>
             <li><codeph>focusOut</codeph>/<codeph>focusOutHandler()</codeph> is dispatched when another box is clicked or 
             if the focus leaves the Stage (for example, by clicking outside Flash Player).</li>
             <li><codeph>keyFocusChange</codeph>/<codeph>keyFocusChangeHandler()</codeph> is dispatched if you use the Tab key
             or the left-arrow or right-arrow keys to select a display list object. The <codeph>keyFocusChangeHandler()</codeph>
             method traps the left-arrow and right-arrow keys, however, and calls the <codeph>preventDefault()</codeph> method
             to disable them.</li>
             
      </ul></li>
     <li>In the <codeph>for</codeph> loop, each square is added to the display list and displayed (all in 
     the same area) by means of <codeph>addChild()</codeph>.</li>
     <li>The constructor then calls <codeph>refreshLayout()</codeph>, which distributes the orange
     squares across the top (y = 0) of the display with 5 pixels separating each square.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.display.DisplayObject;
    import flash.events.FocusEvent;
    import flash.events.IEventDispatcher;

    public class FocusEventExample extends Sprite {
        private var gutter:uint = 5;
        private var childCount:uint = 5;

        public function FocusEventExample() {
            var child:Sprite;
            for(var i:uint; i &lt; childCount; i++) {
                child = new CustomSprite();
                configureListeners(child);
                addChild(child);
            }
            refreshLayout();
        }

        private function configureListeners(dispatcher:IEventDispatcher):void {
            dispatcher.addEventListener(FocusEvent.FOCUS_IN, focusInHandler);
            dispatcher.addEventListener(FocusEvent.FOCUS_OUT, focusOutHandler);
            dispatcher.addEventListener(FocusEvent.KEY_FOCUS_CHANGE, keyFocusChangeHandler);
            dispatcher.addEventListener(FocusEvent.MOUSE_FOCUS_CHANGE, mouseFocusChangeHandler);
        }

        private function refreshLayout():void {
            var ln:uint = numChildren;
            var child:DisplayObject = getChildAt(0);
            var lastChild:DisplayObject = child;
            for(var i:uint = 1; i &lt; ln; i++) {
                child = getChildAt(i);
                child.x = lastChild.x + lastChild.width + gutter;
                lastChild = child;
            }
        }

        private function focusInHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusInHandler: " + target.name);
        }

        private function focusOutHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("focusOutHandler: " + target.name);
        }

        private function keyFocusChangeHandler(event:FocusEvent):void {
            if(event.keyCode == 39 || event.keyCode == 37){
                event.preventDefault()
            }
            var target:CustomSprite = CustomSprite(event.target);
            trace("keyFocusChangeHandler: " + target.name);
        }
        private function mouseFocusChangeHandler(event:FocusEvent):void {
            var target:CustomSprite = CustomSprite(event.target);
            trace("mouseFocusChangeHandler: " + target.name);
        }
    }
}

import flash.display.Sprite;
import flash.events.MouseEvent;

class CustomSprite extends Sprite {
    private var size:uint = 50;
    private var bgColor:uint = 0x00CCFF;

    public function CustomSprite() {
        buttonMode = true;
        useHandCursor = true;
        addEventListener(MouseEvent.CLICK, clickHandler);
        draw(size, size);
    }

    private function draw(w:uint, h:uint):void {
        graphics.beginFill(bgColor);
        graphics.drawRect(0, 0, w, h);
        graphics.endFill();
    }

    private function clickHandler(event:MouseEvent):void {
        var target:Sprite = Sprite(event.target);
        trace("clickHandler: " + target.name);
        stage.focus = target;
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.events:FocusEvent:FOCUS_IN_focusIn"><apiName>focusIn</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_IN</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:FOCUS_OUT_focusOut"><apiName>focusOut</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:FOCUS_OUT</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:KEY_FOCUS_CHANGE_keyFocusChange"><apiName>keyFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:KEY_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE_mouseFocusChange"><apiName>mouseFocusChange</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:FocusEvent:MOUSE_FOCUS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events:FocusEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:FocusEvent:FocusEvent"><apiName>FocusEvent</apiName><shortdesc>
    Creates an Event object with specific information relevant to focus events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Possible values are:
	<codeph>FocusEvent.FOCUS_IN</codeph>, <codeph>FocusEvent.FOCUS_OUT</codeph>, <codeph>FocusEvent.KEY_FOCUS_CHANGE</codeph>, and <codeph>FocusEvent.MOUSE_FOCUS_CHANGE</codeph>.
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc> Determines whether the Event object participates in the bubbling stage of the event flow.
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled.
	</apiDesc></apiParam><apiParam><apiItemName>relatedObject</apiItemName><apiOperationClassifier>flash.display:InteractiveObject</apiOperationClassifier><apiData>null</apiData><apiDesc>Indicates the complementary InteractiveObject instance that is affected by the change in focus. For example, when a <codeph>focusIn</codeph> event occurs, <codeph>relatedObject</codeph> represents the InteractiveObject that has lost focus.
	</apiDesc></apiParam><apiParam><apiItemName>shiftKey</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the Shift key modifier is activated.
	</apiDesc></apiParam><apiParam><apiItemName>keyCode</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0</apiData><apiDesc>Indicates the code of the key pressed to trigger a <codeph>keyFocusChange</codeph> event.
	</apiDesc></apiParam><apiParam><apiItemName>direction</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>none</apiData><apiDesc>Indicates from which direction the target interactive object is being activated. Set to
	<codeph>FocusDirection.NONE</codeph> (the default value) for all events other than <codeph>focusIn</codeph>.
    
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for FocusEvent objects.
     
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    Creates an Event object with specific information relevant to focus events.
	Event objects are passed as parameters to event listeners.
    
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#FocusEvent/FOCUS_IN"><linktext>FOCUS_IN</linktext></link><link href="flash.events.xml#FocusEvent/FOCUS_OUT"><linktext>FOCUS_OUT</linktext></link><link href="flash.events.xml#FocusEvent/KEY_FOCUS_CHANGE"><linktext>KEY_FOCUS_CHANGE</linktext></link><link href="flash.events.xml#FocusEvent/MOUSE_FOCUS_CHANGE"><linktext>MOUSE_FOCUS_CHANGE</linktext></link><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:FocusEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of the FocusEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new FocusEvent object with property values that match those of the original.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of the FocusEvent object and sets the value of each property to match that of the original.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:FocusEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the FocusEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the FocusEvent object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the FocusEvent object. The string is in the following format:
	<p><codeph>[FocusEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> relatedObject=<i>value</i> shiftKey=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:FocusEvent:FOCUS_IN"><apiName>FOCUS_IN</apiName><shortdesc>
	Defines the value of the type property of a focusIn event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusIn</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>focusIn</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0; applies only to <codeph>keyFocusChange</codeph> events.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>The complementary InteractiveObject instance that is affected by the change in focus.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>; applies only to <codeph>keyFocusChange</codeph> events.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance that has just received focus. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.
	</entry></row><row><entry><codeph>direction</codeph></entry><entry>The direction from which focus was assigned. This property reports
	the value of the <codeph>direction</codeph> parameter of the <codeph>assignFocus()</codeph> method of the stage. 
	If the focus changed through some other means, the value will always be <codeph>FocusDirection.NONE</codeph>.
	Applies only to <codeph>focusIn</codeph> events. For all other focus events the value will be 
	<codeph>FocusDirection.NONE</codeph>.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusIn"><linktext>flash.display.InteractiveObject.focusIn</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:FOCUS_OUT"><apiName>FOCUS_OUT</apiName><shortdesc>
	Defines the value of the type property of a focusOut event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>focusOut</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>focusOut</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0; applies only to <codeph>keyFocusChange</codeph> events.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>The complementary InteractiveObject instance that is affected by the change in focus.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>; applies only to <codeph>keyFocusChange</codeph> events.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance that has just lost focus. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:focusOut"><linktext>flash.display.InteractiveObject.focusOut</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:KEY_FOCUS_CHANGE"><apiName>KEY_FOCUS_CHANGE</apiName><shortdesc>
	Defines the value of the type property of a keyFocusChange event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>keyFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>keyFocusChange</codeph> event object. 
	
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; call the <codeph>preventDefault()</codeph> method
	to cancel default behavior.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing 
	the Event 
	object with an event listener.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>The key code value of the key pressed to trigger a <codeph>keyFocusChange</codeph> event.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>The complementary InteractiveObject instance that is affected by the change in focus.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>true</codeph> if the Shift key modifier is activated; <codeph>false</codeph> otherwise.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance that currently has focus. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.
	</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:keyFocusChange"><linktext>flash.display.InteractiveObject.keyFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:MOUSE_FOCUS_CHANGE"><apiName>MOUSE_FOCUS_CHANGE</apiName><shortdesc>
	Defines the value of the type property of a mouseFocusChange event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>mouseFocusChange</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Defines the value of the <codeph>type</codeph> property of a <codeph>mouseFocusChange</codeph> event object. 
	<p>This event has the following properties:</p>
	<adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	         
	    
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>true</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>true</codeph>; call the <codeph>preventDefault()</codeph> method 
	to cancel default behavior.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>keyCode</codeph></entry><entry>0; applies only to <codeph>keyFocusChange</codeph> events.</entry></row><row><entry><codeph>relatedObject</codeph></entry><entry>The complementary InteractiveObject instance that is affected by the change in focus.</entry></row><row><entry><codeph>shiftKey</codeph></entry><entry><codeph>false</codeph>; applies only to <codeph>keyFocusChange</codeph> events.</entry></row><row><entry><codeph>target</codeph></entry><entry>The InteractiveObject instance that currently has focus. 
	The <codeph>target</codeph> is not always the object in the display list 
	that registered the event listener. Use the <codeph>currentTarget</codeph> 
	property to access the object in the display list that is currently processing the event.
	</entry></row></tbody></tgroup></adobetable>
	
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#InteractiveObject/event:mouseFocusChange"><linktext>flash.display.InteractiveObject.mouseFocusChange</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:direction:get"><apiName>direction</apiName><shortdesc>
	Specifies direction of focus for a focusIn event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Specifies direction of focus for a <codeph>focusIn</codeph> event.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.display.xml#FocusDirection"><linktext>flash.display.FocusDirection</linktext></link><link href="flash.display.xml#Stage/assignFocus()"><linktext>flash.display.Stage.assignFocus()</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:isRelatedObjectInaccessible:get"><apiName>isRelatedObjectInaccessible</apiName><shortdesc>
	 If true, the relatedObject property is set to null for 
	 reasons related to security sandboxes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 If <codeph>true</codeph>, the <codeph>relatedObject</codeph> property is set to <codeph>null</codeph> for 
	 reasons related to security sandboxes.  If the nominal value of <codeph>relatedObject</codeph> is a reference to a
	 DisplayObject in another sandbox, <codeph>relatedObject</codeph> is set to
	 <codeph>null</codeph> unless there is permission in both directions across this sandbox boundary.  Permission is
	 established by calling <codeph>Security.allowDomain()</codeph> from a SWF file, or by providing
	 a policy file from the server of an image file, and setting the <codeph>LoaderContext.checkPolicyFile</codeph>
	 property when loading the image.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/relatedObject"><linktext>FocusEvent.relatedObject</linktext></link><link href="flash.system.xml#Security/method:allowDomain"><linktext>Security.allowDomain()</linktext></link><link href="flash.system.xml#LoaderContext/property:checkPolicyFile"><linktext>LoaderContext.checkPolicyFile</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:keyCode:get"><apiName>keyCode</apiName><shortdesc>
	The key code value of the key pressed to trigger a keyFocusChange event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
	The key code value of the key pressed to trigger a <codeph>keyFocusChange</codeph> event.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:FocusEvent:relatedObject:get"><apiName>relatedObject</apiName><shortdesc>
	A reference to the complementary InteractiveObject instance that is affected by the
	change in focus.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:InteractiveObject</apiValueClassifier></apiValueDef><apiDesc>
	A reference to the complementary InteractiveObject instance that is affected by the
	change in focus. For example, when a <codeph>focusOut</codeph> event occurs, the
	<codeph>relatedObject</codeph> represents the InteractiveObject instance that has gained focus.
	<p>The value of this property can be <codeph>null</codeph> in two circumstances: if there no related object, 
	or there is a related object, but it is in a security sandbox to which you don't have access.
		Use the <codeph>isRelatedObjectInaccessible()</codeph> property to determine which of these reasons applies.</p>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.events.xml#FocusEvent/isRelatedObjectInaccessible"><linktext>FocusEvent.isRelatedObjectInaccessible</linktext></link></related-links></apiValue><apiValue id="flash.events:FocusEvent:shiftKey:get"><apiName>shiftKey</apiName><shortdesc>
	Indicates whether the Shift key modifier is activated, in which case the value is 
	true.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the Shift key modifier is activated, in which case the value is 
	<codeph>true</codeph>. Otherwise, the value is <codeph>false</codeph>. This property is 
	used only if the FocusEvent is of type <codeph>keyFocusChange</codeph>.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 The NativeApplication object of an AIR application dispatches a browserInvoke event when the
	 application is invoked as the result of a SWF file in the browser using the browser
	 invocation feature.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
	 The NativeApplication object of an AIR application dispatches a <codeph>browserInvoke</codeph> event when the
	 application is invoked as the result of a SWF file in the browser using the browser
	 invocation feature. The NativeApplication object also dispatches a <codeph>browserInvoke</codeph> event when
	 a user instantiates the seamless installation feature in the browser and the SWF file in
	 the browser passes an array to the <codeph>arguments</codeph> parameter of the 
	 <codeph>launchApplication()</codeph> method of the air.swf file. (For details, see 
	 "Distributing, installing and running AIR applications" in the AIR developer's guide.)
	 
	 <p>Browser invocation is permitted only if an application specifies the following in
	 the application descriptor file:</p>
	 
	 <codeblock>&lt;allowBrowserInvocation&gt;true&lt;/allowBrowserInvocation&gt;</codeblock>
	 
	 <p>If the application is not running, the NativeApplication object dispatches both an InvokeEvent 
	 event and a <codeph>browserInvoke</codeph> event when launched from the browser. Otherwise,
	 if the application <i>is</i> already running, the NativeApplication object dispatches only 
	 a <codeph>browserInvoke</codeph> event when launched from the browser. </p>
	 
	 <p> If the application is launched as the result of a seamless installation from the browser (with 
	 the user choosing to launch upon installation), the NativeApplication object dispatches a BrowserInvoke 
	 event only if arguments were passed (via the SWF file in the browser passing an array to
	 the <codeph>arguments</codeph> parameter of the <codeph>installApplication()</codeph>
	 method of the air.swf file). For details, see "Distributing, installing, and running AIR 
	 applications" in the AIR developer's guide.</p>
	 
	 <p>Like the <codeph>invokeEvent</codeph> events, <codeph>browserInvokeEvent</codeph> events are dispatched by the 
	 NativeApplication object (<codeph>NativeApplication.nativeApplication</codeph>). To receive <codeph>browserInvoke</codeph> 
	 events, call the <codeph>addEventListener()</codeph> method of the NativeApplication object. When an event listener 
	 registers for a <codeph>browserInvoke</codeph> event, it will also receive all <codeph>browserInvoke</codeph> events that 
	 occurred before the registration. These are dispatched after the call to <codeph>addEventListener()</codeph> 
	 returns, but not necessarily before other <codeph>browserInvoke</codeph> events that might be received after registration. 
	 This allows you to handle <codeph>browserInvoke</codeph> events that have occurred before your initialization code 
	 is executed (such as when the application was initially invoked from the browser). Keep in mind that if you
	 add an event listener later in execution (after application initialization), it still receives all 
	 <codeph>browserInvoke</codeph> events that have occurred since the application started.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="flash.events.xml#InvokeEvent"><linktext>flash.events.InvokeEvent</linktext></link><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links><adobeApiEvent id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE_invoke"><apiName>invoke</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:BrowserInvokeEvent:BROWSER_INVOKE</apiEventType><adobeApiEventClassifier>flash.events:BrowserInvokeEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:BrowserInvokeEvent:BrowserInvokeEvent"><apiName>BrowserInvokeEvent</apiName><shortdesc>
	 The constructor function for the BrowserInvokeEvent class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of the event, accessible as <codeph>Event.type</codeph>.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Set to <codeph>false</codeph> for a BrowserInvokeEvent object.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Set to <codeph>false</codeph> for a BrowserInvokeEvent object.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>arguments</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiDesc>An array of arguments (strings) to pass to the application.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>sandboxType</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The sandbox type for the content in the browser.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>securityDomain</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The security domain for the content in the browser.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isHTTPS</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Whether the content in the browser uses the HTTPS URL scheme.
	 
	 </apiDesc></apiParam><apiParam><apiItemName>isUserEvent</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiDesc>Whether the browser invocation was the result of a user event.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 The constructor function for the BrowserInvokeEvent class.
	 
	 Generally, developers do not call the <codeph>BrowserInvokeEvent()</codeph> constructor directly.  
	 Only the runtime should create a BrowserInvokeEvent object.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:BrowserInvokeEvent:clone"><apiName>clone</apiName><shortdesc>
		 Creates a new copy of this event.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>The copy of the event.
		 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
		 Creates a new copy of this event.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:BrowserInvokeEvent:BROWSER_INVOKE"><apiName>BROWSER_INVOKE</apiName><shortdesc>
		 The BrowserInvokeEvent.BROWSER_INVOKE constant defines the value of the type 
		 property of a BrowserInvokeEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>browserInvoke</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The <codeph>BrowserInvokeEvent.BROWSER_INVOKE</codeph> constant defines the value of the <codeph>type</codeph> 
		 property of a BrowserInvokeEvent object.
		 
		 <p>The BrowserInvokeEvent object has the following properties:</p>
		 <adobetable class="innertable">
		    
		     
		    
		    
		    
		    
		     
		    
		     
		        
		  <tgroup cols="2"><thead><row><entry>Properties</entry><entry>Values</entry></row></thead><tbody><row><entry><codeph>arguments</codeph></entry><entry>The array of string arguments passed 
		 during this invocation.</entry></row><row><entry><codeph>sandBoxType</codeph></entry><entry>A string representing the 
		 the sandbox type for the content in the browser (either 
		 <codeph>Security.APPLICATION</codeph>, <codeph>Security.LOCAL_TRUSTED</codeph>, <codeph>Security.LOCAL_WITH_FILE</codeph>,
		 <codeph>Security.LOCAL_LOCAL_WITH_NETWORK</codeph>, or <codeph>Security.REMOTE</codeph>).</entry></row><row><entry><codeph>securityDomain</codeph></entry><entry>A string representing the 
		 the security domain for the content in the browser (such as <codeph>"www.example.com"</codeph>).</entry></row><row><entry><codeph>isHTTPS</codeph></entry><entry>Whether the browser content uses the
		 HTTPS URL scheme (<codeph>true</codeph>) or not (<codeph>false</codeph>)</entry></row><row><entry><codeph>isUserEvent</codeph></entry><entry>Whether the browser invocation resulted
		 from a user event (always <codeph>true</codeph> in AIR 1.0).</entry></row><row><entry><codeph>bubbles</codeph></entry><entry>No.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; 
		 There is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>Indicates the object that is 
		 actively processing this InvokeEvent object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>Always the NativeApplication object. 
		    </entry></row></tbody></tgroup></adobetable>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.desktop.xml#NativeApplication"><linktext>flash.desktop.NativeApplication</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:arguments:get"><apiName>arguments</apiName><shortdesc>
		 An array of arguments (strings) to pass to the application.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
		 An array of arguments (strings) to pass to the application.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isHTTPS:get"><apiName>isHTTPS</apiName><shortdesc>
		 Whether the content in the browser uses the HTTPS 
		 URL scheme (true) or not (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Whether the content in the browser uses the HTTPS 
		 URL scheme (<codeph>true</codeph>) or not (<codeph>false</codeph>).
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:isUserEvent:get"><apiName>isUserEvent</apiName><shortdesc>
		 Whether the browser invocation resulted in a user event (such as
		 a mouse click).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Whether the browser invocation resulted in a user event (such as
		 a mouse click). In AIR 1.0, this is always set to <codeph>true</codeph>;
		 AIR requires a user event to initiate a call to the browser invocation feature.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:BrowserInvokeEvent:sandboxType:get"><apiName>sandboxType</apiName><shortdesc>
		 The sandbox type for the content in the browser.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The sandbox type for the content in the browser. This can be set
		 to one of the following values:
		 
		 <ul>
		 
		 	<li><codeph>Security.APPLICATION</codeph> — The content is in
		 the application security sandbox.</li>
		 
		 	<li><codeph>Security.LOCAL_TRUSTED</codeph> — The content is in
		 the local-trusted security sandbox.</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_FILE</codeph> — The content is in
		 the local-with-filesystem security sandbox.</li>
		 
		 	<li><codeph>Security.LOCAL_WITH_NETWORK</codeph> — The content is in
		 the local-with-networking security sandbox.</li>
		 
		 	<li><codeph>Security.REMOTE</codeph> — The content is in
		 a remote (network) domain</li>
		 
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#Security/sandboxType"><linktext>flash.system.Security.sandboxType</linktext></link></related-links></apiValue><apiValue id="flash.events:BrowserInvokeEvent:securityDomain:get"><apiName>securityDomain</apiName><shortdesc>
		 The security domain for the content in the browser, such as
		 "www.adobe.com" or "www.example.org".</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The security domain for the content in the browser, such as
		 <codeph>"www.adobe.com"</codeph> or <codeph>"www.example.org"</codeph>.
		 This property is set only for content in the remote security
		 sandbox (for content from a network domain), not for content
		 in a local or application security sandbox.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
 A FileStream object dispatches OutputProgressEvent objects as pending asynchronous file write operations are 
 performed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for output progress events (for asynchronous file write operations).
 
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 A FileStream object dispatches OutputProgressEvent objects as pending asynchronous file write operations are 
 performed. There is one type of output progress event: <codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links><adobeApiEvent id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS_outputProgress"><apiName>outputProgress</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:OutputProgressEvent:OUTPUT_PROGRESS</apiEventType><adobeApiEventClassifier>flash.events:OutputProgressEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:OutputProgressEvent:OutputProgressEvent"><apiName>OutputProgressEvent</apiName><shortdesc>
    Creates an Event object that contains information about output progress events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. There is only one type of error event:
    <codeph>OutputProgressEvent.OUTPUT_PROGRESS</codeph>.
    
    </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc> Determines whether the Event object participates in the bubbling stage of the event flow. 
    </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. 
    </apiDesc></apiParam><apiParam><apiItemName>bytesPending</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>The number of bytes not yet written.
    </apiDesc></apiParam><apiParam><apiItemName>bytesTotal</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0</apiData><apiDesc>The total number of bytes written or with pending writes.
    
    </apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for OutputProgressEvent objects.
    </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
    Creates an Event object that contains information about output progress events.
    Event objects are passed as parameters to event listeners.
    
    </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.events:OutputProgressEvent:clone"><apiName>clone</apiName><shortdesc>
    Creates a copy of the OutputProgressEvent object and sets each property's value to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new OutputProgressEvent object with property values that match those of the original.
    </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Creates a copy of the OutputProgressEvent object and sets each property's value to match that of the original. 
    
    </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:OutputProgressEvent:toString"><apiName>toString</apiName><shortdesc>
    Returns a string that contains all the properties of the OutputProgressEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the OutputProgressEvent object.
    </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
    Returns a string that contains all the properties of the OutputProgressEvent object. The string is in the following format:
    
    <p><codeph>[OutputProgressEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> eventPhase=<i>value</i> bytesPending=<i>value</i> bytesTotal=<i>value</i>]</codeph></p>
    
    </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:OutputProgressEvent:OUTPUT_PROGRESS"><apiName>OUTPUT_PROGRESS</apiName><shortdesc>
    Defines the value of the type property of an outputProgress event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>outputProgress</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
    Defines the value of the <codeph>type</codeph> property of an <codeph>outputProgress</codeph> event object.
    
    <p>This event has the following properties:</p>
    
    <adobetable class="innertable">
        
        
        
         
        
        
        
     <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>bytesPending</codeph></entry><entry>The number of bytes remaining to be written at the time the 
    listener processes the event.</entry></row><row><entry><codeph>bytesTotal</codeph></entry><entry>The total number of bytes that ultimately 
    will be written if the write process succeeds.</entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
    object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The FileStream object reporting progress. </entry></row></tbody></tgroup></adobetable>
    
    </apiDesc></apiValueDetail><related-links><link href="flash.filesystem.xml#FileStream"><linktext>flash.filesystem.FileStream</linktext></link></related-links></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesPending:get"><apiName>bytesPending</apiName><shortdesc>
    The number of bytes not yet written when the listener processes the event.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    The number of bytes not yet written when the listener processes the event.
    
    </apiDesc></apiValueDetail></apiValue><apiValue id="flash.events:OutputProgressEvent:bytesTotal:get"><apiName>bytesTotal</apiName><shortdesc>
    The total number of bytes written so far, plus the number of pending bytes to be written.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
    The total number of bytes written so far, plus the number of pending bytes to be written.
    
    </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.events:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
 An SharedObject object representing a remote shared object dispatches a SyncEvent object when the remote 
 shared object has been updated by the server.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata><asCustoms><internal>includeExample examples\SyncEventExample.as -noswf
 
 </internal></asCustoms></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for SyncEvent events.
 </apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
 An SharedObject object representing a remote shared object dispatches a SyncEvent object when the remote 
 shared object has been updated by the server. There is only one type of <codeph>sync</codeph> event: 
 <codeph>SyncEvent.SYNC</codeph>.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.net.xml#SharedObject"><linktext>SharedObject class</linktext></link></related-links><adobeApiEvent id="flash.events:SyncEvent:SYNC_sync"><apiName>sync</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:SyncEvent:SYNC</apiEventType><adobeApiEventClassifier>flash.events:SyncEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:SyncEvent:SyncEvent"><apiName>SyncEvent</apiName><shortdesc>
	 Creates an Event object that contains information about sync events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of the event. Event listeners can access this information through the inherited <codeph>type</codeph> property. There is only one type of sync event: <codeph>SyncEvent.SYNC</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling stage of the event flow. Event listeners can access this information through the inherited <codeph>bubbles</codeph> property. 
	 </apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can access this information through the inherited <codeph>cancelable</codeph> property.
	 </apiDesc></apiParam><apiParam><apiItemName>changeList</apiItemName><apiOperationClassifier>Array</apiOperationClassifier><apiData>null</apiData><apiDesc>An array of objects that describe the synchronization with the remote SharedObject. Event listeners can access this object through the <codeph>changeList</codeph> property.
	 
	 </apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for SyncEvent objects.
     </apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	 Creates an Event object that contains information about <codeph>sync</codeph> events.
	 Event objects are passed as parameters to event listeners.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#SyncEvent/changeList"><linktext>changeList</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:SyncEvent:clone"><apiName>clone</apiName><shortdesc>
	 Creates a copy of the SyncEvent object and sets the value of each property to match that of the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new SyncEvent object with property values that match those of the original.
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Creates a copy of the SyncEvent object and sets the value of each property to match that of the original. 
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:SyncEvent:toString"><apiName>toString</apiName><shortdesc>
	 Returns a string that contains all the properties of the SyncEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the SyncEvent object.
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Returns a string that contains all the properties of the SyncEvent object. The string is in the following format:
	 <p><codeph>[SyncEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> list=<i>value</i>]</codeph></p>
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:SyncEvent:SYNC"><apiName>SYNC</apiName><shortdesc>
     Defines the value of the type property of a sync event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>sync</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Defines the value of the <codeph>type</codeph> property of a <codeph>sync</codeph> event object.
	 <p>This event has the following properties:</p>
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	 <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	 object with an event listener.</entry></row><row><entry><codeph>changeList</codeph></entry><entry>An array with properties that describe the array's status.</entry></row><row><entry><codeph>target</codeph></entry><entry>The SharedObject instance that has been updated by the server.</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#SharedObject/event:sync"><linktext>flash.net.SharedObject.sync</linktext></link></related-links></apiValue><apiValue id="flash.events:SyncEvent:changeList:get"><apiName>changeList</apiName><shortdesc>
     An array of objects; each object contains properties that describe the changed members of a remote shared object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Array</apiValueClassifier></apiValueDef><apiDesc>
     An array of objects; each object contains properties that describe the changed members of a remote shared object.
     The properties of each object are <codeph>code</codeph>, <codeph>name</codeph>, and <codeph>oldValue</codeph>. 
     <p>When you initially connect to a remote shared object that is persistent locally and/or on the server, all the 
     properties of this object are set to empty strings.</p><p>Otherwise, Flash sets <codeph>code</codeph> to <codeph>"clear"</codeph>,
     <codeph>"success"</codeph>, <codeph>"reject"</codeph>, <codeph>"change"</codeph>, or <codeph>"delete"</codeph>. </p>
     <ul><li>A value of <codeph>"clear"</codeph> means either that you have successfully connected to a remote shared object
     that is not persistent on the server or the client, or that all the properties of the object have been deleted--for
     example, when the client and server copies of the object are so far out of sync that Flash Player resynchronizes the client
     object with the server object. In the latter case, <codeph>SyncEvent.SYNC</codeph> is dispatched and the "code" value 
     is set to <codeph>"change"</codeph>. </li>
     <li>A value of <codeph>"success"</codeph> means the client changed the shared object. </li>
     <li>A value of <codeph>"reject"</codeph> means the client tried unsuccessfully to change the object; instead, another client changed the object. </li>
     <li>A value of <codeph>"change"</codeph> means another client changed the object or the server resynchronized the object. </li>
     <li>A value of <codeph>"delete"</codeph> means the attribute was deleted. </li></ul>
     <p>The <codeph>name</codeph> property contains the name of the property that has been changed.</p>
     <p>The <codeph>oldValue</codeph> property contains the former value of the changed property. This parameter is 
     <codeph>null</codeph> unless code has a value of <codeph>"reject"</codeph> or <codeph>"change"</codeph>.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#NetConnection"><linktext>NetConnection class</linktext></link><link href="flash.net.xml#NetStream"><linktext>NetStream class</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.events:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
A Camera or Microphone object dispatches an ActivityEvent object whenever a camera or microphone reports that it has 
become active or inactive.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiTipTexts><apiTipText>Event objects for ActivityEvent events.
</apiTipText></apiTipTexts><apiBaseClassifier>flash.events:Event</apiBaseClassifier></apiClassifierDef><apiDesc>
A Camera or Microphone object dispatches an ActivityEvent object whenever a camera or microphone reports that it has 
become active or inactive. There is only one type of activity event: <codeph>ActivityEvent.ACTIVITY</codeph>.

</apiDesc><example conref="examples\ActivityEventExample.as"> The following example demonstrates the use of the ActivityEvent class by
 attaching an event listener method named <codeph>activityHandler()</codeph> to the microphone and
 generating text information every time the microphone generates an <codeph>activity</codeph> event.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.events.ActivityEvent;
    import flash.media.Microphone;

    public class ActivityEventExample extends Sprite {
        public function ActivityEventExample() {
            var mic:Microphone = Microphone.getMicrophone();
            mic.addEventListener(ActivityEvent.ACTIVITY, activityHandler);
        }

        private function activityHandler(event:ActivityEvent):void {
            trace("event: " + event);
            trace("event.activating: " + event.activating);
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links><adobeApiEvent id="flash.events:ActivityEvent:ACTIVITY_activity"><apiName>activity</apiName><prolog/><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events:ActivityEvent:ACTIVITY</apiEventType><adobeApiEventClassifier>flash.events:ActivityEvent</adobeApiEventClassifier><apiDefinedEvent/></adobeApiEventDef></adobeApiEventDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.events:ActivityEvent:ActivityEvent"><apiName>ActivityEvent</apiName><shortdesc>
	Creates an event object that contains information about activity events.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>type</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc> The type of the event. Event listeners can access this information through the 
	inherited <codeph>type</codeph> property. There is only one type of activity event: 
	<codeph>ActivityEvent.ACTIVITY</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>bubbles</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object participates in the bubbling phase of the 
	event flow. Event listeners can access this information through the inherited 
	<codeph>bubbles</codeph> property.  
	</apiDesc></apiParam><apiParam><apiItemName>cancelable</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Determines whether the Event object can be canceled. Event listeners can 
	access this information through the inherited <codeph>cancelable</codeph> property. 
	</apiDesc></apiParam><apiParam><apiItemName>activating</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Indicates whether the device is activating (<codeph>true</codeph>) or 
	deactivating (<codeph>false</codeph>). Event listeners can access this information through the 
	<codeph>activating</codeph> property.
	
	</apiDesc></apiParam><apiTipTexts><apiTipText>Constructor for ActivityEvent objects.
	</apiTipText></apiTipTexts></apiConstructorDef><apiDesc>
	Creates an event object that contains information about activity events.
	Event objects are passed as parameters to Event listeners.
	
	</apiDesc></apiConstructorDetail><related-links><link href="flash.events.xml#ActivityEvent/ACTIVITY"><linktext>ActivityEvent.ACTIVITY</linktext></link></related-links></apiConstructor><apiOperation id="flash.events:ActivityEvent:clone"><apiName>clone</apiName><shortdesc>
	Creates a copy of an ActivityEvent object and sets the value of each property to match that of 
	the original.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A new ActivityEvent object with property values that match those of the original.
	 
	 </apiDesc><apiOperationClassifier>flash.events:Event</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Creates a copy of an ActivityEvent object and sets the value of each property to match that of 
	the original. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.events:ActivityEvent:toString"><apiName>toString</apiName><shortdesc>
	Returns a string that contains all the properties of the ActivityEvent object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A string that contains all the properties of the ActivityEvent object.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	Returns a string that contains all the properties of the ActivityEvent object. The following 
	format is used:
	<p><codeph>[ActivityEvent type=<i>value</i> bubbles=<i>value</i> cancelable=<i>value</i> 
	activating=<i>value</i>]</codeph></p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.events:ActivityEvent:ACTIVITY"><apiName>ACTIVITY</apiName><shortdesc>
	The ActivityEvent.ACTIVITY constant defines the value of the type property of an activity event object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>activity</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The <codeph>ActivityEvent.ACTIVITY</codeph> constant defines the value of the <codeph>type</codeph> property of an <codeph>activity</codeph> event object. 
	<p>This event has the following properties:</p>
	 <adobetable class="innertable">
	    
	    
	    
	    
	    
	    
	    <tgroup cols="2"><thead><row><entry>Property</entry><entry>Value</entry></row></thead><tbody><row><entry><codeph>activating</codeph></entry><entry><codeph>true</codeph> if the device is activating or <codeph>false</codeph> if it is deactivating.</entry></row><row><entry><codeph>bubbles</codeph></entry><entry><codeph>false</codeph></entry></row><row><entry><codeph>cancelable</codeph></entry><entry><codeph>false</codeph>; there is no default behavior to cancel.</entry></row><row><entry><codeph>currentTarget</codeph></entry><entry>The object that is actively processing the Event 
	object with an event listener.</entry></row><row><entry><codeph>target</codeph></entry><entry>The object beginning or ending a session, such as a Camera or 
	Microphone object.</entry></row></tbody></tgroup></adobetable>
	
	</apiDesc></apiValueDetail><related-links><link href="flash.media.xml#Camera/event:activity"><linktext>flash.media.Camera.activity</linktext></link><link href="flash.media.xml#Microphone/event:activity"><linktext>flash.media.Microphone.activity</linktext></link></related-links></apiValue><apiValue id="flash.events:ActivityEvent:activating:get"><apiName>activating</apiName><shortdesc>
	Indicates whether the device is activating (true) or deactivating 
	(false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage name="ActionScript" version="3.0"/><apiPlatform description="" name="Flash" version="9"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the device is activating (<codeph>true</codeph>) or deactivating 
	(<codeph>false</codeph>).
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>