 
<apiPackage id="flash.html"><apiName>flash.html</apiName><apiDetail/><apiClassifier id="flash.html:HTMLHistoryItem"><apiName>HTMLHistoryItem</apiName><shortdesc>
 An HTMLHistoryItem object describes a location in the navigation history of 
 an HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 An HTMLHistoryItem object describes a location in the navigation history of 
 an HTMLLoader object.
 
 </apiDesc></apiClassifierDetail><related-links><link href="HTMLLoader.html"><linktext>HTMLLoader</linktext></link><link href="HTMLWindowCreateOptions.html"><linktext>HTMLWindowCreateOptions</linktext></link></related-links><apiValue id="flash.html:HTMLHistoryItem:isPost:get"><apiName>isPost</apiName><shortdesc>
	Indicates whether the HTML page includes POST data.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	Indicates whether the HTML page includes POST data.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLHistoryItem:originalUrl:get"><apiName>originalUrl</apiName><shortdesc>
	The original URL of the HTML page, before any redirects.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The original URL of the HTML page, before any redirects.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLHistoryItem:title:get"><apiName>title</apiName><shortdesc>
	The title of the HTML page.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The title of the HTML page.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLHistoryItem:url:get"><apiName>url</apiName><shortdesc>
	The URL of the HTML page.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	The URL of the HTML page.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.html:HTMLHost"><apiName>HTMLHost</apiName><shortdesc>
 An HTMLHost object defines behaviors of an HTMLLoader object for user interface elements that 
 can be controlled by setting various properties or by calling various methods of the window 
 object of the HTML page.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 An HTMLHost object defines behaviors of an HTMLLoader object for user interface elements that 
 can be controlled by setting various properties or by calling various methods of the <codeph>window</codeph> 
 object of the HTML page. These methods and properties are:
 
 <ul>
 
 		<li><codeph>window.blur()</codeph></li>
 		<li><codeph>window.focus()</codeph></li>
 		<li><codeph>window.moveBy()</codeph></li>
 		<li><codeph>window.moveTo()</codeph></li>
 		<li><codeph>window.location</codeph></li>
 		<li><codeph>window.close()</codeph></li>
 		<li><codeph>window.open()</codeph></li>
 		<li><codeph>window.resizeBy()</codeph></li>
 		<li><codeph>window.resizeTo()</codeph></li>
 		<li><codeph>window.status</codeph></li>
 		<li><codeph>window.document.title</codeph></li>
 </ul>
 
 <p>The methods in the HTMLHost class provide ways of handling changes in each of these <codeph>window</codeph> 
 settings. To use this class, create a new class (a subclass) that extends the HTMLHost class and 
 that overrides the methods for which you want to define behaviors. The methods of the HTMLHost class
 handle JavaScript properties and methods as follows:</p>
 
 <adobetable class="innertable">
 
 
 
 
 
 
 
 
 
 <tgroup cols="2"><thead><row><entry>JavaScript property or method</entry><entry>HTMLHost method</entry></row></thead><tbody><row>
 		<entry><codeph>window.blur()</codeph></entry>
 		<entry><codeph>windowBlur()</codeph></entry>
 </row><row>
 		<entry><codeph>window.focus()</codeph></entry>
 		<entry><codeph>windowFocus</codeph></entry>
 </row><row>
 		<entry><codeph>window.location</codeph></entry>
 		<entry><codeph>updateLocation</codeph></entry>
 </row><row>
 		<entry><codeph>window.close()</codeph></entry>
 		<entry><codeph>windowClose</codeph></entry>
 </row><row>
 		<entry><codeph>window.open()</codeph></entry>
 		<entry><codeph>createWindow</codeph></entry>
 </row><row>
 		<entry><codeph>window.status</codeph></entry>
 		<entry><codeph>updateStatus</codeph></entry>
 </row><row>
 		<entry><codeph>window.document.title</codeph></entry>
 		<entry><codeph>updateTitle</codeph></entry>
 </row></tbody></tgroup></adobetable>
 
 <p>To respond to changes in the <codeph>window.moveBy()</codeph>, <codeph>window.moveTo()</codeph>, 
 <codeph>window.resizeBy()</codeph>, and <codeph>window.resizeTo()</codeph> methods, override
 the <codeph>set windowRect()</codeph> method in the subclass of HTMLHost.</p>
 
 <p>Each HTMLHost object can be associated with at most one HTMLLoader object. Assigning 
 an HTMLHost instance to the <codeph>htmlHost</codeph> property of the HTMLLoader object 
 establishes this relationship. Assigning <codeph>null</codeph> to the <codeph>htmlHost</codeph> 
 property of the HTMLLoader object or setting the HTMLHost object as the <codeph>htmlHost</codeph> 
 property of another HTMLLoader object removes the HTMLHost from the first HTMLLoader object.</p>
 
 </apiDesc><example conref="examples\HTMLHost.1.as"> The following code defines CustomHost, a subclass of HTMLHost.
 Methods of the CustomHost class override the inherited methods in the HTMLHost
 class to define actions taken when JavaScript code in the HTMLLoader page
 sets various properties or calls various methods of the <codeph>window</codeph>
 object:
<codeblock>
package
{
    import flash.html.HTMLHost;
    import flash.html.HTMLLoader;
    import flash.display.NativeWindow;
    import flash.display.NativeWindowInitOptions;
    import flash.display.StageScaleMode;
    import flash.geom.Rectangle;
    import flash.text.TextField;

    public class CustomHost extends HTMLHost
    {
        import flash.html.*;
        public var statusField:TextField;
        public function CustomHost(defaultBehaviors:Boolean=true)
        {
            super(defaultBehaviors);
        }
        override public function windowClose():void
        {
            htmlLoader.stage.window.close();
        }
        override public function createWindow(windowCreateOptions:HTMLWindowCreateOptions):HTMLLoader
        {
            var initOptions:NativeWindowInitOptions = new NativeWindowInitOptions();
            var window:NativeWindow = new NativeWindow(initOptions);
            window.visible = true;
            var htmlLoader2:HTMLLoader = new HTMLLoader();
            htmlLoader2.width = window.width;
            htmlLoader2.height = window.height;
            window.stage.scaleMode = StageScaleMode.NO_SCALE;
            window.stage.addChild(htmlLoader2);
            return htmlLoader2;
        }
        override public function updateLocation(locationURL:String):void
        {
            trace(locationURL);
        }        
        override public function set windowRect(value:Rectangle):void
        {
            htmlLoader.stage.nativeWindow.bounds = value;
        }
        override public function updateStatus(status:String):void
        {
            statusField.text = status;
        }        
        override public function updateTitle(title:String):void
        {
            htmlLoader.stage.nativeWindow.title = title + "- Example Application";
        }
        override public function windowBlur():void
        {
            htmlLoader.alpha = 0.5;
        }
        override public function windowFocus():void
        {
            htmlLoader.alpha = 1;
        }
    }
}
</codeblock> Create the following class, which adds an HTMLLoader object to the 
 stage, as well as a TextField object named <codeph>statusBar</codeph>. The HTMLLoader
 object defines a CustomHost object as its <codeph>htmlHost</codeph> property:
 
 <codeblock>package
 {
     import flash.display.Sprite;
 
     public class SimpleHTMLBox extends Sprite
     {
         import mx.controls.HTML;
         import flash.html.HTMLLoader;
         import flash.text.TextField;
         import flash.net.URLRequest;
         import CustomHost;
         private var host:CustomHost;
         private var statusField:TextField;
         private var html:HTMLLoader;
         
         public function SimpleHTMLBox()
         {
             html = new HTMLLoader();
             var url:String = "Test.html";
             var urlReq:URLRequest = new URLRequest(url); 
             html.load(urlReq);
             
             host = new CustomHost();
             html.htmlHost = host;
             statusField = new TextField();
             host.statusField = statusField;
             
             configureUI();
         }
         private function configureUI():void
         {
             html.width = 400;
             html.height = 200;
             statusField.width = 400;
             statusField.height = 24;
             statusField.border = true;
             statusField.y = 200;
             
             addChild(html);
             addChild(statusField);                
         }
         
     }
 }</codeblock>
 
 <p>Build an AIR application that adds an object defined by this class to
 the main window's stage.</p>
 
 <p>Create an HTML page named Test.html in the application resources directory 
 (the directory that contains the application descriptor file), and add the 
 following content to it:</p>
 
 <codeblock>&lt;html&gt;
     &lt;head&gt;
         &lt;title&gt;Test&lt;/title&gt;
     &lt;/head&gt;
     &lt;body&gt;
         &lt;a href="#" onclick="window.open('Test.html')"&gt;window.open('Test.html')&lt;/a&gt;
         &lt;br/&gt;&lt;a href="#" onclick="window.document.location = 'www.adobe.com'"&gt;window.document.location = 'www.adobe.com'&lt;/a&gt;
         &lt;br/&gt;&lt;a href="#" onclick="window.moveBy(6, 12)"&gt;moveBy(6, 12)&lt;/a&gt;
         &lt;br/&gt;&lt;a href="#" onclick="window.close()"&gt;window.close()&lt;/a&gt;
         &lt;br/&gt;&lt;a href="#" onclick="window.blur()"&gt;window.blur()&lt;/a&gt;
         &lt;br/&gt;&lt;a href="#" onclick="window.focus()"&gt;window.focus()&lt;/a&gt;
         &lt;br/&gt;&lt;a href="#" onclick="window.status = new Date().toString()"&gt;window.status = new Date().toString()&lt;/a&gt;
     &lt;/body&gt;
 &lt;/html&gt;</codeblock>
 
 <p>When you test the application, the CustomHost class handles the user-interface-related
 JavaScript settings in the HTML page.</p>
</example></apiClassifierDetail><related-links><link href="HTMLLoader.html"><linktext>HTMLLoader</linktext></link><link href="HTMLWindowCreateOptions.html"><linktext>HTMLWindowCreateOptions</linktext></link></related-links><apiConstructor id="flash.html:HTMLHost:HTMLHost"><apiName>HTMLHost</apiName><shortdesc>
	 Creates an HTMLHost object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>defaultBehaviors</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Indicates wether root-content behaviors should be provided by default.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Creates an HTMLHost object.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.html:HTMLHost:createWindow"><apiName>createWindow</apiName><shortdesc>
	The function called when JavaScript code in the HTMLLoader object calls the 
	window.open() method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An HTMLLoader object that contains the new HTML page. Typically,
	you create a new HTMLLoader object in this method, add it to the stage of a new 
	NativeWindow object, and then return it.
	
	</apiDesc><apiOperationClassifier>flash.html:HTMLLoader</apiOperationClassifier></apiReturn><apiParam><apiItemName>windowCreateOptions</apiItemName><apiOperationClassifier>flash.html:HTMLWindowCreateOptions</apiOperationClassifier><apiDesc>An object containing properties in the string passed as the 
	<codeph>features</codeph> parameter of the call to <codeph>window.open()</codeph>.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	The function called when JavaScript code in the HTMLLoader object calls the 
	<codeph>window.open()</codeph> method. 
	
	<p>By default, a JavaScript call to <codeph>window.open()</codeph> in the HTML
	page of an HTMLLoader does <i>not</i> open an new NativeWindow object in the
	runtime. You can open a new NativeWindow object in the runtime by creating a
	new NativeWindow object in the <codeph>createWindow</codeph> method override in 
	the subclass of the HTMLHost class.</p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.html:HTMLHost:updateLocation"><apiName>updateLocation</apiName><shortdesc>
	The function called when JavaScript code in the HTMLLoader object sets the
	window.location property.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>locationURL</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The value to which the <codeph>location</codeph> property
	of the <codeph>window</codeph> property of the HTMLLoader object is set.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	The function called when JavaScript code in the HTMLLoader object sets the
	<codeph>window.location</codeph> property. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.html:HTMLHost:updateStatus"><apiName>updateStatus</apiName><shortdesc>
	The function called when JavaScript code in the HTMLLoader object sets the
	window.status property.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>status</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The value to which the <codeph>status</codeph> property
	of the <codeph>window</codeph> property of the HTMLLoader object is set.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	The function called when JavaScript code in the HTMLLoader object sets the
	<codeph>window.status</codeph> property. 
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.html:HTMLHost:updateTitle"><apiName>updateTitle</apiName><shortdesc>
	The function called when JavaScript code in the HTMLLoader object sets the
	window.document.title property or when the title 
	element changes, either via the DOM or because of a new page load.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>title</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The value to which the <codeph>window.document.title</codeph> property
	of the HTMLLoader object is set.
	
	</apiDesc></apiParam></apiOperationDef><apiDesc>
	The function called when JavaScript code in the HTMLLoader object sets the
	<codeph>window.document.title</codeph> property or when the <codeph>title</codeph> 
	element changes, either via the DOM or because of a new page load.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.html:HTMLHost:windowBlur"><apiName>windowBlur</apiName><shortdesc>
	The function called when JavaScript code in the HTMLLoader object calls the 
	window.blur() method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	The function called when JavaScript code in the HTMLLoader object calls the 
	<codeph>window.blur()</codeph> method.
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.html:HTMLHost:windowClose"><apiName>windowClose</apiName><shortdesc>
	The function called when JavaScript code in the HTMLLoader object calls the 
	window.close() method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	The function called when JavaScript code in the HTMLLoader object calls the 
	<codeph>window.close()</codeph> method. 
	
	<p>By default, a JavaScript call to <codeph>window.close()</codeph> in the HTML
	page of an HTMLLoader object closes the windows containing the HTMLLoader object.</p>
	
	</apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.html:HTMLHost:windowFocus"><apiName>windowFocus</apiName><shortdesc>
	The function called when JavaScript code in the HTMLLoader object calls the 
	window.focus() method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	The function called when JavaScript code in the HTMLLoader object calls the 
	<codeph>window.focus()</codeph> method.
	
	</apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.html:HTMLHost:htmlLoader:get"><apiName>htmlLoader</apiName><shortdesc>
	The HTMLLoader object to which this HostControl object applies.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.html:HTMLLoader</apiValueClassifier></apiValueDef><apiDesc>
	The HTMLLoader object to which this HostControl object applies. The <codeph>htmlHost</codeph>
	property of that HTMLLoader object is set to this HostControl object.
	
	</apiDesc></apiValueDetail><related-links><link href="HTMLLoader.html#htmlHost"><linktext>HTMLLoader.htmlHost</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLHost:windowRect:get"><apiName>windowRect</apiName><shortdesc>
	The property that is changed when JavaScript code in the HTMLLoader object calls 
	the window.moveBy(), window.moveTo(), 
	window.resizeBy(), or window.resizeTo() method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	The property that is changed when JavaScript code in the HTMLLoader object calls 
	the <codeph>window.moveBy()</codeph>, <codeph>window.moveTo()</codeph>, 
	<codeph>window.resizeBy()</codeph>, or <codeph>window.resizeTo()</codeph> method. 
	
	<p>In the subclass of HTMLHost, override the <codeph>set windowRect()</codeph> method
	to handle the new window bounds, as desired.</p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.html:HTMLPDFCapability"><apiName>HTMLPDFCapability</apiName><shortdesc>
	The HTMLPDFCapability class contains possible values of the pdfCapability property of
    an HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	The HTMLPDFCapability class contains possible values of the <codeph>pdfCapability</codeph> property of
    an HTMLLoader object.
	It also defines the values of the <codeph>errorID</codeph> property of an ErrorEvent object dispatched
	when an attempt to load PDF content is unsuccessful.
	
	</apiDesc></apiClassifierDetail><related-links><link href="HTMLLoader.html#pdfCapability"><linktext>HTMLLoader.pdfCapability</linktext></link></related-links><apiValue id="flash.html:HTMLPDFCapability:ERROR_CANNOT_LOAD_READER"><apiName>ERROR_CANNOT_LOAD_READER</apiName><shortdesc>
				An error was returned by the OS when trying to load the Adobe Reader or Acrobat
				application or one of its necessary libraries.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3204</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
				An error was returned by the OS when trying to load the Adobe Reader or Acrobat
				application or one of its necessary libraries.
		
              <p><i>Note:</i> This is not returned from <codeph>HTMLLoader.pdfCapability</codeph>, but it is
              sent as the <codeph>errorID</codeph> property of an ErrorEvent object dispatched when 
				an HTMLLoader object attempts to load PDF content and the operating system returns an error. 
              <codeph>HTMLLoader.pdfCapability</codeph> may return <codeph>PDFCapability.STATUS_OK</codeph>, 
				because it examines only the configuration and does not
				attempt to load any libraries.</p>
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLPDFCapability:ERROR_INSTALLED_READER_NOT_FOUND"><apiName>ERROR_INSTALLED_READER_NOT_FOUND</apiName><shortdesc>
				No version of Adobe Reader is detected.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3201</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
				No version of Adobe Reader is detected. An HTMLLoader
				object cannot display PDF content.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLPDFCapability:ERROR_INSTALLED_READER_TOO_OLD"><apiName>ERROR_INSTALLED_READER_TOO_OLD</apiName><shortdesc>
				Adobe Reader is detected, but the version is too old.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3202</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
				Adobe Reader is detected, but the version is too old. An HTMLLoader
				object cannot display PDF content.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLPDFCapability:ERROR_PREFERRED_READER_TOO_OLD"><apiName>ERROR_PREFERRED_READER_TOO_OLD</apiName><shortdesc>
				A sufficient version (8.1 or later) of Adobe Reader or Acrobat is detected, but the the version
				of Adobe Reader that is set up to handle PDF content is older than Adobe Reader or Acrobat 8.1.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>3203</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
				A sufficient version (8.1 or later) of Adobe Reader or Acrobat is detected, but the the version
				of Adobe Reader that is set up to handle PDF content is older than Adobe Reader or Acrobat 8.1. 
				An HTMLLoader object cannot display PDF content.
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLPDFCapability:STATUS_OK"><apiName>STATUS_OK</apiName><shortdesc>
				A sufficient version (8.1 or later) of Adobe Reader is detected and PDF content 
              can be loaded in an HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
				A sufficient version (8.1 or later) of Adobe Reader is detected and PDF content 
              can be loaded in an HTMLLoader object.
		
				<p><i>Note:</i> On Windows, if an earlier version of Acrobat is installed and is running 
				on the user's system, any running version of Acrobat or Adobe Reader, 7.x or higher, is used 
				even if a later version is installed. In this case, if the value of the <codeph>pdfCapability</codeph> 
				property is <codeph>PDFCapability.STATUS_OK</codeph>, when an AIR application attempts to load 
              PDF content into an HTMLLoader object, the older version of Acrobat or Adobe Reader displays an alert,
			without an error message displayed in the AIR runtime. If this is a possible situation for
				your users, consider instructing them to close Acrobat or Adobe Reader while 
				running your application. Or consider displaying these instructions if the PDF content
				does not load within an acceptable amount of time.</p>
		
		</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.html:HTMLLoader"><apiName>HTMLLoader</apiName><shortdesc>
    The HTMLLoader class defines a type of display object that is a container for HTML content.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>flash.display:Sprite</apiBaseClassifier></apiClassifierDef><apiDesc>
    The HTMLLoader class defines a type of display object that is a container for HTML content. 
	
    <p platform="actionscript">The default dimensions of an HTMLLoader are 0 x 0 pixels. Set the <codeph>width</codeph>
    and <codeph>height</codeph> properties to make the HTMLLoader object visible.</p>
	
    	<p platform="actionscript">
	The maximum size for an HTMLLoader object is 2,880 pixels in height and 2,880 pixels in width.
    	Setting <codeph>width</codeph> or <codeph>height</codeph> of an HTMLLoader object to a number that exceeds the  
	limitation causes the HTMLLoader object to throw an ArgumentError exception.
	</p>
	
	<p platform="javascript">In JavaScript, you can access the HTMLLoader object for an HTML page 
	by getting the <codeph>runtime.htmlLoader</codeph> property. This property is only available to
	content running in the application security sandbox.</p>
	
	<p platform="javascript">Many HTMLLoader properties and methods inherited from other 
	classes pertain to HTMLLoader objects running in SWF files (which use the ActionScript 3.0
	display list). These properties and methods are not as useful to JavaScript code running
	in HTML-based AIR applications. For details on these properties and methods, see the 
	<xref href="http://www.adobe.com/go/learn_flex3_aslr" scope="external">ActionScript 3.0 Language 
	Reference</xref>.</p>
	
    </apiDesc><example conref="examples\HTMLLoader.1.as"> The following code initializes an HTMLLoader object, configures its width and height, 
 loads the URL http://www.adobe.com, and adds the object to the display list:
<codeblock>
package {
    import flash.display.Sprite;
    import flash.html.HTMLLoader;
    import flash.net.URLRequest;

    public class HTMLLoaderExample extends Sprite
    {
        public function HTMLLoaderExample()
        {
            var html:HTMLLoader = new HTMLLoader();
            var urlReq:URLRequest = new URLRequest("http://www.adobe.com/");
            html.width = stage.stageWidth;
            html.height = stage.stageHeight;
            html.load(urlReq); 
            addChild(html);
        }
    }
}
</codeblock></example></apiClassifierDetail><adobeApiEvent id="flash.html:HTMLLoader_flash.events.Event.HTML_DOM_INITIALIZE_htmlDOMInitialize"><apiName>htmlDOMInitialize</apiName><shortdesc>
 Signals that the HTML DOM has been created in response to a load operation.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.HTML_DOM_INITIALIZE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Signals that the HTML DOM has been created in response to a load operation. The <codeph>load()</codeph> 
 and <codeph>loadString()</codeph> methods of the HTMLLoader object throw an exception while
 this event is being dispatched.  Any property or method of any JavaScript object accessible from the 
 <codeph>window</codeph> property of the HTMLLoader object that controls the URL that is loaded in 
 the HTMLLoader object throws an exception if set or called while this event is dispatched.
 For example, setting <codeph>window.location</codeph> by setting the <codeph>window</codeph> property of 
 the HTMLLoader object results in a JavaScript exception.
 
 </apiDesc></adobeApiEventDetail><related-links><link href="HTMLLoader.html#loadString()"><linktext>loadString()</linktext></link><link href="HTMLLoader.html#load()"><linktext>load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.html:HTMLLoader_flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION_uncaughtScriptException"><apiName>uncaughtScriptException</apiName><shortdesc>
 Signals that an uncaught JavaScript exception occurred in the HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.HTMLUncaughtScriptExceptionEvent.UNCAUGHT_SCRIPT_EXCEPTION</apiEventType><adobeApiEventClassifier>flash.events.HTMLUncaughtScriptExceptionEvent</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Signals that an uncaught JavaScript exception occurred in the HTMLLoader object.
 Event handlers can call any method or access any property of the HTMLLoader object.
 
 The event is cancelable, and the default behavior when running in the AIR Debug Launcher 
 is to send the JavaScript stack to the trace output.
 
 </apiDesc></adobeApiEventDetail><related-links><link href="HTMLLoader.html#loadString()"><linktext>loadString()</linktext></link><link href="HTMLLoader.html#load()"><linktext>load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.html:HTMLLoader_flash.events.Event.SCROLL_scroll"><apiName>scroll</apiName><shortdesc>
 Signals that the scrollH or scrollV property has been changed 
 by the HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.SCROLL</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Signals that the <codeph>scrollH</codeph> or <codeph>scrollV</codeph> property has been changed 
 by the HTMLLoader object. The HTMLLoader object dispatches this event when JavaScript running in the 
 HTMLLoader object invokes the <codeph>scrollTo()</codeph> method of the <codeph>window</codeph> object 
 and the desired location is not already visible. The event is not dispatched when ActionScript
 code changes the <codeph>scrollH</codeph> or <codeph>scrollV</codeph> property.
 Event handlers may call any method or access any property
 of the HTMLLoader object.
 
 <p>Event handlers for this event should check the <codeph>scrollH</codeph> and <codeph>scrollV</codeph> 
 properties to update any scroll bars associated with the HTMLLoader object.</p>
 
 <p>The HTMLLoader object can dispatch this event any time after a load operation is initiated, 
 even after the object has dispatched the <codeph>complete</codeph> event.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.html:HTMLLoader_flash.events.Event.HTML_BOUNDS_CHANGE_htmlBoundsChange"><apiName>htmlBoundsChange</apiName><shortdesc>
 Signals that one or both of the contentWidth and contentHeight 
 properties of the HTMLLoader object has changed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.HTML_BOUNDS_CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Signals that one or both of the <codeph>contentWidth</codeph> and <codeph>contentHeight</codeph> 
 properties of the HTMLLoader object has changed. This may be result from a new image or other content loading, 
 for example. Event handlers may call any method or access any property
 of the HTMLLoader object.
 
 <p>The HTMLLoader object can dispatch this event any time after a load operation is initiated,
 even after the object has dispatched the <codeph>complete</codeph> event.</p>
 
 </apiDesc></adobeApiEventDetail><related-links><link href="HTMLLoader.html#contentWidth"><linktext>contentWidth</linktext></link><link href="HTMLLoader.html#contentHeight"><linktext>contentHeight</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.html:HTMLLoader_flash.events.Event.LOCATION_CHANGE_locationChange"><apiName>locationChange</apiName><shortdesc>
 Signals that the location property of the HTMLLoader object has changed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.LOCATION_CHANGE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/><apiTipTexts><apiTipText>Signals that the location property of the HTMLLoader object has changed.
 
 </apiTipText></apiTipTexts></adobeApiEventDef><apiDesc>
 Signals that the <codeph>location</codeph> property of the HTMLLoader object has changed.
 The event handler for this event can call any method or access any property of the 
 HTMLLoader object.
 
 </apiDesc></adobeApiEventDetail><related-links><link href="HTMLLoader.html#loadString()"><linktext>loadString()</linktext></link><link href="HTMLLoader.html#load()"><linktext>load()</linktext></link></related-links></adobeApiEvent><adobeApiEvent id="flash.html:HTMLLoader_flash.events.Event.HTML_RENDER_htmlRender"><apiName>htmlRender</apiName><shortdesc>
 Signals that the rendering of content in the HTMLLoader object is fully up to date.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.HTML_RENDER</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Signals that the rendering of content in the HTMLLoader object is fully up to date.
 This event can be dispatched quite frequentlywhenever any rendering change is
 made to the HTML content. For example, this event is dispatched when new content is 
 displayed as a result of a user clicking a link or when JavaScript in the page renders HTML.
 Event listeners can call any method or access any property of the HTMLLoader object.
 
 <p>Handlers of this event should check the <codeph>contentWidth</codeph> and <codeph>contentHeight</codeph> 
 properties of the HTMLLoader object to update any scroll bars associated with it.</p>
 
 <p>The HTMLLoader object can dispatch this event any time after a load operation is initiated, 
 even after the object has dispatched the <codeph>complete</codeph> event.</p>
 
 </apiDesc></adobeApiEventDetail></adobeApiEvent><adobeApiEvent id="flash.html:HTMLLoader_flash.events.Event.COMPLETE_complete"><apiName>complete</apiName><shortdesc>
 Signals that the last load operation requested by loadString or 
 load method has completed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><adobeApiEventDetail><adobeApiEventDef><apiEventType>flash.events.Event.COMPLETE</apiEventType><adobeApiEventClassifier>flash.events.Event</adobeApiEventClassifier><apiGeneratedEvent/></adobeApiEventDef><apiDesc>
 Signals that the last load operation requested by <codeph>loadString</codeph> or 
 <codeph>load</codeph> method has completed.
 The event is dispatched <i>after</i> the JavaScript <codeph>load</codeph> event has fired 
 on the HTML DOM in the HTMLLoader object.
 This event is always dispatched asynchronously. The event handler for this event can call any
 method or access any property of the HTMLLoader object.
 
 </apiDesc></adobeApiEventDetail><related-links><link href="HTMLLoader.html#loadString()"><linktext>loadString()</linktext></link><link href="HTMLLoader.html#load()"><linktext>load()</linktext></link></related-links></adobeApiEvent><apiConstructor id="flash.html:HTMLLoader:HTMLLoader"><apiName>HTMLLoader</apiName><shortdesc>
        Creates an HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/></apiConstructorDef><apiDesc>
        Creates an HTMLLoader object. 
		
		</apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.html:HTMLLoader:cancelLoad"><apiName>cancelLoad</apiName><shortdesc>
		 Cancels any load operation in progress.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Cancels any load operation in progress.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.html:HTMLLoader:createRootWindow"><apiName>createRootWindow</apiName><shortdesc>
         Creates a new NativeWindow object that contains an HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiReturn><apiDesc>A new HTMLLoader object that is on the stage of the new NativeWindow object.
		 
		 </apiDesc><apiOperationClassifier>flash.html:HTMLLoader</apiOperationClassifier></apiReturn><apiParam><apiItemName>visible</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Specifies whether the window is visible.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>windowInitOptions</apiItemName><apiOperationClassifier>flash.display:NativeWindowInitOptions</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies window initialization options; if <codeph>null</codeph>, uses default 
		 <codeph>NativeWindowInitOptions</codeph> values.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>scrollBarsVisible</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Specifies whether the window provides scrollbars.
		 
		 </apiDesc></apiParam><apiParam><apiItemName>bounds</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiData>null</apiData><apiDesc>If not <codeph>null</codeph>, specifies the window bounds.  If any of <codeph>x</codeph>, <codeph>y</codeph>,
		 	<codeph>width</codeph>, or <codeph>height</codeph> is <codeph>NaN</codeph>, then the corresponding dimension of the window is
		 	left at its default value.
		 
         </apiDesc></apiParam></apiOperationDef><apiDesc>
         Creates a new NativeWindow object that contains an HTMLLoader object. Use the 
         HTMLLoader object that is returned by this method to load HTML content.
		 
		 <p>By default (when you set no parameters in calling this method), the new window uses 
		 standard system chrome and includes scrollbar controls for the content. You can set the 
		 parameters to change the properties of the new window.</p>
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.html:HTMLLoader:getHistoryAt"><apiName>getHistoryAt</apiName><shortdesc>
		 Returns the history entry at the specified position.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A URLRequest object for the history entry at the specified position.
		 
		 </apiDesc><apiOperationClassifier>flash.html:HTMLHistoryItem</apiOperationClassifier></apiReturn><apiParam><apiItemName>position</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiDesc>The position in the history list.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Returns the history entry at the specified position.
		 
		 </apiDesc></apiOperationDetail><related-links><link href="HTMLLoader.html#historyPosition"><linktext>historyPosition</linktext></link></related-links></apiOperation><apiOperation id="flash.html:HTMLLoader:historyBack"><apiName>historyBack</apiName><shortdesc>
		 Navigates back in the browser history, if possible.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Navigates back in the browser history, if possible.
		 
         <p>Calling this method of the HTMLLoader object has the same effect
		 as calling the <codeph>back()</codeph> method of the <codeph>window.history</codeph>
		 property in JavaScript in the HTML page.</p>
		 
		 <p>This function throws no errors.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="HTMLLoader.html#historyPosition"><linktext>historyPosition</linktext></link></related-links></apiOperation><apiOperation id="flash.html:HTMLLoader:historyForward"><apiName>historyForward</apiName><shortdesc>
		 Navigates forward in the browser history, if possible.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Navigates forward in the browser history, if possible.
		 
         <p>Calling this method of the HTMLLoader object has the same effect
		 as calling the <codeph>forward()</codeph> method of the <codeph>window.history</codeph> 
		 property in JavaScript in the HTML page.</p>
		 
		 <p>This function throws no errors.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="HTMLLoader.html#historyPosition"><linktext>historyPosition</linktext></link></related-links></apiOperation><apiOperation id="flash.html:HTMLLoader:historyGo"><apiName>historyGo</apiName><shortdesc>
		 Navigates the specified number of steps in the browser history.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>steps</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The number of steps in the history list to move
		 forward (positive) or backward (negative).
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
		 Navigates the specified number of steps in the browser history.
		 Navigates forward if positive, backward if negative.
		 Navigation by zero forces a reload.
		 
		 <p>This method is equivalent to calling the <codeph>go()</codeph> method of 
		 the <codeph>window.history</codeph> property in JavaScript in the HTML page.</p>
		 
		 <p>This function throws no errors.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="HTMLLoader.html#historyPosition"><linktext>historyPosition</linktext></link></related-links></apiOperation><apiOperation id="flash.html:HTMLLoader:load"><apiName>load</apiName><shortdesc>
         Loads the HTMLLoader object with data from the site specified by the urlRequestToLoad parameter.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>urlRequestToLoad</apiItemName><apiOperationClassifier>flash.net:URLRequest</apiOperationClassifier><apiDesc>The URLRequest object containing information about the URL to 
		 load. In addition to the URL to load, a URLRequest object contains properties that define
		 the HTTP form submission method (GET or POST), any data to be transmitted with the request,
		 and request headers.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
         Loads the HTMLLoader object with data from the site specified by the <codeph>urlRequestToLoad</codeph> parameter.
		 Calling this method initially sets the <codeph>loaded</codeph> property to <codeph>false</codeph>.  This method 
		 initiates an operation that always completes asynchronously.
		 
		 <p>A call to this method implicitly cancels any pending previous load operation initiated with
		 this method or with the <codeph>loadString()</codeph> method. The <codeph>complete</codeph> event for the previous 
		 load operation will never be delivered.</p>
		 
		 <p>It is possible that the <codeph>complete</codeph> event will never be delivered. This happens if any of 
         the HTML content loaded into the HTMLLoader object never downloads completely. This can happen if 
		 the HTML content references a URL to a CGI script that repetedly generates content indefinitely.</p>
		 
		 </apiDesc></apiOperationDetail><related-links><link href="flash.net.xml#URLRequest"><linktext>flash.net.URLRequest</linktext></link></related-links></apiOperation><apiOperation id="flash.html:HTMLLoader:loadString"><apiName>loadString</apiName><shortdesc>
         Loads the HTMLLoader object with the HTML content contained in the HTML string.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>htmlContent</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The string containing the HTML content to load into the HTMLLoader object.
		 
		 </apiDesc></apiParam></apiOperationDef><apiDesc>
         Loads the HTMLLoader object with the HTML content contained in the HTML string. When rendering of the
		 of the HTML in the string is complete, the <codeph>complete</codeph> event is dispatched.  The 
		 <codeph>complete</codeph> event is always dispatched asynchronously.
		 
		 <p>A call to this method implicitly cancels any pending previous load operation initiated with
		 this method or with the <codeph>load()</codeph> method. The <codeph>complete</codeph> event for the previous 
		 load operation will never be delivered.</p>
		 
		 <p>If the HTML specified in the string has no references to external resources, then this method
		 synchronously renders the HTML. However, the <codeph>complete</codeph> event is still dispatched
		 asynchronously. If the <codeph>loaded</codeph> property of this class is <codeph>true</codeph> immediately 
		 following a call to this function, the HTML content specified in the <codeph>htmlContent</codeph> argument 
		 was rendered synchronously.</p>
		 
		 <p>It is possible that the <codeph>complete</codeph> event will never be delivered. This happens if any of 
         the HTML content loaded into the HTMLLoader object never downloads completely. This can happen if
		 the HTML content references a URL to a CGI script that repetedly generates content indefinitely.</p>
		 
		 <p>Content loaded via the <codeph>loadString()</codeph> method is put in the application security sandbox
		 only if the <codeph>placeLoadStringContentInApplicationSandbox</codeph> property is set to <codeph>true</codeph>.</p>
		 
         </apiDesc></apiOperationDetail><related-links><link href="HTMLLoader.html#placeLoadStringContentInApplicationSandbox"><linktext>placeLoadStringContentInApplicationSandbox</linktext></link></related-links></apiOperation><apiOperation id="flash.html:HTMLLoader:reload"><apiName>reload</apiName><shortdesc>
		 Reloads the page from the current location.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
		 Reloads the page from the current location.
		 
		 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.html:HTMLLoader:authenticate:get"><apiName>authenticate</apiName><shortdesc>
		Specifies whether authentication requests should be handled (true)
		or not (false) for HTTP requests issued by this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>initialized from URLRequestDefaults.authenticate
		
        </apiDefaultValue></apiValueDef><apiDesc>
		Specifies whether authentication requests should be handled (<codeph>true</codeph>)
		or not (<codeph>false</codeph>) for HTTP requests issued by this object. If <codeph>false</codeph>, authentication 
		challenges return an HTTP error.  
		
        </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/authenticate"><linktext>flash.net.URLRequest.authenticate</linktext></link><link href="flash.net.xml#URLRequestDefaults/authenticate"><linktext>flash.net.URLRequestDefaults.authenticate</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:cacheResponse:get"><apiName>cacheResponse</apiName><shortdesc>
		Specifies whether successful response data should be cached for HTTP requests issued by this object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>initialized from URLRequestDefaults.cacheResponse
		
        </apiDefaultValue></apiValueDef><apiDesc>
		Specifies whether successful response data should be cached for HTTP requests issued by this object. 
		When set to <codeph>true</codeph>, the HTMLLoader object uses the operating system's HTTP cache.
		
        </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequestDefaults/cacheResponse"><linktext>flash.net.URLRequestDefaults.cacheResponse</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:contentHeight:get"><apiName>contentHeight</apiName><shortdesc>
		 The height, in pixels, of the HTML content.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 The height, in pixels, of the HTML content. This property can change as the dimensions of the HTMLLoader object change.
		 For example, an HTML page often uses the entire height of the HTMLLoader object, and the <codeph>contentHeight</codeph> property may 
		 change if you change the height of the HTMLLoader object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:contentWidth:get"><apiName>contentWidth</apiName><shortdesc>
		 The width, in pixels, of the HTML content.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 The width, in pixels, of the HTML content. This property can change as the dimensions of the HTMLLoader object change.
		 For example, an HTML page often uses the entire width of the HTMLLoader object, and the <codeph>contentWidth</codeph> property may 
		 change if you change the width of the HTMLLoader object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:hasFocusableContent:get"><apiName>hasFocusableContent</apiName><shortdesc>
		Indicates whether any content in the HTMLLoader object is focusable.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		Indicates whether any content in the HTMLLoader object is focusable. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:height:set"><apiName>height</apiName><shortdesc>
		 Specifies the height of the rectangle of the HTML canvas that is being rendered.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 Specifies the height of the rectangle of the HTML canvas that is being rendered.
         This is the height of the HTMLLoader display object in pixels.
         Changing this property causes the HTMLLoader object to re-render the HTML document.
		 <codeph>htmlBoundsChanged</codeph> events may dispatched in response to changing this property.
		 
		 When you set the <codeph>width</codeph> or
         <codeph>height</codeph> property of an HTMLLoader object, the bounds of the object change but
		 content is not scaled (as would happen with other types of display objects).
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:historyLength:get"><apiName>historyLength</apiName><shortdesc>
		 The overall length of the history list, including back and forward entries.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
		 The overall length of the history list, including back and forward entries.
		 This property has the same value as the <codeph>window.history.length</codeph> 
		 JavaScript property of the HTML page.
		 
		 </apiDesc></apiValueDetail><related-links><link href="HTMLLoader.html#historyPosition"><linktext>historyPosition</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:historyPosition:get"><apiName>historyPosition</apiName><shortdesc>
		 The current position in the history list.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc>
		 The current position in the history list. The history list corresponds to the 
		 <codeph>window.history</codeph> object of the HTML page.
		 Entries less than the current position are the "back" list; entries greater are "forward."
		 Attempts to set position beyond the end set it to the end.
		 
		 </apiDesc></apiValueDetail><related-links><link href="HTMLLoader.html#getHistoryAt()"><linktext>getHistoryAt()</linktext></link><link href="HTMLLoader.html#historyBack()"><linktext>historyBack()</linktext></link><link href="HTMLLoader.html#historyGo()"><linktext>historyGo()</linktext></link><link href="HTMLLoader.html#historyForward()"><linktext>historyForward()</linktext></link><link href="HTMLLoader.html#historyLength"><linktext>historyLength</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:htmlHost:get"><apiName>htmlHost</apiName><shortdesc>
		The HTMLHost object used to handle changes to certain user interface elements, such as the 
        window.document.title property of the HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.html:HTMLHost</apiValueClassifier><apiTipTexts><apiTipText>The HTMLHost object used to handle changes to certain user interface elements, such as the 
        window.document.title property of the HTMLLoader object.
		
		</apiTipText></apiTipTexts></apiValueDef><apiDesc>
		The HTMLHost object used to handle changes to certain user interface elements, such as the 
        <codeph>window.document.title</codeph> property of the HTMLLoader object. <ph platform="javascript">
		This property applies to SWF content using the HTMLLoader class only; it is not
		useful in  JavaScript code.</ph> <ph platform="actionscript">To override default 
        behaviors for the HTMLLoader object, create a subclass of the HTMLHost class and override its member
		functions to handle various user interface changes in the HTML content.</ph>
		
		</apiDesc></apiValueDetail><related-links><link href="HTMLHost.html"><linktext>HTMLHost class</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:loaded:get"><apiName>loaded</apiName><shortdesc>
		 Indicates whether the JavaScript load event corresponding to the previous call to the 
		 load() or loadString() method has been delivered to 
         the HTML DOM in the HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
		 Indicates whether the JavaScript load event corresponding to the previous call to the 
		 <codeph>load()</codeph> or <codeph>loadString()</codeph> method has been delivered to 
         the HTML DOM in the HTMLLoader object.
		 
		 This property is <codeph>true</codeph> before the <codeph>complete</codeph> event is dispatched. 
		 
		 It is possible that this property will never become <codeph>true</codeph>.  This happens in the 
		 same cases as when the <codeph>complete</codeph> event is never dispatched.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:location:get"><apiName>location</apiName><shortdesc>
        The URL for the content loaded in the HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
        The URL for the content loaded in the HTMLLoader object. 
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:manageCookies:get"><apiName>manageCookies</apiName><shortdesc>
		Specifies whether the HTTP protocol stack should manage cookies for this
		object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>initialized from URLRequestDefaults.manageCookies
		
		</apiDefaultValue></apiValueDef><apiDesc>
		Specifies whether the HTTP protocol stack should manage cookies for this
		object. If <codeph>true</codeph>, cookies are added to the request 
		and response cookies are remembered. If <codeph>false</codeph>, cookies are 
		<i>not</i> added to the request and response cookies are <i>not</i>
		remembered. 
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/manageCookies"><linktext>flash.net.URLRequest.manageCookies</linktext></link><link href="flash.net.xml#URLRequestDefaults/manageCookies"><linktext>flash.net.URLRequestDefaults.manageCookies</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:navigateInSystemBrowser:get"><apiName>navigateInSystemBrowser</apiName><shortdesc>
		Specifies whether navigation of the root frame of the HTML content (such as when the user clicks a link, when the 
		window.location property is set, or when calling window.open()) results in 
		navigation in the HTMLLoader object (false) or in the default system web browser
		(true).</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
		
		</apiDefaultValue><apiTipTexts><apiTipText>Whether navigation of the root frame of the HTML content results in navigation in the
		HTMLLoader object (false) or in the default system web browser (true).
		
		</apiTipText></apiTipTexts></apiValueDef><apiDesc>
		Specifies whether navigation of the root frame of the HTML content (such as when the user clicks a link, when the 
		<codeph>window.location</codeph> property is set, or when calling <codeph>window.open()</codeph>) results in 
		navigation in the HTMLLoader object (<codeph>false</codeph>) or in the default system web browser
		(<codeph>true</codeph>). Set this property to <codeph>true</codeph> if you want all navigation to occur in the 
		system web browser (not in the HTMLLoader object).
		
		</apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:paintsDefaultBackground:set"><apiName>paintsDefaultBackground</apiName><shortdesc>
        Specifies whether the background of the HTMLLoader document is opaque white (true) or 
        not (false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiTipTexts><apiTipText>Determines whether the background of the HTMLLoader document is opaque white (true) 
		or not (false). 
		
		</apiTipText></apiTipTexts></apiValueDef><apiDesc>
        Specifies whether the background of the HTMLLoader document is opaque white (<codeph>true</codeph>) or 
        not (<codeph>false</codeph>). If this property is set to <codeph>false</codeph>, the HTMLLoader 
		object uses its display object container as a background for the HTML and it uses the opacity 
		(<codeph>alpha</codeph> value) of the display object container as the HTML background. However, if 
		the <codeph>body</codeph> element or any other element of the HTML document has an opaque background 
		color (specified by <codeph>style="background-color:gray"</codeph>, for instance), then that portion 
		of the rendered HTML uses the specified opaque background color.
		
        </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:pdfCapability:get"><apiName>pdfCapability</apiName><shortdesc>
		 The type of PDF support on the user's system, defined as an integer code value.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiStatic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
		 The type of PDF support on the user's system, defined as an integer code value. 
		 An HTMLLoader object can display PDF content only if this property evaluates to 
		 <codeph>PDFCapability.STATUS_OK</codeph>. The PDFCapability class defines constants
		 for possible values of the <codeph>pdfCapability</codeph> property, as follows:
		 
		 <adobetable class="innertable">
		 
		 	
		 
		 	
		 
		 	
		 
		 	
		 
		 	
		 
		 <tgroup cols="2"><thead><row><entry>PDFCapability constant</entry><entry>Meaning</entry></row></thead><tbody><row>
		 		<entry><codeph>STATUS_OK</codeph></entry>
		 		<entry>A sufficient version (8.1 or later) of Acrobat or Adobe Reader is detected and PDF content 
              can be loaded in an HTMLLoader object.
		 
		 		<p><i>Note:</i> On Windows, if Acrobat or Adobe Reader version 7.x or later, 
		 		is currently running on the user's system, that version is used even if a later version 
              that supports loading PDF loaded in an HTMLLoader object is installed. In this case, 
		 		if the value of the <codeph>pdfCapability</codeph> property is <codeph>PDFCapability.STATUS_OK</codeph>,
		 		when an AIR application attempts to load PDF content, the older version of Acrobat or Adobe Reader 
              displays an alert (and the AIR runtime displays no error message). If this is a possibile situation
		 		for your users, consider instructing them to close Acrobat or Adobe Reader while running your  
		 		application. Consider displaying these instructions if the PDF 
		 		content does not load within an acceptable amount of time.</p></entry>
		 	</row><row>
		 		<entry><codeph>ERROR_INSTALLED_READER_NOT_FOUND</codeph></entry>
		 		<entry>No version of Acrobat or Adobe Reader is detected. An HTMLLoader
		 		object cannot display PDF content.</entry>
		 	</row><row>
		 		<entry><codeph>ERROR_INSTALLED_READER_TOO_OLD</codeph></entry>
		 		<entry>Acrobat or Adobe Reader has been detected, but the version is too old. An HTMLLoader
		 		object cannot display PDF content.</entry>
		 	</row><row>
		 		<entry><codeph>ERROR_PREFERED_READER_TOO_OLD</codeph></entry>
		 		<entry>A sufficient version (8.1 or later) of Acrobat or Adobe Reader is detected, but the 
		 	 	the version that is set up to handle PDF content is older than 8.1. An HTMLLoader
		 		object cannot display PDF content.</entry>
		 	</row></tbody></tgroup></adobetable>
		 
 		 </apiDesc></apiValueDetail><related-links><link href="HTMLPDFCapability.html"><linktext>HTMLPDFCapability class</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:placeLoadStringContentInApplicationSandbox:get"><apiName>placeLoadStringContentInApplicationSandbox</apiName><shortdesc>
		Specifies whether content loaded via the loadString() method is put in 
		the application sandbox (true) or in a non-application sandbox 
		(false).</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>false
		
		</apiDefaultValue></apiValueDef><apiDesc>
		Specifies whether content loaded via the <codeph>loadString()</codeph> method is put in 
		the application sandbox (<codeph>true</codeph>) or in a non-application sandbox 
		(<codeph>false</codeph>).
		
		<p>When this property is set to <codeph>false</codeph>, content loaded via the <codeph>loadString()</codeph>
		method is placed in a non-application sandbox with the following characteristics:</p>
		
		<ul>
			<li>It has access to load content from the network (but not from the filesystem).</li>
			<li>It cannot load data using XMLHttpRequest.</li>
		<li>The <codeph>window.location</codeph> property is set to <codeph>"about:blank"</codeph>.</li>
		<li>The content cannot access the <codeph>window.runtime</codeph> property (like content
		in any non-application sandbox).</li>
		</ul>
		
		<p>When this property is set to <codeph>true</codeph>, the content loaded via the <codeph>loadString()</codeph>
		method is placed in the application sandbox, with access to the <codeph>window.runtime</codeph> property
		and to all AIR APIs. You should ensure that the data source for a string used in a call to the 
		<codeph>loadString()</codeph> method is trusted. Code statements in the HTML string are executed with full 
		application privileges when this property is set to <codeph>true</codeph>. You should only set this property to 
		<codeph>true</codeph> when you are certain that the string cannot contain harmful code. </p>
		
		<p>In applications compiled with the AIR 1.0 or AIR 1.1 SDKs, content loaded via the <codeph>loadString()</codeph> 
		method is placed in the application sandbox.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="HTMLLoader.html#loadString()"><linktext>loadString()</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:runtimeApplicationDomain:get"><apiName>runtimeApplicationDomain</apiName><shortdesc>
		 The application domain to use for the window.runtime object in JavaScript
		 in the HTML page.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.system:ApplicationDomain</apiValueClassifier><apiException><apiDesc>if the ApplicationDomain object is not from the 
		 caller's security domain.
		 
         </apiDesc><apiItemName>SecurityError</apiItemName><apiOperationClassifier>SecurityError</apiOperationClassifier></apiException><apiTipTexts><apiTipText>The application domain to use for the window.runtime 
		 object in JavaScript in the HTML page.
		 
		 </apiTipText></apiTipTexts></apiValueDef><apiDesc>
		 The application domain to use for the <codeph>window.runtime</codeph> object in JavaScript
		 in the HTML page. <ph platform="javascript"> This property applies to SWF content
		 using the HTMLLoader class only; it is not useful in  JavaScript code.</ph>
		 
		 <p platform="actionscript">If <codeph>null</codeph>, or if the HTML content is from a different 
         security domain than the SWF content that contains the HTMLLoader object, the page uses 
		 a default application domain for its domain.</p>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.system.xml#ApplicationDomain"><linktext>flash.system.ApplicationDomain</linktext></link><link href="flash.system.xml#SecurityDomain"><linktext>flash.system.SecurityDomain</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:scrollH:get"><apiName>scrollH</apiName><shortdesc>
         The horizontal scroll position of the HTML content in the HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
         The horizontal scroll position of the HTML content in the HTMLLoader object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:scrollV:get"><apiName>scrollV</apiName><shortdesc>
         The vertical scroll position of the HTML content in the HTMLLoader object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
         The vertical scroll position of the HTML content in the HTMLLoader object.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:textEncodingFallback:set"><apiName>textEncodingFallback</apiName><shortdesc>
        The character encoding used by the HTMLLoader content if an HTML page does not specify 
		a character encoding.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
        The character encoding used by the HTMLLoader content if an HTML page does not specify 
		a character encoding. An HTML page specifies a character encoding in a <codeph>meta</codeph> tag, 
		as in the following:
		
		<codeblock>&lt;meta http-equiv="content-type" content="text/html" charset="ISO-8859-1"&gt;</codeblock>
		
		<p>Values are defined in the IANA list of 
		<xref href="http://www.iana.org/assignments/character-sets" scope="external">valid
		character sets</xref>.
		</p>
		
		<p>If no encoding is specified by the HTML page, by the <codeph>textEncodingFallback</codeph>
		property, or by the <codeph>textEncodingOverride</codeph> property, the HTML content uses 
		ISO-8859-1 encoding.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="HTMLLoader.html#textEncodingOverride"><linktext>textEncodingOverride</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:textEncodingOverride:set"><apiName>textEncodingOverride</apiName><shortdesc>
        The character encoding used by the HTMLLoader content, overriding any setting in the HTML page.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
        The character encoding used by the HTMLLoader content, overriding any setting in the HTML page.
		An HTML page specifies a character encoding in a <codeph>meta</codeph> tag, as in the following:
		
		<codeblock>&lt;meta http-equiv="content-type" content="text/html" charset="ISO-8859-1"&gt;</codeblock>
		
		<p>This setting also overrides any setting in the <codeph>textEncodingFallback</codeph>
		property. </p>
		
		<p>Values are defined in the IANA list of 
		<xref href="http://www.iana.org/assignments/character-sets" scope="external">valid
		character sets</xref>.
		</p>
		
		<p>Set the <codeph>textEncodingOverride</codeph> property after the HTML content has loaded 
		to have AIR refresh the HTML content using the specified encoding. After the HTMLLoader
		navigates to a new page, you need to set the property again if you want the new page to 
		use a specific encoding.</p>
		
		<p>If no encoding is specified by the HTML page, by the <codeph>textEncodingFallback</codeph>
		property, or by the <codeph>textEncodingOverride</codeph> property, the HTML content uses ISO-8859-1  
		encoding.</p>
		
		<p>Setting the <codeph>textEncodingOverride</codeph> property to <codeph>null</codeph> restores 
		the default behavior.</p>
		
		</apiDesc></apiValueDetail><related-links><link href="HTMLLoader.html#textEncodingFallback"><linktext>textEncodingFallback</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:useCache:get"><apiName>useCache</apiName><shortdesc>
		Specifies whether the local cache should be consulted before HTTP requests issued by this object 
		fetch data.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiDefaultValue>initialized from URLRequestDefaults.useCache
		
		</apiDefaultValue></apiValueDef><apiDesc>
		Specifies whether the local cache should be consulted before HTTP requests issued by this object 
		fetch data. 
		
		</apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/useCache"><linktext>flash.net.URLRequest.useCache</linktext></link><link href="flash.net.xml#URLRequestDefaults/useCache"><linktext>flash.net.URLRequestDefaults.useCache</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:userAgent:get"><apiName>userAgent</apiName><shortdesc>
		 The user agent string to be used in any upcoming content requests from this HTMLLoader
		 object.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
		 The user agent string to be used in any upcoming content requests from this HTMLLoader
		 object. 
		 
		 <p>To set the user agent string, set the <codeph>userAgent</codeph> property of the HTMLLoader
		 object before calling the <codeph>load()</codeph> method. The <codeph>userAgent</codeph> 
		 property of the URLRequest object passed to the <codeph>load()</codeph> method is <i>not</i> used.</p>
		 
		 <p>You can set the default user agent string used by all HTMLLoader objects in an application 
		 domain by setting the <codeph>URLRequestDefaults.userAgent</codeph> property. If no value
		 is set for the <codeph>userAgent</codeph> property of the HTMLLoader object (or if the value 
		 is set to <codeph>null</codeph>), the user agent string is set to the value of the static 
		 <codeph>URLRequestDefaults.userAgent</codeph> property. </p>
		 
		 <p>If a value is set for neither the <codeph>userAgent</codeph> property of the HTMLLoader nor for 
		 <codeph>URLRequestDefaults.userAgent</codeph>, a default value is used as the user agent string. 
		 This default value varies depending on the runtime operating system (such as Mac OS, Linux, or Windows), 
		 the runtime language, and the runtime version, as in the following examples:</p>
		 
		 <ul>
		 
		 	<li><codeph>"Mozilla/5.0 (Macintosh; U; PPC Mac OS X; en) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li>
		 	<li><codeph>"Mozilla/5.0 (Windows; U; en) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li>
		  <li><codeph>"Mozilla/5.0 (X11; U; Linux i686; en-US) AppleWebKit/526.9+ (KHTML, like Gecko) AdobeAIR/1.5"</codeph></li>
		 </ul>
		 
		 </apiDesc></apiValueDetail><related-links><link href="flash.net.xml#URLRequest/userAgent"><linktext>flash.net.URLRequest.userAgent</linktext></link><link href="flash.net.xml#URLRequestDefaults/userAgent"><linktext>flash.net.URLRequestDefaults.userAgent</linktext></link></related-links></apiValue><apiValue id="flash.html:HTMLLoader:width:set"><apiName>width</apiName><shortdesc>
		 Specifies the width of the rectangle of the HTML canvas that is being rendered.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiIsOverride/><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 Specifies the width of the rectangle of the HTML canvas that is being rendered.
         This is the width of the HTMLLoader display object in pixels.
         Changing this property causes the HTMLLoader object to re-render the HTML document.
		 <codeph>htmlBoundsChange</codeph> events may dispatched in response to changing this property.
		 
		 When you set the <codeph>width</codeph> and 
         <codeph>height</codeph> properties of an HTMLLoader object, the bounds of the object change but
		 content is not scaled (as would happen with other types of display objects).
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLLoader:window:get"><apiName>window</apiName><shortdesc>
		 The global JavaScript object for the content loaded into the HTML control.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Object</apiValueClassifier></apiValueDef><apiDesc>
		 The global JavaScript object for the content loaded into the HTML control.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.html:HTMLWindowCreateOptions"><apiName>HTMLWindowCreateOptions</apiName><shortdesc>
	 This class defines the options that can be specified when JavaScript running
	 in an HTMLLoader object tries to create a new HTML window by calling the 
	 window.open() method.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
	 This class defines the options that can be specified when JavaScript running
	 in an HTMLLoader object tries to create a new HTML window by calling the 
	 <codeph>window.open()</codeph> method. 
	 
	 <p>This class defines the properties and methods that correspond to options in the 
	 <codeph>features</codeph> parameter passed to the <codeph>window.open()</codeph> method in JavaScript.</p>
	 
	 <p>For example, JavaScript in an HTML document (in an HTMLLoader object)
	 can include the following call to <codeph>window.open()</codeph>, in which
	 the <codeph>features</codeph> parameter (the third parameter) lists a number
	 of options:</p>
	 
	 <codeblock>window.open("http://www.adobe.com", "AdobeWindow", "scrollbars=1,menubar=1,location=0,status=0")</codeblock>
	 
	 <p>You use the HTMLWindowCreateOptions class in overriding the 
	 <codeph>createWindow()</codeph> method of a subclass of the 
	 HTMLHost class. The HTMLLoader object passes an HTMLWindowCreateOptions object 
	 as the <codeph>windowCreateOptions</codeph> parameter of the <codeph>createWindow()</codeph> 
	 method of the HTMLHost object.</p>
	 
	 </apiDesc></apiClassifierDetail><related-links><link href="HTMLHost.html#createWindow()"><linktext>HTMLHost#createWindow()</linktext></link></related-links><apiValue id="flash.html:HTMLWindowCreateOptions:fullscreen"><apiName>fullscreen</apiName><shortdesc>
    	 Specifies whether the window should be full screen.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    	 Specifies whether the window should be full screen. This property is set to <codeph>true</codeph> if the 
		 <codeph>features</codeph> string of the JavaScript call to the <codeph>window.open()</codeph>
		 method includes <codeph>"fullscreen"</codeph>, <codeph>"fullscreen=1"</codeph>, or
		 <codeph>"fullscreen=y"</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLWindowCreateOptions:height"><apiName>height</apiName><shortdesc>
		 Specifies the desired initial height of the new window.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>NaN</apiData><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 Specifies the desired initial height of the new window. This is set to the <codeph>height</codeph> value 
		 in the <codeph>features</codeph> string of the JavaScript call to the <codeph>window.open()</codeph> 
		 method. If the value is <codeph>NaN</codeph>, the default when no <codeph>height</codeph> value is 
		 specified in the <codeph>features</codeph> string, then a default window height is used.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLWindowCreateOptions:locationBarVisible"><apiName>locationBarVisible</apiName><shortdesc>
    	 Whether a location bar should be displayed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    	 Whether a location bar should be displayed. This property is set to <codeph>true</codeph> if the 
		 <codeph>features</codeph> string of the JavaScript call to the <codeph>window.open()</codeph>
		 method includes <codeph>"location"</codeph>, <codeph>"location=1"</codeph>, or <codeph>"location=y"</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLWindowCreateOptions:menuBarVisible"><apiName>menuBarVisible</apiName><shortdesc>
    	 Specifies whether a menu bar should be displayed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    	 Specifies whether a menu bar should be displayed. This property is set to <codeph>true</codeph> if the 
		 <codeph>features</codeph> string of the JavaScript call to the <codeph>window.open()</codeph> 
		 method includes <codeph>"menubar"</codeph>, <codeph>"menubar=1"</codeph>, or
		 <codeph>"menubar=y"</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLWindowCreateOptions:resizable"><apiName>resizable</apiName><shortdesc>
    	 Specifies whether the window should be resizable.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    	 Specifies whether the window should be resizable. This property is set to <codeph>true</codeph> if the 
		 <codeph>features</codeph> string of the JavaScript call to the <codeph>window.open()</codeph>
		 method includes <codeph>"resizable"</codeph>, <codeph>"resizable=1"</codeph>, or
		 <codeph>"resizable=y"</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLWindowCreateOptions:scrollBarsVisible"><apiName>scrollBarsVisible</apiName><shortdesc>
    	 Specifies whether scrollbars should be displayed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>true</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    	 Specifies whether scrollbars should be displayed. This property is set to <codeph>true</codeph> if the 
		 <codeph>features</codeph> string of JavaScript call to the <codeph>window.open()</codeph>
		 method includes <codeph>"scrollbars"</codeph>, <codeph>"scrollbars=1"</codeph>, or
		 <codeph>"scrollbars=y"</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLWindowCreateOptions:statusBarVisible"><apiName>statusBarVisible</apiName><shortdesc>
    	 Specifies whether a status bar should be displayed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    	 Specifies whether a status bar should be displayed. This property is set to <codeph>true</codeph> if the
		 <codeph>features</codeph> string of the JavaScript call to the <codeph>window.open()</codeph>
		 method includes <codeph>"status"</codeph>, <codeph>"status=1"</codeph>, or <codeph>"status=y"</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLWindowCreateOptions:toolBarVisible"><apiName>toolBarVisible</apiName><shortdesc>
    	 Specifies whether a toolbar bar should be displayed.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>false</apiData><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
    	 Specifies whether a toolbar bar should be displayed. This property is set to <codeph>true</codeph> if the 
		 <codeph>features</codeph> string of the JavaScript call to the <codeph>window.open()</codeph>
		 method includes <codeph>"toolbar"</codeph>, <codeph>"toolbar=1"</codeph>, or <codeph>"toolbar=y"</codeph>.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLWindowCreateOptions:width"><apiName>width</apiName><shortdesc>
		 Specifies the desired initial width of the new window.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>NaN</apiData><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 Specifies the desired initial width of the new window. This is set to the <codeph>width</codeph> value 
		 in the <codeph>features</codeph> string of the JavaScript call to the <codeph>window.open()</codeph> 
		 method. If the value is <codeph>NaN</codeph>, the default when no <codeph>width</codeph> value is 
		 specified in the <codeph>features</codeph> string, then a default window width is used.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLWindowCreateOptions:x"><apiName>x</apiName><shortdesc>
		 Specifies the desired initial x position of the new window on the screen.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>NaN</apiData><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 Specifies the desired initial <i>x</i> position of the new window on the screen. This is set to the 
		 value specified for <codeph>left</codeph> or <codeph>screenX</codeph> in the <codeph>features</codeph> 
		 string of the JavaScript call to the <codeph>window.open()</codeph> method. If the value 
		 is <codeph>NaN</codeph>, the default when no <codeph>left</codeph> or <codeph>screenX</codeph> value is 
		 specified in the <codeph>features</codeph> string, then a default window <i>x</i> position is used.
		 
		 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.html:HTMLWindowCreateOptions:y"><apiName>y</apiName><shortdesc>
		 Specifies the desired initial y position of the new window on the screen.</shortdesc><prolog><asMetadata><apiVersion><apiPlatform description="" name="AIR" version="1.0"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiData>NaN</apiData><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
		 Specifies the desired initial <i>y</i> position of the new window on the screen. This is set to the 
		 value specified for <codeph>top</codeph> or <codeph>screenY</codeph> in the <codeph>features</codeph> 
		 string of the JavaScript call to the <codeph>window.open()</codeph> method. If the value is 
		 <codeph>NaN</codeph>, the default when no <codeph>left</codeph> or <codeph>screenX</codeph> value is specified 
		 in the <codeph>features</codeph> string, then a default window <i>x</i> position is used.
		 
		 </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>