 
<apiPackage id="flash.text.engine"><apiName>flash.text.engine</apiName><apiDetail/><apiClassifier id="flash.text.engine:TextLine"><apiName>TextLine</apiName><shortdesc>
 The TextLine class is used to display text on the display list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.display:DisplayObjectContainer</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextLine class is used to display text on the display list.
 
 <p>You cannot create a TextLine object directly from ActionScript code. 
 If you call <codeph>new TextLine()</codeph>, an exception is thrown.
 To create a TextLine object, call the <codeph>createTextLine()</codeph> method of a TextBlock.</p>
 
 <p>The TextLine encapsulates the minimum information necessary to render its contents.
 You can retrieve additional information that is useful for interactivity through some methods that describe the properties
 of the atoms of the line.  The term atom refers to both graphic elements and characters (including groups of combining characters),
 the indivisible entities that make up a text line.  It is important to note that the player does not create or store the data that 
 these methods require until you call them. To avoid memory overhead, avoid creating atom data unnecessarily. If the atom data is no 
 longer needed, call the <codeph>flushAtomData()</codeph> method to make it available for garbage collection.</p>
 
 <p>The following methods and properties generate atom data if it does not exist:</p>
 <ul>
 <li><codeph>atomCount</codeph></li>
 <li><codeph>getAtomBidiLevel()</codeph></li>
 <li><codeph>getAtomBounds()</codeph></li>
 <li><codeph>getAtomCenter()</codeph></li>
 <li><codeph>getAtomIndexAtCharIndex()</codeph></li>
 <li><codeph>getAtomIndexAtPoint()</codeph></li>
 <li><codeph>getAtomGraphic()</codeph></li>
 <li><codeph>getAtomTextBlockBeginIndex()</codeph></li>
 <li><codeph>getAtomTextBlockEndIndex()</codeph></li>
 <li><codeph>getAtomTextRotation()</codeph></li>
 <li><codeph>getAtomWordBoundaryOnLeft()</codeph></li>
 </ul>
 
 
 <p>After normal event-dispatching for a text line finishes, if the line is valid, events are mirrored to the event dispatchers that are 
 specified in the <codeph>eventMirror</codeph> properties of the content element objects that contributed to the text line. These objects are recorded in the
 <codeph>TextLine.mirrorRegions</codeph> property. The events are not mirrored if event propagation failed or was stopped, or if the text line is not valid.</p>
 
 <p>Mirroring of mouse events is a special case.  Because mirror regions aren't actually display objects, <codeph>mouseOver</codeph> and <codeph>mouseOut</codeph>
 events are simulated for them.  <codeph>rollOver</codeph> and <codeph>rollOut</codeph> events are not simulated.  All naturally occurring 
 <codeph>mouseOver</codeph>, <codeph>mouseOut</codeph>, <codeph>rollOver</codeph> and <codeph>rollOut</codeph> events (whether targeted at the 
 text line or at children of the text line) are ignored - they are not mirrored.</p>
 
 <p>The origin of a text line object is the beginning of the baseline. If you don't set the vertical position (<codeph>y</codeph> property) 
 of a line that contains Latin text on a Roman baseline, only the descenders of the text appear below the top of the Sprite to which 
 you add the text line. See the following diagram:</p>
 
 <p><adobeimage alt="Text baselines" href="../../../images/TextLine.gif"/></p>
 
 <p>The TextLine class has several ancestor classes — DisplayObjectContainer, InteractiveObject, 
 DisplayObject, and EventDispatcher — from which it inherits properties and methods. 
 The following inherited properties are inapplicable to TextLine objects: </p>
 
 <ul>
 <li><codeph>contextMenu</codeph></li>
 <li><codeph>focusRect</codeph></li>
 <li><codeph>tabChildren</codeph></li>
 <li><codeph>tabEnabled</codeph></li>
 <li><codeph>tabIndex</codeph></li>
 <li><codeph>transform</codeph></li>
 </ul>
 
 <p>If you try to set these properties, the text engine throws the error: IllegalOperationError. You can read these properties, but they 
 always contain default values.</p>
 
 </apiDesc><example conref="examples\TextLineExample.as"> This example displays various text lines and steps through the atoms in a text 
 block, using <codeph>getAtomBounds()</codeph> to frame each one.
    <ol>
        <li>Add the NumericStepper component to the library.</li>
         <li>Save this code as TextLineExample.as in the same directory as your FLA.</li>
        <li>Set the Class in the Properties window of the FLA to TextLineExample.</li>
 </ol>
<codeblock>
package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.FontPosture;
    import flash.text.engine.FontWeight;
    import fl.controls.NumericStepper;
    import flash.events.Event;
    import flash.geom.Rectangle;
    
    public class TextLineExample extends Sprite {
        
        private var atomStepper:NumericStepper = new NumericStepper();
        private var atomDataContainer:Sprite;
        private var fontDescriptionItalic:FontDescription = new FontDescription("Arial", FontWeight.NORMAL, FontPosture.ITALIC);
        private var fontDescriptionNormal:FontDescription = new FontDescription("Arial", FontWeight.NORMAL , FontPosture.NORMAL);
        private var textBlock:TextBlock = new TextBlock();
        private var textLine:TextLine;
        
        public function TextLineExample():void {
            
            var myText:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. From the text block, " +
            "the createTextLine() method created these lines, 300 pixels wide, "  +
            "for display." ;
            
            atomStepper.minimum = 0;
            atomStepper.value = 0;
            atomStepper.width = 50;
            addChild(atomStepper);
            atomStepper.x = 20;
            atomStepper.y = 120;
            atomStepper.addEventListener(Event.CHANGE, nsChange);
            
            var directions:String = "Click up / down arrows to frame atoms in text block above.";
            
            var formatItalic:ElementFormat = new ElementFormat(fontDescriptionItalic);
            formatItalic.fontSize = 12;
            var textElement1:TextElement = new TextElement(directions, formatItalic);
            textBlock.content = textElement1;
            createLines(textBlock, 15, 160, 400, this);
            
            var formatNormal:ElementFormat = new ElementFormat(fontDescriptionNormal);
            formatNormal.fontSize = 16;
            var textElement2:TextElement = new TextElement(myText, formatNormal);
            textBlock.content = textElement2;
            createLines(textBlock, 15.0, 20.0, 300, this);
            textLine = textBlock.firstLine;
            atomStepper.maximum = textLine.atomCount - 1;
            showAtom(textLine, 0);
        }
            
        private function nsChange(event:Event):void
        {
            removeAtom(textLine);
            if (atomStepper.value == textLine.atomCount - 1)
            {
                if(textLine != textBlock.lastLine)
                {
                    textLine = textLine.nextLine;
                    atomStepper.maximum = textLine.atomCount - 1;
                    atomStepper.value = 0;
                }
            }
            showAtom(textLine, atomStepper.value);
        }
            
        private function createLines(textBlock, startX, startY, width, container)
        {
            var textLine:TextLine = textBlock.createTextLine (null, width);
            while (textLine)
            {
                textLine.x = startX;
                textLine.y = startY;
                startY += textLine.height + 2;
                container.addChild(textLine);
                textLine = textBlock.createTextLine (textLine, width);
            }
        }
            
        private function showAtom(textLine, i):void
        {
            var box:Sprite = new Sprite();
            var mcGraphics = box.graphics;
            var bounds:Rectangle = textLine.getAtomBounds(i);
            mcGraphics.lineStyle(1, 0xFF0000, 1.0);
            mcGraphics.drawRect(bounds.left, bounds.top, bounds.width, bounds.height);
            textLine.userData = textLine.addChild(box);
            displayAtomData(textLine,i);
        }
            
        private function displayAtomData(textLine, i)
        {
            if(atomDataContainer != null)
                removeChild(atomDataContainer);
            atomDataContainer=new Sprite();
            var format = new ElementFormat(fontDescriptionNormal);
            format.color = 0x00000FF;
            var n:int = 0;
            var nxtY:Number = 0;
            var atomInfo:String = "value of getAtomBidiLevel() is: " + textLine.getAtomBidiLevel(i)+"\n"
            +"value of getAtomCenter() is: " + textLine.getAtomCenter(i)+"\n"
            +"value of getAtomIndexAtCharIndex() is: " + textLine.getAtomIndexAtCharIndex(i)+"\n"
            +"value of getAtomTextBlockBeginIndex() is: " + textLine.getAtomTextBlockBeginIndex(i)+"\n"
            +"value of getAtomTextBlockEndIndex() is: " + textLine.getAtomTextBlockEndIndex(i)+"\n"
            +"value of getAtomTextRotation() is: " + textLine.getAtomTextRotation(i)+"\n";
            var atomtextBlock:TextBlock = new TextBlock();
            var textElement3:TextElement = new TextElement(atomInfo, format);
            atomtextBlock.content = textElement3;
            createLines(atomtextBlock,20,200,500, atomDataContainer)
            addChild(atomDataContainer);
        }
            
        private function removeAtom(textLine):void
        {
            textLine.removeChild(textLine.userData);
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links><apiOperation id="flash.text.engine:TextLine:dump"><apiName>dump</apiName><shortdesc>
	 Dumps the underlying contents of the TextLine as an XML string.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Dumps the underlying contents of the TextLine as an XML string.
	 This can be useful in automated testing, and includes text, formatting, and rendering information.
	 It is only available in the debugger Flash Player.
	 
	 <p>For a description of the output, see the TextBlock.dump() method.</p>
	 
	 <p><b>Note:</b> The content and format of the output from this method could change in the future. Adobe does not guarantee backward 
	 compatibility for this method.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/dump()"><linktext>TextBlock.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:flushAtomData"><apiName>flushAtomData</apiName><shortdesc>
	 Releases the atom data of the line for garbage collection.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiType value="void"/></apiReturn></apiOperationDef><apiDesc>
	 Releases the atom data of the line for garbage collection. The term <i>atom</i> refers to the indivisible entities that make up a text line.
	 The text engine generates atom data when you access the <codeph>atomCount</codeph> property or call one of the methods that retrieve information about
	 an atom.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>atomCount</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBidiLevel()"><linktext>getAtomBidiLevel()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomBounds()"><linktext>getAtomBounds()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomCenter()"><linktext>getAtomCenter()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomGraphic()"><linktext>getAtomGraphic()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtCharIndex()"><linktext>getAtomIndexAtCharIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomIndexAtPoint()"><linktext>getAtomIndexAtPoint()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockBeginIndex()"><linktext>getAtomTextBlockBeginIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextBlockEndIndex()"><linktext>getAtomTextBlockEndIndex()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>getAtomTextRotation()</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomWordBoundaryOnLeft()"><linktext>getAtomWordBoundaryOnLeft()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBidiLevel"><apiName>getAtomBidiLevel</apiName><shortdesc>
	 Gets the bidirectional level of the atom at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The specified atom index is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The bidirectional level of the atom at <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the atom (for example, the first atom is 0,
	 the second atom is 1, and so on).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gets the bidirectional level of the atom at the specified index. Determined by a combination of 
	 <codeph>TextBlock.bidiLevel</codeph> and the Unicode bidirectional properties of the characters that 
	 form the line.
	 
	 <p>For example, if you start a text block with some Hebrew text, you set <codeph>TextBlock.bidiLevel</codeph> to 1, establishing 
	 a default of right to left.  If within the text you have a quote in English (left to right), that text has an <codeph>AtomBidiLevel</codeph> of 
	 2. If within the English you have  a bit of Arabic (right to left), <codeph>AtomBidiLevel</codeph> for that run goes to 3.  If within the 
	 Arabic a number (left to right) occurs, the <codeph>AtomBidiLevel</codeph> setting for the number is 4. It does not matter in which line the 
	 atoms end up; the Hebrew atoms are <codeph>AtomBidiLevel</codeph> 1, the English atoms are <codeph>AtomBidiLevel</codeph> 2, Arabic atoms 
	 are <codeph>AtomBidiLevel</codeph> 3, and the number atoms are <codeph>AtomBidiLevel</codeph> 4.</p>
	 
	 <p>Calling this method causes the player to create the atom data if it does not yet exist.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>TextBlock.bidiLevel</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomBounds"><apiName>getAtomBounds</apiName><shortdesc>
	 Gets the bounds of the atom at the specified index relative to the text line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The atom index specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The bounds of the atom at <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the atom (for example, the first atom is 0,
	 the second atom is 1, and so on).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gets the bounds of the atom at the specified index relative to the text line. The bounds of the specified atom consist of 
	 its horizontal position (<codeph>x</codeph>) in the line, its vertical position in the line (<codeph>y</codeph>), its width (<codeph>w</codeph>),
	 and its height (<codeph>h</codeph>). All values are in pixels. 
	 
	 <p>Calling this method causes the player to create the atom data if it does not yet exist.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomCenter"><apiName>getAtomCenter</apiName><shortdesc>
	 Gets the center of the atom as measured along the baseline at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The atom index specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The center of the atom at <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the atom (for example, the first atom is 0,
	 the second atom is 1, and so on).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gets the center of the atom as measured along the baseline at the specified index.
	 
	 <p>Calling this method causes the player to create the atom data, if it does not yet exist.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomGraphic"><apiName>getAtomGraphic</apiName><shortdesc>
	 Gets the graphic of the atom at the specified index, or null if the atom is a character.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The atom index specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The graphic of the atom at <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the atom (for example, the first atom is 0,
	 the second atom is 1, and so on).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gets the graphic of the atom at the specified index, or <codeph>null</codeph> if the atom is a character.
	 
	 <p>Calling this method causes the player to create the atom data if it does not yet exist.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtCharIndex"><apiName>getAtomIndexAtCharIndex</apiName><shortdesc>
	 Returns the index of the atom containing the character specified by the charIndex parameter,
	 or -1 if the character does not contribute to any atom in the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The index of the atom containing the character at <codeph>charIndex</codeph>.   
	 Returns -1 if the character does not contribute to any atom in the line.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the character (for example, the first character is 0,
	 the second character is 1, and so on).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns the index of the atom containing the character specified by the <codeph>charIndex</codeph> parameter,
	 or -1 if the character does not contribute to any atom in the line.
	 The <codeph>charIndex</codeph> is relative to the entire contents of the text block containing the line.
	 
	 <p>Calling this method causes the player to create the atom data if it does not yet exist.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomIndexAtPoint"><apiName>getAtomIndexAtPoint</apiName><shortdesc>
	 Returns the index of the atom at the point specified by the x
	 and y parameters, or -1 if no atom exists at that point.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The index of the atom under the point.  Returns -1 if the point is not over any atom.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>stageX</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The global <i>x</i> coordinate of the point to test.
	 </apiDesc></apiParam><apiParam><apiItemName>stageY</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The global <i>y</i> coordinate of the point to test.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns the index of the atom at the point specified by the <codeph>x</codeph>
	 and <codeph>y</codeph> parameters, or -1 if no atom exists at that point.
	 
	 <p>Calling this method causes the player to create the atom data if it does not yet exist.</p>
	 
	 <p>This method takes global coordinates so that you can easily use it with <codeph>MouseEvent.stageX</codeph>
	 and <codeph>MouseEvent.stageY</codeph> properties.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockBeginIndex"><apiName>getAtomTextBlockBeginIndex</apiName><shortdesc>
	 Gets the text block begin index of the atom at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The atom index specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The text block begin index of the atom at <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the atom (for example, the first atom is 0,
	 the second atom is 1, and so on).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gets the text block begin index of the atom at the specified index.
	 
	 <p>Calling this method causes the player to create the atom data if it does not yet exist.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextBlockEndIndex"><apiName>getAtomTextBlockEndIndex</apiName><shortdesc>
	 Gets the text block end index of the atom at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The atom index specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The text block end index of the atom at <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the atom (for example, the first atom is 0,
	 the second atom is 1, and so on).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gets the text block end index of the atom at the specified index.
	 
	 <p>Calling this method causes the player to create the atom data if it does not yet exist.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomTextRotation"><apiName>getAtomTextRotation</apiName><shortdesc>
	 Gets the rotation of the atom at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The specified atom index is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The rotation of the atom at <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>String</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the atom (for example, the first atom is 0,
	 the second atom is 1, and so on).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gets the rotation of the atom at the specified index.  TextRotation constants are used for this property.
	 The rotation of the atom is the cumulative rotations of the element and the line.  Its primary use is for 
	 setting the orientation of the caret (cursor) when interacting with a TextLine.
	 
	 <p>Calling this method causes the player to create the atom data if it does not yet exist.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getAtomWordBoundaryOnLeft"><apiName>getAtomWordBoundaryOnLeft</apiName><shortdesc>
	 Indicates whether a word boundary occurs to the left of the atom at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The atom index specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>A Boolean value that indicates whether a word boundary occurs to the left of the atom at <codeph>atomIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>atomIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the atom (for example, the first atom is 0,
	 the second atom is 1, and so on).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Indicates whether a word boundary occurs to the left of the atom at the specified index.
	 Word boundaries are determined based on the Unicode properties of the characters which contributed to the line.
	 
	 <p>Calling this method causes the player to create the atom data if it does not yet exist.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getBaselinePosition"><apiName>getBaselinePosition</apiName><shortdesc>
	 Gets the position of the specified baseline, relative to TextBlock.baselineZero.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>If the <codeph>baseline</codeph> specified is not a member of <codeph>TextBaseline</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>The position of the specified baseline relative to <codeph>TextBlock.baselineZero</codeph>.
	 
	 </apiDesc><apiOperationClassifier>Number</apiOperationClassifier></apiReturn><apiParam><apiItemName>baseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The baseline for which to retrieve the position.  Use <codeph>TextBaseline</codeph> values.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Gets the position of the specified baseline, relative to <codeph>TextBlock.baselineZero</codeph>.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextLine:getMirrorRegion"><apiName>getMirrorRegion</apiName><shortdesc>
	 Returns the first TextLineMirrorRegion on the line whose mirror property matches
	 that specified by the mirror parameter, or null if no match exists.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The first <codeph>TextLineMirrorRegion</codeph> on the line whose <codeph>mirror</codeph> property matches
	 the specified value, or <codeph>null</codeph> if no match exists.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLineMirrorRegion</apiOperationClassifier></apiReturn><apiParam><apiItemName>mirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiDesc>The <codeph>EventDispatcher</codeph> mirror object to search for.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns the first <codeph>TextLineMirrorRegion</codeph> on the line whose <codeph>mirror</codeph> property matches
	 that specified by the <codeph>mirror</codeph> parameter, or <codeph>null</codeph> if no match exists.
	 <p>Even a single <codeph>TextElement</codeph> can produce multiple <codeph>TextLineMirrorRegion</codeph>
	 objects on one or more lines, depending on bidirectional level and line breaking. The <codeph>nextRegion</codeph> and 
	 <codeph>previousRegion</codeph> properties link all the mirror regions generated from one text element.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextLine:MAX_LINE_WIDTH"><apiName>MAX_LINE_WIDTH</apiName><shortdesc> 
	The maximum requested width of a text line, in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>1000000</apiData><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc> 
	The maximum requested width of a text line, in pixels. The <codeph>TextBlock.createTextLine()</codeph> method uses this constant
	as the default value for the <codeph>width</codeph> parameter, if you do not specify a value.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:userData"><apiName>userData</apiName><shortdesc>
	 Provides a way for the author to associate arbitrary data with the text line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Provides a way for the author to associate arbitrary data with the text line. 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:ascent:get"><apiName>ascent</apiName><shortdesc>
	 Specifies the number of pixels from the baseline to the top of the tallest characters in the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Specifies the number of pixels from the baseline to the top of the tallest characters in the line. For a TextLine that contains only a 
	 graphic element, <codeph>ascent</codeph> is set to 0.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:atomCount:get"><apiName>atomCount</apiName><shortdesc>
	 The number of atoms in the line, which is the number of indivisible elements, including spaces and graphic 
	 elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>The <codeph>validity</codeph> of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The number of atoms in the line, which is the number of indivisible elements, including spaces and graphic 
	 elements.
	 
	 <p>Accessing this property causes the player to create the atom data if it does not yet exist.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/flushAtomData()"><linktext>flushAtomData()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:descent:get"><apiName>descent</apiName><shortdesc>
	 Specifies the number of pixels from the baseline to the bottom of the lowest-descending characters in the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 Specifies the number of pixels from the baseline to the bottom of the lowest-descending characters in the line. For a TextLine that 
	 contains only a graphic element, <codeph>descent</codeph> is set to 0.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLine:hasGraphicElement:get"><apiName>hasGraphicElement</apiName><shortdesc>
	 Indicates whether the text line contains any graphic elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates whether the text line contains any graphic elements.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:mirrorRegions:get"><apiName>mirrorRegions</apiName><shortdesc>
	 A Vector containing the TextLineMirrorRegion objects associated with the line, or null if none exist.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiType value="Vector$flash.text.engine:TextLineMirrorRegion"/></apiValueDef><apiDesc>
	 A Vector containing the <codeph>TextLineMirrorRegion</codeph> objects associated with the line, or <codeph>null</codeph> if none exist.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:nextLine:get"><apiName>nextLine</apiName><shortdesc>
	 The next TextLine in the TextBlock, or null if the current line is the last line in the block
	 or the validity of the line is TextLineValidity.STATIC.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 The next TextLine in the TextBlock, or <codeph>null</codeph> if the current line is the last line in the block
	 or the validity of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/previousLine"><linktext>previousLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:previousLine:get"><apiName>previousLine</apiName><shortdesc>
	 The previous TextLine in the TextBlock, or null if the line is the first line in the block
	 or the validity of the line is TextLineValidity.STATIC.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 The previous TextLine in the TextBlock, or <codeph>null</codeph> if the line is the first line in the block
	 or the validity of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/nextLine"><linktext>nextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:rawTextLength:get"><apiName>rawTextLength</apiName><shortdesc>
	 The length of the raw text in the text block that became the line,
	 including the U+FDEF characters representing graphic elements
	 and any trailing spaces, which are part of the line but not are displayed.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 The length of the raw text in the text block that became the line,
	 including the U+FDEF characters representing graphic elements
	 and any trailing spaces, which are part of the line but not are displayed.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement/rawText"><linktext>TextElement.rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:specifiedWidth:get"><apiName>specifiedWidth</apiName><shortdesc>
	 The width that was specified to the TextBlock.createTextLine() method when it created the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The width that was specified to the <codeph>TextBlock.createTextLine()</codeph> method when it created the line.
	 This value is useful when deciding if a change requires rebreaking the line.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link><link href="flash.text.engine.xml#TextLine/unjustifiedTextWidth"><linktext>unjustifiedTextWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 The TextBlock containing this text line, or null if the validity of the line is TextLineValidity.STATIC.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 The TextBlock containing this text line, or null if the validity of the line is <codeph>TextLineValidity.STATIC</codeph>.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 The index of the first character of the line in the raw text of the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 The index of the first character of the line in the raw text of the text block.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textHeight:get"><apiName>textHeight</apiName><shortdesc>
	 The logical height of the text line, which is equal to ascent + descent.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The logical height of the text line, which is equal to <codeph>ascent</codeph> + <codeph>descent</codeph>.
	 To get the inked height, access the inherited <codeph>height</codeph> property.
	 
	 <p>The value is calculated based on the difference between the baselines that bound the line, 
	 either ideo top/bottom or ascent/descent depending on whether TextBlock.baselineZero is ideo or not. 
	 Graphic elements are not considered when computing these baselines.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/height"><linktext>flash.display.DisplayObject.height</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:textWidth:get"><apiName>textWidth</apiName><shortdesc>
	 The logical width of the text line, which is the width that the text engine uses to lay out the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The logical width of the text line, which is the width that the text engine uses to lay out the line. Access the inherited 
	 <codeph>width</codeph> property to get the actual width of the bounding box of all the drawn pixels.
	 
	 </apiDesc><example conref="examples\TextLine_textWidthExample.as"> This example displays a line once in normal posture and once in
 italic, and traces the values of the <codeph>specifiedWidth</codeph>, <codeph>textWidth</codeph>
 and <codeph>width</codeph> properties in each case.
 The trace output is: 
 <ul>
         <li>specifiedWidth is: 500</li>
      <li>textWidth is: 268.9921875</li>
      <li>width is: 269</li>
      <li>specifiedWidth is: 500</li>
      <li>textWidth is: 267.52734375</li>
      <li>width is: 267.55</li>
 </ul>
<codeblock>
 
package {
import flash.display.Sprite;
import flash.text.engine.TextBlock;
import flash.text.engine.TextElement;
import flash.text.engine.TextLine;
import flash.text.engine.FontDescription;
import flash.text.engine.ElementFormat;
import flash.text.engine.FontPosture;

    public class TextLine_textWidthExample extends Sprite {
        
        public function TextLine_textWidthExample() {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
            var yPos:Number = 20;
            var fontDescription:FontDescription = new FontDescription();
            var textBlock:TextBlock = new TextBlock();
            fontDescription.fontPosture = FontPosture.NORMAL;
            var format:ElementFormat = new ElementFormat(fontDescription, 12);
            var textElement:TextElement = new TextElement(str, format);
            textBlock.content = textElement;
            createLine(textBlock, yPos);
            var fontDescriptionItalic = fontDescription.clone();
            fontDescriptionItalic.fontPosture = FontPosture.ITALIC;
            var formatItalic = new ElementFormat(fontDescriptionItalic, 12);
            textElement = new TextElement(str, formatItalic);
            textBlock.content = textElement;
            createLine(textBlock, yPos + 20);
        }

        private function createLine(textBlock:TextBlock, yPos:Number):void {
            var textLine:TextLine = textBlock.createTextLine (null, 500);
            trace("specifiedWidth is: " + textLine.specifiedWidth);
            trace("textWidth is: " + textLine.textWidth);
            trace("width is: " + textLine.width);
            addChild(textLine);
            textLine.x = 15;
            textLine.y = yPos;     
        }
    }
}

</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/specifiedWidth"><linktext>specifiedWidth</linktext></link><link href="flash.display.xml#DisplayObject/width"><linktext>flash.display.DisplayObject.width</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:unjustifiedTextWidth:get"><apiName>unjustifiedTextWidth</apiName><shortdesc>
	 The width of the line if it was not justified.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The width of the line if it was not justified. For unjustified text, this value is the same as <codeph>textWidth</codeph>. For 
	 justified text, this value is what the length would have been without justification, and <codeph>textWidth</codeph> represents 
	 the actual line width. For example, when the following String is justified and submitted to <codeph>TextBlock.createTextLine()</codeph>
	 with a width of 500, it has an actual width of 500 but an unjustified width of 268.9921875.
	 
	 </apiDesc><example>When the String in the following example is justified and submitted to TextBlock.createTextLine() with a width of 500, 
	 it gets an actual width of 500 but has an unjustified width of 268.9921875.
	 <codeblock rev="3.0">
	 import flash.display.Sprite;
	 import flash.text.engine.TextBlock;
	 import flash.text.engine.TextElement;
	 import flash.text.engine.TextLine;
	 import flash.text.engine.FontDescription;
	 import flash.text.engine.ElementFormat;
	 import flash.text.engine.SpaceJustifier;
	 import flash.text.engine.LineJustification;

	 var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, ";
	 var fontDescription:FontDescription = new FontDescription();
	 var textBlock:TextBlock = new TextBlock();
	 var format:ElementFormat = new ElementFormat(fontDescription, 12);
	 var textElement:TextElement = new TextElement(str, format);
	 textBlock.content = textElement;
	 var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_INCLUDING_LAST);
	 textBlock.textJustifier = spaceJustifier;
	 var textLine:TextLine = textBlock.createTextLine(null, 500);
	 textLine.y = 20;

	 addChild(textLine);
	 trace("textWidth value is: " + textLine.textWidth);		// 500.00244140625
	 trace("unjustifiedTextWidth is: " + textLine.unjustifiedTextWidth); // 268.9921875
	 </codeblock>
	 
	 </example></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextLine/specifiedTextWidth"><linktext>specifiedTextWidth</linktext></link><link href="flash.text.engine.xml#TextLine/textWidth"><linktext>textWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextLine:validity:get"><apiName>validity</apiName><shortdesc>
	 Specifies the current validity of the text line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If current value is <codeph>TextLineValidity.STATIC</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If current value is <codeph>TextLineValidity.INVALID</codeph> and new value is anything other than
     <codeph>TextValidity.STATIC</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If current value is <codeph>TextLineValidity.POSSIBLY_INVALID</codeph> and new value is 
     <codeph>TextLineValidity.VALID</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If new value is <codeph>TextLineValidity.POSSIBLY_INVALID</codeph>.
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies the current validity of the text line.
	 System values for this property are found in the members of the 
	 <codeph>TextLineValidity</codeph> class.
	 The rules for setting this property are as follows:
	 
	 <p>A line is considered USER_INVALID if validity is set to any string which is not a member of <codeph>TextLineValidity</codeph>.
	 USER_INVALID is an abstraction used here to represent any such value.</p>
	 
	 <p>When the contents of the TextBlock are modified, player code marks affected text lines, the previous line, and all following lines as INVALID.
	 The previous line must be marked invalid when a change allows the previous line to absorb part of the content that was
	 originally on the first affected line.</p>
	 
	 <p>Newly broken lines are always VALID. The player may change lines that follow from VALID to POSSIBLY_INVALID or INVALID.
	 It may change POSSIBLY_INVALID lines to VALID if the line breaks match up, or to INVALID if they don't.</p>
	 
	 <p>User code can mark VALID lines as INVALID or USER_INVALID, and can mark USER_INVALID lines as VALID.  User code cannot mark lines POSSIBLY_INVALID.</p>
	 
	 <p>User code can mark any line STATIC.  Doing so causes the <codeph>block</codeph> member to become <codeph>null</codeph>.
	 It  also clears the atom data of the line and prevents it from being re-created.  Any graphic elements in a STATIC text line
	 is removed and reparented if they are part of a new text line broken from the text block from which the STATIC text line
	 originally derived.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabStop"><apiName>TabStop</apiName><shortdesc>
 The TabStop class represents the properties of a tab stop in a text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TabStop class represents the properties of a tab stop in a text block. You assign tab stops as a Vector of TabStop objects
 to the <codeph>TextBlock.tabStops</codeph> property.
 
 <p>Setting the properties of a TabStop object after you apply it to a TextBlock does not invalidate the TextBlock.</p>
 
 </apiDesc><example conref="examples\TabStopExample.as"> This example illustrates the effects of the four tab stop alignment settings - START, 
 CENTER, DECIMAL, and END.
<codeblock>
package {
    
    import flash.text.engine.*;
    import flash.display.Sprite;
    
    public class TabStopExample extends Sprite {
        
        public function TabStopExample():void {
            var container:Sprite = new Sprite(); 
            
            var english:ElementFormat = new ElementFormat(); 
            english.fontDescription = new FontDescription("Arial"); 
            english.fontSize = 16;
            english.locale = "en"; 
            
            var tabStops:Vector.&lt;TabStop&gt; = new Vector.&lt;TabStop&gt;();    
            tabStops.push(
                new TabStop(TabAlignment.START, 20),
                new TabStop(TabAlignment.CENTER, 120),
                new TabStop(TabAlignment.DECIMAL, 220, "."),
                new TabStop(TabAlignment.END, 320)
            ); 
    
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(
                "\tstart\tcenter\tdeci.mal\tend\n" +        
                "\tl\tl\t3.4\tl\n" +
                "\tlm\tlm\t234.56\tlm\n" +
                "\tlmn\tlmn\t12345678.34567\tlmn\n"
                , english); 
            textBlock.tabStops = tabStops;
            var y:Number = 60;
            var previousTextLine:TextLine = null; 
            var textLine:TextLine;
            var i:int;
            var tabOrigin:Number = 100;
            for (i = 0; i &lt; 4; i++) {
                textLine = textBlock.createTextLine(previousTextLine, 1000, 0); 
                textLine.x = 20;
                textLine.y = y; 
                
                container.addChild(textLine);     
                
                y += 25; 
                previousTextLine = textLine; 
            }
            addChild(container);        
        }
    }
}

</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>TextBlock.tabStops</linktext></link><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links><apiConstructor id="flash.text.engine:TabStop:TabStop"><apiName>TabStop</apiName><shortdesc>
	 Creates a new TabStop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>alignment</codeph> specified is not a member of <codeph>TabAlignment</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>alignment</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>start</apiData><apiDesc>The tab alignment type of this tab stop.
     Valid values for this property are found in the members of the <codeph>TabAlignment</codeph> class.
     The default value is <codeph>TabAlignment.START</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>position</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>The position of the tab stop, in pixels.
     The default value is <codeph>0.0</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>decimalAlignmentToken</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData></apiData><apiDesc>The alignment token to be used if the <codeph>alignment</codeph> is <codeph>TabAlignment.DECIMAL</codeph>,
     The default value is <codeph>""</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Creates a new TabStop.
     </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:TabStop:alignment:get"><apiName>alignment</apiName><shortdesc>
	 Specifies the tab alignment for this tab stop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value that is not a member of <codeph>TabAlignment</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies the tab alignment for this tab stop. Use the constants in the TabAlignment class to 
	 set this property.
	 
	 <p>The default value is <codeph>TabAlignment.START</codeph>.</p>
	 
	 <p>Use the <codeph>lineOffset</codeph> argument to <codeph>TextBlock.createTextLine()</codeph> 
	 to adjust the tabs if the origin of the line does not align with other lines that
	 share the same tab stops.</p>
	 
	 <p>Use the following constants from the TabAlignment class to set the value for this property:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TabAlignment.START</codeph></entry>
	 	<entry>The <codeph>position</codeph> property specifies the number of pixels that the <i>start</i> of the tabbed text is from the start of the text line.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.CENTER</codeph></entry>
	 	<entry>The <codeph>position</codeph> property specifies the number of pixels that the <i>center</i> of the tabbed text is from the start of the text line.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.END</codeph></entry>
	 	<entry>The <codeph>position</codeph> property specifies the number of pixels that the <i>end</i> of the tabbed text is from the start of the text line.</entry>
	   </row><row>
	 	<entry><codeph>TabAlignment.DECIMAL</codeph></entry>
	 	<entry>The <codeph>position</codeph> property specifies the number of pixels that the alignment token is from the start of the text line.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment"><linktext>TabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:decimalAlignmentToken:get"><apiName>decimalAlignmentToken</apiName><shortdesc>
	 Specifies the alignment token to use when you set the alignment property to TabAlignment.DECIMAL.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Specifies the alignment token to use when you set the <codeph>alignment</codeph> property to <codeph>TabAlignment.DECIMAL</codeph>. The value
	 is a String that occurs in the text line.
	 
	 <p>The default value is <codeph>""</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabAlignment/DECIMAL"><linktext>TabAlignment.DECIMAL</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TabStop:position:get"><apiName>position</apiName><shortdesc>
	 The position of the tab stop, in pixels, relative to the start of the text line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>If set to a value less than 0.0.
   	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The position of the tab stop, in pixels, relative to the start of the text line.
	 
	 <p>The default value is 0.0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontLookup"><apiName>FontLookup</apiName><shortdesc>
The FontLookup class is an enumeration of constant values used with FontDescription.fontLookup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The FontLookup class is an enumeration of constant values used with <codeph>FontDescription.fontLookup</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link></related-links><apiValue id="flash.text.engine:FontLookup:DEVICE"><apiName>DEVICE</apiName><shortdesc> 
	Used to indicate device font lookup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>device</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to indicate device font lookup.
	Flash Player uses the fonts installed on the system that is running the SWF file.
	
	<p>Using device fonts results in a smaller movie size, because font data
	is not included in the file.</p>
	
	<p>Text rendered with device fonts is not always displayed the same across different
	systems and platforms, because Flash Player uses the fonts that are installed on the system.</p>
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontLookup:EMBEDDED_CFF"><apiName>EMBEDDED_CFF</apiName><shortdesc> 
	Used to indicate embedded CFF font lookup.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>embeddedCFF</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to indicate embedded CFF font lookup.
	Flash Player uses font outlines embedded in the published SWF file.
	
	<p>Text fields that use embedded fonts are always displayed
	in the chosen font, whether that font is installed
	on the playback system or not.</p>
	
	<p>One drawback to embedded fonts is that they increase the size of the SWF file.</p>
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TypographicCase"><apiName>TypographicCase</apiName><shortdesc>
The TypographicCase class is an enumeration of constant values for setting the typographicCase property 
of the ElementFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The TypographicCase class is an enumeration of constant values for setting the <codeph>typographicCase</codeph> property 
of the ElementFormat class. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/typographicCase"><linktext>ElementFormat.typographicCase</linktext></link></related-links><apiValue id="flash.text.engine:TypographicCase:CAPS"><apiName>CAPS</apiName><shortdesc> 
	Specifies that spacing is adjusted for uppercase characters on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>caps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that spacing is adjusted for uppercase characters on output.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:CAPS_AND_SMALL_CAPS"><apiName>CAPS_AND_SMALL_CAPS</apiName><shortdesc> 
	Specifies that all lowercase characters use small-caps glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>capsAndSmallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that all lowercase characters use small-caps glyphs on output.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Specifies default typographic case.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies default typographic case. The results are font-dependent; characters use the settings specified by the font designer
	without any features applied.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:LOWERCASE"><apiName>LOWERCASE</apiName><shortdesc> 
	Specifies that all characters use lowercase glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lowercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that all characters use lowercase glyphs on output.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:SMALL_CAPS"><apiName>SMALL_CAPS</apiName><shortdesc> 
	Specifies that uppercase characters use small-caps glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>smallCaps</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that uppercase characters use small-caps glyphs on output.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:TITLE"><apiName>TITLE</apiName><shortdesc> 
	Specifies that uppercase characters use title glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>title</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that uppercase characters use title glyphs on output.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TypographicCase:UPPERCASE"><apiName>UPPERCASE</apiName><shortdesc> 
	Specifies that all characters use uppercase glyphs on output.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uppercase</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that all characters use uppercase glyphs on output.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitCase"><apiName>DigitCase</apiName><shortdesc>
The DigitCase class is an enumeration of constant values used in setting the digitCase property 
of the ElementFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The DigitCase class is an enumeration of constant values used in setting the <codeph>digitCase</codeph> property 
of the ElementFormat class. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitCase"><linktext>flash.text.engine.ElementFormat.digitCase</linktext></link></related-links><apiValue id="flash.text.engine:DigitCase:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Used to specify default digit case.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify default digit case. The results are font-dependent; characters use the settings specified by the font designer
	without any features applied.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:LINING"><apiName>LINING</apiName><shortdesc> 
	Used to specify lining digit case.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>lining</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify lining digit case.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitCase:OLD_STYLE"><apiName>OLD_STYLE</apiName><shortdesc> 
	Used to specify old style digit case.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>oldStyle</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify old style digit case.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextElement"><apiName>TextElement</apiName><shortdesc>
 The TextElement class represents a string of formatted text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextElement class represents a string of formatted text. Assign a TextElement object to the <codeph>content</codeph>
 property of a TextBlock object to create a block of text. Assign it to a GroupElement object to combine it with other text
 and graphic elements as a unit. Use the ElementFormat class to format the text.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:TextElement:TextElement"><apiName>TextElement</apiName><shortdesc>
	 Creates a new TextElement instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>text</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>null</apiData><apiDesc>The text for the element.  The default value is <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>The element format for the text in the element.  The default value is <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>The <codeph>EventDispatcher</codeph> object that receives copies of every
	 event dispatched to text lines based on this content element.  The default value is <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>The rotation applied the element as a unit. Use <codeph>flash.text.engine.TextRotation</codeph>
	 constants for this property.  The default value is <codeph>flash.text.engine.TextRotation.ROTATE_0</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Creates a new TextElement instance. 
	 
	 </apiDesc><example conref="examples\TextElementExample.as"> The following example creates a TextElement object from a string of text, formats
 it using a font size of 12 and the color red (0xCC0000), and assigns it to the 
 <codeph>content</codeph> property of a TextBlock. It calls the createLines() function to break the 
 block of text into lines of 150 pixels each.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    
    public class TextElementExample extends Sprite {
        
        public function TextElementExample():void {
            
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:TextElement:replaceText"><apiName>replaceText</apiName><shortdesc>
	 Replaces the range of characters that the beginIndex and
	 endIndex parameters specify with the contents
	 of the newText parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>beginIndex</codeph> or <codeph>endIndex</codeph> specified is out of range.
     	 
	 
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value for the start position of the replacement range.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value following the end position of the replacement range.
	 </apiDesc></apiParam><apiParam><apiItemName>newText</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The text to use to replace the specified range of characters.
	  
     	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Replaces the range of characters that the <codeph>beginIndex</codeph> and
	 <codeph>endIndex</codeph> parameters specify with the contents
	 of the <codeph>newText</codeph> parameter. The <codeph>beginIndex</codeph> and
	 <codeph>endIndex</codeph> values refer to the current contents of <codeph>text</codeph>.
	 <p>To delete text, pass <codeph>null</codeph> for <codeph>newText</codeph>.</p>
	 <p>To insert text, pass the same value for <codeph>beginIndex</codeph> and <codeph>endIndex</codeph>.  
	 The new text is inserted before the specified index.</p>
	 <p>To append text, pass <codeph>text.length</codeph> for <codeph>beginIndex</codeph> and <codeph>endIndex</codeph>.</p>
	 <p>To set all the text, pass 0 for <codeph>beginIndex</codeph> and <codeph>text.length</codeph> for <codeph>endIndex</codeph>.</p>
	 
	 </apiDesc><example conref="examples\TextElement_replaceTextExample.as"> This example calls <codeph>replaceText()</codeph> several times to do the following:
     <ul>
         <li> insert a string at the beginning of text</li>
         <li> append a string to the end of text</li>
         <li> insert a string in the middle of text</li>
        <li> replace text entirely with new text</li>
    </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    
    
    public class TextElement_replaceTextExample extends Sprite {
        public function TextElement_replaceTextExample():void {
            
            var str:String = "0123456";
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 14;
            var textElement:TextElement = new TextElement(str, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textElement.replaceText(0, 0, "abc");  
            createLine(textBlock, 20);           //"abc0123456"
            textElement.replaceText(10, 10, "abc");   
            createLine(textBlock, 40);            // "abc0123456abc"
            textElement.replaceText(5, 8, "abc");
            createLine(textBlock, 60);         // "abc01abc56abc"
            textElement.replaceText(0, 13, "abc");
            createLine(textBlock, 80);            // "abc"
            textElement.replaceText(0, 3, "That's all she wrote!");
            createLine(textBlock, 100);        // "That's all she wrote" */
        }
            
        private function createLine(textBlock:TextBlock, y:Number):void {
            var textLine:TextLine = textBlock.createTextLine(null, 150);
            textLine.x = 10;
            textLine.y = y;
            addChild(textLine);
        }
    }
}
</codeblock></example></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextElement:text:set"><apiName>text</apiName><shortdesc>
	 Receives the text that is the content of the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Receives the text that is the content of the element.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineValidity"><apiName>TextLineValidity</apiName><shortdesc>
The TextLineValidity class is an enumeration of constant values for setting the validity property 
of the TextLine class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The TextLineValidity class is an enumeration of constant values for setting the <codeph>validity</codeph> property 
of the TextLine class. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/firstInvalidLine"><linktext>TextBlock.firstInvalidLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link></related-links><apiValue id="flash.text.engine:TextLineValidity:INVALID"><apiName>INVALID</apiName><shortdesc> 
	Specifies that the line is invalid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>invalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that the line is invalid.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:POSSIBLY_INVALID"><apiName>POSSIBLY_INVALID</apiName><shortdesc> 
	Specifies that the text line is possibly invalid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>possiblyInvalid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that the text line is possibly invalid.  Flash Player uses this validity during rebreaking of a previously broken text 
	block whose content has not changed.  You cannot set this value.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:STATIC"><apiName>STATIC</apiName><shortdesc> 
	Specifies that the line is static, and that the connection between the line and the text block has been severed, 
	and the atom data that is unnecessary for rendering has been discarded.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>static</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that the line is static, and that the connection between the line and the text block has been severed, 
	and the atom data that is unnecessary for rendering has been discarded.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineValidity:VALID"><apiName>VALID</apiName><shortdesc> 
	Specifies that the text line is valid.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>valid</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that the text line is valid.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontPosture"><apiName>FontPosture</apiName><shortdesc>
The FontPosture class is an enumeration of constant values used with FontDescription.fontPosture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The FontPosture class is an enumeration of constant values used with <codeph>FontDescription.fontPosture</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontPosture"><linktext>flash.text.engine.FontDescription.fontPosture</linktext></link></related-links><apiValue id="flash.text.engine:FontPosture:ITALIC"><apiName>ITALIC</apiName><shortdesc> 
	Used to indicate italic font posture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>italic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to indicate italic font posture.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontPosture:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	Used to indicate normal font posture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to indicate normal font posture.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:JustificationStyle"><apiName>JustificationStyle</apiName><shortdesc>
The JustificationStyle class is an enumeration of constant values for setting the justificationStyle property 
of the EastAsianJustifier class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The JustificationStyle class is an enumeration of constant values for setting the <codeph>justificationStyle</codeph> property 
of the EastAsianJustifier class. These constants specify options for handling kinsoku characters, which are Japanese characters that cannot 
appear at either the beginning or end of a line.

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/justificationStyle"><linktext>EastAsianJustifier.justificationStyle</linktext></link></related-links><apiValue id="flash.text.engine:JustificationStyle:PRIORITIZE_LEAST_ADJUSTMENT"><apiName>PRIORITIZE_LEAST_ADJUSTMENT</apiName><shortdesc> 
	Bases justification on either expanding or compressing
	the line, whichever gives a result closest to the desired width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>prioritizeLeastAdjustment</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Bases justification on either expanding or compressing
	the line, whichever gives a result closest to the desired width.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_IN_KINSOKU"><apiName>PUSH_IN_KINSOKU</apiName><shortdesc> 
	Bases justification on compressing kinsoku at the end of the line, 
	or expanding it if no kinsoku occurs or if that space is insufficient.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushInKinsoku</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Bases justification on compressing kinsoku at the end of the line, 
	or expanding it if no kinsoku occurs or if that space is insufficient.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:JustificationStyle:PUSH_OUT_ONLY"><apiName>PUSH_OUT_ONLY</apiName><shortdesc> 
	Bases justification on expanding the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>pushOutOnly</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Bases justification on expanding the line.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
 The EastAsianJustifier class has properties to control the justification options for text lines whose 
 content is primarily East Asian text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 The EastAsianJustifier class has properties to control the justification options for text lines whose 
 content is primarily East Asian text. 
 
 <p> Use the constructor <codeph>new EastAsianJustifier()</codeph> to create an EastAsianJustifier object
 before setting its properties. Setting the properties of an EastAsianJustifier object after it has been applied to a TextBlock does 
 not invalidate the TextBlock.</p>
 
 </apiDesc><example conref="examples\EastAsianJustifierExample.as"> This example displays a block of Japanese text vertically, 
 using EastAsianJustifier properties to justify the text.
<codeblock>
 
package {
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.EastAsianJustifier;
    import flash.text.engine.LineJustification;
    import flash.text.engine.TextRotation;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ElementFormat;
    import flash.display.Stage;
    import flash.display.Sprite;
    import flash.system.Capabilities;
    
    public class EastAsianJustifierExample extends Sprite {
        
        public function EastAsianJustifierExample():void {
            
            var Japanese_txt:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);
            
            var textBlock:TextBlock = new TextBlock();
            var font:FontDescription = new FontDescription();
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0xCC0000;
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_INCLUDING_LAST);
            textBlock.lineRotation = TextRotation.ROTATE_90;
            var linePosition:Number = this.stage.stageWidth - 75;
            if (Capabilities.os.search("Mac OS") &gt; -1) 
                // set fontName: Kozuka Mincho Pro R
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R";                     
            else 
                font.fontName = "Kozuka Mincho Pro R";
            textBlock.content = new TextElement(Japanese_txt, format);
            var previousLine:TextLine = null;
                
            while (true) 
            {
                var textLine:TextLine = textBlock.createTextLine(previousLine, 320);
                if (textLine == null) 
                    break;
                textLine.y = 20;
                textLine.x = linePosition;
                linePosition -= 25;
                addChild(textLine);                
                previousLine = textLine;
            }
        }
    }
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:EastAsianJustifier:EastAsianJustifier"><apiName>EastAsianJustifier</apiName><shortdesc>
     Creates a EastAsianJustifier object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>locale</codeph> specified is <codeph>null</codeph> or too short to represent a valid locale.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>lineJustification</codeph> specified is not a member of <codeph>LineJustification</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>justifictionStyle</codeph> specified is not a member of <codeph>JustificationStyle</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>ja</apiData><apiDesc>The locale to determine the justification rules.
	 The default value is <codeph>"ja"</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>allButLast</apiData><apiDesc>The type of line justification for the paragraph. 
	 Use <codeph>LineJustification</codeph> constants for this property.
     The default value is <codeph>LineJustification.ALL_BUT_LAST</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>justificationStyle</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>pushInKinsoku</apiData><apiDesc>The justification style for the text in a text block using an East Asian justifier.
     Use <codeph>JustificationStyle</codeph> constants for this property.
     The default value is <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Creates a EastAsianJustifier object.
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:EastAsianJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Constructs a cloned copy of the EastAsianJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>In the Flash Player 10 release, this method is for internal use. In future releases,
	 users will be able to subclass this class and will then need to use this method. This class is 
	 currently stored as a live reference, but there is no way to track when its properties change.  
	 This means that when changes are made, text blocks are not invalidated, which in the current 
	 implementation can lead to player crashes.  Even from the API perspective its wrong, as the affected 
	 text lines should be marked INVALID when format changes are made, but they�re not. The solution is 
	 to use a copy-on-set model.  When the object is passed in, the player copies it, so later changes to 
	 the object that was passed in have no effect. The setter makes an internal copy of the array; the 
	 getter returns a copy of the internal copy. Operations like 
         myBlock.textJustifier.justificationStyle = JustificationStyle.PUSH_IN_KINSOKU will have no effect. 
         Users who subclass this class in the future will need to use the clone() method to 
	 implement this technique of 'locking' the format once it has been set.
	 
	 </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A copy of the <codeph>EastAsianJustifier</codeph> object.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Constructs a cloned copy of the EastAsianJustifier.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:EastAsianJustifier:justificationStyle:get"><apiName>justificationStyle</apiName><shortdesc>
     Specifies the justification style for the text in a text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Specifies the justification style for the text in a text block.
     
     <p>The default value is <codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph>.</p>
     
	 <p>Use one of the constants in the JustificationStyle class to set the value for this 
	 property. The following table lists the possible values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>JustificationStyle.PUSH_IN_KINSOKU</codeph></entry>
	 	<entry>Specifies push in justification.</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PUSH_OUT_ONLY</codeph></entry>
	 	<entry>Specifies push out justification.</entry>
	   </row><row>
	 	<entry><codeph>JustificationStyle.PRIORITIZE_LEAST_ADJUSTMENT</codeph></entry>
	 	<entry>Specifies justification wherein the least adjustment is prioritized.</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#JustificationStyle"><linktext>JustificationStyle</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:RenderingMode"><apiName>RenderingMode</apiName><shortdesc>
The RenderingMode class provides values for rendering mode in the flash.text.engine.FontDescription class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The RenderingMode class provides values for rendering mode in the flash.text.engine.FontDescription class.
</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:RenderingMode:CFF"><apiName>CFF</apiName><shortdesc>
	Sets rendering mode to CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>cff</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Sets rendering mode to CFF. CFF rendering improves readability of text on a display. 
	This setting is recommended for applications that have a lot of small text.
	This constant is used for the <codeph>renderingMode</codeph> property in the FontDescription 
	class.
	Use the syntax <codeph>RenderingMode.CFF</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:RenderingMode:NORMAL"><apiName>NORMAL</apiName><shortdesc>
	Sets rendering mode to the rendering mode that is used in Flash Player 7 and earlier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Sets rendering mode to the rendering mode that is used in Flash Player 7 and earlier.
	This setting is recommended for animated text.
	This constant is used for the <codeph>renderingMode</codeph> property in the FontDescription 
	class.
	Use the syntax <codeph>RenderingMode.NORMAL</codeph>.
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 The ElementFormat class represents formatting information which can be applied to a ContentElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The ElementFormat class represents formatting information which can be applied to a <codeph>ContentElement</codeph>.  Use the ElementFormat class
 to create specific text formatting for the various subclasses of ContentElement. The properties of the ElementFormat class apply to device and
 embedded fonts. 
 
 <p>An ElementFormat object is applied to a ContentElement in a TextBlock does not invalidate the TextBlock. 
 Once an ElementFormat has been
 applied to an ContentElement, its <codeph>locked</codeph> property is set to <codeph>true</codeph>.
 The properties of a locked ElementFormat object cannot be changed. Instead, use the <codeph>clone()</codeph>
 method to create an unlocked copy of the object, which can be modified and assigned to the ContentElement.</p>
 
 </apiDesc><example conref="examples\ElementFormatExample.as"> <p>This example creates two <codeph>ElementFormat</codeph> objects and sets several of
 their properties. It then assigns the new ElementFormats to a <codeph>TextElement</codeph> object,
 which has been assigned as the content of a <codeph>TextBlock</codeph>. Note that changing the
 <codeph>ElementFormat</codeph> of a <codeph>TextElement</codeph> does not affect TextLines that
 have been previously created by the parent TextBlock.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormatExample extends Sprite {
        
        public function ElementFormatExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            ef1.alpha = 100;
            ef1.kerning = flash.text.engine.Kerning.ON;
            ef1.trackingRight = 2;
            ef1.typographicCase = flash.text.engine.TypographicCase.UPPERCASE;
            ef1.alignmentBaseline = flash.text.engine.TextBaseline.DESCENT;
            ef1.ligatureLevel = flash.text.engine.LigatureLevel.EXOTIC;
            
            var ef2:ElementFormat = new ElementFormat(fd);
            ef2.fontSize = 30;
            ef2.color = 0xFF0000;
            ef2.alpha = 0.3;
            ef2.kerning = flash.text.engine.Kerning.OFF;
            ef2.typographicCase = flash.text.engine.TypographicCase.LOWERCASE;
            ef2.digitCase = flash.text.engine.DigitCase.OLD_STYLE;
            ef2.textRotation = flash.text.engine.TextRotation.ROTATE_180;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            line1.x = 15;
            line1.y = 30;

            tb.content.elementFormat = ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            line2.x = 15;
            line2.y = 60;
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/elementFormat"><linktext>flash.text.engine.ContentElement.elementFormat</linktext></link></related-links><apiConstructor id="flash.text.engine:ElementFormat:ElementFormat"><apiName>ElementFormat</apiName><shortdesc>
 	 Creates an ElementFormat object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>fontSize</codeph> specified is less than 0.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>textRotation</codeph> specified is not a member of <codeph>flash.text.engine.TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>dominantBaseline</codeph> specified is not a member of <codeph>flash.text.engine.TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>alignmentBaseline</codeph> specified is not a member of <codeph>flash.text.engine.TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>kerning</codeph> specified is not a member of <codeph>flash.text.engine.Kerning</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>breakOpportunity</codeph> specified is not a member of <codeph>flash.text.engine.BreakOpportunity</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>digitCase</codeph> specified is not a member of <codeph>flash.text.engine.DigitCase</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>digitWidth</codeph> specified is not a member of <codeph>flash.text.engine.DigitWidth</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>ligatureLevel</codeph> specified is not a member of <codeph>flash.text.engine.LigatureLevel</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>typographicCase</codeph> specified is not a member of <codeph>flash.text.engine.TypographicCase</codeph>.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>The FontDescription object which identifies the font used with this element format.
     The default value is <codeph>null</codeph>.  If no font description is provided, a default font description is constructed.
	 </apiDesc></apiParam><apiParam><apiItemName>fontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>The size of text in pixels.
 	 </apiDesc></apiParam><apiParam><apiItemName>color</apiItemName><apiOperationClassifier>uint</apiOperationClassifier><apiData>0x000000</apiData><apiDesc>The color of text. A number containing three 8-bit RGB
	 components; for example, 0xFF0000 is red and 0x00FF00 is green.
     </apiDesc></apiParam><apiParam><apiItemName>alpha</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1.0</apiData><apiDesc>The <codeph>alpha</codeph> property applied to all line atoms based on the element format.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>the rotation applied to individual glyphs. Use <codeph>flash.text.engine.TextRotation</codeph>
	 constants for this property.
	 </apiDesc></apiParam><apiParam><apiItemName>dominantBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>The baseline to which the glyphs in the text snap.
	 Use <codeph>flash.text.engine.TextBaseline</codeph> constants for this property.
	 </apiDesc></apiParam><apiParam><apiItemName>alignmentBaseline</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>useDominantBaseline</apiData><apiDesc>The baseline on the containing line to which the dominant baseline snaps.
	 Use <codeph>flash.text.engine.TextBaseline</codeph> constants for this property.
     </apiDesc></apiParam><apiParam><apiItemName>baselineShift</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>The baseline shift for the text in pixels em.
	 </apiDesc></apiParam><apiParam><apiItemName>kerning</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>on</apiData><apiDesc>The kerning used for this text. Use <codeph>flash.text.engine.Kerning</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>trackingRight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>The tracking or manual kerning applied to the right of each glyph in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>trackingLeft</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>The tracking or manual kerning applied to the left of each glyph in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>The locale of the text.
     </apiDesc></apiParam><apiParam><apiItemName>breakOpportunity</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>auto</apiData><apiDesc>The line break opportunity applied to this text. Use <codeph>flash.text.engine.BreakOpportunity</codeph>
	 constants for this property.
	 </apiDesc></apiParam><apiParam><apiItemName>digitCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>The digit case used for this text. Use <codeph>flash.text.engine.DigitCase</codeph>
	 constants for this property.
	 </apiDesc></apiParam><apiParam><apiItemName>digitWidth</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>The digit width used for this text. Use <codeph>flash.text.engine.DigitWidth</codeph>
	 constants for this property.
	 </apiDesc></apiParam><apiParam><apiItemName>ligatureLevel</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>common</apiData><apiDesc>The ligature level used for this text. Use <codeph>flash.text.engine.LigatureLevel</codeph>
	 constants for this property.
	 </apiDesc></apiParam><apiParam><apiItemName>typographicCase</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>default</apiData><apiDesc>The typographic case used for this text. Use <codeph>flash.text.engine.TypographicCase</codeph>
	 constants for this property.
     
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Creates an ElementFormat object.
	 
     </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:ElementFormat:clone"><apiName>clone</apiName><shortdesc>
	 Constructs an unlocked, cloned copy of the ElementFormat.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An unlocked copy of the <codeph>ElementFormat</codeph> object.
	 </apiDesc><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Constructs an unlocked, cloned copy of the ElementFormat.
	 
     </apiDesc><example conref="examples\ElementFormat_cloneExample.as"> <p>This example creates an <codeph>ElementFormat</codeph> object and sets a <codeph>FontSize</codeph>.
 A new <codeph>TextElement</codeph> is created, using the <codeph>ElementFormat</codeph> (and therefore locking it), and
 the <codeph>TextElement</codeph> is used as content for a <codeph>TextBlock</codeph>. A
 line of text is created from the <codeph>TextBlock</codeph>.</p>
 <p>To modify the <codeph>ElementFormat</codeph> object, first check its
 <codeph>locked</codeph> property. If true, use the <codeph>clone()</codeph> method to
 create an unlocked copy of the <codeph>ElementFormat</codeph>, change its properties,
 then re-link the new <codeph>ElementFormat</codeph> to the <codeph>TextBlock</codeph>. 
 When the lines are re-broken, the new lines will have the new font settings.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class ElementFormat_cloneExample extends Sprite {
        private var ef1:ElementFormat;
        private var ef2:ElementFormat;
        
        public function ElementFormat_cloneExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize=20;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            ef2 = (ef1.locked) ? ef1.clone() : ef1;    
            ef2.fontSize = 32;

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:ElementFormat:getFontMetrics"><apiName>getFontMetrics</apiName><shortdesc>
	 Returns a FontMetrics object with properties which describe the emBox, strikethrough position,
	 strikethrough thickness, underline position, and underline thickness for the font specified by 
	 fontDescription and fontSize.
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A <codeph>FontMetrics</codeph> object describing properties of the font specified by <codeph>fontDescription</codeph>.
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontMetrics</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 <p>Returns a <codeph>FontMetrics</codeph> object with properties which describe the emBox, strikethrough position,
	 strikethrough thickness, underline position, and underline thickness for the font specified by 
	 <codeph>fontDescription</codeph> and <codeph>fontSize</codeph>.</p>
	 
	 </apiDesc><example conref="examples\FontMetricsExample.as"> This example creates an <codeph>ElementFormat</codeph> object with an assigned
 <codeph>FontDescription</codeph> and uses the <codeph>getFontMetrics</codeph> method to
 display metrics for the chosen font.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontMetricsExample extends Sprite {
        
        public function FontMetricsExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontName = "Garamond";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;

            var ef1:ElementFormat = new ElementFormat(fd);
            var fm1:FontMetrics = ef1.getFontMetrics();
            trace(fm1.emBox);
            trace(fm1.strikethroughOffset);
            trace(fm1.strikethroughThickness);
            trace(fm1.subscriptScale);
            trace(fm1.subscriptOffset);
            trace(fm1.superscriptScale);
            trace(fm1.superscriptOffset);
            trace(fm1.underlineOffset);
            trace(fm1.underlineThickness);
            
            
        }
    }    
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link><link href="flash.text.engine.xml#FontMetrics"><linktext>flash.text.engine.FontMetrics</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:ElementFormat:alignmentBaseline:get"><apiName>alignmentBaseline</apiName><shortdesc>
	 Specifies which of the baselines of the line containing the element the dominantBaseline
	 snaps to, thus determining the vertical position of the element in the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>flash.text.engine.TextBaseline</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies which of the baselines of the line containing the element the <codeph>dominantBaseline</codeph>
	 snaps to, thus determining the vertical position of the element in the line.
	 Use <codeph>flash.text.engine.TextBaseline</codeph> constants for this property.
	 
	 <p>The largest element in the line determines the baselines unless 
	 <codeph>TextBlock.baselineFontDescription</codeph> and <codeph>TextBlock.baselineFontSize</codeph> are set to override that logic.</p>
	 
	 <p>The default value is <codeph>flash.text.engine.TextBaseline.USE_DOMINANT_BASELINE</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>The <codeph>dominantBaseline</codeph> aligns with the roman baseline of the line.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>The <codeph>dominantBaseline</codeph> aligns with the ascent baseline of the line.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>The <codeph>dominantBaseline</codeph> aligns with the descent baseline of the line.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>The <codeph>dominantBaseline</codeph> aligns with the ideographic top baseline of the line.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>The <codeph>dominantBaseline</codeph> aligns with the ideographic center baseline of the line.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>The <codeph>dominantBaseline</codeph> aligns with the ideographic bottom baseline of the line.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.USE_DOMINANT_BASELINE</codeph></entry>
	 	<entry>The <codeph>dominantBaseline</codeph> aligns with the same baseline of the line.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Sets the alignment baseline of the line to which the <codeph>dominantBaseline</codeph> of the graphic element aligns.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Sets the alignment baseline of the line to which the <codeph>dominantBaseline</codeph> of the text element aligns.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>flash.text.engine.ElementFormat.dominantBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:alpha:get"><apiName>alpha</apiName><shortdesc>
	 Provides a way for the author to automatically set the alpha property of all 
	 line atoms based on the element format to the specified Number.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Provides a way for the author to automatically set the <codeph>alpha</codeph> property of all 
	 line atoms based on the element format to the specified Number.
	 
	 <p>Indicates the alpha transparency value of the object specified. Valid values are 0 (fully transparent) 
	 to 1 (fully opaque). The default value is 1. Display objects with alpha set to 0 are active, even though they are invisible.</p>
	 
	 <p>The default value is <codeph>1.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Applies the specified alpha to the graphic element. Combines
	 multiplicatively with any alpha set on the graphic <codeph>DisplayObject</codeph>
	 itself or on the <codeph>TextLine</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Applies the specified alpha to the text element. Combines
	 multiplicatively with any alpha set on the <codeph>TextLine</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.display.xml#DisplayObject/alpha"><linktext>flash.display.DisplayObject.alpha</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:baselineShift:get"><apiName>baselineShift</apiName><shortdesc>
	 Indicates the baseline shift for the element in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Indicates the baseline shift for the element in pixels.
	 <p>The element is shifted away from the <codeph>dominantBaseline</codeph> by this amount.
	 The offset is added to the y position of the members of the element, so in non-rotated 
	 text, a positive baseline shift moves the element down and a negative baseline shift
	 moves the element up.</p>
	 
	 <p>The default value is <codeph>0.0</codeph>, indicating no shift.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Shifts the graphic away from the baseline.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Shifts the text away from the baseline.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:breakOpportunity:get"><apiName>breakOpportunity</apiName><shortdesc>
	 The line break opportunity applied to this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to a value not a member of <codeph>flash.text.engine.BreakOpportunity</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The line break opportunity applied to this text. 
	 This property determines which characters can be used for breaking when wrapping text is broken into multiple lines.
	 Use <codeph>flash.text.engine.BreakOpportunity</codeph>
	 constants for this property.
	 
	 <p>The default value is <codeph>flash.text.engine.BreakOpportunity.AUTO</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>BreakOpportunity.AUTO</codeph></entry>
	 	<entry>Line breaking opportunities are based on standard Unicode character properties, such as breaking between words and on hyphens.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ANY</codeph></entry>
	 	<entry>Any character in the <codeph>ContentElement</codeph> object is treated as a line break opportunity. This value is typically used when Roman text is embedded in Asian text and it is desirable for breaks to happen in the middle of words.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.NONE</codeph></entry>
	 	<entry>No characters in the range are treated as line break opportunities.</entry>
	   </row><row>
	 	<entry><codeph>BreakOpportunity.ALL</codeph></entry>
	 	<entry>All characters in the range are treated as line break opportunities.  Useful for creating effects like text on a path.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Determines the break opportunity between adjacent text elements in the group.
	 If the elementFormat of the group is <codeph>null</codeph>, the format of the first
	 of the adjacent elements is used.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines the break opportunity between the characters in the text element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#BreakOpportunity"><linktext>flash.text.engine.BreakOpportunity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:color:get"><apiName>color</apiName><shortdesc>
	 Indicates the color of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>uint</apiValueClassifier><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Indicates the color of the text. An integer containing three 8-bit RGB components; for example,
	 0xFF0000 is red and 0x00FF00 is green. 
	 
	 <p>The default value is <codeph>0x000000</codeph>, which means that Flash Player uses the color black.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Sets the color of the text.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:digitCase:get"><apiName>digitCase</apiName><shortdesc>
	 The digit case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>flash.text.engine.DigitCase</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The digit case used for this text. 
	 Digit case affects the style and positioning of groups of numeric characters.
	 Use <codeph>flash.text.engine.DigitCase</codeph>
	 constants for this property.
	 
	 <p>The default value is <codeph>flash.text.engine.DigitCase.DEFAULT</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitCase.DEFAULT</codeph></entry>
	 	<entry>Applies default digit case to the text.</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.LINING</codeph></entry>
	 	<entry>Applies lining digit case to the text.</entry>
	   </row><row>
	 	<entry><codeph>DigitCase.OLD_STYLE</codeph></entry>
	 	<entry>Applies old style digit case to the text.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines the digit case used for the text in the element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitCase"><linktext>flash.text.engine.DigitCase</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:digitWidth:get"><apiName>digitWidth</apiName><shortdesc>
	 The digit width used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>flash.text.engine.DigitWidth</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The digit width used for this text. Use <codeph>flash.text.engine.DigitWidth</codeph>
	 constants for this property.
	 
	 <p>The default value is <codeph>flash.text.engine.DigitWidth.DEFAULT</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>DigitWidth.DEFAULT</codeph></entry>
	 	<entry>Applies default digit width to the text.</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.PROPORTIONAL</codeph></entry>
	 	<entry>Applies proportional digit width to the text.</entry>
	   </row><row>
	 	<entry><codeph>DigitWidth.TABULAR</codeph></entry>
	 	<entry>Applies tabular digit width to the text.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines the digit width used for the text in the element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#DigitWidth"><linktext>flash.text.engine.DigitWidth</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:dominantBaseline:get"><apiName>dominantBaseline</apiName><shortdesc>
	 Specifies which of the baselines of the element snaps to the alignmentBaseline
	 to determine the vertical position of the element on the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>flash.text.engine.TextBaseline</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies which of the baselines of the element snaps to the <codeph>alignmentBaseline</codeph>
	 to determine the vertical position of the element on the line.
	 Use <codeph>flash.text.engine.TextBaseline</codeph> constants for this property.
	 
	 <p>The content of the element determines the baselines.
	 In the case of a <codeph>TextElement</codeph>, the font and the point size determine the baselines.
	 In the case of a <codeph>GraphicElement</codeph>, the height of the element determines the baselines.</p>
	 
	 <p>The default value is <codeph>flash.text.engine.TextBaseline.ROMAN</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>The roman baseline of the element aligns with the <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>The ascent baseline of the element aligns with the <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>The descent baseline of the element aligns with the <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>The ideographic top baseline of the element aligns with the <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>The ideographic center baseline of the element aligns with the <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>The ideographic bottom baseline of the element aligns with the <codeph>alignmentBaseline</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Determines which of the baselines of the graphic element aligns with the <codeph>alignmentBaseline</codeph>.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines which of the baselines of the text element aligns with the <codeph>alignmentBaseline</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>flash.text.engine.TextBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>flash.text.engine.ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontDescription:get"><apiName>fontDescription</apiName><shortdesc>
	 An object which encapsulates properties necessary to describe a font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 An object which encapsulates properties necessary to describe a font.
	 
	 <p>The default value is a default-constructed FontDescription object.</p>
     
	 <p>When the fontDescription property is set, the FontDescription object provided is locked:  its <codeph>locked</codeph>
	 property is set to <codeph>true</codeph>.  A locked FontDescription cannot be modified.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines the font used for the text in the element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:fontSize:get"><apiName>fontSize</apiName><shortdesc>
	 The size of text in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>If set to a value less than zero.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The size of text in pixels. 
	 
	 <p>The default value is <codeph>12.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines the size in pixels for the text in the element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:kerning:get"><apiName>kerning</apiName><shortdesc>
	 The kerning used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The kerning used for this text. Use <codeph>flash.text.engine.Kerning</codeph>
	 constants for this property.  Kerning adjusts the pixels between certain character pairs to improve readability.
	 Kerning is supported for all fonts which have kerning tables.
	 
	 <p>The default value is <codeph>flash.text.engine.Kerning.ON</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>Kerning.ON</codeph></entry>
	 	<entry>Kerning is enabled.</entry>
	   </row><row>
	 	<entry><codeph>Kerning.OFF</codeph></entry>
	 	<entry>Kerning is disabled.</entry>
	   </row><row>
	 	<entry><codeph>Kerning.AUTO</codeph></entry>
	 	<entry>Kerning is enabled only for characters appropriate in Asian typography.
	 Kerning is applied between two characters if neither is Kanji, Hiragana, or Katakana.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Determines whether kerning is applied between adjacent text elements in the group.
	 If the elementFormat of the group is <codeph>null</codeph>, the format of the first
	 of the adjacent elements is used.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines whether kerning is applied between the characters in the text element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:ligatureLevel:get"><apiName>ligatureLevel</apiName><shortdesc>
	 The ligature level used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>flash.text.engine.LigatureLevel</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The ligature level used for this text. 
	 A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures 
	 usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'.
	 They are used with both Latin and Non-Latin character sets. Use <codeph>flash.text.engine.LigatureLevel</codeph>
	 constants for this property.
	 
	 <p>The default value is <codeph>flash.text.engine.LigatureLevel.COMMON</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>LigatureLevel.NONE</codeph></entry>
	 	<entry>No ligatures are created.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.MINIMUM</codeph></entry>
	 	<entry>Minimal ligatures are created.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.COMMON</codeph></entry>
	 	<entry>Common ligatures are created.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.UNCOMMON</codeph></entry>
	 	<entry>Uncommon ligatures are created.</entry>
	   </row><row>
	 	<entry><codeph>LigatureLevel.EXOTIC</codeph></entry>
	 	<entry>Exotic ligatures are created.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Determines the ligature level between adjacent text elements in the group.
	 If the elementFormat of the group is <codeph>null</codeph>, the format of the first
	 of the adjacent elements is used.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines the ligature level between the characters in the text element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LigatureLevel"><linktext>flash.text.engine.LigatureLevel</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:locale:get"><apiName>locale</apiName><shortdesc>
	 The locale of the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The locale of the text.  Controls case transformations and shaping.
	 Standard locale identifiers are used.  For example "en", "en_US" and "en-US" are all
	 English, "ja" is Japanese.
	 
     <p>The default value is <codeph>"en"</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines transformations and shaping for the text in the element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:locked:get"><apiName>locked</apiName><shortdesc>
	 Indicates whether the ElementFormat is locked.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Indicates whether the ElementFormat is locked.  If <codeph>true</codeph> the ElementFormat cannot be modified.
	 Call <codeph>ElementFormat.clone()</codeph> to get an unlocked copy of the ElementFormat object.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 Sets the rotation applied to individual glyphs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>flash.text.engine.TextRotation</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Sets the rotation applied to individual glyphs. Use <codeph>flash.text.engine.TextRotation</codeph>
	 constants for this property.
	 
	 <p>The default value is <codeph>flash.text.engine.TextRotation.AUTO</codeph>.</p>
	 
	 <p>The final rotation of any glyph is the sum of <codeph>ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph>, and <codeph>TextBlock.lineRotation</codeph>.</p>
	 
	 <p><codeph>ElementFormat.textRotation</codeph> is used for the typical case of Asian
	 text where characters must be rotated to display properly in vertical layout,
	 using the value <codeph>flash.text.engine.TextRotation.AUTO</codeph> 
	 combined with <codeph>TextBlock.lineRotation = flash.text.engine.ROTATE_90</codeph>.</p>
	 
	 <p>Setting this property on fonts which do not contain vertical layout information can give undesirable results.
	 Fonts that contain a vmtx or VORG table, such as the Japanese font "MS Mincho", work correctly because the 
	 tables supply the data that the layout engine requires for correct layout. Fonts such as Verdana, which do not contain the necessary information,
	 do not.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Glyphs are not rotated.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Glyphs are rotated 90 degrees clockwise.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Glyphs are rotated 180 degrees.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Glyphs are rotated 270 degrees clockwise.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 <entry>Specifies a 90 degree counter clockwise rotation for full width and wide glyphs only,
	 as determined by the Unicode properties of the glyph.
	 This value is typically used with Asian text to rotate
	 only those glyphs that require rotation.
	 This rotation is applied only in vertical text to return full width and wide 
	 characters to a vertical orientation without affecting other characters.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines the rotation of the glyphs in the text element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>flash.text.engine.TextRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>flash.text.engine.ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>flash.text.engine.TextBlock.lineRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingLeft:get"><apiName>trackingLeft</apiName><shortdesc>
	 The tracking or manual kerning applied to the left of each glyph in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The tracking or manual kerning applied to the left of each glyph in pixels.
	 If <codeph>kerning</codeph> is enabled, the <codeph>trackingLeft</codeph> value is added to the values in the 
	 kerning table for the font.  If <codeph>kerning</codeph> is disabled, the <codeph>trackingLeft</codeph> value
	 is used as a manual kerning value. Supports both positive and negative values.
	 
	 <p>Typically, the desired tracking value is split between <codeph>trackingRight</codeph> and <codeph>trackingLeft</codeph>.
	 Otherwise, in mixed directionality text, there is twice the tracking at one bidi boundary and none at the other.</p>
	 
	 <p>The default value is <codeph>0.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Determines the tracking applied to the left side of the graphic.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines the tracking applied to the left side of characters in the text element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>Example:</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingLeft = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingLeft = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:trackingRight:get"><apiName>trackingRight</apiName><shortdesc>
	 The tracking or manual kerning applied to the right of each glyph in pixels.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The tracking or manual kerning applied to the right of each glyph in pixels.
	 If <codeph>kerning</codeph> is enabled, the <codeph>trackingRight</codeph> value is added to the values in the 
	 kerning table for the font.  If <codeph>kerning</codeph> is disabled, the <codeph>trackingRight</codeph> value
	 is used as a manual kerning value. Supports both positive and negative values.
	 
	 <p>Typically, the desired tracking value is split between <codeph>trackingRight</codeph> and <codeph>trackingLeft</codeph>.
	 Otherwise, in mixed directionality text, there is twice the tracking at one bidi boundary and none at the other.</p>
	 
	 
	 <p>The default value is <codeph>0.0</codeph>.</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Determines the tracking applied to the right side of the graphic.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines the tracking applied to the right side of characters in the text element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 <p>Example:</p>
	 
	 <codeblock>
	      //positive tracking added to kerning
	      var ef1:ElementFormat = new ElementFormat();
	      ef1.kerning = flash.text.engine.Kerning.ON;
	      ef1.trackingRight = 0.5;
	 
	      //negative manual kerning
	      var ef2:ElementFormat = new ElementFormat();
	      ef2.kerning = flash.text.engine.Kerning.OFF;
	      ef2.trackingRight = -1.0;
	 </codeblock> 
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ElementFormat:typographicCase:get"><apiName>typographicCase</apiName><shortdesc>
	 The typographic case used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to a value not a member of <codeph>flash.text.engine.TypographicCase</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the ElementFormat object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The typographic case used for this text. Use <codeph>flash.text.engine.TypographicCase</codeph>
	 constants for this property.
	 
	 <p>The default value is <codeph>flash.text.engine.TypographicCase.DEFAULT</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TypographicCase.DEFAULT</codeph></entry>
	 	<entry>Applies default typographic case to the text.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.TITLE</codeph></entry>
	 	<entry>Specifies that uppercase characters use title glyphs on output.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS</codeph></entry>
	 	<entry>Specifies that spacing is adjusted for uppercase characters on output.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.SMALL_CAPS</codeph></entry>
	 	<entry>Specifies that uppercase characters use small caps glyphs on output.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.UPPERCASE</codeph></entry>
	 	<entry>Specifies that all characters use uppercase glyphs on output.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.LOWERCASE</codeph></entry>
	 	<entry>Specifies that all characters use lowercase glyphs on output.</entry>
	   </row><row>
	 	<entry><codeph>TypographicCase.CAPS_AND_SMALL_CAPS</codeph></entry>
	 	<entry>Specifies that all lowercase characters use small caps glyphs on output.</entry>
	   </row></tbody></tgroup></adobetable>
	 <p/>
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>Subclass</entry><entry>Effect of setting property</entry></row></thead><tbody><row>
	 	<entry><codeph>GraphicElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>GroupElement</codeph></entry>
	 	<entry>Has no effect.</entry>
	   </row><row>
	 	<entry><codeph>TextElement</codeph></entry>
	 	<entry>Determines the typographic case used for the text in the element.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TypographicCase"><linktext>flash.text.engine.TypographicCase</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
 The FontMetrics class contains measurement and offset information about a font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The FontMetrics class contains measurement and offset information about a font.
 The <codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph> method returns objects of this class.
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links><apiConstructor id="flash.text.engine:FontMetrics:FontMetrics"><apiName>FontMetrics</apiName><shortdesc>
	 Creates a FontMetrics object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>emBox</apiItemName><apiOperationClassifier>flash.geom:Rectangle</apiOperationClassifier><apiDesc>The emBox of the font in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The offset for a strikethrough in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>strikethroughThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The thickness for a strikethrough in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>underlineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The offset for an underline in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>underlineThickness</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The thickness for an underline in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The offset for a subscript in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>subscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The scale to apply to the point size of a subscript.
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The offset for a superscript in pixels.
	 </apiDesc></apiParam><apiParam><apiItemName>superscriptScale</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiDesc>The scale to apply to the point size of a superscript.
	 
	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Creates a FontMetrics object.  The FontMetrics object contains information about 
	 the metrics of a font in an element format. 
	 The <codeph>flash.text.engine.ElementFormat.getFontMetrics()</codeph> method returns objects of this class.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics class overview</linktext></link><link href="flash.text.engine.xml#ElementFormat/getFontMetrics()"><linktext>flash.text.engine.ElementFormat.getFontMetrics()</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:FontMetrics:emBox"><apiName>emBox</apiName><shortdesc>
	 The emBox value represents the design space of the font and is used to place Chinese, 
	 Korean, or Japanese glyphs relative to the Roman baseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 The emBox value represents the design space of the font and is used to place Chinese, 
	 Korean, or Japanese glyphs relative to the Roman baseline. 
	 Typically a square, sized to the point size of the font. The origin (coordinate 0,0) 
	 of the emBox is set to the left edge and Roman baseline of the rect. 
	 For example, for a 10-point font, the emBox can be a rect [L,T,R,B] of [0, -8.8, 10, 1.2].
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughOffset"><apiName>strikethroughOffset</apiName><shortdesc>
	 The strikethroughOffset value is the suggested vertical offset from the Roman baseline for a strikethrough.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The strikethroughOffset value is the suggested vertical offset from the Roman baseline for a strikethrough.
	 
	 <p>Note that depending on the rotation of the line, this value is either added or subtracted from the 
	 position of the line to find the position for the strikethrough.  In a line with <codeph>TextRotation.ROTATE_0</codeph>, 
	 <codeph>strikethrough.y = line.y + strikethroughOffset</codeph>.  In a line 
	 with <codeph>TextRotation.ROTATE_90</codeph>, <codeph>strikethrough.x = line.x - strikethroughOffset</codeph>.</p>
	 
	 <p>When applying decorations such as strikethroughs, the recommended procedure is to specify 
	 an <codeph>eventMirror</codeph> on the <codeph>ContentElement</codeph> which is to receive the decoration.
	 In response to the <codeph>flash.events.Event.ADDED</codeph> event, the <codeph>bounds</codeph> of the 
	 <codeph>TextLineMirrorRegion</codeph> can be used in conjunction with the <codeph>strikethroughOffset</codeph> to place the strikethrough.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:strikethroughThickness"><apiName>strikethroughThickness</apiName><shortdesc>
	 The strikethroughThickness value is the suggested thickness for a strikethrough.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The strikethroughThickness value is the suggested thickness for a strikethrough.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptOffset"><apiName>subscriptOffset</apiName><shortdesc>
	 The subscriptOffset value is the suggested vertical offset from the Roman baseline for a subscript.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The subscriptOffset value is the suggested vertical offset from the Roman baseline for a subscript.
	 
	 <p>The subscriptOffset value is used with <codeph>ElementFormat.baselineShift</codeph> to position the subscript.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:subscriptScale"><apiName>subscriptScale</apiName><shortdesc>
	 The subscriptScale value is the suggested scale factor to apply to the point size for a subscript.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The subscriptScale value is the suggested scale factor to apply to the point size for a subscript.
	 A scale factor of 1.0 means no scaling.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptOffset"><apiName>superscriptOffset</apiName><shortdesc>
	 The superscriptOffset value is the suggested vertical offset from the Roman baseline for a superscript.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The superscriptOffset value is the suggested vertical offset from the Roman baseline for a superscript.
	 
	 <p>The superscriptOffset value is used with <codeph>ElementFormat.baselineShift</codeph> to position the superscript.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:superscriptScale"><apiName>superscriptScale</apiName><shortdesc>
	 The superscriptScale value is the suggested scale factor to apply to the point size for a superscript.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The superscriptScale value is the suggested scale factor to apply to the point size for a superscript.
	 A scale factor of 1.0 means no scaling.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineOffset"><apiName>underlineOffset</apiName><shortdesc>
	 The underlineOffset value is the suggested vertical offset from the Roman baseline for an underline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The underlineOffset value is the suggested vertical offset from the Roman baseline for an underline.
	 
	 <p>Note that depending on the rotation of the line, this value is either added or subtracted from the 
	 position of the line to find the position for the underline.  In a line with <codeph>TextRotation.ROTATE_0</codeph>, 
	 <codeph>underline.y = line.y + underlineOffset</codeph>.  In a line 
	 with <codeph>TextRotation.ROTATE_90</codeph>, <codeph>underline.x = line.x - underlineOffset</codeph>.</p>
	 
	 <p>When applying decorations such as underlines, the recommended procedure is to specify 
	 an <codeph>eventMirror</codeph> on the <codeph>ContentElement</codeph> which is to receive the decoration.
	 In response to the <codeph>flash.events.Event.ADDED</codeph> event, the <codeph>bounds</codeph> of the 
	 <codeph>TextLineMirrorRegion</codeph> can be used in conjunction with the <codeph>underlineOffset</codeph> to place the underline.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics class overview</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontMetrics:underlineThickness"><apiName>underlineThickness</apiName><shortdesc>
	 The underlineThickness value is the suggested thickness for an underline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The underlineThickness value is the suggested thickness for an underline.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontMetrics"><linktext>FontMetrics class overview</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 The FontDescription class represents properties necessary to describe a font.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The FontDescription class represents properties necessary to describe a font. 
 The properties of the FontDescription class apply to device and embedded fonts. 
 
 <p>A FontDescription object is applied to an ElementFormat,
 which is in turn applied to a ContentElement in a TextBlock. Once a FontDescription has been
 applied to an ElementFormat, its <codeph>locked</codeph> property is set to <codeph>true</codeph>.
 The properties of a locked FontDescription object cannot be changed. Instead, use the <codeph>clone()</codeph>
 method to create an unlocked copy of the object, which can be modified and assigned to the ElementFormat.</p>
 
 <p><b>Note:</b> FTE does not support Type 1 fonts or bitmap fonts such as Type 3, 
 ATC, sfnt-wrapped CID, or Naked CID.</p>
 
 </apiDesc><example conref="examples\FontDescriptionExample.as"> <p>This example creates a <codeph>FontDescription</codeph> object, assigns
 a device font to it, sets various font properties,
 and assigns the new object to an <codeph>ElementFormat</codeph> object.
 Additional font formatting is done within <codeph>ElementFormat</codeph>. A new
 <codeph>TextElement</codeph> is created, using the <codeph>ElementFormat</codeph>, and
 the <codeph>TextElement</codeph> is used as content for a <codeph>TextBlock</codeph>. A
 line of text is created from the <codeph>TextBlock</codeph>.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescriptionExample extends Sprite {
        
        public function FontDescriptionExample():void {
            var fd:FontDescription = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            ef1.fontSize = 30;
            ef1.color = 0xFF0000;
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/fontDescription"><linktext>flash.text.engine.ElementFormat.fontDescription</linktext></link></related-links><apiConstructor id="flash.text.engine:FontDescription:FontDescription"><apiName>FontDescription</apiName><shortdesc>
 	 Creates a FontDescription object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>fontWeight</codeph> specified is not a member of <codeph>flash.text.engine.FontWeight</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>fontPosture</codeph> specified is not a member of <codeph>flash.text.engine.FontPosture</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>fontLookup</codeph> specified is not a member of <codeph>flash.text.engine.FontLookup</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>renderingMode</codeph> specified is not a member of <codeph>flash.text.engine.RenderingMode</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>cffHinting</codeph> specified is not a member of <codeph>flash.text.engine.CFFHinting</codeph>.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>_serif</apiData><apiDesc>The name of the font to use, or a comma-separated list of font names.
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>Specifies the font weight.
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>normal</apiData><apiDesc>Specifies the font posture.
	 </apiDesc></apiParam><apiParam><apiItemName>fontLookup</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>device</apiData><apiDesc>Specifies how to look up the font.
	 </apiDesc></apiParam><apiParam><apiItemName>renderingMode</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>cff</apiData><apiDesc>The rendering mode used for this text. Use <codeph>flash.text.engine.RenderingMode</codeph>
	 constants for this property.
	 </apiDesc></apiParam><apiParam><apiItemName>cffHinting</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>horizontalStem</apiData><apiDesc>The type of CFF hinting used for this text. Use <codeph>flash.text.engine.CFFHinting</codeph>
	 constants for this property.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Creates a FontDescription object.
	 
	 </apiDesc></apiConstructorDetail></apiConstructor><apiOperation id="flash.text.engine:FontDescription:clone"><apiName>clone</apiName><shortdesc>
	 Constructs an unlocked, cloned copy of the FontDescription.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>An unlocked copy of the <codeph>FontDescription</codeph> object.
	 </apiDesc><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Constructs an unlocked, cloned copy of the FontDescription.
	 
     </apiDesc><example conref="examples\FontDescription_cloneExample.as"> <p>This example creates a <codeph>FontDescription</codeph> object, assigns
 a device font to it, sets various font properties,
 and assigns the new object (and therefore locking it) to an <codeph>ElementFormat</codeph> object.
 A new <codeph>TextElement</codeph> is created, using the <codeph>ElementFormat</codeph>, and
 the <codeph>TextElement</codeph> is used as content for a <codeph>TextBlock</codeph>. A
 line of text is created from the <codeph>TextBlock</codeph>.</p>
 <p>To modify the <codeph>FontDescription</codeph> object, first check its
 <codeph>locked</codeph> property. If true, use the <codeph>clone()</codeph> method to
 create an unlocked copy of the <codeph>FontDescription</codeph>, change its properties,
 and assign it to a new ElementFormat object. Then re-link
 the new <codeph>ElementFormat</codeph> to the <codeph>TextBlock</codeph>. 
 When the lines are re-broken, the new lines will have the new font settings.</p>
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.*;

    
    public class FontDescription_cloneExample extends Sprite {
        private var fd:FontDescription;
        private var fd2:FontDescription;
        
        public function FontDescription_cloneExample():void {
            fd = new FontDescription();
            fd.fontLookup = flash.text.engine.FontLookup.DEVICE;
            fd.fontName = "Palatino";
            fd.fontWeight = flash.text.engine.FontWeight.BOLD;
            fd.fontPosture = flash.text.engine.FontPosture.ITALIC;

            var ef1:ElementFormat = new ElementFormat(fd);
            
            var str:String = "This is flash text 0123456789";
            var tb:TextBlock = new TextBlock();
            var te1:TextElement = new TextElement(str, ef1);
            tb.content = te1;
            var line1:TextLine = tb.createTextLine(null, 600);
            addChild(line1);
            
            fd2 = (fd.locked) ? fd.clone() : fd;    
            fd2.fontWeight = flash.text.engine.FontWeight.NORMAL;
            var ef2:ElementFormat = new ElementFormat(fd2);

            tb.content.elementFormat=ef2;
            var line2:TextLine = tb.createTextLine(null, 600);
            addChild(line2);
            
        }
    }    
}
</codeblock></example></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:FontDescription:isFontCompatible"><apiName>isFontCompatible</apiName><shortdesc>
	 Returns true if an embedded font is available with the specified fontName, fontWeight, and fontPosture
	 where Font.fontType is flash.text.FontType.EMBEDDED_CFF.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>The <codeph>fontWeight</codeph> specified is not a member of <codeph>flash.text.engine.FontWeight</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>fontPosture</codeph> specified is not a member of <codeph>flash.text.engine.FontPosture</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc><codeph>true</codeph> if a compatible embedded font is available, otherwise <codeph>false</codeph>.
	 
     </apiDesc><apiOperationClassifier>Boolean</apiOperationClassifier></apiReturn><apiParam><apiItemName>fontName</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The name of the embedded font to check.
	 </apiDesc></apiParam><apiParam><apiItemName>fontWeight</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Specifies the font weight.  Use <codeph>flash.text.engine.FontWeight</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>fontPosture</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>Specifies the font posture.  Use <codeph>flash.text.engine.FontPosture</codeph>.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns true if an embedded font is available with the specified <codeph>fontName</codeph>, <codeph>fontWeight</codeph>, and <codeph>fontPosture</codeph>
	 where <codeph>Font.fontType</codeph> is <codeph>flash.text.FontType.EMBEDDED_CFF</codeph>.  Starting with Flash Player 10
	 two kinds of embedded fonts can appear in a SWF file.  Normal embedded fonts are only used by TextField.
	 CFF embedded fonts are only used by the flash.text.engine classes.  The two types are distinguised by the 
	 <codeph>fontType</codeph> property of the <codeph>Font</codeph> class, as returned by the <codeph>enumerateFonts()</codeph> function.
	 
	 <p>The flash.text.engine classes cannot use a font of type <codeph>EMBEDDED</codeph>. If <codeph>fontLookup</codeph> is set 
	 to <codeph>FontLookup.EMBEDDED_CFF</codeph> and the only font available at run time with the specified name, weight, and posture is of type 
	 <codeph>EMBEDDED</codeph>, Flash Player falls back to device fonts on a glyph-by-glyph basis to render the text,
	 as if no embedded font were available with the specified name and style.</p>
	 
	 <p>If both <codeph>EMBEDDED</codeph> and <codeph>EMBEDDED_CFF</codeph> fonts are available with the same name, weight, and posture, the <codeph>EMBEDDED_CFF</codeph>
	 font is selected and text renders with the <codeph>EMBEDDED_CFF</codeph> font.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontLookup"><linktext>flash.text.engine.FontDescription.fontLookup</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine"><linktext>flash.text.engine.TextBlock.createTextLine</linktext></link><link href="flash.text.xml#FontType/EMBEDDED_CFF"><linktext>flash.text.FontType.EMBEDDED_CFF</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:FontDescription:cffHinting:get"><apiName>cffHinting</apiName><shortdesc>
	 The type of CFF hinting used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>flash.text.engine.CFFHinting</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the FontDescription object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The type of CFF hinting used for this text. Use <codeph>flash.text.engine.CFFHinting</codeph>
	 constants for this property. This property applies only if the
	 <codeph>flash.text.engine.RenderingMode</codeph> property of the text is set to <codeph>flash.text.engine.RenderingMode.CFF</codeph>.
	 
	 <p>The type of CFF hinting used determines whether Flash Player forces strong horizontal  
	 stems to fit to a sub pixel grid or not.</p>
	 
	 <p>Applies only to embedded fonts.</p>
	 
	 <p>The default value is <codeph>flash.text.engine.CFFHinting.HORIZONTAL_STEM</codeph>.</p>
	 
	 <p>For the <codeph>flash.text.engine.CFFHinting</codeph> property, you can use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	     <entry><codeph>CFFHinting.NONE</codeph></entry>
	     <entry>Specifies no CFF hinting. Horizontal stems in the glyphs are not
	         forced to the sub pixel grid. This setting is appropriate for animation or
	         for large font sizes.</entry>
	   </row><row>
	     <entry><codeph>CFFHinting.HORIZONTAL_STEM</codeph></entry>
	     <entry>Specifies CFF hinting. Strong horizontal stems are fit to the sub pixel grid on
	         an LCD monitor. To use this setting, the
	         <codeph>RenderingMode</codeph> property must be set to <codeph>RenderingMode.CFF</codeph>.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#CFFHinting"><linktext>flash.text.engine.CFFHinting</linktext></link><link href="flash.text.engine.xml#FontDescription/renderingMode"><linktext>flash.text.engine.FontDescription.renderingMode</linktext></link><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:FontDescription:fontLookup:get"><apiName>fontLookup</apiName><shortdesc>
	 Specifies how the font should be looked up.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set after the FontDescription object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies how the font should be looked up.
	 
	 <p>The default value is <codeph>flash.text.engine.FontLookup.DEVICE</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>FontLookup.DEVICE</codeph></entry>
	 	<entry>Flash Player looks up a device font with the specified <codeph>name</codeph>
	 on the local system with which to render the text.</entry>
	   </row><row>
	  <entry><codeph>FontLookup.EMBEDDED_CFF</codeph></entry>
	 	<entry>Flash Player looks up an embedded CFF font with the specified <codeph>name</codeph>
	 with which to render the text.  Only fonts of type <codeph>flash.text.Font.fontType.EMBEDDED_CFF</codeph>
	 are considered.
	 If the specified CFF font is not embedded in the SWF file, Flash Player attempts
	 to use a device fallback font for each glyph.  This method is less efficient 
	 than selecting a device font in the first place.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontName:get"><apiName>fontName</apiName><shortdesc>
	 The name of the font to use, or a comma-separated list of font names.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set after the FontDescription object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The name of the font to use, or a comma-separated list of font names.  Flash Player renders
	 the element with the first available font in the list.  For example "Arial, Helvetica, _sans"
	 causes the player to search for "Arial", then "Helvetica" if Arial is not found, then _sans if neither is found.
	 
	 <p>Flash supports three generic device font names: _sans (like Helvetica and Arial), _serif (like Times Roman), 
	 and _typewriter (like Courier).  These are mapped to specific device fonts depending on the platform.</p>
	 
	 <p>The default value is <codeph>"_serif"</codeph>.</p>
	 
	 <p>Flash Player provides font fallback for glyphs which are not found in the selected font.
	 Whether the font in use is embedded or device, if the glyph is not found in the font,
	 Flash Player attempts to render it using another device font likely to contain the glyph.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontPosture:get"><apiName>fontPosture</apiName><shortdesc>
	 Specifies the font posture.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>flash.text.engine.FontPosture</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the FontDescription object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies the font posture.
	 
	 <p>Applies only to device fonts.</p>
	 
	 <p>The default value is <codeph>flash.text.engine.FontPosture.NORMAL</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>FontPosture.NORMAL</codeph></entry>
	 	<entry>Normal font posture.</entry>
	   </row><row>
	  <entry><codeph>FontPosture.ITALIC</codeph></entry>
	 	<entry>Italic font posture.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:fontWeight:get"><apiName>fontWeight</apiName><shortdesc>
	 Specifies the font weight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>flash.text.engine.FontWeight</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the FontDescription object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies the font weight.
	 
	 <p>Applies only to device fonts.</p>
	 
	 <p>The default value is <codeph>flash.text.engine.FontWeight.NORMAL</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>FontWeight.NORMAL</codeph></entry>
	 	<entry>Normal font weight.</entry>
	   </row><row>
	  <entry><codeph>FontWeight.BOLD</codeph></entry>
	 	<entry>Bold font weight.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:locked:get"><apiName>locked</apiName><shortdesc>
	 Indicates whether or not the FontDescription is locked.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5."/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier><apiException><apiDesc>If set after the FontDescription object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Indicates whether or not the FontDescription is locked.  If <codeph>true</codeph> the FontDescription cannot be modified.
	 Call <codeph>FontDescription.clone()</codeph> to get an unlocked copy of the FontDescription object.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontDescription:renderingMode:get"><apiName>renderingMode</apiName><shortdesc>
	 The rendering mode used for this text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>flash.text.engine.RenderingMode</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set after the FontDescription object is locked (<codeph>locked</codeph> is <codeph>true</codeph>).
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The rendering mode used for this text. Use <codeph>flash.text.engine.RenderingMode</codeph>
	 constants for this property. 
	 
	 <p>Applies only to embedded fonts.</p>
	 
	 <p>The default value is <codeph>flash.text.engine.RenderingMode.CFF</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>RenderingMode.NORMAL</codeph></entry>
	 	<entry>Applies the regular text rendering, which matches the type of rendering that
	 	    Flash Player 7 and earlier versions used.</entry>
	   </row><row>
	   	<entry><codeph>RenderingMode.CFF</codeph></entry>
	 	<entry>Applies CFF rendering, which makes text more legible. (This feature became
	 	    available in Flash Player 10.) CFF rendering allows for high-quality rendering
	 	    of font faces at small sizes.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#RenderingMode"><linktext>flash.text.engine.RenderingMode</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
 The TextJustifier class is an abstract base class for the justifier types that you can apply to a TextBlock, specifically the
 EastAsianJustifier and SpaceJustifier classes.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextJustifier class is an abstract base class for the justifier types that you can apply to a TextBlock, specifically the
 EastAsianJustifier and SpaceJustifier classes.
 
 <p>You cannot instantiate the TextJustifier class directly. Invoking <codeph>new TextJustifier()</codeph> throws an <codeph>ArgumentError</codeph> 
 exception. Setting the properties of an EastAsianJustifier or SpaceJustifier object after you apply it to a TextBlock does not 
 invalidate the TextBlock.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:TextJustifier:TextJustifier"><apiName>TextJustifier</apiName><shortdesc>
	 Calling the new TextJustifier() constructor throws an 
	 ArgumentError exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>locale</codeph> specified is <codeph>null</codeph> or too short to represent a valid locale.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>lineJustification</codeph> specified is not a member of <codeph>LineJustification</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The locale to determine the justification rules.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The type of line justification for the paragraph. 
	 Use <codeph>LineJustification</codeph> constants for this property.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Calling the <codeph>new TextJustifier()</codeph> constructor throws an 
	 <codeph>ArgumentError</codeph> exception. You <i>can</i>, however, call constructors for 
	 the following subclasses of TextJustifier:
	 
	 <ul>
	 
	 	<li><codeph>new SpaceJustifier()</codeph></li>
	 	<li><codeph>new EastAsianJustifier()</codeph></li>
	 
	 </ul>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Constructs a cloned copy of the TextJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>A copy of the <codeph>TextJustifier</codeph> object.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Constructs a cloned copy of the TextJustifier.
	 
	 <p>Subclasses of TextJustifier must override this method.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextJustifier:getJustifierForLocale"><apiName>getJustifierForLocale</apiName><shortdesc>
	 Constructs a default TextJustifier subclass appropriate to the specified locale.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiStatic/><apiException><apiDesc>The <codeph>locale</codeph> specified is <codeph>null</codeph> or too short to represent a valid locale.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>A reference to a <codeph>TextJustifier</codeph> object.
     
     </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiDesc>The locale to determine the justifier constructed.
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Constructs a default TextJustifier subclass appropriate to the specified locale.
	 
	 <p>If the locale is Chinese, Korean, or Japanese, the method constructs a default EastAsianJustifier object.
	 Otherwise the text engine constructs a default SpaceJustifier object.</p>
     
     </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:TextJustifier:lineJustification:get"><apiName>lineJustification</apiName><shortdesc>
     Specifies the line justification for the text in a text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
     Specifies the line justification for the text in a text block. 
     
     <p>Use the following constants defined by the <codeph>LineJustification</codeph> as valid values for this property:</p>
     
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>LineJustification.UNJUSTIFIED</codeph></entry>
	 	<entry>Generates unjustified lines.</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_BUT_LAST</codeph></entry>
	 	<entry>Generates all lines justified except for the last one.</entry>
	   </row><row>
	 	<entry><codeph>LineJustification.ALL_INCLUDING_LAST</codeph></entry>
	 	<entry>Generates all lines justified.</entry>
	   </row></tbody></tgroup></adobetable>
	 
     </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextJustifier:locale:get"><apiName>locale</apiName><shortdesc>
     Specifies the locale to determine the justification rules for the text in a text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>The <codeph>locale</codeph> specified is <codeph>null</codeph> or too short to represent a valid locale.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
     Specifies the locale to determine the justification rules for the text in a text block.
	 Standard locale identifiers are used.  For example "en", "en_US" and "en-US" are all
	 English, "ja" is Japanese.
     
     </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GroupElement"><apiName>GroupElement</apiName><shortdesc>
 A GroupElement object groups a collection of TextElement, GraphicElement, or other GroupElement objects 
 that you can assign as a whole to the content property of a TextBlock object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 A GroupElement object groups a collection of TextElement, GraphicElement, or other GroupElement objects 
 that you can assign as a whole to the <codeph>content</codeph> property of a TextBlock object. A GroupElement
 object can also simply share common formatting within another GroupElement object. 
 
 <p>When a GroupElement contains another GroupElement, the inner GroupElement retains its own formatting (ElementFormat settings). It does
 not inherit the formatting of the outer GroupElement.</p>
 
 <p>On a GroupElement, most of the format properties have no impact. For this reason, it is legal to create a text line for a GroupElement object
 that has a null <codeph>elementFormat</codeph> parameter. A few format properties such as <codeph>kerning</codeph> and <codeph>ligature</codeph>
 do affect formatting where intersections occur between members of the group. If the group has a null format, the format of the preceding
 element determines the formatting where intersections occur between members of the group.</p>
  
 </apiDesc><example conref="examples\GroupElementExample.as"> This example creates a red box as a GraphicElement object and combines
 it with two TextElement objects to create a GroupElement object. It assigns the GroupElement
 object to the <codeph>content</codeph> property of a TextBlock, from which it creates three lines.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.ContentElement;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GroupElementExample extends Sprite {
        
        public function GroupElementExample():void {
            
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0, 0, 20, 20);
            redBox.graphics.endFill(); 
            
            var format:ElementFormat = new ElementFormat();
            var fontDescription:FontDescription = new FontDescription("Arial");
            format.fontSize = 16;
            format.fontDescription = fontDescription;
            
            var str1:String = "This red box is a GraphicElement ";
            var str2:String = " in the middle of two TextElements, " +
            " which together make " +
            "up a GroupElement in a TextBlock that is broken into three lines.";
            
            var textElement1:TextElement = new TextElement(str1,format);
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textElement2:TextElement = new TextElement(str2, format);
            var groupVector:Vector.&lt;ContentElement&gt; = new Vector.&lt;ContentElement&gt;();
            groupVector.push(textElement1, graphicElement, textElement2);
            var groupElement = new GroupElement(groupVector);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = groupElement;
            createTextLines(textBlock);
        }
        
        private function createTextLines(textBlock:TextBlock):void 
        {
        
            var yPos = 20;
            var line_length:Number = 450;
            var textLine:TextLine = textBlock.createTextLine (null, line_length);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.height+8;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, line_length);
            }
        }
    }    
}


</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links><apiConstructor id="flash.text.engine:GroupElement:GroupElement"><apiName>GroupElement</apiName><shortdesc>
	 Creates a new GroupElement instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>The specified <codeph>element</codeph> contains <codeph>null</codeph> elements.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The specified <codeph>element</codeph> contains an element that is not a known subclass of <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The specified <codeph>element</codeph> contains elements that are specified as the <codeph>content</codeph> of a <codeph>TextBlock</codeph>. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The specified <codeph>element</codeph> contains elements that are already members of a group, or appear more than once in 
     the <codeph>elements</codeph>.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>elements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiData>null</apiData><apiDesc>A Vector of ContentElement objects to be contained in the GroupElement.  
	 The Vector can be empty.  The default value is <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>The element format for the group.  The default value is <codeph>null</codeph>.  
	 This format applies to the intersections between elements in the group; those elements do not inherit the format.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>The <codeph>EventDispatcher</codeph> object that receives copies of every
	 event dispatched to text lines created based on this content element.  The default value is <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>The rotation applied to the element as a unit. Use <codeph>TextRotation</codeph> constants for 
	 this property. The default value is <codeph>TextRotation.ROTATE_0</codeph>. 
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Creates a new GroupElement instance.
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:GroupElement:getElementAt"><apiName>getElementAt</apiName><shortdesc>
	 Retrieves an element from within the group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>If <codeph>index</codeph> is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>index</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The index of the element to retrieve.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Retrieves an element from within the group.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementAtCharIndex"><apiName>getElementAtCharIndex</apiName><shortdesc>
	 Returns the element containing the character specified by the charIndex parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>If <codeph>charIndex</codeph> is not in the range of <codeph>0 - rawText.length</codeph>.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>The element containing the character at <codeph>charIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value for the character whose element you want to find.
	 A value of 0 corresponds to the first character in the group, not the first character in the TextBlock.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns the element containing the character specified by the <codeph>charIndex</codeph> parameter.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:getElementIndex"><apiName>getElementIndex</apiName><shortdesc>
	 Returns the index of the element specified by the element parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiDesc>The index of the element specified by <codeph>element</codeph>, or -1 if the element is not in the group.
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>element</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiDesc>The element in the group whose index you want to retrieve.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns the index of the element specified by the <codeph>element</codeph> parameter.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:groupElements"><apiName>groupElements</apiName><shortdesc>
	 Replaces the range of elements that the beginIndex and endIndex
	 parameters specify with a new GroupElement containing those elements.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>If <codeph>beginIndex</codeph> or <codeph>endIndex</codeph> is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>The new group.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:GroupElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value for the start position of the range to group.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value following the end position of the range to group.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Replaces the range of elements that the <codeph>beginIndex</codeph> and <codeph>endIndex</codeph>
	 parameters specify with a new <codeph>GroupElement</codeph> containing those elements.
	 As designed, the elements from beginIndex to endIndex-1 are replaced.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:mergeTextElements"><apiName>mergeTextElements</apiName><shortdesc>
	 Merges the text from the range of elements that the beginIndex and endIndex
	 parameters specify into the element specified by beginIndex without affecting the format of that element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>If <codeph>beginIndex</codeph> or <codeph>endIndex</codeph> is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>If any of the elements in the specified range is not TextElement.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>The first text element in the range, now containing all the text in the range.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value for the start position of the range to merge.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value following the end position of the range to merge.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Merges the text from the range of elements that the <codeph>beginIndex</codeph> and <codeph>endIndex</codeph>
	 parameters specify into the element specified by <codeph>beginIndex</codeph> without affecting the format of that element.
	 As designed, the text from elements from beginIndex to endIndex-1 are merged.
	 After their text has been merged, elements from beginIndex+1 to endIndex-1 are removed from the group and orphaned, 
	 with <codeph>null</codeph> <codeph>group</codeph> properties.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:replaceElements"><apiName>replaceElements</apiName><shortdesc>
	 Replaces the range of elements that the beginIndex and
	 endIndex parameters specify with the contents
	 of the newElements parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>beginIndex</codeph> or <codeph>endIndex</codeph> specified is out of range.
     </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>newElements</codeph> specified contain <codeph>null</codeph> elements.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>newElements</codeph> specified contain <codeph>this</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>newElements</codeph> specified contain elements that are not a known subclass of <codeph>ContentElement</codeph> .
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>newElements</codeph> specified contain elements that are specified as the <codeph>content</codeph> of a <codeph>TextBlock</codeph>. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>newElements</codeph> specified contain elements that are already members of a group or appear 
     more than once in the <codeph>elements</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If the operation would result in nested rotations within the <codeph>GroupElement</codeph>.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>A Vector containing the elements that were replaced.
	  
     </apiDesc><apiType value="Vector$flash.text.engine:ContentElement"/></apiReturn><apiParam><apiItemName>beginIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value for the start position of the replacement range.
	 </apiDesc></apiParam><apiParam><apiItemName>endIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value following the end position of the replacement range.
	 </apiDesc></apiParam><apiParam><apiItemName>newElements</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/><apiDesc>The elements to use to replace the specified range of elements.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Replaces the range of elements that the <codeph>beginIndex</codeph> and
	 <codeph>endIndex</codeph> parameters specify with the contents
	 of the <codeph>newElements</codeph> parameter.
	 As designed, the elements from beginIndex to endIndex-1 are replaced.
	 <p>To delete elements, pass <codeph>null</codeph> for <codeph>newElements</codeph>.</p>
	 <p>To insert an element, pass the same value for <codeph>beginIndex</codeph> and <codeph>endIndex</codeph>.  
	 The new element is inserted before the specified index.</p>
	 <p>To append an element, pass <codeph>elementCount</codeph> for <codeph>beginIndex</codeph> and <codeph>endIndex</codeph>.</p>
	 <p>After the operation, the replaced elements are orphaned, with <codeph>null</codeph> <codeph>group</codeph> properties.</p>
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:setElements"><apiName>setElements</apiName><shortdesc>
	 Sets the elements in the group to the contents of the Vector.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>value</codeph> specified contains <codeph>null</codeph> elements.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>value</codeph> specified contains <codeph>this</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>value</codeph> specified contains elements that are not a known subclass of <codeph>ContentElement</codeph> .
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>value</codeph> specified contains elements that are specified as the <codeph>content</codeph> of a <codeph>TextBlock</codeph>. 
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>value</codeph> specified contains elements that are already members of a group, or appear more than once 
     in the <codeph>value</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If the operation would result in nested rotations within the <codeph>GroupElement</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>value</apiItemName><apiType value="Vector$flash.text.engine:ContentElement"/></apiParam></apiOperationDef><apiDesc>
	 Sets the elements in the group to the contents of the Vector.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:GroupElement:splitTextElement"><apiName>splitTextElement</apiName><shortdesc>
	 Splits a portion of a TextElement in the group into a new TextElement
	 which is inserted into the group following the specified TextElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>If <codeph>elementIndex</codeph> or <codeph>charIndex</codeph> is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>If the element at <codeph>elementIndex</codeph> is not a TextElement.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiDesc>The new text element containing the latter portion of the original text element.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextElement</apiOperationClassifier></apiReturn><apiParam><apiItemName>elementIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value for the position of the element in the group.
	 </apiDesc></apiParam><apiParam><apiItemName>splitIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value for the character in the TextElement where the split is to occur.
	 The specified character is the first character in the new TextElement.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Splits a portion of a TextElement in the group into a new TextElement
	 which is inserted into the group following the specified TextElement.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:GroupElement:ungroupElements"><apiName>ungroupElements</apiName><shortdesc>
	 Ungroups the elements in a nested GroupElement that groupIndex specifies within an outer 
	 GroupElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>If <codeph>groupIndex</codeph> is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>If the element at <codeph>groupIndex</codeph> is not a GroupElement.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>groupIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value for the position of the group to be split.
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Ungroups the elements in a nested GroupElement that <codeph>groupIndex</codeph> specifies within an outer 
	 GroupElement object. After the operation, the ungrouped elements replace the nested GroupElement, which becomes an orphan
	 with a <codeph>null</codeph> <codeph>group</codeph> property.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:GroupElement:elementCount:get"><apiName>elementCount</apiName><shortdesc>
	 The number of elements in the group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 The number of elements in the group.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:ContentElement"><apiName>ContentElement</apiName><shortdesc>
 The ContentElement class serves as a base class for the element types that can appear in a GroupElement, namely a GraphicElement, 
 another GroupElement, or a TextElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The ContentElement class serves as a base class for the element types that can appear in a GroupElement, namely a GraphicElement, 
 another GroupElement, or a TextElement.
 
 <p>ContentElement is an abstract base class; therefore, you cannot instantiate ContentElement directly. 
 Invoking <codeph>new ContentElement()</codeph> throws an <codeph>ArgumentError</codeph> exception. </p>
 
 <p>You can assign a ContentElement element to exactly one <codeph>GroupElement</codeph> or to the <codeph>content</codeph> property of exactly one text 
 block.</p>
 
 </apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock/content"><linktext>TextBlock.content</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links><apiConstructor id="flash.text.engine:ContentElement:ContentElement"><apiName>ContentElement</apiName><shortdesc>
	Calling the new ContentElement() constructor throws an 
	ArgumentError exception.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>The element format for the text in the element.  The default value is <codeph>null</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>The <codeph>EventDispatcher</codeph> object that receives copies of every
	event dispatched to valid text lines created based on this content element.  The default value is <codeph>null</codeph>.
	</apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>The rotation applied the element as a unit. Use <codeph>TextRotation</codeph>
	constants for this property.  The default value is <codeph>TextRotation.ROTATE_0</codeph>.
   	</apiDesc></apiParam></apiConstructorDef><apiDesc>
	Calling the <codeph>new ContentElement()</codeph> constructor throws an 
	<codeph>ArgumentError</codeph> exception. You <i>can</i>, however, call constructors for 
	the following subclasses of ContentElement:
	
	<ul>
	
		<li><codeph>new GraphicElement()</codeph></li>
		<li><codeph>new GroupElement()</codeph></li>
		<li><codeph>new TextElement()</codeph></li>
	
	</ul>
	
 	</apiDesc></apiConstructorDetail></apiConstructor><apiValue id="flash.text.engine:ContentElement:GRAPHIC_ELEMENT"><apiName>GRAPHIC_ELEMENT</apiName><shortdesc> 
	Indicates the presence a graphic element in the text.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>0xFDEF</apiData><apiValueClassifier>uint</apiValueClassifier></apiValueDef><apiDesc> 
	Indicates the presence a graphic element in the text.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/rawText"><linktext>rawText</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:userData"><apiName>userData</apiName><shortdesc>
	 Provides a way for the author to associate arbitrary data with the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Provides a way for the author to associate arbitrary data with the element.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:elementFormat:get"><apiName>elementFormat</apiName><shortdesc>
	 The ElementFormat object used for the element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ElementFormat</apiValueClassifier></apiValueDef><apiDesc>
	 The ElementFormat object used for the element.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 <p>When the elementFormat property is set, the ElementFormat object provided is locked:  its <codeph>locked</codeph>
	 property is set to <codeph>true</codeph>.  A locked ElementFormat cannot be modified.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat"><linktext>ElementFormat</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:eventMirror:get"><apiName>eventMirror</apiName><shortdesc>
	 The EventDispatcher object that receives copies of every
	 event dispatched to valid text lines based on this content element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 The <codeph>EventDispatcher</codeph> object that receives copies of every
	 event dispatched to valid text lines based on this content element.
	 The specified object can be used to set up listeners for a text link or other 
	 interactive piece of text, as it can be difficult to determine at runtime which parts
	 of lines have resulted from particular content elements.
	 You can also use listeners to apply decorations such as underlines, the metrics of which
	 you cannot determine until after the text is laid out.
	 The default value is <codeph>null</codeph>, which means no mirrored events are dispatched.
	 
	 <p>Event mirrors manifest themselves in text lines as instances of the <codeph>TextLineMirrorRegion</codeph>
	 class. Depending on bidirectional processing and line breaking, one or more mirror regions can be produced.</p>
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.events.xml#EventDispatcher"><linktext>flash.events.EventDispatcher</linktext></link><link href="flash.text.engine.xml#TextElement/eventMirror"><linktext>TextElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextLineMirrorRegion"><linktext>TextLineMirrorRegion</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:groupElement:get"><apiName>groupElement</apiName><shortdesc>
	 The GroupElement object that contains this element, or
	 null if it is not in a group.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:GroupElement</apiValueClassifier></apiValueDef><apiDesc>
	 The GroupElement object that contains this element, or
	 <codeph>null</codeph> if it is not in a group.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:rawText:get"><apiName>rawText</apiName><shortdesc>
	 A copy of the text in the element, including the U+FDEF characters.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 A copy of the text in the element, including the U+FDEF characters. The U+FDEF character is an arbitrary character
	 that represents a graphic element in the String.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:text:get"><apiName>text</apiName><shortdesc>
	 A copy of the text in the element, not including the U+FDEF characters, which represent graphic elements in the String.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 A copy of the text in the element, not including the U+FDEF characters, which represent graphic elements in the String.
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextElement/text"><linktext>TextElement.text</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlock:get"><apiName>textBlock</apiName><shortdesc>
	 The TextBlock to which this element belongs.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextBlock</apiValueClassifier></apiValueDef><apiDesc>
	 The TextBlock to which this element belongs.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:ContentElement:textBlockBeginIndex:get"><apiName>textBlockBeginIndex</apiName><shortdesc>
	 The index in the text block of the first character of this element.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>int</apiValueClassifier></apiValueDef><apiDesc>
	 The index in the text block of the first character of this element.
	 This value is not cached; it is calculated whenever this method is called.
	 
	 <p>The default value is -1.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:ContentElement:textRotation:get"><apiName>textRotation</apiName><shortdesc>
	 The rotation to apply to the element as a unit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value that is not a member of <codeph>TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set to <codeph>TextRotation.AUTO</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If the operation would result in nested rotations within a <codeph>GroupElement</codeph>.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The rotation to apply to the element as a unit. Use <codeph>TextRotation</codeph>
	 constants for this property.
	 
	 <p>The default value is <codeph>TextRotation.ROTATE_0</codeph>.</p>
	 
	 <p>The final rotation of any glyph is the sum of ElementFormat.textRotation, ContentElement.textRotation, and TextBlock.lineRotation.</p>
	 
	 <p><codeph>ContentElement.textRotation</codeph> is used to create a short run of text whose
	 rotation differs from the containing line.  TCY runs in Japanese text are an example. TCY stands for Tate-Chu-Yoko
	 and refers to a little horizontal run of text (usually a number) in some vertical Japanese text.
	 To create a Paragraph of vertical Japanese text containing a TCY run, do the following:</p>
	 <ol>
	 <li>Set <codeph>TextBlock.lineRotation=TextRotation.ROTATE_90</codeph></li>
	 <li>Set <codeph>TextBlock.content</codeph> to a <codeph>GroupElement</codeph>, consisting of three <codeph>TextElement</codeph> objects.
	 The first of these elements is the Japanese text before the TCY run, the second is the Latin text of the TCY run, and the third is 
	 the Japanese text after the TCY run.</li>
	 <li>Set the <codeph>textRotation</codeph> property of the TCY <codeph>TextElement</codeph> to <codeph>TextRotation.ROTATE_270</codeph>.
	 The TCY text element rotates as a unit.  It starts with a 90 degree rotation inherited
	 from the line.  Adding another 270 degrees takes it around to horizontal.</li>
	 </ol>
	 
	 <p>Rotated content elements cannot be nested.  In any hierarchy of content elements, no matter how complex,
	 only one content element can have its <codeph>textRotation</codeph> property set.  The following methods and property setters throw an 
	 argument error if nested rotations are detected:</p>
	 <ol>
	 <li><codeph>ContentElement.textRotation</codeph></li>
	 <li><codeph>GroupElement.setElements</codeph></li>
	 <li><codeph>GroupElement.replaceElements</codeph></li>
	 </ol>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Element is not rotated.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Element is rotated 90 degrees clockwise.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Element is rotated 180 degrees.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Element is rotated 270 degrees clockwise.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>Not supported.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 The TextBlock class is a factory for the creation of TextLine objects, which you can 
 render by placing them on the display list.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextBlock class is a factory for the creation of TextLine objects, which you can 
 render by placing them on the display list.
 
 <p>The TextBlock class is intended to contain a single paragraph because the Unicode 
 bidirectional and line-break algorithms operate on one paragraph at a time. For applications 
 that compose multiple paragraphs of text, use a markup language, or text analysis to 
 divide the text into paragraphs and create one TextBlock per paragraph.</p>
 
 <p>The TextBlock object stores its content in the <codeph>content</codeph> property, which is an
 instance of the ContentElement class.  Because you can't create an instance of the ContentElement
 class, set <codeph>content</codeph> to an instance of one of its subclasses: TextElement,
 GraphicElement, or GroupElement. Use TextElement for purely text content, GraphicElement for
 an image or graphic content, and GroupElement for content that contains a combination of TextElement,  
 GraphicElement, and other GroupElement objects. See the ContentElement class and
 its subclasses for details on managing formatted runs of text, embedded sub runs, and graphic elements.</p>
 
 <p>After you create the TextBlock instance and set the <codeph>content</codeph> property, call the
 <codeph>createTextLine()</codeph> method to create lines of text, which are instances of the <codeph>TextLine</codeph> class. </p>
 
 </apiDesc><example conref="examples\TextBlockExample.as"> This example displays three TextBlock paragraphs of Japanese and English
 text. The Japanese text is converted to Strings from Unicode character codes. 
 When you click on the button, the example rotates the text from horizontal to
 vertical or from veritcal to horizontal.
 <ol>
     <li>Add Button to the library.</li>
  <li>Save this code as TextBlockExample.as in the same directory as your FLA.</li>
  <li>Set the Class in the Properties panel in your FLA to TextBlockExample.</li>
 </ol>

<codeblock>
package { 
    import fl.controls.Button;
     import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.TextRotation;
    import flash.text.engine.TextBaseline;
    import flash.text.engine.LineJustification;
    import flash.text.engine.FontDescription;
    import flash.text.engine.EastAsianJustifier; 
    import flash.display.Loader;
    import flash.display.Sprite;
    import flash.display.Stage;
    import flash.events.MouseEvent;
    import flash.system.Capabilities;
    
    public class TextBlockExample extends Sprite {
        
        var vertical:Boolean;    
        var container:Sprite;
        var textBlocks:Vector.&lt;TextBlock&gt;;
        var loader:Loader = new Loader();
        var directionButton:Button = new Button();
        
        public function TextBlockExample():void {
            addChild(directionButton);
            directionButton.width = 30;
            directionButton.move(50, 350);
            directionButton.addEventListener(MouseEvent.CLICK, clickHandler);
            createContent();
            createLines();
        }

        private function createEmptyBlock():TextBlock {
        
            var textBlock:TextBlock = new TextBlock();
            textBlock.baselineZero = TextBaseline.IDEOGRAPHIC_CENTER;
            textBlock.textJustifier = new EastAsianJustifier("ja", LineJustification.ALL_BUT_LAST);
            textBlock.lineRotation = vertical? TextRotation.ROTATE_90: TextRotation.ROTATE_0;
            return textBlock;    
        }
        
        private function paragraph1(format:ElementFormat):TextBlock {
        
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;
        }

        private function paragraph2(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(
                0x30AF, 0x30ED, 0x30B9, 0x30D7, 0x30E9, 0x30C3, 0x30C8, 0x30D5, 
                0x30A9, 0x30FC, 0x30E0, 0x4E0A, 0x3067, 0x518D, 0x751F, 0x53EF, 
                0x80FD, 0x306A
            ) + 
            "Flash Video" +
            String.fromCharCode(
                0x3092, 0x914D, 0x4FE1, 0x3001, 0x653F, 0x5E9C, 0x6700, 0x65B0, 
                0x60C5, 0x5831, 0x3092, 0x3088, 0x308A, 0x591A, 0x304F, 0x306E, 
                0x56FD, 0x6C11, 0x306B, 0x9AD8, 0x54C1, 0x8CEA, 0x306A, 0x753B, 
                0x50CF, 0x3067, 0x7C21, 0x5358, 0x304B, 0x3064, 0x30EA, 0x30A2, 
                0x30EB, 0x30BF, 0x30A4, 0x30E0, 0x306B, 0x63D0, 0x4F9B, 0x3059, 
                0x308B, 0x3053, 0x3068, 0x304C, 0x53EF, 0x80FD, 0x306B, 0x306A, 
                0x308A, 0x307e, 0x3057, 0x305F, 0x3002), format);
            return textBlock;    
        }

        private function paragraph3(format:ElementFormat):TextBlock {
            
            var textBlock:TextBlock = createEmptyBlock();
            textBlock.content = new TextElement(
            String.fromCharCode(0x3010) +
            "2007" +
            String.fromCharCode(0x5E74) + "2" + String.fromCharCode(0x6708) +
            "21" +
            String.fromCharCode(0x65E5, 0x3011),
            format);
            return textBlock;    
        }

        private function createContent():void {
            
            var font:FontDescription = new FontDescription();
            if (Capabilities.os.search("Mac OS") &gt; -1) 
                font.fontName = String.fromCharCode(0x5C0F, 0x585A, 0x660E, 0x671D) + " Pro R"; // "Kozuka Mincho Pro R"                    koFont.fontName = "Adobe " + String.fromCharCode(0xBA85, 0xC870) + " Std M"; // "Adobe Myungjo Std M"
            else 
                font.fontName = "Kozuka Mincho Pro R";        
            var format:ElementFormat = new ElementFormat();
            format.fontDescription = font;
            format.fontSize = 12;
            format.locale = "ja";
            format.color = 0x000000;
            if (!vertical) 
                format.textRotation = TextRotation.ROTATE_0; 
            textBlocks = new Vector.&lt;TextBlock&gt;();
            textBlocks.push(
                paragraph1(format),
                paragraph2(format),
                paragraph3(format)//,
            );
        }

        private function createLines():void {    
        
            if (container != null) {
                removeChild(container);
            }            
            container = new Sprite();
            container.y = 45;
            container.x = 40;
            addChild(container);
            var linePosition:Number = vertical? this.stage.stageWidth - 120: 12;
        
            for (var i:uint = 0; i &lt; textBlocks.length; i++) {
                var textBlock:TextBlock = textBlocks[i];
                var previousLine:TextLine = null;
        
                while (true) {
                    var textLine:TextLine = textBlock.createTextLine(
                        previousLine, 
                        300);
                    if (textLine == null) 
                        break;
                    if (vertical) 
                    {
                        textLine.x = linePosition;
                        linePosition -= 24;
                        directionButton.label = " -- ";
                    }
                    else 
                    {
                        textLine.y = linePosition+50;
                        linePosition += 24;
                        directionButton.label = " | ";
                    }
                    container.addChild(textLine);                
                    previousLine = textLine;
                }
                if (vertical) 
                    linePosition -= 16;
                else 
                    linePosition += 16; 
            }
        }

        private function clickHandler(event:MouseEvent):void {
            
            vertical = !vertical;
            createContent();
            createLines();
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links><apiConstructor id="flash.text.engine:TextBlock:TextBlock"><apiName>TextBlock</apiName><shortdesc>
 	 Creates a TextBlock object
	 
	 </shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>content</codeph> specified is not a known subclass of <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>content</codeph> specified is already a member of a group.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>lineRotation</codeph> specified is not a member of <codeph>TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>baselineZero</codeph> specified is not a member of <codeph>TextBaseline</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>bidiLevel</codeph> specified is less than 0.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>tabStops</codeph> specified contain <codeph>null</codeph> elements.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>tabStops</codeph> specified are not sorted by increasing position.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>baselineFontSize</codeph> specified is less than 0.
 	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>content</apiItemName><apiOperationClassifier>flash.text.engine:ContentElement</apiOperationClassifier><apiData>null</apiData><apiDesc>The contents of the text block.
	 </apiDesc></apiParam><apiParam><apiItemName>tabStops</apiItemName><apiType value="Vector$flash.text.engine:TabStop"/><apiData>null</apiData><apiDesc>The tab stops for the text in the text block.
     </apiDesc></apiParam><apiParam><apiItemName>textJustifier</apiItemName><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier><apiData>null</apiData><apiDesc>The TextJustifier object to use during line creation for this block.
     If no justifier is provided, a default justifier is constructed based on an English locale.
     </apiDesc></apiParam><apiParam><apiItemName>lineRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>The rotation applied to the text lines generated from the text block as units.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineZero</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>roman</apiData><apiDesc>Specifies which baseline is at y=0 for all lines in the block.
     </apiDesc></apiParam><apiParam><apiItemName>bidiLevel</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiData>0</apiData><apiDesc>The default bidirectional embedding level of the text in the text block.
	 </apiDesc></apiParam><apiParam><apiItemName>applyNonLinearFontScaling</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>true</apiData><apiDesc>Specifies that you want to enhance screen appearance at the expense of WYSIWYG print fidelity.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontDescription</apiItemName><apiOperationClassifier>flash.text.engine:FontDescription</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies a font description from which to derive line baselines for all lines in the block.
	 </apiDesc></apiParam><apiParam><apiItemName>baselineFontSize</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>12.0</apiData><apiDesc>Specifies the size to use with the baselineFontDescription.  
	 This parameter is ignored if <codeph>baselineFontDescription</codeph> is <codeph>null</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
 	 Creates a TextBlock object
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#TextBlock/applyNonLinearFontScaling"><linktext>applyNonLinearFontScaling</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>baselineZero</linktext></link><link href="flash.text.engine.xml#TextBlock/bidiLevel"><linktext>bidiLevel</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>lineRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStops"><linktext>tabStops</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:TextBlock:createTextLine"><apiName>createTextLine</apiName><shortdesc>
	 Instructs the text block to create a line of text from its content, beginning at the point 
	 specified by the previousLine parameter and breaking at the point specified by the
	 width parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>If the TextLine specified by <codeph>previousLine</codeph> is not valid.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If <codeph>width</codeph> is less than zero, unless <codeph>fitSomething</codeph> is true.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If <codeph>width</codeph> is greater than <codeph>TextLine.MAX_LINE_WIDTH</codeph>.
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If one or more elements in the content of the text block has a <codeph>null ElementFormat</codeph>.
     	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>A text line, or <codeph>null</codeph> if the text block is empty or the width specified is less than the width of the next element.
	 To distinguish between these cases, check the <codeph>textLineCreationResult</codeph> property of the text block.
     	 
     	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>previousLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiData>null</apiData><apiDesc>Specifies the previously broken line after which breaking is to commence.  Can be <codeph>null</codeph>
	 when breaking the first line.
	 </apiDesc></apiParam><apiParam><apiItemName>width</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>1000000</apiData><apiDesc>Specifies the desired width of the line in pixels.  The actual width may be less.
	 </apiDesc></apiParam><apiParam><apiItemName>lineOffset</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>0.0</apiData><apiDesc>An optional parameter which specifies the difference in pixels between the origin of the line and the origin of the tab stops.  
	 This can be used when lines are not aligned, but it is desirable for their tabs to be so.
	 The default value for this parameter is <codeph>0.0</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>fitSomething</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>An optional parameter which instructs Flash Player to fit at least one character into the text line, no matter what
	 width has been specified (even if width is zero or negative, which would otherwise result in an exception being thrown).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Instructs the text block to create a line of text from its content, beginning at the point 
	 specified by the <codeph>previousLine</codeph> parameter and breaking at the point specified by the
	 <codeph>width</codeph> parameter. The text line is a TextLine object, which you can add 
	 to the display list.
	 
	 <p>Breaking lines over a range of a text block that has already been broken can change the validity
	 of lines in and beyond the area where breaking takes place.  The status of lines can change from VALID to INVALID or 
	 POSSIBLY_INVALID.  If a newly broken line aligns perfectly with a previously broken line which has a status
	 of POSSIBLY_INVALID, that previously broken line and all following POSSIBLY_INVALID lines change back
	 to a status of VALID.  The validity of lines that have been set to values that are not members of 
	 <codeph>TextLineValidity</codeph> do not change to VALID, but could change to INVALID.
	 Check the <codeph>firstInvalidLine</codeph> property after any change to the text block
	 to see where to begin or continue rebreaking text lines.</p>
	 
	 <p>You can create artificial word breaks by including the Unicode Zero Width Space (ZWSP) character in the text.
	 This can be useful for languages such as Thai, which require a dictionary for correct line breaking.
	 Flash Player does not include such a dictionary.</p>
	 
	 </apiDesc><example conref="examples\TextBlock_createTextLineExample.as"> This example calls the <codeph>createTextLine()</codeph> method to create 
 lines of text in a text block. It accomplishes this by performing the following tasks:
  <ul>
     <li>Creating a TextElement from a String and giving it a font size of 20</li> 
     <li>Creating a TextBlock and assigning the TextElement to it</li>
     <li>Calling <codeph>createTextLine()</codeph> to create lines 300 pixels wide from the text block</li>
    <li>Placing each line on Stage (<codeph>addChild()</codeph>) and setting its position (<codeph>x</codeph> and <codeph>y</codeph>)</li>
  </ul>
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_createTextLineExample extends Sprite {
        
        public function TextBlock_createTextLineExample():void {
            
            var str:String = "I am a TextElement, created from a String and assigned " +
            "to the content property of a TextBlock. The createTextLine() method " +
            "then created these lines, 300 pixels wide, for display." ;
            
            var fontDescription:FontDescription = new FontDescription("Arial");
            var format:ElementFormat = new ElementFormat(fontDescription);
            format.fontSize = 16;
            var textElement:TextElement = new TextElement(str, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement; 
            createLines(textBlock); 
        }
        
        private function createLines(textBlock:TextBlock):void 
        {            
            var lineWidth:Number = 300;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:dump"><apiName>dump</apiName><shortdesc>
	 Dumps the underlying contents of the TextBlock as an XML string.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiReturn><apiOperationClassifier>String</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Dumps the underlying contents of the TextBlock as an XML string.
	 This can be useful in automated testing, and includes text, formatting, and rendering information.
	 It is only available in the debugger Flash Player.
	 
	 <p><b>Note:</b> The content and format of the output may change in the future. Adobe does not guarantee backward compatibility
	 of this method.</p>
	 
	 <p>The following table describes the output:</p>
	 
	 <adobetable class="innertable">
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	     
	 <tgroup cols="3"><thead><row><entry>Tag</entry><entry>Attribute</entry><entry>Description</entry></row></thead><tbody><row><entry><codeph>&lt;block&gt;</codeph></entry><entry> </entry><entry>TextBlock</entry></row><row><entry><codeph>&lt;line</codeph></entry><entry> </entry><entry>TextLine</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>start inline run element</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>limit inline run element</entry></row><row><entry><codeph>&gt;</codeph></entry><entry> </entry><entry>close of line tag</entry></row><row><entry><codeph>&lt;run</codeph></entry><entry> </entry><entry>the elements of a line</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>start inline run element</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>limit inline run element</entry></row><row><entry><codeph>&gt;</codeph></entry><entry> </entry><entry>close of run tag</entry></row><row><entry><codeph>&lt;inter</codeph></entry><entry> </entry><entry>inter element</entry></row><row><entry> </entry><entry><codeph>cursor=</codeph></entry><entry>character cursor (index into the original text)</entry></row><row><entry> </entry><entry><codeph>tcb=</codeph></entry><entry>typographic cluster boundary</entry></row><row><entry> </entry><entry><codeph>wb=</codeph></entry><entry>word boundary</entry></row><row><entry> </entry><entry><codeph>lbo=</codeph></entry><entry>line break opportunity</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>actual line break</entry></row><row><entry><codeph>/&gt;</codeph></entry><entry> </entry><entry>end of inter tag</entry></row><row><entry><codeph>&lt;char</codeph></entry><entry> </entry><entry>character element</entry></row><row><entry> </entry><entry><codeph>usv=</codeph></entry><entry>Unicode scalar value</entry></row><row><entry><codeph>/&gt;</codeph></entry><entry> </entry><entry>end of char tag</entry></row><row><entry><codeph>&lt;glyph</codeph></entry><entry> </entry><entry>computed glyph or shaped glyph element</entry></row><row><entry> </entry><entry><codeph>font=</codeph></entry><entry>font name</entry></row><row><entry> </entry><entry><codeph>gid=</codeph></entry><entry>glyph index</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>rotation</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>color</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry> </entry><entry><codeph>attached=</codeph></entry><entry>whether two elements are attached</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>internal typographic cluster boundary offsets</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>bidirectional level</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>spacing class</entry></row><row><entry><codeph>/&gt;</codeph></entry><entry> </entry><entry>end of glyph tag</entry></row><row><entry><codeph>&lt;fo</codeph></entry><entry> </entry><entry>graphic element</entry></row><row><entry> </entry><entry><codeph>id=</codeph></entry><entry>element id</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>rotation</entry></row><row><entry> </entry><entry><codeph>color=</codeph></entry><entry>color</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry> </entry><entry><codeph>lb=</codeph></entry><entry>left bound</entry></row><row><entry> </entry><entry><codeph>rb=</codeph></entry><entry>right bound</entry></row><row><entry> </entry><entry><codeph>tb=</codeph></entry><entry>top bound</entry></row><row><entry> </entry><entry><codeph>bb=</codeph></entry><entry>bottom bound</entry></row><row><entry> </entry><entry><codeph>itcbo=</codeph></entry><entry>internal typographic cluster boundary offsets</entry></row><row><entry> </entry><entry><codeph>bl=</codeph></entry><entry>bidirectional level</entry></row><row><entry> </entry><entry><codeph>sc=</codeph></entry><entry>spacing class</entry></row><row><entry><codeph>/&gt;</codeph></entry><entry> </entry><entry>end of fo tag</entry></row><row><entry><codeph>&lt;embeddedRun</codeph></entry><entry> </entry><entry>embedded run</entry></row><row><entry> </entry><entry><codeph>xa=</codeph></entry><entry>xAdvance</entry></row><row><entry> </entry><entry><codeph>ya=</codeph></entry><entry>yAdvance</entry></row><row><entry> </entry><entry><codeph>xp=</codeph></entry><entry>xPlacement</entry></row><row><entry> </entry><entry><codeph>yp=</codeph></entry><entry>yPlacement</entry></row><row><entry> </entry><entry><codeph>r=</codeph></entry><entry>rotation</entry></row><row><entry> </entry><entry><codeph>xP=</codeph></entry><entry>xPosition</entry></row><row><entry> </entry><entry><codeph>yP=</codeph></entry><entry>yPosition</entry></row><row><entry><codeph>&gt;</codeph></entry><entry> </entry><entry>close of embeddedRun tag</entry></row><row><entry><codeph>&lt;run&gt;</codeph></entry><entry> </entry><entry>run</entry></row><row><entry><codeph>&lt;/run&gt;</codeph></entry><entry> </entry><entry>ending run tag</entry></row><row><entry><codeph>&lt;/embeddedRun&gt;</codeph></entry><entry> </entry><entry>ending embeddedRun tag</entry></row><row><entry><codeph>&lt;carets</codeph></entry><entry> </entry><entry>the carets of a line</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>start inline run element</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>limit inline run element</entry></row><row><entry><codeph>&gt;</codeph></entry><entry> </entry><entry>close of carets tag</entry></row><row><entry><codeph>&lt;cursor&gt;</codeph></entry><entry> </entry><entry>cursor</entry></row><row><entry> </entry><entry><codeph>x=</codeph></entry><entry>left side x position</entry></row><row><entry><codeph>/&gt;</codeph></entry><entry> </entry><entry>end of cursor tag</entry></row><row><entry><codeph>&lt;cluster</codeph></entry><entry> </entry><entry>cluster</entry></row><row><entry> </entry><entry><codeph>c=</codeph></entry><entry>center position</entry></row><row><entry> </entry><entry><codeph>s=</codeph></entry><entry>start tc offset</entry></row><row><entry> </entry><entry><codeph>l=</codeph></entry><entry>limit tc offset</entry></row><row><entry> </entry><entry><codeph>bidi</codeph></entry><entry>bidirectional level</entry></row><row><entry><codeph>/&gt;</codeph></entry><entry> </entry><entry>end of cluster tag</entry></row><row><entry><codeph>&lt;/carets&gt;</codeph></entry><entry> </entry><entry>ending carets tag</entry></row><row><entry><codeph>&lt;/line&gt;</codeph></entry><entry> </entry><entry>ending line tag</entry></row><row><entry><codeph>&lt;/block&gt;</codeph></entry><entry> </entry><entry>ending block tag</entry></row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/dump()"><linktext>TextLine.dump()</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextAtomBoundary"><apiName>findNextAtomBoundary</apiName><shortdesc>
	 Finds the index of the next Atom boundary from the specified character index, not including the character at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>index</codeph> specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The TextLine to which the indexed character belongs is not valid.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The index of the next atom boundary from the specified character index.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Specifies the index of the character from which to search for the next atom boundary.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Finds the index of the next Atom boundary from the specified character index, not including the character at the specified index.
	 The characters between atom boundaries combine to form one atom in a <codeph>TextLine</codeph>, such as an 'e' and a combining acute accent.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findNextWordBoundary"><apiName>findNextWordBoundary</apiName><shortdesc>
	 Finds the index of the next word boundary from the specified character index, not including the character at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>index</codeph> specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The TextLine to which the indexed character belongs is not valid.
	 
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The index of the next word boundary from the specified character index.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>afterCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Specifies the index of the character from which to search for the next word boundary.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Finds the index of the next word boundary from the specified character index, not including the character at the specified index.
	 Word boundaries are determined based on the Unicode properties of the characters.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousAtomBoundary"><apiName>findPreviousAtomBoundary</apiName><shortdesc>
	 Finds the index of the previous atom boundary to the specified character index, not including the character at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>index</codeph> specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The TextLine to which the indexed character belongs is not valid.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The index of the previous atom boundary to the specified character index.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Specifies the index of the character from which to search for the previous atom boundary.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Finds the index of the previous atom boundary to the specified character index, not including the character at the specified index.
	 The characters between atom boundaries combine to form one atom in a <codeph>TextLine</codeph>, such as an 'e' and a combining acute accent.
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine/atomCount"><linktext>TextLine.atomCount</linktext></link></related-links></apiOperation><apiOperation id="flash.text.engine:TextBlock:findPreviousWordBoundary"><apiName>findPreviousWordBoundary</apiName><shortdesc>
	 Finds the index of the previous word boundary to the specified character index, not including the character at the specified index.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>index</codeph> specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiException><apiDesc>The TextLine to which the indexed character belongs is not valid.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException><apiReturn><apiDesc>The index of the previous word boundary to the specified character index.
	 
	 </apiDesc><apiOperationClassifier>int</apiOperationClassifier></apiReturn><apiParam><apiItemName>beforeCharIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>Specifies the index of the character from which to search for the previous word boundary.
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Finds the index of the previous word boundary to the specified character index, not including the character at the specified index.
	 Word boundaries are determined based on the Unicode properties of the characters.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:getTextLineAtCharIndex"><apiName>getTextLineAtCharIndex</apiName><shortdesc>
	 Returns the TextLine containing the character specified by the charIndex parameter.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>The character index specified is out of range.
	 </apiDesc><apiItemName>RangeError</apiItemName><apiOperationClassifier>RangeError</apiOperationClassifier></apiException><apiReturn><apiDesc>The TextLine containing the character at <codeph>charIndex</codeph>.
	 
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier></apiReturn><apiParam><apiItemName>charIndex</apiItemName><apiOperationClassifier>int</apiOperationClassifier><apiDesc>The zero-based index value of the character (for example, the first character is 0,
	 the second character is 1, and so on).
	 
	 </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Returns the TextLine containing the character specified by the <codeph>charIndex</codeph> parameter.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiOperation id="flash.text.engine:TextBlock:releaseLines"><apiName>releaseLines</apiName><shortdesc>
	 Removes a range of text lines from the list of lines maintained by the TextBlock.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiException><apiDesc>If the TextLine specified by <codeph>firstLine</codeph> or <codeph>lastLine</codeph> is not 
     in the list of text lines maintained by the text block.
     	 
     	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiReturn><apiType value="void"/></apiReturn><apiParam><apiItemName>firstLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>Specifies the first line to release.
	 </apiDesc></apiParam><apiParam><apiItemName>lastLine</apiItemName><apiOperationClassifier>flash.text.engine:TextLine</apiOperationClassifier><apiDesc>Specifies the last line to release.
     
     </apiDesc></apiParam></apiOperationDef><apiDesc>
	 Removes a range of text lines from the list of lines maintained by the TextBlock.
	 This allows the lines to be garbage-collected if no other references exist.
	 
	 <p>Sets the <codeph>textBlock</codeph>, <codeph>nextLine</codeph>, and <codeph>previousLine</codeph>
	 members of the removed lines to <codeph>null</codeph>.
	 Sets the <codeph>validity</codeph> of the removed lines and of all lines which follow
	 the removed lines in the TextBlock to <codeph>TextLineValidity.INVALID</codeph>.</p>
	 
	 </apiDesc></apiOperationDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiOperation><apiValue id="flash.text.engine:TextBlock:userData"><apiName>userData</apiName><shortdesc>
	 Provides a way for the author to associate arbitrary data with the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiType value=""/></apiValueDef><apiDesc>
	 Provides a way for the author to associate arbitrary data with the text block. The data could be information that refers to the content, 
	 such as a revision date or the name of the author, or it could be cached data that you use during processing.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:applyNonLinearFontScaling:get"><apiName>applyNonLinearFontScaling</apiName><shortdesc>
	 Specifies that you want to enhance screen appearance at the expense of what-you-see-is-what-you-get (WYSIWYG) print fidelity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
	 Specifies that you want to enhance screen appearance at the expense of what-you-see-is-what-you-get (WYSIWYG) print fidelity.
	 For platforms and fonts that support non linear scaling, setting this property to <codeph>true</codeph> enables the use of those metrics at some cost to
	 WYSIWYG print fidelity, particularly for small point sizes.
	 
	 <p>The default value is <codeph>true</codeph>.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontDescription:get"><apiName>baselineFontDescription</apiName><shortdesc>
	 The font used to determine the baselines for all the lines created from the block, independent of their content.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:FontDescription</apiValueClassifier></apiValueDef><apiDesc>
	 The font used to determine the baselines for all the lines created from the block, independent of their content.  Baselines depend on font and font size.
	 
	 <p>The default value is <codeph>null</codeph>.  When the baseline font is <codeph>null</codeph>, the baseline font size is ignored and 
	 the baseline for any given line is based on the font and size of the largest text in the line.  When you specify both 
	 <codeph>baselineFontDescription</codeph> and <codeph>baselineFontSize</codeph>, they determine the baselines for all the lines 
	 in the text block, independent of their content. This combination is most often useful in Asian typography.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontSize"><linktext>baselineFontSize</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineFontSize:get"><apiName>baselineFontSize</apiName><shortdesc>
	 The font size used to calculate the baselines for the lines created from the block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier><apiException><apiDesc>The <codeph>baselineFontSize</codeph> specified is less than 0.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The font size used to calculate the baselines for the lines created from the block.  Baselines depend on font and font size.
	 
	 <p>The default value is <codeph>12</codeph>.  When the baseline font is <codeph>null</codeph>, the baseline font size is ignored and 
	 the baseline for any given line is based on the font and size of the largest text in the line.</p>
     
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBlock/baselineFontDescription"><linktext>baselineFontDescription</linktext></link><link href="flash.text.engine.xml#FontDescription"><linktext>FontDescription</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:baselineZero:get"><apiName>baselineZero</apiName><shortdesc>
	 Specifies which baseline is at y=0 for lines created from this block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>TextBaseline</codeph>.
     
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies which baseline is at y=0 for lines created from this block.
	 Valid values for this property are found in the members of the 
	 <codeph>TextBaseline</codeph> class.
	 
	 <p>The default value is <codeph>TextBaseline.ROMAN</codeph>.</p>
	 
	 <p>To set values for this property, use the following string values:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextBaseline.ROMAN</codeph></entry>
	 	<entry>The roman baseline of the lines is at y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.ASCENT</codeph></entry>
	 	<entry>The ascent baseline of the lines is at y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.DESCENT</codeph></entry>
	 	<entry>The descent baseline of the lines is at y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_TOP</codeph></entry>
	 	<entry>The ideographic top baseline of the lines is at y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_CENTER</codeph></entry>
	 	<entry>The ideographic center baseline of the lines is at y=0.</entry>
	   </row><row>
	 	<entry><codeph>TextBaseline.IDEOGRAPHIC_BOTTOM</codeph></entry>
	 	<entry>The ideographic bottom baseline of the lines is at y=0.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextBaseline"><linktext>TextBaseline</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:bidiLevel:get"><apiName>bidiLevel</apiName><shortdesc>
	 Specifies the default bidirectional embedding level of the text in the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>int</apiValueClassifier><apiException><apiDesc>If set to a value which is less than 0.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies the default bidirectional embedding level of the text in the text block.
	 An even value means left-to-right and an odd value means right-to-left.  You can increment <codeph>bidiLevel</codeph> to  
	 indicate the number of levels by which particular text is embedded with respect to left-to-right 
	 and right-to-left.
	 
	 <p>The default value is 0.</p>
	 
	 <p>Modifying <codeph>bidiLevel</codeph> changes the validity of all previously broken lines to TextLineValidity.INVALID. After 
	 changing <codeph>bidiLevel</codeph>, the <codeph>firstInvalidLine</codeph> property equals the <codeph>firstLine</codeph> property, and you must 
	 rebreak all the lines in the TextBlock.</p>
	 
     </apiDesc><example conref="examples\TextBlock_bidiLevelExample.as"> This example shows the same text string (logical order: a, b, c, alef, bet, gimel)
 rendered first with <codeph>bidiLevel</codeph> even and second with <codeph>bidiLevel</codeph> odd.
<codeblock>

package {
    
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class TextBlock_bidiLevelExample extends Sprite {
        
        public function TextBlock_bidiLevelExample():void {             
            var fontSize:Number = 36;

            var format:ElementFormat = new ElementFormat();        
            format.fontDescription = new FontDescription("Adobe Hebrew");
            format.fontSize = fontSize;
            var y:Number = 0;
            var leading:Number = fontSize * 0.2;
            var text:String = "abc" + String.fromCharCode(0x05D0, 0x05D1, 0x05D2);

            var textBlock:TextBlock = new TextBlock();
            textBlock.content = new TextElement(text, format);
                        
            // bidiLevel even
            textBlock.bidiLevel = 0;
            var textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;
            textLine.y = y;
            y += textLine.descent;
            addChild(textLine);      
            
            // bidiLevel odd
            textBlock.content = new TextElement(text, format);
            textBlock.bidiLevel = 1;
            textLine = textBlock.createTextLine(null, 400);
            y += leading + textLine.ascent;          
            textLine.y = y;
            addChild(textLine);   
        }
    }
}
</codeblock></example></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextBlock:content:get"><apiName>content</apiName><shortdesc>
	 Holds the contents of the text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>If set to a value which is not a known subclass of <codeph>ContentElement</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>value</codeph> specified is already a member of a group.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Holds the contents of the text block. Because ContentElement is a base class, assign <codeph>content</codeph>
	 an instance of a ContentElement subclass: TextElement, GraphicElement, or GroupElement. A TextElement object 
	 contains a String, a GraphicElement object contains a DisplayObject, and a GroupElement contains a Vector object that 
	 contains one or more TextElement, GraphicElement, or other GroupElement objects. Use a TextElement for a 
	 paragraph of homogenous text, a GraphicElement for a graphic, and a GroupElement for a combination of text and graphic 
	 elements or multiples instances of these elements, as well as other GroupElement objects.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 <p>Modifying the <codeph>content</codeph> property changes the validity of all previously created lines to 
	 <codeph>TextLineValidity.INVALID</codeph>. After changing <codeph>content</codeph>, the <codeph>firstInvalidLine</codeph> property  
	 equals the <codeph>firstLine</codeph> property and you must rebreak all lines in the TextBlock.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GraphicElement"><linktext>GraphicElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextElement"><linktext>TextElement</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstInvalidLine:get"><apiName>firstInvalidLine</apiName><shortdesc>
	 Identifies the first line in the text block in which TextLine.validity is not equal to 
	 TextLineValidity.VALID.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 Identifies the first line in the text block in which <codeph>TextLine.validity</codeph> is not equal to 
	 <codeph>TextLineValidity.VALID</codeph>.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine/validity"><linktext>TextLine.validity</linktext></link><link href="flash.text.engine.xml#TextLineValidity"><linktext>TextLineValidity</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:firstLine:get"><apiName>firstLine</apiName><shortdesc>
	 The first TextLine in the TextBlock, if any.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 The first TextLine in the TextBlock, if any.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lastLine:get"><apiName>lastLine</apiName><shortdesc>
	 The last TextLine in the TextBlock, if any.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 The last TextLine in the TextBlock, if any.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:lineRotation:get"><apiName>lineRotation</apiName><shortdesc>
	 Rotates the text lines in the text block as a unit.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>String</apiValueClassifier><apiException><apiDesc>If set to any value which is not a member of <codeph>TextRotation</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>If set to <codeph>TextRotation.AUTO</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Rotates the text lines in the text block as a unit. Call the <codeph>createTextLine()</codeph> method <i>after</i>
	 setting <codeph>lineRotation</codeph> for it to take effect. The default value is <codeph>TextRotation.ROTATE_0</codeph>.
	 
	 <p>The final rotation of any glyph depends on the values of 
	 <codeph>ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph>, and <codeph>TextBlock.lineRotation</codeph>.</p>
	 
	 <p><codeph>TextBlock.lineRotation</codeph> is typically used for Asian text.
     To create a paragraph of vertical Japanese text, do the following:</p>
     <ol>
     <li>Set the <codeph>TextBlock.lineRotation</codeph> property to <codeph>TextRotation.ROTATE_90</codeph>.</li>
     <li>Leave the <codeph>ElementFormat.textRotation</codeph> property of the content as the default, <codeph>TextRotation.AUTO</codeph>.</li>
     </ol>
	 
	 <p>Use the following constants, which are defined in the <codeph>TextRotation</codeph> class, to set the 
	 value for this property:</p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextRotation.ROTATE_0</codeph></entry>
	 	<entry>Lines are not rotated.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_90</codeph></entry>
	 	<entry>Lines are rotated 90 degrees clockwise.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_180</codeph></entry>
	 	<entry>Lines are rotated 180 degrees.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.ROTATE_270</codeph></entry>
	 	<entry>Lines are rotated 270 degrees clockwise.</entry>
	   </row><row>
	 	<entry><codeph>TextRotation.AUTO</codeph></entry>
	 	<entry>Not supported.</entry>
	   </row></tbody></tgroup></adobetable>
	 
	 </apiDesc><example conref="examples\TextBlock_lineRotationExample.as"> This example adds Japanese text to a TextBlock and sets the 
 <codeph>lineRotation</codeph> property to TextRotation.ROTATE_90 to display the line 
 vertically. 
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.FontDescription;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextRotation;
    import flash.text.engine.ElementFormat;
    
    public class TextBlock_lineRotationExample extends Sprite {
        
        public function TextBlock_lineRotationExample():void {
            var Japanese:String = String.fromCharCode(
                0x5185, 0x95A3, 0x5E9C, 0x304C, 0x300C, 0x653F, 0x5E9C, 0x30A4,
                0x30F3, 0x30BF, 0x30FC, 0x30CD, 0x30C3, 0x30C8, 0x30C6, 0x30EC, 
                0x30D3, 0x300D, 0x306E, 0x52D5, 0x753B, 0x914D, 0x4FE1, 0x5411, 
                0x3051, 0x306B, 0x30A2, 0x30C9, 0x30D3, 0x30B7, 0x30B9, 0x30C6, 
                0x30E0, 0x30BA, 0x793E, 0x306E
            ) +
            "FMS 2" +
            String.fromCharCode(0x3092, 0x63A1, 0x7528, 0x3059, 0x308B, 0x3068, 
                0x767a, 0x8868, 0x3057, 0x307e, 0x3057, 0x305F, 0x3002);

            var fontDescription:FontDescription = new FontDescription("MS Mincho");
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 15;
            format.fontDescription = fontDescription;
                        
            var textElement:TextElement = new TextElement(Japanese, format); 
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.lineRotation = TextRotation.ROTATE_90;

            var linePosition:Number = this.stage.stageWidth - 120;
            var previousLine:TextLine = null;
        
            while (true) {
                var textLine:TextLine = textBlock.createTextLine(
                    previousLine, 
                    300);
                if (textLine == null) 
                    break;
                textLine.y = 30;    
                textLine.x = linePosition;
                linePosition -= 24;
                addChild(textLine);                
                previousLine = textLine;
            }        
        }
    }
}
</codeblock></example></apiValueDetail><related-links><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#TextLine"><linktext>TextLine</linktext></link><link href="flash.text.engine.xml#TextRotation"><linktext>TextRotation</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:tabStops:get"><apiName>tabStops</apiName><shortdesc>
	 Specifies the tab stops for the text in the text block, 
	 in the form of a Vector of TabStop objects.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiType value="Vector$flash.text.engine:TabStop"/><apiException><apiDesc>The <codeph>tabStops</codeph> specified contain <codeph>null</codeph> elements.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>tabStops</codeph> specified are not sorted by increasing position.
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies the tab stops for the text in the text block, 
	 in the form of a Vector of <codeph>TabStop</codeph> objects.
	 
	 <p>The default value is <codeph>null</codeph>, which means no tab stops are enabled. When no tab stops are set, the tab character (\t)
	 causes a new line.</p>
	 
	 <p>When the <codeph>tabStops</codeph> property is set, the TextBlock makes a copy of the Vector for internal use.  
	 Modifying the original Vector or its contents does not affect the TextBlock.  When the <codeph>tabStops</codeph> property is queried, a copy 
	 of the internal Vector is returned.  Again, modifying this returned vector or its contents does not affect the TextBlock.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TabStop"><linktext>TabStop</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textJustifier:get"><apiName>textJustifier</apiName><shortdesc>
	 Specifies the TextJustifier to use during line creation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.text.engine:TextJustifier</apiValueClassifier><apiException><apiDesc>If set to a value which is not a known subclass of <codeph>TextJustifier</codeph>.
	 
	 </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 Specifies the TextJustifier to use during line creation.
	 
	 <p>The default value is a constructed default TextJustifier object.</p>
	 
	 <p>When the <codeph>textJustifier</codeph> property is set, the TextBlock makes a copy of the object for internal use.  
	 Modifying the original object does not affect the TextBlock.  When the <codeph>textJustifier</codeph> property is queried, a copy 
	 of the internal object is returned.  Again, modifying this returned object does not affect the TextBlock.</p>
	 
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier"><linktext>EastAsianJustifier</linktext></link><link href="flash.text.engine.xml#SpaceJustifier"><linktext>SpaceJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBlock:textLineCreationResult:get"><apiName>textLineCreationResult</apiName><shortdesc>
	 Indicates the result of a createTextLine() operation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	 Indicates the result of a <codeph>createTextLine()</codeph> operation.  
	 Changing the content of the block invalidates previously broken lines and resets
	 this property to <codeph>null</codeph>.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 <p>Values for this property are found in <codeph>TextLineCreationResult</codeph></p>
	 
	 <adobetable class="innertable">
	   
	   
	   
	   
	 <tgroup cols="2"><thead><row><entry>String value</entry><entry>Description</entry></row></thead><tbody><row>
	 	<entry><codeph>TextLineCreationResult.SUCCESS</codeph></entry>
	 	<entry>The line was successfully broken.</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.COMPLETE</codeph></entry>
	 	<entry>Either the new line created aligned perfectly with following lines which 
	 	have transitioned from POSSIBLY_INVALID to VALID, or 
	 	no line was created because all text in the block had already been broken.</entry>
	   </row><row>
	 	<entry><codeph>TextLineCreationResult.INSUFFICIENT_WIDTH</codeph></entry>
	 	<entry>No line was created because no text could fit in the specified width.</entry>
	   </row></tbody></tgroup></adobetable>
	 </apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#TextLineCreationResult"><linktext>TextLineCreationResult</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineCreationResult"><apiName>TextLineCreationResult</apiName><shortdesc>
The TextLineCreationResult class is an enumeration of constant values used with TextBlock.textLineCreationResult.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The TextLineCreationResult class is an enumeration of constant values used with <codeph>TextBlock.textLineCreationResult</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextBlock/textLineCreationResult"><linktext>TextBlock.textLineCreationResult</linktext></link></related-links><apiValue id="flash.text.engine:TextLineCreationResult:COMPLETE"><apiName>COMPLETE</apiName><shortdesc> 
	Indicates no line was created because all text in the block had already been broken.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>complete</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indicates no line was created because all text in the block had already been broken.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:EMERGENCY"><apiName>EMERGENCY</apiName><shortdesc> 
	Indicates the line was created with an emergency break because no break opportunity
	was available in the specified width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>emergency</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indicates the line was created with an emergency break because no break opportunity
	was available in the specified width.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:INSUFFICIENT_WIDTH"><apiName>INSUFFICIENT_WIDTH</apiName><shortdesc> 
	Indicates no line was created because no text could fit in the specified width
	and fitSomething was not specified in the call to createTextLine().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>insufficientWidth</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indicates no line was created because no text could fit in the specified width
	and <codeph>fitSomething</codeph> was not specified in the call to <codeph>createTextLine()</codeph>.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineCreationResult:SUCCESS"><apiName>SUCCESS</apiName><shortdesc> 
	Indicates the line was successfully broken.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>success</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Indicates the line was successfully broken.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LigatureLevel"><apiName>LigatureLevel</apiName><shortdesc>
The LigatureLevel class is an enumeration of constant values used in setting the ligatureLevel property 
of the ElementFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The LigatureLevel class is an enumeration of constant values used in setting the <codeph>ligatureLevel</codeph> property 
of the ElementFormat class. A ligature occurs where two or more letter-forms are joined as a single glyph. Ligatures 
usually replace consecutive characters sharing common components, such as the letter pairs 'fi', 'fl', or 'ae'.
They are used with both Latin and Non-Latin character sets.
<p><b>Note:</b> When working with Arabic or Syriac fonts, <codeph>ligatureLevel</codeph> must be set to MINIMUM or above.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/ligatureLevel"><linktext>flash.text.engine.ElementFormat.ligatureLevel</linktext></link></related-links><apiValue id="flash.text.engine:LigatureLevel:COMMON"><apiName>COMMON</apiName><shortdesc> 
	Used to specify common ligatures.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>common</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify common ligatures.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:EXOTIC"><apiName>EXOTIC</apiName><shortdesc> 
	Used to specify exotic ligatures.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>exotic</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify exotic ligatures.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:MINIMUM"><apiName>MINIMUM</apiName><shortdesc> 
	Used to specify minimum ligatures.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>minimum</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify minimum ligatures.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:NONE"><apiName>NONE</apiName><shortdesc> 
	Used to specify no ligatures.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify no ligatures.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LigatureLevel:UNCOMMON"><apiName>UNCOMMON</apiName><shortdesc> 
	Used to specify uncommon ligatures.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>uncommon</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify uncommon ligatures.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextRotation"><apiName>TextRotation</apiName><shortdesc>
The TextRotation class is an enumeration of constant values used with the following properties:
ElementFormat.textRotation, ContentElement.textRotation,
TextBlock.lineRotation, and TextLine.getAtomTextRotation().</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The TextRotation class is an enumeration of constant values used with the following properties:
<codeph>ElementFormat.textRotation</codeph>, <codeph>ContentElement.textRotation</codeph>,
<codeph>TextBlock.lineRotation</codeph>, and <codeph>TextLine.getAtomTextRotation()</codeph>. 

<p>The final rotation of any glyph is the sum of <codeph>TextBlock.lineRotation</codeph>,
<codeph>ElementFormat.textRotation</codeph>, and <codeph>ContentElement.textRotation</codeph></p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/textRotation"><linktext>ElementFormat.textRotation</linktext></link><link href="flash.text.engine.xml#ContentElement/textRotation"><linktext>ContentElement.textRotation</linktext></link><link href="flash.text.engine.xml#TextBlock/lineRotation"><linktext>TextBlock.lineRotation</linktext></link><link href="flash.text.engine.xml#TextLine/getAtomTextRotation()"><linktext>TextLine.getAtomTextRotation()</linktext></link></related-links><apiValue id="flash.text.engine:TextRotation:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Specifies a 90 degree counter clockwise rotation for full width and wide glyphs only,
	as determined by the Unicode properties of the glyph.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies a 90 degree counter clockwise rotation for full width and wide glyphs only,
	as determined by the Unicode properties of the glyph.
	This value is typically used with Asian text to rotate
	only those glyphs that require rotation.
	This rotation is applied only in vertical text to return full width and wide 
	characters to a vertical orientation without affecting other characters.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_0"><apiName>ROTATE_0</apiName><shortdesc> 
	Specifies no rotation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate0</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies no rotation.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_180"><apiName>ROTATE_180</apiName><shortdesc> 
	Specifies a 180 degree rotation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate180</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies a 180 degree rotation.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_270"><apiName>ROTATE_270</apiName><shortdesc> 
	Specifies a 270 degree clockwise rotation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate270</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies a 270 degree clockwise rotation.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextRotation:ROTATE_90"><apiName>ROTATE_90</apiName><shortdesc> 
	Specifies a 90 degree clockwise rotation.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>rotate90</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies a 90 degree clockwise rotation.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TabAlignment"><apiName>TabAlignment</apiName><shortdesc>
The TabAlignment class is an enumeration of constant values that you can use to set the tabAlignment property 
of the TabStop class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The TabAlignment class is an enumeration of constant values that you can use to set the <codeph>tabAlignment</codeph> property 
of the <codeph>TabStop</codeph> class. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#TabStop/tabAlignment"><linktext>TabStop.tabAlignment</linktext></link><link href="flash.text.engine.xml#TextBlock/tabStop"><linktext>TextBlock.tabStop</linktext></link></related-links><apiValue id="flash.text.engine:TabAlignment:CENTER"><apiName>CENTER</apiName><shortdesc> 
	Positions the center of the tabbed text at the tab stop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>center</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positions the center of the tabbed text at the tab stop.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:DECIMAL"><apiName>DECIMAL</apiName><shortdesc> 
	Positions the alignment token of the tabbed text at the tab stop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>decimal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positions the alignment token of the tabbed text at the tab stop.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:END"><apiName>END</apiName><shortdesc> 
	Positions the end of the tabbed text at the tab stop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>end</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positions the end of the tabbed text at the tab stop.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TabAlignment:START"><apiName>START</apiName><shortdesc> 
	Positions the start of the tabbed text at the tab stop.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>start</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Positions the start of the tabbed text at the tab stop.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
 The GraphicElement class represents a graphic element in a TextBlock or GroupElement object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:ContentElement</apiBaseClassifier></apiClassifierDef><apiDesc>
 The GraphicElement class represents a graphic element in a TextBlock or GroupElement object. Assign a GraphicElement object to the 
 <codeph>content</codeph> property of a TextBlock object to display a graphic or an image with <codeph>TextBlock.createTextLine()</codeph>.  
 Assign it to a GroupElement object to combine it with other graphic and text elements.
 
 </apiDesc><example conref="examples\GraphicElementExample.as"> The following example creates a TextBlock with a GraphicElement (a red box) and
 displays it, adding a second TextBlock beneath it that contains a caption.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.display.MovieClip;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.GraphicElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    
    public class GraphicElementExample extends Sprite {
        
        public function GraphicElementExample():void {
            
            var format:ElementFormat = new ElementFormat();
            format.fontSize = 14;
            var redBox:MovieClip = new MovieClip();
            redBox.graphics.beginFill(0xCC0000, 1.0);
            redBox.graphics.drawRect(0,0, 200, 200);
            redBox.graphics.endFill();   
            var graphicElement:GraphicElement = new GraphicElement(redBox,redBox.width,redBox.height, format);
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = graphicElement;
            var textLine1:TextLine = textBlock.createTextLine(null,redBox.width);
            addChild(textLine1);
            textLine1.x = 15
            textLine1.y = 215
            var str:String = "Your picture here ...";
            var textElement:TextElement = new TextElement(str, format);
            textBlock = new TextBlock();
            textBlock.content = textElement;
            var textLine2 = textBlock.createTextLine(null, 300);
            addChild(textLine2);
            textLine2.x = textLine1.x;
            textLine2.y += textLine1.y + format.fontSize;        
        }
    }    
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement"><linktext>ContentElement</linktext></link><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link><link href="flash.text.engine.xml#TextBlock"><linktext>TextBlock</linktext></link></related-links><apiConstructor id="flash.text.engine:GraphicElement:GraphicElement"><apiName>GraphicElement</apiName><shortdesc>
	 Creates a new GraphicElement instance.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiParam><apiItemName>graphic</apiItemName><apiOperationClassifier>flash.display:DisplayObject</apiOperationClassifier><apiData>null</apiData><apiDesc>The DisplayObject to populate the GraphicElement.  The default value is <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>elementWidth</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>The width of the area reserved for the element in pixels.  The default value is 15.
	 </apiDesc></apiParam><apiParam><apiItemName>elementHeight</apiItemName><apiOperationClassifier>Number</apiOperationClassifier><apiData>15.0</apiData><apiDesc>The height of the area reserved for the element in pixels.  The default value is 15.
	 </apiDesc></apiParam><apiParam><apiItemName>elementFormat</apiItemName><apiOperationClassifier>flash.text.engine:ElementFormat</apiOperationClassifier><apiData>null</apiData><apiDesc>The element format for the element.  The default value is <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>eventMirror</apiItemName><apiOperationClassifier>flash.events:EventDispatcher</apiOperationClassifier><apiData>null</apiData><apiDesc>The <codeph>EventDispatcher</codeph> object that receives copies of every
	 event dispatched to text lines created based on this content element.  The default value is <codeph>null</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>textRotation</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>rotate0</apiData><apiDesc>The rotation applied to the element as a unit. Use <codeph>flash.text.engine.TextRotation</codeph>
	 constants for this property.  The default value is <codeph>flash.text.engine.TextRotation.ROTATE_0</codeph>.
   	 </apiDesc></apiParam></apiConstructorDef><apiDesc>
	 Creates a new GraphicElement instance.
	 
	 <p>The registration point of the graphic aligns with the upper-left corner
	 of the region defined by <codeph>elementHeight</codeph>, <codeph>elementWidth</codeph>
	 and <codeph>elementFormat.baselineShift</codeph>.  The graphic is not scaled to match the size of the region.
	 If the GraphicElement has an <codeph>eventMirror</codeph>, the <codeph>elementWidth</codeph> and <codeph>elementHeight</codeph>
	 properties, and not the graphic, determine the size and position of the resulting mirror region.  If a loader
	 is used, the graphic might not be loaded at the time the text line and the mirror regions are created.</p>
	 
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#GroupElement"><linktext>GroupElement</linktext></link></related-links></apiConstructor><apiValue id="flash.text.engine:GraphicElement:elementHeight:get"><apiName>elementHeight</apiName><shortdesc>
	 The height in pixels to reserve for the graphic in the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The height in pixels to reserve for the graphic in the line.  
	 It is the responsibility of the caller to scale the graphic.
	 
	 <p>The default value is 15.0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:elementWidth:get"><apiName>elementWidth</apiName><shortdesc>
	 The width in pixels to reserve for the graphic in the line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Number</apiValueClassifier></apiValueDef><apiDesc>
	 The width in pixels to reserve for the graphic in the line.  
	 It is the responsibility of the caller to scale the graphic.
	 
	 <p>The default value is 15.0.</p>
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:GraphicElement:graphic:get"><apiName>graphic</apiName><shortdesc>
	 The DisplayObject to be used as a graphic for the GraphicElement.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>flash.display:DisplayObject</apiValueClassifier></apiValueDef><apiDesc>
	 The DisplayObject to be used as a graphic for the GraphicElement.
	 
	 <p>The default value is <codeph>null</codeph>.</p>
	 
	 <p>When the GraphicElement becomes part of a text line, the graphic
	 is added as a child of the line.  Setting the graphic removes
	 the old graphic from the line and adds the new one.</p>
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:FontWeight"><apiName>FontWeight</apiName><shortdesc>
The FontWeight class is an enumeration of constant values used with FontDescription.fontWeight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The FontWeight class is an enumeration of constant values used with <codeph>FontDescription.fontWeight</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription/fontWeight"><linktext>flash.text.engine.FontDescription.fontWeight</linktext></link></related-links><apiValue id="flash.text.engine:FontWeight:BOLD"><apiName>BOLD</apiName><shortdesc> 
	Used to indicate bold font weight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>bold</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to indicate bold font weight.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:FontWeight:NORMAL"><apiName>NORMAL</apiName><shortdesc> 
	Used to indicate normal font weight.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>normal</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to indicate normal font weight.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextBaseline"><apiName>TextBaseline</apiName><shortdesc>
The TextBaseline class is an enumeration of constant values to use in setting the dominantBaseline and
alignmentBaseline properties of the ElementFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The TextBaseline class is an enumeration of constant values to use in setting the <codeph>dominantBaseline</codeph> and
<codeph>alignmentBaseline</codeph> properties of the ElementFormat class.  You can also use it in the 
<codeph>baselineZero</codeph> property of the TextBlock class.
Consider this situation:
<p><adobeimage alt="Text baseline alignment" href="../../../images/textBaselines.gif"/></p>
<p>The line consists of four <codeph>TextElement</codeph> objects, containing 'a', 'b', 'cccccccc', and 'X' respectively.
The element containing 'X' determines the line baselines because it is the largest element in the line.
The roman baseline of the 'X' element is aligned with the roman baseline of the line.
The ideographic top of the 'a' element is aligned with the ideographic top of the line.
The ideographic bottom of the 'b' element is aligned with the ideographic bottom of the line.
The ideographic center of the 'cccccccc' element is aligned with the ideographic center of the line.</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links><apiValue id="flash.text.engine:TextBaseline:ASCENT"><apiName>ASCENT</apiName><shortdesc> 
	Specifies an ascent baseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ascent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies an ascent baseline.
	For a text element, the font and point size of the text determine this value.
	For a graphic element, the text engine uses the geometric top of the element.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:DESCENT"><apiName>DESCENT</apiName><shortdesc> 
	Specifies a descent baseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>descent</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies a descent baseline.
	For a text element, the font and point size of the text determine this value.
	For a graphic element, the text element uses the geometric bottom of the element.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_BOTTOM"><apiName>IDEOGRAPHIC_BOTTOM</apiName><shortdesc> 
	Specifies an ideographic bottom baseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicBottom</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies an ideographic bottom baseline.
	For a text element, the font and point size of the text determine this value.
	For a graphic element, the text engine uses the geometric bottom of the element.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_CENTER"><apiName>IDEOGRAPHIC_CENTER</apiName><shortdesc> 
	Specifies an ideographic center baseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicCenter</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies an ideographic center baseline.
	For a text element, the font and point size of the text determine this value.
	For a graphic element, the text engine uses the geometric center of the element.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:IDEOGRAPHIC_TOP"><apiName>IDEOGRAPHIC_TOP</apiName><shortdesc> 
	Specifies an ideographic top baseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>ideographicTop</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies an ideographic top baseline.
	For a text element, the font and point size of the text determine this value.
	For a graphic element, the text engine uses the geometric top of the element.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:ROMAN"><apiName>ROMAN</apiName><shortdesc> 
	Specifies a roman baseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>roman</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies a roman baseline.  
	For a text element, the font and point size of the text determine this value.
	For a graphic element, the text engine uses the geometric bottom of the element.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/dominantBaseline"><linktext>ElementFormat.dominantBaseline</linktext></link><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link><link href="flash.text.engine.xml#TextBlock/baselineZero"><linktext>TextBlock.baselineZero</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:TextBaseline:USE_DOMINANT_BASELINE"><apiName>USE_DOMINANT_BASELINE</apiName><shortdesc> 
	Specifies that the alignmentBaseline is the same as the dominantBaseline.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>useDominantBaseline</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Specifies that the alignmentBaseline is the same as the dominantBaseline.
	Use this value only to set <codeph>ElementFormat.alignmentBaseline</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#ElementFormat/alignmentBaseline"><linktext>ElementFormat.alignmentBaseline</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:BreakOpportunity"><apiName>BreakOpportunity</apiName><shortdesc>
The BreakOpportunity class is an enumeration of constant values that you can use to set the breakOpportunity property 
of the ElementFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The BreakOpportunity class is an enumeration of constant values that you can use to set the <codeph>breakOpportunity</codeph> property 
of the ElementFormat class. 
This property determines which characters can be used for breaking when wrapping text is broken into multiple lines.


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/breakOpportunity"><linktext>ElementFormat.breakOpportunity</linktext></link></related-links><apiValue id="flash.text.engine:BreakOpportunity:ALL"><apiName>ALL</apiName><shortdesc> 
	Treats all characters in the ContentElement object as mandatory line break opportunities.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>all</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Treats all characters in the ContentElement object as mandatory line break opportunities.
	You can use this option to generate the shortest possible lines, 
	which you can use to create text on a line or similar effects.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:ANY"><apiName>ANY</apiName><shortdesc> 
	Treats any character in the ContentElement object as a line break opportunity.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>any</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Treats any character in the ContentElement object as a line break opportunity.
	This value is typically used when Roman text is embedded in Asian text and it is desirable for breaks to happen
	in the middle of words.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:BreakOpportunity:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Bases line break opportunities on Unicode character properties.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Bases line break opportunities on Unicode character properties. This setting implements 
	the Unicode line breaking properties defined by the Unicode Standard Annex #14. 
	</apiDesc></apiValueDetail><related-links><link href="http://unicode.org/reports/tr14/tr14-12.html"><linktext>Article on Unicode line breaking properties.</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:BreakOpportunity:NONE"><apiName>NONE</apiName><shortdesc> 
	Treats no characters in the ContentElement object as line break opportunities.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Treats no characters in the ContentElement object as line break opportunities.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:DigitWidth"><apiName>DigitWidth</apiName><shortdesc>
The DigitWidth class is an enumeration of constant values used in setting the digitWidth property 
of the ElementFormat class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The DigitWidth class is an enumeration of constant values used in setting the <codeph>digitWidth</codeph> property 
of the ElementFormat class. 


</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/digitWidth"><linktext>flash.text.engine.ElementFormat.digitWidth</linktext></link></related-links><apiValue id="flash.text.engine:DigitWidth:DEFAULT"><apiName>DEFAULT</apiName><shortdesc> 
	Used to specify default digit width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>default</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify default digit width. The results are font-dependent; characters use the settings specified by the font designer
	without any features applied.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:PROPORTIONAL"><apiName>PROPORTIONAL</apiName><shortdesc> 
	Used to specify proportional digit width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>proportional</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify proportional digit width.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:DigitWidth:TABULAR"><apiName>TABULAR</apiName><shortdesc> 
	Used to specify tabular digit width.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>tabular</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to specify tabular digit width.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:Kerning"><apiName>Kerning</apiName><shortdesc>
The Kerning class is an enumeration of constant values used with ElementFormat.kerning.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The Kerning class is an enumeration of constant values used with <codeph>ElementFormat.kerning</codeph>. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ElementFormat/kerning"><linktext>flash.text.engine.ElementFormat.kerning</linktext></link></related-links><apiValue id="flash.text.engine:Kerning:AUTO"><apiName>AUTO</apiName><shortdesc> 
	Used to indicate kerning is enabled only for characters appropriate in Asian typography.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>auto</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to indicate kerning is enabled only for characters appropriate in Asian typography.
	Kerning is applied between two characters if neither is Kanji, Hiragana, or Katakana.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:OFF"><apiName>OFF</apiName><shortdesc> 
	Used to indicate kerning is disabled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>off</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to indicate kerning is disabled.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:Kerning:ON"><apiName>ON</apiName><shortdesc> 
	Used to indicate kerning is enabled.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>on</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Used to indicate kerning is enabled.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:CFFHinting"><apiName>CFFHinting</apiName><shortdesc>
The CFFHinting class defines values for cff hinting in the FontDescription class.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The CFFHinting class defines values for cff hinting in the FontDescription class.

<p>Hinting adjusts the display of an outline font so it lines up with the pixel grid. 
At small screen sizes, hinting produces a clear, legible text for human readers.
</p>

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#FontDescription"><linktext>flash.text.engine.FontDescription</linktext></link></related-links><apiValue id="flash.text.engine:CFFHinting:HORIZONTAL_STEM"><apiName>HORIZONTAL_STEM</apiName><shortdesc>
	Fits strong horizontal stems to the pixel grid for improved readability.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>horizontalStem</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc>
	Fits strong horizontal stems to the pixel grid for improved readability.
	This constant is used in setting the <codeph>cffHinting</codeph> property of the 
	FontDescription class. 
	Use the syntax <codeph>CFFHinting.HORIZONTAL_STEM</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue><apiValue id="flash.text.engine:CFFHinting:NONE"><apiName>NONE</apiName><shortdesc> 
	No hinting is applied.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>none</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	No hinting is applied. Horizontal stems in the glyphs are not forced to the pixel grid. 
	This constant is used in setting the <codeph>cffHinting</codeph> property of the 
	FontDescription class. Recommended setting for animation or for large font sizes.
	Use the syntax <codeph>CFFHinting.NONE</codeph>.
	
	</apiDesc></apiValueDetail><related-links><link href="flash.text.engine.xml#FontDescription/cffHinting"><linktext>flash.text.engine.FontDescription.cffHinting</linktext></link></related-links></apiValue></apiClassifier><apiClassifier id="flash.text.engine:TextLineMirrorRegion"><apiName>TextLineMirrorRegion</apiName><shortdesc>
 The TextLineMirrorRegion class represents a portion of a text line wherein events are mirrored to another event dispatcher.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
 The TextLineMirrorRegion class represents a portion of a text line wherein events are mirrored to another event dispatcher.
 
 <p>After normal event-dispatching for a text line finishes, if the line is valid and event propagation has not been stoped, 
 events are re dispatched to the mirror regions of the line.</p>
 
 <p>Mirroring of mouse events is a special case.  Because mirror regions aren't actually display objects, <codeph>mouseOver</codeph> and <codeph>mouseOut</codeph>
 events are simulated for them.  <codeph>rollOver</codeph> and <codeph>rollOut</codeph> events are not simulated.  All naturally occuring 
 <codeph>mouseOver</codeph>, <codeph>mouseOut</codeph>, <codeph>rollOver</codeph> and <codeph>rollOut</codeph> events (whether targetted at the 
 text line or at children of the text line) are ignored - they are not mirrored.</p>
 
 <p>You cannot create a TextLineMirrorRegion object directly from ActionScript code. 
 If you call <codeph>new TextLineMirrorRegion()</codeph>, an exception is thrown. You create a TextLineMirrorRegion when you assign
 an event mirror to a ContentElement object.</p>
 
 <p>The TextLineMirrorRegion class is final; it cannot be subclassed.</p>
 
 </apiDesc><example conref="examples\TextLineMirrorRegionExample.as"> This example displays a block of text with mirror regions that turn red when you click
 them.
<codeblock>

package {

    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextLine;
    import flash.text.engine.TextElement;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.FontDescription;
    import flash.text.engine.ContentElement;
    import flash.text.engine.GroupElement;
    import flash.text.engine.TextLineMirrorRegion;
    import flash.events.MouseEvent;
    import flash.events.EventDispatcher;
    import flash.ui.Mouse;

    public class TextLineMirrorRegionExample extends Sprite {
        
        var myEvent:EventDispatcher = new EventDispatcher();
        var fontDescription:FontDescription = new FontDescription();
        var textBlock:TextBlock = new TextBlock();

        public function TextLineMirrorRegionExample():void {
            
            fontDescription.fontWeight = "bold";
            var blackFormat:ElementFormat = new ElementFormat();
            blackFormat.fontSize = 18;
            blackFormat.color = 0x000000;
            blackFormat.fontDescription = fontDescription;
            
            var textElement1 = new TextElement("Click on different parts of me to find the ", blackFormat);
            var textElement2 = new TextElement("mirror regions",blackFormat);
            var textElement3 = new TextElement(". If I am a mirror region, I'll ",blackFormat);
            var textElement4 = new TextElement("turn red",blackFormat);
            var textElement5 = new TextElement(".",blackFormat);
            
            myEvent.addEventListener("click", clickHandler);
            myEvent.addEventListener("mouseOut", mouseOutHandler);
            myEvent.addEventListener("mouseOver", mouseOverHandler);
            
            var groupVector:Vector.&lt;ContentElement&gt; = new Vector.&lt;ContentElement&gt;;
            groupVector.push(textElement1, textElement2, textElement3, textElement4, textElement5);
            var groupElement:GroupElement = new GroupElement(groupVector);
            
            textElement2.eventMirror=myEvent;
            textElement4.eventMirror=myEvent;
            
            textBlock.content = groupElement;
            createLines(textBlock);
        }
    
        private function clickHandler(event:MouseEvent):void
        {
            var redFormat:ElementFormat = new ElementFormat();
            redFormat.color = 0xCC0000;
            redFormat.fontSize = 18;
            redFormat.fontDescription = fontDescription;
            var line:TextLine = event.target as TextLine;
            var region:TextLineMirrorRegion = line.getMirrorRegion(myEvent);
            region.element.elementFormat = redFormat;
            createLines(textBlock);
        }
        
        private function mouseOverHandler(event:MouseEvent):void
        {
            Mouse.cursor = "button";
        }
        
        private function mouseOutHandler(event:MouseEvent):void
        {
            Mouse.cursor = "arrow";
        }
            
        private function createLines(textBlock:TextBlock):void 
        {
            var purgeLine:TextLine = textBlock.firstLine;
                
            while (purgeLine)
            {
                removeChild (purgeLine);
                purgeLine = purgeLine.nextLine;
            }
            var lineWidth:Number = 150;
            var xPos:Number = 15.0;
            var yPos:Number = 20.0;
            var textLine:TextLine = textBlock.createTextLine (null, lineWidth);
                
            while (textLine)
            {
                textLine.x = xPos;
                textLine.y = yPos;
                yPos += textLine.height + 2;
                addChild (textLine);
                textLine = textBlock.createTextLine (textLine, lineWidth);
            }
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#ContentElement/eventMirror"><linktext>ContentElement.eventMirror</linktext></link><link href="flash.text.engine.xml#TextBlock/createTextLine()"><linktext>TextBlock.createTextLine()</linktext></link><link href="flash.text.engine.xml#TextLine/mirrorRegions"><linktext>TextLine.mirrorRegions</linktext></link></related-links><apiValue id="flash.text.engine:TextLineMirrorRegion:bounds:get"><apiName>bounds</apiName><shortdesc>
	 The bounds of the mirror region, relative to the text line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.geom:Rectangle</apiValueClassifier></apiValueDef><apiDesc>
	 The bounds of the mirror region, relative to the text line.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:element:get"><apiName>element</apiName><shortdesc>
	 The ContentElement object from which the mirror region was derived.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:ContentElement</apiValueClassifier><apiException><apiDesc>The TextLine to which this element belongs is not valid.
	 </apiDesc><apiItemName>IllegalOperationError</apiItemName><apiOperationClassifier>flash.errors:IllegalOperationError</apiOperationClassifier></apiException></apiValueDef><apiDesc>
	 The <codeph>ContentElement</codeph> object from which the mirror region was derived.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:mirror:get"><apiName>mirror</apiName><shortdesc>
	 The EventDispatcher object to which events affecting the mirror region are mirrored.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.events:EventDispatcher</apiValueClassifier></apiValueDef><apiDesc>
	 The <codeph>EventDispatcher</codeph> object to which events affecting the mirror region are mirrored.
	 This includes mouse events that specifically occur in the mirror region, and all other events
	 that target the text line.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:nextRegion:get"><apiName>nextRegion</apiName><shortdesc>
	 The next TextLineMirrorRegion in the set derived from the text element, or null if the current region is the last mirror region 
	 in the set.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 The next TextLineMirrorRegion in the set derived from the text element, or <codeph>null</codeph> if the current region is the last mirror region 
	 in the set. May be on the same line or on another text line.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:previousRegion:get"><apiName>previousRegion</apiName><shortdesc>
	 The previous TextLineMirrorRegion in the set derived from the text element, or null if the current region is the first mirror 
	 region in the set.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLineMirrorRegion</apiValueClassifier></apiValueDef><apiDesc>
	 The previous TextLineMirrorRegion in the set derived from the text element, or <codeph>null</codeph> if the current region is the first mirror 
	 region in the set. May be on the same line or on another text line.
	 
	 </apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:TextLineMirrorRegion:textLine:get"><apiName>textLine</apiName><shortdesc>
	 The TextLine containing this mirror region.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="read"/><apiValueClassifier>flash.text.engine:TextLine</apiValueClassifier></apiValueDef><apiDesc>
	 The TextLine containing this mirror region.
	 
	 </apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:LineJustification"><apiName>LineJustification</apiName><shortdesc>
The LineJustification class is an enumeration of constant values used in setting the lineJustfication property 
of the TextJustifier subclasses.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>Object</apiBaseClassifier></apiClassifierDef><apiDesc>
The LineJustification class is an enumeration of constant values used in setting the <codeph>lineJustfication</codeph> property 
of the TextJustifier subclasses. 

</apiDesc></apiClassifierDetail><related-links><link href="flash.text.engine.xml#EastAsianJustifier/lineJustification"><linktext>EastAsianJustifier.lineJustification</linktext></link><link href="flash.text.engine.xml#SpaceJustifier/lineJustification"><linktext>SpaceJustifier.lineJustification</linktext></link></related-links><apiValue id="flash.text.engine:LineJustification:ALL_BUT_LAST"><apiName>ALL_BUT_LAST</apiName><shortdesc> 
	Directs the text engine to justify all but the last line.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allButLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Directs the text engine to justify all but the last line.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:ALL_INCLUDING_LAST"><apiName>ALL_INCLUDING_LAST</apiName><shortdesc> 
	Directs the text engine to justify all lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>allIncludingLast</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Directs the text engine to justify all lines.
	
	</apiDesc></apiValueDetail></apiValue><apiValue id="flash.text.engine:LineJustification:UNJUSTIFIED"><apiName>UNJUSTIFIED</apiName><shortdesc> 
	Directs the text engine to generate unjustified lines.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiAccess value="public"/><apiStatic/><apiData>unjustified</apiData><apiValueClassifier>String</apiValueClassifier></apiValueDef><apiDesc> 
	Directs the text engine to generate unjustified lines.
	
	</apiDesc></apiValueDetail></apiValue></apiClassifier><apiClassifier id="flash.text.engine:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
 The SpaceJustifier class represents properties that control the justification options for text lines in a text block.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiClassifierDetail><apiClassifierDef><apiAccess value="public"/><apiStatic/><apiFinal/><apiBaseClassifier>flash.text.engine:TextJustifier</apiBaseClassifier></apiClassifierDef><apiDesc>
 The SpaceJustifier class represents properties that control the justification options for text lines in a text block. 
 
 <p> Use the constructor <codeph>new SpaceJustifier()</codeph> to create a SpaceJustifier object before setting its properties. 
 Setting the properties of a SpaceJustifier object after you apply it to a TextBlock does not invalidate the TextBlock.</p>
 
 </apiDesc><example conref="examples\SpaceJustifierExample.as"> The following example uses letter spacing and justifies all of a block of text 
 except for the last line.
<codeblock>

package {
    import flash.display.Sprite;
    import flash.text.engine.TextBlock;
    import flash.text.engine.TextElement;
    import flash.text.engine.TextLine;
    import flash.text.engine.ElementFormat;
    import flash.text.engine.SpaceJustifier;
    import flash.text.engine.LineJustification;
    
    public class SpaceJustifierExample extends Sprite {
        
        public function SpaceJustifierExample():void {
            var str:String = "Lorem ipsum dolor sit amet, consectetur adipisicing elit, " +
            "sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut " +
            "enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut " +
            "aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit " +
            "in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur " +
            "sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt " +
            "mollit anim id est laborum.";
            
            var format:ElementFormat = new ElementFormat(null, 12, 0xCC0000);
            var textElement:TextElement = new TextElement(str, format);
            var spaceJustifier:SpaceJustifier = new SpaceJustifier("en", LineJustification.ALL_BUT_LAST);
            spaceJustifier.letterSpacing = true;
            var textBlock:TextBlock = new TextBlock();
            textBlock.content = textElement;
            textBlock.textJustifier = spaceJustifier;
            createLines(textBlock);
        }
        
        private function createLines(textBlock:TextBlock):void {
        
            var yPos = 20;
            var textLine:TextLine = textBlock.createTextLine (null, 150);
 
            while (textLine)
            {
                addChild(textLine);
                textLine.x = 15;
                yPos += textLine.textHeight+2;
                textLine.y = yPos;
                textLine = textBlock.createTextLine(textLine, 150);
            }        
        }
    }
}
</codeblock></example></apiClassifierDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link><link href="flash.text.engine.xml#TextBlock/textJustifier"><linktext>TextBlock.textJustifier</linktext></link><link href="flash.text.engine.xml#TextJustifier"><linktext>TextJustifier</linktext></link></related-links><apiConstructor id="flash.text.engine:SpaceJustifier:SpaceJustifier"><apiName>SpaceJustifier</apiName><shortdesc>
     Creates a SpaceJustifier object.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>
     </internal></asCustoms></prolog><apiConstructorDetail><apiConstructorDef><apiAccess value="public"/><apiException><apiDesc>The <codeph>locale</codeph> specified is <codeph>null</codeph> or too short to represent a valid locale.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiException><apiDesc>The <codeph>lineJustification</codeph> specified is not a member of <codeph>LineJustification</codeph>.
     </apiDesc><apiItemName>ArgumentError</apiItemName><apiOperationClassifier>ArgumentError</apiOperationClassifier></apiException><apiParam><apiItemName>locale</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>en</apiData><apiDesc>The locale to determine the justification rules.
	 The default value is <codeph>"en"</codeph>.
	 </apiDesc></apiParam><apiParam><apiItemName>lineJustification</apiItemName><apiOperationClassifier>String</apiOperationClassifier><apiData>unjustified</apiData><apiDesc>The type of line justification for the paragraph. 
	 Use <codeph>LineJustification</codeph> constants for this property.
     The default value is <codeph>LineJustification.UNJUSTIFIED</codeph>.
     </apiDesc></apiParam><apiParam><apiItemName>letterSpacing</apiItemName><apiOperationClassifier>Boolean</apiOperationClassifier><apiData>false</apiData><apiDesc>Specifies whether to use letter spacing during justification.
     The default value is <codeph>false</codeph>.
     </apiDesc></apiParam></apiConstructorDef><apiDesc>
     Creates a SpaceJustifier object. The LineJustification class contains constants for specifying the types of
     line justification that you can apply.
     
	 </apiDesc></apiConstructorDetail><related-links><link href="flash.text.engine.xml#LineJustification"><linktext>LineJustification</linktext></link></related-links></apiConstructor><apiOperation id="flash.text.engine:SpaceJustifier:clone"><apiName>clone</apiName><shortdesc>
	 Constructs a cloned copy of the SpaceJustifier.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata><asCustoms><internal>This class is currently stored as a live reference, but there is no way to track when its 
	 properties change.  This means that when changes are made, text blocks are not invalidated, which in 
	 the current implementation can lead to player crashes.  Even from the API perspective its wrong, as 
	 the affected text lines should be marked INVALID when format changes are made, but they�re not. The 
	 solution is to use a copy-on-set model.  When the object is passed in, the player copies it, so later
	 changes to the object that was passed in have no effect. The setter makes an internal copy of the 
	 array; the getter returns a copy of the internal copy. Operations like 
	 myBlock.textJustifier.spaceJustifier.letterSpacing = true will have no effect. Users who subclass 
	 this class in the future will need to use the clone() method to implement this technique of 
	 'locking' the format once it has been set.  
	 
     </internal></asCustoms></prolog><apiOperationDetail><apiOperationDef><apiAccess value="public"/><apiIsOverride/><apiReturn><apiDesc>A copy of the <codeph>SpaceJustifier</codeph> object.
	 </apiDesc><apiOperationClassifier>flash.text.engine:TextJustifier</apiOperationClassifier></apiReturn></apiOperationDef><apiDesc>
	 Constructs a cloned copy of the SpaceJustifier.
	 
	 </apiDesc></apiOperationDetail></apiOperation><apiValue id="flash.text.engine:SpaceJustifier:letterSpacing:get"><apiName>letterSpacing</apiName><shortdesc>
     Specifies whether to use letter spacing during justification.</shortdesc><prolog><asMetadata><apiVersion><apiLanguage version="3.0"/><apiPlatform description="" name="Flash" version="10"/><apiPlatform description="" name="AIR" version="1.5"/></apiVersion></asMetadata></prolog><apiValueDetail><apiValueDef><apiProperty/><apiAccess value="public"/><apiDynamic/><apiValueAccess value="readwrite"/><apiValueClassifier>Boolean</apiValueClassifier></apiValueDef><apiDesc>
     Specifies whether to use letter spacing during justification.
	 
     </apiDesc></apiValueDetail></apiValue></apiClassifier></apiPackage>